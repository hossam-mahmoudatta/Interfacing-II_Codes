
GROUP_EX1_UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002786  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002786  000027fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00003180  00000000  00000000  00002804  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001846  00000000  00000000  00005984  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  000071ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  0000730a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  0000747a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  000090c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00009fae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000ad5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000aebc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000b149  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b917  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e8       	ldi	r30, 0x86	; 134
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 0f 13 	call	0x261e	; 0x261e <main>
      7a:	0c 94 c1 13 	jmp	0x2782	; 0x2782 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 45 13 	jmp	0x268a	; 0x268a <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 61 13 	jmp	0x26c2	; 0x26c2 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 6d 13 	jmp	0x26da	; 0x26da <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 6d 13 	jmp	0x26da	; 0x26da <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 45 13 	jmp	0x268a	; 0x268a <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 61 13 	jmp	0x26c2	; 0x26c2 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 6d 13 	jmp	0x26da	; 0x26da <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 6d 13 	jmp	0x26da	; 0x26da <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 51 13 	jmp	0x26a2	; 0x26a2 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 6d 13 	jmp	0x26da	; 0x26da <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 55 13 	jmp	0x26aa	; 0x26aa <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 71 13 	jmp	0x26e2	; 0x26e2 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__pack_f+0x178>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__pack_f+0x172>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__pack_f+0x17c>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__pack_f+0x114>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__pack_f+0x76>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__pack_f+0xca>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__pack_f+0x86>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__pack_f+0x7e>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__pack_f+0x9c>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__pack_f+0x94>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__pack_f+0xbe>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__pack_f+0xee>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__pack_f+0xf6>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__pack_f+0xf6>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__pack_f+0x10e>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__pack_f+0x162>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__pack_f+0x172>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__pack_f+0x144>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__pack_f+0x154>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__pack_f+0x14c>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__pack_f+0x162>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__pack_f+0x164>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__pack_f+0x17c>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(uint32 baud_rate)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <UART_init+0x6>
     b3c:	00 d0       	rcall	.+0      	; 0xb3e <UART_init+0x8>
     b3e:	00 d0       	rcall	.+0      	; 0xb40 <UART_init+0xa>
     b40:	cd b7       	in	r28, 0x3d	; 61
     b42:	de b7       	in	r29, 0x3e	; 62
     b44:	6b 83       	std	Y+3, r22	; 0x03
     b46:	7c 83       	std	Y+4, r23	; 0x04
     b48:	8d 83       	std	Y+5, r24	; 0x05
     b4a:	9e 83       	std	Y+6, r25	; 0x06
	uint16 ubrr_value = 0;
     b4c:	1a 82       	std	Y+2, r1	; 0x02
     b4e:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
     b50:	eb e2       	ldi	r30, 0x2B	; 43
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	82 e0       	ldi	r24, 0x02	; 2
     b56:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
     b58:	ea e2       	ldi	r30, 0x2A	; 42
     b5a:	f0 e0       	ldi	r31, 0x00	; 0
     b5c:	88 e1       	ldi	r24, 0x18	; 24
     b5e:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
     b60:	e0 e4       	ldi	r30, 0x40	; 64
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	86 e8       	ldi	r24, 0x86	; 134
     b66:	80 83       	st	Z, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (baud_rate * 8UL))) - 1);
     b68:	8b 81       	ldd	r24, Y+3	; 0x03
     b6a:	9c 81       	ldd	r25, Y+4	; 0x04
     b6c:	ad 81       	ldd	r26, Y+5	; 0x05
     b6e:	be 81       	ldd	r27, Y+6	; 0x06
     b70:	88 0f       	add	r24, r24
     b72:	99 1f       	adc	r25, r25
     b74:	aa 1f       	adc	r26, r26
     b76:	bb 1f       	adc	r27, r27
     b78:	88 0f       	add	r24, r24
     b7a:	99 1f       	adc	r25, r25
     b7c:	aa 1f       	adc	r26, r26
     b7e:	bb 1f       	adc	r27, r27
     b80:	88 0f       	add	r24, r24
     b82:	99 1f       	adc	r25, r25
     b84:	aa 1f       	adc	r26, r26
     b86:	bb 1f       	adc	r27, r27
     b88:	9c 01       	movw	r18, r24
     b8a:	ad 01       	movw	r20, r26
     b8c:	80 e4       	ldi	r24, 0x40	; 64
     b8e:	92 e4       	ldi	r25, 0x42	; 66
     b90:	af e0       	ldi	r26, 0x0F	; 15
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	bc 01       	movw	r22, r24
     b96:	cd 01       	movw	r24, r26
     b98:	0e 94 23 13 	call	0x2646	; 0x2646 <__udivmodsi4>
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	01 97       	sbiw	r24, 0x01	; 1
     ba2:	9a 83       	std	Y+2, r25	; 0x02
     ba4:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
     ba6:	e0 e4       	ldi	r30, 0x40	; 64
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	89 81       	ldd	r24, Y+1	; 0x01
     bac:	9a 81       	ldd	r25, Y+2	; 0x02
     bae:	89 2f       	mov	r24, r25
     bb0:	99 27       	eor	r25, r25
     bb2:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
     bb4:	e9 e2       	ldi	r30, 0x29	; 41
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	89 81       	ldd	r24, Y+1	; 0x01
     bba:	80 83       	st	Z, r24
}
     bbc:	26 96       	adiw	r28, 0x06	; 6
     bbe:	0f b6       	in	r0, 0x3f	; 63
     bc0:	f8 94       	cli
     bc2:	de bf       	out	0x3e, r29	; 62
     bc4:	0f be       	out	0x3f, r0	; 63
     bc6:	cd bf       	out	0x3d, r28	; 61
     bc8:	cf 91       	pop	r28
     bca:	df 91       	pop	r29
     bcc:	08 95       	ret

00000bce <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
     bce:	df 93       	push	r29
     bd0:	cf 93       	push	r28
     bd2:	0f 92       	push	r0
     bd4:	cd b7       	in	r28, 0x3d	; 61
     bd6:	de b7       	in	r29, 0x3e	; 62
     bd8:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
     bda:	eb e2       	ldi	r30, 0x2B	; 43
     bdc:	f0 e0       	ldi	r31, 0x00	; 0
     bde:	80 81       	ld	r24, Z
     be0:	88 2f       	mov	r24, r24
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	80 72       	andi	r24, 0x20	; 32
     be6:	90 70       	andi	r25, 0x00	; 0
     be8:	00 97       	sbiw	r24, 0x00	; 0
     bea:	b9 f3       	breq	.-18     	; 0xbda <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
     bec:	ec e2       	ldi	r30, 0x2C	; 44
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	89 81       	ldd	r24, Y+1	; 0x01
     bf2:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
     bf4:	0f 90       	pop	r0
     bf6:	cf 91       	pop	r28
     bf8:	df 91       	pop	r29
     bfa:	08 95       	ret

00000bfc <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
     bfc:	df 93       	push	r29
     bfe:	cf 93       	push	r28
     c00:	cd b7       	in	r28, 0x3d	; 61
     c02:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
     c04:	eb e2       	ldi	r30, 0x2B	; 43
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 81       	ld	r24, Z
     c0a:	88 23       	and	r24, r24
     c0c:	dc f7       	brge	.-10     	; 0xc04 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
     c0e:	ec e2       	ldi	r30, 0x2C	; 44
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	80 81       	ld	r24, Z
}
     c14:	cf 91       	pop	r28
     c16:	df 91       	pop	r29
     c18:	08 95       	ret

00000c1a <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
     c1a:	df 93       	push	r29
     c1c:	cf 93       	push	r28
     c1e:	00 d0       	rcall	.+0      	; 0xc20 <UART_sendString+0x6>
     c20:	0f 92       	push	r0
     c22:	cd b7       	in	r28, 0x3d	; 61
     c24:	de b7       	in	r29, 0x3e	; 62
     c26:	9b 83       	std	Y+3, r25	; 0x03
     c28:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     c2a:	19 82       	std	Y+1, r1	; 0x01
     c2c:	0e c0       	rjmp	.+28     	; 0xc4a <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
     c2e:	89 81       	ldd	r24, Y+1	; 0x01
     c30:	28 2f       	mov	r18, r24
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	8a 81       	ldd	r24, Y+2	; 0x02
     c36:	9b 81       	ldd	r25, Y+3	; 0x03
     c38:	fc 01       	movw	r30, r24
     c3a:	e2 0f       	add	r30, r18
     c3c:	f3 1f       	adc	r31, r19
     c3e:	80 81       	ld	r24, Z
     c40:	0e 94 e7 05 	call	0xbce	; 0xbce <UART_sendByte>
		i++;
     c44:	89 81       	ldd	r24, Y+1	; 0x01
     c46:	8f 5f       	subi	r24, 0xFF	; 255
     c48:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
     c4a:	89 81       	ldd	r24, Y+1	; 0x01
     c4c:	28 2f       	mov	r18, r24
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	8a 81       	ldd	r24, Y+2	; 0x02
     c52:	9b 81       	ldd	r25, Y+3	; 0x03
     c54:	fc 01       	movw	r30, r24
     c56:	e2 0f       	add	r30, r18
     c58:	f3 1f       	adc	r31, r19
     c5a:	80 81       	ld	r24, Z
     c5c:	88 23       	and	r24, r24
     c5e:	39 f7       	brne	.-50     	; 0xc2e <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
     c60:	0f 90       	pop	r0
     c62:	0f 90       	pop	r0
     c64:	0f 90       	pop	r0
     c66:	cf 91       	pop	r28
     c68:	df 91       	pop	r29
     c6a:	08 95       	ret

00000c6c <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
     c6c:	0f 93       	push	r16
     c6e:	1f 93       	push	r17
     c70:	df 93       	push	r29
     c72:	cf 93       	push	r28
     c74:	00 d0       	rcall	.+0      	; 0xc76 <UART_receiveString+0xa>
     c76:	0f 92       	push	r0
     c78:	cd b7       	in	r28, 0x3d	; 61
     c7a:	de b7       	in	r29, 0x3e	; 62
     c7c:	9b 83       	std	Y+3, r25	; 0x03
     c7e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     c80:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
     c82:	89 81       	ldd	r24, Y+1	; 0x01
     c84:	28 2f       	mov	r18, r24
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	8a 81       	ldd	r24, Y+2	; 0x02
     c8a:	9b 81       	ldd	r25, Y+3	; 0x03
     c8c:	8c 01       	movw	r16, r24
     c8e:	02 0f       	add	r16, r18
     c90:	13 1f       	adc	r17, r19
     c92:	0e 94 fe 05 	call	0xbfc	; 0xbfc <UART_recieveByte>
     c96:	f8 01       	movw	r30, r16
     c98:	80 83       	st	Z, r24
     c9a:	0f c0       	rjmp	.+30     	; 0xcba <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
     c9c:	89 81       	ldd	r24, Y+1	; 0x01
     c9e:	8f 5f       	subi	r24, 0xFF	; 255
     ca0:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
     ca2:	89 81       	ldd	r24, Y+1	; 0x01
     ca4:	28 2f       	mov	r18, r24
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	8a 81       	ldd	r24, Y+2	; 0x02
     caa:	9b 81       	ldd	r25, Y+3	; 0x03
     cac:	8c 01       	movw	r16, r24
     cae:	02 0f       	add	r16, r18
     cb0:	13 1f       	adc	r17, r19
     cb2:	0e 94 fe 05 	call	0xbfc	; 0xbfc <UART_recieveByte>
     cb6:	f8 01       	movw	r30, r16
     cb8:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
     cba:	89 81       	ldd	r24, Y+1	; 0x01
     cbc:	28 2f       	mov	r18, r24
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	8a 81       	ldd	r24, Y+2	; 0x02
     cc2:	9b 81       	ldd	r25, Y+3	; 0x03
     cc4:	fc 01       	movw	r30, r24
     cc6:	e2 0f       	add	r30, r18
     cc8:	f3 1f       	adc	r31, r19
     cca:	80 81       	ld	r24, Z
     ccc:	83 32       	cpi	r24, 0x23	; 35
     cce:	31 f7       	brne	.-52     	; 0xc9c <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
     cd0:	89 81       	ldd	r24, Y+1	; 0x01
     cd2:	28 2f       	mov	r18, r24
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	8a 81       	ldd	r24, Y+2	; 0x02
     cd8:	9b 81       	ldd	r25, Y+3	; 0x03
     cda:	fc 01       	movw	r30, r24
     cdc:	e2 0f       	add	r30, r18
     cde:	f3 1f       	adc	r31, r19
     ce0:	10 82       	st	Z, r1
}
     ce2:	0f 90       	pop	r0
     ce4:	0f 90       	pop	r0
     ce6:	0f 90       	pop	r0
     ce8:	cf 91       	pop	r28
     cea:	df 91       	pop	r29
     cec:	1f 91       	pop	r17
     cee:	0f 91       	pop	r16
     cf0:	08 95       	ret

00000cf2 <SEGMENT_Init>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
SEGMENT_Error_t SEGMENT_Init(uint8 port_num) {
     cf2:	df 93       	push	r29
     cf4:	cf 93       	push	r28
     cf6:	00 d0       	rcall	.+0      	; 0xcf8 <SEGMENT_Init+0x6>
     cf8:	cd b7       	in	r28, 0x3d	; 61
     cfa:	de b7       	in	r29, 0x3e	; 62
     cfc:	8a 83       	std	Y+2, r24	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t SEGMENT_Driver_Checker = NULL;
     cfe:	19 82       	std	Y+1, r1	; 0x01

	if((port_num >= NUM_OF_PORTS)) {
     d00:	8a 81       	ldd	r24, Y+2	; 0x02
     d02:	84 30       	cpi	r24, 0x04	; 4
     d04:	18 f0       	brcs	.+6      	; 0xd0c <SEGMENT_Init+0x1a>
		SEGMENT_Driver_Checker = SEGMENT_WRONG_PORT_NUMBER;
     d06:	82 e0       	ldi	r24, 0x02	; 2
     d08:	89 83       	std	Y+1, r24	; 0x01
     d0a:	15 c0       	rjmp	.+42     	; 0xd36 <SEGMENT_Init+0x44>
	}
	else {
		/* Setup the pin direction as required */
		GPIO_setupPinDirection(port_num, PIN_0, PIN_OUTPUT);
     d0c:	8a 81       	ldd	r24, Y+2	; 0x02
     d0e:	60 e0       	ldi	r22, 0x00	; 0
     d10:	41 e0       	ldi	r20, 0x01	; 1
     d12:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(port_num, PIN_1, PIN_OUTPUT);
     d16:	8a 81       	ldd	r24, Y+2	; 0x02
     d18:	61 e0       	ldi	r22, 0x01	; 1
     d1a:	41 e0       	ldi	r20, 0x01	; 1
     d1c:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(port_num, PIN_2, PIN_OUTPUT);
     d20:	8a 81       	ldd	r24, Y+2	; 0x02
     d22:	62 e0       	ldi	r22, 0x02	; 2
     d24:	41 e0       	ldi	r20, 0x01	; 1
     d26:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(port_num, PIN_3, PIN_OUTPUT);
     d2a:	8a 81       	ldd	r24, Y+2	; 0x02
     d2c:	63 e0       	ldi	r22, 0x03	; 3
     d2e:	41 e0       	ldi	r20, 0x01	; 1
     d30:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <GPIO_setupPinDirection>
		SEGMENT_Driver_Checker = SEGMENT_OK;
     d34:	19 82       	std	Y+1, r1	; 0x01
	}
	return SEGMENT_Driver_Checker;
     d36:	89 81       	ldd	r24, Y+1	; 0x01
}
     d38:	0f 90       	pop	r0
     d3a:	0f 90       	pop	r0
     d3c:	cf 91       	pop	r28
     d3e:	df 91       	pop	r29
     d40:	08 95       	ret

00000d42 <SEGMENT_DISPLAY>:

SEGMENT_Error_t SEGMENT_DISPLAY(uint8 port_num, uint8 value) {
     d42:	df 93       	push	r29
     d44:	cf 93       	push	r28
     d46:	00 d0       	rcall	.+0      	; 0xd48 <SEGMENT_DISPLAY+0x6>
     d48:	00 d0       	rcall	.+0      	; 0xd4a <SEGMENT_DISPLAY+0x8>
     d4a:	0f 92       	push	r0
     d4c:	cd b7       	in	r28, 0x3d	; 61
     d4e:	de b7       	in	r29, 0x3e	; 62
     d50:	8a 83       	std	Y+2, r24	; 0x02
     d52:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t SEGMENT_Driver_Checker = NULL;
     d54:	19 82       	std	Y+1, r1	; 0x01

	if((port_num >= NUM_OF_PORTS)) {
     d56:	8a 81       	ldd	r24, Y+2	; 0x02
     d58:	84 30       	cpi	r24, 0x04	; 4
     d5a:	18 f0       	brcs	.+6      	; 0xd62 <SEGMENT_DISPLAY+0x20>
		SEGMENT_Driver_Checker = SEGMENT_WRONG_PORT_NUMBER;
     d5c:	82 e0       	ldi	r24, 0x02	; 2
     d5e:	89 83       	std	Y+1, r24	; 0x01
     d60:	24 c1       	rjmp	.+584    	; 0xfaa <SEGMENT_DISPLAY+0x268>
	}
	else if((value < 0 && value > 9)) {
		SEGMENT_Driver_Checker = SEGMENT_WRONG_VALUE;
	}
	else {
		switch(value) {
     d62:	8b 81       	ldd	r24, Y+3	; 0x03
     d64:	28 2f       	mov	r18, r24
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	3d 83       	std	Y+5, r19	; 0x05
     d6a:	2c 83       	std	Y+4, r18	; 0x04
     d6c:	8c 81       	ldd	r24, Y+4	; 0x04
     d6e:	9d 81       	ldd	r25, Y+5	; 0x05
     d70:	84 30       	cpi	r24, 0x04	; 4
     d72:	91 05       	cpc	r25, r1
     d74:	09 f4       	brne	.+2      	; 0xd78 <SEGMENT_DISPLAY+0x36>
     d76:	9b c0       	rjmp	.+310    	; 0xeae <SEGMENT_DISPLAY+0x16c>
     d78:	2c 81       	ldd	r18, Y+4	; 0x04
     d7a:	3d 81       	ldd	r19, Y+5	; 0x05
     d7c:	25 30       	cpi	r18, 0x05	; 5
     d7e:	31 05       	cpc	r19, r1
     d80:	ec f4       	brge	.+58     	; 0xdbc <SEGMENT_DISPLAY+0x7a>
     d82:	8c 81       	ldd	r24, Y+4	; 0x04
     d84:	9d 81       	ldd	r25, Y+5	; 0x05
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	91 05       	cpc	r25, r1
     d8a:	09 f4       	brne	.+2      	; 0xd8e <SEGMENT_DISPLAY+0x4c>
     d8c:	51 c0       	rjmp	.+162    	; 0xe30 <SEGMENT_DISPLAY+0xee>
     d8e:	2c 81       	ldd	r18, Y+4	; 0x04
     d90:	3d 81       	ldd	r19, Y+5	; 0x05
     d92:	22 30       	cpi	r18, 0x02	; 2
     d94:	31 05       	cpc	r19, r1
     d96:	2c f4       	brge	.+10     	; 0xda2 <SEGMENT_DISPLAY+0x60>
     d98:	8c 81       	ldd	r24, Y+4	; 0x04
     d9a:	9d 81       	ldd	r25, Y+5	; 0x05
     d9c:	00 97       	sbiw	r24, 0x00	; 0
     d9e:	99 f1       	breq	.+102    	; 0xe06 <SEGMENT_DISPLAY+0xc4>
     da0:	03 c1       	rjmp	.+518    	; 0xfa8 <SEGMENT_DISPLAY+0x266>
     da2:	2c 81       	ldd	r18, Y+4	; 0x04
     da4:	3d 81       	ldd	r19, Y+5	; 0x05
     da6:	22 30       	cpi	r18, 0x02	; 2
     da8:	31 05       	cpc	r19, r1
     daa:	09 f4       	brne	.+2      	; 0xdae <SEGMENT_DISPLAY+0x6c>
     dac:	56 c0       	rjmp	.+172    	; 0xe5a <SEGMENT_DISPLAY+0x118>
     dae:	8c 81       	ldd	r24, Y+4	; 0x04
     db0:	9d 81       	ldd	r25, Y+5	; 0x05
     db2:	83 30       	cpi	r24, 0x03	; 3
     db4:	91 05       	cpc	r25, r1
     db6:	09 f4       	brne	.+2      	; 0xdba <SEGMENT_DISPLAY+0x78>
     db8:	65 c0       	rjmp	.+202    	; 0xe84 <SEGMENT_DISPLAY+0x142>
     dba:	f6 c0       	rjmp	.+492    	; 0xfa8 <SEGMENT_DISPLAY+0x266>
     dbc:	2c 81       	ldd	r18, Y+4	; 0x04
     dbe:	3d 81       	ldd	r19, Y+5	; 0x05
     dc0:	27 30       	cpi	r18, 0x07	; 7
     dc2:	31 05       	cpc	r19, r1
     dc4:	09 f4       	brne	.+2      	; 0xdc8 <SEGMENT_DISPLAY+0x86>
     dc6:	b2 c0       	rjmp	.+356    	; 0xf2c <SEGMENT_DISPLAY+0x1ea>
     dc8:	8c 81       	ldd	r24, Y+4	; 0x04
     dca:	9d 81       	ldd	r25, Y+5	; 0x05
     dcc:	88 30       	cpi	r24, 0x08	; 8
     dce:	91 05       	cpc	r25, r1
     dd0:	6c f4       	brge	.+26     	; 0xdec <SEGMENT_DISPLAY+0xaa>
     dd2:	2c 81       	ldd	r18, Y+4	; 0x04
     dd4:	3d 81       	ldd	r19, Y+5	; 0x05
     dd6:	25 30       	cpi	r18, 0x05	; 5
     dd8:	31 05       	cpc	r19, r1
     dda:	09 f4       	brne	.+2      	; 0xdde <SEGMENT_DISPLAY+0x9c>
     ddc:	7d c0       	rjmp	.+250    	; 0xed8 <SEGMENT_DISPLAY+0x196>
     dde:	8c 81       	ldd	r24, Y+4	; 0x04
     de0:	9d 81       	ldd	r25, Y+5	; 0x05
     de2:	86 30       	cpi	r24, 0x06	; 6
     de4:	91 05       	cpc	r25, r1
     de6:	09 f4       	brne	.+2      	; 0xdea <SEGMENT_DISPLAY+0xa8>
     de8:	8c c0       	rjmp	.+280    	; 0xf02 <SEGMENT_DISPLAY+0x1c0>
     dea:	de c0       	rjmp	.+444    	; 0xfa8 <SEGMENT_DISPLAY+0x266>
     dec:	2c 81       	ldd	r18, Y+4	; 0x04
     dee:	3d 81       	ldd	r19, Y+5	; 0x05
     df0:	28 30       	cpi	r18, 0x08	; 8
     df2:	31 05       	cpc	r19, r1
     df4:	09 f4       	brne	.+2      	; 0xdf8 <SEGMENT_DISPLAY+0xb6>
     df6:	af c0       	rjmp	.+350    	; 0xf56 <SEGMENT_DISPLAY+0x214>
     df8:	8c 81       	ldd	r24, Y+4	; 0x04
     dfa:	9d 81       	ldd	r25, Y+5	; 0x05
     dfc:	89 30       	cpi	r24, 0x09	; 9
     dfe:	91 05       	cpc	r25, r1
     e00:	09 f4       	brne	.+2      	; 0xe04 <SEGMENT_DISPLAY+0xc2>
     e02:	be c0       	rjmp	.+380    	; 0xf80 <SEGMENT_DISPLAY+0x23e>
     e04:	d1 c0       	rjmp	.+418    	; 0xfa8 <SEGMENT_DISPLAY+0x266>
			case 0:
				GPIO_writePin(port_num, PIN_0, LOGIC_LOW);
     e06:	8a 81       	ldd	r24, Y+2	; 0x02
     e08:	60 e0       	ldi	r22, 0x00	; 0
     e0a:	40 e0       	ldi	r20, 0x00	; 0
     e0c:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
     e10:	8a 81       	ldd	r24, Y+2	; 0x02
     e12:	61 e0       	ldi	r22, 0x01	; 1
     e14:	40 e0       	ldi	r20, 0x00	; 0
     e16:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
     e1a:	8a 81       	ldd	r24, Y+2	; 0x02
     e1c:	62 e0       	ldi	r22, 0x02	; 2
     e1e:	40 e0       	ldi	r20, 0x00	; 0
     e20:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
     e24:	8a 81       	ldd	r24, Y+2	; 0x02
     e26:	63 e0       	ldi	r22, 0x03	; 3
     e28:	40 e0       	ldi	r20, 0x00	; 0
     e2a:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <GPIO_writePin>
     e2e:	bc c0       	rjmp	.+376    	; 0xfa8 <SEGMENT_DISPLAY+0x266>
				break;
			case 1:
				GPIO_writePin(port_num, PIN_0, LOGIC_HIGH);
     e30:	8a 81       	ldd	r24, Y+2	; 0x02
     e32:	60 e0       	ldi	r22, 0x00	; 0
     e34:	41 e0       	ldi	r20, 0x01	; 1
     e36:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
     e3a:	8a 81       	ldd	r24, Y+2	; 0x02
     e3c:	61 e0       	ldi	r22, 0x01	; 1
     e3e:	40 e0       	ldi	r20, 0x00	; 0
     e40:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
     e44:	8a 81       	ldd	r24, Y+2	; 0x02
     e46:	62 e0       	ldi	r22, 0x02	; 2
     e48:	40 e0       	ldi	r20, 0x00	; 0
     e4a:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
     e4e:	8a 81       	ldd	r24, Y+2	; 0x02
     e50:	63 e0       	ldi	r22, 0x03	; 3
     e52:	40 e0       	ldi	r20, 0x00	; 0
     e54:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <GPIO_writePin>
     e58:	a7 c0       	rjmp	.+334    	; 0xfa8 <SEGMENT_DISPLAY+0x266>
				break;
			case 2:
				GPIO_writePin(port_num, PIN_0, LOGIC_LOW);
     e5a:	8a 81       	ldd	r24, Y+2	; 0x02
     e5c:	60 e0       	ldi	r22, 0x00	; 0
     e5e:	40 e0       	ldi	r20, 0x00	; 0
     e60:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_HIGH);
     e64:	8a 81       	ldd	r24, Y+2	; 0x02
     e66:	61 e0       	ldi	r22, 0x01	; 1
     e68:	41 e0       	ldi	r20, 0x01	; 1
     e6a:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	62 e0       	ldi	r22, 0x02	; 2
     e72:	40 e0       	ldi	r20, 0x00	; 0
     e74:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
     e78:	8a 81       	ldd	r24, Y+2	; 0x02
     e7a:	63 e0       	ldi	r22, 0x03	; 3
     e7c:	40 e0       	ldi	r20, 0x00	; 0
     e7e:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <GPIO_writePin>
     e82:	92 c0       	rjmp	.+292    	; 0xfa8 <SEGMENT_DISPLAY+0x266>
				break;
			case 3:
				GPIO_writePin(port_num, PIN_0, LOGIC_HIGH);
     e84:	8a 81       	ldd	r24, Y+2	; 0x02
     e86:	60 e0       	ldi	r22, 0x00	; 0
     e88:	41 e0       	ldi	r20, 0x01	; 1
     e8a:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_HIGH);
     e8e:	8a 81       	ldd	r24, Y+2	; 0x02
     e90:	61 e0       	ldi	r22, 0x01	; 1
     e92:	41 e0       	ldi	r20, 0x01	; 1
     e94:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
     e98:	8a 81       	ldd	r24, Y+2	; 0x02
     e9a:	62 e0       	ldi	r22, 0x02	; 2
     e9c:	40 e0       	ldi	r20, 0x00	; 0
     e9e:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
     ea2:	8a 81       	ldd	r24, Y+2	; 0x02
     ea4:	63 e0       	ldi	r22, 0x03	; 3
     ea6:	40 e0       	ldi	r20, 0x00	; 0
     ea8:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <GPIO_writePin>
     eac:	7d c0       	rjmp	.+250    	; 0xfa8 <SEGMENT_DISPLAY+0x266>
				break;
			case 4:
				GPIO_writePin(port_num, PIN_0, LOGIC_LOW);
     eae:	8a 81       	ldd	r24, Y+2	; 0x02
     eb0:	60 e0       	ldi	r22, 0x00	; 0
     eb2:	40 e0       	ldi	r20, 0x00	; 0
     eb4:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
     eb8:	8a 81       	ldd	r24, Y+2	; 0x02
     eba:	61 e0       	ldi	r22, 0x01	; 1
     ebc:	40 e0       	ldi	r20, 0x00	; 0
     ebe:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_HIGH);
     ec2:	8a 81       	ldd	r24, Y+2	; 0x02
     ec4:	62 e0       	ldi	r22, 0x02	; 2
     ec6:	41 e0       	ldi	r20, 0x01	; 1
     ec8:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
     ecc:	8a 81       	ldd	r24, Y+2	; 0x02
     ece:	63 e0       	ldi	r22, 0x03	; 3
     ed0:	40 e0       	ldi	r20, 0x00	; 0
     ed2:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <GPIO_writePin>
     ed6:	68 c0       	rjmp	.+208    	; 0xfa8 <SEGMENT_DISPLAY+0x266>
				break;
			case 5:
				GPIO_writePin(port_num, PIN_0, LOGIC_HIGH);
     ed8:	8a 81       	ldd	r24, Y+2	; 0x02
     eda:	60 e0       	ldi	r22, 0x00	; 0
     edc:	41 e0       	ldi	r20, 0x01	; 1
     ede:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
     ee2:	8a 81       	ldd	r24, Y+2	; 0x02
     ee4:	61 e0       	ldi	r22, 0x01	; 1
     ee6:	40 e0       	ldi	r20, 0x00	; 0
     ee8:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_HIGH);
     eec:	8a 81       	ldd	r24, Y+2	; 0x02
     eee:	62 e0       	ldi	r22, 0x02	; 2
     ef0:	41 e0       	ldi	r20, 0x01	; 1
     ef2:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
     ef6:	8a 81       	ldd	r24, Y+2	; 0x02
     ef8:	63 e0       	ldi	r22, 0x03	; 3
     efa:	40 e0       	ldi	r20, 0x00	; 0
     efc:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <GPIO_writePin>
     f00:	53 c0       	rjmp	.+166    	; 0xfa8 <SEGMENT_DISPLAY+0x266>
				break;
			case 6:
				GPIO_writePin(port_num, PIN_0, LOGIC_LOW);
     f02:	8a 81       	ldd	r24, Y+2	; 0x02
     f04:	60 e0       	ldi	r22, 0x00	; 0
     f06:	40 e0       	ldi	r20, 0x00	; 0
     f08:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_HIGH);
     f0c:	8a 81       	ldd	r24, Y+2	; 0x02
     f0e:	61 e0       	ldi	r22, 0x01	; 1
     f10:	41 e0       	ldi	r20, 0x01	; 1
     f12:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_HIGH);
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	62 e0       	ldi	r22, 0x02	; 2
     f1a:	41 e0       	ldi	r20, 0x01	; 1
     f1c:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
     f20:	8a 81       	ldd	r24, Y+2	; 0x02
     f22:	63 e0       	ldi	r22, 0x03	; 3
     f24:	40 e0       	ldi	r20, 0x00	; 0
     f26:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <GPIO_writePin>
     f2a:	3e c0       	rjmp	.+124    	; 0xfa8 <SEGMENT_DISPLAY+0x266>
				break;
			case 7:
				GPIO_writePin(port_num, PIN_0, LOGIC_HIGH);
     f2c:	8a 81       	ldd	r24, Y+2	; 0x02
     f2e:	60 e0       	ldi	r22, 0x00	; 0
     f30:	41 e0       	ldi	r20, 0x01	; 1
     f32:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_HIGH);
     f36:	8a 81       	ldd	r24, Y+2	; 0x02
     f38:	61 e0       	ldi	r22, 0x01	; 1
     f3a:	41 e0       	ldi	r20, 0x01	; 1
     f3c:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_HIGH);
     f40:	8a 81       	ldd	r24, Y+2	; 0x02
     f42:	62 e0       	ldi	r22, 0x02	; 2
     f44:	41 e0       	ldi	r20, 0x01	; 1
     f46:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
     f4a:	8a 81       	ldd	r24, Y+2	; 0x02
     f4c:	63 e0       	ldi	r22, 0x03	; 3
     f4e:	40 e0       	ldi	r20, 0x00	; 0
     f50:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <GPIO_writePin>
     f54:	29 c0       	rjmp	.+82     	; 0xfa8 <SEGMENT_DISPLAY+0x266>
				break;
			case 8:
				GPIO_writePin(port_num, PIN_0, LOGIC_LOW);
     f56:	8a 81       	ldd	r24, Y+2	; 0x02
     f58:	60 e0       	ldi	r22, 0x00	; 0
     f5a:	40 e0       	ldi	r20, 0x00	; 0
     f5c:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
     f60:	8a 81       	ldd	r24, Y+2	; 0x02
     f62:	61 e0       	ldi	r22, 0x01	; 1
     f64:	40 e0       	ldi	r20, 0x00	; 0
     f66:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
     f6a:	8a 81       	ldd	r24, Y+2	; 0x02
     f6c:	62 e0       	ldi	r22, 0x02	; 2
     f6e:	40 e0       	ldi	r20, 0x00	; 0
     f70:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_HIGH);
     f74:	8a 81       	ldd	r24, Y+2	; 0x02
     f76:	63 e0       	ldi	r22, 0x03	; 3
     f78:	41 e0       	ldi	r20, 0x01	; 1
     f7a:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <GPIO_writePin>
     f7e:	14 c0       	rjmp	.+40     	; 0xfa8 <SEGMENT_DISPLAY+0x266>
				break;
			case 9:
				GPIO_writePin(port_num, PIN_0, LOGIC_HIGH);
     f80:	8a 81       	ldd	r24, Y+2	; 0x02
     f82:	60 e0       	ldi	r22, 0x00	; 0
     f84:	41 e0       	ldi	r20, 0x01	; 1
     f86:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
     f8a:	8a 81       	ldd	r24, Y+2	; 0x02
     f8c:	61 e0       	ldi	r22, 0x01	; 1
     f8e:	40 e0       	ldi	r20, 0x00	; 0
     f90:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
     f94:	8a 81       	ldd	r24, Y+2	; 0x02
     f96:	62 e0       	ldi	r22, 0x02	; 2
     f98:	40 e0       	ldi	r20, 0x00	; 0
     f9a:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_HIGH);
     f9e:	8a 81       	ldd	r24, Y+2	; 0x02
     fa0:	63 e0       	ldi	r22, 0x03	; 3
     fa2:	41 e0       	ldi	r20, 0x01	; 1
     fa4:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <GPIO_writePin>
				break;
		}
		SEGMENT_Driver_Checker = SEGMENT_OK;
     fa8:	19 82       	std	Y+1, r1	; 0x01
	}
	return SEGMENT_Driver_Checker;
     faa:	89 81       	ldd	r24, Y+1	; 0x01
}
     fac:	0f 90       	pop	r0
     fae:	0f 90       	pop	r0
     fb0:	0f 90       	pop	r0
     fb2:	0f 90       	pop	r0
     fb4:	0f 90       	pop	r0
     fb6:	cf 91       	pop	r28
     fb8:	df 91       	pop	r29
     fba:	08 95       	ret

00000fbc <LED_Init>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
LED_Error_t LED_Init(uint8 port_num, uint8 pin_num) {
     fbc:	df 93       	push	r29
     fbe:	cf 93       	push	r28
     fc0:	00 d0       	rcall	.+0      	; 0xfc2 <LED_Init+0x6>
     fc2:	0f 92       	push	r0
     fc4:	cd b7       	in	r28, 0x3d	; 61
     fc6:	de b7       	in	r29, 0x3e	; 62
     fc8:	8a 83       	std	Y+2, r24	; 0x02
     fca:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t LED_Driver_Checker = NULL;
     fcc:	19 82       	std	Y+1, r1	; 0x01
	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
     fce:	8b 81       	ldd	r24, Y+3	; 0x03
     fd0:	88 30       	cpi	r24, 0x08	; 8
     fd2:	18 f0       	brcs	.+6      	; 0xfda <LED_Init+0x1e>
		LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	89 83       	std	Y+1, r24	; 0x01
     fd8:	0c c0       	rjmp	.+24     	; 0xff2 <LED_Init+0x36>
	}
	else if((port_num >= NUM_OF_PORTS)) {
     fda:	8a 81       	ldd	r24, Y+2	; 0x02
     fdc:	84 30       	cpi	r24, 0x04	; 4
     fde:	18 f0       	brcs	.+6      	; 0xfe6 <LED_Init+0x2a>
		LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
     fe0:	82 e0       	ldi	r24, 0x02	; 2
     fe2:	89 83       	std	Y+1, r24	; 0x01
     fe4:	06 c0       	rjmp	.+12     	; 0xff2 <LED_Init+0x36>
	}
	else {
		/* Setup the pin direction as required */
		GPIO_setupPinDirection(port_num, pin_num, PIN_OUTPUT);
     fe6:	8a 81       	ldd	r24, Y+2	; 0x02
     fe8:	6b 81       	ldd	r22, Y+3	; 0x03
     fea:	41 e0       	ldi	r20, 0x01	; 1
     fec:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <GPIO_setupPinDirection>
		LED_Driver_Checker = LED_OK;
     ff0:	19 82       	std	Y+1, r1	; 0x01
	}
	return LED_Driver_Checker;
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
}
     ff4:	0f 90       	pop	r0
     ff6:	0f 90       	pop	r0
     ff8:	0f 90       	pop	r0
     ffa:	cf 91       	pop	r28
     ffc:	df 91       	pop	r29
     ffe:	08 95       	ret

00001000 <LED_On>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
LED_Error_t LED_On(uint8 port_num, uint8 pin_num) {
    1000:	df 93       	push	r29
    1002:	cf 93       	push	r28
    1004:	00 d0       	rcall	.+0      	; 0x1006 <LED_On+0x6>
    1006:	0f 92       	push	r0
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62
    100c:	8a 83       	std	Y+2, r24	; 0x02
    100e:	6b 83       	std	Y+3, r22	; 0x03

	uint8_t LED_Driver_Checker = NULL;
    1010:	19 82       	std	Y+1, r1	; 0x01
		if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    1012:	8b 81       	ldd	r24, Y+3	; 0x03
    1014:	88 30       	cpi	r24, 0x08	; 8
    1016:	18 f0       	brcs	.+6      	; 0x101e <LED_On+0x1e>
			LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	89 83       	std	Y+1, r24	; 0x01
    101c:	0c c0       	rjmp	.+24     	; 0x1036 <LED_On+0x36>
		}
		else if((port_num >= NUM_OF_PORTS)) {
    101e:	8a 81       	ldd	r24, Y+2	; 0x02
    1020:	84 30       	cpi	r24, 0x04	; 4
    1022:	18 f0       	brcs	.+6      	; 0x102a <LED_On+0x2a>
			LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    1024:	82 e0       	ldi	r24, 0x02	; 2
    1026:	89 83       	std	Y+1, r24	; 0x01
    1028:	06 c0       	rjmp	.+12     	; 0x1036 <LED_On+0x36>
		}
		else {
			/* Setup the pin direction as required */
			GPIO_writePin(port_num, pin_num, LOGIC_HIGH);
    102a:	8a 81       	ldd	r24, Y+2	; 0x02
    102c:	6b 81       	ldd	r22, Y+3	; 0x03
    102e:	41 e0       	ldi	r20, 0x01	; 1
    1030:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <GPIO_writePin>
			LED_Driver_Checker = LED_OK;
    1034:	19 82       	std	Y+1, r1	; 0x01
		}
		return LED_Driver_Checker;
    1036:	89 81       	ldd	r24, Y+1	; 0x01
}
    1038:	0f 90       	pop	r0
    103a:	0f 90       	pop	r0
    103c:	0f 90       	pop	r0
    103e:	cf 91       	pop	r28
    1040:	df 91       	pop	r29
    1042:	08 95       	ret

00001044 <LED_Off>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
LED_Error_t LED_Off(uint8 port_num, uint8 pin_num) {
    1044:	df 93       	push	r29
    1046:	cf 93       	push	r28
    1048:	00 d0       	rcall	.+0      	; 0x104a <LED_Off+0x6>
    104a:	0f 92       	push	r0
    104c:	cd b7       	in	r28, 0x3d	; 61
    104e:	de b7       	in	r29, 0x3e	; 62
    1050:	8a 83       	std	Y+2, r24	; 0x02
    1052:	6b 83       	std	Y+3, r22	; 0x03

	uint8_t LED_Driver_Checker = NULL;
    1054:	19 82       	std	Y+1, r1	; 0x01
		if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    1056:	8b 81       	ldd	r24, Y+3	; 0x03
    1058:	88 30       	cpi	r24, 0x08	; 8
    105a:	18 f0       	brcs	.+6      	; 0x1062 <LED_Off+0x1e>
			LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	89 83       	std	Y+1, r24	; 0x01
    1060:	0c c0       	rjmp	.+24     	; 0x107a <LED_Off+0x36>
		}
		else if((port_num >= NUM_OF_PORTS)) {
    1062:	8a 81       	ldd	r24, Y+2	; 0x02
    1064:	84 30       	cpi	r24, 0x04	; 4
    1066:	18 f0       	brcs	.+6      	; 0x106e <LED_Off+0x2a>
			LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    1068:	82 e0       	ldi	r24, 0x02	; 2
    106a:	89 83       	std	Y+1, r24	; 0x01
    106c:	06 c0       	rjmp	.+12     	; 0x107a <LED_Off+0x36>
		}
		else {
			/* Setup the pin direction as required */
			GPIO_writePin(port_num, pin_num, LOGIC_LOW);
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	6b 81       	ldd	r22, Y+3	; 0x03
    1072:	40 e0       	ldi	r20, 0x00	; 0
    1074:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <GPIO_writePin>
			LED_Driver_Checker = LED_OK;
    1078:	19 82       	std	Y+1, r1	; 0x01
		}
		return LED_Driver_Checker;
    107a:	89 81       	ldd	r24, Y+1	; 0x01
}
    107c:	0f 90       	pop	r0
    107e:	0f 90       	pop	r0
    1080:	0f 90       	pop	r0
    1082:	cf 91       	pop	r28
    1084:	df 91       	pop	r29
    1086:	08 95       	ret

00001088 <LED_Toggle>:

LED_Error_t LED_Toggle(uint8 port_num, uint8 pin_num) {
    1088:	df 93       	push	r29
    108a:	cf 93       	push	r28
    108c:	00 d0       	rcall	.+0      	; 0x108e <LED_Toggle+0x6>
    108e:	0f 92       	push	r0
    1090:	cd b7       	in	r28, 0x3d	; 61
    1092:	de b7       	in	r29, 0x3e	; 62
    1094:	8a 83       	std	Y+2, r24	; 0x02
    1096:	6b 83       	std	Y+3, r22	; 0x03

	uint8_t LED_Driver_Checker = NULL;
    1098:	19 82       	std	Y+1, r1	; 0x01
		if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    109a:	8b 81       	ldd	r24, Y+3	; 0x03
    109c:	88 30       	cpi	r24, 0x08	; 8
    109e:	18 f0       	brcs	.+6      	; 0x10a6 <LED_Toggle+0x1e>
			LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	89 83       	std	Y+1, r24	; 0x01
    10a4:	0b c0       	rjmp	.+22     	; 0x10bc <LED_Toggle+0x34>
		}
		else if((port_num >= NUM_OF_PORTS)) {
    10a6:	8a 81       	ldd	r24, Y+2	; 0x02
    10a8:	84 30       	cpi	r24, 0x04	; 4
    10aa:	18 f0       	brcs	.+6      	; 0x10b2 <LED_Toggle+0x2a>
			LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    10ac:	82 e0       	ldi	r24, 0x02	; 2
    10ae:	89 83       	std	Y+1, r24	; 0x01
    10b0:	05 c0       	rjmp	.+10     	; 0x10bc <LED_Toggle+0x34>
		}
		else {
			/* Setup the pin direction as required */
			GPIO_togglePin(port_num, pin_num);
    10b2:	8a 81       	ldd	r24, Y+2	; 0x02
    10b4:	6b 81       	ldd	r22, Y+3	; 0x03
    10b6:	0e 94 a4 10 	call	0x2148	; 0x2148 <GPIO_togglePin>
			LED_Driver_Checker = LED_OK;
    10ba:	19 82       	std	Y+1, r1	; 0x01
		}
		return LED_Driver_Checker;
    10bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    10be:	0f 90       	pop	r0
    10c0:	0f 90       	pop	r0
    10c2:	0f 90       	pop	r0
    10c4:	cf 91       	pop	r28
    10c6:	df 91       	pop	r29
    10c8:	08 95       	ret

000010ca <LCD_Init>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void LCD_Init(void) {
    10ca:	df 93       	push	r29
    10cc:	cf 93       	push	r28
    10ce:	cd b7       	in	r28, 0x3d	; 61
    10d0:	de b7       	in	r29, 0x3e	; 62
    10d2:	2e 97       	sbiw	r28, 0x0e	; 14
    10d4:	0f b6       	in	r0, 0x3f	; 63
    10d6:	f8 94       	cli
    10d8:	de bf       	out	0x3e, r29	; 62
    10da:	0f be       	out	0x3f, r0	; 63
    10dc:	cd bf       	out	0x3d, r28	; 61
		// Initialize RS Pin
		GPIO_setupPinDirection(LCD_INIT_PORT, LCD_RS, PIN_OUTPUT);
    10de:	83 e0       	ldi	r24, 0x03	; 3
    10e0:	64 e0       	ldi	r22, 0x04	; 4
    10e2:	41 e0       	ldi	r20, 0x01	; 1
    10e4:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <GPIO_setupPinDirection>

		// Initialize Enable Pin
		GPIO_setupPinDirection(LCD_INIT_PORT, LCD_ENABLE, PIN_OUTPUT);
    10e8:	83 e0       	ldi	r24, 0x03	; 3
    10ea:	65 e0       	ldi	r22, 0x05	; 5
    10ec:	41 e0       	ldi	r20, 0x01	; 1
    10ee:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <GPIO_setupPinDirection>

		// Setup the port and pins for the data pins inside the LCD
		GPIO_setupPortDirection(LCD_DATA_PORT, PORT_OUTPUT);
    10f2:	82 e0       	ldi	r24, 0x02	; 2
    10f4:	6f ef       	ldi	r22, 0xFF	; 255
    10f6:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <GPIO_setupPortDirection>
    10fa:	80 e0       	ldi	r24, 0x00	; 0
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	a0 ea       	ldi	r26, 0xA0	; 160
    1100:	b1 e4       	ldi	r27, 0x41	; 65
    1102:	8b 87       	std	Y+11, r24	; 0x0b
    1104:	9c 87       	std	Y+12, r25	; 0x0c
    1106:	ad 87       	std	Y+13, r26	; 0x0d
    1108:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    110a:	6b 85       	ldd	r22, Y+11	; 0x0b
    110c:	7c 85       	ldd	r23, Y+12	; 0x0c
    110e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1110:	9e 85       	ldd	r25, Y+14	; 0x0e
    1112:	20 e0       	ldi	r18, 0x00	; 0
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	4a e7       	ldi	r20, 0x7A	; 122
    1118:	53 e4       	ldi	r21, 0x43	; 67
    111a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    111e:	dc 01       	movw	r26, r24
    1120:	cb 01       	movw	r24, r22
    1122:	8f 83       	std	Y+7, r24	; 0x07
    1124:	98 87       	std	Y+8, r25	; 0x08
    1126:	a9 87       	std	Y+9, r26	; 0x09
    1128:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    112a:	6f 81       	ldd	r22, Y+7	; 0x07
    112c:	78 85       	ldd	r23, Y+8	; 0x08
    112e:	89 85       	ldd	r24, Y+9	; 0x09
    1130:	9a 85       	ldd	r25, Y+10	; 0x0a
    1132:	20 e0       	ldi	r18, 0x00	; 0
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	40 e8       	ldi	r20, 0x80	; 128
    1138:	5f e3       	ldi	r21, 0x3F	; 63
    113a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    113e:	88 23       	and	r24, r24
    1140:	2c f4       	brge	.+10     	; 0x114c <LCD_Init+0x82>
		__ticks = 1;
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	9e 83       	std	Y+6, r25	; 0x06
    1148:	8d 83       	std	Y+5, r24	; 0x05
    114a:	3f c0       	rjmp	.+126    	; 0x11ca <LCD_Init+0x100>
	else if (__tmp > 65535)
    114c:	6f 81       	ldd	r22, Y+7	; 0x07
    114e:	78 85       	ldd	r23, Y+8	; 0x08
    1150:	89 85       	ldd	r24, Y+9	; 0x09
    1152:	9a 85       	ldd	r25, Y+10	; 0x0a
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	3f ef       	ldi	r19, 0xFF	; 255
    1158:	4f e7       	ldi	r20, 0x7F	; 127
    115a:	57 e4       	ldi	r21, 0x47	; 71
    115c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1160:	18 16       	cp	r1, r24
    1162:	4c f5       	brge	.+82     	; 0x11b6 <LCD_Init+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1164:	6b 85       	ldd	r22, Y+11	; 0x0b
    1166:	7c 85       	ldd	r23, Y+12	; 0x0c
    1168:	8d 85       	ldd	r24, Y+13	; 0x0d
    116a:	9e 85       	ldd	r25, Y+14	; 0x0e
    116c:	20 e0       	ldi	r18, 0x00	; 0
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	40 e2       	ldi	r20, 0x20	; 32
    1172:	51 e4       	ldi	r21, 0x41	; 65
    1174:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1178:	dc 01       	movw	r26, r24
    117a:	cb 01       	movw	r24, r22
    117c:	bc 01       	movw	r22, r24
    117e:	cd 01       	movw	r24, r26
    1180:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1184:	dc 01       	movw	r26, r24
    1186:	cb 01       	movw	r24, r22
    1188:	9e 83       	std	Y+6, r25	; 0x06
    118a:	8d 83       	std	Y+5, r24	; 0x05
    118c:	0f c0       	rjmp	.+30     	; 0x11ac <LCD_Init+0xe2>
    118e:	89 e1       	ldi	r24, 0x19	; 25
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	9c 83       	std	Y+4, r25	; 0x04
    1194:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1196:	8b 81       	ldd	r24, Y+3	; 0x03
    1198:	9c 81       	ldd	r25, Y+4	; 0x04
    119a:	01 97       	sbiw	r24, 0x01	; 1
    119c:	f1 f7       	brne	.-4      	; 0x119a <LCD_Init+0xd0>
    119e:	9c 83       	std	Y+4, r25	; 0x04
    11a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11a2:	8d 81       	ldd	r24, Y+5	; 0x05
    11a4:	9e 81       	ldd	r25, Y+6	; 0x06
    11a6:	01 97       	sbiw	r24, 0x01	; 1
    11a8:	9e 83       	std	Y+6, r25	; 0x06
    11aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ac:	8d 81       	ldd	r24, Y+5	; 0x05
    11ae:	9e 81       	ldd	r25, Y+6	; 0x06
    11b0:	00 97       	sbiw	r24, 0x00	; 0
    11b2:	69 f7       	brne	.-38     	; 0x118e <LCD_Init+0xc4>
    11b4:	14 c0       	rjmp	.+40     	; 0x11de <LCD_Init+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11b6:	6f 81       	ldd	r22, Y+7	; 0x07
    11b8:	78 85       	ldd	r23, Y+8	; 0x08
    11ba:	89 85       	ldd	r24, Y+9	; 0x09
    11bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    11be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11c2:	dc 01       	movw	r26, r24
    11c4:	cb 01       	movw	r24, r22
    11c6:	9e 83       	std	Y+6, r25	; 0x06
    11c8:	8d 83       	std	Y+5, r24	; 0x05
    11ca:	8d 81       	ldd	r24, Y+5	; 0x05
    11cc:	9e 81       	ldd	r25, Y+6	; 0x06
    11ce:	9a 83       	std	Y+2, r25	; 0x02
    11d0:	89 83       	std	Y+1, r24	; 0x01
    11d2:	89 81       	ldd	r24, Y+1	; 0x01
    11d4:	9a 81       	ldd	r25, Y+2	; 0x02
    11d6:	01 97       	sbiw	r24, 0x01	; 1
    11d8:	f1 f7       	brne	.-4      	; 0x11d6 <LCD_Init+0x10c>
    11da:	9a 83       	std	Y+2, r25	; 0x02
    11dc:	89 83       	std	Y+1, r24	; 0x01

		// LCD Power On Internal Delay is 15 mS
		_delay_ms(20);

		//Initializing Sending Commands
		LCD_sendCommand(LCD_TWO_LINE_EIGHT_BIT);
    11de:	88 e3       	ldi	r24, 0x38	; 56
    11e0:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_sendCommand>
		LCD_sendCommand(LCD_CURSOR_OFF);
    11e4:	8c e0       	ldi	r24, 0x0C	; 12
    11e6:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_sendCommand>
		LCD_sendCommand(LCD_CLEAR_DISPLAY);
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_sendCommand>
}
    11f0:	2e 96       	adiw	r28, 0x0e	; 14
    11f2:	0f b6       	in	r0, 0x3f	; 63
    11f4:	f8 94       	cli
    11f6:	de bf       	out	0x3e, r29	; 62
    11f8:	0f be       	out	0x3f, r0	; 63
    11fa:	cd bf       	out	0x3d, r28	; 61
    11fc:	cf 91       	pop	r28
    11fe:	df 91       	pop	r29
    1200:	08 95       	ret

00001202 <LCD_sendCommand>:


void LCD_sendCommand(uint8 command) {
    1202:	df 93       	push	r29
    1204:	cf 93       	push	r28
    1206:	cd b7       	in	r28, 0x3d	; 61
    1208:	de b7       	in	r29, 0x3e	; 62
    120a:	e9 97       	sbiw	r28, 0x39	; 57
    120c:	0f b6       	in	r0, 0x3f	; 63
    120e:	f8 94       	cli
    1210:	de bf       	out	0x3e, r29	; 62
    1212:	0f be       	out	0x3f, r0	; 63
    1214:	cd bf       	out	0x3d, r28	; 61
    1216:	89 af       	std	Y+57, r24	; 0x39
	// Set RS Pin to '0'
	GPIO_writePin(LCD_INIT_PORT, LCD_RS, LOGIC_LOW);
    1218:	83 e0       	ldi	r24, 0x03	; 3
    121a:	64 e0       	ldi	r22, 0x04	; 4
    121c:	40 e0       	ldi	r20, 0x00	; 0
    121e:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <GPIO_writePin>
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	a0 e8       	ldi	r26, 0x80	; 128
    1228:	bf e3       	ldi	r27, 0x3F	; 63
    122a:	8d ab       	std	Y+53, r24	; 0x35
    122c:	9e ab       	std	Y+54, r25	; 0x36
    122e:	af ab       	std	Y+55, r26	; 0x37
    1230:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1232:	6d a9       	ldd	r22, Y+53	; 0x35
    1234:	7e a9       	ldd	r23, Y+54	; 0x36
    1236:	8f a9       	ldd	r24, Y+55	; 0x37
    1238:	98 ad       	ldd	r25, Y+56	; 0x38
    123a:	20 e0       	ldi	r18, 0x00	; 0
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	4a e7       	ldi	r20, 0x7A	; 122
    1240:	53 e4       	ldi	r21, 0x43	; 67
    1242:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1246:	dc 01       	movw	r26, r24
    1248:	cb 01       	movw	r24, r22
    124a:	89 ab       	std	Y+49, r24	; 0x31
    124c:	9a ab       	std	Y+50, r25	; 0x32
    124e:	ab ab       	std	Y+51, r26	; 0x33
    1250:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1252:	69 a9       	ldd	r22, Y+49	; 0x31
    1254:	7a a9       	ldd	r23, Y+50	; 0x32
    1256:	8b a9       	ldd	r24, Y+51	; 0x33
    1258:	9c a9       	ldd	r25, Y+52	; 0x34
    125a:	20 e0       	ldi	r18, 0x00	; 0
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	40 e8       	ldi	r20, 0x80	; 128
    1260:	5f e3       	ldi	r21, 0x3F	; 63
    1262:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1266:	88 23       	and	r24, r24
    1268:	2c f4       	brge	.+10     	; 0x1274 <LCD_sendCommand+0x72>
		__ticks = 1;
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	98 ab       	std	Y+48, r25	; 0x30
    1270:	8f a7       	std	Y+47, r24	; 0x2f
    1272:	3f c0       	rjmp	.+126    	; 0x12f2 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1274:	69 a9       	ldd	r22, Y+49	; 0x31
    1276:	7a a9       	ldd	r23, Y+50	; 0x32
    1278:	8b a9       	ldd	r24, Y+51	; 0x33
    127a:	9c a9       	ldd	r25, Y+52	; 0x34
    127c:	20 e0       	ldi	r18, 0x00	; 0
    127e:	3f ef       	ldi	r19, 0xFF	; 255
    1280:	4f e7       	ldi	r20, 0x7F	; 127
    1282:	57 e4       	ldi	r21, 0x47	; 71
    1284:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1288:	18 16       	cp	r1, r24
    128a:	4c f5       	brge	.+82     	; 0x12de <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    128c:	6d a9       	ldd	r22, Y+53	; 0x35
    128e:	7e a9       	ldd	r23, Y+54	; 0x36
    1290:	8f a9       	ldd	r24, Y+55	; 0x37
    1292:	98 ad       	ldd	r25, Y+56	; 0x38
    1294:	20 e0       	ldi	r18, 0x00	; 0
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	40 e2       	ldi	r20, 0x20	; 32
    129a:	51 e4       	ldi	r21, 0x41	; 65
    129c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12a0:	dc 01       	movw	r26, r24
    12a2:	cb 01       	movw	r24, r22
    12a4:	bc 01       	movw	r22, r24
    12a6:	cd 01       	movw	r24, r26
    12a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12ac:	dc 01       	movw	r26, r24
    12ae:	cb 01       	movw	r24, r22
    12b0:	98 ab       	std	Y+48, r25	; 0x30
    12b2:	8f a7       	std	Y+47, r24	; 0x2f
    12b4:	0f c0       	rjmp	.+30     	; 0x12d4 <LCD_sendCommand+0xd2>
    12b6:	89 e1       	ldi	r24, 0x19	; 25
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	9e a7       	std	Y+46, r25	; 0x2e
    12bc:	8d a7       	std	Y+45, r24	; 0x2d
    12be:	8d a5       	ldd	r24, Y+45	; 0x2d
    12c0:	9e a5       	ldd	r25, Y+46	; 0x2e
    12c2:	01 97       	sbiw	r24, 0x01	; 1
    12c4:	f1 f7       	brne	.-4      	; 0x12c2 <LCD_sendCommand+0xc0>
    12c6:	9e a7       	std	Y+46, r25	; 0x2e
    12c8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    12cc:	98 a9       	ldd	r25, Y+48	; 0x30
    12ce:	01 97       	sbiw	r24, 0x01	; 1
    12d0:	98 ab       	std	Y+48, r25	; 0x30
    12d2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    12d6:	98 a9       	ldd	r25, Y+48	; 0x30
    12d8:	00 97       	sbiw	r24, 0x00	; 0
    12da:	69 f7       	brne	.-38     	; 0x12b6 <LCD_sendCommand+0xb4>
    12dc:	14 c0       	rjmp	.+40     	; 0x1306 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12de:	69 a9       	ldd	r22, Y+49	; 0x31
    12e0:	7a a9       	ldd	r23, Y+50	; 0x32
    12e2:	8b a9       	ldd	r24, Y+51	; 0x33
    12e4:	9c a9       	ldd	r25, Y+52	; 0x34
    12e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12ea:	dc 01       	movw	r26, r24
    12ec:	cb 01       	movw	r24, r22
    12ee:	98 ab       	std	Y+48, r25	; 0x30
    12f0:	8f a7       	std	Y+47, r24	; 0x2f
    12f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    12f4:	98 a9       	ldd	r25, Y+48	; 0x30
    12f6:	9c a7       	std	Y+44, r25	; 0x2c
    12f8:	8b a7       	std	Y+43, r24	; 0x2b
    12fa:	8b a5       	ldd	r24, Y+43	; 0x2b
    12fc:	9c a5       	ldd	r25, Y+44	; 0x2c
    12fe:	01 97       	sbiw	r24, 0x01	; 1
    1300:	f1 f7       	brne	.-4      	; 0x12fe <LCD_sendCommand+0xfc>
    1302:	9c a7       	std	Y+44, r25	; 0x2c
    1304:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	// Set Enable Pin to '1'
	GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
    1306:	83 e0       	ldi	r24, 0x03	; 3
    1308:	65 e0       	ldi	r22, 0x05	; 5
    130a:	41 e0       	ldi	r20, 0x01	; 1
    130c:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <GPIO_writePin>
    1310:	80 e0       	ldi	r24, 0x00	; 0
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	a0 e8       	ldi	r26, 0x80	; 128
    1316:	bf e3       	ldi	r27, 0x3F	; 63
    1318:	8f a3       	std	Y+39, r24	; 0x27
    131a:	98 a7       	std	Y+40, r25	; 0x28
    131c:	a9 a7       	std	Y+41, r26	; 0x29
    131e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1320:	6f a1       	ldd	r22, Y+39	; 0x27
    1322:	78 a5       	ldd	r23, Y+40	; 0x28
    1324:	89 a5       	ldd	r24, Y+41	; 0x29
    1326:	9a a5       	ldd	r25, Y+42	; 0x2a
    1328:	20 e0       	ldi	r18, 0x00	; 0
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	4a e7       	ldi	r20, 0x7A	; 122
    132e:	53 e4       	ldi	r21, 0x43	; 67
    1330:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1334:	dc 01       	movw	r26, r24
    1336:	cb 01       	movw	r24, r22
    1338:	8b a3       	std	Y+35, r24	; 0x23
    133a:	9c a3       	std	Y+36, r25	; 0x24
    133c:	ad a3       	std	Y+37, r26	; 0x25
    133e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1340:	6b a1       	ldd	r22, Y+35	; 0x23
    1342:	7c a1       	ldd	r23, Y+36	; 0x24
    1344:	8d a1       	ldd	r24, Y+37	; 0x25
    1346:	9e a1       	ldd	r25, Y+38	; 0x26
    1348:	20 e0       	ldi	r18, 0x00	; 0
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	40 e8       	ldi	r20, 0x80	; 128
    134e:	5f e3       	ldi	r21, 0x3F	; 63
    1350:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1354:	88 23       	and	r24, r24
    1356:	2c f4       	brge	.+10     	; 0x1362 <LCD_sendCommand+0x160>
		__ticks = 1;
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	9a a3       	std	Y+34, r25	; 0x22
    135e:	89 a3       	std	Y+33, r24	; 0x21
    1360:	3f c0       	rjmp	.+126    	; 0x13e0 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1362:	6b a1       	ldd	r22, Y+35	; 0x23
    1364:	7c a1       	ldd	r23, Y+36	; 0x24
    1366:	8d a1       	ldd	r24, Y+37	; 0x25
    1368:	9e a1       	ldd	r25, Y+38	; 0x26
    136a:	20 e0       	ldi	r18, 0x00	; 0
    136c:	3f ef       	ldi	r19, 0xFF	; 255
    136e:	4f e7       	ldi	r20, 0x7F	; 127
    1370:	57 e4       	ldi	r21, 0x47	; 71
    1372:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1376:	18 16       	cp	r1, r24
    1378:	4c f5       	brge	.+82     	; 0x13cc <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    137a:	6f a1       	ldd	r22, Y+39	; 0x27
    137c:	78 a5       	ldd	r23, Y+40	; 0x28
    137e:	89 a5       	ldd	r24, Y+41	; 0x29
    1380:	9a a5       	ldd	r25, Y+42	; 0x2a
    1382:	20 e0       	ldi	r18, 0x00	; 0
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	40 e2       	ldi	r20, 0x20	; 32
    1388:	51 e4       	ldi	r21, 0x41	; 65
    138a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    138e:	dc 01       	movw	r26, r24
    1390:	cb 01       	movw	r24, r22
    1392:	bc 01       	movw	r22, r24
    1394:	cd 01       	movw	r24, r26
    1396:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    139a:	dc 01       	movw	r26, r24
    139c:	cb 01       	movw	r24, r22
    139e:	9a a3       	std	Y+34, r25	; 0x22
    13a0:	89 a3       	std	Y+33, r24	; 0x21
    13a2:	0f c0       	rjmp	.+30     	; 0x13c2 <LCD_sendCommand+0x1c0>
    13a4:	89 e1       	ldi	r24, 0x19	; 25
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	98 a3       	std	Y+32, r25	; 0x20
    13aa:	8f 8f       	std	Y+31, r24	; 0x1f
    13ac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    13ae:	98 a1       	ldd	r25, Y+32	; 0x20
    13b0:	01 97       	sbiw	r24, 0x01	; 1
    13b2:	f1 f7       	brne	.-4      	; 0x13b0 <LCD_sendCommand+0x1ae>
    13b4:	98 a3       	std	Y+32, r25	; 0x20
    13b6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13b8:	89 a1       	ldd	r24, Y+33	; 0x21
    13ba:	9a a1       	ldd	r25, Y+34	; 0x22
    13bc:	01 97       	sbiw	r24, 0x01	; 1
    13be:	9a a3       	std	Y+34, r25	; 0x22
    13c0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13c2:	89 a1       	ldd	r24, Y+33	; 0x21
    13c4:	9a a1       	ldd	r25, Y+34	; 0x22
    13c6:	00 97       	sbiw	r24, 0x00	; 0
    13c8:	69 f7       	brne	.-38     	; 0x13a4 <LCD_sendCommand+0x1a2>
    13ca:	14 c0       	rjmp	.+40     	; 0x13f4 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13cc:	6b a1       	ldd	r22, Y+35	; 0x23
    13ce:	7c a1       	ldd	r23, Y+36	; 0x24
    13d0:	8d a1       	ldd	r24, Y+37	; 0x25
    13d2:	9e a1       	ldd	r25, Y+38	; 0x26
    13d4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13d8:	dc 01       	movw	r26, r24
    13da:	cb 01       	movw	r24, r22
    13dc:	9a a3       	std	Y+34, r25	; 0x22
    13de:	89 a3       	std	Y+33, r24	; 0x21
    13e0:	89 a1       	ldd	r24, Y+33	; 0x21
    13e2:	9a a1       	ldd	r25, Y+34	; 0x22
    13e4:	9e 8f       	std	Y+30, r25	; 0x1e
    13e6:	8d 8f       	std	Y+29, r24	; 0x1d
    13e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13ea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    13ec:	01 97       	sbiw	r24, 0x01	; 1
    13ee:	f1 f7       	brne	.-4      	; 0x13ec <LCD_sendCommand+0x1ea>
    13f0:	9e 8f       	std	Y+30, r25	; 0x1e
    13f2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	// Send command
	GPIO_writePort(LCD_DATA_PORT, command);
    13f4:	82 e0       	ldi	r24, 0x02	; 2
    13f6:	69 ad       	ldd	r22, Y+57	; 0x39
    13f8:	0e 94 29 12 	call	0x2452	; 0x2452 <GPIO_writePort>
    13fc:	80 e0       	ldi	r24, 0x00	; 0
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	a0 e8       	ldi	r26, 0x80	; 128
    1402:	bf e3       	ldi	r27, 0x3F	; 63
    1404:	89 8f       	std	Y+25, r24	; 0x19
    1406:	9a 8f       	std	Y+26, r25	; 0x1a
    1408:	ab 8f       	std	Y+27, r26	; 0x1b
    140a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    140c:	69 8d       	ldd	r22, Y+25	; 0x19
    140e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1410:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1412:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1414:	20 e0       	ldi	r18, 0x00	; 0
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	4a e7       	ldi	r20, 0x7A	; 122
    141a:	53 e4       	ldi	r21, 0x43	; 67
    141c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1420:	dc 01       	movw	r26, r24
    1422:	cb 01       	movw	r24, r22
    1424:	8d 8b       	std	Y+21, r24	; 0x15
    1426:	9e 8b       	std	Y+22, r25	; 0x16
    1428:	af 8b       	std	Y+23, r26	; 0x17
    142a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    142c:	6d 89       	ldd	r22, Y+21	; 0x15
    142e:	7e 89       	ldd	r23, Y+22	; 0x16
    1430:	8f 89       	ldd	r24, Y+23	; 0x17
    1432:	98 8d       	ldd	r25, Y+24	; 0x18
    1434:	20 e0       	ldi	r18, 0x00	; 0
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	40 e8       	ldi	r20, 0x80	; 128
    143a:	5f e3       	ldi	r21, 0x3F	; 63
    143c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1440:	88 23       	and	r24, r24
    1442:	2c f4       	brge	.+10     	; 0x144e <LCD_sendCommand+0x24c>
		__ticks = 1;
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	9c 8b       	std	Y+20, r25	; 0x14
    144a:	8b 8b       	std	Y+19, r24	; 0x13
    144c:	3f c0       	rjmp	.+126    	; 0x14cc <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    144e:	6d 89       	ldd	r22, Y+21	; 0x15
    1450:	7e 89       	ldd	r23, Y+22	; 0x16
    1452:	8f 89       	ldd	r24, Y+23	; 0x17
    1454:	98 8d       	ldd	r25, Y+24	; 0x18
    1456:	20 e0       	ldi	r18, 0x00	; 0
    1458:	3f ef       	ldi	r19, 0xFF	; 255
    145a:	4f e7       	ldi	r20, 0x7F	; 127
    145c:	57 e4       	ldi	r21, 0x47	; 71
    145e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1462:	18 16       	cp	r1, r24
    1464:	4c f5       	brge	.+82     	; 0x14b8 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1466:	69 8d       	ldd	r22, Y+25	; 0x19
    1468:	7a 8d       	ldd	r23, Y+26	; 0x1a
    146a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    146c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    146e:	20 e0       	ldi	r18, 0x00	; 0
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	40 e2       	ldi	r20, 0x20	; 32
    1474:	51 e4       	ldi	r21, 0x41	; 65
    1476:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    147a:	dc 01       	movw	r26, r24
    147c:	cb 01       	movw	r24, r22
    147e:	bc 01       	movw	r22, r24
    1480:	cd 01       	movw	r24, r26
    1482:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1486:	dc 01       	movw	r26, r24
    1488:	cb 01       	movw	r24, r22
    148a:	9c 8b       	std	Y+20, r25	; 0x14
    148c:	8b 8b       	std	Y+19, r24	; 0x13
    148e:	0f c0       	rjmp	.+30     	; 0x14ae <LCD_sendCommand+0x2ac>
    1490:	89 e1       	ldi	r24, 0x19	; 25
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	9a 8b       	std	Y+18, r25	; 0x12
    1496:	89 8b       	std	Y+17, r24	; 0x11
    1498:	89 89       	ldd	r24, Y+17	; 0x11
    149a:	9a 89       	ldd	r25, Y+18	; 0x12
    149c:	01 97       	sbiw	r24, 0x01	; 1
    149e:	f1 f7       	brne	.-4      	; 0x149c <LCD_sendCommand+0x29a>
    14a0:	9a 8b       	std	Y+18, r25	; 0x12
    14a2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14a4:	8b 89       	ldd	r24, Y+19	; 0x13
    14a6:	9c 89       	ldd	r25, Y+20	; 0x14
    14a8:	01 97       	sbiw	r24, 0x01	; 1
    14aa:	9c 8b       	std	Y+20, r25	; 0x14
    14ac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ae:	8b 89       	ldd	r24, Y+19	; 0x13
    14b0:	9c 89       	ldd	r25, Y+20	; 0x14
    14b2:	00 97       	sbiw	r24, 0x00	; 0
    14b4:	69 f7       	brne	.-38     	; 0x1490 <LCD_sendCommand+0x28e>
    14b6:	14 c0       	rjmp	.+40     	; 0x14e0 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14b8:	6d 89       	ldd	r22, Y+21	; 0x15
    14ba:	7e 89       	ldd	r23, Y+22	; 0x16
    14bc:	8f 89       	ldd	r24, Y+23	; 0x17
    14be:	98 8d       	ldd	r25, Y+24	; 0x18
    14c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14c4:	dc 01       	movw	r26, r24
    14c6:	cb 01       	movw	r24, r22
    14c8:	9c 8b       	std	Y+20, r25	; 0x14
    14ca:	8b 8b       	std	Y+19, r24	; 0x13
    14cc:	8b 89       	ldd	r24, Y+19	; 0x13
    14ce:	9c 89       	ldd	r25, Y+20	; 0x14
    14d0:	98 8b       	std	Y+16, r25	; 0x10
    14d2:	8f 87       	std	Y+15, r24	; 0x0f
    14d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    14d6:	98 89       	ldd	r25, Y+16	; 0x10
    14d8:	01 97       	sbiw	r24, 0x01	; 1
    14da:	f1 f7       	brne	.-4      	; 0x14d8 <LCD_sendCommand+0x2d6>
    14dc:	98 8b       	std	Y+16, r25	; 0x10
    14de:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	// Set Enable Pin to '0'
	GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
    14e0:	83 e0       	ldi	r24, 0x03	; 3
    14e2:	65 e0       	ldi	r22, 0x05	; 5
    14e4:	40 e0       	ldi	r20, 0x00	; 0
    14e6:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <GPIO_writePin>
    14ea:	80 e0       	ldi	r24, 0x00	; 0
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	a0 e8       	ldi	r26, 0x80	; 128
    14f0:	bf e3       	ldi	r27, 0x3F	; 63
    14f2:	8b 87       	std	Y+11, r24	; 0x0b
    14f4:	9c 87       	std	Y+12, r25	; 0x0c
    14f6:	ad 87       	std	Y+13, r26	; 0x0d
    14f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    14fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    14fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1500:	9e 85       	ldd	r25, Y+14	; 0x0e
    1502:	20 e0       	ldi	r18, 0x00	; 0
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	4a e7       	ldi	r20, 0x7A	; 122
    1508:	53 e4       	ldi	r21, 0x43	; 67
    150a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    150e:	dc 01       	movw	r26, r24
    1510:	cb 01       	movw	r24, r22
    1512:	8f 83       	std	Y+7, r24	; 0x07
    1514:	98 87       	std	Y+8, r25	; 0x08
    1516:	a9 87       	std	Y+9, r26	; 0x09
    1518:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    151a:	6f 81       	ldd	r22, Y+7	; 0x07
    151c:	78 85       	ldd	r23, Y+8	; 0x08
    151e:	89 85       	ldd	r24, Y+9	; 0x09
    1520:	9a 85       	ldd	r25, Y+10	; 0x0a
    1522:	20 e0       	ldi	r18, 0x00	; 0
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	40 e8       	ldi	r20, 0x80	; 128
    1528:	5f e3       	ldi	r21, 0x3F	; 63
    152a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    152e:	88 23       	and	r24, r24
    1530:	2c f4       	brge	.+10     	; 0x153c <LCD_sendCommand+0x33a>
		__ticks = 1;
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	9e 83       	std	Y+6, r25	; 0x06
    1538:	8d 83       	std	Y+5, r24	; 0x05
    153a:	3f c0       	rjmp	.+126    	; 0x15ba <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    153c:	6f 81       	ldd	r22, Y+7	; 0x07
    153e:	78 85       	ldd	r23, Y+8	; 0x08
    1540:	89 85       	ldd	r24, Y+9	; 0x09
    1542:	9a 85       	ldd	r25, Y+10	; 0x0a
    1544:	20 e0       	ldi	r18, 0x00	; 0
    1546:	3f ef       	ldi	r19, 0xFF	; 255
    1548:	4f e7       	ldi	r20, 0x7F	; 127
    154a:	57 e4       	ldi	r21, 0x47	; 71
    154c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1550:	18 16       	cp	r1, r24
    1552:	4c f5       	brge	.+82     	; 0x15a6 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1554:	6b 85       	ldd	r22, Y+11	; 0x0b
    1556:	7c 85       	ldd	r23, Y+12	; 0x0c
    1558:	8d 85       	ldd	r24, Y+13	; 0x0d
    155a:	9e 85       	ldd	r25, Y+14	; 0x0e
    155c:	20 e0       	ldi	r18, 0x00	; 0
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	40 e2       	ldi	r20, 0x20	; 32
    1562:	51 e4       	ldi	r21, 0x41	; 65
    1564:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1568:	dc 01       	movw	r26, r24
    156a:	cb 01       	movw	r24, r22
    156c:	bc 01       	movw	r22, r24
    156e:	cd 01       	movw	r24, r26
    1570:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1574:	dc 01       	movw	r26, r24
    1576:	cb 01       	movw	r24, r22
    1578:	9e 83       	std	Y+6, r25	; 0x06
    157a:	8d 83       	std	Y+5, r24	; 0x05
    157c:	0f c0       	rjmp	.+30     	; 0x159c <LCD_sendCommand+0x39a>
    157e:	89 e1       	ldi	r24, 0x19	; 25
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	9c 83       	std	Y+4, r25	; 0x04
    1584:	8b 83       	std	Y+3, r24	; 0x03
    1586:	8b 81       	ldd	r24, Y+3	; 0x03
    1588:	9c 81       	ldd	r25, Y+4	; 0x04
    158a:	01 97       	sbiw	r24, 0x01	; 1
    158c:	f1 f7       	brne	.-4      	; 0x158a <LCD_sendCommand+0x388>
    158e:	9c 83       	std	Y+4, r25	; 0x04
    1590:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1592:	8d 81       	ldd	r24, Y+5	; 0x05
    1594:	9e 81       	ldd	r25, Y+6	; 0x06
    1596:	01 97       	sbiw	r24, 0x01	; 1
    1598:	9e 83       	std	Y+6, r25	; 0x06
    159a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    159c:	8d 81       	ldd	r24, Y+5	; 0x05
    159e:	9e 81       	ldd	r25, Y+6	; 0x06
    15a0:	00 97       	sbiw	r24, 0x00	; 0
    15a2:	69 f7       	brne	.-38     	; 0x157e <LCD_sendCommand+0x37c>
    15a4:	14 c0       	rjmp	.+40     	; 0x15ce <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15a6:	6f 81       	ldd	r22, Y+7	; 0x07
    15a8:	78 85       	ldd	r23, Y+8	; 0x08
    15aa:	89 85       	ldd	r24, Y+9	; 0x09
    15ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15b2:	dc 01       	movw	r26, r24
    15b4:	cb 01       	movw	r24, r22
    15b6:	9e 83       	std	Y+6, r25	; 0x06
    15b8:	8d 83       	std	Y+5, r24	; 0x05
    15ba:	8d 81       	ldd	r24, Y+5	; 0x05
    15bc:	9e 81       	ldd	r25, Y+6	; 0x06
    15be:	9a 83       	std	Y+2, r25	; 0x02
    15c0:	89 83       	std	Y+1, r24	; 0x01
    15c2:	89 81       	ldd	r24, Y+1	; 0x01
    15c4:	9a 81       	ldd	r25, Y+2	; 0x02
    15c6:	01 97       	sbiw	r24, 0x01	; 1
    15c8:	f1 f7       	brne	.-4      	; 0x15c6 <LCD_sendCommand+0x3c4>
    15ca:	9a 83       	std	Y+2, r25	; 0x02
    15cc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    15ce:	e9 96       	adiw	r28, 0x39	; 57
    15d0:	0f b6       	in	r0, 0x3f	; 63
    15d2:	f8 94       	cli
    15d4:	de bf       	out	0x3e, r29	; 62
    15d6:	0f be       	out	0x3f, r0	; 63
    15d8:	cd bf       	out	0x3d, r28	; 61
    15da:	cf 91       	pop	r28
    15dc:	df 91       	pop	r29
    15de:	08 95       	ret

000015e0 <LCD_displayCharacters>:


void LCD_displayCharacters(uint8 data) {
    15e0:	df 93       	push	r29
    15e2:	cf 93       	push	r28
    15e4:	cd b7       	in	r28, 0x3d	; 61
    15e6:	de b7       	in	r29, 0x3e	; 62
    15e8:	e9 97       	sbiw	r28, 0x39	; 57
    15ea:	0f b6       	in	r0, 0x3f	; 63
    15ec:	f8 94       	cli
    15ee:	de bf       	out	0x3e, r29	; 62
    15f0:	0f be       	out	0x3f, r0	; 63
    15f2:	cd bf       	out	0x3d, r28	; 61
    15f4:	89 af       	std	Y+57, r24	; 0x39
	// Set RS Pin to '1'
	GPIO_writePin(LCD_INIT_PORT, LCD_RS, LOGIC_HIGH);
    15f6:	83 e0       	ldi	r24, 0x03	; 3
    15f8:	64 e0       	ldi	r22, 0x04	; 4
    15fa:	41 e0       	ldi	r20, 0x01	; 1
    15fc:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <GPIO_writePin>
    1600:	80 e0       	ldi	r24, 0x00	; 0
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	a0 e8       	ldi	r26, 0x80	; 128
    1606:	bf e3       	ldi	r27, 0x3F	; 63
    1608:	8d ab       	std	Y+53, r24	; 0x35
    160a:	9e ab       	std	Y+54, r25	; 0x36
    160c:	af ab       	std	Y+55, r26	; 0x37
    160e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1610:	6d a9       	ldd	r22, Y+53	; 0x35
    1612:	7e a9       	ldd	r23, Y+54	; 0x36
    1614:	8f a9       	ldd	r24, Y+55	; 0x37
    1616:	98 ad       	ldd	r25, Y+56	; 0x38
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	4a e7       	ldi	r20, 0x7A	; 122
    161e:	53 e4       	ldi	r21, 0x43	; 67
    1620:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1624:	dc 01       	movw	r26, r24
    1626:	cb 01       	movw	r24, r22
    1628:	89 ab       	std	Y+49, r24	; 0x31
    162a:	9a ab       	std	Y+50, r25	; 0x32
    162c:	ab ab       	std	Y+51, r26	; 0x33
    162e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1630:	69 a9       	ldd	r22, Y+49	; 0x31
    1632:	7a a9       	ldd	r23, Y+50	; 0x32
    1634:	8b a9       	ldd	r24, Y+51	; 0x33
    1636:	9c a9       	ldd	r25, Y+52	; 0x34
    1638:	20 e0       	ldi	r18, 0x00	; 0
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	40 e8       	ldi	r20, 0x80	; 128
    163e:	5f e3       	ldi	r21, 0x3F	; 63
    1640:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1644:	88 23       	and	r24, r24
    1646:	2c f4       	brge	.+10     	; 0x1652 <LCD_displayCharacters+0x72>
		__ticks = 1;
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	98 ab       	std	Y+48, r25	; 0x30
    164e:	8f a7       	std	Y+47, r24	; 0x2f
    1650:	3f c0       	rjmp	.+126    	; 0x16d0 <LCD_displayCharacters+0xf0>
	else if (__tmp > 65535)
    1652:	69 a9       	ldd	r22, Y+49	; 0x31
    1654:	7a a9       	ldd	r23, Y+50	; 0x32
    1656:	8b a9       	ldd	r24, Y+51	; 0x33
    1658:	9c a9       	ldd	r25, Y+52	; 0x34
    165a:	20 e0       	ldi	r18, 0x00	; 0
    165c:	3f ef       	ldi	r19, 0xFF	; 255
    165e:	4f e7       	ldi	r20, 0x7F	; 127
    1660:	57 e4       	ldi	r21, 0x47	; 71
    1662:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1666:	18 16       	cp	r1, r24
    1668:	4c f5       	brge	.+82     	; 0x16bc <LCD_displayCharacters+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    166a:	6d a9       	ldd	r22, Y+53	; 0x35
    166c:	7e a9       	ldd	r23, Y+54	; 0x36
    166e:	8f a9       	ldd	r24, Y+55	; 0x37
    1670:	98 ad       	ldd	r25, Y+56	; 0x38
    1672:	20 e0       	ldi	r18, 0x00	; 0
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	40 e2       	ldi	r20, 0x20	; 32
    1678:	51 e4       	ldi	r21, 0x41	; 65
    167a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    167e:	dc 01       	movw	r26, r24
    1680:	cb 01       	movw	r24, r22
    1682:	bc 01       	movw	r22, r24
    1684:	cd 01       	movw	r24, r26
    1686:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    168a:	dc 01       	movw	r26, r24
    168c:	cb 01       	movw	r24, r22
    168e:	98 ab       	std	Y+48, r25	; 0x30
    1690:	8f a7       	std	Y+47, r24	; 0x2f
    1692:	0f c0       	rjmp	.+30     	; 0x16b2 <LCD_displayCharacters+0xd2>
    1694:	89 e1       	ldi	r24, 0x19	; 25
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	9e a7       	std	Y+46, r25	; 0x2e
    169a:	8d a7       	std	Y+45, r24	; 0x2d
    169c:	8d a5       	ldd	r24, Y+45	; 0x2d
    169e:	9e a5       	ldd	r25, Y+46	; 0x2e
    16a0:	01 97       	sbiw	r24, 0x01	; 1
    16a2:	f1 f7       	brne	.-4      	; 0x16a0 <LCD_displayCharacters+0xc0>
    16a4:	9e a7       	std	Y+46, r25	; 0x2e
    16a6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    16aa:	98 a9       	ldd	r25, Y+48	; 0x30
    16ac:	01 97       	sbiw	r24, 0x01	; 1
    16ae:	98 ab       	std	Y+48, r25	; 0x30
    16b0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    16b4:	98 a9       	ldd	r25, Y+48	; 0x30
    16b6:	00 97       	sbiw	r24, 0x00	; 0
    16b8:	69 f7       	brne	.-38     	; 0x1694 <LCD_displayCharacters+0xb4>
    16ba:	14 c0       	rjmp	.+40     	; 0x16e4 <LCD_displayCharacters+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16bc:	69 a9       	ldd	r22, Y+49	; 0x31
    16be:	7a a9       	ldd	r23, Y+50	; 0x32
    16c0:	8b a9       	ldd	r24, Y+51	; 0x33
    16c2:	9c a9       	ldd	r25, Y+52	; 0x34
    16c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16c8:	dc 01       	movw	r26, r24
    16ca:	cb 01       	movw	r24, r22
    16cc:	98 ab       	std	Y+48, r25	; 0x30
    16ce:	8f a7       	std	Y+47, r24	; 0x2f
    16d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    16d2:	98 a9       	ldd	r25, Y+48	; 0x30
    16d4:	9c a7       	std	Y+44, r25	; 0x2c
    16d6:	8b a7       	std	Y+43, r24	; 0x2b
    16d8:	8b a5       	ldd	r24, Y+43	; 0x2b
    16da:	9c a5       	ldd	r25, Y+44	; 0x2c
    16dc:	01 97       	sbiw	r24, 0x01	; 1
    16de:	f1 f7       	brne	.-4      	; 0x16dc <LCD_displayCharacters+0xfc>
    16e0:	9c a7       	std	Y+44, r25	; 0x2c
    16e2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	// Set Enable Pin to '1'
	GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
    16e4:	83 e0       	ldi	r24, 0x03	; 3
    16e6:	65 e0       	ldi	r22, 0x05	; 5
    16e8:	41 e0       	ldi	r20, 0x01	; 1
    16ea:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <GPIO_writePin>
    16ee:	80 e0       	ldi	r24, 0x00	; 0
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	a0 e8       	ldi	r26, 0x80	; 128
    16f4:	bf e3       	ldi	r27, 0x3F	; 63
    16f6:	8f a3       	std	Y+39, r24	; 0x27
    16f8:	98 a7       	std	Y+40, r25	; 0x28
    16fa:	a9 a7       	std	Y+41, r26	; 0x29
    16fc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16fe:	6f a1       	ldd	r22, Y+39	; 0x27
    1700:	78 a5       	ldd	r23, Y+40	; 0x28
    1702:	89 a5       	ldd	r24, Y+41	; 0x29
    1704:	9a a5       	ldd	r25, Y+42	; 0x2a
    1706:	20 e0       	ldi	r18, 0x00	; 0
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	4a e7       	ldi	r20, 0x7A	; 122
    170c:	53 e4       	ldi	r21, 0x43	; 67
    170e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1712:	dc 01       	movw	r26, r24
    1714:	cb 01       	movw	r24, r22
    1716:	8b a3       	std	Y+35, r24	; 0x23
    1718:	9c a3       	std	Y+36, r25	; 0x24
    171a:	ad a3       	std	Y+37, r26	; 0x25
    171c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    171e:	6b a1       	ldd	r22, Y+35	; 0x23
    1720:	7c a1       	ldd	r23, Y+36	; 0x24
    1722:	8d a1       	ldd	r24, Y+37	; 0x25
    1724:	9e a1       	ldd	r25, Y+38	; 0x26
    1726:	20 e0       	ldi	r18, 0x00	; 0
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	40 e8       	ldi	r20, 0x80	; 128
    172c:	5f e3       	ldi	r21, 0x3F	; 63
    172e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1732:	88 23       	and	r24, r24
    1734:	2c f4       	brge	.+10     	; 0x1740 <LCD_displayCharacters+0x160>
		__ticks = 1;
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	9a a3       	std	Y+34, r25	; 0x22
    173c:	89 a3       	std	Y+33, r24	; 0x21
    173e:	3f c0       	rjmp	.+126    	; 0x17be <LCD_displayCharacters+0x1de>
	else if (__tmp > 65535)
    1740:	6b a1       	ldd	r22, Y+35	; 0x23
    1742:	7c a1       	ldd	r23, Y+36	; 0x24
    1744:	8d a1       	ldd	r24, Y+37	; 0x25
    1746:	9e a1       	ldd	r25, Y+38	; 0x26
    1748:	20 e0       	ldi	r18, 0x00	; 0
    174a:	3f ef       	ldi	r19, 0xFF	; 255
    174c:	4f e7       	ldi	r20, 0x7F	; 127
    174e:	57 e4       	ldi	r21, 0x47	; 71
    1750:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1754:	18 16       	cp	r1, r24
    1756:	4c f5       	brge	.+82     	; 0x17aa <LCD_displayCharacters+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1758:	6f a1       	ldd	r22, Y+39	; 0x27
    175a:	78 a5       	ldd	r23, Y+40	; 0x28
    175c:	89 a5       	ldd	r24, Y+41	; 0x29
    175e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1760:	20 e0       	ldi	r18, 0x00	; 0
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	40 e2       	ldi	r20, 0x20	; 32
    1766:	51 e4       	ldi	r21, 0x41	; 65
    1768:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    176c:	dc 01       	movw	r26, r24
    176e:	cb 01       	movw	r24, r22
    1770:	bc 01       	movw	r22, r24
    1772:	cd 01       	movw	r24, r26
    1774:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1778:	dc 01       	movw	r26, r24
    177a:	cb 01       	movw	r24, r22
    177c:	9a a3       	std	Y+34, r25	; 0x22
    177e:	89 a3       	std	Y+33, r24	; 0x21
    1780:	0f c0       	rjmp	.+30     	; 0x17a0 <LCD_displayCharacters+0x1c0>
    1782:	89 e1       	ldi	r24, 0x19	; 25
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	98 a3       	std	Y+32, r25	; 0x20
    1788:	8f 8f       	std	Y+31, r24	; 0x1f
    178a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    178c:	98 a1       	ldd	r25, Y+32	; 0x20
    178e:	01 97       	sbiw	r24, 0x01	; 1
    1790:	f1 f7       	brne	.-4      	; 0x178e <LCD_displayCharacters+0x1ae>
    1792:	98 a3       	std	Y+32, r25	; 0x20
    1794:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1796:	89 a1       	ldd	r24, Y+33	; 0x21
    1798:	9a a1       	ldd	r25, Y+34	; 0x22
    179a:	01 97       	sbiw	r24, 0x01	; 1
    179c:	9a a3       	std	Y+34, r25	; 0x22
    179e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17a0:	89 a1       	ldd	r24, Y+33	; 0x21
    17a2:	9a a1       	ldd	r25, Y+34	; 0x22
    17a4:	00 97       	sbiw	r24, 0x00	; 0
    17a6:	69 f7       	brne	.-38     	; 0x1782 <LCD_displayCharacters+0x1a2>
    17a8:	14 c0       	rjmp	.+40     	; 0x17d2 <LCD_displayCharacters+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17aa:	6b a1       	ldd	r22, Y+35	; 0x23
    17ac:	7c a1       	ldd	r23, Y+36	; 0x24
    17ae:	8d a1       	ldd	r24, Y+37	; 0x25
    17b0:	9e a1       	ldd	r25, Y+38	; 0x26
    17b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17b6:	dc 01       	movw	r26, r24
    17b8:	cb 01       	movw	r24, r22
    17ba:	9a a3       	std	Y+34, r25	; 0x22
    17bc:	89 a3       	std	Y+33, r24	; 0x21
    17be:	89 a1       	ldd	r24, Y+33	; 0x21
    17c0:	9a a1       	ldd	r25, Y+34	; 0x22
    17c2:	9e 8f       	std	Y+30, r25	; 0x1e
    17c4:	8d 8f       	std	Y+29, r24	; 0x1d
    17c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17c8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17ca:	01 97       	sbiw	r24, 0x01	; 1
    17cc:	f1 f7       	brne	.-4      	; 0x17ca <LCD_displayCharacters+0x1ea>
    17ce:	9e 8f       	std	Y+30, r25	; 0x1e
    17d0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	// Send command
	GPIO_writePort(LCD_DATA_PORT, data);
    17d2:	82 e0       	ldi	r24, 0x02	; 2
    17d4:	69 ad       	ldd	r22, Y+57	; 0x39
    17d6:	0e 94 29 12 	call	0x2452	; 0x2452 <GPIO_writePort>
    17da:	80 e0       	ldi	r24, 0x00	; 0
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	a0 e8       	ldi	r26, 0x80	; 128
    17e0:	bf e3       	ldi	r27, 0x3F	; 63
    17e2:	89 8f       	std	Y+25, r24	; 0x19
    17e4:	9a 8f       	std	Y+26, r25	; 0x1a
    17e6:	ab 8f       	std	Y+27, r26	; 0x1b
    17e8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17ea:	69 8d       	ldd	r22, Y+25	; 0x19
    17ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	4a e7       	ldi	r20, 0x7A	; 122
    17f8:	53 e4       	ldi	r21, 0x43	; 67
    17fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17fe:	dc 01       	movw	r26, r24
    1800:	cb 01       	movw	r24, r22
    1802:	8d 8b       	std	Y+21, r24	; 0x15
    1804:	9e 8b       	std	Y+22, r25	; 0x16
    1806:	af 8b       	std	Y+23, r26	; 0x17
    1808:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    180a:	6d 89       	ldd	r22, Y+21	; 0x15
    180c:	7e 89       	ldd	r23, Y+22	; 0x16
    180e:	8f 89       	ldd	r24, Y+23	; 0x17
    1810:	98 8d       	ldd	r25, Y+24	; 0x18
    1812:	20 e0       	ldi	r18, 0x00	; 0
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	40 e8       	ldi	r20, 0x80	; 128
    1818:	5f e3       	ldi	r21, 0x3F	; 63
    181a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    181e:	88 23       	and	r24, r24
    1820:	2c f4       	brge	.+10     	; 0x182c <LCD_displayCharacters+0x24c>
		__ticks = 1;
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	9c 8b       	std	Y+20, r25	; 0x14
    1828:	8b 8b       	std	Y+19, r24	; 0x13
    182a:	3f c0       	rjmp	.+126    	; 0x18aa <LCD_displayCharacters+0x2ca>
	else if (__tmp > 65535)
    182c:	6d 89       	ldd	r22, Y+21	; 0x15
    182e:	7e 89       	ldd	r23, Y+22	; 0x16
    1830:	8f 89       	ldd	r24, Y+23	; 0x17
    1832:	98 8d       	ldd	r25, Y+24	; 0x18
    1834:	20 e0       	ldi	r18, 0x00	; 0
    1836:	3f ef       	ldi	r19, 0xFF	; 255
    1838:	4f e7       	ldi	r20, 0x7F	; 127
    183a:	57 e4       	ldi	r21, 0x47	; 71
    183c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1840:	18 16       	cp	r1, r24
    1842:	4c f5       	brge	.+82     	; 0x1896 <LCD_displayCharacters+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1844:	69 8d       	ldd	r22, Y+25	; 0x19
    1846:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1848:	8b 8d       	ldd	r24, Y+27	; 0x1b
    184a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    184c:	20 e0       	ldi	r18, 0x00	; 0
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	40 e2       	ldi	r20, 0x20	; 32
    1852:	51 e4       	ldi	r21, 0x41	; 65
    1854:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1858:	dc 01       	movw	r26, r24
    185a:	cb 01       	movw	r24, r22
    185c:	bc 01       	movw	r22, r24
    185e:	cd 01       	movw	r24, r26
    1860:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1864:	dc 01       	movw	r26, r24
    1866:	cb 01       	movw	r24, r22
    1868:	9c 8b       	std	Y+20, r25	; 0x14
    186a:	8b 8b       	std	Y+19, r24	; 0x13
    186c:	0f c0       	rjmp	.+30     	; 0x188c <LCD_displayCharacters+0x2ac>
    186e:	89 e1       	ldi	r24, 0x19	; 25
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	9a 8b       	std	Y+18, r25	; 0x12
    1874:	89 8b       	std	Y+17, r24	; 0x11
    1876:	89 89       	ldd	r24, Y+17	; 0x11
    1878:	9a 89       	ldd	r25, Y+18	; 0x12
    187a:	01 97       	sbiw	r24, 0x01	; 1
    187c:	f1 f7       	brne	.-4      	; 0x187a <LCD_displayCharacters+0x29a>
    187e:	9a 8b       	std	Y+18, r25	; 0x12
    1880:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1882:	8b 89       	ldd	r24, Y+19	; 0x13
    1884:	9c 89       	ldd	r25, Y+20	; 0x14
    1886:	01 97       	sbiw	r24, 0x01	; 1
    1888:	9c 8b       	std	Y+20, r25	; 0x14
    188a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    188c:	8b 89       	ldd	r24, Y+19	; 0x13
    188e:	9c 89       	ldd	r25, Y+20	; 0x14
    1890:	00 97       	sbiw	r24, 0x00	; 0
    1892:	69 f7       	brne	.-38     	; 0x186e <LCD_displayCharacters+0x28e>
    1894:	14 c0       	rjmp	.+40     	; 0x18be <LCD_displayCharacters+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1896:	6d 89       	ldd	r22, Y+21	; 0x15
    1898:	7e 89       	ldd	r23, Y+22	; 0x16
    189a:	8f 89       	ldd	r24, Y+23	; 0x17
    189c:	98 8d       	ldd	r25, Y+24	; 0x18
    189e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18a2:	dc 01       	movw	r26, r24
    18a4:	cb 01       	movw	r24, r22
    18a6:	9c 8b       	std	Y+20, r25	; 0x14
    18a8:	8b 8b       	std	Y+19, r24	; 0x13
    18aa:	8b 89       	ldd	r24, Y+19	; 0x13
    18ac:	9c 89       	ldd	r25, Y+20	; 0x14
    18ae:	98 8b       	std	Y+16, r25	; 0x10
    18b0:	8f 87       	std	Y+15, r24	; 0x0f
    18b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    18b4:	98 89       	ldd	r25, Y+16	; 0x10
    18b6:	01 97       	sbiw	r24, 0x01	; 1
    18b8:	f1 f7       	brne	.-4      	; 0x18b6 <LCD_displayCharacters+0x2d6>
    18ba:	98 8b       	std	Y+16, r25	; 0x10
    18bc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	// Set Enable Pin to '0'
	GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
    18be:	83 e0       	ldi	r24, 0x03	; 3
    18c0:	65 e0       	ldi	r22, 0x05	; 5
    18c2:	40 e0       	ldi	r20, 0x00	; 0
    18c4:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <GPIO_writePin>
    18c8:	80 e0       	ldi	r24, 0x00	; 0
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	a0 e8       	ldi	r26, 0x80	; 128
    18ce:	bf e3       	ldi	r27, 0x3F	; 63
    18d0:	8b 87       	std	Y+11, r24	; 0x0b
    18d2:	9c 87       	std	Y+12, r25	; 0x0c
    18d4:	ad 87       	std	Y+13, r26	; 0x0d
    18d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    18da:	7c 85       	ldd	r23, Y+12	; 0x0c
    18dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    18de:	9e 85       	ldd	r25, Y+14	; 0x0e
    18e0:	20 e0       	ldi	r18, 0x00	; 0
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	4a e7       	ldi	r20, 0x7A	; 122
    18e6:	53 e4       	ldi	r21, 0x43	; 67
    18e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18ec:	dc 01       	movw	r26, r24
    18ee:	cb 01       	movw	r24, r22
    18f0:	8f 83       	std	Y+7, r24	; 0x07
    18f2:	98 87       	std	Y+8, r25	; 0x08
    18f4:	a9 87       	std	Y+9, r26	; 0x09
    18f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18f8:	6f 81       	ldd	r22, Y+7	; 0x07
    18fa:	78 85       	ldd	r23, Y+8	; 0x08
    18fc:	89 85       	ldd	r24, Y+9	; 0x09
    18fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1900:	20 e0       	ldi	r18, 0x00	; 0
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	40 e8       	ldi	r20, 0x80	; 128
    1906:	5f e3       	ldi	r21, 0x3F	; 63
    1908:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    190c:	88 23       	and	r24, r24
    190e:	2c f4       	brge	.+10     	; 0x191a <LCD_displayCharacters+0x33a>
		__ticks = 1;
    1910:	81 e0       	ldi	r24, 0x01	; 1
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	9e 83       	std	Y+6, r25	; 0x06
    1916:	8d 83       	std	Y+5, r24	; 0x05
    1918:	3f c0       	rjmp	.+126    	; 0x1998 <LCD_displayCharacters+0x3b8>
	else if (__tmp > 65535)
    191a:	6f 81       	ldd	r22, Y+7	; 0x07
    191c:	78 85       	ldd	r23, Y+8	; 0x08
    191e:	89 85       	ldd	r24, Y+9	; 0x09
    1920:	9a 85       	ldd	r25, Y+10	; 0x0a
    1922:	20 e0       	ldi	r18, 0x00	; 0
    1924:	3f ef       	ldi	r19, 0xFF	; 255
    1926:	4f e7       	ldi	r20, 0x7F	; 127
    1928:	57 e4       	ldi	r21, 0x47	; 71
    192a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    192e:	18 16       	cp	r1, r24
    1930:	4c f5       	brge	.+82     	; 0x1984 <LCD_displayCharacters+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1932:	6b 85       	ldd	r22, Y+11	; 0x0b
    1934:	7c 85       	ldd	r23, Y+12	; 0x0c
    1936:	8d 85       	ldd	r24, Y+13	; 0x0d
    1938:	9e 85       	ldd	r25, Y+14	; 0x0e
    193a:	20 e0       	ldi	r18, 0x00	; 0
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	40 e2       	ldi	r20, 0x20	; 32
    1940:	51 e4       	ldi	r21, 0x41	; 65
    1942:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1946:	dc 01       	movw	r26, r24
    1948:	cb 01       	movw	r24, r22
    194a:	bc 01       	movw	r22, r24
    194c:	cd 01       	movw	r24, r26
    194e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1952:	dc 01       	movw	r26, r24
    1954:	cb 01       	movw	r24, r22
    1956:	9e 83       	std	Y+6, r25	; 0x06
    1958:	8d 83       	std	Y+5, r24	; 0x05
    195a:	0f c0       	rjmp	.+30     	; 0x197a <LCD_displayCharacters+0x39a>
    195c:	89 e1       	ldi	r24, 0x19	; 25
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	9c 83       	std	Y+4, r25	; 0x04
    1962:	8b 83       	std	Y+3, r24	; 0x03
    1964:	8b 81       	ldd	r24, Y+3	; 0x03
    1966:	9c 81       	ldd	r25, Y+4	; 0x04
    1968:	01 97       	sbiw	r24, 0x01	; 1
    196a:	f1 f7       	brne	.-4      	; 0x1968 <LCD_displayCharacters+0x388>
    196c:	9c 83       	std	Y+4, r25	; 0x04
    196e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1970:	8d 81       	ldd	r24, Y+5	; 0x05
    1972:	9e 81       	ldd	r25, Y+6	; 0x06
    1974:	01 97       	sbiw	r24, 0x01	; 1
    1976:	9e 83       	std	Y+6, r25	; 0x06
    1978:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    197a:	8d 81       	ldd	r24, Y+5	; 0x05
    197c:	9e 81       	ldd	r25, Y+6	; 0x06
    197e:	00 97       	sbiw	r24, 0x00	; 0
    1980:	69 f7       	brne	.-38     	; 0x195c <LCD_displayCharacters+0x37c>
    1982:	14 c0       	rjmp	.+40     	; 0x19ac <LCD_displayCharacters+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1984:	6f 81       	ldd	r22, Y+7	; 0x07
    1986:	78 85       	ldd	r23, Y+8	; 0x08
    1988:	89 85       	ldd	r24, Y+9	; 0x09
    198a:	9a 85       	ldd	r25, Y+10	; 0x0a
    198c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1990:	dc 01       	movw	r26, r24
    1992:	cb 01       	movw	r24, r22
    1994:	9e 83       	std	Y+6, r25	; 0x06
    1996:	8d 83       	std	Y+5, r24	; 0x05
    1998:	8d 81       	ldd	r24, Y+5	; 0x05
    199a:	9e 81       	ldd	r25, Y+6	; 0x06
    199c:	9a 83       	std	Y+2, r25	; 0x02
    199e:	89 83       	std	Y+1, r24	; 0x01
    19a0:	89 81       	ldd	r24, Y+1	; 0x01
    19a2:	9a 81       	ldd	r25, Y+2	; 0x02
    19a4:	01 97       	sbiw	r24, 0x01	; 1
    19a6:	f1 f7       	brne	.-4      	; 0x19a4 <LCD_displayCharacters+0x3c4>
    19a8:	9a 83       	std	Y+2, r25	; 0x02
    19aa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    19ac:	e9 96       	adiw	r28, 0x39	; 57
    19ae:	0f b6       	in	r0, 0x3f	; 63
    19b0:	f8 94       	cli
    19b2:	de bf       	out	0x3e, r29	; 62
    19b4:	0f be       	out	0x3f, r0	; 63
    19b6:	cd bf       	out	0x3d, r28	; 61
    19b8:	cf 91       	pop	r28
    19ba:	df 91       	pop	r29
    19bc:	08 95       	ret

000019be <LCD_displayString>:


void LCD_displayString(const char *str) {
    19be:	df 93       	push	r29
    19c0:	cf 93       	push	r28
    19c2:	00 d0       	rcall	.+0      	; 0x19c4 <LCD_displayString+0x6>
    19c4:	0f 92       	push	r0
    19c6:	cd b7       	in	r28, 0x3d	; 61
    19c8:	de b7       	in	r29, 0x3e	; 62
    19ca:	9b 83       	std	Y+3, r25	; 0x03
    19cc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    19ce:	19 82       	std	Y+1, r1	; 0x01
    19d0:	0e c0       	rjmp	.+28     	; 0x19ee <LCD_displayString+0x30>
	while(str[i] != '\0') {
		LCD_displayCharacters(str[i]);
    19d2:	89 81       	ldd	r24, Y+1	; 0x01
    19d4:	28 2f       	mov	r18, r24
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	8a 81       	ldd	r24, Y+2	; 0x02
    19da:	9b 81       	ldd	r25, Y+3	; 0x03
    19dc:	fc 01       	movw	r30, r24
    19de:	e2 0f       	add	r30, r18
    19e0:	f3 1f       	adc	r31, r19
    19e2:	80 81       	ld	r24, Z
    19e4:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <LCD_displayCharacters>
		i++;
    19e8:	89 81       	ldd	r24, Y+1	; 0x01
    19ea:	8f 5f       	subi	r24, 0xFF	; 255
    19ec:	89 83       	std	Y+1, r24	; 0x01
}


void LCD_displayString(const char *str) {
	uint8 i = 0;
	while(str[i] != '\0') {
    19ee:	89 81       	ldd	r24, Y+1	; 0x01
    19f0:	28 2f       	mov	r18, r24
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	8a 81       	ldd	r24, Y+2	; 0x02
    19f6:	9b 81       	ldd	r25, Y+3	; 0x03
    19f8:	fc 01       	movw	r30, r24
    19fa:	e2 0f       	add	r30, r18
    19fc:	f3 1f       	adc	r31, r19
    19fe:	80 81       	ld	r24, Z
    1a00:	88 23       	and	r24, r24
    1a02:	39 f7       	brne	.-50     	; 0x19d2 <LCD_displayString+0x14>
	}
	/*
	for (int i = 0 ; i < strlen(str) ; i++) {
		LCD_displayCharacters(str[i]);
	}*/
}
    1a04:	0f 90       	pop	r0
    1a06:	0f 90       	pop	r0
    1a08:	0f 90       	pop	r0
    1a0a:	cf 91       	pop	r28
    1a0c:	df 91       	pop	r29
    1a0e:	08 95       	ret

00001a10 <LCD_moveCursor>:


void LCD_moveCursor(uint8 row, uint8 col) {
    1a10:	df 93       	push	r29
    1a12:	cf 93       	push	r28
    1a14:	00 d0       	rcall	.+0      	; 0x1a16 <LCD_moveCursor+0x6>
    1a16:	00 d0       	rcall	.+0      	; 0x1a18 <LCD_moveCursor+0x8>
    1a18:	0f 92       	push	r0
    1a1a:	cd b7       	in	r28, 0x3d	; 61
    1a1c:	de b7       	in	r29, 0x3e	; 62
    1a1e:	8a 83       	std	Y+2, r24	; 0x02
    1a20:	6b 83       	std	Y+3, r22	; 0x03

	uint8 LCD_MEMORY_ADDRESS;

	// Calculate the required address in the LCD DDRAM checking
	// The location of the cursor originally on which line
	switch(row) {
    1a22:	8a 81       	ldd	r24, Y+2	; 0x02
    1a24:	28 2f       	mov	r18, r24
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	3d 83       	std	Y+5, r19	; 0x05
    1a2a:	2c 83       	std	Y+4, r18	; 0x04
    1a2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a2e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a30:	81 30       	cpi	r24, 0x01	; 1
    1a32:	91 05       	cpc	r25, r1
    1a34:	c1 f0       	breq	.+48     	; 0x1a66 <LCD_moveCursor+0x56>
    1a36:	2c 81       	ldd	r18, Y+4	; 0x04
    1a38:	3d 81       	ldd	r19, Y+5	; 0x05
    1a3a:	22 30       	cpi	r18, 0x02	; 2
    1a3c:	31 05       	cpc	r19, r1
    1a3e:	2c f4       	brge	.+10     	; 0x1a4a <LCD_moveCursor+0x3a>
    1a40:	8c 81       	ldd	r24, Y+4	; 0x04
    1a42:	9d 81       	ldd	r25, Y+5	; 0x05
    1a44:	00 97       	sbiw	r24, 0x00	; 0
    1a46:	61 f0       	breq	.+24     	; 0x1a60 <LCD_moveCursor+0x50>
    1a48:	19 c0       	rjmp	.+50     	; 0x1a7c <LCD_moveCursor+0x6c>
    1a4a:	2c 81       	ldd	r18, Y+4	; 0x04
    1a4c:	3d 81       	ldd	r19, Y+5	; 0x05
    1a4e:	22 30       	cpi	r18, 0x02	; 2
    1a50:	31 05       	cpc	r19, r1
    1a52:	69 f0       	breq	.+26     	; 0x1a6e <LCD_moveCursor+0x5e>
    1a54:	8c 81       	ldd	r24, Y+4	; 0x04
    1a56:	9d 81       	ldd	r25, Y+5	; 0x05
    1a58:	83 30       	cpi	r24, 0x03	; 3
    1a5a:	91 05       	cpc	r25, r1
    1a5c:	61 f0       	breq	.+24     	; 0x1a76 <LCD_moveCursor+0x66>
    1a5e:	0e c0       	rjmp	.+28     	; 0x1a7c <LCD_moveCursor+0x6c>
		case 0:
			LCD_MEMORY_ADDRESS = col;
    1a60:	8b 81       	ldd	r24, Y+3	; 0x03
    1a62:	89 83       	std	Y+1, r24	; 0x01
    1a64:	0b c0       	rjmp	.+22     	; 0x1a7c <LCD_moveCursor+0x6c>
				break;
		case 1:
			LCD_MEMORY_ADDRESS = col + 0x40;
    1a66:	8b 81       	ldd	r24, Y+3	; 0x03
    1a68:	80 5c       	subi	r24, 0xC0	; 192
    1a6a:	89 83       	std	Y+1, r24	; 0x01
    1a6c:	07 c0       	rjmp	.+14     	; 0x1a7c <LCD_moveCursor+0x6c>
				break;
		case 2:
			LCD_MEMORY_ADDRESS = col + 0x10;
    1a6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a70:	80 5f       	subi	r24, 0xF0	; 240
    1a72:	89 83       	std	Y+1, r24	; 0x01
    1a74:	03 c0       	rjmp	.+6      	; 0x1a7c <LCD_moveCursor+0x6c>
				break;
		case 3:
			LCD_MEMORY_ADDRESS = col + 0x50;
    1a76:	8b 81       	ldd	r24, Y+3	; 0x03
    1a78:	80 5b       	subi	r24, 0xB0	; 176
    1a7a:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(LCD_MEMORY_ADDRESS | LCD_CURSOR_LOCATION);
    1a7c:	89 81       	ldd	r24, Y+1	; 0x01
    1a7e:	80 68       	ori	r24, 0x80	; 128
    1a80:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_sendCommand>
}
    1a84:	0f 90       	pop	r0
    1a86:	0f 90       	pop	r0
    1a88:	0f 90       	pop	r0
    1a8a:	0f 90       	pop	r0
    1a8c:	0f 90       	pop	r0
    1a8e:	cf 91       	pop	r28
    1a90:	df 91       	pop	r29
    1a92:	08 95       	ret

00001a94 <LCD_displayStringRowColumn>:


void LCD_displayStringRowColumn(uint8 row, uint8 col, const char *Str) {
    1a94:	df 93       	push	r29
    1a96:	cf 93       	push	r28
    1a98:	00 d0       	rcall	.+0      	; 0x1a9a <LCD_displayStringRowColumn+0x6>
    1a9a:	00 d0       	rcall	.+0      	; 0x1a9c <LCD_displayStringRowColumn+0x8>
    1a9c:	cd b7       	in	r28, 0x3d	; 61
    1a9e:	de b7       	in	r29, 0x3e	; 62
    1aa0:	89 83       	std	Y+1, r24	; 0x01
    1aa2:	6a 83       	std	Y+2, r22	; 0x02
    1aa4:	5c 83       	std	Y+4, r21	; 0x04
    1aa6:	4b 83       	std	Y+3, r20	; 0x03
	// Go to to the required LCD position
	LCD_moveCursor(row, col);
    1aa8:	89 81       	ldd	r24, Y+1	; 0x01
    1aaa:	6a 81       	ldd	r22, Y+2	; 0x02
    1aac:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <LCD_moveCursor>

	// Display the string from the cursor
	LCD_displayString(Str);
    1ab0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab4:	0e 94 df 0c 	call	0x19be	; 0x19be <LCD_displayString>
}
    1ab8:	0f 90       	pop	r0
    1aba:	0f 90       	pop	r0
    1abc:	0f 90       	pop	r0
    1abe:	0f 90       	pop	r0
    1ac0:	cf 91       	pop	r28
    1ac2:	df 91       	pop	r29
    1ac4:	08 95       	ret

00001ac6 <LCD_intgerToString>:

void LCD_intgerToString(int data) {
    1ac6:	df 93       	push	r29
    1ac8:	cf 93       	push	r28
    1aca:	cd b7       	in	r28, 0x3d	; 61
    1acc:	de b7       	in	r29, 0x3e	; 62
    1ace:	62 97       	sbiw	r28, 0x12	; 18
    1ad0:	0f b6       	in	r0, 0x3f	; 63
    1ad2:	f8 94       	cli
    1ad4:	de bf       	out	0x3e, r29	; 62
    1ad6:	0f be       	out	0x3f, r0	; 63
    1ad8:	cd bf       	out	0x3d, r28	; 61
    1ada:	9a 8b       	std	Y+18, r25	; 0x12
    1adc:	89 8b       	std	Y+17, r24	; 0x11
	// A string to hold the ASCII values
	char buffer[16];

	// Converts data to its ASCII
	itoa(data, buffer, 10);
    1ade:	89 89       	ldd	r24, Y+17	; 0x11
    1ae0:	9a 89       	ldd	r25, Y+18	; 0x12
    1ae2:	9e 01       	movw	r18, r28
    1ae4:	2f 5f       	subi	r18, 0xFF	; 255
    1ae6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ae8:	b9 01       	movw	r22, r18
    1aea:	4a e0       	ldi	r20, 0x0A	; 10
    1aec:	50 e0       	ldi	r21, 0x00	; 0
    1aee:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <itoa>

	// Display string with the results in the buffer
	LCD_displayString(buffer);
    1af2:	ce 01       	movw	r24, r28
    1af4:	01 96       	adiw	r24, 0x01	; 1
    1af6:	0e 94 df 0c 	call	0x19be	; 0x19be <LCD_displayString>
}
    1afa:	62 96       	adiw	r28, 0x12	; 18
    1afc:	0f b6       	in	r0, 0x3f	; 63
    1afe:	f8 94       	cli
    1b00:	de bf       	out	0x3e, r29	; 62
    1b02:	0f be       	out	0x3f, r0	; 63
    1b04:	cd bf       	out	0x3d, r28	; 61
    1b06:	cf 91       	pop	r28
    1b08:	df 91       	pop	r29
    1b0a:	08 95       	ret

00001b0c <LCD_clearScreen>:

void LCD_clearScreen(void) {
    1b0c:	df 93       	push	r29
    1b0e:	cf 93       	push	r28
    1b10:	cd b7       	in	r28, 0x3d	; 61
    1b12:	de b7       	in	r29, 0x3e	; 62
	// Clears the LCD Display
	LCD_sendCommand(LCD_CLEAR_DISPLAY);
    1b14:	81 e0       	ldi	r24, 0x01	; 1
    1b16:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_sendCommand>
}
    1b1a:	cf 91       	pop	r28
    1b1c:	df 91       	pop	r29
    1b1e:	08 95       	ret

00001b20 <KEYPAD_Init>:
	#endif

#endif /* STD_KEYPAD */


void KEYPAD_Init(void) {
    1b20:	df 93       	push	r29
    1b22:	cf 93       	push	r28
    1b24:	cd b7       	in	r28, 0x3d	; 61
    1b26:	de b7       	in	r29, 0x3e	; 62
		/* Setup PORT and PINS for for KEYPAD Rows*/
		GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN, PIN_INPUT);
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	64 e0       	ldi	r22, 0x04	; 4
    1b2c:	40 e0       	ldi	r20, 0x00	; 0
    1b2e:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN+1, PIN_INPUT);
    1b32:	81 e0       	ldi	r24, 0x01	; 1
    1b34:	65 e0       	ldi	r22, 0x05	; 5
    1b36:	40 e0       	ldi	r20, 0x00	; 0
    1b38:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN+2, PIN_INPUT);
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	66 e0       	ldi	r22, 0x06	; 6
    1b40:	40 e0       	ldi	r20, 0x00	; 0
    1b42:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN+3, PIN_INPUT);
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	67 e0       	ldi	r22, 0x07	; 7
    1b4a:	40 e0       	ldi	r20, 0x00	; 0
    1b4c:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <GPIO_setupPinDirection>

		/* Setup PORT and PINS for for KEYPAD Columns*/
		GPIO_setupPinDirection(KEYPAD_COL_PORT, KEYPAD_FIRSTCOL_PIN, PIN_INPUT);
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	60 e0       	ldi	r22, 0x00	; 0
    1b54:	40 e0       	ldi	r20, 0x00	; 0
    1b56:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(KEYPAD_COL_PORT, KEYPAD_FIRSTCOL_PIN+1, PIN_INPUT);
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
    1b5c:	61 e0       	ldi	r22, 0x01	; 1
    1b5e:	40 e0       	ldi	r20, 0x00	; 0
    1b60:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(KEYPAD_COL_PORT, KEYPAD_FIRSTCOL_PIN+2, PIN_INPUT);
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	62 e0       	ldi	r22, 0x02	; 2
    1b68:	40 e0       	ldi	r20, 0x00	; 0
    1b6a:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <GPIO_setupPinDirection>

		#if(KEYPAD_COL_NUM == 4)
			GPIO_setupPinDirection(KEYPAD_COL_PORT, KEYPAD_FIRSTCOL_PIN+3, PIN_INPUT);
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	63 e0       	ldi	r22, 0x03	; 3
    1b72:	40 e0       	ldi	r20, 0x00	; 0
    1b74:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <GPIO_setupPinDirection>
		#endif
}
    1b78:	cf 91       	pop	r28
    1b7a:	df 91       	pop	r29
    1b7c:	08 95       	ret

00001b7e <KEYPAD_getPressedKey>:



uint8 KEYPAD_getPressedKey(void) {
    1b7e:	df 93       	push	r29
    1b80:	cf 93       	push	r28
    1b82:	00 d0       	rcall	.+0      	; 0x1b84 <KEYPAD_getPressedKey+0x6>
    1b84:	cd b7       	in	r28, 0x3d	; 61
    1b86:	de b7       	in	r29, 0x3e	; 62
	uint8 row, col;
	while(1) {
			for (row = 0 ; row < KEYPAD_ROW_NUM ; row++) {
    1b88:	1a 82       	std	Y+2, r1	; 0x02
    1b8a:	3b c0       	rjmp	.+118    	; 0x1c02 <KEYPAD_getPressedKey+0x84>

				GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, PIN_OUTPUT);
    1b8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8e:	98 2f       	mov	r25, r24
    1b90:	9c 5f       	subi	r25, 0xFC	; 252
    1b92:	81 e0       	ldi	r24, 0x01	; 1
    1b94:	69 2f       	mov	r22, r25
    1b96:	41 e0       	ldi	r20, 0x01	; 1
    1b98:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <GPIO_setupPinDirection>

				/* Set/Clear the row output pin */
				GPIO_writePin(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, KEYPAD_BUTTON_PRESSED);
    1b9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9e:	98 2f       	mov	r25, r24
    1ba0:	9c 5f       	subi	r25, 0xFC	; 252
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	69 2f       	mov	r22, r25
    1ba6:	40 e0       	ldi	r20, 0x00	; 0
    1ba8:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <GPIO_writePin>

				for (col = 0 ; col < KEYPAD_COL_NUM ; col++) {
    1bac:	19 82       	std	Y+1, r1	; 0x01
    1bae:	1b c0       	rjmp	.+54     	; 0x1be6 <KEYPAD_getPressedKey+0x68>
					/* Check if the switch is pressed in this column */
					if(GPIO_readPin(KEYPAD_COL_PORT,KEYPAD_FIRSTCOL_PIN + col) == KEYPAD_BUTTON_PRESSED) {
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
    1bb2:	69 81       	ldd	r22, Y+1	; 0x01
    1bb4:	0e 94 32 11 	call	0x2264	; 0x2264 <GPIO_readPin>
    1bb8:	88 23       	and	r24, r24
    1bba:	91 f4       	brne	.+36     	; 0x1be0 <KEYPAD_getPressedKey+0x62>
							#endif
						#elif (KEYPAD_COL_NUM == 4)
							#ifdef STD_KEYPAD
								return ( (row * KEYPAD_COL_NUM) + col + 1);
							#else
								return KEYPAD_4x4_adjustKeyNumber( (row * KEYPAD_COL_NUM) + col + 1);
    1bbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbe:	88 2f       	mov	r24, r24
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	88 0f       	add	r24, r24
    1bc4:	99 1f       	adc	r25, r25
    1bc6:	88 0f       	add	r24, r24
    1bc8:	99 1f       	adc	r25, r25
    1bca:	98 2f       	mov	r25, r24
    1bcc:	89 81       	ldd	r24, Y+1	; 0x01
    1bce:	89 0f       	add	r24, r25
    1bd0:	8f 5f       	subi	r24, 0xFF	; 255
    1bd2:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <KEYPAD_4x4_adjustKeyNumber>
					}
				}
				GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, PIN_INPUT);
			}
		}
}
    1bd6:	0f 90       	pop	r0
    1bd8:	0f 90       	pop	r0
    1bda:	cf 91       	pop	r28
    1bdc:	df 91       	pop	r29
    1bde:	08 95       	ret
				GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, PIN_OUTPUT);

				/* Set/Clear the row output pin */
				GPIO_writePin(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, KEYPAD_BUTTON_PRESSED);

				for (col = 0 ; col < KEYPAD_COL_NUM ; col++) {
    1be0:	89 81       	ldd	r24, Y+1	; 0x01
    1be2:	8f 5f       	subi	r24, 0xFF	; 255
    1be4:	89 83       	std	Y+1, r24	; 0x01
    1be6:	89 81       	ldd	r24, Y+1	; 0x01
    1be8:	84 30       	cpi	r24, 0x04	; 4
    1bea:	10 f3       	brcs	.-60     	; 0x1bb0 <KEYPAD_getPressedKey+0x32>
								return KEYPAD_4x4_adjustKeyNumber( (row * KEYPAD_COL_NUM) + col + 1);
							#endif
						#endif
					}
				}
				GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, PIN_INPUT);
    1bec:	8a 81       	ldd	r24, Y+2	; 0x02
    1bee:	98 2f       	mov	r25, r24
    1bf0:	9c 5f       	subi	r25, 0xFC	; 252
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	69 2f       	mov	r22, r25
    1bf6:	40 e0       	ldi	r20, 0x00	; 0
    1bf8:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <GPIO_setupPinDirection>


uint8 KEYPAD_getPressedKey(void) {
	uint8 row, col;
	while(1) {
			for (row = 0 ; row < KEYPAD_ROW_NUM ; row++) {
    1bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfe:	8f 5f       	subi	r24, 0xFF	; 255
    1c00:	8a 83       	std	Y+2, r24	; 0x02
    1c02:	8a 81       	ldd	r24, Y+2	; 0x02
    1c04:	84 30       	cpi	r24, 0x04	; 4
    1c06:	10 f2       	brcs	.-124    	; 0x1b8c <KEYPAD_getPressedKey+0xe>
    1c08:	bf cf       	rjmp	.-130    	; 0x1b88 <KEYPAD_getPressedKey+0xa>

00001c0a <KEYPAD_4x4_adjustKeyNumber>:
			return keypad_button;
		}

	#elif (KEYPAD_COL_NUM == 4)
		// Update the keypad pressed button value with the correct one in keypad 4x4 shape
		static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number) {
    1c0a:	df 93       	push	r29
    1c0c:	cf 93       	push	r28
    1c0e:	00 d0       	rcall	.+0      	; 0x1c10 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1c10:	00 d0       	rcall	.+0      	; 0x1c12 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1c12:	cd b7       	in	r28, 0x3d	; 61
    1c14:	de b7       	in	r29, 0x3e	; 62
    1c16:	8a 83       	std	Y+2, r24	; 0x02
			uint8 keypad_button = 0;
    1c18:	19 82       	std	Y+1, r1	; 0x01
			switch(button_number) {
    1c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1c:	28 2f       	mov	r18, r24
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	3c 83       	std	Y+4, r19	; 0x04
    1c22:	2b 83       	std	Y+3, r18	; 0x03
    1c24:	8b 81       	ldd	r24, Y+3	; 0x03
    1c26:	9c 81       	ldd	r25, Y+4	; 0x04
    1c28:	88 30       	cpi	r24, 0x08	; 8
    1c2a:	91 05       	cpc	r25, r1
    1c2c:	09 f4       	brne	.+2      	; 0x1c30 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1c2e:	70 c0       	rjmp	.+224    	; 0x1d10 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1c30:	2b 81       	ldd	r18, Y+3	; 0x03
    1c32:	3c 81       	ldd	r19, Y+4	; 0x04
    1c34:	29 30       	cpi	r18, 0x09	; 9
    1c36:	31 05       	cpc	r19, r1
    1c38:	5c f5       	brge	.+86     	; 0x1c90 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1c3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c3e:	84 30       	cpi	r24, 0x04	; 4
    1c40:	91 05       	cpc	r25, r1
    1c42:	09 f4       	brne	.+2      	; 0x1c46 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1c44:	59 c0       	rjmp	.+178    	; 0x1cf8 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1c46:	2b 81       	ldd	r18, Y+3	; 0x03
    1c48:	3c 81       	ldd	r19, Y+4	; 0x04
    1c4a:	25 30       	cpi	r18, 0x05	; 5
    1c4c:	31 05       	cpc	r19, r1
    1c4e:	9c f4       	brge	.+38     	; 0x1c76 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1c50:	8b 81       	ldd	r24, Y+3	; 0x03
    1c52:	9c 81       	ldd	r25, Y+4	; 0x04
    1c54:	82 30       	cpi	r24, 0x02	; 2
    1c56:	91 05       	cpc	r25, r1
    1c58:	09 f4       	brne	.+2      	; 0x1c5c <KEYPAD_4x4_adjustKeyNumber+0x52>
    1c5a:	48 c0       	rjmp	.+144    	; 0x1cec <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1c5c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c5e:	3c 81       	ldd	r19, Y+4	; 0x04
    1c60:	23 30       	cpi	r18, 0x03	; 3
    1c62:	31 05       	cpc	r19, r1
    1c64:	0c f0       	brlt	.+2      	; 0x1c68 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1c66:	45 c0       	rjmp	.+138    	; 0x1cf2 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1c68:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c6c:	81 30       	cpi	r24, 0x01	; 1
    1c6e:	91 05       	cpc	r25, r1
    1c70:	09 f4       	brne	.+2      	; 0x1c74 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1c72:	39 c0       	rjmp	.+114    	; 0x1ce6 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1c74:	67 c0       	rjmp	.+206    	; 0x1d44 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1c76:	2b 81       	ldd	r18, Y+3	; 0x03
    1c78:	3c 81       	ldd	r19, Y+4	; 0x04
    1c7a:	26 30       	cpi	r18, 0x06	; 6
    1c7c:	31 05       	cpc	r19, r1
    1c7e:	09 f4       	brne	.+2      	; 0x1c82 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1c80:	41 c0       	rjmp	.+130    	; 0x1d04 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1c82:	8b 81       	ldd	r24, Y+3	; 0x03
    1c84:	9c 81       	ldd	r25, Y+4	; 0x04
    1c86:	87 30       	cpi	r24, 0x07	; 7
    1c88:	91 05       	cpc	r25, r1
    1c8a:	0c f0       	brlt	.+2      	; 0x1c8e <KEYPAD_4x4_adjustKeyNumber+0x84>
    1c8c:	3e c0       	rjmp	.+124    	; 0x1d0a <KEYPAD_4x4_adjustKeyNumber+0x100>
    1c8e:	37 c0       	rjmp	.+110    	; 0x1cfe <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1c90:	2b 81       	ldd	r18, Y+3	; 0x03
    1c92:	3c 81       	ldd	r19, Y+4	; 0x04
    1c94:	2c 30       	cpi	r18, 0x0C	; 12
    1c96:	31 05       	cpc	r19, r1
    1c98:	09 f4       	brne	.+2      	; 0x1c9c <KEYPAD_4x4_adjustKeyNumber+0x92>
    1c9a:	46 c0       	rjmp	.+140    	; 0x1d28 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1c9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca0:	8d 30       	cpi	r24, 0x0D	; 13
    1ca2:	91 05       	cpc	r25, r1
    1ca4:	5c f4       	brge	.+22     	; 0x1cbc <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1ca6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ca8:	3c 81       	ldd	r19, Y+4	; 0x04
    1caa:	2a 30       	cpi	r18, 0x0A	; 10
    1cac:	31 05       	cpc	r19, r1
    1cae:	b1 f1       	breq	.+108    	; 0x1d1c <KEYPAD_4x4_adjustKeyNumber+0x112>
    1cb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb4:	8b 30       	cpi	r24, 0x0B	; 11
    1cb6:	91 05       	cpc	r25, r1
    1cb8:	a4 f5       	brge	.+104    	; 0x1d22 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1cba:	2d c0       	rjmp	.+90     	; 0x1d16 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1cbc:	2b 81       	ldd	r18, Y+3	; 0x03
    1cbe:	3c 81       	ldd	r19, Y+4	; 0x04
    1cc0:	2e 30       	cpi	r18, 0x0E	; 14
    1cc2:	31 05       	cpc	r19, r1
    1cc4:	b9 f1       	breq	.+110    	; 0x1d34 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1cc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cca:	8e 30       	cpi	r24, 0x0E	; 14
    1ccc:	91 05       	cpc	r25, r1
    1cce:	7c f1       	brlt	.+94     	; 0x1d2e <KEYPAD_4x4_adjustKeyNumber+0x124>
    1cd0:	2b 81       	ldd	r18, Y+3	; 0x03
    1cd2:	3c 81       	ldd	r19, Y+4	; 0x04
    1cd4:	2f 30       	cpi	r18, 0x0F	; 15
    1cd6:	31 05       	cpc	r19, r1
    1cd8:	79 f1       	breq	.+94     	; 0x1d38 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1cda:	8b 81       	ldd	r24, Y+3	; 0x03
    1cdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cde:	80 31       	cpi	r24, 0x10	; 16
    1ce0:	91 05       	cpc	r25, r1
    1ce2:	69 f1       	breq	.+90     	; 0x1d3e <KEYPAD_4x4_adjustKeyNumber+0x134>
    1ce4:	2f c0       	rjmp	.+94     	; 0x1d44 <KEYPAD_4x4_adjustKeyNumber+0x13a>
				case 1: keypad_button = 7;
    1ce6:	87 e0       	ldi	r24, 0x07	; 7
    1ce8:	89 83       	std	Y+1, r24	; 0x01
    1cea:	2e c0       	rjmp	.+92     	; 0x1d48 <KEYPAD_4x4_adjustKeyNumber+0x13e>
						break;
				case 2: keypad_button = 8;
    1cec:	88 e0       	ldi	r24, 0x08	; 8
    1cee:	89 83       	std	Y+1, r24	; 0x01
    1cf0:	2b c0       	rjmp	.+86     	; 0x1d48 <KEYPAD_4x4_adjustKeyNumber+0x13e>
						break;
				case 3: keypad_button = 9;
    1cf2:	89 e0       	ldi	r24, 0x09	; 9
    1cf4:	89 83       	std	Y+1, r24	; 0x01
    1cf6:	28 c0       	rjmp	.+80     	; 0x1d48 <KEYPAD_4x4_adjustKeyNumber+0x13e>
						break;
				case 4: keypad_button = '%'; // ASCII Code of %
    1cf8:	85 e2       	ldi	r24, 0x25	; 37
    1cfa:	89 83       	std	Y+1, r24	; 0x01
    1cfc:	25 c0       	rjmp	.+74     	; 0x1d48 <KEYPAD_4x4_adjustKeyNumber+0x13e>
						break;
				case 5: keypad_button = 4;
    1cfe:	84 e0       	ldi	r24, 0x04	; 4
    1d00:	89 83       	std	Y+1, r24	; 0x01
    1d02:	22 c0       	rjmp	.+68     	; 0x1d48 <KEYPAD_4x4_adjustKeyNumber+0x13e>
						break;
				case 6: keypad_button = 5;
    1d04:	85 e0       	ldi	r24, 0x05	; 5
    1d06:	89 83       	std	Y+1, r24	; 0x01
    1d08:	1f c0       	rjmp	.+62     	; 0x1d48 <KEYPAD_4x4_adjustKeyNumber+0x13e>
						break;
				case 7: keypad_button = 6;
    1d0a:	86 e0       	ldi	r24, 0x06	; 6
    1d0c:	89 83       	std	Y+1, r24	; 0x01
    1d0e:	1c c0       	rjmp	.+56     	; 0x1d48 <KEYPAD_4x4_adjustKeyNumber+0x13e>
						break;
				case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1d10:	8a e2       	ldi	r24, 0x2A	; 42
    1d12:	89 83       	std	Y+1, r24	; 0x01
    1d14:	19 c0       	rjmp	.+50     	; 0x1d48 <KEYPAD_4x4_adjustKeyNumber+0x13e>
						break;
				case 9: keypad_button = 1;
    1d16:	81 e0       	ldi	r24, 0x01	; 1
    1d18:	89 83       	std	Y+1, r24	; 0x01
    1d1a:	16 c0       	rjmp	.+44     	; 0x1d48 <KEYPAD_4x4_adjustKeyNumber+0x13e>
						break;
				case 10: keypad_button = 2;
    1d1c:	82 e0       	ldi	r24, 0x02	; 2
    1d1e:	89 83       	std	Y+1, r24	; 0x01
    1d20:	13 c0       	rjmp	.+38     	; 0x1d48 <KEYPAD_4x4_adjustKeyNumber+0x13e>
						break;
				case 11: keypad_button = 3;
    1d22:	83 e0       	ldi	r24, 0x03	; 3
    1d24:	89 83       	std	Y+1, r24	; 0x01
    1d26:	10 c0       	rjmp	.+32     	; 0x1d48 <KEYPAD_4x4_adjustKeyNumber+0x13e>
						break;
				case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1d28:	8d e2       	ldi	r24, 0x2D	; 45
    1d2a:	89 83       	std	Y+1, r24	; 0x01
    1d2c:	0d c0       	rjmp	.+26     	; 0x1d48 <KEYPAD_4x4_adjustKeyNumber+0x13e>
						break;
				case 13: keypad_button = 13;  /* ASCII of Enter */
    1d2e:	8d e0       	ldi	r24, 0x0D	; 13
    1d30:	89 83       	std	Y+1, r24	; 0x01
    1d32:	0a c0       	rjmp	.+20     	; 0x1d48 <KEYPAD_4x4_adjustKeyNumber+0x13e>
						break;
				case 14: keypad_button = 0;
    1d34:	19 82       	std	Y+1, r1	; 0x01
    1d36:	08 c0       	rjmp	.+16     	; 0x1d48 <KEYPAD_4x4_adjustKeyNumber+0x13e>
						break;
				case 15: keypad_button = '='; /* ASCII Code of '=' */
    1d38:	8d e3       	ldi	r24, 0x3D	; 61
    1d3a:	89 83       	std	Y+1, r24	; 0x01
    1d3c:	05 c0       	rjmp	.+10     	; 0x1d48 <KEYPAD_4x4_adjustKeyNumber+0x13e>
						break;
				case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1d3e:	8b e2       	ldi	r24, 0x2B	; 43
    1d40:	89 83       	std	Y+1, r24	; 0x01
    1d42:	02 c0       	rjmp	.+4      	; 0x1d48 <KEYPAD_4x4_adjustKeyNumber+0x13e>
						break;
				default: keypad_button = button_number;
    1d44:	8a 81       	ldd	r24, Y+2	; 0x02
    1d46:	89 83       	std	Y+1, r24	; 0x01
						break;
			}
			return keypad_button;
    1d48:	89 81       	ldd	r24, Y+1	; 0x01
		}
    1d4a:	0f 90       	pop	r0
    1d4c:	0f 90       	pop	r0
    1d4e:	0f 90       	pop	r0
    1d50:	0f 90       	pop	r0
    1d52:	cf 91       	pop	r28
    1d54:	df 91       	pop	r29
    1d56:	08 95       	ret

00001d58 <GPIO_setupPinDirection>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
GPIO_Error_t GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction) {
    1d58:	df 93       	push	r29
    1d5a:	cf 93       	push	r28
    1d5c:	00 d0       	rcall	.+0      	; 0x1d5e <GPIO_setupPinDirection+0x6>
    1d5e:	00 d0       	rcall	.+0      	; 0x1d60 <GPIO_setupPinDirection+0x8>
    1d60:	00 d0       	rcall	.+0      	; 0x1d62 <GPIO_setupPinDirection+0xa>
    1d62:	cd b7       	in	r28, 0x3d	; 61
    1d64:	de b7       	in	r29, 0x3e	; 62
    1d66:	8a 83       	std	Y+2, r24	; 0x02
    1d68:	6b 83       	std	Y+3, r22	; 0x03
    1d6a:	4c 83       	std	Y+4, r20	; 0x04
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t GPIO_Driver_Checker = NULL;
    1d6c:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    1d6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d70:	88 30       	cpi	r24, 0x08	; 8
    1d72:	18 f0       	brcs	.+6      	; 0x1d7a <GPIO_setupPinDirection+0x22>
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
    1d74:	81 e0       	ldi	r24, 0x01	; 1
    1d76:	89 83       	std	Y+1, r24	; 0x01
    1d78:	e1 c0       	rjmp	.+450    	; 0x1f3c <GPIO_setupPinDirection+0x1e4>
	}
	else if((port_num >= NUM_OF_PORTS)) {
    1d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7c:	84 30       	cpi	r24, 0x04	; 4
    1d7e:	18 f0       	brcs	.+6      	; 0x1d86 <GPIO_setupPinDirection+0x2e>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    1d80:	82 e0       	ldi	r24, 0x02	; 2
    1d82:	89 83       	std	Y+1, r24	; 0x01
    1d84:	db c0       	rjmp	.+438    	; 0x1f3c <GPIO_setupPinDirection+0x1e4>
	}
	else if((direction != PIN_INPUT) && (direction != PIN_OUTPUT)) {
    1d86:	8c 81       	ldd	r24, Y+4	; 0x04
    1d88:	88 23       	and	r24, r24
    1d8a:	31 f0       	breq	.+12     	; 0x1d98 <GPIO_setupPinDirection+0x40>
    1d8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d8e:	81 30       	cpi	r24, 0x01	; 1
    1d90:	19 f0       	breq	.+6      	; 0x1d98 <GPIO_setupPinDirection+0x40>
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
    1d92:	83 e0       	ldi	r24, 0x03	; 3
    1d94:	89 83       	std	Y+1, r24	; 0x01
    1d96:	d2 c0       	rjmp	.+420    	; 0x1f3c <GPIO_setupPinDirection+0x1e4>
	}
	else {
		/* Setup the pin direction as required */
		switch(port_num) {
    1d98:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9a:	28 2f       	mov	r18, r24
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	3e 83       	std	Y+6, r19	; 0x06
    1da0:	2d 83       	std	Y+5, r18	; 0x05
    1da2:	8d 81       	ldd	r24, Y+5	; 0x05
    1da4:	9e 81       	ldd	r25, Y+6	; 0x06
    1da6:	81 30       	cpi	r24, 0x01	; 1
    1da8:	91 05       	cpc	r25, r1
    1daa:	09 f4       	brne	.+2      	; 0x1dae <GPIO_setupPinDirection+0x56>
    1dac:	43 c0       	rjmp	.+134    	; 0x1e34 <GPIO_setupPinDirection+0xdc>
    1dae:	2d 81       	ldd	r18, Y+5	; 0x05
    1db0:	3e 81       	ldd	r19, Y+6	; 0x06
    1db2:	22 30       	cpi	r18, 0x02	; 2
    1db4:	31 05       	cpc	r19, r1
    1db6:	2c f4       	brge	.+10     	; 0x1dc2 <GPIO_setupPinDirection+0x6a>
    1db8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dba:	9e 81       	ldd	r25, Y+6	; 0x06
    1dbc:	00 97       	sbiw	r24, 0x00	; 0
    1dbe:	71 f0       	breq	.+28     	; 0x1ddc <GPIO_setupPinDirection+0x84>
    1dc0:	bc c0       	rjmp	.+376    	; 0x1f3a <GPIO_setupPinDirection+0x1e2>
    1dc2:	2d 81       	ldd	r18, Y+5	; 0x05
    1dc4:	3e 81       	ldd	r19, Y+6	; 0x06
    1dc6:	22 30       	cpi	r18, 0x02	; 2
    1dc8:	31 05       	cpc	r19, r1
    1dca:	09 f4       	brne	.+2      	; 0x1dce <GPIO_setupPinDirection+0x76>
    1dcc:	5f c0       	rjmp	.+190    	; 0x1e8c <GPIO_setupPinDirection+0x134>
    1dce:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd0:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd2:	83 30       	cpi	r24, 0x03	; 3
    1dd4:	91 05       	cpc	r25, r1
    1dd6:	09 f4       	brne	.+2      	; 0x1dda <GPIO_setupPinDirection+0x82>
    1dd8:	85 c0       	rjmp	.+266    	; 0x1ee4 <GPIO_setupPinDirection+0x18c>
    1dda:	af c0       	rjmp	.+350    	; 0x1f3a <GPIO_setupPinDirection+0x1e2>
		case PORT_A:
			if(direction == PIN_OUTPUT) {
    1ddc:	8c 81       	ldd	r24, Y+4	; 0x04
    1dde:	81 30       	cpi	r24, 0x01	; 1
    1de0:	a1 f4       	brne	.+40     	; 0x1e0a <GPIO_setupPinDirection+0xb2>
				SET_BIT(DDRA, pin_num);
    1de2:	aa e3       	ldi	r26, 0x3A	; 58
    1de4:	b0 e0       	ldi	r27, 0x00	; 0
    1de6:	ea e3       	ldi	r30, 0x3A	; 58
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	80 81       	ld	r24, Z
    1dec:	48 2f       	mov	r20, r24
    1dee:	8b 81       	ldd	r24, Y+3	; 0x03
    1df0:	28 2f       	mov	r18, r24
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	02 2e       	mov	r0, r18
    1dfa:	02 c0       	rjmp	.+4      	; 0x1e00 <GPIO_setupPinDirection+0xa8>
    1dfc:	88 0f       	add	r24, r24
    1dfe:	99 1f       	adc	r25, r25
    1e00:	0a 94       	dec	r0
    1e02:	e2 f7       	brpl	.-8      	; 0x1dfc <GPIO_setupPinDirection+0xa4>
    1e04:	84 2b       	or	r24, r20
    1e06:	8c 93       	st	X, r24
    1e08:	98 c0       	rjmp	.+304    	; 0x1f3a <GPIO_setupPinDirection+0x1e2>
			}
			else {
				CLR_BIT(DDRA, pin_num);
    1e0a:	aa e3       	ldi	r26, 0x3A	; 58
    1e0c:	b0 e0       	ldi	r27, 0x00	; 0
    1e0e:	ea e3       	ldi	r30, 0x3A	; 58
    1e10:	f0 e0       	ldi	r31, 0x00	; 0
    1e12:	80 81       	ld	r24, Z
    1e14:	48 2f       	mov	r20, r24
    1e16:	8b 81       	ldd	r24, Y+3	; 0x03
    1e18:	28 2f       	mov	r18, r24
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	02 2e       	mov	r0, r18
    1e22:	02 c0       	rjmp	.+4      	; 0x1e28 <GPIO_setupPinDirection+0xd0>
    1e24:	88 0f       	add	r24, r24
    1e26:	99 1f       	adc	r25, r25
    1e28:	0a 94       	dec	r0
    1e2a:	e2 f7       	brpl	.-8      	; 0x1e24 <GPIO_setupPinDirection+0xcc>
    1e2c:	80 95       	com	r24
    1e2e:	84 23       	and	r24, r20
    1e30:	8c 93       	st	X, r24
    1e32:	83 c0       	rjmp	.+262    	; 0x1f3a <GPIO_setupPinDirection+0x1e2>
			}
			break;
		case PORT_B:
			if(direction == PIN_OUTPUT) {
    1e34:	8c 81       	ldd	r24, Y+4	; 0x04
    1e36:	81 30       	cpi	r24, 0x01	; 1
    1e38:	a1 f4       	brne	.+40     	; 0x1e62 <GPIO_setupPinDirection+0x10a>
				SET_BIT(DDRB,pin_num);
    1e3a:	a7 e3       	ldi	r26, 0x37	; 55
    1e3c:	b0 e0       	ldi	r27, 0x00	; 0
    1e3e:	e7 e3       	ldi	r30, 0x37	; 55
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	80 81       	ld	r24, Z
    1e44:	48 2f       	mov	r20, r24
    1e46:	8b 81       	ldd	r24, Y+3	; 0x03
    1e48:	28 2f       	mov	r18, r24
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	81 e0       	ldi	r24, 0x01	; 1
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	02 2e       	mov	r0, r18
    1e52:	02 c0       	rjmp	.+4      	; 0x1e58 <GPIO_setupPinDirection+0x100>
    1e54:	88 0f       	add	r24, r24
    1e56:	99 1f       	adc	r25, r25
    1e58:	0a 94       	dec	r0
    1e5a:	e2 f7       	brpl	.-8      	; 0x1e54 <GPIO_setupPinDirection+0xfc>
    1e5c:	84 2b       	or	r24, r20
    1e5e:	8c 93       	st	X, r24
    1e60:	6c c0       	rjmp	.+216    	; 0x1f3a <GPIO_setupPinDirection+0x1e2>
			}
			else {
				CLR_BIT(DDRB,pin_num);
    1e62:	a7 e3       	ldi	r26, 0x37	; 55
    1e64:	b0 e0       	ldi	r27, 0x00	; 0
    1e66:	e7 e3       	ldi	r30, 0x37	; 55
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	80 81       	ld	r24, Z
    1e6c:	48 2f       	mov	r20, r24
    1e6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e70:	28 2f       	mov	r18, r24
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	81 e0       	ldi	r24, 0x01	; 1
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	02 2e       	mov	r0, r18
    1e7a:	02 c0       	rjmp	.+4      	; 0x1e80 <GPIO_setupPinDirection+0x128>
    1e7c:	88 0f       	add	r24, r24
    1e7e:	99 1f       	adc	r25, r25
    1e80:	0a 94       	dec	r0
    1e82:	e2 f7       	brpl	.-8      	; 0x1e7c <GPIO_setupPinDirection+0x124>
    1e84:	80 95       	com	r24
    1e86:	84 23       	and	r24, r20
    1e88:	8c 93       	st	X, r24
    1e8a:	57 c0       	rjmp	.+174    	; 0x1f3a <GPIO_setupPinDirection+0x1e2>
			}
			break;
		case PORT_C:
			if(direction == PIN_OUTPUT) {
    1e8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e8e:	81 30       	cpi	r24, 0x01	; 1
    1e90:	a1 f4       	brne	.+40     	; 0x1eba <GPIO_setupPinDirection+0x162>
				SET_BIT(DDRC,pin_num);
    1e92:	a4 e3       	ldi	r26, 0x34	; 52
    1e94:	b0 e0       	ldi	r27, 0x00	; 0
    1e96:	e4 e3       	ldi	r30, 0x34	; 52
    1e98:	f0 e0       	ldi	r31, 0x00	; 0
    1e9a:	80 81       	ld	r24, Z
    1e9c:	48 2f       	mov	r20, r24
    1e9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea0:	28 2f       	mov	r18, r24
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	81 e0       	ldi	r24, 0x01	; 1
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	02 2e       	mov	r0, r18
    1eaa:	02 c0       	rjmp	.+4      	; 0x1eb0 <GPIO_setupPinDirection+0x158>
    1eac:	88 0f       	add	r24, r24
    1eae:	99 1f       	adc	r25, r25
    1eb0:	0a 94       	dec	r0
    1eb2:	e2 f7       	brpl	.-8      	; 0x1eac <GPIO_setupPinDirection+0x154>
    1eb4:	84 2b       	or	r24, r20
    1eb6:	8c 93       	st	X, r24
    1eb8:	40 c0       	rjmp	.+128    	; 0x1f3a <GPIO_setupPinDirection+0x1e2>
			}
			else {
				CLR_BIT(DDRC,pin_num);
    1eba:	a4 e3       	ldi	r26, 0x34	; 52
    1ebc:	b0 e0       	ldi	r27, 0x00	; 0
    1ebe:	e4 e3       	ldi	r30, 0x34	; 52
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	80 81       	ld	r24, Z
    1ec4:	48 2f       	mov	r20, r24
    1ec6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec8:	28 2f       	mov	r18, r24
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	02 2e       	mov	r0, r18
    1ed2:	02 c0       	rjmp	.+4      	; 0x1ed8 <GPIO_setupPinDirection+0x180>
    1ed4:	88 0f       	add	r24, r24
    1ed6:	99 1f       	adc	r25, r25
    1ed8:	0a 94       	dec	r0
    1eda:	e2 f7       	brpl	.-8      	; 0x1ed4 <GPIO_setupPinDirection+0x17c>
    1edc:	80 95       	com	r24
    1ede:	84 23       	and	r24, r20
    1ee0:	8c 93       	st	X, r24
    1ee2:	2b c0       	rjmp	.+86     	; 0x1f3a <GPIO_setupPinDirection+0x1e2>
			}
			break;
		case PORT_D:
			if(direction == PIN_OUTPUT) {
    1ee4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ee6:	81 30       	cpi	r24, 0x01	; 1
    1ee8:	a1 f4       	brne	.+40     	; 0x1f12 <GPIO_setupPinDirection+0x1ba>
				SET_BIT(DDRD,pin_num);
    1eea:	a1 e3       	ldi	r26, 0x31	; 49
    1eec:	b0 e0       	ldi	r27, 0x00	; 0
    1eee:	e1 e3       	ldi	r30, 0x31	; 49
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	80 81       	ld	r24, Z
    1ef4:	48 2f       	mov	r20, r24
    1ef6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef8:	28 2f       	mov	r18, r24
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	81 e0       	ldi	r24, 0x01	; 1
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	02 2e       	mov	r0, r18
    1f02:	02 c0       	rjmp	.+4      	; 0x1f08 <GPIO_setupPinDirection+0x1b0>
    1f04:	88 0f       	add	r24, r24
    1f06:	99 1f       	adc	r25, r25
    1f08:	0a 94       	dec	r0
    1f0a:	e2 f7       	brpl	.-8      	; 0x1f04 <GPIO_setupPinDirection+0x1ac>
    1f0c:	84 2b       	or	r24, r20
    1f0e:	8c 93       	st	X, r24
    1f10:	14 c0       	rjmp	.+40     	; 0x1f3a <GPIO_setupPinDirection+0x1e2>
			}
			else {
				CLR_BIT(DDRD,pin_num);
    1f12:	a1 e3       	ldi	r26, 0x31	; 49
    1f14:	b0 e0       	ldi	r27, 0x00	; 0
    1f16:	e1 e3       	ldi	r30, 0x31	; 49
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	80 81       	ld	r24, Z
    1f1c:	48 2f       	mov	r20, r24
    1f1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f20:	28 2f       	mov	r18, r24
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	81 e0       	ldi	r24, 0x01	; 1
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	02 2e       	mov	r0, r18
    1f2a:	02 c0       	rjmp	.+4      	; 0x1f30 <GPIO_setupPinDirection+0x1d8>
    1f2c:	88 0f       	add	r24, r24
    1f2e:	99 1f       	adc	r25, r25
    1f30:	0a 94       	dec	r0
    1f32:	e2 f7       	brpl	.-8      	; 0x1f2c <GPIO_setupPinDirection+0x1d4>
    1f34:	80 95       	com	r24
    1f36:	84 23       	and	r24, r20
    1f38:	8c 93       	st	X, r24
			}
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    1f3a:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    1f3c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f3e:	26 96       	adiw	r28, 0x06	; 6
    1f40:	0f b6       	in	r0, 0x3f	; 63
    1f42:	f8 94       	cli
    1f44:	de bf       	out	0x3e, r29	; 62
    1f46:	0f be       	out	0x3f, r0	; 63
    1f48:	cd bf       	out	0x3d, r28	; 61
    1f4a:	cf 91       	pop	r28
    1f4c:	df 91       	pop	r29
    1f4e:	08 95       	ret

00001f50 <GPIO_writePin>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
GPIO_Error_t GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value) {
    1f50:	df 93       	push	r29
    1f52:	cf 93       	push	r28
    1f54:	00 d0       	rcall	.+0      	; 0x1f56 <GPIO_writePin+0x6>
    1f56:	00 d0       	rcall	.+0      	; 0x1f58 <GPIO_writePin+0x8>
    1f58:	00 d0       	rcall	.+0      	; 0x1f5a <GPIO_writePin+0xa>
    1f5a:	cd b7       	in	r28, 0x3d	; 61
    1f5c:	de b7       	in	r29, 0x3e	; 62
    1f5e:	8a 83       	std	Y+2, r24	; 0x02
    1f60:	6b 83       	std	Y+3, r22	; 0x03
    1f62:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t GPIO_Driver_Checker = NULL;
    1f64:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    1f66:	8b 81       	ldd	r24, Y+3	; 0x03
    1f68:	88 30       	cpi	r24, 0x08	; 8
    1f6a:	18 f0       	brcs	.+6      	; 0x1f72 <GPIO_writePin+0x22>
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	89 83       	std	Y+1, r24	; 0x01
    1f70:	e1 c0       	rjmp	.+450    	; 0x2134 <GPIO_writePin+0x1e4>
	}
	else if((port_num >= NUM_OF_PORTS)) {
    1f72:	8a 81       	ldd	r24, Y+2	; 0x02
    1f74:	84 30       	cpi	r24, 0x04	; 4
    1f76:	18 f0       	brcs	.+6      	; 0x1f7e <GPIO_writePin+0x2e>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    1f78:	82 e0       	ldi	r24, 0x02	; 2
    1f7a:	89 83       	std	Y+1, r24	; 0x01
    1f7c:	db c0       	rjmp	.+438    	; 0x2134 <GPIO_writePin+0x1e4>
	}
	else if((value != LOGIC_HIGH) && (value != LOGIC_LOW)) {
    1f7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f80:	81 30       	cpi	r24, 0x01	; 1
    1f82:	31 f0       	breq	.+12     	; 0x1f90 <GPIO_writePin+0x40>
    1f84:	8c 81       	ldd	r24, Y+4	; 0x04
    1f86:	88 23       	and	r24, r24
    1f88:	19 f0       	breq	.+6      	; 0x1f90 <GPIO_writePin+0x40>
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
    1f8a:	83 e0       	ldi	r24, 0x03	; 3
    1f8c:	89 83       	std	Y+1, r24	; 0x01
    1f8e:	d2 c0       	rjmp	.+420    	; 0x2134 <GPIO_writePin+0x1e4>
	}
	else {
		switch(port_num) {
    1f90:	8a 81       	ldd	r24, Y+2	; 0x02
    1f92:	28 2f       	mov	r18, r24
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	3e 83       	std	Y+6, r19	; 0x06
    1f98:	2d 83       	std	Y+5, r18	; 0x05
    1f9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f9e:	81 30       	cpi	r24, 0x01	; 1
    1fa0:	91 05       	cpc	r25, r1
    1fa2:	09 f4       	brne	.+2      	; 0x1fa6 <GPIO_writePin+0x56>
    1fa4:	43 c0       	rjmp	.+134    	; 0x202c <GPIO_writePin+0xdc>
    1fa6:	2d 81       	ldd	r18, Y+5	; 0x05
    1fa8:	3e 81       	ldd	r19, Y+6	; 0x06
    1faa:	22 30       	cpi	r18, 0x02	; 2
    1fac:	31 05       	cpc	r19, r1
    1fae:	2c f4       	brge	.+10     	; 0x1fba <GPIO_writePin+0x6a>
    1fb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fb4:	00 97       	sbiw	r24, 0x00	; 0
    1fb6:	71 f0       	breq	.+28     	; 0x1fd4 <GPIO_writePin+0x84>
    1fb8:	bc c0       	rjmp	.+376    	; 0x2132 <GPIO_writePin+0x1e2>
    1fba:	2d 81       	ldd	r18, Y+5	; 0x05
    1fbc:	3e 81       	ldd	r19, Y+6	; 0x06
    1fbe:	22 30       	cpi	r18, 0x02	; 2
    1fc0:	31 05       	cpc	r19, r1
    1fc2:	09 f4       	brne	.+2      	; 0x1fc6 <GPIO_writePin+0x76>
    1fc4:	5f c0       	rjmp	.+190    	; 0x2084 <GPIO_writePin+0x134>
    1fc6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc8:	9e 81       	ldd	r25, Y+6	; 0x06
    1fca:	83 30       	cpi	r24, 0x03	; 3
    1fcc:	91 05       	cpc	r25, r1
    1fce:	09 f4       	brne	.+2      	; 0x1fd2 <GPIO_writePin+0x82>
    1fd0:	85 c0       	rjmp	.+266    	; 0x20dc <GPIO_writePin+0x18c>
    1fd2:	af c0       	rjmp	.+350    	; 0x2132 <GPIO_writePin+0x1e2>
		case PORT_A:
			if(value == LOGIC_HIGH) {
    1fd4:	8c 81       	ldd	r24, Y+4	; 0x04
    1fd6:	81 30       	cpi	r24, 0x01	; 1
    1fd8:	a1 f4       	brne	.+40     	; 0x2002 <GPIO_writePin+0xb2>
				SET_BIT(PORTA,pin_num);
    1fda:	ab e3       	ldi	r26, 0x3B	; 59
    1fdc:	b0 e0       	ldi	r27, 0x00	; 0
    1fde:	eb e3       	ldi	r30, 0x3B	; 59
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	80 81       	ld	r24, Z
    1fe4:	48 2f       	mov	r20, r24
    1fe6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe8:	28 2f       	mov	r18, r24
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	02 2e       	mov	r0, r18
    1ff2:	02 c0       	rjmp	.+4      	; 0x1ff8 <GPIO_writePin+0xa8>
    1ff4:	88 0f       	add	r24, r24
    1ff6:	99 1f       	adc	r25, r25
    1ff8:	0a 94       	dec	r0
    1ffa:	e2 f7       	brpl	.-8      	; 0x1ff4 <GPIO_writePin+0xa4>
    1ffc:	84 2b       	or	r24, r20
    1ffe:	8c 93       	st	X, r24
    2000:	98 c0       	rjmp	.+304    	; 0x2132 <GPIO_writePin+0x1e2>
			}
			else {
				CLR_BIT(PORTA,pin_num);
    2002:	ab e3       	ldi	r26, 0x3B	; 59
    2004:	b0 e0       	ldi	r27, 0x00	; 0
    2006:	eb e3       	ldi	r30, 0x3B	; 59
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	80 81       	ld	r24, Z
    200c:	48 2f       	mov	r20, r24
    200e:	8b 81       	ldd	r24, Y+3	; 0x03
    2010:	28 2f       	mov	r18, r24
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	81 e0       	ldi	r24, 0x01	; 1
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	02 2e       	mov	r0, r18
    201a:	02 c0       	rjmp	.+4      	; 0x2020 <GPIO_writePin+0xd0>
    201c:	88 0f       	add	r24, r24
    201e:	99 1f       	adc	r25, r25
    2020:	0a 94       	dec	r0
    2022:	e2 f7       	brpl	.-8      	; 0x201c <GPIO_writePin+0xcc>
    2024:	80 95       	com	r24
    2026:	84 23       	and	r24, r20
    2028:	8c 93       	st	X, r24
    202a:	83 c0       	rjmp	.+262    	; 0x2132 <GPIO_writePin+0x1e2>
			}
			break;
		case PORT_B:
			if(value == LOGIC_HIGH) {
    202c:	8c 81       	ldd	r24, Y+4	; 0x04
    202e:	81 30       	cpi	r24, 0x01	; 1
    2030:	a1 f4       	brne	.+40     	; 0x205a <GPIO_writePin+0x10a>
				SET_BIT(PORTB,pin_num);
    2032:	a8 e3       	ldi	r26, 0x38	; 56
    2034:	b0 e0       	ldi	r27, 0x00	; 0
    2036:	e8 e3       	ldi	r30, 0x38	; 56
    2038:	f0 e0       	ldi	r31, 0x00	; 0
    203a:	80 81       	ld	r24, Z
    203c:	48 2f       	mov	r20, r24
    203e:	8b 81       	ldd	r24, Y+3	; 0x03
    2040:	28 2f       	mov	r18, r24
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	02 2e       	mov	r0, r18
    204a:	02 c0       	rjmp	.+4      	; 0x2050 <GPIO_writePin+0x100>
    204c:	88 0f       	add	r24, r24
    204e:	99 1f       	adc	r25, r25
    2050:	0a 94       	dec	r0
    2052:	e2 f7       	brpl	.-8      	; 0x204c <GPIO_writePin+0xfc>
    2054:	84 2b       	or	r24, r20
    2056:	8c 93       	st	X, r24
    2058:	6c c0       	rjmp	.+216    	; 0x2132 <GPIO_writePin+0x1e2>
			}
			else {
				CLR_BIT(PORTB,pin_num);
    205a:	a8 e3       	ldi	r26, 0x38	; 56
    205c:	b0 e0       	ldi	r27, 0x00	; 0
    205e:	e8 e3       	ldi	r30, 0x38	; 56
    2060:	f0 e0       	ldi	r31, 0x00	; 0
    2062:	80 81       	ld	r24, Z
    2064:	48 2f       	mov	r20, r24
    2066:	8b 81       	ldd	r24, Y+3	; 0x03
    2068:	28 2f       	mov	r18, r24
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	02 2e       	mov	r0, r18
    2072:	02 c0       	rjmp	.+4      	; 0x2078 <GPIO_writePin+0x128>
    2074:	88 0f       	add	r24, r24
    2076:	99 1f       	adc	r25, r25
    2078:	0a 94       	dec	r0
    207a:	e2 f7       	brpl	.-8      	; 0x2074 <GPIO_writePin+0x124>
    207c:	80 95       	com	r24
    207e:	84 23       	and	r24, r20
    2080:	8c 93       	st	X, r24
    2082:	57 c0       	rjmp	.+174    	; 0x2132 <GPIO_writePin+0x1e2>
			}
			break;
		case PORT_C:
			if(value == LOGIC_HIGH) {
    2084:	8c 81       	ldd	r24, Y+4	; 0x04
    2086:	81 30       	cpi	r24, 0x01	; 1
    2088:	a1 f4       	brne	.+40     	; 0x20b2 <GPIO_writePin+0x162>
				SET_BIT(PORTC,pin_num);
    208a:	a5 e3       	ldi	r26, 0x35	; 53
    208c:	b0 e0       	ldi	r27, 0x00	; 0
    208e:	e5 e3       	ldi	r30, 0x35	; 53
    2090:	f0 e0       	ldi	r31, 0x00	; 0
    2092:	80 81       	ld	r24, Z
    2094:	48 2f       	mov	r20, r24
    2096:	8b 81       	ldd	r24, Y+3	; 0x03
    2098:	28 2f       	mov	r18, r24
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	81 e0       	ldi	r24, 0x01	; 1
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	02 2e       	mov	r0, r18
    20a2:	02 c0       	rjmp	.+4      	; 0x20a8 <GPIO_writePin+0x158>
    20a4:	88 0f       	add	r24, r24
    20a6:	99 1f       	adc	r25, r25
    20a8:	0a 94       	dec	r0
    20aa:	e2 f7       	brpl	.-8      	; 0x20a4 <GPIO_writePin+0x154>
    20ac:	84 2b       	or	r24, r20
    20ae:	8c 93       	st	X, r24
    20b0:	40 c0       	rjmp	.+128    	; 0x2132 <GPIO_writePin+0x1e2>
			}
			else {
				CLR_BIT(PORTC,pin_num);
    20b2:	a5 e3       	ldi	r26, 0x35	; 53
    20b4:	b0 e0       	ldi	r27, 0x00	; 0
    20b6:	e5 e3       	ldi	r30, 0x35	; 53
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	80 81       	ld	r24, Z
    20bc:	48 2f       	mov	r20, r24
    20be:	8b 81       	ldd	r24, Y+3	; 0x03
    20c0:	28 2f       	mov	r18, r24
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	81 e0       	ldi	r24, 0x01	; 1
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	02 2e       	mov	r0, r18
    20ca:	02 c0       	rjmp	.+4      	; 0x20d0 <GPIO_writePin+0x180>
    20cc:	88 0f       	add	r24, r24
    20ce:	99 1f       	adc	r25, r25
    20d0:	0a 94       	dec	r0
    20d2:	e2 f7       	brpl	.-8      	; 0x20cc <GPIO_writePin+0x17c>
    20d4:	80 95       	com	r24
    20d6:	84 23       	and	r24, r20
    20d8:	8c 93       	st	X, r24
    20da:	2b c0       	rjmp	.+86     	; 0x2132 <GPIO_writePin+0x1e2>
			}
			break;
		case PORT_D:
			if(value == LOGIC_HIGH) {
    20dc:	8c 81       	ldd	r24, Y+4	; 0x04
    20de:	81 30       	cpi	r24, 0x01	; 1
    20e0:	a1 f4       	brne	.+40     	; 0x210a <GPIO_writePin+0x1ba>
				SET_BIT(PORTD,pin_num);
    20e2:	a2 e3       	ldi	r26, 0x32	; 50
    20e4:	b0 e0       	ldi	r27, 0x00	; 0
    20e6:	e2 e3       	ldi	r30, 0x32	; 50
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	80 81       	ld	r24, Z
    20ec:	48 2f       	mov	r20, r24
    20ee:	8b 81       	ldd	r24, Y+3	; 0x03
    20f0:	28 2f       	mov	r18, r24
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	81 e0       	ldi	r24, 0x01	; 1
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	02 2e       	mov	r0, r18
    20fa:	02 c0       	rjmp	.+4      	; 0x2100 <GPIO_writePin+0x1b0>
    20fc:	88 0f       	add	r24, r24
    20fe:	99 1f       	adc	r25, r25
    2100:	0a 94       	dec	r0
    2102:	e2 f7       	brpl	.-8      	; 0x20fc <GPIO_writePin+0x1ac>
    2104:	84 2b       	or	r24, r20
    2106:	8c 93       	st	X, r24
    2108:	14 c0       	rjmp	.+40     	; 0x2132 <GPIO_writePin+0x1e2>
			}
			else {
				CLR_BIT(PORTD,pin_num);
    210a:	a2 e3       	ldi	r26, 0x32	; 50
    210c:	b0 e0       	ldi	r27, 0x00	; 0
    210e:	e2 e3       	ldi	r30, 0x32	; 50
    2110:	f0 e0       	ldi	r31, 0x00	; 0
    2112:	80 81       	ld	r24, Z
    2114:	48 2f       	mov	r20, r24
    2116:	8b 81       	ldd	r24, Y+3	; 0x03
    2118:	28 2f       	mov	r18, r24
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	81 e0       	ldi	r24, 0x01	; 1
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	02 2e       	mov	r0, r18
    2122:	02 c0       	rjmp	.+4      	; 0x2128 <GPIO_writePin+0x1d8>
    2124:	88 0f       	add	r24, r24
    2126:	99 1f       	adc	r25, r25
    2128:	0a 94       	dec	r0
    212a:	e2 f7       	brpl	.-8      	; 0x2124 <GPIO_writePin+0x1d4>
    212c:	80 95       	com	r24
    212e:	84 23       	and	r24, r20
    2130:	8c 93       	st	X, r24
			}
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    2132:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    2134:	89 81       	ldd	r24, Y+1	; 0x01
}
    2136:	26 96       	adiw	r28, 0x06	; 6
    2138:	0f b6       	in	r0, 0x3f	; 63
    213a:	f8 94       	cli
    213c:	de bf       	out	0x3e, r29	; 62
    213e:	0f be       	out	0x3f, r0	; 63
    2140:	cd bf       	out	0x3d, r28	; 61
    2142:	cf 91       	pop	r28
    2144:	df 91       	pop	r29
    2146:	08 95       	ret

00002148 <GPIO_togglePin>:


GPIO_Error_t GPIO_togglePin(uint8 port_num, uint8 pin_num) {
    2148:	df 93       	push	r29
    214a:	cf 93       	push	r28
    214c:	00 d0       	rcall	.+0      	; 0x214e <GPIO_togglePin+0x6>
    214e:	00 d0       	rcall	.+0      	; 0x2150 <GPIO_togglePin+0x8>
    2150:	0f 92       	push	r0
    2152:	cd b7       	in	r28, 0x3d	; 61
    2154:	de b7       	in	r29, 0x3e	; 62
    2156:	8a 83       	std	Y+2, r24	; 0x02
    2158:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t GPIO_Driver_Checker = NULL;
    215a:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    215c:	8b 81       	ldd	r24, Y+3	; 0x03
    215e:	88 30       	cpi	r24, 0x08	; 8
    2160:	18 f0       	brcs	.+6      	; 0x2168 <GPIO_togglePin+0x20>
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
    2162:	81 e0       	ldi	r24, 0x01	; 1
    2164:	89 83       	std	Y+1, r24	; 0x01
    2166:	75 c0       	rjmp	.+234    	; 0x2252 <GPIO_togglePin+0x10a>
	}
	else if((port_num >= NUM_OF_PORTS)) {
    2168:	8a 81       	ldd	r24, Y+2	; 0x02
    216a:	84 30       	cpi	r24, 0x04	; 4
    216c:	18 f0       	brcs	.+6      	; 0x2174 <GPIO_togglePin+0x2c>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    216e:	82 e0       	ldi	r24, 0x02	; 2
    2170:	89 83       	std	Y+1, r24	; 0x01
    2172:	6f c0       	rjmp	.+222    	; 0x2252 <GPIO_togglePin+0x10a>
	}
	else {
		switch(port_num) {
    2174:	8a 81       	ldd	r24, Y+2	; 0x02
    2176:	28 2f       	mov	r18, r24
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	3d 83       	std	Y+5, r19	; 0x05
    217c:	2c 83       	std	Y+4, r18	; 0x04
    217e:	8c 81       	ldd	r24, Y+4	; 0x04
    2180:	9d 81       	ldd	r25, Y+5	; 0x05
    2182:	81 30       	cpi	r24, 0x01	; 1
    2184:	91 05       	cpc	r25, r1
    2186:	49 f1       	breq	.+82     	; 0x21da <GPIO_togglePin+0x92>
    2188:	2c 81       	ldd	r18, Y+4	; 0x04
    218a:	3d 81       	ldd	r19, Y+5	; 0x05
    218c:	22 30       	cpi	r18, 0x02	; 2
    218e:	31 05       	cpc	r19, r1
    2190:	2c f4       	brge	.+10     	; 0x219c <GPIO_togglePin+0x54>
    2192:	8c 81       	ldd	r24, Y+4	; 0x04
    2194:	9d 81       	ldd	r25, Y+5	; 0x05
    2196:	00 97       	sbiw	r24, 0x00	; 0
    2198:	61 f0       	breq	.+24     	; 0x21b2 <GPIO_togglePin+0x6a>
    219a:	5a c0       	rjmp	.+180    	; 0x2250 <GPIO_togglePin+0x108>
    219c:	2c 81       	ldd	r18, Y+4	; 0x04
    219e:	3d 81       	ldd	r19, Y+5	; 0x05
    21a0:	22 30       	cpi	r18, 0x02	; 2
    21a2:	31 05       	cpc	r19, r1
    21a4:	71 f1       	breq	.+92     	; 0x2202 <GPIO_togglePin+0xba>
    21a6:	8c 81       	ldd	r24, Y+4	; 0x04
    21a8:	9d 81       	ldd	r25, Y+5	; 0x05
    21aa:	83 30       	cpi	r24, 0x03	; 3
    21ac:	91 05       	cpc	r25, r1
    21ae:	e9 f1       	breq	.+122    	; 0x222a <GPIO_togglePin+0xe2>
    21b0:	4f c0       	rjmp	.+158    	; 0x2250 <GPIO_togglePin+0x108>
		case PORT_A:
			TOG_BIT(PORTA,pin_num);
    21b2:	ab e3       	ldi	r26, 0x3B	; 59
    21b4:	b0 e0       	ldi	r27, 0x00	; 0
    21b6:	eb e3       	ldi	r30, 0x3B	; 59
    21b8:	f0 e0       	ldi	r31, 0x00	; 0
    21ba:	80 81       	ld	r24, Z
    21bc:	48 2f       	mov	r20, r24
    21be:	8b 81       	ldd	r24, Y+3	; 0x03
    21c0:	28 2f       	mov	r18, r24
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	02 2e       	mov	r0, r18
    21ca:	02 c0       	rjmp	.+4      	; 0x21d0 <GPIO_togglePin+0x88>
    21cc:	88 0f       	add	r24, r24
    21ce:	99 1f       	adc	r25, r25
    21d0:	0a 94       	dec	r0
    21d2:	e2 f7       	brpl	.-8      	; 0x21cc <GPIO_togglePin+0x84>
    21d4:	84 27       	eor	r24, r20
    21d6:	8c 93       	st	X, r24
    21d8:	3b c0       	rjmp	.+118    	; 0x2250 <GPIO_togglePin+0x108>
			break;
		case PORT_B:
			TOG_BIT(PORTB,pin_num);
    21da:	a8 e3       	ldi	r26, 0x38	; 56
    21dc:	b0 e0       	ldi	r27, 0x00	; 0
    21de:	e8 e3       	ldi	r30, 0x38	; 56
    21e0:	f0 e0       	ldi	r31, 0x00	; 0
    21e2:	80 81       	ld	r24, Z
    21e4:	48 2f       	mov	r20, r24
    21e6:	8b 81       	ldd	r24, Y+3	; 0x03
    21e8:	28 2f       	mov	r18, r24
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	02 2e       	mov	r0, r18
    21f2:	02 c0       	rjmp	.+4      	; 0x21f8 <GPIO_togglePin+0xb0>
    21f4:	88 0f       	add	r24, r24
    21f6:	99 1f       	adc	r25, r25
    21f8:	0a 94       	dec	r0
    21fa:	e2 f7       	brpl	.-8      	; 0x21f4 <GPIO_togglePin+0xac>
    21fc:	84 27       	eor	r24, r20
    21fe:	8c 93       	st	X, r24
    2200:	27 c0       	rjmp	.+78     	; 0x2250 <GPIO_togglePin+0x108>
			break;
		case PORT_C:
			TOG_BIT(PORTC,pin_num);
    2202:	a5 e3       	ldi	r26, 0x35	; 53
    2204:	b0 e0       	ldi	r27, 0x00	; 0
    2206:	e5 e3       	ldi	r30, 0x35	; 53
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	80 81       	ld	r24, Z
    220c:	48 2f       	mov	r20, r24
    220e:	8b 81       	ldd	r24, Y+3	; 0x03
    2210:	28 2f       	mov	r18, r24
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	81 e0       	ldi	r24, 0x01	; 1
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	02 2e       	mov	r0, r18
    221a:	02 c0       	rjmp	.+4      	; 0x2220 <GPIO_togglePin+0xd8>
    221c:	88 0f       	add	r24, r24
    221e:	99 1f       	adc	r25, r25
    2220:	0a 94       	dec	r0
    2222:	e2 f7       	brpl	.-8      	; 0x221c <GPIO_togglePin+0xd4>
    2224:	84 27       	eor	r24, r20
    2226:	8c 93       	st	X, r24
    2228:	13 c0       	rjmp	.+38     	; 0x2250 <GPIO_togglePin+0x108>
			break;
		case PORT_D:
			TOG_BIT(PORTD,pin_num);
    222a:	a2 e3       	ldi	r26, 0x32	; 50
    222c:	b0 e0       	ldi	r27, 0x00	; 0
    222e:	e2 e3       	ldi	r30, 0x32	; 50
    2230:	f0 e0       	ldi	r31, 0x00	; 0
    2232:	80 81       	ld	r24, Z
    2234:	48 2f       	mov	r20, r24
    2236:	8b 81       	ldd	r24, Y+3	; 0x03
    2238:	28 2f       	mov	r18, r24
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	81 e0       	ldi	r24, 0x01	; 1
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	02 2e       	mov	r0, r18
    2242:	02 c0       	rjmp	.+4      	; 0x2248 <GPIO_togglePin+0x100>
    2244:	88 0f       	add	r24, r24
    2246:	99 1f       	adc	r25, r25
    2248:	0a 94       	dec	r0
    224a:	e2 f7       	brpl	.-8      	; 0x2244 <GPIO_togglePin+0xfc>
    224c:	84 27       	eor	r24, r20
    224e:	8c 93       	st	X, r24
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    2250:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    2252:	89 81       	ldd	r24, Y+1	; 0x01
}
    2254:	0f 90       	pop	r0
    2256:	0f 90       	pop	r0
    2258:	0f 90       	pop	r0
    225a:	0f 90       	pop	r0
    225c:	0f 90       	pop	r0
    225e:	cf 91       	pop	r28
    2260:	df 91       	pop	r29
    2262:	08 95       	ret

00002264 <GPIO_readPin>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num) {
    2264:	df 93       	push	r29
    2266:	cf 93       	push	r28
    2268:	00 d0       	rcall	.+0      	; 0x226a <GPIO_readPin+0x6>
    226a:	00 d0       	rcall	.+0      	; 0x226c <GPIO_readPin+0x8>
    226c:	00 d0       	rcall	.+0      	; 0x226e <GPIO_readPin+0xa>
    226e:	cd b7       	in	r28, 0x3d	; 61
    2270:	de b7       	in	r29, 0x3e	; 62
    2272:	8b 83       	std	Y+3, r24	; 0x03
    2274:	6c 83       	std	Y+4, r22	; 0x04
	uint8 pin_value = LOGIC_LOW;
    2276:	1a 82       	std	Y+2, r1	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t GPIO_Driver_Checker = NULL;
    2278:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    227a:	8c 81       	ldd	r24, Y+4	; 0x04
    227c:	88 30       	cpi	r24, 0x08	; 8
    227e:	18 f0       	brcs	.+6      	; 0x2286 <GPIO_readPin+0x22>
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
    2280:	81 e0       	ldi	r24, 0x01	; 1
    2282:	89 83       	std	Y+1, r24	; 0x01
    2284:	87 c0       	rjmp	.+270    	; 0x2394 <GPIO_readPin+0x130>
	}
	else if((port_num >= NUM_OF_PORTS)) {
    2286:	8b 81       	ldd	r24, Y+3	; 0x03
    2288:	84 30       	cpi	r24, 0x04	; 4
    228a:	18 f0       	brcs	.+6      	; 0x2292 <GPIO_readPin+0x2e>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    228c:	82 e0       	ldi	r24, 0x02	; 2
    228e:	89 83       	std	Y+1, r24	; 0x01
    2290:	81 c0       	rjmp	.+258    	; 0x2394 <GPIO_readPin+0x130>
	}
	else {
		/* Read the pin value as required */
		switch(port_num) {
    2292:	8b 81       	ldd	r24, Y+3	; 0x03
    2294:	28 2f       	mov	r18, r24
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	3e 83       	std	Y+6, r19	; 0x06
    229a:	2d 83       	std	Y+5, r18	; 0x05
    229c:	4d 81       	ldd	r20, Y+5	; 0x05
    229e:	5e 81       	ldd	r21, Y+6	; 0x06
    22a0:	41 30       	cpi	r20, 0x01	; 1
    22a2:	51 05       	cpc	r21, r1
    22a4:	79 f1       	breq	.+94     	; 0x2304 <GPIO_readPin+0xa0>
    22a6:	8d 81       	ldd	r24, Y+5	; 0x05
    22a8:	9e 81       	ldd	r25, Y+6	; 0x06
    22aa:	82 30       	cpi	r24, 0x02	; 2
    22ac:	91 05       	cpc	r25, r1
    22ae:	34 f4       	brge	.+12     	; 0x22bc <GPIO_readPin+0x58>
    22b0:	2d 81       	ldd	r18, Y+5	; 0x05
    22b2:	3e 81       	ldd	r19, Y+6	; 0x06
    22b4:	21 15       	cp	r18, r1
    22b6:	31 05       	cpc	r19, r1
    22b8:	69 f0       	breq	.+26     	; 0x22d4 <GPIO_readPin+0x70>
    22ba:	6b c0       	rjmp	.+214    	; 0x2392 <GPIO_readPin+0x12e>
    22bc:	4d 81       	ldd	r20, Y+5	; 0x05
    22be:	5e 81       	ldd	r21, Y+6	; 0x06
    22c0:	42 30       	cpi	r20, 0x02	; 2
    22c2:	51 05       	cpc	r21, r1
    22c4:	b9 f1       	breq	.+110    	; 0x2334 <GPIO_readPin+0xd0>
    22c6:	8d 81       	ldd	r24, Y+5	; 0x05
    22c8:	9e 81       	ldd	r25, Y+6	; 0x06
    22ca:	83 30       	cpi	r24, 0x03	; 3
    22cc:	91 05       	cpc	r25, r1
    22ce:	09 f4       	brne	.+2      	; 0x22d2 <GPIO_readPin+0x6e>
    22d0:	49 c0       	rjmp	.+146    	; 0x2364 <GPIO_readPin+0x100>
    22d2:	5f c0       	rjmp	.+190    	; 0x2392 <GPIO_readPin+0x12e>
		case PORT_A:
			if(BIT_IS_SET(PINA,pin_num)) {
    22d4:	e9 e3       	ldi	r30, 0x39	; 57
    22d6:	f0 e0       	ldi	r31, 0x00	; 0
    22d8:	80 81       	ld	r24, Z
    22da:	28 2f       	mov	r18, r24
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	8c 81       	ldd	r24, Y+4	; 0x04
    22e0:	88 2f       	mov	r24, r24
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	a9 01       	movw	r20, r18
    22e6:	02 c0       	rjmp	.+4      	; 0x22ec <GPIO_readPin+0x88>
    22e8:	55 95       	asr	r21
    22ea:	47 95       	ror	r20
    22ec:	8a 95       	dec	r24
    22ee:	e2 f7       	brpl	.-8      	; 0x22e8 <GPIO_readPin+0x84>
    22f0:	ca 01       	movw	r24, r20
    22f2:	81 70       	andi	r24, 0x01	; 1
    22f4:	90 70       	andi	r25, 0x00	; 0
    22f6:	88 23       	and	r24, r24
    22f8:	19 f0       	breq	.+6      	; 0x2300 <GPIO_readPin+0x9c>
				pin_value = LOGIC_HIGH;
    22fa:	81 e0       	ldi	r24, 0x01	; 1
    22fc:	8a 83       	std	Y+2, r24	; 0x02
    22fe:	49 c0       	rjmp	.+146    	; 0x2392 <GPIO_readPin+0x12e>
			}
			else {
				pin_value = LOGIC_LOW;
    2300:	1a 82       	std	Y+2, r1	; 0x02
    2302:	47 c0       	rjmp	.+142    	; 0x2392 <GPIO_readPin+0x12e>
			}
			break;
		case PORT_B:
			if(BIT_IS_SET(PINB,pin_num)) {
    2304:	e6 e3       	ldi	r30, 0x36	; 54
    2306:	f0 e0       	ldi	r31, 0x00	; 0
    2308:	80 81       	ld	r24, Z
    230a:	28 2f       	mov	r18, r24
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	8c 81       	ldd	r24, Y+4	; 0x04
    2310:	88 2f       	mov	r24, r24
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	a9 01       	movw	r20, r18
    2316:	02 c0       	rjmp	.+4      	; 0x231c <GPIO_readPin+0xb8>
    2318:	55 95       	asr	r21
    231a:	47 95       	ror	r20
    231c:	8a 95       	dec	r24
    231e:	e2 f7       	brpl	.-8      	; 0x2318 <GPIO_readPin+0xb4>
    2320:	ca 01       	movw	r24, r20
    2322:	81 70       	andi	r24, 0x01	; 1
    2324:	90 70       	andi	r25, 0x00	; 0
    2326:	88 23       	and	r24, r24
    2328:	19 f0       	breq	.+6      	; 0x2330 <GPIO_readPin+0xcc>
				pin_value = LOGIC_HIGH;
    232a:	81 e0       	ldi	r24, 0x01	; 1
    232c:	8a 83       	std	Y+2, r24	; 0x02
    232e:	31 c0       	rjmp	.+98     	; 0x2392 <GPIO_readPin+0x12e>
			}
			else {
				pin_value = LOGIC_LOW;
    2330:	1a 82       	std	Y+2, r1	; 0x02
    2332:	2f c0       	rjmp	.+94     	; 0x2392 <GPIO_readPin+0x12e>
			}
			break;
		case PORT_C:
			if(BIT_IS_SET(PINC,pin_num)) {
    2334:	e3 e3       	ldi	r30, 0x33	; 51
    2336:	f0 e0       	ldi	r31, 0x00	; 0
    2338:	80 81       	ld	r24, Z
    233a:	28 2f       	mov	r18, r24
    233c:	30 e0       	ldi	r19, 0x00	; 0
    233e:	8c 81       	ldd	r24, Y+4	; 0x04
    2340:	88 2f       	mov	r24, r24
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	a9 01       	movw	r20, r18
    2346:	02 c0       	rjmp	.+4      	; 0x234c <GPIO_readPin+0xe8>
    2348:	55 95       	asr	r21
    234a:	47 95       	ror	r20
    234c:	8a 95       	dec	r24
    234e:	e2 f7       	brpl	.-8      	; 0x2348 <GPIO_readPin+0xe4>
    2350:	ca 01       	movw	r24, r20
    2352:	81 70       	andi	r24, 0x01	; 1
    2354:	90 70       	andi	r25, 0x00	; 0
    2356:	88 23       	and	r24, r24
    2358:	19 f0       	breq	.+6      	; 0x2360 <GPIO_readPin+0xfc>
				pin_value = LOGIC_HIGH;
    235a:	81 e0       	ldi	r24, 0x01	; 1
    235c:	8a 83       	std	Y+2, r24	; 0x02
    235e:	19 c0       	rjmp	.+50     	; 0x2392 <GPIO_readPin+0x12e>
			}
			else {
				pin_value = LOGIC_LOW;
    2360:	1a 82       	std	Y+2, r1	; 0x02
    2362:	17 c0       	rjmp	.+46     	; 0x2392 <GPIO_readPin+0x12e>
			}
			break;
		case PORT_D:
			if(BIT_IS_SET(PIND,pin_num)) {
    2364:	e0 e3       	ldi	r30, 0x30	; 48
    2366:	f0 e0       	ldi	r31, 0x00	; 0
    2368:	80 81       	ld	r24, Z
    236a:	28 2f       	mov	r18, r24
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	8c 81       	ldd	r24, Y+4	; 0x04
    2370:	88 2f       	mov	r24, r24
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	a9 01       	movw	r20, r18
    2376:	02 c0       	rjmp	.+4      	; 0x237c <GPIO_readPin+0x118>
    2378:	55 95       	asr	r21
    237a:	47 95       	ror	r20
    237c:	8a 95       	dec	r24
    237e:	e2 f7       	brpl	.-8      	; 0x2378 <GPIO_readPin+0x114>
    2380:	ca 01       	movw	r24, r20
    2382:	81 70       	andi	r24, 0x01	; 1
    2384:	90 70       	andi	r25, 0x00	; 0
    2386:	88 23       	and	r24, r24
    2388:	19 f0       	breq	.+6      	; 0x2390 <GPIO_readPin+0x12c>
				pin_value = LOGIC_HIGH;
    238a:	81 e0       	ldi	r24, 0x01	; 1
    238c:	8a 83       	std	Y+2, r24	; 0x02
    238e:	01 c0       	rjmp	.+2      	; 0x2392 <GPIO_readPin+0x12e>
			}
			else {
				pin_value = LOGIC_LOW;
    2390:	1a 82       	std	Y+2, r1	; 0x02
			}
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    2392:	19 82       	std	Y+1, r1	; 0x01
	}
	return pin_value;
    2394:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2396:	26 96       	adiw	r28, 0x06	; 6
    2398:	0f b6       	in	r0, 0x3f	; 63
    239a:	f8 94       	cli
    239c:	de bf       	out	0x3e, r29	; 62
    239e:	0f be       	out	0x3f, r0	; 63
    23a0:	cd bf       	out	0x3d, r28	; 61
    23a2:	cf 91       	pop	r28
    23a4:	df 91       	pop	r29
    23a6:	08 95       	ret

000023a8 <GPIO_setupPortDirection>:
 * Setup the direction of the required port all pins input/output.
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
GPIO_Error_t GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction) {
    23a8:	df 93       	push	r29
    23aa:	cf 93       	push	r28
    23ac:	00 d0       	rcall	.+0      	; 0x23ae <GPIO_setupPortDirection+0x6>
    23ae:	00 d0       	rcall	.+0      	; 0x23b0 <GPIO_setupPortDirection+0x8>
    23b0:	0f 92       	push	r0
    23b2:	cd b7       	in	r28, 0x3d	; 61
    23b4:	de b7       	in	r29, 0x3e	; 62
    23b6:	8a 83       	std	Y+2, r24	; 0x02
    23b8:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	uint8_t GPIO_Driver_Checker = NULL;
    23ba:	19 82       	std	Y+1, r1	; 0x01

	if((port_num >= NUM_OF_PORTS)) {
    23bc:	8a 81       	ldd	r24, Y+2	; 0x02
    23be:	84 30       	cpi	r24, 0x04	; 4
    23c0:	18 f0       	brcs	.+6      	; 0x23c8 <GPIO_setupPortDirection+0x20>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    23c2:	82 e0       	ldi	r24, 0x02	; 2
    23c4:	89 83       	std	Y+1, r24	; 0x01
    23c6:	3c c0       	rjmp	.+120    	; 0x2440 <GPIO_setupPortDirection+0x98>
	}
	else if((direction != PORT_INPUT) && (direction != PORT_OUTPUT)) {
    23c8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ca:	88 23       	and	r24, r24
    23cc:	31 f0       	breq	.+12     	; 0x23da <GPIO_setupPortDirection+0x32>
    23ce:	8b 81       	ldd	r24, Y+3	; 0x03
    23d0:	8f 3f       	cpi	r24, 0xFF	; 255
    23d2:	19 f0       	breq	.+6      	; 0x23da <GPIO_setupPortDirection+0x32>
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
    23d4:	83 e0       	ldi	r24, 0x03	; 3
    23d6:	89 83       	std	Y+1, r24	; 0x01
    23d8:	33 c0       	rjmp	.+102    	; 0x2440 <GPIO_setupPortDirection+0x98>
	}
	else {
		/* Setup the port direction as required */
		switch(port_num) {
    23da:	8a 81       	ldd	r24, Y+2	; 0x02
    23dc:	28 2f       	mov	r18, r24
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	3d 83       	std	Y+5, r19	; 0x05
    23e2:	2c 83       	std	Y+4, r18	; 0x04
    23e4:	8c 81       	ldd	r24, Y+4	; 0x04
    23e6:	9d 81       	ldd	r25, Y+5	; 0x05
    23e8:	81 30       	cpi	r24, 0x01	; 1
    23ea:	91 05       	cpc	r25, r1
    23ec:	d1 f0       	breq	.+52     	; 0x2422 <GPIO_setupPortDirection+0x7a>
    23ee:	2c 81       	ldd	r18, Y+4	; 0x04
    23f0:	3d 81       	ldd	r19, Y+5	; 0x05
    23f2:	22 30       	cpi	r18, 0x02	; 2
    23f4:	31 05       	cpc	r19, r1
    23f6:	2c f4       	brge	.+10     	; 0x2402 <GPIO_setupPortDirection+0x5a>
    23f8:	8c 81       	ldd	r24, Y+4	; 0x04
    23fa:	9d 81       	ldd	r25, Y+5	; 0x05
    23fc:	00 97       	sbiw	r24, 0x00	; 0
    23fe:	61 f0       	breq	.+24     	; 0x2418 <GPIO_setupPortDirection+0x70>
    2400:	1e c0       	rjmp	.+60     	; 0x243e <GPIO_setupPortDirection+0x96>
    2402:	2c 81       	ldd	r18, Y+4	; 0x04
    2404:	3d 81       	ldd	r19, Y+5	; 0x05
    2406:	22 30       	cpi	r18, 0x02	; 2
    2408:	31 05       	cpc	r19, r1
    240a:	81 f0       	breq	.+32     	; 0x242c <GPIO_setupPortDirection+0x84>
    240c:	8c 81       	ldd	r24, Y+4	; 0x04
    240e:	9d 81       	ldd	r25, Y+5	; 0x05
    2410:	83 30       	cpi	r24, 0x03	; 3
    2412:	91 05       	cpc	r25, r1
    2414:	81 f0       	breq	.+32     	; 0x2436 <GPIO_setupPortDirection+0x8e>
    2416:	13 c0       	rjmp	.+38     	; 0x243e <GPIO_setupPortDirection+0x96>
		case PORT_A:
			DDRA = direction;
    2418:	ea e3       	ldi	r30, 0x3A	; 58
    241a:	f0 e0       	ldi	r31, 0x00	; 0
    241c:	8b 81       	ldd	r24, Y+3	; 0x03
    241e:	80 83       	st	Z, r24
    2420:	0e c0       	rjmp	.+28     	; 0x243e <GPIO_setupPortDirection+0x96>
			break;
		case PORT_B:
			DDRB = direction;
    2422:	e7 e3       	ldi	r30, 0x37	; 55
    2424:	f0 e0       	ldi	r31, 0x00	; 0
    2426:	8b 81       	ldd	r24, Y+3	; 0x03
    2428:	80 83       	st	Z, r24
    242a:	09 c0       	rjmp	.+18     	; 0x243e <GPIO_setupPortDirection+0x96>
			break;
		case PORT_C:
			DDRC = direction;
    242c:	e4 e3       	ldi	r30, 0x34	; 52
    242e:	f0 e0       	ldi	r31, 0x00	; 0
    2430:	8b 81       	ldd	r24, Y+3	; 0x03
    2432:	80 83       	st	Z, r24
    2434:	04 c0       	rjmp	.+8      	; 0x243e <GPIO_setupPortDirection+0x96>
			break;
		case PORT_D:
			DDRD = direction;
    2436:	e1 e3       	ldi	r30, 0x31	; 49
    2438:	f0 e0       	ldi	r31, 0x00	; 0
    243a:	8b 81       	ldd	r24, Y+3	; 0x03
    243c:	80 83       	st	Z, r24
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    243e:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    2440:	89 81       	ldd	r24, Y+1	; 0x01
}
    2442:	0f 90       	pop	r0
    2444:	0f 90       	pop	r0
    2446:	0f 90       	pop	r0
    2448:	0f 90       	pop	r0
    244a:	0f 90       	pop	r0
    244c:	cf 91       	pop	r28
    244e:	df 91       	pop	r29
    2450:	08 95       	ret

00002452 <GPIO_writePort>:
 * Write the value on the required port.
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
GPIO_Error_t GPIO_writePort(uint8 port_num, uint8 value) {
    2452:	df 93       	push	r29
    2454:	cf 93       	push	r28
    2456:	00 d0       	rcall	.+0      	; 0x2458 <GPIO_writePort+0x6>
    2458:	00 d0       	rcall	.+0      	; 0x245a <GPIO_writePort+0x8>
    245a:	0f 92       	push	r0
    245c:	cd b7       	in	r28, 0x3d	; 61
    245e:	de b7       	in	r29, 0x3e	; 62
    2460:	8a 83       	std	Y+2, r24	; 0x02
    2462:	6b 83       	std	Y+3, r22	; 0x03

	uint8_t GPIO_Driver_Checker = NULL;
    2464:	19 82       	std	Y+1, r1	; 0x01
	if((port_num >= NUM_OF_PORTS)) {
    2466:	8a 81       	ldd	r24, Y+2	; 0x02
    2468:	84 30       	cpi	r24, 0x04	; 4
    246a:	18 f0       	brcs	.+6      	; 0x2472 <GPIO_writePort+0x20>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    246c:	82 e0       	ldi	r24, 0x02	; 2
    246e:	89 83       	std	Y+1, r24	; 0x01
    2470:	3c c0       	rjmp	.+120    	; 0x24ea <GPIO_writePort+0x98>
	}
	else if((value != LOGIC_HIGH) && (value != LOGIC_LOW)) {
    2472:	8b 81       	ldd	r24, Y+3	; 0x03
    2474:	81 30       	cpi	r24, 0x01	; 1
    2476:	31 f0       	breq	.+12     	; 0x2484 <GPIO_writePort+0x32>
    2478:	8b 81       	ldd	r24, Y+3	; 0x03
    247a:	88 23       	and	r24, r24
    247c:	19 f0       	breq	.+6      	; 0x2484 <GPIO_writePort+0x32>
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
    247e:	83 e0       	ldi	r24, 0x03	; 3
    2480:	89 83       	std	Y+1, r24	; 0x01
    2482:	33 c0       	rjmp	.+102    	; 0x24ea <GPIO_writePort+0x98>
	}
	else {
		/* Setup the port direction as required */
		switch(port_num) {
    2484:	8a 81       	ldd	r24, Y+2	; 0x02
    2486:	28 2f       	mov	r18, r24
    2488:	30 e0       	ldi	r19, 0x00	; 0
    248a:	3d 83       	std	Y+5, r19	; 0x05
    248c:	2c 83       	std	Y+4, r18	; 0x04
    248e:	8c 81       	ldd	r24, Y+4	; 0x04
    2490:	9d 81       	ldd	r25, Y+5	; 0x05
    2492:	81 30       	cpi	r24, 0x01	; 1
    2494:	91 05       	cpc	r25, r1
    2496:	d1 f0       	breq	.+52     	; 0x24cc <GPIO_writePort+0x7a>
    2498:	2c 81       	ldd	r18, Y+4	; 0x04
    249a:	3d 81       	ldd	r19, Y+5	; 0x05
    249c:	22 30       	cpi	r18, 0x02	; 2
    249e:	31 05       	cpc	r19, r1
    24a0:	2c f4       	brge	.+10     	; 0x24ac <GPIO_writePort+0x5a>
    24a2:	8c 81       	ldd	r24, Y+4	; 0x04
    24a4:	9d 81       	ldd	r25, Y+5	; 0x05
    24a6:	00 97       	sbiw	r24, 0x00	; 0
    24a8:	61 f0       	breq	.+24     	; 0x24c2 <GPIO_writePort+0x70>
    24aa:	1e c0       	rjmp	.+60     	; 0x24e8 <GPIO_writePort+0x96>
    24ac:	2c 81       	ldd	r18, Y+4	; 0x04
    24ae:	3d 81       	ldd	r19, Y+5	; 0x05
    24b0:	22 30       	cpi	r18, 0x02	; 2
    24b2:	31 05       	cpc	r19, r1
    24b4:	81 f0       	breq	.+32     	; 0x24d6 <GPIO_writePort+0x84>
    24b6:	8c 81       	ldd	r24, Y+4	; 0x04
    24b8:	9d 81       	ldd	r25, Y+5	; 0x05
    24ba:	83 30       	cpi	r24, 0x03	; 3
    24bc:	91 05       	cpc	r25, r1
    24be:	81 f0       	breq	.+32     	; 0x24e0 <GPIO_writePort+0x8e>
    24c0:	13 c0       	rjmp	.+38     	; 0x24e8 <GPIO_writePort+0x96>
		case PORT_A:
			PORTA = value;
    24c2:	eb e3       	ldi	r30, 0x3B	; 59
    24c4:	f0 e0       	ldi	r31, 0x00	; 0
    24c6:	8b 81       	ldd	r24, Y+3	; 0x03
    24c8:	80 83       	st	Z, r24
    24ca:	0e c0       	rjmp	.+28     	; 0x24e8 <GPIO_writePort+0x96>
			break;
		case PORT_B:
			PORTB = value;
    24cc:	e8 e3       	ldi	r30, 0x38	; 56
    24ce:	f0 e0       	ldi	r31, 0x00	; 0
    24d0:	8b 81       	ldd	r24, Y+3	; 0x03
    24d2:	80 83       	st	Z, r24
    24d4:	09 c0       	rjmp	.+18     	; 0x24e8 <GPIO_writePort+0x96>
			break;
		case PORT_C:
			PORTC = value;
    24d6:	e5 e3       	ldi	r30, 0x35	; 53
    24d8:	f0 e0       	ldi	r31, 0x00	; 0
    24da:	8b 81       	ldd	r24, Y+3	; 0x03
    24dc:	80 83       	st	Z, r24
    24de:	04 c0       	rjmp	.+8      	; 0x24e8 <GPIO_writePort+0x96>
			break;
		case PORT_D:
			PORTD = value;
    24e0:	e2 e3       	ldi	r30, 0x32	; 50
    24e2:	f0 e0       	ldi	r31, 0x00	; 0
    24e4:	8b 81       	ldd	r24, Y+3	; 0x03
    24e6:	80 83       	st	Z, r24
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    24e8:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    24ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    24ec:	0f 90       	pop	r0
    24ee:	0f 90       	pop	r0
    24f0:	0f 90       	pop	r0
    24f2:	0f 90       	pop	r0
    24f4:	0f 90       	pop	r0
    24f6:	cf 91       	pop	r28
    24f8:	df 91       	pop	r29
    24fa:	08 95       	ret

000024fc <GPIO_readPort>:
/*
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num) {
    24fc:	df 93       	push	r29
    24fe:	cf 93       	push	r28
    2500:	00 d0       	rcall	.+0      	; 0x2502 <GPIO_readPort+0x6>
    2502:	00 d0       	rcall	.+0      	; 0x2504 <GPIO_readPort+0x8>
    2504:	0f 92       	push	r0
    2506:	cd b7       	in	r28, 0x3d	; 61
    2508:	de b7       	in	r29, 0x3e	; 62
    250a:	8b 83       	std	Y+3, r24	; 0x03
	uint8 value = LOGIC_LOW;
    250c:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t GPIO_Driver_Checker = NULL;
    250e:	19 82       	std	Y+1, r1	; 0x01

	if((port_num >= NUM_OF_PORTS)) {
    2510:	8b 81       	ldd	r24, Y+3	; 0x03
    2512:	84 30       	cpi	r24, 0x04	; 4
    2514:	18 f0       	brcs	.+6      	; 0x251c <GPIO_readPort+0x20>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    2516:	82 e0       	ldi	r24, 0x02	; 2
    2518:	89 83       	std	Y+1, r24	; 0x01
    251a:	32 c0       	rjmp	.+100    	; 0x2580 <GPIO_readPort+0x84>
	}
	else {
		switch(port_num) {
    251c:	8b 81       	ldd	r24, Y+3	; 0x03
    251e:	28 2f       	mov	r18, r24
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	3d 83       	std	Y+5, r19	; 0x05
    2524:	2c 83       	std	Y+4, r18	; 0x04
    2526:	8c 81       	ldd	r24, Y+4	; 0x04
    2528:	9d 81       	ldd	r25, Y+5	; 0x05
    252a:	81 30       	cpi	r24, 0x01	; 1
    252c:	91 05       	cpc	r25, r1
    252e:	d1 f0       	breq	.+52     	; 0x2564 <GPIO_readPort+0x68>
    2530:	2c 81       	ldd	r18, Y+4	; 0x04
    2532:	3d 81       	ldd	r19, Y+5	; 0x05
    2534:	22 30       	cpi	r18, 0x02	; 2
    2536:	31 05       	cpc	r19, r1
    2538:	2c f4       	brge	.+10     	; 0x2544 <GPIO_readPort+0x48>
    253a:	8c 81       	ldd	r24, Y+4	; 0x04
    253c:	9d 81       	ldd	r25, Y+5	; 0x05
    253e:	00 97       	sbiw	r24, 0x00	; 0
    2540:	61 f0       	breq	.+24     	; 0x255a <GPIO_readPort+0x5e>
    2542:	1e c0       	rjmp	.+60     	; 0x2580 <GPIO_readPort+0x84>
    2544:	2c 81       	ldd	r18, Y+4	; 0x04
    2546:	3d 81       	ldd	r19, Y+5	; 0x05
    2548:	22 30       	cpi	r18, 0x02	; 2
    254a:	31 05       	cpc	r19, r1
    254c:	81 f0       	breq	.+32     	; 0x256e <GPIO_readPort+0x72>
    254e:	8c 81       	ldd	r24, Y+4	; 0x04
    2550:	9d 81       	ldd	r25, Y+5	; 0x05
    2552:	83 30       	cpi	r24, 0x03	; 3
    2554:	91 05       	cpc	r25, r1
    2556:	81 f0       	breq	.+32     	; 0x2578 <GPIO_readPort+0x7c>
    2558:	13 c0       	rjmp	.+38     	; 0x2580 <GPIO_readPort+0x84>
		case PORT_A:
			value = PINA;
    255a:	e9 e3       	ldi	r30, 0x39	; 57
    255c:	f0 e0       	ldi	r31, 0x00	; 0
    255e:	80 81       	ld	r24, Z
    2560:	8a 83       	std	Y+2, r24	; 0x02
    2562:	0e c0       	rjmp	.+28     	; 0x2580 <GPIO_readPort+0x84>
			break;
		case PORT_B:
			value = PINB;
    2564:	e6 e3       	ldi	r30, 0x36	; 54
    2566:	f0 e0       	ldi	r31, 0x00	; 0
    2568:	80 81       	ld	r24, Z
    256a:	8a 83       	std	Y+2, r24	; 0x02
    256c:	09 c0       	rjmp	.+18     	; 0x2580 <GPIO_readPort+0x84>
			break;
		case PORT_C:
			value = PINC;
    256e:	e3 e3       	ldi	r30, 0x33	; 51
    2570:	f0 e0       	ldi	r31, 0x00	; 0
    2572:	80 81       	ld	r24, Z
    2574:	8a 83       	std	Y+2, r24	; 0x02
    2576:	04 c0       	rjmp	.+8      	; 0x2580 <GPIO_readPort+0x84>
			break;
		case PORT_D:
			value = PIND;
    2578:	e0 e3       	ldi	r30, 0x30	; 48
    257a:	f0 e0       	ldi	r31, 0x00	; 0
    257c:	80 81       	ld	r24, Z
    257e:	8a 83       	std	Y+2, r24	; 0x02
			break;
		}
	}
	return value;
    2580:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2582:	0f 90       	pop	r0
    2584:	0f 90       	pop	r0
    2586:	0f 90       	pop	r0
    2588:	0f 90       	pop	r0
    258a:	0f 90       	pop	r0
    258c:	cf 91       	pop	r28
    258e:	df 91       	pop	r29
    2590:	08 95       	ret

00002592 <BUTTON_Init>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
BUTTON_Error_t BUTTON_Init(uint8 port_num, uint8 pin_num) {
    2592:	df 93       	push	r29
    2594:	cf 93       	push	r28
    2596:	00 d0       	rcall	.+0      	; 0x2598 <BUTTON_Init+0x6>
    2598:	0f 92       	push	r0
    259a:	cd b7       	in	r28, 0x3d	; 61
    259c:	de b7       	in	r29, 0x3e	; 62
    259e:	8a 83       	std	Y+2, r24	; 0x02
    25a0:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t BUTTON_Driver_Checker = NULL;
    25a2:	19 82       	std	Y+1, r1	; 0x01
	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    25a4:	8b 81       	ldd	r24, Y+3	; 0x03
    25a6:	88 30       	cpi	r24, 0x08	; 8
    25a8:	18 f0       	brcs	.+6      	; 0x25b0 <BUTTON_Init+0x1e>
		BUTTON_Driver_Checker = BUTTON_WRONG_PIN_NUMBER;
    25aa:	81 e0       	ldi	r24, 0x01	; 1
    25ac:	89 83       	std	Y+1, r24	; 0x01
    25ae:	0c c0       	rjmp	.+24     	; 0x25c8 <BUTTON_Init+0x36>
	}
	else if((port_num >= NUM_OF_PORTS)) {
    25b0:	8a 81       	ldd	r24, Y+2	; 0x02
    25b2:	84 30       	cpi	r24, 0x04	; 4
    25b4:	18 f0       	brcs	.+6      	; 0x25bc <BUTTON_Init+0x2a>
		BUTTON_Driver_Checker = BUTTON_WRONG_PORT_NUMBER;
    25b6:	82 e0       	ldi	r24, 0x02	; 2
    25b8:	89 83       	std	Y+1, r24	; 0x01
    25ba:	06 c0       	rjmp	.+12     	; 0x25c8 <BUTTON_Init+0x36>
	}
	else {
		/* Setup the pin direction as required */
		GPIO_setupPinDirection(port_num, pin_num, PIN_INPUT);
    25bc:	8a 81       	ldd	r24, Y+2	; 0x02
    25be:	6b 81       	ldd	r22, Y+3	; 0x03
    25c0:	40 e0       	ldi	r20, 0x00	; 0
    25c2:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <GPIO_setupPinDirection>
		BUTTON_Driver_Checker = BUTTON_OK;
    25c6:	19 82       	std	Y+1, r1	; 0x01
	}
	return BUTTON_Driver_Checker;
    25c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    25ca:	0f 90       	pop	r0
    25cc:	0f 90       	pop	r0
    25ce:	0f 90       	pop	r0
    25d0:	cf 91       	pop	r28
    25d2:	df 91       	pop	r29
    25d4:	08 95       	ret

000025d6 <BUTTON_Read>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
uint8 BUTTON_Read(uint8 port_num, uint8 pin_num) {
    25d6:	df 93       	push	r29
    25d8:	cf 93       	push	r28
    25da:	00 d0       	rcall	.+0      	; 0x25dc <BUTTON_Read+0x6>
    25dc:	0f 92       	push	r0
    25de:	cd b7       	in	r28, 0x3d	; 61
    25e0:	de b7       	in	r29, 0x3e	; 62
    25e2:	8a 83       	std	Y+2, r24	; 0x02
    25e4:	6b 83       	std	Y+3, r22	; 0x03

	uint8_t BUTTON_Driver_Checker = NULL;
    25e6:	19 82       	std	Y+1, r1	; 0x01
		if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    25e8:	8b 81       	ldd	r24, Y+3	; 0x03
    25ea:	88 30       	cpi	r24, 0x08	; 8
    25ec:	18 f0       	brcs	.+6      	; 0x25f4 <BUTTON_Read+0x1e>
			BUTTON_Driver_Checker = BUTTON_WRONG_PIN_NUMBER;
    25ee:	81 e0       	ldi	r24, 0x01	; 1
    25f0:	89 83       	std	Y+1, r24	; 0x01
    25f2:	0b c0       	rjmp	.+22     	; 0x260a <BUTTON_Read+0x34>
		}
		else if((port_num >= NUM_OF_PORTS)) {
    25f4:	8a 81       	ldd	r24, Y+2	; 0x02
    25f6:	84 30       	cpi	r24, 0x04	; 4
    25f8:	18 f0       	brcs	.+6      	; 0x2600 <BUTTON_Read+0x2a>
			BUTTON_Driver_Checker = BUTTON_WRONG_PORT_NUMBER;
    25fa:	82 e0       	ldi	r24, 0x02	; 2
    25fc:	89 83       	std	Y+1, r24	; 0x01
    25fe:	05 c0       	rjmp	.+10     	; 0x260a <BUTTON_Read+0x34>
		}
		else {
			/* Setup the pin direction as required */
			GPIO_readPin(port_num, pin_num);
    2600:	8a 81       	ldd	r24, Y+2	; 0x02
    2602:	6b 81       	ldd	r22, Y+3	; 0x03
    2604:	0e 94 32 11 	call	0x2264	; 0x2264 <GPIO_readPin>
			BUTTON_Driver_Checker = BUTTON_OK;
    2608:	19 82       	std	Y+1, r1	; 0x01
		}
		return GPIO_readPin(port_num, pin_num);
    260a:	8a 81       	ldd	r24, Y+2	; 0x02
    260c:	6b 81       	ldd	r22, Y+3	; 0x03
    260e:	0e 94 32 11 	call	0x2264	; 0x2264 <GPIO_readPin>
}
    2612:	0f 90       	pop	r0
    2614:	0f 90       	pop	r0
    2616:	0f 90       	pop	r0
    2618:	cf 91       	pop	r28
    261a:	df 91       	pop	r29
    261c:	08 95       	ret

0000261e <main>:
//#include "../MCAL/SEVEN-SEGMENT_DRIVER/SEGMENT.h"
#include "../MCAL/KEYPAD_DRIVER/KEYPAD.h"
// #include "../MCAL/LCD_DRIVER/LCD.h"
#include "../MCAL/UART_DRIVER/uart.h"

int main(void) {
    261e:	df 93       	push	r29
    2620:	cf 93       	push	r28
    2622:	0f 92       	push	r0
    2624:	cd b7       	in	r28, 0x3d	; 61
    2626:	de b7       	in	r29, 0x3e	; 62
	// Initializes the UART
	UART_init(9600);
    2628:	60 e8       	ldi	r22, 0x80	; 128
    262a:	75 e2       	ldi	r23, 0x25	; 37
    262c:	80 e0       	ldi	r24, 0x00	; 0
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	0e 94 9b 05 	call	0xb36	; 0xb36 <UART_init>

	// Initializes the UART
	KEYPAD_Init();
    2634:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <KEYPAD_Init>

	//uint8 data;

	while (1) {
		uint8 key = KEYPAD_getPressedKey();
    2638:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <KEYPAD_getPressedKey>
    263c:	89 83       	std	Y+1, r24	; 0x01
		UART_sendByte(key);
    263e:	89 81       	ldd	r24, Y+1	; 0x01
    2640:	0e 94 e7 05 	call	0xbce	; 0xbce <UART_sendByte>
    2644:	f9 cf       	rjmp	.-14     	; 0x2638 <main+0x1a>

00002646 <__udivmodsi4>:
    2646:	a1 e2       	ldi	r26, 0x21	; 33
    2648:	1a 2e       	mov	r1, r26
    264a:	aa 1b       	sub	r26, r26
    264c:	bb 1b       	sub	r27, r27
    264e:	fd 01       	movw	r30, r26
    2650:	0d c0       	rjmp	.+26     	; 0x266c <__udivmodsi4_ep>

00002652 <__udivmodsi4_loop>:
    2652:	aa 1f       	adc	r26, r26
    2654:	bb 1f       	adc	r27, r27
    2656:	ee 1f       	adc	r30, r30
    2658:	ff 1f       	adc	r31, r31
    265a:	a2 17       	cp	r26, r18
    265c:	b3 07       	cpc	r27, r19
    265e:	e4 07       	cpc	r30, r20
    2660:	f5 07       	cpc	r31, r21
    2662:	20 f0       	brcs	.+8      	; 0x266c <__udivmodsi4_ep>
    2664:	a2 1b       	sub	r26, r18
    2666:	b3 0b       	sbc	r27, r19
    2668:	e4 0b       	sbc	r30, r20
    266a:	f5 0b       	sbc	r31, r21

0000266c <__udivmodsi4_ep>:
    266c:	66 1f       	adc	r22, r22
    266e:	77 1f       	adc	r23, r23
    2670:	88 1f       	adc	r24, r24
    2672:	99 1f       	adc	r25, r25
    2674:	1a 94       	dec	r1
    2676:	69 f7       	brne	.-38     	; 0x2652 <__udivmodsi4_loop>
    2678:	60 95       	com	r22
    267a:	70 95       	com	r23
    267c:	80 95       	com	r24
    267e:	90 95       	com	r25
    2680:	9b 01       	movw	r18, r22
    2682:	ac 01       	movw	r20, r24
    2684:	bd 01       	movw	r22, r26
    2686:	cf 01       	movw	r24, r30
    2688:	08 95       	ret

0000268a <__prologue_saves__>:
    268a:	2f 92       	push	r2
    268c:	3f 92       	push	r3
    268e:	4f 92       	push	r4
    2690:	5f 92       	push	r5
    2692:	6f 92       	push	r6
    2694:	7f 92       	push	r7
    2696:	8f 92       	push	r8
    2698:	9f 92       	push	r9
    269a:	af 92       	push	r10
    269c:	bf 92       	push	r11
    269e:	cf 92       	push	r12
    26a0:	df 92       	push	r13
    26a2:	ef 92       	push	r14
    26a4:	ff 92       	push	r15
    26a6:	0f 93       	push	r16
    26a8:	1f 93       	push	r17
    26aa:	cf 93       	push	r28
    26ac:	df 93       	push	r29
    26ae:	cd b7       	in	r28, 0x3d	; 61
    26b0:	de b7       	in	r29, 0x3e	; 62
    26b2:	ca 1b       	sub	r28, r26
    26b4:	db 0b       	sbc	r29, r27
    26b6:	0f b6       	in	r0, 0x3f	; 63
    26b8:	f8 94       	cli
    26ba:	de bf       	out	0x3e, r29	; 62
    26bc:	0f be       	out	0x3f, r0	; 63
    26be:	cd bf       	out	0x3d, r28	; 61
    26c0:	09 94       	ijmp

000026c2 <__epilogue_restores__>:
    26c2:	2a 88       	ldd	r2, Y+18	; 0x12
    26c4:	39 88       	ldd	r3, Y+17	; 0x11
    26c6:	48 88       	ldd	r4, Y+16	; 0x10
    26c8:	5f 84       	ldd	r5, Y+15	; 0x0f
    26ca:	6e 84       	ldd	r6, Y+14	; 0x0e
    26cc:	7d 84       	ldd	r7, Y+13	; 0x0d
    26ce:	8c 84       	ldd	r8, Y+12	; 0x0c
    26d0:	9b 84       	ldd	r9, Y+11	; 0x0b
    26d2:	aa 84       	ldd	r10, Y+10	; 0x0a
    26d4:	b9 84       	ldd	r11, Y+9	; 0x09
    26d6:	c8 84       	ldd	r12, Y+8	; 0x08
    26d8:	df 80       	ldd	r13, Y+7	; 0x07
    26da:	ee 80       	ldd	r14, Y+6	; 0x06
    26dc:	fd 80       	ldd	r15, Y+5	; 0x05
    26de:	0c 81       	ldd	r16, Y+4	; 0x04
    26e0:	1b 81       	ldd	r17, Y+3	; 0x03
    26e2:	aa 81       	ldd	r26, Y+2	; 0x02
    26e4:	b9 81       	ldd	r27, Y+1	; 0x01
    26e6:	ce 0f       	add	r28, r30
    26e8:	d1 1d       	adc	r29, r1
    26ea:	0f b6       	in	r0, 0x3f	; 63
    26ec:	f8 94       	cli
    26ee:	de bf       	out	0x3e, r29	; 62
    26f0:	0f be       	out	0x3f, r0	; 63
    26f2:	cd bf       	out	0x3d, r28	; 61
    26f4:	ed 01       	movw	r28, r26
    26f6:	08 95       	ret

000026f8 <itoa>:
    26f8:	fb 01       	movw	r30, r22
    26fa:	9f 01       	movw	r18, r30
    26fc:	e8 94       	clt
    26fe:	42 30       	cpi	r20, 0x02	; 2
    2700:	c4 f0       	brlt	.+48     	; 0x2732 <itoa+0x3a>
    2702:	45 32       	cpi	r20, 0x25	; 37
    2704:	b4 f4       	brge	.+44     	; 0x2732 <itoa+0x3a>
    2706:	4a 30       	cpi	r20, 0x0A	; 10
    2708:	29 f4       	brne	.+10     	; 0x2714 <itoa+0x1c>
    270a:	97 fb       	bst	r25, 7
    270c:	1e f4       	brtc	.+6      	; 0x2714 <itoa+0x1c>
    270e:	90 95       	com	r25
    2710:	81 95       	neg	r24
    2712:	9f 4f       	sbci	r25, 0xFF	; 255
    2714:	64 2f       	mov	r22, r20
    2716:	77 27       	eor	r23, r23
    2718:	0e 94 ad 13 	call	0x275a	; 0x275a <__udivmodhi4>
    271c:	80 5d       	subi	r24, 0xD0	; 208
    271e:	8a 33       	cpi	r24, 0x3A	; 58
    2720:	0c f0       	brlt	.+2      	; 0x2724 <itoa+0x2c>
    2722:	89 5d       	subi	r24, 0xD9	; 217
    2724:	81 93       	st	Z+, r24
    2726:	cb 01       	movw	r24, r22
    2728:	00 97       	sbiw	r24, 0x00	; 0
    272a:	a1 f7       	brne	.-24     	; 0x2714 <itoa+0x1c>
    272c:	16 f4       	brtc	.+4      	; 0x2732 <itoa+0x3a>
    272e:	5d e2       	ldi	r21, 0x2D	; 45
    2730:	51 93       	st	Z+, r21
    2732:	10 82       	st	Z, r1
    2734:	c9 01       	movw	r24, r18
    2736:	0c 94 9d 13 	jmp	0x273a	; 0x273a <strrev>

0000273a <strrev>:
    273a:	dc 01       	movw	r26, r24
    273c:	fc 01       	movw	r30, r24
    273e:	67 2f       	mov	r22, r23
    2740:	71 91       	ld	r23, Z+
    2742:	77 23       	and	r23, r23
    2744:	e1 f7       	brne	.-8      	; 0x273e <strrev+0x4>
    2746:	32 97       	sbiw	r30, 0x02	; 2
    2748:	04 c0       	rjmp	.+8      	; 0x2752 <strrev+0x18>
    274a:	7c 91       	ld	r23, X
    274c:	6d 93       	st	X+, r22
    274e:	70 83       	st	Z, r23
    2750:	62 91       	ld	r22, -Z
    2752:	ae 17       	cp	r26, r30
    2754:	bf 07       	cpc	r27, r31
    2756:	c8 f3       	brcs	.-14     	; 0x274a <strrev+0x10>
    2758:	08 95       	ret

0000275a <__udivmodhi4>:
    275a:	aa 1b       	sub	r26, r26
    275c:	bb 1b       	sub	r27, r27
    275e:	51 e1       	ldi	r21, 0x11	; 17
    2760:	07 c0       	rjmp	.+14     	; 0x2770 <__udivmodhi4_ep>

00002762 <__udivmodhi4_loop>:
    2762:	aa 1f       	adc	r26, r26
    2764:	bb 1f       	adc	r27, r27
    2766:	a6 17       	cp	r26, r22
    2768:	b7 07       	cpc	r27, r23
    276a:	10 f0       	brcs	.+4      	; 0x2770 <__udivmodhi4_ep>
    276c:	a6 1b       	sub	r26, r22
    276e:	b7 0b       	sbc	r27, r23

00002770 <__udivmodhi4_ep>:
    2770:	88 1f       	adc	r24, r24
    2772:	99 1f       	adc	r25, r25
    2774:	5a 95       	dec	r21
    2776:	a9 f7       	brne	.-22     	; 0x2762 <__udivmodhi4_loop>
    2778:	80 95       	com	r24
    277a:	90 95       	com	r25
    277c:	bc 01       	movw	r22, r24
    277e:	cd 01       	movw	r24, r26
    2780:	08 95       	ret

00002782 <_exit>:
    2782:	f8 94       	cli

00002784 <__stop_program>:
    2784:	ff cf       	rjmp	.-2      	; 0x2784 <__stop_program>
