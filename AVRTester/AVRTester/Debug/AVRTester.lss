
AVRTester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004d2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000526  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000526  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000558  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000108  00000000  00000000  00000594  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f78  00000000  00000000  0000069c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000934  00000000  00000000  00001614  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b9e  00000000  00000000  00001f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d8  00000000  00000000  00002ae8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000068a  00000000  00000000  00002cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b47  00000000  00000000  0000334a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00003e91  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 67 02 	jmp	0x4ce	; 0x4ce <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
//#include "../MCAL/ADC_DRIVER/ADC.h"

int main(void) {

	// Initializes LED Driver
	LED_Init(PORT_C, PIN_0);
  7c:	60 e0       	ldi	r22, 0x00	; 0
  7e:	82 e0       	ldi	r24, 0x02	; 2
  80:	0e 94 95 00 	call	0x12a	; 0x12a <LED_Init>
	LED_On(PORT_C, PIN_0);
  84:	60 e0       	ldi	r22, 0x00	; 0
  86:	82 e0       	ldi	r24, 0x02	; 2
  88:	0e 94 a2 00 	call	0x144	; 0x144 <LED_On>


	// Initializes Button Driver
	BUTTON_Init(PORT_D, PIN_2);
  8c:	62 e0       	ldi	r22, 0x02	; 2
  8e:	83 e0       	ldi	r24, 0x03	; 3
  90:	0e 94 77 00 	call	0xee	; 0xee <BUTTON_Init>
	BUTTON_Read(PORT_D, PIN_2);
  94:	62 e0       	ldi	r22, 0x02	; 2
  96:	83 e0       	ldi	r24, 0x03	; 3
  98:	0e 94 84 00 	call	0x108	; 0x108 <BUTTON_Read>

	// Initializes External Interrupt Driver
	EXT_INTERRUPT_Init();
  9c:	0e 94 bb 00 	call	0x176	; 0x176 <EXT_INTERRUPT_Init>
  a0:	ff cf       	rjmp	.-2      	; 0xa0 <main+0x24>

000000a2 <__vector_1>:
	while (1) {

	}
}

ISR (INT0_vect) {
  a2:	1f 92       	push	r1
  a4:	0f 92       	push	r0
  a6:	0f b6       	in	r0, 0x3f	; 63
  a8:	0f 92       	push	r0
  aa:	11 24       	eor	r1, r1
  ac:	2f 93       	push	r18
  ae:	3f 93       	push	r19
  b0:	4f 93       	push	r20
  b2:	5f 93       	push	r21
  b4:	6f 93       	push	r22
  b6:	7f 93       	push	r23
  b8:	8f 93       	push	r24
  ba:	9f 93       	push	r25
  bc:	af 93       	push	r26
  be:	bf 93       	push	r27
  c0:	ef 93       	push	r30
  c2:	ff 93       	push	r31
	LED_Toggle(PORT_C, PIN_0);
  c4:	60 e0       	ldi	r22, 0x00	; 0
  c6:	82 e0       	ldi	r24, 0x02	; 2
  c8:	0e 94 af 00 	call	0x15e	; 0x15e <LED_Toggle>
}
  cc:	ff 91       	pop	r31
  ce:	ef 91       	pop	r30
  d0:	bf 91       	pop	r27
  d2:	af 91       	pop	r26
  d4:	9f 91       	pop	r25
  d6:	8f 91       	pop	r24
  d8:	7f 91       	pop	r23
  da:	6f 91       	pop	r22
  dc:	5f 91       	pop	r21
  de:	4f 91       	pop	r20
  e0:	3f 91       	pop	r19
  e2:	2f 91       	pop	r18
  e4:	0f 90       	pop	r0
  e6:	0f be       	out	0x3f, r0	; 63
  e8:	0f 90       	pop	r0
  ea:	1f 90       	pop	r1
  ec:	18 95       	reti

000000ee <BUTTON_Init>:
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t BUTTON_Driver_Checker = NULL;
	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
  ee:	68 30       	cpi	r22, 0x08	; 8
  f0:	38 f4       	brcc	.+14     	; 0x100 <BUTTON_Init+0x12>
		BUTTON_Driver_Checker = BUTTON_WRONG_PIN_NUMBER;
	}
	else if((port_num >= NUM_OF_PORTS)) {
  f2:	84 30       	cpi	r24, 0x04	; 4
  f4:	38 f4       	brcc	.+14     	; 0x104 <BUTTON_Init+0x16>
		BUTTON_Driver_Checker = BUTTON_WRONG_PORT_NUMBER;
	}
	else {
		/* Setup the pin direction as required */
		GPIO_setupPinDirection(port_num, pin_num, PIN_INPUT);
  f6:	40 e0       	ldi	r20, 0x00	; 0
  f8:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <GPIO_setupPinDirection>
		BUTTON_Driver_Checker = BUTTON_OK;
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	08 95       	ret
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t BUTTON_Driver_Checker = NULL;
	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
		BUTTON_Driver_Checker = BUTTON_WRONG_PIN_NUMBER;
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	08 95       	ret
	}
	else if((port_num >= NUM_OF_PORTS)) {
		BUTTON_Driver_Checker = BUTTON_WRONG_PORT_NUMBER;
 104:	82 e0       	ldi	r24, 0x02	; 2
		/* Setup the pin direction as required */
		GPIO_setupPinDirection(port_num, pin_num, PIN_INPUT);
		BUTTON_Driver_Checker = BUTTON_OK;
	}
	return BUTTON_Driver_Checker;
}
 106:	08 95       	ret

00000108 <BUTTON_Read>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
uint8 BUTTON_Read(uint8 port_num, uint8 pin_num) {
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	d8 2f       	mov	r29, r24
 10e:	c6 2f       	mov	r28, r22

	uint8_t BUTTON_Driver_Checker = NULL;
		if((pin_num >= NUM_OF_PINS_PER_PORT)) {
 110:	68 30       	cpi	r22, 0x08	; 8
 112:	20 f4       	brcc	.+8      	; 0x11c <BUTTON_Read+0x14>
			BUTTON_Driver_Checker = BUTTON_WRONG_PIN_NUMBER;
		}
		else if((port_num >= NUM_OF_PORTS)) {
 114:	84 30       	cpi	r24, 0x04	; 4
 116:	10 f4       	brcc	.+4      	; 0x11c <BUTTON_Read+0x14>
			BUTTON_Driver_Checker = BUTTON_WRONG_PORT_NUMBER;
		}
		else {
			/* Setup the pin direction as required */
			GPIO_readPin(port_num, pin_num);
 118:	0e 94 21 02 	call	0x442	; 0x442 <GPIO_readPin>
			BUTTON_Driver_Checker = BUTTON_OK;
		}
		return GPIO_readPin(port_num, pin_num);
 11c:	6c 2f       	mov	r22, r28
 11e:	8d 2f       	mov	r24, r29
 120:	0e 94 21 02 	call	0x442	; 0x442 <GPIO_readPin>
}
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	08 95       	ret

0000012a <LED_Init>:
				GPIO_writePin(port_num, pin_num, LOGIC_LOW);
			#endif
			LED_Driver_Checker = LED_OK;
		}
		return LED_Driver_Checker;
}
 12a:	68 30       	cpi	r22, 0x08	; 8
 12c:	38 f4       	brcc	.+14     	; 0x13c <LED_Init+0x12>
 12e:	84 30       	cpi	r24, 0x04	; 4
 130:	38 f4       	brcc	.+14     	; 0x140 <LED_Init+0x16>
 132:	41 e0       	ldi	r20, 0x01	; 1
 134:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <GPIO_setupPinDirection>
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	08 95       	ret
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	08 95       	ret
 140:	82 e0       	ldi	r24, 0x02	; 2
 142:	08 95       	ret

00000144 <LED_On>:
 144:	68 30       	cpi	r22, 0x08	; 8
 146:	38 f4       	brcc	.+14     	; 0x156 <LED_On+0x12>
 148:	84 30       	cpi	r24, 0x04	; 4
 14a:	38 f4       	brcc	.+14     	; 0x15a <LED_On+0x16>
 14c:	40 e0       	ldi	r20, 0x00	; 0
 14e:	0e 94 59 01 	call	0x2b2	; 0x2b2 <GPIO_writePin>
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	08 95       	ret
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	08 95       	ret
 15a:	82 e0       	ldi	r24, 0x02	; 2
 15c:	08 95       	ret

0000015e <LED_Toggle>:

LED_Error_t LED_Toggle(uint8 port_num, uint8 pin_num) {

	uint8_t LED_Driver_Checker = NULL;
		if((pin_num >= NUM_OF_PINS_PER_PORT)) {
 15e:	68 30       	cpi	r22, 0x08	; 8
 160:	30 f4       	brcc	.+12     	; 0x16e <LED_Toggle+0x10>
			LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
		}
		else if((port_num >= NUM_OF_PORTS)) {
 162:	84 30       	cpi	r24, 0x04	; 4
 164:	30 f4       	brcc	.+12     	; 0x172 <LED_Toggle+0x14>
			LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
		}
		else {
			/* Setup the pin direction as required */
			GPIO_togglePin(port_num, pin_num);
 166:	0e 94 df 01 	call	0x3be	; 0x3be <GPIO_togglePin>
			LED_Driver_Checker = LED_OK;
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	08 95       	ret

LED_Error_t LED_Toggle(uint8 port_num, uint8 pin_num) {

	uint8_t LED_Driver_Checker = NULL;
		if((pin_num >= NUM_OF_PINS_PER_PORT)) {
			LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	08 95       	ret
		}
		else if((port_num >= NUM_OF_PORTS)) {
			LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
 172:	82 e0       	ldi	r24, 0x02	; 2
			/* Setup the pin direction as required */
			GPIO_togglePin(port_num, pin_num);
			LED_Driver_Checker = LED_OK;
		}
		return LED_Driver_Checker;
}
 174:	08 95       	ret

00000176 <EXT_INTERRUPT_Init>:
	 */

	// Checking if INT0 is enabled or disabled
	#if (EXT_INTERRUPT_INT0_INIT_STATE == EXT_INTERRUPT_Enable_State)
		// Enabling the INT0 bit inside GICR
		SET_BIT(GICR, INT0);
 176:	8b b7       	in	r24, 0x3b	; 59
 178:	80 64       	ori	r24, 0x40	; 64
 17a:	8b bf       	out	0x3b, r24	; 59

		// Setup Pin PD2 "INT0" to Input
		GPIO_setupPinDirection(PORT_D, PIN_2, PIN_INPUT);
 17c:	40 e0       	ldi	r20, 0x00	; 0
 17e:	62 e0       	ldi	r22, 0x02	; 2
 180:	83 e0       	ldi	r24, 0x03	; 3
 182:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <GPIO_setupPinDirection>
			SET_BIT(MCUCR, ISC00);
		#elif (EXT_INTERRUPT_0_MODE == EXT_INTERRUPT_Falling_Edge)
			SET_BIT(MCUCR, ISC01);
			CLR_BIT(MCUCR, ISC00);
		#elif (EXT_INTERRUPT_0_MODE == EXT_INTERRUPT_Rising_Edge)
			SET_BIT(MCUCR, ISC01);
 186:	85 b7       	in	r24, 0x35	; 53
 188:	82 60       	ori	r24, 0x02	; 2
 18a:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR, ISC00);
 18c:	85 b7       	in	r24, 0x35	; 53
 18e:	81 60       	ori	r24, 0x01	; 1
 190:	85 bf       	out	0x35, r24	; 53
		#elif (EXT_INTERRUPT_1_MODE == EXT_INTERRUPT_Rising_Edge)
			SET_BIT(MCUCR, ISC11);
			SET_BIT(MCUCR, ISC10);
		#endif
	#elif (EXT_INTERRUPT_INT1_INIT_STATE == EXT_INTERRUPT_Disable_State)
			CLR_BIT(GICR, INT1);
 192:	8b b7       	in	r24, 0x3b	; 59
 194:	8f 77       	andi	r24, 0x7F	; 127
 196:	8b bf       	out	0x3b, r24	; 59
			CLR_BIT(MCUCSR, ISC2);
		#elif (EXT_INTERRUPT_2_MODE == EXT_INTERRUPT_INT2_Rising_Edge)
			SET_BIT(MCUCSR, ISC2);
		#endif
	#elif (EXT_INTERRUPT_INT2_INIT_STATE == EXT_INTERRUPT_Disable_State)
			CLR_BIT(GICR, INT2);
 198:	8b b7       	in	r24, 0x3b	; 59
 19a:	8f 7d       	andi	r24, 0xDF	; 223
 19c:	8b bf       	out	0x3b, r24	; 59

	/* Status Register – SREG Register Bits Description:
	 * Bit 7 – I: Global Interrupt Enable
	 */
	// Enabling the I-Bit
	SET_BIT(SREG, SREG_I_BIT);
 19e:	8f b7       	in	r24, 0x3f	; 63
 1a0:	80 68       	ori	r24, 0x80	; 128
 1a2:	8f bf       	out	0x3f, r24	; 63
 1a4:	08 95       	ret

000001a6 <GPIO_setupPinDirection>:
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t GPIO_Driver_Checker = NULL;

	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
 1a6:	68 30       	cpi	r22, 0x08	; 8
 1a8:	08 f0       	brcs	.+2      	; 0x1ac <GPIO_setupPinDirection+0x6>
 1aa:	7b c0       	rjmp	.+246    	; 0x2a2 <GPIO_setupPinDirection+0xfc>
		// Checks if the entered pin number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
	}
	else if((port_num >= NUM_OF_PORTS)) {
 1ac:	84 30       	cpi	r24, 0x04	; 4
 1ae:	08 f0       	brcs	.+2      	; 0x1b2 <GPIO_setupPinDirection+0xc>
 1b0:	7a c0       	rjmp	.+244    	; 0x2a6 <GPIO_setupPinDirection+0x100>
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
	}
	else if((direction != PIN_INPUT) && (direction != PIN_OUTPUT)) {
 1b2:	42 30       	cpi	r20, 0x02	; 2
 1b4:	08 f0       	brcs	.+2      	; 0x1b8 <GPIO_setupPinDirection+0x12>
 1b6:	79 c0       	rjmp	.+242    	; 0x2aa <GPIO_setupPinDirection+0x104>
		// Checks if the entered direction is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
	}
	else {
		// Setup the pin direction as required
		switch(port_num) {
 1b8:	81 30       	cpi	r24, 0x01	; 1
 1ba:	11 f1       	breq	.+68     	; 0x200 <GPIO_setupPinDirection+0x5a>
 1bc:	30 f0       	brcs	.+12     	; 0x1ca <GPIO_setupPinDirection+0x24>
 1be:	82 30       	cpi	r24, 0x02	; 2
 1c0:	d1 f1       	breq	.+116    	; 0x236 <GPIO_setupPinDirection+0x90>
 1c2:	83 30       	cpi	r24, 0x03	; 3
 1c4:	09 f4       	brne	.+2      	; 0x1c8 <GPIO_setupPinDirection+0x22>
 1c6:	52 c0       	rjmp	.+164    	; 0x26c <GPIO_setupPinDirection+0xc6>
 1c8:	72 c0       	rjmp	.+228    	; 0x2ae <GPIO_setupPinDirection+0x108>
		case PORT_A:
			if(direction == PIN_OUTPUT) {
 1ca:	41 30       	cpi	r20, 0x01	; 1
 1cc:	61 f4       	brne	.+24     	; 0x1e6 <GPIO_setupPinDirection+0x40>
				SET_BIT(DDRA, pin_num);
 1ce:	2a b3       	in	r18, 0x1a	; 26
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <GPIO_setupPinDirection+0x34>
 1d6:	88 0f       	add	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	6a 95       	dec	r22
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <GPIO_setupPinDirection+0x30>
 1de:	82 2b       	or	r24, r18
 1e0:	8a bb       	out	0x1a, r24	; 26
			else {
				CLR_BIT(DDRD,pin_num);
			}
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	08 95       	ret
		case PORT_A:
			if(direction == PIN_OUTPUT) {
				SET_BIT(DDRA, pin_num);
			}
			else {
				CLR_BIT(DDRA, pin_num);
 1e6:	2a b3       	in	r18, 0x1a	; 26
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <GPIO_setupPinDirection+0x4c>
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	6a 95       	dec	r22
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <GPIO_setupPinDirection+0x48>
 1f6:	80 95       	com	r24
 1f8:	82 23       	and	r24, r18
 1fa:	8a bb       	out	0x1a, r24	; 26
			else {
				CLR_BIT(DDRD,pin_num);
			}
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	08 95       	ret
			else {
				CLR_BIT(DDRA, pin_num);
			}
			break;
		case PORT_B:
			if(direction == PIN_OUTPUT) {
 200:	41 30       	cpi	r20, 0x01	; 1
 202:	61 f4       	brne	.+24     	; 0x21c <GPIO_setupPinDirection+0x76>
				SET_BIT(DDRB,pin_num);
 204:	27 b3       	in	r18, 0x17	; 23
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	02 c0       	rjmp	.+4      	; 0x210 <GPIO_setupPinDirection+0x6a>
 20c:	88 0f       	add	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	6a 95       	dec	r22
 212:	e2 f7       	brpl	.-8      	; 0x20c <GPIO_setupPinDirection+0x66>
 214:	82 2b       	or	r24, r18
 216:	87 bb       	out	0x17, r24	; 23
			else {
				CLR_BIT(DDRD,pin_num);
			}
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	08 95       	ret
		case PORT_B:
			if(direction == PIN_OUTPUT) {
				SET_BIT(DDRB,pin_num);
			}
			else {
				CLR_BIT(DDRB,pin_num);
 21c:	27 b3       	in	r18, 0x17	; 23
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	02 c0       	rjmp	.+4      	; 0x228 <GPIO_setupPinDirection+0x82>
 224:	88 0f       	add	r24, r24
 226:	99 1f       	adc	r25, r25
 228:	6a 95       	dec	r22
 22a:	e2 f7       	brpl	.-8      	; 0x224 <GPIO_setupPinDirection+0x7e>
 22c:	80 95       	com	r24
 22e:	82 23       	and	r24, r18
 230:	87 bb       	out	0x17, r24	; 23
			else {
				CLR_BIT(DDRD,pin_num);
			}
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	08 95       	ret
			else {
				CLR_BIT(DDRB,pin_num);
			}
			break;
		case PORT_C:
			if(direction == PIN_OUTPUT) {
 236:	41 30       	cpi	r20, 0x01	; 1
 238:	61 f4       	brne	.+24     	; 0x252 <GPIO_setupPinDirection+0xac>
				SET_BIT(DDRC,pin_num);
 23a:	24 b3       	in	r18, 0x14	; 20
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	02 c0       	rjmp	.+4      	; 0x246 <GPIO_setupPinDirection+0xa0>
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	6a 95       	dec	r22
 248:	e2 f7       	brpl	.-8      	; 0x242 <GPIO_setupPinDirection+0x9c>
 24a:	82 2b       	or	r24, r18
 24c:	84 bb       	out	0x14, r24	; 20
			else {
				CLR_BIT(DDRD,pin_num);
			}
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	08 95       	ret
		case PORT_C:
			if(direction == PIN_OUTPUT) {
				SET_BIT(DDRC,pin_num);
			}
			else {
				CLR_BIT(DDRC,pin_num);
 252:	24 b3       	in	r18, 0x14	; 20
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	02 c0       	rjmp	.+4      	; 0x25e <GPIO_setupPinDirection+0xb8>
 25a:	88 0f       	add	r24, r24
 25c:	99 1f       	adc	r25, r25
 25e:	6a 95       	dec	r22
 260:	e2 f7       	brpl	.-8      	; 0x25a <GPIO_setupPinDirection+0xb4>
 262:	80 95       	com	r24
 264:	82 23       	and	r24, r18
 266:	84 bb       	out	0x14, r24	; 20
			else {
				CLR_BIT(DDRD,pin_num);
			}
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 268:	80 e0       	ldi	r24, 0x00	; 0
 26a:	08 95       	ret
			else {
				CLR_BIT(DDRC,pin_num);
			}
			break;
		case PORT_D:
			if(direction == PIN_OUTPUT) {
 26c:	41 30       	cpi	r20, 0x01	; 1
 26e:	61 f4       	brne	.+24     	; 0x288 <GPIO_setupPinDirection+0xe2>
				SET_BIT(DDRD,pin_num);
 270:	21 b3       	in	r18, 0x11	; 17
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	02 c0       	rjmp	.+4      	; 0x27c <GPIO_setupPinDirection+0xd6>
 278:	88 0f       	add	r24, r24
 27a:	99 1f       	adc	r25, r25
 27c:	6a 95       	dec	r22
 27e:	e2 f7       	brpl	.-8      	; 0x278 <GPIO_setupPinDirection+0xd2>
 280:	82 2b       	or	r24, r18
 282:	81 bb       	out	0x11, r24	; 17
			else {
				CLR_BIT(DDRD,pin_num);
			}
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	08 95       	ret
		case PORT_D:
			if(direction == PIN_OUTPUT) {
				SET_BIT(DDRD,pin_num);
			}
			else {
				CLR_BIT(DDRD,pin_num);
 288:	21 b3       	in	r18, 0x11	; 17
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	02 c0       	rjmp	.+4      	; 0x294 <GPIO_setupPinDirection+0xee>
 290:	88 0f       	add	r24, r24
 292:	99 1f       	adc	r25, r25
 294:	6a 95       	dec	r22
 296:	e2 f7       	brpl	.-8      	; 0x290 <GPIO_setupPinDirection+0xea>
 298:	80 95       	com	r24
 29a:	82 23       	and	r24, r18
 29c:	81 bb       	out	0x11, r24	; 17
			}
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	08 95       	ret
	 */
	uint8_t GPIO_Driver_Checker = NULL;

	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
		// Checks if the entered pin number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	08 95       	ret
	}
	else if((port_num >= NUM_OF_PORTS)) {
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
 2a6:	82 e0       	ldi	r24, 0x02	; 2
 2a8:	08 95       	ret
	}
	else if((direction != PIN_INPUT) && (direction != PIN_OUTPUT)) {
		// Checks if the entered direction is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
 2aa:	83 e0       	ldi	r24, 0x03	; 3
 2ac:	08 95       	ret
			else {
				CLR_BIT(DDRD,pin_num);
			}
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 2ae:	80 e0       	ldi	r24, 0x00	; 0
	}
	return GPIO_Driver_Checker;
}
 2b0:	08 95       	ret

000002b2 <GPIO_writePin>:
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
GPIO_Error_t GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value) {
	uint8_t GPIO_Driver_Checker = NULL;

	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
 2b2:	68 30       	cpi	r22, 0x08	; 8
 2b4:	08 f0       	brcs	.+2      	; 0x2b8 <GPIO_writePin+0x6>
 2b6:	7b c0       	rjmp	.+246    	; 0x3ae <GPIO_writePin+0xfc>
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
	}
	else if((port_num >= NUM_OF_PORTS)) {
 2b8:	84 30       	cpi	r24, 0x04	; 4
 2ba:	08 f0       	brcs	.+2      	; 0x2be <GPIO_writePin+0xc>
 2bc:	7a c0       	rjmp	.+244    	; 0x3b2 <GPIO_writePin+0x100>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
	}
	else if((value != LOGIC_HIGH) && (value != LOGIC_LOW)) {
 2be:	42 30       	cpi	r20, 0x02	; 2
 2c0:	08 f0       	brcs	.+2      	; 0x2c4 <GPIO_writePin+0x12>
 2c2:	79 c0       	rjmp	.+242    	; 0x3b6 <GPIO_writePin+0x104>
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
	}
	else {
		switch(port_num) {
 2c4:	81 30       	cpi	r24, 0x01	; 1
 2c6:	11 f1       	breq	.+68     	; 0x30c <GPIO_writePin+0x5a>
 2c8:	30 f0       	brcs	.+12     	; 0x2d6 <GPIO_writePin+0x24>
 2ca:	82 30       	cpi	r24, 0x02	; 2
 2cc:	d1 f1       	breq	.+116    	; 0x342 <GPIO_writePin+0x90>
 2ce:	83 30       	cpi	r24, 0x03	; 3
 2d0:	09 f4       	brne	.+2      	; 0x2d4 <GPIO_writePin+0x22>
 2d2:	52 c0       	rjmp	.+164    	; 0x378 <GPIO_writePin+0xc6>
 2d4:	72 c0       	rjmp	.+228    	; 0x3ba <GPIO_writePin+0x108>
		case PORT_A:
			if(value == LOGIC_HIGH) {
 2d6:	41 30       	cpi	r20, 0x01	; 1
 2d8:	61 f4       	brne	.+24     	; 0x2f2 <GPIO_writePin+0x40>
				SET_BIT(PORTA,pin_num);
 2da:	2b b3       	in	r18, 0x1b	; 27
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <GPIO_writePin+0x34>
 2e2:	88 0f       	add	r24, r24
 2e4:	99 1f       	adc	r25, r25
 2e6:	6a 95       	dec	r22
 2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <GPIO_writePin+0x30>
 2ea:	82 2b       	or	r24, r18
 2ec:	8b bb       	out	0x1b, r24	; 27
			else {
				CLR_BIT(PORTD,pin_num);
			}
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	08 95       	ret
		case PORT_A:
			if(value == LOGIC_HIGH) {
				SET_BIT(PORTA,pin_num);
			}
			else {
				CLR_BIT(PORTA,pin_num);
 2f2:	2b b3       	in	r18, 0x1b	; 27
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <GPIO_writePin+0x4c>
 2fa:	88 0f       	add	r24, r24
 2fc:	99 1f       	adc	r25, r25
 2fe:	6a 95       	dec	r22
 300:	e2 f7       	brpl	.-8      	; 0x2fa <GPIO_writePin+0x48>
 302:	80 95       	com	r24
 304:	82 23       	and	r24, r18
 306:	8b bb       	out	0x1b, r24	; 27
			else {
				CLR_BIT(PORTD,pin_num);
			}
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	08 95       	ret
			else {
				CLR_BIT(PORTA,pin_num);
			}
			break;
		case PORT_B:
			if(value == LOGIC_HIGH) {
 30c:	41 30       	cpi	r20, 0x01	; 1
 30e:	61 f4       	brne	.+24     	; 0x328 <GPIO_writePin+0x76>
				SET_BIT(PORTB,pin_num);
 310:	28 b3       	in	r18, 0x18	; 24
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	02 c0       	rjmp	.+4      	; 0x31c <GPIO_writePin+0x6a>
 318:	88 0f       	add	r24, r24
 31a:	99 1f       	adc	r25, r25
 31c:	6a 95       	dec	r22
 31e:	e2 f7       	brpl	.-8      	; 0x318 <GPIO_writePin+0x66>
 320:	82 2b       	or	r24, r18
 322:	88 bb       	out	0x18, r24	; 24
			else {
				CLR_BIT(PORTD,pin_num);
			}
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	08 95       	ret
		case PORT_B:
			if(value == LOGIC_HIGH) {
				SET_BIT(PORTB,pin_num);
			}
			else {
				CLR_BIT(PORTB,pin_num);
 328:	28 b3       	in	r18, 0x18	; 24
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	02 c0       	rjmp	.+4      	; 0x334 <GPIO_writePin+0x82>
 330:	88 0f       	add	r24, r24
 332:	99 1f       	adc	r25, r25
 334:	6a 95       	dec	r22
 336:	e2 f7       	brpl	.-8      	; 0x330 <GPIO_writePin+0x7e>
 338:	80 95       	com	r24
 33a:	82 23       	and	r24, r18
 33c:	88 bb       	out	0x18, r24	; 24
			else {
				CLR_BIT(PORTD,pin_num);
			}
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	08 95       	ret
			else {
				CLR_BIT(PORTB,pin_num);
			}
			break;
		case PORT_C:
			if(value == LOGIC_HIGH) {
 342:	41 30       	cpi	r20, 0x01	; 1
 344:	61 f4       	brne	.+24     	; 0x35e <GPIO_writePin+0xac>
				SET_BIT(PORTC,pin_num);
 346:	25 b3       	in	r18, 0x15	; 21
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	02 c0       	rjmp	.+4      	; 0x352 <GPIO_writePin+0xa0>
 34e:	88 0f       	add	r24, r24
 350:	99 1f       	adc	r25, r25
 352:	6a 95       	dec	r22
 354:	e2 f7       	brpl	.-8      	; 0x34e <GPIO_writePin+0x9c>
 356:	82 2b       	or	r24, r18
 358:	85 bb       	out	0x15, r24	; 21
			else {
				CLR_BIT(PORTD,pin_num);
			}
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	08 95       	ret
		case PORT_C:
			if(value == LOGIC_HIGH) {
				SET_BIT(PORTC,pin_num);
			}
			else {
				CLR_BIT(PORTC,pin_num);
 35e:	25 b3       	in	r18, 0x15	; 21
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	02 c0       	rjmp	.+4      	; 0x36a <GPIO_writePin+0xb8>
 366:	88 0f       	add	r24, r24
 368:	99 1f       	adc	r25, r25
 36a:	6a 95       	dec	r22
 36c:	e2 f7       	brpl	.-8      	; 0x366 <GPIO_writePin+0xb4>
 36e:	80 95       	com	r24
 370:	82 23       	and	r24, r18
 372:	85 bb       	out	0x15, r24	; 21
			else {
				CLR_BIT(PORTD,pin_num);
			}
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	08 95       	ret
			else {
				CLR_BIT(PORTC,pin_num);
			}
			break;
		case PORT_D:
			if(value == LOGIC_HIGH) {
 378:	41 30       	cpi	r20, 0x01	; 1
 37a:	61 f4       	brne	.+24     	; 0x394 <GPIO_writePin+0xe2>
				SET_BIT(PORTD,pin_num);
 37c:	22 b3       	in	r18, 0x12	; 18
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	02 c0       	rjmp	.+4      	; 0x388 <GPIO_writePin+0xd6>
 384:	88 0f       	add	r24, r24
 386:	99 1f       	adc	r25, r25
 388:	6a 95       	dec	r22
 38a:	e2 f7       	brpl	.-8      	; 0x384 <GPIO_writePin+0xd2>
 38c:	82 2b       	or	r24, r18
 38e:	82 bb       	out	0x12, r24	; 18
			else {
				CLR_BIT(PORTD,pin_num);
			}
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	08 95       	ret
		case PORT_D:
			if(value == LOGIC_HIGH) {
				SET_BIT(PORTD,pin_num);
			}
			else {
				CLR_BIT(PORTD,pin_num);
 394:	22 b3       	in	r18, 0x12	; 18
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <GPIO_writePin+0xee>
 39c:	88 0f       	add	r24, r24
 39e:	99 1f       	adc	r25, r25
 3a0:	6a 95       	dec	r22
 3a2:	e2 f7       	brpl	.-8      	; 0x39c <GPIO_writePin+0xea>
 3a4:	80 95       	com	r24
 3a6:	82 23       	and	r24, r18
 3a8:	82 bb       	out	0x12, r24	; 18
			}
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	08 95       	ret
 */
GPIO_Error_t GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value) {
	uint8_t GPIO_Driver_Checker = NULL;

	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	08 95       	ret
	}
	else if((port_num >= NUM_OF_PORTS)) {
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
 3b2:	82 e0       	ldi	r24, 0x02	; 2
 3b4:	08 95       	ret
	}
	else if((value != LOGIC_HIGH) && (value != LOGIC_LOW)) {
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
 3b6:	83 e0       	ldi	r24, 0x03	; 3
 3b8:	08 95       	ret
			else {
				CLR_BIT(PORTD,pin_num);
			}
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 3ba:	80 e0       	ldi	r24, 0x00	; 0
	}
	return GPIO_Driver_Checker;
}
 3bc:	08 95       	ret

000003be <GPIO_togglePin>:
 * If the input port number or pin number are not correct, The function will return an error.
 */
GPIO_Error_t GPIO_togglePin(uint8 port_num, uint8 pin_num) {
	uint8_t GPIO_Driver_Checker = NULL;

	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
 3be:	68 30       	cpi	r22, 0x08	; 8
 3c0:	d0 f5       	brcc	.+116    	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
	}
	else if((port_num >= NUM_OF_PORTS)) {
 3c2:	84 30       	cpi	r24, 0x04	; 4
 3c4:	d0 f5       	brcc	.+116    	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
	}
	else {
		switch(port_num) {
 3c6:	81 30       	cpi	r24, 0x01	; 1
 3c8:	91 f0       	breq	.+36     	; 0x3ee <GPIO_togglePin+0x30>
 3ca:	28 f0       	brcs	.+10     	; 0x3d6 <GPIO_togglePin+0x18>
 3cc:	82 30       	cpi	r24, 0x02	; 2
 3ce:	d9 f0       	breq	.+54     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3d0:	83 30       	cpi	r24, 0x03	; 3
 3d2:	29 f1       	breq	.+74     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 3d4:	34 c0       	rjmp	.+104    	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
		case PORT_A:
			TOG_BIT(PORTA,pin_num);
 3d6:	2b b3       	in	r18, 0x1b	; 27
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <GPIO_togglePin+0x24>
 3de:	88 0f       	add	r24, r24
 3e0:	99 1f       	adc	r25, r25
 3e2:	6a 95       	dec	r22
 3e4:	e2 f7       	brpl	.-8      	; 0x3de <GPIO_togglePin+0x20>
 3e6:	82 27       	eor	r24, r18
 3e8:	8b bb       	out	0x1b, r24	; 27
			break;
		case PORT_D:
			TOG_BIT(PORTD,pin_num);
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 3ea:	80 e0       	ldi	r24, 0x00	; 0
	}
	else {
		switch(port_num) {
		case PORT_A:
			TOG_BIT(PORTA,pin_num);
			break;
 3ec:	08 95       	ret
		case PORT_B:
			TOG_BIT(PORTB,pin_num);
 3ee:	28 b3       	in	r18, 0x18	; 24
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <GPIO_togglePin+0x3c>
 3f6:	88 0f       	add	r24, r24
 3f8:	99 1f       	adc	r25, r25
 3fa:	6a 95       	dec	r22
 3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <GPIO_togglePin+0x38>
 3fe:	82 27       	eor	r24, r18
 400:	88 bb       	out	0x18, r24	; 24
			break;
		case PORT_D:
			TOG_BIT(PORTD,pin_num);
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 402:	80 e0       	ldi	r24, 0x00	; 0
		case PORT_A:
			TOG_BIT(PORTA,pin_num);
			break;
		case PORT_B:
			TOG_BIT(PORTB,pin_num);
			break;
 404:	08 95       	ret
		case PORT_C:
			TOG_BIT(PORTC,pin_num);
 406:	25 b3       	in	r18, 0x15	; 21
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	02 c0       	rjmp	.+4      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 40e:	88 0f       	add	r24, r24
 410:	99 1f       	adc	r25, r25
 412:	6a 95       	dec	r22
 414:	e2 f7       	brpl	.-8      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 416:	82 27       	eor	r24, r18
 418:	85 bb       	out	0x15, r24	; 21
			break;
		case PORT_D:
			TOG_BIT(PORTD,pin_num);
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 41a:	80 e0       	ldi	r24, 0x00	; 0
		case PORT_B:
			TOG_BIT(PORTB,pin_num);
			break;
		case PORT_C:
			TOG_BIT(PORTC,pin_num);
			break;
 41c:	08 95       	ret
		case PORT_D:
			TOG_BIT(PORTD,pin_num);
 41e:	22 b3       	in	r18, 0x12	; 18
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	02 c0       	rjmp	.+4      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 426:	88 0f       	add	r24, r24
 428:	99 1f       	adc	r25, r25
 42a:	6a 95       	dec	r22
 42c:	e2 f7       	brpl	.-8      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 42e:	82 27       	eor	r24, r18
 430:	82 bb       	out	0x12, r24	; 18
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 432:	80 e0       	ldi	r24, 0x00	; 0
		case PORT_C:
			TOG_BIT(PORTC,pin_num);
			break;
		case PORT_D:
			TOG_BIT(PORTD,pin_num);
			break;
 434:	08 95       	ret
 */
GPIO_Error_t GPIO_togglePin(uint8 port_num, uint8 pin_num) {
	uint8_t GPIO_Driver_Checker = NULL;

	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	08 95       	ret
	}
	else if((port_num >= NUM_OF_PORTS)) {
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
 43a:	82 e0       	ldi	r24, 0x02	; 2
 43c:	08 95       	ret
			break;
		case PORT_D:
			TOG_BIT(PORTD,pin_num);
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
 43e:	80 e0       	ldi	r24, 0x00	; 0
	}
	return GPIO_Driver_Checker;
}
 440:	08 95       	ret

00000442 <GPIO_readPin>:
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t GPIO_Driver_Checker = NULL;

	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
 442:	68 30       	cpi	r22, 0x08	; 8
 444:	b0 f5       	brcc	.+108    	; 0x4b2 <GPIO_readPin+0x70>
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
		return GPIO_Driver_Checker;
	}
	else if((port_num >= NUM_OF_PORTS)) {
 446:	84 30       	cpi	r24, 0x04	; 4
 448:	b0 f5       	brcc	.+108    	; 0x4b6 <GPIO_readPin+0x74>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
		return GPIO_Driver_Checker;
	}
	else {
		/* Read the pin value as required */
		switch(port_num) {
 44a:	81 30       	cpi	r24, 0x01	; 1
 44c:	89 f0       	breq	.+34     	; 0x470 <GPIO_readPin+0x2e>
 44e:	28 f0       	brcs	.+10     	; 0x45a <GPIO_readPin+0x18>
 450:	82 30       	cpi	r24, 0x02	; 2
 452:	c9 f0       	breq	.+50     	; 0x486 <GPIO_readPin+0x44>
 454:	83 30       	cpi	r24, 0x03	; 3
 456:	11 f1       	breq	.+68     	; 0x49c <GPIO_readPin+0x5a>
 458:	30 c0       	rjmp	.+96     	; 0x4ba <GPIO_readPin+0x78>
		case PORT_A:
			// Checks if the bit equals '1' or not
			if(BIT_IS_SET(PINA,pin_num)) {
 45a:	89 b3       	in	r24, 0x19	; 25
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	02 c0       	rjmp	.+4      	; 0x464 <GPIO_readPin+0x22>
 460:	95 95       	asr	r25
 462:	87 95       	ror	r24
 464:	6a 95       	dec	r22
 466:	e2 f7       	brpl	.-8      	; 0x460 <GPIO_readPin+0x1e>
 468:	80 ff       	sbrs	r24, 0
 46a:	29 c0       	rjmp	.+82     	; 0x4be <GPIO_readPin+0x7c>
				pin_value = LOGIC_HIGH;
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	08 95       	ret
			else {
				pin_value = LOGIC_LOW;
			}
			break;
		case PORT_B:
			if(BIT_IS_SET(PINB,pin_num)) {
 470:	86 b3       	in	r24, 0x16	; 22
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	02 c0       	rjmp	.+4      	; 0x47a <GPIO_readPin+0x38>
 476:	95 95       	asr	r25
 478:	87 95       	ror	r24
 47a:	6a 95       	dec	r22
 47c:	e2 f7       	brpl	.-8      	; 0x476 <GPIO_readPin+0x34>
 47e:	80 ff       	sbrs	r24, 0
 480:	20 c0       	rjmp	.+64     	; 0x4c2 <GPIO_readPin+0x80>
				pin_value = LOGIC_HIGH;
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	08 95       	ret
			else {
				pin_value = LOGIC_LOW;
			}
			break;
		case PORT_C:
			if(BIT_IS_SET(PINC,pin_num)) {
 486:	83 b3       	in	r24, 0x13	; 19
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	02 c0       	rjmp	.+4      	; 0x490 <GPIO_readPin+0x4e>
 48c:	95 95       	asr	r25
 48e:	87 95       	ror	r24
 490:	6a 95       	dec	r22
 492:	e2 f7       	brpl	.-8      	; 0x48c <GPIO_readPin+0x4a>
 494:	80 ff       	sbrs	r24, 0
 496:	17 c0       	rjmp	.+46     	; 0x4c6 <GPIO_readPin+0x84>
				pin_value = LOGIC_HIGH;
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	08 95       	ret
			else {
				pin_value = LOGIC_LOW;
			}
			break;
		case PORT_D:
			if(BIT_IS_SET(PIND,pin_num)) {
 49c:	80 b3       	in	r24, 0x10	; 16
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <GPIO_readPin+0x64>
 4a2:	95 95       	asr	r25
 4a4:	87 95       	ror	r24
 4a6:	6a 95       	dec	r22
 4a8:	e2 f7       	brpl	.-8      	; 0x4a2 <GPIO_readPin+0x60>
 4aa:	80 ff       	sbrs	r24, 0
 4ac:	0e c0       	rjmp	.+28     	; 0x4ca <GPIO_readPin+0x88>
				pin_value = LOGIC_HIGH;
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	08 95       	ret
	 */
	uint8_t GPIO_Driver_Checker = NULL;

	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
		return GPIO_Driver_Checker;
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	08 95       	ret
	}
	else if((port_num >= NUM_OF_PORTS)) {
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
		return GPIO_Driver_Checker;
 4b6:	82 e0       	ldi	r24, 0x02	; 2
 4b8:	08 95       	ret
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return an error.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num) {
	uint8 pin_value = LOGIC_LOW;
 4ba:	80 e0       	ldi	r24, 0x00	; 0
 4bc:	08 95       	ret
			// Checks if the bit equals '1' or not
			if(BIT_IS_SET(PINA,pin_num)) {
				pin_value = LOGIC_HIGH;
			}
			else {
				pin_value = LOGIC_LOW;
 4be:	80 e0       	ldi	r24, 0x00	; 0
 4c0:	08 95       	ret
		case PORT_B:
			if(BIT_IS_SET(PINB,pin_num)) {
				pin_value = LOGIC_HIGH;
			}
			else {
				pin_value = LOGIC_LOW;
 4c2:	80 e0       	ldi	r24, 0x00	; 0
 4c4:	08 95       	ret
		case PORT_C:
			if(BIT_IS_SET(PINC,pin_num)) {
				pin_value = LOGIC_HIGH;
			}
			else {
				pin_value = LOGIC_LOW;
 4c6:	80 e0       	ldi	r24, 0x00	; 0
 4c8:	08 95       	ret
		case PORT_D:
			if(BIT_IS_SET(PIND,pin_num)) {
				pin_value = LOGIC_HIGH;
			}
			else {
				pin_value = LOGIC_LOW;
 4ca:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
	}
	return pin_value;
}
 4cc:	08 95       	ret

000004ce <_exit>:
 4ce:	f8 94       	cli

000004d0 <__stop_program>:
 4d0:	ff cf       	rjmp	.-2      	; 0x4d0 <__stop_program>
