
USART_EX1_HOSA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003678  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00003678  0000370c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800168  00800168  00003814  2**0
                  ALLOC
  3 .stab         0000423c  00000000  00000000  00003814  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001e20  00000000  00000000  00007a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00009870  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00009a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00009c02  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000c00d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000d393  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000e56c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000e72c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000ea22  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f390  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	aa 36       	cpi	r26, 0x6A	; 106
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e8 e7       	ldi	r30, 0x78	; 120
      78:	f6 e3       	ldi	r31, 0x36	; 54
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 3a 1a 	call	0x3474	; 0x3474 <main>
      8a:	0c 94 3a 1b 	jmp	0x3674	; 0x3674 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 be 1a 	jmp	0x357c	; 0x357c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 da 1a 	jmp	0x35b4	; 0x35b4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ca 1a 	jmp	0x3594	; 0x3594 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e6 1a 	jmp	0x35cc	; 0x35cc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ca 1a 	jmp	0x3594	; 0x3594 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e6 1a 	jmp	0x35cc	; 0x35cc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 be 1a 	jmp	0x357c	; 0x357c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 da 1a 	jmp	0x35b4	; 0x35b4 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c6 1a 	jmp	0x358c	; 0x358c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 e2 1a 	jmp	0x35c4	; 0x35c4 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 ca 1a 	jmp	0x3594	; 0x3594 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 e6 1a 	jmp	0x35cc	; 0x35cc <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 ca 1a 	jmp	0x3594	; 0x3594 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 e6 1a 	jmp	0x35cc	; 0x35cc <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 ca 1a 	jmp	0x3594	; 0x3594 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 e6 1a 	jmp	0x35cc	; 0x35cc <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 ce 1a 	jmp	0x359c	; 0x359c <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 ea 1a 	jmp	0x35d4	; 0x35d4 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 c6 1a 	jmp	0x358c	; 0x358c <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 e2 1a 	jmp	0x35c4	; 0x35c4 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <USART_Init>:
#include "avr/io.h" /* To use the IO Ports Registers */
#include <util/delay.h>


// Initializes and enables the USART Module to start functionality
void USART_Init(uint32 baudRate) {
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <USART_Init+0x6>
     e34:	00 d0       	rcall	.+0      	; 0xe36 <USART_Init+0x8>
     e36:	00 d0       	rcall	.+0      	; 0xe38 <USART_Init+0xa>
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
     e3c:	6b 83       	std	Y+3, r22	; 0x03
     e3e:	7c 83       	std	Y+4, r23	; 0x04
     e40:	8d 83       	std	Y+5, r24	; 0x05
     e42:	9e 83       	std	Y+6, r25	; 0x06

	// To initialize this Init Function, i need to:
	// Tweak the Frame
	// Set the baud rate

	uint16 UBBR_Value = 0;
     e44:	1a 82       	std	Y+2, r1	; 0x02
     e46:	19 82       	std	Y+1, r1	; 0x01

	SET_BIT(UCSRA, U2X);
     e48:	ab e2       	ldi	r26, 0x2B	; 43
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	eb e2       	ldi	r30, 0x2B	; 43
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	82 60       	ori	r24, 0x02	; 2
     e54:	8c 93       	st	X, r24

	SET_BIT(UCSRB, TXEN);
     e56:	aa e2       	ldi	r26, 0x2A	; 42
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	ea e2       	ldi	r30, 0x2A	; 42
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	88 60       	ori	r24, 0x08	; 8
     e62:	8c 93       	st	X, r24
	SET_BIT(UCSRB, RXEN);
     e64:	aa e2       	ldi	r26, 0x2A	; 42
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	ea e2       	ldi	r30, 0x2A	; 42
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	80 61       	ori	r24, 0x10	; 16
     e70:	8c 93       	st	X, r24

	SET_BIT(UCSRC, URSEL);
     e72:	a0 e4       	ldi	r26, 0x40	; 64
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	e0 e4       	ldi	r30, 0x40	; 64
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	80 68       	ori	r24, 0x80	; 128
     e7e:	8c 93       	st	X, r24
	CLR_BIT(UCSRC, UMSEL);
     e80:	a0 e4       	ldi	r26, 0x40	; 64
     e82:	b0 e0       	ldi	r27, 0x00	; 0
     e84:	e0 e4       	ldi	r30, 0x40	; 64
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	8f 7b       	andi	r24, 0xBF	; 191
     e8c:	8c 93       	st	X, r24
	SET_BIT(UCSRC, TXEN);
     e8e:	a0 e4       	ldi	r26, 0x40	; 64
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	e0 e4       	ldi	r30, 0x40	; 64
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	88 60       	ori	r24, 0x08	; 8
     e9a:	8c 93       	st	X, r24

	CLR_BIT(UCSRC, UCSZ2);
     e9c:	a0 e4       	ldi	r26, 0x40	; 64
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e0 e4       	ldi	r30, 0x40	; 64
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	8b 7f       	andi	r24, 0xFB	; 251
     ea8:	8c 93       	st	X, r24
	SET_BIT(UCSRC, UCSZ1);
     eaa:	a0 e4       	ldi	r26, 0x40	; 64
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e0 e4       	ldi	r30, 0x40	; 64
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	84 60       	ori	r24, 0x04	; 4
     eb6:	8c 93       	st	X, r24
	SET_BIT(UCSRC, UCSZ0);
     eb8:	a0 e4       	ldi	r26, 0x40	; 64
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e0 e4       	ldi	r30, 0x40	; 64
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	82 60       	ori	r24, 0x02	; 2
     ec4:	8c 93       	st	X, r24

	// UBBRH = 0;
	// UBBRL = 207;
	// (0000) (1100 1111) 12 bits, (0000) is for UBBRH, (1100 1111) if for UBBRL

	UBBR_Value = (uint16) ( ( (F_CPU) / (8 * baudRate * 8UL) ) - 1 );
     ec6:	8b 81       	ldd	r24, Y+3	; 0x03
     ec8:	9c 81       	ldd	r25, Y+4	; 0x04
     eca:	ad 81       	ldd	r26, Y+5	; 0x05
     ecc:	be 81       	ldd	r27, Y+6	; 0x06
     ece:	88 0f       	add	r24, r24
     ed0:	99 1f       	adc	r25, r25
     ed2:	aa 1f       	adc	r26, r26
     ed4:	bb 1f       	adc	r27, r27
     ed6:	88 0f       	add	r24, r24
     ed8:	99 1f       	adc	r25, r25
     eda:	aa 1f       	adc	r26, r26
     edc:	bb 1f       	adc	r27, r27
     ede:	88 0f       	add	r24, r24
     ee0:	99 1f       	adc	r25, r25
     ee2:	aa 1f       	adc	r26, r26
     ee4:	bb 1f       	adc	r27, r27
     ee6:	88 0f       	add	r24, r24
     ee8:	99 1f       	adc	r25, r25
     eea:	aa 1f       	adc	r26, r26
     eec:	bb 1f       	adc	r27, r27
     eee:	88 0f       	add	r24, r24
     ef0:	99 1f       	adc	r25, r25
     ef2:	aa 1f       	adc	r26, r26
     ef4:	bb 1f       	adc	r27, r27
     ef6:	88 0f       	add	r24, r24
     ef8:	99 1f       	adc	r25, r25
     efa:	aa 1f       	adc	r26, r26
     efc:	bb 1f       	adc	r27, r27
     efe:	9c 01       	movw	r18, r24
     f00:	ad 01       	movw	r20, r26
     f02:	80 e4       	ldi	r24, 0x40	; 64
     f04:	92 e4       	ldi	r25, 0x42	; 66
     f06:	af e0       	ldi	r26, 0x0F	; 15
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	bc 01       	movw	r22, r24
     f0c:	cd 01       	movw	r24, r26
     f0e:	0e 94 9c 1a 	call	0x3538	; 0x3538 <__udivmodsi4>
     f12:	da 01       	movw	r26, r20
     f14:	c9 01       	movw	r24, r18
     f16:	01 97       	sbiw	r24, 0x01	; 1
     f18:	9a 83       	std	Y+2, r25	; 0x02
     f1a:	89 83       	std	Y+1, r24	; 0x01
	UBRRH = UBBR_Value >> 8;
     f1c:	e0 e4       	ldi	r30, 0x40	; 64
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	89 81       	ldd	r24, Y+1	; 0x01
     f22:	9a 81       	ldd	r25, Y+2	; 0x02
     f24:	89 2f       	mov	r24, r25
     f26:	99 27       	eor	r25, r25
     f28:	80 83       	st	Z, r24
	// Because I want the 4 Zeroes in it

	UBRRL = UBBR_Value;
     f2a:	e9 e2       	ldi	r30, 0x29	; 41
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	89 81       	ldd	r24, Y+1	; 0x01
     f30:	80 83       	st	Z, r24
	// Because I want the actual value

}
     f32:	26 96       	adiw	r28, 0x06	; 6
     f34:	0f b6       	in	r0, 0x3f	; 63
     f36:	f8 94       	cli
     f38:	de bf       	out	0x3e, r29	; 62
     f3a:	0f be       	out	0x3f, r0	; 63
     f3c:	cd bf       	out	0x3d, r28	; 61
     f3e:	cf 91       	pop	r28
     f40:	df 91       	pop	r29
     f42:	08 95       	ret

00000f44 <USART_sendByte>:


// Reads the content written to the selected channel of the ADC
uint8 USART_sendByte(const uint8 data) {
     f44:	df 93       	push	r29
     f46:	cf 93       	push	r28
     f48:	00 d0       	rcall	.+0      	; 0xf4a <USART_sendByte+0x6>
     f4a:	cd b7       	in	r28, 0x3d	; 61
     f4c:	de b7       	in	r29, 0x3e	; 62
     f4e:	89 83       	std	Y+1, r24	; 0x01
	/* UCSRA - USART Control and Status Register A
	  *  Bit 6 – TXC: USART Transmit Complete
	  */

	while ( BIT_IS_CLR(UCSRA, TXC) );
     f50:	eb e2       	ldi	r30, 0x2B	; 43
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	80 81       	ld	r24, Z
     f56:	88 2f       	mov	r24, r24
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	80 74       	andi	r24, 0x40	; 64
     f5c:	90 70       	andi	r25, 0x00	; 0
     f5e:	00 97       	sbiw	r24, 0x00	; 0
     f60:	b9 f3       	breq	.-18     	; 0xf50 <USART_sendByte+0xc>
	// This is waiting for the flag to be set to '0' to know that I received data
}
     f62:	0f 90       	pop	r0
     f64:	0f 90       	pop	r0
     f66:	cf 91       	pop	r28
     f68:	df 91       	pop	r29
     f6a:	08 95       	ret

00000f6c <USART_sendByte2>:

uint8 USART_sendByte2(const uint8 data) {
     f6c:	df 93       	push	r29
     f6e:	cf 93       	push	r28
     f70:	0f 92       	push	r0
     f72:	cd b7       	in	r28, 0x3d	; 61
     f74:	de b7       	in	r29, 0x3e	; 62
     f76:	89 83       	std	Y+1, r24	; 0x01
	/* UCSRA - USART Control and Status Register A
	  *  Bit 7 – RXC: USART Receive Complete, when it receives data, the flag = 0
	  */

	while ( BIT_IS_CLR(UCSRA, RXC) );
     f78:	eb e2       	ldi	r30, 0x2B	; 43
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	88 23       	and	r24, r24
     f80:	dc f7       	brge	.-10     	; 0xf78 <USART_sendByte2+0xc>
	// This is waiting for the flag to be set to '0' to know that I received data

	// When reading
	return UDR;
     f82:	ec e2       	ldi	r30, 0x2C	; 44
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
}
     f88:	0f 90       	pop	r0
     f8a:	cf 91       	pop	r28
     f8c:	df 91       	pop	r29
     f8e:	08 95       	ret

00000f90 <USART_receiveByte>:

uint8 USART_receiveByte(void) {
     f90:	df 93       	push	r29
     f92:	cf 93       	push	r28
     f94:	cd b7       	in	r28, 0x3d	; 61
     f96:	de b7       	in	r29, 0x3e	; 62
	/* UCSRA - USART Control and Status Register A
	  *  Bit 7 – RXC: USART Receive Complete, when it receives data, the flag = 0
	  */

	while ( BIT_IS_CLR(UCSRA, RXC) );
     f98:	eb e2       	ldi	r30, 0x2B	; 43
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	88 23       	and	r24, r24
     fa0:	dc f7       	brge	.-10     	; 0xf98 <USART_receiveByte+0x8>
	// This is waiting for the flag to be set to '0' to know that I received data

	// When reading
	return UDR;
     fa2:	ec e2       	ldi	r30, 0x2C	; 44
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
}
     fa8:	cf 91       	pop	r28
     faa:	df 91       	pop	r29
     fac:	08 95       	ret

00000fae <ICU_Init>:
#include <util/delay.h>
//#include <avr/interrupt.h>


// Initializes and enables the ADC Module to start functionality
void ICU_Init(void) {
     fae:	df 93       	push	r29
     fb0:	cf 93       	push	r28
     fb2:	cd b7       	in	r28, 0x3d	; 61
     fb4:	de b7       	in	r29, 0x3e	; 62
	 * 2 – FOC1B: Force Output Compare for Compare unit B
	 * 1:0 – WGM11:0: Waveform Generation Mode
	 */

	// Clears COM1A1:0 to '00', I want normal mode
	CLR_BIT(TCCR1A, COM1A1);
     fb6:	af e4       	ldi	r26, 0x4F	; 79
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	ef e4       	ldi	r30, 0x4F	; 79
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	8f 77       	andi	r24, 0x7F	; 127
     fc2:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, COM1A0);
     fc4:	af e4       	ldi	r26, 0x4F	; 79
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	ef e4       	ldi	r30, 0x4F	; 79
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	8f 7b       	andi	r24, 0xBF	; 191
     fd0:	8c 93       	st	X, r24

	// Clears COM1B1:0 to '00', I want normal mode
	CLR_BIT(TCCR1A, COM1B1);
     fd2:	af e4       	ldi	r26, 0x4F	; 79
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	ef e4       	ldi	r30, 0x4F	; 79
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	8f 7d       	andi	r24, 0xDF	; 223
     fde:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, COM1B0);
     fe0:	af e4       	ldi	r26, 0x4F	; 79
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	ef e4       	ldi	r30, 0x4F	; 79
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	8f 7e       	andi	r24, 0xEF	; 239
     fec:	8c 93       	st	X, r24

	// Sets FOC1A to '1', I'm in normal mode
	SET_BIT(TCCR1A, FOC1A);
     fee:	af e4       	ldi	r26, 0x4F	; 79
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	ef e4       	ldi	r30, 0x4F	; 79
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	88 60       	ori	r24, 0x08	; 8
     ffa:	8c 93       	st	X, r24

	// Sets FOC1A to '1', I'm in normal mode
	SET_BIT(TCCR1A, FOC1B);
     ffc:	af e4       	ldi	r26, 0x4F	; 79
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	ef e4       	ldi	r30, 0x4F	; 79
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	84 60       	ori	r24, 0x04	; 4
    1008:	8c 93       	st	X, r24

	// Clears COM1B1:0 to '00', I want normal mode
	CLR_BIT(TCCR1A, WGM11);
    100a:	af e4       	ldi	r26, 0x4F	; 79
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	ef e4       	ldi	r30, 0x4F	; 79
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	8d 7f       	andi	r24, 0xFD	; 253
    1016:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, WGM10);
    1018:	af e4       	ldi	r26, 0x4F	; 79
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	ef e4       	ldi	r30, 0x4F	; 79
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	8e 7f       	andi	r24, 0xFE	; 254
    1024:	8c 93       	st	X, r24
	 * Bit 4:3 – WGM13:2: Waveform Generation Mode
	 * Bit 2:0 – CS12:0: Clock Select
	 */

	// Clears ICNC1 to '0', I DONT want the noise canceling
	CLR_BIT(TCCR1B, ICNC1);
    1026:	ae e4       	ldi	r26, 0x4E	; 78
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	ee e4       	ldi	r30, 0x4E	; 78
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	8f 77       	andi	r24, 0x7F	; 127
    1032:	8c 93       	st	X, r24

	// Sets ICES1 to '1', I want the rising edge
	SET_BIT(TCCR1B, ICES1);
    1034:	ae e4       	ldi	r26, 0x4E	; 78
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	ee e4       	ldi	r30, 0x4E	; 78
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	80 64       	ori	r24, 0x40	; 64
    1040:	8c 93       	st	X, r24

	// Sets CS12:0 to '001', nO PRESCALING
	CLR_BIT(TCCR1B, CS12);
    1042:	ae e4       	ldi	r26, 0x4E	; 78
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	ee e4       	ldi	r30, 0x4E	; 78
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	8b 7f       	andi	r24, 0xFB	; 251
    104e:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, CS11);
    1050:	ae e4       	ldi	r26, 0x4E	; 78
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	ee e4       	ldi	r30, 0x4E	; 78
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	8d 7f       	andi	r24, 0xFD	; 253
    105c:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, CS10);
    105e:	ae e4       	ldi	r26, 0x4E	; 78
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	ee e4       	ldi	r30, 0x4E	; 78
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	81 60       	ori	r24, 0x01	; 1
    106a:	8c 93       	st	X, r24

	// Clears TCNT1 to '0', Initialize to '0'
	TCNT1 = 0;
    106c:	ec e4       	ldi	r30, 0x4C	; 76
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	11 82       	std	Z+1, r1	; 0x01
    1072:	10 82       	st	Z, r1

	// Clears ICR1 to '0', Initialize to '0'
	ICR1 = 0;
    1074:	e6 e4       	ldi	r30, 0x46	; 70
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	11 82       	std	Z+1, r1	; 0x01
    107a:	10 82       	st	Z, r1
	 */

	// TIMSK1 |= (1 << TICIE1);
	// SREG |= (1 << 7);

}
    107c:	cf 91       	pop	r28
    107e:	df 91       	pop	r29
    1080:	08 95       	ret

00001082 <GPIO_setupPinDirection>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
GPIO_Error_t GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction) {
    1082:	df 93       	push	r29
    1084:	cf 93       	push	r28
    1086:	00 d0       	rcall	.+0      	; 0x1088 <GPIO_setupPinDirection+0x6>
    1088:	00 d0       	rcall	.+0      	; 0x108a <GPIO_setupPinDirection+0x8>
    108a:	00 d0       	rcall	.+0      	; 0x108c <GPIO_setupPinDirection+0xa>
    108c:	cd b7       	in	r28, 0x3d	; 61
    108e:	de b7       	in	r29, 0x3e	; 62
    1090:	8a 83       	std	Y+2, r24	; 0x02
    1092:	6b 83       	std	Y+3, r22	; 0x03
    1094:	4c 83       	std	Y+4, r20	; 0x04
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t GPIO_Driver_Checker = NULL;
    1096:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    1098:	8b 81       	ldd	r24, Y+3	; 0x03
    109a:	88 30       	cpi	r24, 0x08	; 8
    109c:	18 f0       	brcs	.+6      	; 0x10a4 <GPIO_setupPinDirection+0x22>
		// Checks if the entered pin number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	89 83       	std	Y+1, r24	; 0x01
    10a2:	e1 c0       	rjmp	.+450    	; 0x1266 <GPIO_setupPinDirection+0x1e4>
	}
	else if((port_num >= NUM_OF_PORTS)) {
    10a4:	8a 81       	ldd	r24, Y+2	; 0x02
    10a6:	84 30       	cpi	r24, 0x04	; 4
    10a8:	18 f0       	brcs	.+6      	; 0x10b0 <GPIO_setupPinDirection+0x2e>
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    10aa:	82 e0       	ldi	r24, 0x02	; 2
    10ac:	89 83       	std	Y+1, r24	; 0x01
    10ae:	db c0       	rjmp	.+438    	; 0x1266 <GPIO_setupPinDirection+0x1e4>
	}
	else if((direction != PIN_INPUT) && (direction != PIN_OUTPUT)) {
    10b0:	8c 81       	ldd	r24, Y+4	; 0x04
    10b2:	88 23       	and	r24, r24
    10b4:	31 f0       	breq	.+12     	; 0x10c2 <GPIO_setupPinDirection+0x40>
    10b6:	8c 81       	ldd	r24, Y+4	; 0x04
    10b8:	81 30       	cpi	r24, 0x01	; 1
    10ba:	19 f0       	breq	.+6      	; 0x10c2 <GPIO_setupPinDirection+0x40>
		// Checks if the entered direction is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
    10bc:	83 e0       	ldi	r24, 0x03	; 3
    10be:	89 83       	std	Y+1, r24	; 0x01
    10c0:	d2 c0       	rjmp	.+420    	; 0x1266 <GPIO_setupPinDirection+0x1e4>
	}
	else {
		// Setup the pin direction as required
		switch(port_num) {
    10c2:	8a 81       	ldd	r24, Y+2	; 0x02
    10c4:	28 2f       	mov	r18, r24
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	3e 83       	std	Y+6, r19	; 0x06
    10ca:	2d 83       	std	Y+5, r18	; 0x05
    10cc:	8d 81       	ldd	r24, Y+5	; 0x05
    10ce:	9e 81       	ldd	r25, Y+6	; 0x06
    10d0:	81 30       	cpi	r24, 0x01	; 1
    10d2:	91 05       	cpc	r25, r1
    10d4:	09 f4       	brne	.+2      	; 0x10d8 <GPIO_setupPinDirection+0x56>
    10d6:	43 c0       	rjmp	.+134    	; 0x115e <GPIO_setupPinDirection+0xdc>
    10d8:	2d 81       	ldd	r18, Y+5	; 0x05
    10da:	3e 81       	ldd	r19, Y+6	; 0x06
    10dc:	22 30       	cpi	r18, 0x02	; 2
    10de:	31 05       	cpc	r19, r1
    10e0:	2c f4       	brge	.+10     	; 0x10ec <GPIO_setupPinDirection+0x6a>
    10e2:	8d 81       	ldd	r24, Y+5	; 0x05
    10e4:	9e 81       	ldd	r25, Y+6	; 0x06
    10e6:	00 97       	sbiw	r24, 0x00	; 0
    10e8:	71 f0       	breq	.+28     	; 0x1106 <GPIO_setupPinDirection+0x84>
    10ea:	bc c0       	rjmp	.+376    	; 0x1264 <GPIO_setupPinDirection+0x1e2>
    10ec:	2d 81       	ldd	r18, Y+5	; 0x05
    10ee:	3e 81       	ldd	r19, Y+6	; 0x06
    10f0:	22 30       	cpi	r18, 0x02	; 2
    10f2:	31 05       	cpc	r19, r1
    10f4:	09 f4       	brne	.+2      	; 0x10f8 <GPIO_setupPinDirection+0x76>
    10f6:	5f c0       	rjmp	.+190    	; 0x11b6 <GPIO_setupPinDirection+0x134>
    10f8:	8d 81       	ldd	r24, Y+5	; 0x05
    10fa:	9e 81       	ldd	r25, Y+6	; 0x06
    10fc:	83 30       	cpi	r24, 0x03	; 3
    10fe:	91 05       	cpc	r25, r1
    1100:	09 f4       	brne	.+2      	; 0x1104 <GPIO_setupPinDirection+0x82>
    1102:	85 c0       	rjmp	.+266    	; 0x120e <GPIO_setupPinDirection+0x18c>
    1104:	af c0       	rjmp	.+350    	; 0x1264 <GPIO_setupPinDirection+0x1e2>
		case PORT_A:
			if(direction == PIN_OUTPUT) {
    1106:	8c 81       	ldd	r24, Y+4	; 0x04
    1108:	81 30       	cpi	r24, 0x01	; 1
    110a:	a1 f4       	brne	.+40     	; 0x1134 <GPIO_setupPinDirection+0xb2>
				SET_BIT(DDRA, pin_num);
    110c:	aa e3       	ldi	r26, 0x3A	; 58
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	ea e3       	ldi	r30, 0x3A	; 58
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	48 2f       	mov	r20, r24
    1118:	8b 81       	ldd	r24, Y+3	; 0x03
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	02 2e       	mov	r0, r18
    1124:	02 c0       	rjmp	.+4      	; 0x112a <GPIO_setupPinDirection+0xa8>
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	0a 94       	dec	r0
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <GPIO_setupPinDirection+0xa4>
    112e:	84 2b       	or	r24, r20
    1130:	8c 93       	st	X, r24
    1132:	98 c0       	rjmp	.+304    	; 0x1264 <GPIO_setupPinDirection+0x1e2>
			}
			else {
				CLR_BIT(DDRA, pin_num);
    1134:	aa e3       	ldi	r26, 0x3A	; 58
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	ea e3       	ldi	r30, 0x3A	; 58
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	48 2f       	mov	r20, r24
    1140:	8b 81       	ldd	r24, Y+3	; 0x03
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	02 2e       	mov	r0, r18
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <GPIO_setupPinDirection+0xd0>
    114e:	88 0f       	add	r24, r24
    1150:	99 1f       	adc	r25, r25
    1152:	0a 94       	dec	r0
    1154:	e2 f7       	brpl	.-8      	; 0x114e <GPIO_setupPinDirection+0xcc>
    1156:	80 95       	com	r24
    1158:	84 23       	and	r24, r20
    115a:	8c 93       	st	X, r24
    115c:	83 c0       	rjmp	.+262    	; 0x1264 <GPIO_setupPinDirection+0x1e2>
			}
			break;
		case PORT_B:
			if(direction == PIN_OUTPUT) {
    115e:	8c 81       	ldd	r24, Y+4	; 0x04
    1160:	81 30       	cpi	r24, 0x01	; 1
    1162:	a1 f4       	brne	.+40     	; 0x118c <GPIO_setupPinDirection+0x10a>
				SET_BIT(DDRB,pin_num);
    1164:	a7 e3       	ldi	r26, 0x37	; 55
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e7 e3       	ldi	r30, 0x37	; 55
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	48 2f       	mov	r20, r24
    1170:	8b 81       	ldd	r24, Y+3	; 0x03
    1172:	28 2f       	mov	r18, r24
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	02 2e       	mov	r0, r18
    117c:	02 c0       	rjmp	.+4      	; 0x1182 <GPIO_setupPinDirection+0x100>
    117e:	88 0f       	add	r24, r24
    1180:	99 1f       	adc	r25, r25
    1182:	0a 94       	dec	r0
    1184:	e2 f7       	brpl	.-8      	; 0x117e <GPIO_setupPinDirection+0xfc>
    1186:	84 2b       	or	r24, r20
    1188:	8c 93       	st	X, r24
    118a:	6c c0       	rjmp	.+216    	; 0x1264 <GPIO_setupPinDirection+0x1e2>
			}
			else {
				CLR_BIT(DDRB,pin_num);
    118c:	a7 e3       	ldi	r26, 0x37	; 55
    118e:	b0 e0       	ldi	r27, 0x00	; 0
    1190:	e7 e3       	ldi	r30, 0x37	; 55
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	48 2f       	mov	r20, r24
    1198:	8b 81       	ldd	r24, Y+3	; 0x03
    119a:	28 2f       	mov	r18, r24
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	02 2e       	mov	r0, r18
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <GPIO_setupPinDirection+0x128>
    11a6:	88 0f       	add	r24, r24
    11a8:	99 1f       	adc	r25, r25
    11aa:	0a 94       	dec	r0
    11ac:	e2 f7       	brpl	.-8      	; 0x11a6 <GPIO_setupPinDirection+0x124>
    11ae:	80 95       	com	r24
    11b0:	84 23       	and	r24, r20
    11b2:	8c 93       	st	X, r24
    11b4:	57 c0       	rjmp	.+174    	; 0x1264 <GPIO_setupPinDirection+0x1e2>
			}
			break;
		case PORT_C:
			if(direction == PIN_OUTPUT) {
    11b6:	8c 81       	ldd	r24, Y+4	; 0x04
    11b8:	81 30       	cpi	r24, 0x01	; 1
    11ba:	a1 f4       	brne	.+40     	; 0x11e4 <GPIO_setupPinDirection+0x162>
				SET_BIT(DDRC,pin_num);
    11bc:	a4 e3       	ldi	r26, 0x34	; 52
    11be:	b0 e0       	ldi	r27, 0x00	; 0
    11c0:	e4 e3       	ldi	r30, 0x34	; 52
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	48 2f       	mov	r20, r24
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	28 2f       	mov	r18, r24
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	02 2e       	mov	r0, r18
    11d4:	02 c0       	rjmp	.+4      	; 0x11da <GPIO_setupPinDirection+0x158>
    11d6:	88 0f       	add	r24, r24
    11d8:	99 1f       	adc	r25, r25
    11da:	0a 94       	dec	r0
    11dc:	e2 f7       	brpl	.-8      	; 0x11d6 <GPIO_setupPinDirection+0x154>
    11de:	84 2b       	or	r24, r20
    11e0:	8c 93       	st	X, r24
    11e2:	40 c0       	rjmp	.+128    	; 0x1264 <GPIO_setupPinDirection+0x1e2>
			}
			else {
				CLR_BIT(DDRC,pin_num);
    11e4:	a4 e3       	ldi	r26, 0x34	; 52
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	e4 e3       	ldi	r30, 0x34	; 52
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	48 2f       	mov	r20, r24
    11f0:	8b 81       	ldd	r24, Y+3	; 0x03
    11f2:	28 2f       	mov	r18, r24
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	02 2e       	mov	r0, r18
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <GPIO_setupPinDirection+0x180>
    11fe:	88 0f       	add	r24, r24
    1200:	99 1f       	adc	r25, r25
    1202:	0a 94       	dec	r0
    1204:	e2 f7       	brpl	.-8      	; 0x11fe <GPIO_setupPinDirection+0x17c>
    1206:	80 95       	com	r24
    1208:	84 23       	and	r24, r20
    120a:	8c 93       	st	X, r24
    120c:	2b c0       	rjmp	.+86     	; 0x1264 <GPIO_setupPinDirection+0x1e2>
			}
			break;
		case PORT_D:
			if(direction == PIN_OUTPUT) {
    120e:	8c 81       	ldd	r24, Y+4	; 0x04
    1210:	81 30       	cpi	r24, 0x01	; 1
    1212:	a1 f4       	brne	.+40     	; 0x123c <GPIO_setupPinDirection+0x1ba>
				SET_BIT(DDRD,pin_num);
    1214:	a1 e3       	ldi	r26, 0x31	; 49
    1216:	b0 e0       	ldi	r27, 0x00	; 0
    1218:	e1 e3       	ldi	r30, 0x31	; 49
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	48 2f       	mov	r20, r24
    1220:	8b 81       	ldd	r24, Y+3	; 0x03
    1222:	28 2f       	mov	r18, r24
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	02 2e       	mov	r0, r18
    122c:	02 c0       	rjmp	.+4      	; 0x1232 <GPIO_setupPinDirection+0x1b0>
    122e:	88 0f       	add	r24, r24
    1230:	99 1f       	adc	r25, r25
    1232:	0a 94       	dec	r0
    1234:	e2 f7       	brpl	.-8      	; 0x122e <GPIO_setupPinDirection+0x1ac>
    1236:	84 2b       	or	r24, r20
    1238:	8c 93       	st	X, r24
    123a:	14 c0       	rjmp	.+40     	; 0x1264 <GPIO_setupPinDirection+0x1e2>
			}
			else {
				CLR_BIT(DDRD,pin_num);
    123c:	a1 e3       	ldi	r26, 0x31	; 49
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	e1 e3       	ldi	r30, 0x31	; 49
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	48 2f       	mov	r20, r24
    1248:	8b 81       	ldd	r24, Y+3	; 0x03
    124a:	28 2f       	mov	r18, r24
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	02 2e       	mov	r0, r18
    1254:	02 c0       	rjmp	.+4      	; 0x125a <GPIO_setupPinDirection+0x1d8>
    1256:	88 0f       	add	r24, r24
    1258:	99 1f       	adc	r25, r25
    125a:	0a 94       	dec	r0
    125c:	e2 f7       	brpl	.-8      	; 0x1256 <GPIO_setupPinDirection+0x1d4>
    125e:	80 95       	com	r24
    1260:	84 23       	and	r24, r20
    1262:	8c 93       	st	X, r24
			}
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    1264:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    1266:	89 81       	ldd	r24, Y+1	; 0x01
}
    1268:	26 96       	adiw	r28, 0x06	; 6
    126a:	0f b6       	in	r0, 0x3f	; 63
    126c:	f8 94       	cli
    126e:	de bf       	out	0x3e, r29	; 62
    1270:	0f be       	out	0x3f, r0	; 63
    1272:	cd bf       	out	0x3d, r28	; 61
    1274:	cf 91       	pop	r28
    1276:	df 91       	pop	r29
    1278:	08 95       	ret

0000127a <GPIO_writePin>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
GPIO_Error_t GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value) {
    127a:	df 93       	push	r29
    127c:	cf 93       	push	r28
    127e:	00 d0       	rcall	.+0      	; 0x1280 <GPIO_writePin+0x6>
    1280:	00 d0       	rcall	.+0      	; 0x1282 <GPIO_writePin+0x8>
    1282:	00 d0       	rcall	.+0      	; 0x1284 <GPIO_writePin+0xa>
    1284:	cd b7       	in	r28, 0x3d	; 61
    1286:	de b7       	in	r29, 0x3e	; 62
    1288:	8a 83       	std	Y+2, r24	; 0x02
    128a:	6b 83       	std	Y+3, r22	; 0x03
    128c:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t GPIO_Driver_Checker = NULL;
    128e:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    1290:	8b 81       	ldd	r24, Y+3	; 0x03
    1292:	88 30       	cpi	r24, 0x08	; 8
    1294:	18 f0       	brcs	.+6      	; 0x129c <GPIO_writePin+0x22>
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	89 83       	std	Y+1, r24	; 0x01
    129a:	e1 c0       	rjmp	.+450    	; 0x145e <GPIO_writePin+0x1e4>
	}
	else if((port_num >= NUM_OF_PORTS)) {
    129c:	8a 81       	ldd	r24, Y+2	; 0x02
    129e:	84 30       	cpi	r24, 0x04	; 4
    12a0:	18 f0       	brcs	.+6      	; 0x12a8 <GPIO_writePin+0x2e>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    12a2:	82 e0       	ldi	r24, 0x02	; 2
    12a4:	89 83       	std	Y+1, r24	; 0x01
    12a6:	db c0       	rjmp	.+438    	; 0x145e <GPIO_writePin+0x1e4>
	}
	else if((value != LOGIC_HIGH) && (value != LOGIC_LOW)) {
    12a8:	8c 81       	ldd	r24, Y+4	; 0x04
    12aa:	81 30       	cpi	r24, 0x01	; 1
    12ac:	31 f0       	breq	.+12     	; 0x12ba <GPIO_writePin+0x40>
    12ae:	8c 81       	ldd	r24, Y+4	; 0x04
    12b0:	88 23       	and	r24, r24
    12b2:	19 f0       	breq	.+6      	; 0x12ba <GPIO_writePin+0x40>
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
    12b4:	83 e0       	ldi	r24, 0x03	; 3
    12b6:	89 83       	std	Y+1, r24	; 0x01
    12b8:	d2 c0       	rjmp	.+420    	; 0x145e <GPIO_writePin+0x1e4>
	}
	else {
		switch(port_num) {
    12ba:	8a 81       	ldd	r24, Y+2	; 0x02
    12bc:	28 2f       	mov	r18, r24
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	3e 83       	std	Y+6, r19	; 0x06
    12c2:	2d 83       	std	Y+5, r18	; 0x05
    12c4:	8d 81       	ldd	r24, Y+5	; 0x05
    12c6:	9e 81       	ldd	r25, Y+6	; 0x06
    12c8:	81 30       	cpi	r24, 0x01	; 1
    12ca:	91 05       	cpc	r25, r1
    12cc:	09 f4       	brne	.+2      	; 0x12d0 <GPIO_writePin+0x56>
    12ce:	43 c0       	rjmp	.+134    	; 0x1356 <GPIO_writePin+0xdc>
    12d0:	2d 81       	ldd	r18, Y+5	; 0x05
    12d2:	3e 81       	ldd	r19, Y+6	; 0x06
    12d4:	22 30       	cpi	r18, 0x02	; 2
    12d6:	31 05       	cpc	r19, r1
    12d8:	2c f4       	brge	.+10     	; 0x12e4 <GPIO_writePin+0x6a>
    12da:	8d 81       	ldd	r24, Y+5	; 0x05
    12dc:	9e 81       	ldd	r25, Y+6	; 0x06
    12de:	00 97       	sbiw	r24, 0x00	; 0
    12e0:	71 f0       	breq	.+28     	; 0x12fe <GPIO_writePin+0x84>
    12e2:	bc c0       	rjmp	.+376    	; 0x145c <GPIO_writePin+0x1e2>
    12e4:	2d 81       	ldd	r18, Y+5	; 0x05
    12e6:	3e 81       	ldd	r19, Y+6	; 0x06
    12e8:	22 30       	cpi	r18, 0x02	; 2
    12ea:	31 05       	cpc	r19, r1
    12ec:	09 f4       	brne	.+2      	; 0x12f0 <GPIO_writePin+0x76>
    12ee:	5f c0       	rjmp	.+190    	; 0x13ae <GPIO_writePin+0x134>
    12f0:	8d 81       	ldd	r24, Y+5	; 0x05
    12f2:	9e 81       	ldd	r25, Y+6	; 0x06
    12f4:	83 30       	cpi	r24, 0x03	; 3
    12f6:	91 05       	cpc	r25, r1
    12f8:	09 f4       	brne	.+2      	; 0x12fc <GPIO_writePin+0x82>
    12fa:	85 c0       	rjmp	.+266    	; 0x1406 <GPIO_writePin+0x18c>
    12fc:	af c0       	rjmp	.+350    	; 0x145c <GPIO_writePin+0x1e2>
		case PORT_A:
			if(value == LOGIC_HIGH) {
    12fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1300:	81 30       	cpi	r24, 0x01	; 1
    1302:	a1 f4       	brne	.+40     	; 0x132c <GPIO_writePin+0xb2>
				SET_BIT(PORTA,pin_num);
    1304:	ab e3       	ldi	r26, 0x3B	; 59
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	eb e3       	ldi	r30, 0x3B	; 59
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	48 2f       	mov	r20, r24
    1310:	8b 81       	ldd	r24, Y+3	; 0x03
    1312:	28 2f       	mov	r18, r24
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	02 2e       	mov	r0, r18
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <GPIO_writePin+0xa8>
    131e:	88 0f       	add	r24, r24
    1320:	99 1f       	adc	r25, r25
    1322:	0a 94       	dec	r0
    1324:	e2 f7       	brpl	.-8      	; 0x131e <GPIO_writePin+0xa4>
    1326:	84 2b       	or	r24, r20
    1328:	8c 93       	st	X, r24
    132a:	98 c0       	rjmp	.+304    	; 0x145c <GPIO_writePin+0x1e2>
			}
			else {
				CLR_BIT(PORTA,pin_num);
    132c:	ab e3       	ldi	r26, 0x3B	; 59
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	eb e3       	ldi	r30, 0x3B	; 59
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	48 2f       	mov	r20, r24
    1338:	8b 81       	ldd	r24, Y+3	; 0x03
    133a:	28 2f       	mov	r18, r24
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	02 2e       	mov	r0, r18
    1344:	02 c0       	rjmp	.+4      	; 0x134a <GPIO_writePin+0xd0>
    1346:	88 0f       	add	r24, r24
    1348:	99 1f       	adc	r25, r25
    134a:	0a 94       	dec	r0
    134c:	e2 f7       	brpl	.-8      	; 0x1346 <GPIO_writePin+0xcc>
    134e:	80 95       	com	r24
    1350:	84 23       	and	r24, r20
    1352:	8c 93       	st	X, r24
    1354:	83 c0       	rjmp	.+262    	; 0x145c <GPIO_writePin+0x1e2>
			}
			break;
		case PORT_B:
			if(value == LOGIC_HIGH) {
    1356:	8c 81       	ldd	r24, Y+4	; 0x04
    1358:	81 30       	cpi	r24, 0x01	; 1
    135a:	a1 f4       	brne	.+40     	; 0x1384 <GPIO_writePin+0x10a>
				SET_BIT(PORTB,pin_num);
    135c:	a8 e3       	ldi	r26, 0x38	; 56
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	e8 e3       	ldi	r30, 0x38	; 56
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	48 2f       	mov	r20, r24
    1368:	8b 81       	ldd	r24, Y+3	; 0x03
    136a:	28 2f       	mov	r18, r24
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	02 2e       	mov	r0, r18
    1374:	02 c0       	rjmp	.+4      	; 0x137a <GPIO_writePin+0x100>
    1376:	88 0f       	add	r24, r24
    1378:	99 1f       	adc	r25, r25
    137a:	0a 94       	dec	r0
    137c:	e2 f7       	brpl	.-8      	; 0x1376 <GPIO_writePin+0xfc>
    137e:	84 2b       	or	r24, r20
    1380:	8c 93       	st	X, r24
    1382:	6c c0       	rjmp	.+216    	; 0x145c <GPIO_writePin+0x1e2>
			}
			else {
				CLR_BIT(PORTB,pin_num);
    1384:	a8 e3       	ldi	r26, 0x38	; 56
    1386:	b0 e0       	ldi	r27, 0x00	; 0
    1388:	e8 e3       	ldi	r30, 0x38	; 56
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	48 2f       	mov	r20, r24
    1390:	8b 81       	ldd	r24, Y+3	; 0x03
    1392:	28 2f       	mov	r18, r24
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	02 2e       	mov	r0, r18
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <GPIO_writePin+0x128>
    139e:	88 0f       	add	r24, r24
    13a0:	99 1f       	adc	r25, r25
    13a2:	0a 94       	dec	r0
    13a4:	e2 f7       	brpl	.-8      	; 0x139e <GPIO_writePin+0x124>
    13a6:	80 95       	com	r24
    13a8:	84 23       	and	r24, r20
    13aa:	8c 93       	st	X, r24
    13ac:	57 c0       	rjmp	.+174    	; 0x145c <GPIO_writePin+0x1e2>
			}
			break;
		case PORT_C:
			if(value == LOGIC_HIGH) {
    13ae:	8c 81       	ldd	r24, Y+4	; 0x04
    13b0:	81 30       	cpi	r24, 0x01	; 1
    13b2:	a1 f4       	brne	.+40     	; 0x13dc <GPIO_writePin+0x162>
				SET_BIT(PORTC,pin_num);
    13b4:	a5 e3       	ldi	r26, 0x35	; 53
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	e5 e3       	ldi	r30, 0x35	; 53
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	48 2f       	mov	r20, r24
    13c0:	8b 81       	ldd	r24, Y+3	; 0x03
    13c2:	28 2f       	mov	r18, r24
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	02 2e       	mov	r0, r18
    13cc:	02 c0       	rjmp	.+4      	; 0x13d2 <GPIO_writePin+0x158>
    13ce:	88 0f       	add	r24, r24
    13d0:	99 1f       	adc	r25, r25
    13d2:	0a 94       	dec	r0
    13d4:	e2 f7       	brpl	.-8      	; 0x13ce <GPIO_writePin+0x154>
    13d6:	84 2b       	or	r24, r20
    13d8:	8c 93       	st	X, r24
    13da:	40 c0       	rjmp	.+128    	; 0x145c <GPIO_writePin+0x1e2>
			}
			else {
				CLR_BIT(PORTC,pin_num);
    13dc:	a5 e3       	ldi	r26, 0x35	; 53
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	e5 e3       	ldi	r30, 0x35	; 53
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	48 2f       	mov	r20, r24
    13e8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ea:	28 2f       	mov	r18, r24
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	02 2e       	mov	r0, r18
    13f4:	02 c0       	rjmp	.+4      	; 0x13fa <GPIO_writePin+0x180>
    13f6:	88 0f       	add	r24, r24
    13f8:	99 1f       	adc	r25, r25
    13fa:	0a 94       	dec	r0
    13fc:	e2 f7       	brpl	.-8      	; 0x13f6 <GPIO_writePin+0x17c>
    13fe:	80 95       	com	r24
    1400:	84 23       	and	r24, r20
    1402:	8c 93       	st	X, r24
    1404:	2b c0       	rjmp	.+86     	; 0x145c <GPIO_writePin+0x1e2>
			}
			break;
		case PORT_D:
			if(value == LOGIC_HIGH) {
    1406:	8c 81       	ldd	r24, Y+4	; 0x04
    1408:	81 30       	cpi	r24, 0x01	; 1
    140a:	a1 f4       	brne	.+40     	; 0x1434 <GPIO_writePin+0x1ba>
				SET_BIT(PORTD,pin_num);
    140c:	a2 e3       	ldi	r26, 0x32	; 50
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	e2 e3       	ldi	r30, 0x32	; 50
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	48 2f       	mov	r20, r24
    1418:	8b 81       	ldd	r24, Y+3	; 0x03
    141a:	28 2f       	mov	r18, r24
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	02 2e       	mov	r0, r18
    1424:	02 c0       	rjmp	.+4      	; 0x142a <GPIO_writePin+0x1b0>
    1426:	88 0f       	add	r24, r24
    1428:	99 1f       	adc	r25, r25
    142a:	0a 94       	dec	r0
    142c:	e2 f7       	brpl	.-8      	; 0x1426 <GPIO_writePin+0x1ac>
    142e:	84 2b       	or	r24, r20
    1430:	8c 93       	st	X, r24
    1432:	14 c0       	rjmp	.+40     	; 0x145c <GPIO_writePin+0x1e2>
			}
			else {
				CLR_BIT(PORTD,pin_num);
    1434:	a2 e3       	ldi	r26, 0x32	; 50
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	e2 e3       	ldi	r30, 0x32	; 50
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	48 2f       	mov	r20, r24
    1440:	8b 81       	ldd	r24, Y+3	; 0x03
    1442:	28 2f       	mov	r18, r24
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	02 2e       	mov	r0, r18
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <GPIO_writePin+0x1d8>
    144e:	88 0f       	add	r24, r24
    1450:	99 1f       	adc	r25, r25
    1452:	0a 94       	dec	r0
    1454:	e2 f7       	brpl	.-8      	; 0x144e <GPIO_writePin+0x1d4>
    1456:	80 95       	com	r24
    1458:	84 23       	and	r24, r20
    145a:	8c 93       	st	X, r24
			}
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    145c:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    145e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1460:	26 96       	adiw	r28, 0x06	; 6
    1462:	0f b6       	in	r0, 0x3f	; 63
    1464:	f8 94       	cli
    1466:	de bf       	out	0x3e, r29	; 62
    1468:	0f be       	out	0x3f, r0	; 63
    146a:	cd bf       	out	0x3d, r28	; 61
    146c:	cf 91       	pop	r28
    146e:	df 91       	pop	r29
    1470:	08 95       	ret

00001472 <GPIO_togglePin>:
/*
 * Description :
 * Toggles a certain pin when requested.
 * If the input port number or pin number are not correct, The function will return an error.
 */
GPIO_Error_t GPIO_togglePin(uint8 port_num, uint8 pin_num) {
    1472:	df 93       	push	r29
    1474:	cf 93       	push	r28
    1476:	00 d0       	rcall	.+0      	; 0x1478 <GPIO_togglePin+0x6>
    1478:	00 d0       	rcall	.+0      	; 0x147a <GPIO_togglePin+0x8>
    147a:	0f 92       	push	r0
    147c:	cd b7       	in	r28, 0x3d	; 61
    147e:	de b7       	in	r29, 0x3e	; 62
    1480:	8a 83       	std	Y+2, r24	; 0x02
    1482:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t GPIO_Driver_Checker = NULL;
    1484:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    1486:	8b 81       	ldd	r24, Y+3	; 0x03
    1488:	88 30       	cpi	r24, 0x08	; 8
    148a:	18 f0       	brcs	.+6      	; 0x1492 <GPIO_togglePin+0x20>
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	89 83       	std	Y+1, r24	; 0x01
    1490:	75 c0       	rjmp	.+234    	; 0x157c <GPIO_togglePin+0x10a>
	}
	else if((port_num >= NUM_OF_PORTS)) {
    1492:	8a 81       	ldd	r24, Y+2	; 0x02
    1494:	84 30       	cpi	r24, 0x04	; 4
    1496:	18 f0       	brcs	.+6      	; 0x149e <GPIO_togglePin+0x2c>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    1498:	82 e0       	ldi	r24, 0x02	; 2
    149a:	89 83       	std	Y+1, r24	; 0x01
    149c:	6f c0       	rjmp	.+222    	; 0x157c <GPIO_togglePin+0x10a>
	}
	else {
		switch(port_num) {
    149e:	8a 81       	ldd	r24, Y+2	; 0x02
    14a0:	28 2f       	mov	r18, r24
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	3d 83       	std	Y+5, r19	; 0x05
    14a6:	2c 83       	std	Y+4, r18	; 0x04
    14a8:	8c 81       	ldd	r24, Y+4	; 0x04
    14aa:	9d 81       	ldd	r25, Y+5	; 0x05
    14ac:	81 30       	cpi	r24, 0x01	; 1
    14ae:	91 05       	cpc	r25, r1
    14b0:	49 f1       	breq	.+82     	; 0x1504 <GPIO_togglePin+0x92>
    14b2:	2c 81       	ldd	r18, Y+4	; 0x04
    14b4:	3d 81       	ldd	r19, Y+5	; 0x05
    14b6:	22 30       	cpi	r18, 0x02	; 2
    14b8:	31 05       	cpc	r19, r1
    14ba:	2c f4       	brge	.+10     	; 0x14c6 <GPIO_togglePin+0x54>
    14bc:	8c 81       	ldd	r24, Y+4	; 0x04
    14be:	9d 81       	ldd	r25, Y+5	; 0x05
    14c0:	00 97       	sbiw	r24, 0x00	; 0
    14c2:	61 f0       	breq	.+24     	; 0x14dc <GPIO_togglePin+0x6a>
    14c4:	5a c0       	rjmp	.+180    	; 0x157a <GPIO_togglePin+0x108>
    14c6:	2c 81       	ldd	r18, Y+4	; 0x04
    14c8:	3d 81       	ldd	r19, Y+5	; 0x05
    14ca:	22 30       	cpi	r18, 0x02	; 2
    14cc:	31 05       	cpc	r19, r1
    14ce:	71 f1       	breq	.+92     	; 0x152c <GPIO_togglePin+0xba>
    14d0:	8c 81       	ldd	r24, Y+4	; 0x04
    14d2:	9d 81       	ldd	r25, Y+5	; 0x05
    14d4:	83 30       	cpi	r24, 0x03	; 3
    14d6:	91 05       	cpc	r25, r1
    14d8:	e9 f1       	breq	.+122    	; 0x1554 <GPIO_togglePin+0xe2>
    14da:	4f c0       	rjmp	.+158    	; 0x157a <GPIO_togglePin+0x108>
		case PORT_A:
			TOG_BIT(PORTA,pin_num);
    14dc:	ab e3       	ldi	r26, 0x3B	; 59
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	eb e3       	ldi	r30, 0x3B	; 59
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	48 2f       	mov	r20, r24
    14e8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ea:	28 2f       	mov	r18, r24
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	81 e0       	ldi	r24, 0x01	; 1
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	02 2e       	mov	r0, r18
    14f4:	02 c0       	rjmp	.+4      	; 0x14fa <GPIO_togglePin+0x88>
    14f6:	88 0f       	add	r24, r24
    14f8:	99 1f       	adc	r25, r25
    14fa:	0a 94       	dec	r0
    14fc:	e2 f7       	brpl	.-8      	; 0x14f6 <GPIO_togglePin+0x84>
    14fe:	84 27       	eor	r24, r20
    1500:	8c 93       	st	X, r24
    1502:	3b c0       	rjmp	.+118    	; 0x157a <GPIO_togglePin+0x108>
			break;
		case PORT_B:
			TOG_BIT(PORTB,pin_num);
    1504:	a8 e3       	ldi	r26, 0x38	; 56
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	e8 e3       	ldi	r30, 0x38	; 56
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	48 2f       	mov	r20, r24
    1510:	8b 81       	ldd	r24, Y+3	; 0x03
    1512:	28 2f       	mov	r18, r24
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	02 2e       	mov	r0, r18
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <GPIO_togglePin+0xb0>
    151e:	88 0f       	add	r24, r24
    1520:	99 1f       	adc	r25, r25
    1522:	0a 94       	dec	r0
    1524:	e2 f7       	brpl	.-8      	; 0x151e <GPIO_togglePin+0xac>
    1526:	84 27       	eor	r24, r20
    1528:	8c 93       	st	X, r24
    152a:	27 c0       	rjmp	.+78     	; 0x157a <GPIO_togglePin+0x108>
			break;
		case PORT_C:
			TOG_BIT(PORTC,pin_num);
    152c:	a5 e3       	ldi	r26, 0x35	; 53
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	e5 e3       	ldi	r30, 0x35	; 53
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	48 2f       	mov	r20, r24
    1538:	8b 81       	ldd	r24, Y+3	; 0x03
    153a:	28 2f       	mov	r18, r24
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	02 2e       	mov	r0, r18
    1544:	02 c0       	rjmp	.+4      	; 0x154a <GPIO_togglePin+0xd8>
    1546:	88 0f       	add	r24, r24
    1548:	99 1f       	adc	r25, r25
    154a:	0a 94       	dec	r0
    154c:	e2 f7       	brpl	.-8      	; 0x1546 <GPIO_togglePin+0xd4>
    154e:	84 27       	eor	r24, r20
    1550:	8c 93       	st	X, r24
    1552:	13 c0       	rjmp	.+38     	; 0x157a <GPIO_togglePin+0x108>
			break;
		case PORT_D:
			TOG_BIT(PORTD,pin_num);
    1554:	a2 e3       	ldi	r26, 0x32	; 50
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	e2 e3       	ldi	r30, 0x32	; 50
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	48 2f       	mov	r20, r24
    1560:	8b 81       	ldd	r24, Y+3	; 0x03
    1562:	28 2f       	mov	r18, r24
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	02 2e       	mov	r0, r18
    156c:	02 c0       	rjmp	.+4      	; 0x1572 <GPIO_togglePin+0x100>
    156e:	88 0f       	add	r24, r24
    1570:	99 1f       	adc	r25, r25
    1572:	0a 94       	dec	r0
    1574:	e2 f7       	brpl	.-8      	; 0x156e <GPIO_togglePin+0xfc>
    1576:	84 27       	eor	r24, r20
    1578:	8c 93       	st	X, r24
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    157a:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    157c:	89 81       	ldd	r24, Y+1	; 0x01
}
    157e:	0f 90       	pop	r0
    1580:	0f 90       	pop	r0
    1582:	0f 90       	pop	r0
    1584:	0f 90       	pop	r0
    1586:	0f 90       	pop	r0
    1588:	cf 91       	pop	r28
    158a:	df 91       	pop	r29
    158c:	08 95       	ret

0000158e <GPIO_readPin>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return an error.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num) {
    158e:	df 93       	push	r29
    1590:	cf 93       	push	r28
    1592:	cd b7       	in	r28, 0x3d	; 61
    1594:	de b7       	in	r29, 0x3e	; 62
    1596:	27 97       	sbiw	r28, 0x07	; 7
    1598:	0f b6       	in	r0, 0x3f	; 63
    159a:	f8 94       	cli
    159c:	de bf       	out	0x3e, r29	; 62
    159e:	0f be       	out	0x3f, r0	; 63
    15a0:	cd bf       	out	0x3d, r28	; 61
    15a2:	8b 83       	std	Y+3, r24	; 0x03
    15a4:	6c 83       	std	Y+4, r22	; 0x04
	uint8 pin_value = LOGIC_LOW;
    15a6:	1a 82       	std	Y+2, r1	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t GPIO_Driver_Checker = NULL;
    15a8:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    15aa:	8c 81       	ldd	r24, Y+4	; 0x04
    15ac:	88 30       	cpi	r24, 0x08	; 8
    15ae:	28 f0       	brcs	.+10     	; 0x15ba <GPIO_readPin+0x2c>
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	89 83       	std	Y+1, r24	; 0x01
		return GPIO_Driver_Checker;
    15b4:	29 81       	ldd	r18, Y+1	; 0x01
    15b6:	2f 83       	std	Y+7, r18	; 0x07
    15b8:	8b c0       	rjmp	.+278    	; 0x16d0 <GPIO_readPin+0x142>
	}
	else if((port_num >= NUM_OF_PORTS)) {
    15ba:	8b 81       	ldd	r24, Y+3	; 0x03
    15bc:	84 30       	cpi	r24, 0x04	; 4
    15be:	28 f0       	brcs	.+10     	; 0x15ca <GPIO_readPin+0x3c>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    15c0:	82 e0       	ldi	r24, 0x02	; 2
    15c2:	89 83       	std	Y+1, r24	; 0x01
		return GPIO_Driver_Checker;
    15c4:	39 81       	ldd	r19, Y+1	; 0x01
    15c6:	3f 83       	std	Y+7, r19	; 0x07
    15c8:	83 c0       	rjmp	.+262    	; 0x16d0 <GPIO_readPin+0x142>
	}
	else {
		/* Read the pin value as required */
		switch(port_num) {
    15ca:	8b 81       	ldd	r24, Y+3	; 0x03
    15cc:	48 2f       	mov	r20, r24
    15ce:	50 e0       	ldi	r21, 0x00	; 0
    15d0:	5e 83       	std	Y+6, r21	; 0x06
    15d2:	4d 83       	std	Y+5, r20	; 0x05
    15d4:	8d 81       	ldd	r24, Y+5	; 0x05
    15d6:	9e 81       	ldd	r25, Y+6	; 0x06
    15d8:	81 30       	cpi	r24, 0x01	; 1
    15da:	91 05       	cpc	r25, r1
    15dc:	79 f1       	breq	.+94     	; 0x163c <GPIO_readPin+0xae>
    15de:	2d 81       	ldd	r18, Y+5	; 0x05
    15e0:	3e 81       	ldd	r19, Y+6	; 0x06
    15e2:	22 30       	cpi	r18, 0x02	; 2
    15e4:	31 05       	cpc	r19, r1
    15e6:	34 f4       	brge	.+12     	; 0x15f4 <GPIO_readPin+0x66>
    15e8:	4d 81       	ldd	r20, Y+5	; 0x05
    15ea:	5e 81       	ldd	r21, Y+6	; 0x06
    15ec:	41 15       	cp	r20, r1
    15ee:	51 05       	cpc	r21, r1
    15f0:	69 f0       	breq	.+26     	; 0x160c <GPIO_readPin+0x7e>
    15f2:	6b c0       	rjmp	.+214    	; 0x16ca <GPIO_readPin+0x13c>
    15f4:	8d 81       	ldd	r24, Y+5	; 0x05
    15f6:	9e 81       	ldd	r25, Y+6	; 0x06
    15f8:	82 30       	cpi	r24, 0x02	; 2
    15fa:	91 05       	cpc	r25, r1
    15fc:	b9 f1       	breq	.+110    	; 0x166c <GPIO_readPin+0xde>
    15fe:	2d 81       	ldd	r18, Y+5	; 0x05
    1600:	3e 81       	ldd	r19, Y+6	; 0x06
    1602:	23 30       	cpi	r18, 0x03	; 3
    1604:	31 05       	cpc	r19, r1
    1606:	09 f4       	brne	.+2      	; 0x160a <GPIO_readPin+0x7c>
    1608:	49 c0       	rjmp	.+146    	; 0x169c <GPIO_readPin+0x10e>
    160a:	5f c0       	rjmp	.+190    	; 0x16ca <GPIO_readPin+0x13c>
		case PORT_A:
			// Checks if the bit equals '1' or not
			if(BIT_IS_SET(PINA,pin_num)) {
    160c:	e9 e3       	ldi	r30, 0x39	; 57
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	28 2f       	mov	r18, r24
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	8c 81       	ldd	r24, Y+4	; 0x04
    1618:	88 2f       	mov	r24, r24
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	a9 01       	movw	r20, r18
    161e:	02 c0       	rjmp	.+4      	; 0x1624 <GPIO_readPin+0x96>
    1620:	55 95       	asr	r21
    1622:	47 95       	ror	r20
    1624:	8a 95       	dec	r24
    1626:	e2 f7       	brpl	.-8      	; 0x1620 <GPIO_readPin+0x92>
    1628:	ca 01       	movw	r24, r20
    162a:	81 70       	andi	r24, 0x01	; 1
    162c:	90 70       	andi	r25, 0x00	; 0
    162e:	88 23       	and	r24, r24
    1630:	19 f0       	breq	.+6      	; 0x1638 <GPIO_readPin+0xaa>
				pin_value = LOGIC_HIGH;
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	8a 83       	std	Y+2, r24	; 0x02
    1636:	49 c0       	rjmp	.+146    	; 0x16ca <GPIO_readPin+0x13c>
			}
			else {
				pin_value = LOGIC_LOW;
    1638:	1a 82       	std	Y+2, r1	; 0x02
    163a:	47 c0       	rjmp	.+142    	; 0x16ca <GPIO_readPin+0x13c>
			}
			break;
		case PORT_B:
			if(BIT_IS_SET(PINB,pin_num)) {
    163c:	e6 e3       	ldi	r30, 0x36	; 54
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	80 81       	ld	r24, Z
    1642:	28 2f       	mov	r18, r24
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	8c 81       	ldd	r24, Y+4	; 0x04
    1648:	88 2f       	mov	r24, r24
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	a9 01       	movw	r20, r18
    164e:	02 c0       	rjmp	.+4      	; 0x1654 <GPIO_readPin+0xc6>
    1650:	55 95       	asr	r21
    1652:	47 95       	ror	r20
    1654:	8a 95       	dec	r24
    1656:	e2 f7       	brpl	.-8      	; 0x1650 <GPIO_readPin+0xc2>
    1658:	ca 01       	movw	r24, r20
    165a:	81 70       	andi	r24, 0x01	; 1
    165c:	90 70       	andi	r25, 0x00	; 0
    165e:	88 23       	and	r24, r24
    1660:	19 f0       	breq	.+6      	; 0x1668 <GPIO_readPin+0xda>
				pin_value = LOGIC_HIGH;
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	8a 83       	std	Y+2, r24	; 0x02
    1666:	31 c0       	rjmp	.+98     	; 0x16ca <GPIO_readPin+0x13c>
			}
			else {
				pin_value = LOGIC_LOW;
    1668:	1a 82       	std	Y+2, r1	; 0x02
    166a:	2f c0       	rjmp	.+94     	; 0x16ca <GPIO_readPin+0x13c>
			}
			break;
		case PORT_C:
			if(BIT_IS_SET(PINC,pin_num)) {
    166c:	e3 e3       	ldi	r30, 0x33	; 51
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	80 81       	ld	r24, Z
    1672:	28 2f       	mov	r18, r24
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	8c 81       	ldd	r24, Y+4	; 0x04
    1678:	88 2f       	mov	r24, r24
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	a9 01       	movw	r20, r18
    167e:	02 c0       	rjmp	.+4      	; 0x1684 <GPIO_readPin+0xf6>
    1680:	55 95       	asr	r21
    1682:	47 95       	ror	r20
    1684:	8a 95       	dec	r24
    1686:	e2 f7       	brpl	.-8      	; 0x1680 <GPIO_readPin+0xf2>
    1688:	ca 01       	movw	r24, r20
    168a:	81 70       	andi	r24, 0x01	; 1
    168c:	90 70       	andi	r25, 0x00	; 0
    168e:	88 23       	and	r24, r24
    1690:	19 f0       	breq	.+6      	; 0x1698 <GPIO_readPin+0x10a>
				pin_value = LOGIC_HIGH;
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	8a 83       	std	Y+2, r24	; 0x02
    1696:	19 c0       	rjmp	.+50     	; 0x16ca <GPIO_readPin+0x13c>
			}
			else {
				pin_value = LOGIC_LOW;
    1698:	1a 82       	std	Y+2, r1	; 0x02
    169a:	17 c0       	rjmp	.+46     	; 0x16ca <GPIO_readPin+0x13c>
			}
			break;
		case PORT_D:
			if(BIT_IS_SET(PIND,pin_num)) {
    169c:	e0 e3       	ldi	r30, 0x30	; 48
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	28 2f       	mov	r18, r24
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	8c 81       	ldd	r24, Y+4	; 0x04
    16a8:	88 2f       	mov	r24, r24
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	a9 01       	movw	r20, r18
    16ae:	02 c0       	rjmp	.+4      	; 0x16b4 <GPIO_readPin+0x126>
    16b0:	55 95       	asr	r21
    16b2:	47 95       	ror	r20
    16b4:	8a 95       	dec	r24
    16b6:	e2 f7       	brpl	.-8      	; 0x16b0 <GPIO_readPin+0x122>
    16b8:	ca 01       	movw	r24, r20
    16ba:	81 70       	andi	r24, 0x01	; 1
    16bc:	90 70       	andi	r25, 0x00	; 0
    16be:	88 23       	and	r24, r24
    16c0:	19 f0       	breq	.+6      	; 0x16c8 <GPIO_readPin+0x13a>
				pin_value = LOGIC_HIGH;
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	8a 83       	std	Y+2, r24	; 0x02
    16c6:	01 c0       	rjmp	.+2      	; 0x16ca <GPIO_readPin+0x13c>
			}
			else {
				pin_value = LOGIC_LOW;
    16c8:	1a 82       	std	Y+2, r1	; 0x02
			}
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    16ca:	19 82       	std	Y+1, r1	; 0x01
	}
	return pin_value;
    16cc:	5a 81       	ldd	r21, Y+2	; 0x02
    16ce:	5f 83       	std	Y+7, r21	; 0x07
    16d0:	8f 81       	ldd	r24, Y+7	; 0x07
}
    16d2:	27 96       	adiw	r28, 0x07	; 7
    16d4:	0f b6       	in	r0, 0x3f	; 63
    16d6:	f8 94       	cli
    16d8:	de bf       	out	0x3e, r29	; 62
    16da:	0f be       	out	0x3f, r0	; 63
    16dc:	cd bf       	out	0x3d, r28	; 61
    16de:	cf 91       	pop	r28
    16e0:	df 91       	pop	r29
    16e2:	08 95       	ret

000016e4 <GPIO_setupPortDirection>:
 * Setup the direction of the required port all pins input/output.
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
GPIO_Error_t GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction) {
    16e4:	df 93       	push	r29
    16e6:	cf 93       	push	r28
    16e8:	00 d0       	rcall	.+0      	; 0x16ea <GPIO_setupPortDirection+0x6>
    16ea:	00 d0       	rcall	.+0      	; 0x16ec <GPIO_setupPortDirection+0x8>
    16ec:	0f 92       	push	r0
    16ee:	cd b7       	in	r28, 0x3d	; 61
    16f0:	de b7       	in	r29, 0x3e	; 62
    16f2:	8a 83       	std	Y+2, r24	; 0x02
    16f4:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	uint8_t GPIO_Driver_Checker = NULL;
    16f6:	19 82       	std	Y+1, r1	; 0x01

	if((port_num >= NUM_OF_PORTS)) {
    16f8:	8a 81       	ldd	r24, Y+2	; 0x02
    16fa:	84 30       	cpi	r24, 0x04	; 4
    16fc:	18 f0       	brcs	.+6      	; 0x1704 <GPIO_setupPortDirection+0x20>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    16fe:	82 e0       	ldi	r24, 0x02	; 2
    1700:	89 83       	std	Y+1, r24	; 0x01
    1702:	3c c0       	rjmp	.+120    	; 0x177c <GPIO_setupPortDirection+0x98>
	}
	else if((direction != PORT_INPUT) && (direction != PORT_OUTPUT)) {
    1704:	8b 81       	ldd	r24, Y+3	; 0x03
    1706:	88 23       	and	r24, r24
    1708:	31 f0       	breq	.+12     	; 0x1716 <GPIO_setupPortDirection+0x32>
    170a:	8b 81       	ldd	r24, Y+3	; 0x03
    170c:	8f 3f       	cpi	r24, 0xFF	; 255
    170e:	19 f0       	breq	.+6      	; 0x1716 <GPIO_setupPortDirection+0x32>
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
    1710:	83 e0       	ldi	r24, 0x03	; 3
    1712:	89 83       	std	Y+1, r24	; 0x01
    1714:	33 c0       	rjmp	.+102    	; 0x177c <GPIO_setupPortDirection+0x98>
	}
	else {
		/* Setup the port direction as required */
		switch(port_num) {
    1716:	8a 81       	ldd	r24, Y+2	; 0x02
    1718:	28 2f       	mov	r18, r24
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	3d 83       	std	Y+5, r19	; 0x05
    171e:	2c 83       	std	Y+4, r18	; 0x04
    1720:	8c 81       	ldd	r24, Y+4	; 0x04
    1722:	9d 81       	ldd	r25, Y+5	; 0x05
    1724:	81 30       	cpi	r24, 0x01	; 1
    1726:	91 05       	cpc	r25, r1
    1728:	d1 f0       	breq	.+52     	; 0x175e <GPIO_setupPortDirection+0x7a>
    172a:	2c 81       	ldd	r18, Y+4	; 0x04
    172c:	3d 81       	ldd	r19, Y+5	; 0x05
    172e:	22 30       	cpi	r18, 0x02	; 2
    1730:	31 05       	cpc	r19, r1
    1732:	2c f4       	brge	.+10     	; 0x173e <GPIO_setupPortDirection+0x5a>
    1734:	8c 81       	ldd	r24, Y+4	; 0x04
    1736:	9d 81       	ldd	r25, Y+5	; 0x05
    1738:	00 97       	sbiw	r24, 0x00	; 0
    173a:	61 f0       	breq	.+24     	; 0x1754 <GPIO_setupPortDirection+0x70>
    173c:	1e c0       	rjmp	.+60     	; 0x177a <GPIO_setupPortDirection+0x96>
    173e:	2c 81       	ldd	r18, Y+4	; 0x04
    1740:	3d 81       	ldd	r19, Y+5	; 0x05
    1742:	22 30       	cpi	r18, 0x02	; 2
    1744:	31 05       	cpc	r19, r1
    1746:	81 f0       	breq	.+32     	; 0x1768 <GPIO_setupPortDirection+0x84>
    1748:	8c 81       	ldd	r24, Y+4	; 0x04
    174a:	9d 81       	ldd	r25, Y+5	; 0x05
    174c:	83 30       	cpi	r24, 0x03	; 3
    174e:	91 05       	cpc	r25, r1
    1750:	81 f0       	breq	.+32     	; 0x1772 <GPIO_setupPortDirection+0x8e>
    1752:	13 c0       	rjmp	.+38     	; 0x177a <GPIO_setupPortDirection+0x96>
		case PORT_A:
			DDRA = direction;
    1754:	ea e3       	ldi	r30, 0x3A	; 58
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	8b 81       	ldd	r24, Y+3	; 0x03
    175a:	80 83       	st	Z, r24
    175c:	0e c0       	rjmp	.+28     	; 0x177a <GPIO_setupPortDirection+0x96>
			break;
		case PORT_B:
			DDRB = direction;
    175e:	e7 e3       	ldi	r30, 0x37	; 55
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	8b 81       	ldd	r24, Y+3	; 0x03
    1764:	80 83       	st	Z, r24
    1766:	09 c0       	rjmp	.+18     	; 0x177a <GPIO_setupPortDirection+0x96>
			break;
		case PORT_C:
			DDRC = direction;
    1768:	e4 e3       	ldi	r30, 0x34	; 52
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	8b 81       	ldd	r24, Y+3	; 0x03
    176e:	80 83       	st	Z, r24
    1770:	04 c0       	rjmp	.+8      	; 0x177a <GPIO_setupPortDirection+0x96>
			break;
		case PORT_D:
			DDRD = direction;
    1772:	e1 e3       	ldi	r30, 0x31	; 49
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	8b 81       	ldd	r24, Y+3	; 0x03
    1778:	80 83       	st	Z, r24
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    177a:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    177c:	89 81       	ldd	r24, Y+1	; 0x01
}
    177e:	0f 90       	pop	r0
    1780:	0f 90       	pop	r0
    1782:	0f 90       	pop	r0
    1784:	0f 90       	pop	r0
    1786:	0f 90       	pop	r0
    1788:	cf 91       	pop	r28
    178a:	df 91       	pop	r29
    178c:	08 95       	ret

0000178e <GPIO_writePort>:
 * Write the value on the required port.
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
GPIO_Error_t GPIO_writePort(uint8 port_num, uint8 value) {
    178e:	df 93       	push	r29
    1790:	cf 93       	push	r28
    1792:	00 d0       	rcall	.+0      	; 0x1794 <GPIO_writePort+0x6>
    1794:	00 d0       	rcall	.+0      	; 0x1796 <GPIO_writePort+0x8>
    1796:	0f 92       	push	r0
    1798:	cd b7       	in	r28, 0x3d	; 61
    179a:	de b7       	in	r29, 0x3e	; 62
    179c:	8a 83       	std	Y+2, r24	; 0x02
    179e:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t GPIO_Driver_Checker = NULL;
    17a0:	19 82       	std	Y+1, r1	; 0x01
	if((port_num >= NUM_OF_PORTS)) {
    17a2:	8a 81       	ldd	r24, Y+2	; 0x02
    17a4:	84 30       	cpi	r24, 0x04	; 4
    17a6:	18 f0       	brcs	.+6      	; 0x17ae <GPIO_writePort+0x20>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    17a8:	82 e0       	ldi	r24, 0x02	; 2
    17aa:	89 83       	std	Y+1, r24	; 0x01
    17ac:	33 c0       	rjmp	.+102    	; 0x1814 <GPIO_writePort+0x86>
	}
	else {
		/* Setup the port direction as required */
		switch(port_num) {
    17ae:	8a 81       	ldd	r24, Y+2	; 0x02
    17b0:	28 2f       	mov	r18, r24
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	3d 83       	std	Y+5, r19	; 0x05
    17b6:	2c 83       	std	Y+4, r18	; 0x04
    17b8:	8c 81       	ldd	r24, Y+4	; 0x04
    17ba:	9d 81       	ldd	r25, Y+5	; 0x05
    17bc:	81 30       	cpi	r24, 0x01	; 1
    17be:	91 05       	cpc	r25, r1
    17c0:	d1 f0       	breq	.+52     	; 0x17f6 <GPIO_writePort+0x68>
    17c2:	2c 81       	ldd	r18, Y+4	; 0x04
    17c4:	3d 81       	ldd	r19, Y+5	; 0x05
    17c6:	22 30       	cpi	r18, 0x02	; 2
    17c8:	31 05       	cpc	r19, r1
    17ca:	2c f4       	brge	.+10     	; 0x17d6 <GPIO_writePort+0x48>
    17cc:	8c 81       	ldd	r24, Y+4	; 0x04
    17ce:	9d 81       	ldd	r25, Y+5	; 0x05
    17d0:	00 97       	sbiw	r24, 0x00	; 0
    17d2:	61 f0       	breq	.+24     	; 0x17ec <GPIO_writePort+0x5e>
    17d4:	1e c0       	rjmp	.+60     	; 0x1812 <GPIO_writePort+0x84>
    17d6:	2c 81       	ldd	r18, Y+4	; 0x04
    17d8:	3d 81       	ldd	r19, Y+5	; 0x05
    17da:	22 30       	cpi	r18, 0x02	; 2
    17dc:	31 05       	cpc	r19, r1
    17de:	81 f0       	breq	.+32     	; 0x1800 <GPIO_writePort+0x72>
    17e0:	8c 81       	ldd	r24, Y+4	; 0x04
    17e2:	9d 81       	ldd	r25, Y+5	; 0x05
    17e4:	83 30       	cpi	r24, 0x03	; 3
    17e6:	91 05       	cpc	r25, r1
    17e8:	81 f0       	breq	.+32     	; 0x180a <GPIO_writePort+0x7c>
    17ea:	13 c0       	rjmp	.+38     	; 0x1812 <GPIO_writePort+0x84>
		case PORT_A:
			PORTA = value;
    17ec:	eb e3       	ldi	r30, 0x3B	; 59
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	8b 81       	ldd	r24, Y+3	; 0x03
    17f2:	80 83       	st	Z, r24
    17f4:	0e c0       	rjmp	.+28     	; 0x1812 <GPIO_writePort+0x84>
			break;
		case PORT_B:
			PORTB = value;
    17f6:	e8 e3       	ldi	r30, 0x38	; 56
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	8b 81       	ldd	r24, Y+3	; 0x03
    17fc:	80 83       	st	Z, r24
    17fe:	09 c0       	rjmp	.+18     	; 0x1812 <GPIO_writePort+0x84>
			break;
		case PORT_C:
			PORTC = value;
    1800:	e5 e3       	ldi	r30, 0x35	; 53
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	8b 81       	ldd	r24, Y+3	; 0x03
    1806:	80 83       	st	Z, r24
    1808:	04 c0       	rjmp	.+8      	; 0x1812 <GPIO_writePort+0x84>
			break;
		case PORT_D:
			PORTD = value;
    180a:	e2 e3       	ldi	r30, 0x32	; 50
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	8b 81       	ldd	r24, Y+3	; 0x03
    1810:	80 83       	st	Z, r24
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    1812:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    1814:	89 81       	ldd	r24, Y+1	; 0x01
}
    1816:	0f 90       	pop	r0
    1818:	0f 90       	pop	r0
    181a:	0f 90       	pop	r0
    181c:	0f 90       	pop	r0
    181e:	0f 90       	pop	r0
    1820:	cf 91       	pop	r28
    1822:	df 91       	pop	r29
    1824:	08 95       	ret

00001826 <GPIO_readPort>:
/*
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num) {
    1826:	df 93       	push	r29
    1828:	cf 93       	push	r28
    182a:	00 d0       	rcall	.+0      	; 0x182c <GPIO_readPort+0x6>
    182c:	00 d0       	rcall	.+0      	; 0x182e <GPIO_readPort+0x8>
    182e:	0f 92       	push	r0
    1830:	cd b7       	in	r28, 0x3d	; 61
    1832:	de b7       	in	r29, 0x3e	; 62
    1834:	8b 83       	std	Y+3, r24	; 0x03
	uint8 value = LOGIC_LOW;
    1836:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t GPIO_Driver_Checker = NULL;
    1838:	19 82       	std	Y+1, r1	; 0x01

	if((port_num >= NUM_OF_PORTS)) {
    183a:	8b 81       	ldd	r24, Y+3	; 0x03
    183c:	84 30       	cpi	r24, 0x04	; 4
    183e:	18 f0       	brcs	.+6      	; 0x1846 <GPIO_readPort+0x20>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    1840:	82 e0       	ldi	r24, 0x02	; 2
    1842:	89 83       	std	Y+1, r24	; 0x01
    1844:	32 c0       	rjmp	.+100    	; 0x18aa <GPIO_readPort+0x84>
	}
	else {
		switch(port_num) {
    1846:	8b 81       	ldd	r24, Y+3	; 0x03
    1848:	28 2f       	mov	r18, r24
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	3d 83       	std	Y+5, r19	; 0x05
    184e:	2c 83       	std	Y+4, r18	; 0x04
    1850:	8c 81       	ldd	r24, Y+4	; 0x04
    1852:	9d 81       	ldd	r25, Y+5	; 0x05
    1854:	81 30       	cpi	r24, 0x01	; 1
    1856:	91 05       	cpc	r25, r1
    1858:	d1 f0       	breq	.+52     	; 0x188e <GPIO_readPort+0x68>
    185a:	2c 81       	ldd	r18, Y+4	; 0x04
    185c:	3d 81       	ldd	r19, Y+5	; 0x05
    185e:	22 30       	cpi	r18, 0x02	; 2
    1860:	31 05       	cpc	r19, r1
    1862:	2c f4       	brge	.+10     	; 0x186e <GPIO_readPort+0x48>
    1864:	8c 81       	ldd	r24, Y+4	; 0x04
    1866:	9d 81       	ldd	r25, Y+5	; 0x05
    1868:	00 97       	sbiw	r24, 0x00	; 0
    186a:	61 f0       	breq	.+24     	; 0x1884 <GPIO_readPort+0x5e>
    186c:	1e c0       	rjmp	.+60     	; 0x18aa <GPIO_readPort+0x84>
    186e:	2c 81       	ldd	r18, Y+4	; 0x04
    1870:	3d 81       	ldd	r19, Y+5	; 0x05
    1872:	22 30       	cpi	r18, 0x02	; 2
    1874:	31 05       	cpc	r19, r1
    1876:	81 f0       	breq	.+32     	; 0x1898 <GPIO_readPort+0x72>
    1878:	8c 81       	ldd	r24, Y+4	; 0x04
    187a:	9d 81       	ldd	r25, Y+5	; 0x05
    187c:	83 30       	cpi	r24, 0x03	; 3
    187e:	91 05       	cpc	r25, r1
    1880:	81 f0       	breq	.+32     	; 0x18a2 <GPIO_readPort+0x7c>
    1882:	13 c0       	rjmp	.+38     	; 0x18aa <GPIO_readPort+0x84>
		case PORT_A:
			// Why value equals PINA?
			value = PINA;
    1884:	e9 e3       	ldi	r30, 0x39	; 57
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	80 81       	ld	r24, Z
    188a:	8a 83       	std	Y+2, r24	; 0x02
    188c:	0e c0       	rjmp	.+28     	; 0x18aa <GPIO_readPort+0x84>
			break;
		case PORT_B:
			value = PINB;
    188e:	e6 e3       	ldi	r30, 0x36	; 54
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	80 81       	ld	r24, Z
    1894:	8a 83       	std	Y+2, r24	; 0x02
    1896:	09 c0       	rjmp	.+18     	; 0x18aa <GPIO_readPort+0x84>
			break;
		case PORT_C:
			value = PINC;
    1898:	e3 e3       	ldi	r30, 0x33	; 51
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	8a 83       	std	Y+2, r24	; 0x02
    18a0:	04 c0       	rjmp	.+8      	; 0x18aa <GPIO_readPort+0x84>
			break;
		case PORT_D:
			value = PIND;
    18a2:	e0 e3       	ldi	r30, 0x30	; 48
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	80 81       	ld	r24, Z
    18a8:	8a 83       	std	Y+2, r24	; 0x02
			break;
		}
	}
	return value;
    18aa:	8a 81       	ldd	r24, Y+2	; 0x02
}
    18ac:	0f 90       	pop	r0
    18ae:	0f 90       	pop	r0
    18b0:	0f 90       	pop	r0
    18b2:	0f 90       	pop	r0
    18b4:	0f 90       	pop	r0
    18b6:	cf 91       	pop	r28
    18b8:	df 91       	pop	r29
    18ba:	08 95       	ret

000018bc <EXT_INTERRUPT_Init>:

#include "avr/io.h" /* To use the IO Ports Registers */
#include <util/delay.h>

// Initialize External Interrupt
void EXT_INTERRUPT_Init(void) {
    18bc:	df 93       	push	r29
    18be:	cf 93       	push	r28
    18c0:	cd b7       	in	r28, 0x3d	; 61
    18c2:	de b7       	in	r29, 0x3e	; 62
	 */

	// Checking if INT0 is enabled or disabled
	#if (EXT_INTERRUPT_INT0_INIT_STATE == EXT_INTERRUPT_Enable_State)
		// Enabling the INT0 bit inside GICR
		SET_BIT(GICR, INT0);
    18c4:	ab e5       	ldi	r26, 0x5B	; 91
    18c6:	b0 e0       	ldi	r27, 0x00	; 0
    18c8:	eb e5       	ldi	r30, 0x5B	; 91
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	80 81       	ld	r24, Z
    18ce:	80 64       	ori	r24, 0x40	; 64
    18d0:	8c 93       	st	X, r24

		// Setup Pin PD2 "INT0" to Input
		GPIO_setupPinDirection(PORT_D, PIN_2, PIN_INPUT);
    18d2:	83 e0       	ldi	r24, 0x03	; 3
    18d4:	62 e0       	ldi	r22, 0x02	; 2
    18d6:	40 e0       	ldi	r20, 0x00	; 0
    18d8:	0e 94 41 08 	call	0x1082	; 0x1082 <GPIO_setupPinDirection>
			SET_BIT(MCUCR, ISC00);
		#elif (EXT_INTERRUPT_0_MODE == EXT_INTERRUPT_Falling_Edge)
			SET_BIT(MCUCR, ISC01);
			CLR_BIT(MCUCR, ISC00);
		#elif (EXT_INTERRUPT_0_MODE == EXT_INTERRUPT_Rising_Edge)
			SET_BIT(MCUCR, ISC01);
    18dc:	a5 e5       	ldi	r26, 0x55	; 85
    18de:	b0 e0       	ldi	r27, 0x00	; 0
    18e0:	e5 e5       	ldi	r30, 0x55	; 85
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	80 81       	ld	r24, Z
    18e6:	82 60       	ori	r24, 0x02	; 2
    18e8:	8c 93       	st	X, r24
			SET_BIT(MCUCR, ISC00);
    18ea:	a5 e5       	ldi	r26, 0x55	; 85
    18ec:	b0 e0       	ldi	r27, 0x00	; 0
    18ee:	e5 e5       	ldi	r30, 0x55	; 85
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 81       	ld	r24, Z
    18f4:	81 60       	ori	r24, 0x01	; 1
    18f6:	8c 93       	st	X, r24
		#elif (EXT_INTERRUPT_1_MODE == EXT_INTERRUPT_Rising_Edge)
			SET_BIT(MCUCR, ISC11);
			SET_BIT(MCUCR, ISC10);
		#endif
	#elif (EXT_INTERRUPT_INT1_INIT_STATE == EXT_INTERRUPT_Disable_State)
			CLR_BIT(GICR, INT1);
    18f8:	ab e5       	ldi	r26, 0x5B	; 91
    18fa:	b0 e0       	ldi	r27, 0x00	; 0
    18fc:	eb e5       	ldi	r30, 0x5B	; 91
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	80 81       	ld	r24, Z
    1902:	8f 77       	andi	r24, 0x7F	; 127
    1904:	8c 93       	st	X, r24
			CLR_BIT(MCUCSR, ISC2);
		#elif (EXT_INTERRUPT_2_MODE == EXT_INTERRUPT_INT2_Rising_Edge)
			SET_BIT(MCUCSR, ISC2);
		#endif
	#elif (EXT_INTERRUPT_INT2_INIT_STATE == EXT_INTERRUPT_Disable_State)
			CLR_BIT(GICR, INT2);
    1906:	ab e5       	ldi	r26, 0x5B	; 91
    1908:	b0 e0       	ldi	r27, 0x00	; 0
    190a:	eb e5       	ldi	r30, 0x5B	; 91
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	80 81       	ld	r24, Z
    1910:	8f 7d       	andi	r24, 0xDF	; 223
    1912:	8c 93       	st	X, r24

	/* Status Register – SREG Register Bits Description:
	 * Bit 7 – I: Global Interrupt Enable
	 */
	// Enabling the I-Bit
	SET_BIT(SREG, SREG_I_BIT);
    1914:	af e5       	ldi	r26, 0x5F	; 95
    1916:	b0 e0       	ldi	r27, 0x00	; 0
    1918:	ef e5       	ldi	r30, 0x5F	; 95
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	80 81       	ld	r24, Z
    191e:	80 68       	ori	r24, 0x80	; 128
    1920:	8c 93       	st	X, r24
}
    1922:	cf 91       	pop	r28
    1924:	df 91       	pop	r29
    1926:	08 95       	ret

00001928 <EXT_INTERRUPT_DeInit>:

// Disable External Interrupt ISR
void EXT_INTERRUPT_DeInit(void) {
    1928:	df 93       	push	r29
    192a:	cf 93       	push	r28
    192c:	cd b7       	in	r28, 0x3d	; 61
    192e:	de b7       	in	r29, 0x3e	; 62

	#if (EXT_INTERRUPT_INT0_INIT_STATE == EXT_INTERRUPT_Enable_State)
		CLR_BIT(GICR, INT0);
    1930:	ab e5       	ldi	r26, 0x5B	; 91
    1932:	b0 e0       	ldi	r27, 0x00	; 0
    1934:	eb e5       	ldi	r30, 0x5B	; 91
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 81       	ld	r24, Z
    193a:	8f 7b       	andi	r24, 0xBF	; 191
    193c:	8c 93       	st	X, r24

	#if (EXT_INTERRUPT_INT2_INIT_STATE == EXT_INTERRUPT_Enable_State)
		CLR_BIT(GICR, INT2);
	#endif

	CLR_BIT(SREG, SREG_I_BIT);
    193e:	af e5       	ldi	r26, 0x5F	; 95
    1940:	b0 e0       	ldi	r27, 0x00	; 0
    1942:	ef e5       	ldi	r30, 0x5F	; 95
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	80 81       	ld	r24, Z
    1948:	8f 77       	andi	r24, 0x7F	; 127
    194a:	8c 93       	st	X, r24
}
    194c:	cf 91       	pop	r28
    194e:	df 91       	pop	r29
    1950:	08 95       	ret

00001952 <EXT_INTERRUPT_SetCallBack>:

//The function that will be called in the EXT INT
void (*CallBackPtr) (void) = NULL;

// External Interrupt Call Back Function
void EXT_INTERRUPT_SetCallBack(void (*CopyFuncPtr) (void)) {
    1952:	df 93       	push	r29
    1954:	cf 93       	push	r28
    1956:	00 d0       	rcall	.+0      	; 0x1958 <EXT_INTERRUPT_SetCallBack+0x6>
    1958:	cd b7       	in	r28, 0x3d	; 61
    195a:	de b7       	in	r29, 0x3e	; 62
    195c:	9a 83       	std	Y+2, r25	; 0x02
    195e:	89 83       	std	Y+1, r24	; 0x01
	CallBackPtr = CopyFuncPtr;
    1960:	89 81       	ldd	r24, Y+1	; 0x01
    1962:	9a 81       	ldd	r25, Y+2	; 0x02
    1964:	90 93 69 01 	sts	0x0169, r25
    1968:	80 93 68 01 	sts	0x0168, r24
}
    196c:	0f 90       	pop	r0
    196e:	0f 90       	pop	r0
    1970:	cf 91       	pop	r28
    1972:	df 91       	pop	r29
    1974:	08 95       	ret

00001976 <ADC_Init>:
#include "avr/io.h" /* To use the IO Ports Registers */
#include <util/delay.h>


// Initializes and enables the ADC Module to start functionality
void ADC_Init(void) {
    1976:	df 93       	push	r29
    1978:	cf 93       	push	r28
    197a:	cd b7       	in	r28, 0x3d	; 61
    197c:	de b7       	in	r29, 0x3e	; 62
	 * 7:6, REFS1:0 = 01 to choose AVCC = 5v as reference voltage
	 * 5, ADLAR   = 0 right adjusted
	 * 4:0, MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	// Sets REFS1:0 to '01'
	SET_BIT(ADMUX, REFS0);
    197e:	a7 e2       	ldi	r26, 0x27	; 39
    1980:	b0 e0       	ldi	r27, 0x00	; 0
    1982:	e7 e2       	ldi	r30, 0x27	; 39
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	80 64       	ori	r24, 0x40	; 64
    198a:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, REFS1);
    198c:	a7 e2       	ldi	r26, 0x27	; 39
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	e7 e2       	ldi	r30, 0x27	; 39
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	8f 77       	andi	r24, 0x7F	; 127
    1998:	8c 93       	st	X, r24

	CLR_BIT(ADMUX, ADLAR);
    199a:	a7 e2       	ldi	r26, 0x27	; 39
    199c:	b0 e0       	ldi	r27, 0x00	; 0
    199e:	e7 e2       	ldi	r30, 0x27	; 39
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	80 81       	ld	r24, Z
    19a4:	8f 7d       	andi	r24, 0xDF	; 223
    19a6:	8c 93       	st	X, r24

	CLR_BIT(ADMUX, MUX4);
    19a8:	a7 e2       	ldi	r26, 0x27	; 39
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	e7 e2       	ldi	r30, 0x27	; 39
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	8f 7e       	andi	r24, 0xEF	; 239
    19b4:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, MUX3);
    19b6:	a7 e2       	ldi	r26, 0x27	; 39
    19b8:	b0 e0       	ldi	r27, 0x00	; 0
    19ba:	e7 e2       	ldi	r30, 0x27	; 39
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	87 7f       	andi	r24, 0xF7	; 247
    19c2:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, MUX2);
    19c4:	a7 e2       	ldi	r26, 0x27	; 39
    19c6:	b0 e0       	ldi	r27, 0x00	; 0
    19c8:	e7 e2       	ldi	r30, 0x27	; 39
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	80 81       	ld	r24, Z
    19ce:	8b 7f       	andi	r24, 0xFB	; 251
    19d0:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, MUX1);
    19d2:	a7 e2       	ldi	r26, 0x27	; 39
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	e7 e2       	ldi	r30, 0x27	; 39
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	8d 7f       	andi	r24, 0xFD	; 253
    19de:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, MUX0);
    19e0:	a7 e2       	ldi	r26, 0x27	; 39
    19e2:	b0 e0       	ldi	r27, 0x00	; 0
    19e4:	e7 e2       	ldi	r30, 0x27	; 39
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	80 81       	ld	r24, Z
    19ea:	8e 7f       	andi	r24, 0xFE	; 254
    19ec:	8c 93       	st	X, r24
	 * ADIE = 0 Disable ADC Interrupt
	 * ADATE = 0 Disable Auto Trigger
	 * ADPS2:0 = 111 to choose ADC_Clock = F_CPU/128 = 16Mhz/128 = 125Khz --> ADC must operate in range 50-200Khz
	 */
	// Enables ADC
	SET_BIT(ADCSRA, ADEN);
    19ee:	a6 e2       	ldi	r26, 0x26	; 38
    19f0:	b0 e0       	ldi	r27, 0x00	; 0
    19f2:	e6 e2       	ldi	r30, 0x26	; 38
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	80 81       	ld	r24, Z
    19f8:	80 68       	ori	r24, 0x80	; 128
    19fa:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA, ADIE);
    19fc:	a6 e2       	ldi	r26, 0x26	; 38
    19fe:	b0 e0       	ldi	r27, 0x00	; 0
    1a00:	e6 e2       	ldi	r30, 0x26	; 38
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	87 7f       	andi	r24, 0xF7	; 247
    1a08:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA, ADATE);
    1a0a:	a6 e2       	ldi	r26, 0x26	; 38
    1a0c:	b0 e0       	ldi	r27, 0x00	; 0
    1a0e:	e6 e2       	ldi	r30, 0x26	; 38
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	80 81       	ld	r24, Z
    1a14:	8f 7d       	andi	r24, 0xDF	; 223
    1a16:	8c 93       	st	X, r24

	// Choose Prescaler: 128
	SET_BIT(ADCSRA, ADPS2);
    1a18:	a6 e2       	ldi	r26, 0x26	; 38
    1a1a:	b0 e0       	ldi	r27, 0x00	; 0
    1a1c:	e6 e2       	ldi	r30, 0x26	; 38
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	80 81       	ld	r24, Z
    1a22:	84 60       	ori	r24, 0x04	; 4
    1a24:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADPS1);
    1a26:	a6 e2       	ldi	r26, 0x26	; 38
    1a28:	b0 e0       	ldi	r27, 0x00	; 0
    1a2a:	e6 e2       	ldi	r30, 0x26	; 38
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	82 60       	ori	r24, 0x02	; 2
    1a32:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADPS0);
    1a34:	a6 e2       	ldi	r26, 0x26	; 38
    1a36:	b0 e0       	ldi	r27, 0x00	; 0
    1a38:	e6 e2       	ldi	r30, 0x26	; 38
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	80 81       	ld	r24, Z
    1a3e:	81 60       	ori	r24, 0x01	; 1
    1a40:	8c 93       	st	X, r24

}
    1a42:	cf 91       	pop	r28
    1a44:	df 91       	pop	r29
    1a46:	08 95       	ret

00001a48 <ADC_readChannel>:


// Reads the content written to the selected channel of the ADC
uint16 ADC_readChannel(uint8 channel_num) {
    1a48:	df 93       	push	r29
    1a4a:	cf 93       	push	r28
    1a4c:	0f 92       	push	r0
    1a4e:	cd b7       	in	r28, 0x3d	; 61
    1a50:	de b7       	in	r29, 0x3e	; 62
    1a52:	89 83       	std	Y+1, r24	; 0x01

	// Insert Channel Number in ADMUX Procedure

	// Clears first 5 bits to zero
	ADMUX &= 0xE0; // 0b1110 0000
    1a54:	a7 e2       	ldi	r26, 0x27	; 39
    1a56:	b0 e0       	ldi	r27, 0x00	; 0
    1a58:	e7 e2       	ldi	r30, 0x27	; 39
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	80 81       	ld	r24, Z
    1a5e:	80 7e       	andi	r24, 0xE0	; 224
    1a60:	8c 93       	st	X, r24

	// Mask the Channel No. Input with max channel No.
	channel_num &= 0x07; // 0b0000 0111
    1a62:	89 81       	ldd	r24, Y+1	; 0x01
    1a64:	87 70       	andi	r24, 0x07	; 7
    1a66:	89 83       	std	Y+1, r24	; 0x01

	// Insert Channel no. into ADMUX Register
	ADMUX |= channel_num;
    1a68:	a7 e2       	ldi	r26, 0x27	; 39
    1a6a:	b0 e0       	ldi	r27, 0x00	; 0
    1a6c:	e7 e2       	ldi	r30, 0x27	; 39
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	90 81       	ld	r25, Z
    1a72:	89 81       	ldd	r24, Y+1	; 0x01
    1a74:	89 2b       	or	r24, r25
    1a76:	8c 93       	st	X, r24

	// Starts ADC Conversion
	SET_BIT(ADCSRA, ADSC);
    1a78:	a6 e2       	ldi	r26, 0x26	; 38
    1a7a:	b0 e0       	ldi	r27, 0x00	; 0
    1a7c:	e6 e2       	ldi	r30, 0x26	; 38
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
    1a82:	80 64       	ori	r24, 0x40	; 64
    1a84:	8c 93       	st	X, r24

	// Busy wait (Polling) untill ADIF = 1
	while ( BIT_IS_CLR(ADCSRA, ADIF) );
    1a86:	e6 e2       	ldi	r30, 0x26	; 38
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	80 81       	ld	r24, Z
    1a8c:	88 2f       	mov	r24, r24
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	80 71       	andi	r24, 0x10	; 16
    1a92:	90 70       	andi	r25, 0x00	; 0
    1a94:	00 97       	sbiw	r24, 0x00	; 0
    1a96:	b9 f3       	breq	.-18     	; 0x1a86 <ADC_readChannel+0x3e>

	// sET FLAG BY 1 TO CLEAR
	SET_BIT(ADCSRA, ADIF);
    1a98:	a6 e2       	ldi	r26, 0x26	; 38
    1a9a:	b0 e0       	ldi	r27, 0x00	; 0
    1a9c:	e6 e2       	ldi	r30, 0x26	; 38
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	80 81       	ld	r24, Z
    1aa2:	80 61       	ori	r24, 0x10	; 16
    1aa4:	8c 93       	st	X, r24

	// Read Data
	return ADC;
    1aa6:	e4 e2       	ldi	r30, 0x24	; 36
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	80 81       	ld	r24, Z
    1aac:	91 81       	ldd	r25, Z+1	; 0x01
}
    1aae:	0f 90       	pop	r0
    1ab0:	cf 91       	pop	r28
    1ab2:	df 91       	pop	r29
    1ab4:	08 95       	ret

00001ab6 <SEGMENT_Init>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
SEGMENT_Error_t SEGMENT_Init(uint8 port_num) {
    1ab6:	df 93       	push	r29
    1ab8:	cf 93       	push	r28
    1aba:	00 d0       	rcall	.+0      	; 0x1abc <SEGMENT_Init+0x6>
    1abc:	cd b7       	in	r28, 0x3d	; 61
    1abe:	de b7       	in	r29, 0x3e	; 62
    1ac0:	8a 83       	std	Y+2, r24	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t SEGMENT_Driver_Checker = NULL;
    1ac2:	19 82       	std	Y+1, r1	; 0x01

	if((port_num >= NUM_OF_PORTS)) {
    1ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac6:	84 30       	cpi	r24, 0x04	; 4
    1ac8:	18 f0       	brcs	.+6      	; 0x1ad0 <SEGMENT_Init+0x1a>
		SEGMENT_Driver_Checker = SEGMENT_WRONG_PORT_NUMBER;
    1aca:	82 e0       	ldi	r24, 0x02	; 2
    1acc:	89 83       	std	Y+1, r24	; 0x01
    1ace:	15 c0       	rjmp	.+42     	; 0x1afa <SEGMENT_Init+0x44>
	}
	else {
		/* Setup the pin direction as required */
		GPIO_setupPinDirection(port_num, PIN_0, PIN_OUTPUT);
    1ad0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad2:	60 e0       	ldi	r22, 0x00	; 0
    1ad4:	41 e0       	ldi	r20, 0x01	; 1
    1ad6:	0e 94 41 08 	call	0x1082	; 0x1082 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(port_num, PIN_1, PIN_OUTPUT);
    1ada:	8a 81       	ldd	r24, Y+2	; 0x02
    1adc:	61 e0       	ldi	r22, 0x01	; 1
    1ade:	41 e0       	ldi	r20, 0x01	; 1
    1ae0:	0e 94 41 08 	call	0x1082	; 0x1082 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(port_num, PIN_2, PIN_OUTPUT);
    1ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae6:	62 e0       	ldi	r22, 0x02	; 2
    1ae8:	41 e0       	ldi	r20, 0x01	; 1
    1aea:	0e 94 41 08 	call	0x1082	; 0x1082 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(port_num, PIN_3, PIN_OUTPUT);
    1aee:	8a 81       	ldd	r24, Y+2	; 0x02
    1af0:	63 e0       	ldi	r22, 0x03	; 3
    1af2:	41 e0       	ldi	r20, 0x01	; 1
    1af4:	0e 94 41 08 	call	0x1082	; 0x1082 <GPIO_setupPinDirection>
		SEGMENT_Driver_Checker = SEGMENT_OK;
    1af8:	19 82       	std	Y+1, r1	; 0x01
	}
	return SEGMENT_Driver_Checker;
    1afa:	89 81       	ldd	r24, Y+1	; 0x01
}
    1afc:	0f 90       	pop	r0
    1afe:	0f 90       	pop	r0
    1b00:	cf 91       	pop	r28
    1b02:	df 91       	pop	r29
    1b04:	08 95       	ret

00001b06 <SEGMENT_DISPLAY>:

SEGMENT_Error_t SEGMENT_DISPLAY(uint8 port_num, uint8 value) {
    1b06:	df 93       	push	r29
    1b08:	cf 93       	push	r28
    1b0a:	00 d0       	rcall	.+0      	; 0x1b0c <SEGMENT_DISPLAY+0x6>
    1b0c:	00 d0       	rcall	.+0      	; 0x1b0e <SEGMENT_DISPLAY+0x8>
    1b0e:	0f 92       	push	r0
    1b10:	cd b7       	in	r28, 0x3d	; 61
    1b12:	de b7       	in	r29, 0x3e	; 62
    1b14:	8a 83       	std	Y+2, r24	; 0x02
    1b16:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t SEGMENT_Driver_Checker = NULL;
    1b18:	19 82       	std	Y+1, r1	; 0x01

	if((port_num >= NUM_OF_PORTS)) {
    1b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1c:	84 30       	cpi	r24, 0x04	; 4
    1b1e:	18 f0       	brcs	.+6      	; 0x1b26 <SEGMENT_DISPLAY+0x20>
		SEGMENT_Driver_Checker = SEGMENT_WRONG_PORT_NUMBER;
    1b20:	82 e0       	ldi	r24, 0x02	; 2
    1b22:	89 83       	std	Y+1, r24	; 0x01
    1b24:	24 c1       	rjmp	.+584    	; 0x1d6e <SEGMENT_DISPLAY+0x268>
	}
	else if((value < 0 && value > 9)) {
		SEGMENT_Driver_Checker = SEGMENT_WRONG_VALUE;
	}
	else {
		switch(value) {
    1b26:	8b 81       	ldd	r24, Y+3	; 0x03
    1b28:	28 2f       	mov	r18, r24
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	3d 83       	std	Y+5, r19	; 0x05
    1b2e:	2c 83       	std	Y+4, r18	; 0x04
    1b30:	8c 81       	ldd	r24, Y+4	; 0x04
    1b32:	9d 81       	ldd	r25, Y+5	; 0x05
    1b34:	84 30       	cpi	r24, 0x04	; 4
    1b36:	91 05       	cpc	r25, r1
    1b38:	09 f4       	brne	.+2      	; 0x1b3c <SEGMENT_DISPLAY+0x36>
    1b3a:	9b c0       	rjmp	.+310    	; 0x1c72 <SEGMENT_DISPLAY+0x16c>
    1b3c:	2c 81       	ldd	r18, Y+4	; 0x04
    1b3e:	3d 81       	ldd	r19, Y+5	; 0x05
    1b40:	25 30       	cpi	r18, 0x05	; 5
    1b42:	31 05       	cpc	r19, r1
    1b44:	ec f4       	brge	.+58     	; 0x1b80 <SEGMENT_DISPLAY+0x7a>
    1b46:	8c 81       	ldd	r24, Y+4	; 0x04
    1b48:	9d 81       	ldd	r25, Y+5	; 0x05
    1b4a:	81 30       	cpi	r24, 0x01	; 1
    1b4c:	91 05       	cpc	r25, r1
    1b4e:	09 f4       	brne	.+2      	; 0x1b52 <SEGMENT_DISPLAY+0x4c>
    1b50:	51 c0       	rjmp	.+162    	; 0x1bf4 <SEGMENT_DISPLAY+0xee>
    1b52:	2c 81       	ldd	r18, Y+4	; 0x04
    1b54:	3d 81       	ldd	r19, Y+5	; 0x05
    1b56:	22 30       	cpi	r18, 0x02	; 2
    1b58:	31 05       	cpc	r19, r1
    1b5a:	2c f4       	brge	.+10     	; 0x1b66 <SEGMENT_DISPLAY+0x60>
    1b5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b5e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b60:	00 97       	sbiw	r24, 0x00	; 0
    1b62:	99 f1       	breq	.+102    	; 0x1bca <SEGMENT_DISPLAY+0xc4>
    1b64:	03 c1       	rjmp	.+518    	; 0x1d6c <SEGMENT_DISPLAY+0x266>
    1b66:	2c 81       	ldd	r18, Y+4	; 0x04
    1b68:	3d 81       	ldd	r19, Y+5	; 0x05
    1b6a:	22 30       	cpi	r18, 0x02	; 2
    1b6c:	31 05       	cpc	r19, r1
    1b6e:	09 f4       	brne	.+2      	; 0x1b72 <SEGMENT_DISPLAY+0x6c>
    1b70:	56 c0       	rjmp	.+172    	; 0x1c1e <SEGMENT_DISPLAY+0x118>
    1b72:	8c 81       	ldd	r24, Y+4	; 0x04
    1b74:	9d 81       	ldd	r25, Y+5	; 0x05
    1b76:	83 30       	cpi	r24, 0x03	; 3
    1b78:	91 05       	cpc	r25, r1
    1b7a:	09 f4       	brne	.+2      	; 0x1b7e <SEGMENT_DISPLAY+0x78>
    1b7c:	65 c0       	rjmp	.+202    	; 0x1c48 <SEGMENT_DISPLAY+0x142>
    1b7e:	f6 c0       	rjmp	.+492    	; 0x1d6c <SEGMENT_DISPLAY+0x266>
    1b80:	2c 81       	ldd	r18, Y+4	; 0x04
    1b82:	3d 81       	ldd	r19, Y+5	; 0x05
    1b84:	27 30       	cpi	r18, 0x07	; 7
    1b86:	31 05       	cpc	r19, r1
    1b88:	09 f4       	brne	.+2      	; 0x1b8c <SEGMENT_DISPLAY+0x86>
    1b8a:	b2 c0       	rjmp	.+356    	; 0x1cf0 <SEGMENT_DISPLAY+0x1ea>
    1b8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b8e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b90:	88 30       	cpi	r24, 0x08	; 8
    1b92:	91 05       	cpc	r25, r1
    1b94:	6c f4       	brge	.+26     	; 0x1bb0 <SEGMENT_DISPLAY+0xaa>
    1b96:	2c 81       	ldd	r18, Y+4	; 0x04
    1b98:	3d 81       	ldd	r19, Y+5	; 0x05
    1b9a:	25 30       	cpi	r18, 0x05	; 5
    1b9c:	31 05       	cpc	r19, r1
    1b9e:	09 f4       	brne	.+2      	; 0x1ba2 <SEGMENT_DISPLAY+0x9c>
    1ba0:	7d c0       	rjmp	.+250    	; 0x1c9c <SEGMENT_DISPLAY+0x196>
    1ba2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ba4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ba6:	86 30       	cpi	r24, 0x06	; 6
    1ba8:	91 05       	cpc	r25, r1
    1baa:	09 f4       	brne	.+2      	; 0x1bae <SEGMENT_DISPLAY+0xa8>
    1bac:	8c c0       	rjmp	.+280    	; 0x1cc6 <SEGMENT_DISPLAY+0x1c0>
    1bae:	de c0       	rjmp	.+444    	; 0x1d6c <SEGMENT_DISPLAY+0x266>
    1bb0:	2c 81       	ldd	r18, Y+4	; 0x04
    1bb2:	3d 81       	ldd	r19, Y+5	; 0x05
    1bb4:	28 30       	cpi	r18, 0x08	; 8
    1bb6:	31 05       	cpc	r19, r1
    1bb8:	09 f4       	brne	.+2      	; 0x1bbc <SEGMENT_DISPLAY+0xb6>
    1bba:	af c0       	rjmp	.+350    	; 0x1d1a <SEGMENT_DISPLAY+0x214>
    1bbc:	8c 81       	ldd	r24, Y+4	; 0x04
    1bbe:	9d 81       	ldd	r25, Y+5	; 0x05
    1bc0:	89 30       	cpi	r24, 0x09	; 9
    1bc2:	91 05       	cpc	r25, r1
    1bc4:	09 f4       	brne	.+2      	; 0x1bc8 <SEGMENT_DISPLAY+0xc2>
    1bc6:	be c0       	rjmp	.+380    	; 0x1d44 <SEGMENT_DISPLAY+0x23e>
    1bc8:	d1 c0       	rjmp	.+418    	; 0x1d6c <SEGMENT_DISPLAY+0x266>
			case 0:
				GPIO_writePin(port_num, PIN_0, LOGIC_LOW);
    1bca:	8a 81       	ldd	r24, Y+2	; 0x02
    1bcc:	60 e0       	ldi	r22, 0x00	; 0
    1bce:	40 e0       	ldi	r20, 0x00	; 0
    1bd0:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
    1bd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd6:	61 e0       	ldi	r22, 0x01	; 1
    1bd8:	40 e0       	ldi	r20, 0x00	; 0
    1bda:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
    1bde:	8a 81       	ldd	r24, Y+2	; 0x02
    1be0:	62 e0       	ldi	r22, 0x02	; 2
    1be2:	40 e0       	ldi	r20, 0x00	; 0
    1be4:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    1be8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bea:	63 e0       	ldi	r22, 0x03	; 3
    1bec:	40 e0       	ldi	r20, 0x00	; 0
    1bee:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
    1bf2:	bc c0       	rjmp	.+376    	; 0x1d6c <SEGMENT_DISPLAY+0x266>
				break;
			case 1:
				GPIO_writePin(port_num, PIN_0, LOGIC_HIGH);
    1bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf6:	60 e0       	ldi	r22, 0x00	; 0
    1bf8:	41 e0       	ldi	r20, 0x01	; 1
    1bfa:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
    1bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1c00:	61 e0       	ldi	r22, 0x01	; 1
    1c02:	40 e0       	ldi	r20, 0x00	; 0
    1c04:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
    1c08:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0a:	62 e0       	ldi	r22, 0x02	; 2
    1c0c:	40 e0       	ldi	r20, 0x00	; 0
    1c0e:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    1c12:	8a 81       	ldd	r24, Y+2	; 0x02
    1c14:	63 e0       	ldi	r22, 0x03	; 3
    1c16:	40 e0       	ldi	r20, 0x00	; 0
    1c18:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
    1c1c:	a7 c0       	rjmp	.+334    	; 0x1d6c <SEGMENT_DISPLAY+0x266>
				break;
			case 2:
				GPIO_writePin(port_num, PIN_0, LOGIC_LOW);
    1c1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c20:	60 e0       	ldi	r22, 0x00	; 0
    1c22:	40 e0       	ldi	r20, 0x00	; 0
    1c24:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_HIGH);
    1c28:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2a:	61 e0       	ldi	r22, 0x01	; 1
    1c2c:	41 e0       	ldi	r20, 0x01	; 1
    1c2e:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
    1c32:	8a 81       	ldd	r24, Y+2	; 0x02
    1c34:	62 e0       	ldi	r22, 0x02	; 2
    1c36:	40 e0       	ldi	r20, 0x00	; 0
    1c38:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    1c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3e:	63 e0       	ldi	r22, 0x03	; 3
    1c40:	40 e0       	ldi	r20, 0x00	; 0
    1c42:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
    1c46:	92 c0       	rjmp	.+292    	; 0x1d6c <SEGMENT_DISPLAY+0x266>
				break;
			case 3:
				GPIO_writePin(port_num, PIN_0, LOGIC_HIGH);
    1c48:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4a:	60 e0       	ldi	r22, 0x00	; 0
    1c4c:	41 e0       	ldi	r20, 0x01	; 1
    1c4e:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_HIGH);
    1c52:	8a 81       	ldd	r24, Y+2	; 0x02
    1c54:	61 e0       	ldi	r22, 0x01	; 1
    1c56:	41 e0       	ldi	r20, 0x01	; 1
    1c58:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
    1c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5e:	62 e0       	ldi	r22, 0x02	; 2
    1c60:	40 e0       	ldi	r20, 0x00	; 0
    1c62:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    1c66:	8a 81       	ldd	r24, Y+2	; 0x02
    1c68:	63 e0       	ldi	r22, 0x03	; 3
    1c6a:	40 e0       	ldi	r20, 0x00	; 0
    1c6c:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
    1c70:	7d c0       	rjmp	.+250    	; 0x1d6c <SEGMENT_DISPLAY+0x266>
				break;
			case 4:
				GPIO_writePin(port_num, PIN_0, LOGIC_LOW);
    1c72:	8a 81       	ldd	r24, Y+2	; 0x02
    1c74:	60 e0       	ldi	r22, 0x00	; 0
    1c76:	40 e0       	ldi	r20, 0x00	; 0
    1c78:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
    1c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7e:	61 e0       	ldi	r22, 0x01	; 1
    1c80:	40 e0       	ldi	r20, 0x00	; 0
    1c82:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_HIGH);
    1c86:	8a 81       	ldd	r24, Y+2	; 0x02
    1c88:	62 e0       	ldi	r22, 0x02	; 2
    1c8a:	41 e0       	ldi	r20, 0x01	; 1
    1c8c:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    1c90:	8a 81       	ldd	r24, Y+2	; 0x02
    1c92:	63 e0       	ldi	r22, 0x03	; 3
    1c94:	40 e0       	ldi	r20, 0x00	; 0
    1c96:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
    1c9a:	68 c0       	rjmp	.+208    	; 0x1d6c <SEGMENT_DISPLAY+0x266>
				break;
			case 5:
				GPIO_writePin(port_num, PIN_0, LOGIC_HIGH);
    1c9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9e:	60 e0       	ldi	r22, 0x00	; 0
    1ca0:	41 e0       	ldi	r20, 0x01	; 1
    1ca2:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
    1ca6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca8:	61 e0       	ldi	r22, 0x01	; 1
    1caa:	40 e0       	ldi	r20, 0x00	; 0
    1cac:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_HIGH);
    1cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb2:	62 e0       	ldi	r22, 0x02	; 2
    1cb4:	41 e0       	ldi	r20, 0x01	; 1
    1cb6:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    1cba:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbc:	63 e0       	ldi	r22, 0x03	; 3
    1cbe:	40 e0       	ldi	r20, 0x00	; 0
    1cc0:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
    1cc4:	53 c0       	rjmp	.+166    	; 0x1d6c <SEGMENT_DISPLAY+0x266>
				break;
			case 6:
				GPIO_writePin(port_num, PIN_0, LOGIC_LOW);
    1cc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc8:	60 e0       	ldi	r22, 0x00	; 0
    1cca:	40 e0       	ldi	r20, 0x00	; 0
    1ccc:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_HIGH);
    1cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd2:	61 e0       	ldi	r22, 0x01	; 1
    1cd4:	41 e0       	ldi	r20, 0x01	; 1
    1cd6:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_HIGH);
    1cda:	8a 81       	ldd	r24, Y+2	; 0x02
    1cdc:	62 e0       	ldi	r22, 0x02	; 2
    1cde:	41 e0       	ldi	r20, 0x01	; 1
    1ce0:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    1ce4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce6:	63 e0       	ldi	r22, 0x03	; 3
    1ce8:	40 e0       	ldi	r20, 0x00	; 0
    1cea:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
    1cee:	3e c0       	rjmp	.+124    	; 0x1d6c <SEGMENT_DISPLAY+0x266>
				break;
			case 7:
				GPIO_writePin(port_num, PIN_0, LOGIC_HIGH);
    1cf0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf2:	60 e0       	ldi	r22, 0x00	; 0
    1cf4:	41 e0       	ldi	r20, 0x01	; 1
    1cf6:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_HIGH);
    1cfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfc:	61 e0       	ldi	r22, 0x01	; 1
    1cfe:	41 e0       	ldi	r20, 0x01	; 1
    1d00:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_HIGH);
    1d04:	8a 81       	ldd	r24, Y+2	; 0x02
    1d06:	62 e0       	ldi	r22, 0x02	; 2
    1d08:	41 e0       	ldi	r20, 0x01	; 1
    1d0a:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    1d0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d10:	63 e0       	ldi	r22, 0x03	; 3
    1d12:	40 e0       	ldi	r20, 0x00	; 0
    1d14:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
    1d18:	29 c0       	rjmp	.+82     	; 0x1d6c <SEGMENT_DISPLAY+0x266>
				break;
			case 8:
				GPIO_writePin(port_num, PIN_0, LOGIC_LOW);
    1d1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1c:	60 e0       	ldi	r22, 0x00	; 0
    1d1e:	40 e0       	ldi	r20, 0x00	; 0
    1d20:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
    1d24:	8a 81       	ldd	r24, Y+2	; 0x02
    1d26:	61 e0       	ldi	r22, 0x01	; 1
    1d28:	40 e0       	ldi	r20, 0x00	; 0
    1d2a:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
    1d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d30:	62 e0       	ldi	r22, 0x02	; 2
    1d32:	40 e0       	ldi	r20, 0x00	; 0
    1d34:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_HIGH);
    1d38:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3a:	63 e0       	ldi	r22, 0x03	; 3
    1d3c:	41 e0       	ldi	r20, 0x01	; 1
    1d3e:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
    1d42:	14 c0       	rjmp	.+40     	; 0x1d6c <SEGMENT_DISPLAY+0x266>
				break;
			case 9:
				GPIO_writePin(port_num, PIN_0, LOGIC_HIGH);
    1d44:	8a 81       	ldd	r24, Y+2	; 0x02
    1d46:	60 e0       	ldi	r22, 0x00	; 0
    1d48:	41 e0       	ldi	r20, 0x01	; 1
    1d4a:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
    1d4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d50:	61 e0       	ldi	r22, 0x01	; 1
    1d52:	40 e0       	ldi	r20, 0x00	; 0
    1d54:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
    1d58:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5a:	62 e0       	ldi	r22, 0x02	; 2
    1d5c:	40 e0       	ldi	r20, 0x00	; 0
    1d5e:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_HIGH);
    1d62:	8a 81       	ldd	r24, Y+2	; 0x02
    1d64:	63 e0       	ldi	r22, 0x03	; 3
    1d66:	41 e0       	ldi	r20, 0x01	; 1
    1d68:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
				break;
		}
		SEGMENT_Driver_Checker = SEGMENT_OK;
    1d6c:	19 82       	std	Y+1, r1	; 0x01
	}
	return SEGMENT_Driver_Checker;
    1d6e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d70:	0f 90       	pop	r0
    1d72:	0f 90       	pop	r0
    1d74:	0f 90       	pop	r0
    1d76:	0f 90       	pop	r0
    1d78:	0f 90       	pop	r0
    1d7a:	cf 91       	pop	r28
    1d7c:	df 91       	pop	r29
    1d7e:	08 95       	ret

00001d80 <LM35_getTemperature>:
#include "avr/io.h" /* To use the IO Ports Registers */
#include <util/delay.h>


// Initializes and enables the ADC Module to start functionality
uint8 LM35_getTemperature(void) {
    1d80:	df 93       	push	r29
    1d82:	cf 93       	push	r28
    1d84:	00 d0       	rcall	.+0      	; 0x1d86 <LM35_getTemperature+0x6>
    1d86:	cd b7       	in	r28, 0x3d	; 61
    1d88:	de b7       	in	r29, 0x3e	; 62
	uint8 temperature = 0;
    1d8a:	1a 82       	std	Y+2, r1	; 0x02
	uint8 ADC_Value = 0;
    1d8c:	19 82       	std	Y+1, r1	; 0x01
	ADC_Value = ADC_readChannel(LM35_CH_ID);
    1d8e:	82 e0       	ldi	r24, 0x02	; 2
    1d90:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <ADC_readChannel>
    1d94:	89 83       	std	Y+1, r24	; 0x01

	temperature = (uint8) ( ( (uint32)ADC_Value * LM35_MAX_TEMP * ADC_REFERENCE_VOLT_VALUE) / (ADC_MAX_VALUE * LM35_MAX_VOLT) );
    1d96:	89 81       	ldd	r24, Y+1	; 0x01
    1d98:	88 2f       	mov	r24, r24
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	a0 e0       	ldi	r26, 0x00	; 0
    1d9e:	b0 e0       	ldi	r27, 0x00	; 0
    1da0:	2e ee       	ldi	r18, 0xEE	; 238
    1da2:	32 e0       	ldi	r19, 0x02	; 2
    1da4:	40 e0       	ldi	r20, 0x00	; 0
    1da6:	50 e0       	ldi	r21, 0x00	; 0
    1da8:	bc 01       	movw	r22, r24
    1daa:	cd 01       	movw	r24, r26
    1dac:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <__mulsi3>
    1db0:	dc 01       	movw	r26, r24
    1db2:	cb 01       	movw	r24, r22
    1db4:	bc 01       	movw	r22, r24
    1db6:	cd 01       	movw	r24, r26
    1db8:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1dbc:	dc 01       	movw	r26, r24
    1dbe:	cb 01       	movw	r24, r22
    1dc0:	bc 01       	movw	r22, r24
    1dc2:	cd 01       	movw	r24, r26
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	30 ed       	ldi	r19, 0xD0	; 208
    1dc8:	4f eb       	ldi	r20, 0xBF	; 191
    1dca:	54 e4       	ldi	r21, 0x44	; 68
    1dcc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1dd0:	dc 01       	movw	r26, r24
    1dd2:	cb 01       	movw	r24, r22
    1dd4:	bc 01       	movw	r22, r24
    1dd6:	cd 01       	movw	r24, r26
    1dd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ddc:	dc 01       	movw	r26, r24
    1dde:	cb 01       	movw	r24, r22
    1de0:	8a 83       	std	Y+2, r24	; 0x02

	return temperature;
    1de2:	8a 81       	ldd	r24, Y+2	; 0x02

}
    1de4:	0f 90       	pop	r0
    1de6:	0f 90       	pop	r0
    1de8:	cf 91       	pop	r28
    1dea:	df 91       	pop	r29
    1dec:	08 95       	ret

00001dee <LED_Init>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
LED_Error_t LED_Init(uint8 port_num, uint8 pin_num) {
    1dee:	df 93       	push	r29
    1df0:	cf 93       	push	r28
    1df2:	00 d0       	rcall	.+0      	; 0x1df4 <LED_Init+0x6>
    1df4:	0f 92       	push	r0
    1df6:	cd b7       	in	r28, 0x3d	; 61
    1df8:	de b7       	in	r29, 0x3e	; 62
    1dfa:	8a 83       	std	Y+2, r24	; 0x02
    1dfc:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t LED_Driver_Checker = NULL;
    1dfe:	19 82       	std	Y+1, r1	; 0x01
	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    1e00:	8b 81       	ldd	r24, Y+3	; 0x03
    1e02:	88 30       	cpi	r24, 0x08	; 8
    1e04:	18 f0       	brcs	.+6      	; 0x1e0c <LED_Init+0x1e>
		LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	89 83       	std	Y+1, r24	; 0x01
    1e0a:	0c c0       	rjmp	.+24     	; 0x1e24 <LED_Init+0x36>
	}
	else if((port_num >= NUM_OF_PORTS)) {
    1e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0e:	84 30       	cpi	r24, 0x04	; 4
    1e10:	18 f0       	brcs	.+6      	; 0x1e18 <LED_Init+0x2a>
		LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    1e12:	82 e0       	ldi	r24, 0x02	; 2
    1e14:	89 83       	std	Y+1, r24	; 0x01
    1e16:	06 c0       	rjmp	.+12     	; 0x1e24 <LED_Init+0x36>
	}
	else {
		/* Setup the pin direction as required */
		GPIO_setupPinDirection(port_num, pin_num, PIN_OUTPUT);
    1e18:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1a:	6b 81       	ldd	r22, Y+3	; 0x03
    1e1c:	41 e0       	ldi	r20, 0x01	; 1
    1e1e:	0e 94 41 08 	call	0x1082	; 0x1082 <GPIO_setupPinDirection>
		LED_Driver_Checker = LED_OK;
    1e22:	19 82       	std	Y+1, r1	; 0x01
	}
	return LED_Driver_Checker;
    1e24:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e26:	0f 90       	pop	r0
    1e28:	0f 90       	pop	r0
    1e2a:	0f 90       	pop	r0
    1e2c:	cf 91       	pop	r28
    1e2e:	df 91       	pop	r29
    1e30:	08 95       	ret

00001e32 <LED_On>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
LED_Error_t LED_On(uint8 port_num, uint8 pin_num) {
    1e32:	df 93       	push	r29
    1e34:	cf 93       	push	r28
    1e36:	00 d0       	rcall	.+0      	; 0x1e38 <LED_On+0x6>
    1e38:	0f 92       	push	r0
    1e3a:	cd b7       	in	r28, 0x3d	; 61
    1e3c:	de b7       	in	r29, 0x3e	; 62
    1e3e:	8a 83       	std	Y+2, r24	; 0x02
    1e40:	6b 83       	std	Y+3, r22	; 0x03

	uint8_t LED_Driver_Checker = NULL;
    1e42:	19 82       	std	Y+1, r1	; 0x01
		if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    1e44:	8b 81       	ldd	r24, Y+3	; 0x03
    1e46:	88 30       	cpi	r24, 0x08	; 8
    1e48:	18 f0       	brcs	.+6      	; 0x1e50 <LED_On+0x1e>
			LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    1e4a:	81 e0       	ldi	r24, 0x01	; 1
    1e4c:	89 83       	std	Y+1, r24	; 0x01
    1e4e:	0c c0       	rjmp	.+24     	; 0x1e68 <LED_On+0x36>
		}
		else if((port_num >= NUM_OF_PORTS)) {
    1e50:	8a 81       	ldd	r24, Y+2	; 0x02
    1e52:	84 30       	cpi	r24, 0x04	; 4
    1e54:	18 f0       	brcs	.+6      	; 0x1e5c <LED_On+0x2a>
			LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    1e56:	82 e0       	ldi	r24, 0x02	; 2
    1e58:	89 83       	std	Y+1, r24	; 0x01
    1e5a:	06 c0       	rjmp	.+12     	; 0x1e68 <LED_On+0x36>
		}
		else {
			/* Setup the pin direction as required */
			#if (LED_MODE == LED_NEGATIVE_LOGIC)
				GPIO_writePin(port_num, pin_num, LOGIC_LOW);
    1e5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5e:	6b 81       	ldd	r22, Y+3	; 0x03
    1e60:	40 e0       	ldi	r20, 0x00	; 0
    1e62:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
			#elif (LED_MODE == LED_POSITIVE_LOGIC)
				GPIO_writePin(port_num, pin_num, LOGIC_HIGH);
			#endif
			LED_Driver_Checker = LED_OK;
    1e66:	19 82       	std	Y+1, r1	; 0x01
		}
		return LED_Driver_Checker;
    1e68:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e6a:	0f 90       	pop	r0
    1e6c:	0f 90       	pop	r0
    1e6e:	0f 90       	pop	r0
    1e70:	cf 91       	pop	r28
    1e72:	df 91       	pop	r29
    1e74:	08 95       	ret

00001e76 <LED_Off>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
LED_Error_t LED_Off(uint8 port_num, uint8 pin_num) {
    1e76:	df 93       	push	r29
    1e78:	cf 93       	push	r28
    1e7a:	00 d0       	rcall	.+0      	; 0x1e7c <LED_Off+0x6>
    1e7c:	0f 92       	push	r0
    1e7e:	cd b7       	in	r28, 0x3d	; 61
    1e80:	de b7       	in	r29, 0x3e	; 62
    1e82:	8a 83       	std	Y+2, r24	; 0x02
    1e84:	6b 83       	std	Y+3, r22	; 0x03

	uint8_t LED_Driver_Checker = NULL;
    1e86:	19 82       	std	Y+1, r1	; 0x01
		if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    1e88:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8a:	88 30       	cpi	r24, 0x08	; 8
    1e8c:	18 f0       	brcs	.+6      	; 0x1e94 <LED_Off+0x1e>
			LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	89 83       	std	Y+1, r24	; 0x01
    1e92:	0c c0       	rjmp	.+24     	; 0x1eac <LED_Off+0x36>
		}
		else if((port_num >= NUM_OF_PORTS)) {
    1e94:	8a 81       	ldd	r24, Y+2	; 0x02
    1e96:	84 30       	cpi	r24, 0x04	; 4
    1e98:	18 f0       	brcs	.+6      	; 0x1ea0 <LED_Off+0x2a>
			LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    1e9a:	82 e0       	ldi	r24, 0x02	; 2
    1e9c:	89 83       	std	Y+1, r24	; 0x01
    1e9e:	06 c0       	rjmp	.+12     	; 0x1eac <LED_Off+0x36>
		}
		else {
			/* Setup the pin direction as required */
			#if (LED_MODE == LED_NEGATIVE_LOGIC)
				GPIO_writePin(port_num, pin_num, LOGIC_HIGH);
    1ea0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea2:	6b 81       	ldd	r22, Y+3	; 0x03
    1ea4:	41 e0       	ldi	r20, 0x01	; 1
    1ea6:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
			#elif (LED_MODE == LED_POSITIVE_LOGIC)
				GPIO_writePin(port_num, pin_num, LOGIC_LOW);
			#endif
			LED_Driver_Checker = LED_OK;
    1eaa:	19 82       	std	Y+1, r1	; 0x01
		}
		return LED_Driver_Checker;
    1eac:	89 81       	ldd	r24, Y+1	; 0x01
}
    1eae:	0f 90       	pop	r0
    1eb0:	0f 90       	pop	r0
    1eb2:	0f 90       	pop	r0
    1eb4:	cf 91       	pop	r28
    1eb6:	df 91       	pop	r29
    1eb8:	08 95       	ret

00001eba <LED_Toggle>:

LED_Error_t LED_Toggle(uint8 port_num, uint8 pin_num) {
    1eba:	df 93       	push	r29
    1ebc:	cf 93       	push	r28
    1ebe:	00 d0       	rcall	.+0      	; 0x1ec0 <LED_Toggle+0x6>
    1ec0:	0f 92       	push	r0
    1ec2:	cd b7       	in	r28, 0x3d	; 61
    1ec4:	de b7       	in	r29, 0x3e	; 62
    1ec6:	8a 83       	std	Y+2, r24	; 0x02
    1ec8:	6b 83       	std	Y+3, r22	; 0x03

	uint8_t LED_Driver_Checker = NULL;
    1eca:	19 82       	std	Y+1, r1	; 0x01
		if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    1ecc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ece:	88 30       	cpi	r24, 0x08	; 8
    1ed0:	18 f0       	brcs	.+6      	; 0x1ed8 <LED_Toggle+0x1e>
			LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	89 83       	std	Y+1, r24	; 0x01
    1ed6:	0b c0       	rjmp	.+22     	; 0x1eee <LED_Toggle+0x34>
		}
		else if((port_num >= NUM_OF_PORTS)) {
    1ed8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eda:	84 30       	cpi	r24, 0x04	; 4
    1edc:	18 f0       	brcs	.+6      	; 0x1ee4 <LED_Toggle+0x2a>
			LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    1ede:	82 e0       	ldi	r24, 0x02	; 2
    1ee0:	89 83       	std	Y+1, r24	; 0x01
    1ee2:	05 c0       	rjmp	.+10     	; 0x1eee <LED_Toggle+0x34>
		}
		else {
			/* Setup the pin direction as required */
			GPIO_togglePin(port_num, pin_num);
    1ee4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee6:	6b 81       	ldd	r22, Y+3	; 0x03
    1ee8:	0e 94 39 0a 	call	0x1472	; 0x1472 <GPIO_togglePin>
			LED_Driver_Checker = LED_OK;
    1eec:	19 82       	std	Y+1, r1	; 0x01
		}
		return LED_Driver_Checker;
    1eee:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ef0:	0f 90       	pop	r0
    1ef2:	0f 90       	pop	r0
    1ef4:	0f 90       	pop	r0
    1ef6:	cf 91       	pop	r28
    1ef8:	df 91       	pop	r29
    1efa:	08 95       	ret

00001efc <LCD_Init>:
#include "avr/io.h" /* To use the IO Ports Registers */
#include <util/delay.h>


// Initializes and enables the LCD Module to start functionality
void LCD_Init(void) {
    1efc:	df 93       	push	r29
    1efe:	cf 93       	push	r28
    1f00:	cd b7       	in	r28, 0x3d	; 61
    1f02:	de b7       	in	r29, 0x3e	; 62
    1f04:	2e 97       	sbiw	r28, 0x0e	; 14
    1f06:	0f b6       	in	r0, 0x3f	; 63
    1f08:	f8 94       	cli
    1f0a:	de bf       	out	0x3e, r29	; 62
    1f0c:	0f be       	out	0x3f, r0	; 63
    1f0e:	cd bf       	out	0x3d, r28	; 61
	// Initialize RS Pin
	GPIO_setupPinDirection(LCD_INIT_PORT, LCD_RS, PIN_OUTPUT);
    1f10:	80 e0       	ldi	r24, 0x00	; 0
    1f12:	61 e0       	ldi	r22, 0x01	; 1
    1f14:	41 e0       	ldi	r20, 0x01	; 1
    1f16:	0e 94 41 08 	call	0x1082	; 0x1082 <GPIO_setupPinDirection>

	// Initialize Enable Pin
	GPIO_setupPinDirection(LCD_INIT_PORT, LCD_ENABLE, PIN_OUTPUT);
    1f1a:	80 e0       	ldi	r24, 0x00	; 0
    1f1c:	62 e0       	ldi	r22, 0x02	; 2
    1f1e:	41 e0       	ldi	r20, 0x01	; 1
    1f20:	0e 94 41 08 	call	0x1082	; 0x1082 <GPIO_setupPinDirection>
    1f24:	80 e0       	ldi	r24, 0x00	; 0
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	a0 ea       	ldi	r26, 0xA0	; 160
    1f2a:	b1 e4       	ldi	r27, 0x41	; 65
    1f2c:	8b 87       	std	Y+11, r24	; 0x0b
    1f2e:	9c 87       	std	Y+12, r25	; 0x0c
    1f30:	ad 87       	std	Y+13, r26	; 0x0d
    1f32:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f34:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f36:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f38:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f3c:	20 e0       	ldi	r18, 0x00	; 0
    1f3e:	30 e0       	ldi	r19, 0x00	; 0
    1f40:	4a e7       	ldi	r20, 0x7A	; 122
    1f42:	53 e4       	ldi	r21, 0x43	; 67
    1f44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f48:	dc 01       	movw	r26, r24
    1f4a:	cb 01       	movw	r24, r22
    1f4c:	8f 83       	std	Y+7, r24	; 0x07
    1f4e:	98 87       	std	Y+8, r25	; 0x08
    1f50:	a9 87       	std	Y+9, r26	; 0x09
    1f52:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f54:	6f 81       	ldd	r22, Y+7	; 0x07
    1f56:	78 85       	ldd	r23, Y+8	; 0x08
    1f58:	89 85       	ldd	r24, Y+9	; 0x09
    1f5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	40 e8       	ldi	r20, 0x80	; 128
    1f62:	5f e3       	ldi	r21, 0x3F	; 63
    1f64:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f68:	88 23       	and	r24, r24
    1f6a:	2c f4       	brge	.+10     	; 0x1f76 <LCD_Init+0x7a>
		__ticks = 1;
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	9e 83       	std	Y+6, r25	; 0x06
    1f72:	8d 83       	std	Y+5, r24	; 0x05
    1f74:	3f c0       	rjmp	.+126    	; 0x1ff4 <LCD_Init+0xf8>
	else if (__tmp > 65535)
    1f76:	6f 81       	ldd	r22, Y+7	; 0x07
    1f78:	78 85       	ldd	r23, Y+8	; 0x08
    1f7a:	89 85       	ldd	r24, Y+9	; 0x09
    1f7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f7e:	20 e0       	ldi	r18, 0x00	; 0
    1f80:	3f ef       	ldi	r19, 0xFF	; 255
    1f82:	4f e7       	ldi	r20, 0x7F	; 127
    1f84:	57 e4       	ldi	r21, 0x47	; 71
    1f86:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f8a:	18 16       	cp	r1, r24
    1f8c:	4c f5       	brge	.+82     	; 0x1fe0 <LCD_Init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f90:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f92:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f94:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f96:	20 e0       	ldi	r18, 0x00	; 0
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	40 e2       	ldi	r20, 0x20	; 32
    1f9c:	51 e4       	ldi	r21, 0x41	; 65
    1f9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa2:	dc 01       	movw	r26, r24
    1fa4:	cb 01       	movw	r24, r22
    1fa6:	bc 01       	movw	r22, r24
    1fa8:	cd 01       	movw	r24, r26
    1faa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fae:	dc 01       	movw	r26, r24
    1fb0:	cb 01       	movw	r24, r22
    1fb2:	9e 83       	std	Y+6, r25	; 0x06
    1fb4:	8d 83       	std	Y+5, r24	; 0x05
    1fb6:	0f c0       	rjmp	.+30     	; 0x1fd6 <LCD_Init+0xda>
    1fb8:	89 e1       	ldi	r24, 0x19	; 25
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	9c 83       	std	Y+4, r25	; 0x04
    1fbe:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1fc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc4:	01 97       	sbiw	r24, 0x01	; 1
    1fc6:	f1 f7       	brne	.-4      	; 0x1fc4 <LCD_Init+0xc8>
    1fc8:	9c 83       	std	Y+4, r25	; 0x04
    1fca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fcc:	8d 81       	ldd	r24, Y+5	; 0x05
    1fce:	9e 81       	ldd	r25, Y+6	; 0x06
    1fd0:	01 97       	sbiw	r24, 0x01	; 1
    1fd2:	9e 83       	std	Y+6, r25	; 0x06
    1fd4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fd6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fd8:	9e 81       	ldd	r25, Y+6	; 0x06
    1fda:	00 97       	sbiw	r24, 0x00	; 0
    1fdc:	69 f7       	brne	.-38     	; 0x1fb8 <LCD_Init+0xbc>
    1fde:	14 c0       	rjmp	.+40     	; 0x2008 <LCD_Init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fe0:	6f 81       	ldd	r22, Y+7	; 0x07
    1fe2:	78 85       	ldd	r23, Y+8	; 0x08
    1fe4:	89 85       	ldd	r24, Y+9	; 0x09
    1fe6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fe8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fec:	dc 01       	movw	r26, r24
    1fee:	cb 01       	movw	r24, r22
    1ff0:	9e 83       	std	Y+6, r25	; 0x06
    1ff2:	8d 83       	std	Y+5, r24	; 0x05
    1ff4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff8:	9a 83       	std	Y+2, r25	; 0x02
    1ffa:	89 83       	std	Y+1, r24	; 0x01
    1ffc:	89 81       	ldd	r24, Y+1	; 0x01
    1ffe:	9a 81       	ldd	r25, Y+2	; 0x02
    2000:	01 97       	sbiw	r24, 0x01	; 1
    2002:	f1 f7       	brne	.-4      	; 0x2000 <LCD_Init+0x104>
    2004:	9a 83       	std	Y+2, r25	; 0x02
    2006:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);

	// Initializing Sending Commands
	// Checks which BIT Mode, 4 or 8 line bit
	if (LCD_BIT_MODE == 4) {
		GPIO_setupPinDirection(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 0), PIN_OUTPUT);
    2008:	80 e0       	ldi	r24, 0x00	; 0
    200a:	63 e0       	ldi	r22, 0x03	; 3
    200c:	41 e0       	ldi	r20, 0x01	; 1
    200e:	0e 94 41 08 	call	0x1082	; 0x1082 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 1), PIN_OUTPUT);
    2012:	80 e0       	ldi	r24, 0x00	; 0
    2014:	64 e0       	ldi	r22, 0x04	; 4
    2016:	41 e0       	ldi	r20, 0x01	; 1
    2018:	0e 94 41 08 	call	0x1082	; 0x1082 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 2), PIN_OUTPUT);
    201c:	80 e0       	ldi	r24, 0x00	; 0
    201e:	65 e0       	ldi	r22, 0x05	; 5
    2020:	41 e0       	ldi	r20, 0x01	; 1
    2022:	0e 94 41 08 	call	0x1082	; 0x1082 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 3), PIN_OUTPUT);
    2026:	80 e0       	ldi	r24, 0x00	; 0
    2028:	66 e0       	ldi	r22, 0x06	; 6
    202a:	41 e0       	ldi	r20, 0x01	; 1
    202c:	0e 94 41 08 	call	0x1082	; 0x1082 <GPIO_setupPinDirection>

		LCD_sendCommand(LCD_TWO_LINE_FOUR_BIT_INIT1);
    2030:	83 e3       	ldi	r24, 0x33	; 51
    2032:	0e 94 30 10 	call	0x2060	; 0x2060 <LCD_sendCommand>
		LCD_sendCommand(LCD_TWO_LINE_FOUR_BIT_INIT2);
    2036:	82 e3       	ldi	r24, 0x32	; 50
    2038:	0e 94 30 10 	call	0x2060	; 0x2060 <LCD_sendCommand>
		LCD_sendCommand(LCD_TWO_LINE_FOUR_BIT);
    203c:	88 e2       	ldi	r24, 0x28	; 40
    203e:	0e 94 30 10 	call	0x2060	; 0x2060 <LCD_sendCommand>

		LCD_sendCommand(LCD_TWO_LINE_EIGHT_BIT);
	}

	// Makes the cursor off
	LCD_sendCommand(LCD_CURSOR_OFF);
    2042:	8c e0       	ldi	r24, 0x0C	; 12
    2044:	0e 94 30 10 	call	0x2060	; 0x2060 <LCD_sendCommand>
	// Clears Display
	LCD_sendCommand(LCD_CLEAR_DISPLAY);
    2048:	81 e0       	ldi	r24, 0x01	; 1
    204a:	0e 94 30 10 	call	0x2060	; 0x2060 <LCD_sendCommand>
}
    204e:	2e 96       	adiw	r28, 0x0e	; 14
    2050:	0f b6       	in	r0, 0x3f	; 63
    2052:	f8 94       	cli
    2054:	de bf       	out	0x3e, r29	; 62
    2056:	0f be       	out	0x3f, r0	; 63
    2058:	cd bf       	out	0x3d, r28	; 61
    205a:	cf 91       	pop	r28
    205c:	df 91       	pop	r29
    205e:	08 95       	ret

00002060 <LCD_sendCommand>:


// Sends a command to the LCD
void LCD_sendCommand(uint8 command) {
    2060:	0f 93       	push	r16
    2062:	1f 93       	push	r17
    2064:	df 93       	push	r29
    2066:	cf 93       	push	r28
    2068:	cd b7       	in	r28, 0x3d	; 61
    206a:	de b7       	in	r29, 0x3e	; 62
    206c:	c3 56       	subi	r28, 0x63	; 99
    206e:	d0 40       	sbci	r29, 0x00	; 0
    2070:	0f b6       	in	r0, 0x3f	; 63
    2072:	f8 94       	cli
    2074:	de bf       	out	0x3e, r29	; 62
    2076:	0f be       	out	0x3f, r0	; 63
    2078:	cd bf       	out	0x3d, r28	; 61
    207a:	fe 01       	movw	r30, r28
    207c:	ed 59       	subi	r30, 0x9D	; 157
    207e:	ff 4f       	sbci	r31, 0xFF	; 255
    2080:	80 83       	st	Z, r24
	// Set RS Pin to '0'
	GPIO_writePin(LCD_INIT_PORT, LCD_RS, LOGIC_LOW);
    2082:	80 e0       	ldi	r24, 0x00	; 0
    2084:	61 e0       	ldi	r22, 0x01	; 1
    2086:	40 e0       	ldi	r20, 0x00	; 0
    2088:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
    208c:	fe 01       	movw	r30, r28
    208e:	e1 5a       	subi	r30, 0xA1	; 161
    2090:	ff 4f       	sbci	r31, 0xFF	; 255
    2092:	80 e0       	ldi	r24, 0x00	; 0
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	a0 e8       	ldi	r26, 0x80	; 128
    2098:	bf e3       	ldi	r27, 0x3F	; 63
    209a:	80 83       	st	Z, r24
    209c:	91 83       	std	Z+1, r25	; 0x01
    209e:	a2 83       	std	Z+2, r26	; 0x02
    20a0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20a2:	8e 01       	movw	r16, r28
    20a4:	05 5a       	subi	r16, 0xA5	; 165
    20a6:	1f 4f       	sbci	r17, 0xFF	; 255
    20a8:	fe 01       	movw	r30, r28
    20aa:	e1 5a       	subi	r30, 0xA1	; 161
    20ac:	ff 4f       	sbci	r31, 0xFF	; 255
    20ae:	60 81       	ld	r22, Z
    20b0:	71 81       	ldd	r23, Z+1	; 0x01
    20b2:	82 81       	ldd	r24, Z+2	; 0x02
    20b4:	93 81       	ldd	r25, Z+3	; 0x03
    20b6:	20 e0       	ldi	r18, 0x00	; 0
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	4a e7       	ldi	r20, 0x7A	; 122
    20bc:	53 e4       	ldi	r21, 0x43	; 67
    20be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c2:	dc 01       	movw	r26, r24
    20c4:	cb 01       	movw	r24, r22
    20c6:	f8 01       	movw	r30, r16
    20c8:	80 83       	st	Z, r24
    20ca:	91 83       	std	Z+1, r25	; 0x01
    20cc:	a2 83       	std	Z+2, r26	; 0x02
    20ce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20d0:	fe 01       	movw	r30, r28
    20d2:	e5 5a       	subi	r30, 0xA5	; 165
    20d4:	ff 4f       	sbci	r31, 0xFF	; 255
    20d6:	60 81       	ld	r22, Z
    20d8:	71 81       	ldd	r23, Z+1	; 0x01
    20da:	82 81       	ldd	r24, Z+2	; 0x02
    20dc:	93 81       	ldd	r25, Z+3	; 0x03
    20de:	20 e0       	ldi	r18, 0x00	; 0
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	40 e8       	ldi	r20, 0x80	; 128
    20e4:	5f e3       	ldi	r21, 0x3F	; 63
    20e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20ea:	88 23       	and	r24, r24
    20ec:	44 f4       	brge	.+16     	; 0x20fe <LCD_sendCommand+0x9e>
		__ticks = 1;
    20ee:	fe 01       	movw	r30, r28
    20f0:	e7 5a       	subi	r30, 0xA7	; 167
    20f2:	ff 4f       	sbci	r31, 0xFF	; 255
    20f4:	81 e0       	ldi	r24, 0x01	; 1
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	91 83       	std	Z+1, r25	; 0x01
    20fa:	80 83       	st	Z, r24
    20fc:	64 c0       	rjmp	.+200    	; 0x21c6 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    20fe:	fe 01       	movw	r30, r28
    2100:	e5 5a       	subi	r30, 0xA5	; 165
    2102:	ff 4f       	sbci	r31, 0xFF	; 255
    2104:	60 81       	ld	r22, Z
    2106:	71 81       	ldd	r23, Z+1	; 0x01
    2108:	82 81       	ldd	r24, Z+2	; 0x02
    210a:	93 81       	ldd	r25, Z+3	; 0x03
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	3f ef       	ldi	r19, 0xFF	; 255
    2110:	4f e7       	ldi	r20, 0x7F	; 127
    2112:	57 e4       	ldi	r21, 0x47	; 71
    2114:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2118:	18 16       	cp	r1, r24
    211a:	0c f0       	brlt	.+2      	; 0x211e <LCD_sendCommand+0xbe>
    211c:	43 c0       	rjmp	.+134    	; 0x21a4 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    211e:	fe 01       	movw	r30, r28
    2120:	e1 5a       	subi	r30, 0xA1	; 161
    2122:	ff 4f       	sbci	r31, 0xFF	; 255
    2124:	60 81       	ld	r22, Z
    2126:	71 81       	ldd	r23, Z+1	; 0x01
    2128:	82 81       	ldd	r24, Z+2	; 0x02
    212a:	93 81       	ldd	r25, Z+3	; 0x03
    212c:	20 e0       	ldi	r18, 0x00	; 0
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	40 e2       	ldi	r20, 0x20	; 32
    2132:	51 e4       	ldi	r21, 0x41	; 65
    2134:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2138:	dc 01       	movw	r26, r24
    213a:	cb 01       	movw	r24, r22
    213c:	8e 01       	movw	r16, r28
    213e:	07 5a       	subi	r16, 0xA7	; 167
    2140:	1f 4f       	sbci	r17, 0xFF	; 255
    2142:	bc 01       	movw	r22, r24
    2144:	cd 01       	movw	r24, r26
    2146:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    214a:	dc 01       	movw	r26, r24
    214c:	cb 01       	movw	r24, r22
    214e:	f8 01       	movw	r30, r16
    2150:	91 83       	std	Z+1, r25	; 0x01
    2152:	80 83       	st	Z, r24
    2154:	1f c0       	rjmp	.+62     	; 0x2194 <LCD_sendCommand+0x134>
    2156:	fe 01       	movw	r30, r28
    2158:	e9 5a       	subi	r30, 0xA9	; 169
    215a:	ff 4f       	sbci	r31, 0xFF	; 255
    215c:	89 e1       	ldi	r24, 0x19	; 25
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	91 83       	std	Z+1, r25	; 0x01
    2162:	80 83       	st	Z, r24
    2164:	fe 01       	movw	r30, r28
    2166:	e9 5a       	subi	r30, 0xA9	; 169
    2168:	ff 4f       	sbci	r31, 0xFF	; 255
    216a:	80 81       	ld	r24, Z
    216c:	91 81       	ldd	r25, Z+1	; 0x01
    216e:	01 97       	sbiw	r24, 0x01	; 1
    2170:	f1 f7       	brne	.-4      	; 0x216e <LCD_sendCommand+0x10e>
    2172:	fe 01       	movw	r30, r28
    2174:	e9 5a       	subi	r30, 0xA9	; 169
    2176:	ff 4f       	sbci	r31, 0xFF	; 255
    2178:	91 83       	std	Z+1, r25	; 0x01
    217a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    217c:	de 01       	movw	r26, r28
    217e:	a7 5a       	subi	r26, 0xA7	; 167
    2180:	bf 4f       	sbci	r27, 0xFF	; 255
    2182:	fe 01       	movw	r30, r28
    2184:	e7 5a       	subi	r30, 0xA7	; 167
    2186:	ff 4f       	sbci	r31, 0xFF	; 255
    2188:	80 81       	ld	r24, Z
    218a:	91 81       	ldd	r25, Z+1	; 0x01
    218c:	01 97       	sbiw	r24, 0x01	; 1
    218e:	11 96       	adiw	r26, 0x01	; 1
    2190:	9c 93       	st	X, r25
    2192:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2194:	fe 01       	movw	r30, r28
    2196:	e7 5a       	subi	r30, 0xA7	; 167
    2198:	ff 4f       	sbci	r31, 0xFF	; 255
    219a:	80 81       	ld	r24, Z
    219c:	91 81       	ldd	r25, Z+1	; 0x01
    219e:	00 97       	sbiw	r24, 0x00	; 0
    21a0:	d1 f6       	brne	.-76     	; 0x2156 <LCD_sendCommand+0xf6>
    21a2:	27 c0       	rjmp	.+78     	; 0x21f2 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21a4:	8e 01       	movw	r16, r28
    21a6:	07 5a       	subi	r16, 0xA7	; 167
    21a8:	1f 4f       	sbci	r17, 0xFF	; 255
    21aa:	fe 01       	movw	r30, r28
    21ac:	e5 5a       	subi	r30, 0xA5	; 165
    21ae:	ff 4f       	sbci	r31, 0xFF	; 255
    21b0:	60 81       	ld	r22, Z
    21b2:	71 81       	ldd	r23, Z+1	; 0x01
    21b4:	82 81       	ldd	r24, Z+2	; 0x02
    21b6:	93 81       	ldd	r25, Z+3	; 0x03
    21b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21bc:	dc 01       	movw	r26, r24
    21be:	cb 01       	movw	r24, r22
    21c0:	f8 01       	movw	r30, r16
    21c2:	91 83       	std	Z+1, r25	; 0x01
    21c4:	80 83       	st	Z, r24
    21c6:	de 01       	movw	r26, r28
    21c8:	ab 5a       	subi	r26, 0xAB	; 171
    21ca:	bf 4f       	sbci	r27, 0xFF	; 255
    21cc:	fe 01       	movw	r30, r28
    21ce:	e7 5a       	subi	r30, 0xA7	; 167
    21d0:	ff 4f       	sbci	r31, 0xFF	; 255
    21d2:	80 81       	ld	r24, Z
    21d4:	91 81       	ldd	r25, Z+1	; 0x01
    21d6:	8d 93       	st	X+, r24
    21d8:	9c 93       	st	X, r25
    21da:	fe 01       	movw	r30, r28
    21dc:	eb 5a       	subi	r30, 0xAB	; 171
    21de:	ff 4f       	sbci	r31, 0xFF	; 255
    21e0:	80 81       	ld	r24, Z
    21e2:	91 81       	ldd	r25, Z+1	; 0x01
    21e4:	01 97       	sbiw	r24, 0x01	; 1
    21e6:	f1 f7       	brne	.-4      	; 0x21e4 <LCD_sendCommand+0x184>
    21e8:	fe 01       	movw	r30, r28
    21ea:	eb 5a       	subi	r30, 0xAB	; 171
    21ec:	ff 4f       	sbci	r31, 0xFF	; 255
    21ee:	91 83       	std	Z+1, r25	; 0x01
    21f0:	80 83       	st	Z, r24
	_delay_ms(1);

	// Set Enable Pin to '1'
	GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
    21f2:	80 e0       	ldi	r24, 0x00	; 0
    21f4:	62 e0       	ldi	r22, 0x02	; 2
    21f6:	41 e0       	ldi	r20, 0x01	; 1
    21f8:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
    21fc:	fe 01       	movw	r30, r28
    21fe:	ef 5a       	subi	r30, 0xAF	; 175
    2200:	ff 4f       	sbci	r31, 0xFF	; 255
    2202:	80 e0       	ldi	r24, 0x00	; 0
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	a0 e8       	ldi	r26, 0x80	; 128
    2208:	bf e3       	ldi	r27, 0x3F	; 63
    220a:	80 83       	st	Z, r24
    220c:	91 83       	std	Z+1, r25	; 0x01
    220e:	a2 83       	std	Z+2, r26	; 0x02
    2210:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2212:	8e 01       	movw	r16, r28
    2214:	03 5b       	subi	r16, 0xB3	; 179
    2216:	1f 4f       	sbci	r17, 0xFF	; 255
    2218:	fe 01       	movw	r30, r28
    221a:	ef 5a       	subi	r30, 0xAF	; 175
    221c:	ff 4f       	sbci	r31, 0xFF	; 255
    221e:	60 81       	ld	r22, Z
    2220:	71 81       	ldd	r23, Z+1	; 0x01
    2222:	82 81       	ldd	r24, Z+2	; 0x02
    2224:	93 81       	ldd	r25, Z+3	; 0x03
    2226:	20 e0       	ldi	r18, 0x00	; 0
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	4a e7       	ldi	r20, 0x7A	; 122
    222c:	53 e4       	ldi	r21, 0x43	; 67
    222e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2232:	dc 01       	movw	r26, r24
    2234:	cb 01       	movw	r24, r22
    2236:	f8 01       	movw	r30, r16
    2238:	80 83       	st	Z, r24
    223a:	91 83       	std	Z+1, r25	; 0x01
    223c:	a2 83       	std	Z+2, r26	; 0x02
    223e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2240:	fe 01       	movw	r30, r28
    2242:	e3 5b       	subi	r30, 0xB3	; 179
    2244:	ff 4f       	sbci	r31, 0xFF	; 255
    2246:	60 81       	ld	r22, Z
    2248:	71 81       	ldd	r23, Z+1	; 0x01
    224a:	82 81       	ldd	r24, Z+2	; 0x02
    224c:	93 81       	ldd	r25, Z+3	; 0x03
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	40 e8       	ldi	r20, 0x80	; 128
    2254:	5f e3       	ldi	r21, 0x3F	; 63
    2256:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    225a:	88 23       	and	r24, r24
    225c:	44 f4       	brge	.+16     	; 0x226e <LCD_sendCommand+0x20e>
		__ticks = 1;
    225e:	fe 01       	movw	r30, r28
    2260:	e5 5b       	subi	r30, 0xB5	; 181
    2262:	ff 4f       	sbci	r31, 0xFF	; 255
    2264:	81 e0       	ldi	r24, 0x01	; 1
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	91 83       	std	Z+1, r25	; 0x01
    226a:	80 83       	st	Z, r24
    226c:	64 c0       	rjmp	.+200    	; 0x2336 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    226e:	fe 01       	movw	r30, r28
    2270:	e3 5b       	subi	r30, 0xB3	; 179
    2272:	ff 4f       	sbci	r31, 0xFF	; 255
    2274:	60 81       	ld	r22, Z
    2276:	71 81       	ldd	r23, Z+1	; 0x01
    2278:	82 81       	ldd	r24, Z+2	; 0x02
    227a:	93 81       	ldd	r25, Z+3	; 0x03
    227c:	20 e0       	ldi	r18, 0x00	; 0
    227e:	3f ef       	ldi	r19, 0xFF	; 255
    2280:	4f e7       	ldi	r20, 0x7F	; 127
    2282:	57 e4       	ldi	r21, 0x47	; 71
    2284:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2288:	18 16       	cp	r1, r24
    228a:	0c f0       	brlt	.+2      	; 0x228e <LCD_sendCommand+0x22e>
    228c:	43 c0       	rjmp	.+134    	; 0x2314 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    228e:	fe 01       	movw	r30, r28
    2290:	ef 5a       	subi	r30, 0xAF	; 175
    2292:	ff 4f       	sbci	r31, 0xFF	; 255
    2294:	60 81       	ld	r22, Z
    2296:	71 81       	ldd	r23, Z+1	; 0x01
    2298:	82 81       	ldd	r24, Z+2	; 0x02
    229a:	93 81       	ldd	r25, Z+3	; 0x03
    229c:	20 e0       	ldi	r18, 0x00	; 0
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	40 e2       	ldi	r20, 0x20	; 32
    22a2:	51 e4       	ldi	r21, 0x41	; 65
    22a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a8:	dc 01       	movw	r26, r24
    22aa:	cb 01       	movw	r24, r22
    22ac:	8e 01       	movw	r16, r28
    22ae:	05 5b       	subi	r16, 0xB5	; 181
    22b0:	1f 4f       	sbci	r17, 0xFF	; 255
    22b2:	bc 01       	movw	r22, r24
    22b4:	cd 01       	movw	r24, r26
    22b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ba:	dc 01       	movw	r26, r24
    22bc:	cb 01       	movw	r24, r22
    22be:	f8 01       	movw	r30, r16
    22c0:	91 83       	std	Z+1, r25	; 0x01
    22c2:	80 83       	st	Z, r24
    22c4:	1f c0       	rjmp	.+62     	; 0x2304 <LCD_sendCommand+0x2a4>
    22c6:	fe 01       	movw	r30, r28
    22c8:	e7 5b       	subi	r30, 0xB7	; 183
    22ca:	ff 4f       	sbci	r31, 0xFF	; 255
    22cc:	89 e1       	ldi	r24, 0x19	; 25
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	91 83       	std	Z+1, r25	; 0x01
    22d2:	80 83       	st	Z, r24
    22d4:	fe 01       	movw	r30, r28
    22d6:	e7 5b       	subi	r30, 0xB7	; 183
    22d8:	ff 4f       	sbci	r31, 0xFF	; 255
    22da:	80 81       	ld	r24, Z
    22dc:	91 81       	ldd	r25, Z+1	; 0x01
    22de:	01 97       	sbiw	r24, 0x01	; 1
    22e0:	f1 f7       	brne	.-4      	; 0x22de <LCD_sendCommand+0x27e>
    22e2:	fe 01       	movw	r30, r28
    22e4:	e7 5b       	subi	r30, 0xB7	; 183
    22e6:	ff 4f       	sbci	r31, 0xFF	; 255
    22e8:	91 83       	std	Z+1, r25	; 0x01
    22ea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ec:	de 01       	movw	r26, r28
    22ee:	a5 5b       	subi	r26, 0xB5	; 181
    22f0:	bf 4f       	sbci	r27, 0xFF	; 255
    22f2:	fe 01       	movw	r30, r28
    22f4:	e5 5b       	subi	r30, 0xB5	; 181
    22f6:	ff 4f       	sbci	r31, 0xFF	; 255
    22f8:	80 81       	ld	r24, Z
    22fa:	91 81       	ldd	r25, Z+1	; 0x01
    22fc:	01 97       	sbiw	r24, 0x01	; 1
    22fe:	11 96       	adiw	r26, 0x01	; 1
    2300:	9c 93       	st	X, r25
    2302:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2304:	fe 01       	movw	r30, r28
    2306:	e5 5b       	subi	r30, 0xB5	; 181
    2308:	ff 4f       	sbci	r31, 0xFF	; 255
    230a:	80 81       	ld	r24, Z
    230c:	91 81       	ldd	r25, Z+1	; 0x01
    230e:	00 97       	sbiw	r24, 0x00	; 0
    2310:	d1 f6       	brne	.-76     	; 0x22c6 <LCD_sendCommand+0x266>
    2312:	27 c0       	rjmp	.+78     	; 0x2362 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2314:	8e 01       	movw	r16, r28
    2316:	05 5b       	subi	r16, 0xB5	; 181
    2318:	1f 4f       	sbci	r17, 0xFF	; 255
    231a:	fe 01       	movw	r30, r28
    231c:	e3 5b       	subi	r30, 0xB3	; 179
    231e:	ff 4f       	sbci	r31, 0xFF	; 255
    2320:	60 81       	ld	r22, Z
    2322:	71 81       	ldd	r23, Z+1	; 0x01
    2324:	82 81       	ldd	r24, Z+2	; 0x02
    2326:	93 81       	ldd	r25, Z+3	; 0x03
    2328:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	f8 01       	movw	r30, r16
    2332:	91 83       	std	Z+1, r25	; 0x01
    2334:	80 83       	st	Z, r24
    2336:	de 01       	movw	r26, r28
    2338:	a9 5b       	subi	r26, 0xB9	; 185
    233a:	bf 4f       	sbci	r27, 0xFF	; 255
    233c:	fe 01       	movw	r30, r28
    233e:	e5 5b       	subi	r30, 0xB5	; 181
    2340:	ff 4f       	sbci	r31, 0xFF	; 255
    2342:	80 81       	ld	r24, Z
    2344:	91 81       	ldd	r25, Z+1	; 0x01
    2346:	8d 93       	st	X+, r24
    2348:	9c 93       	st	X, r25
    234a:	fe 01       	movw	r30, r28
    234c:	e9 5b       	subi	r30, 0xB9	; 185
    234e:	ff 4f       	sbci	r31, 0xFF	; 255
    2350:	80 81       	ld	r24, Z
    2352:	91 81       	ldd	r25, Z+1	; 0x01
    2354:	01 97       	sbiw	r24, 0x01	; 1
    2356:	f1 f7       	brne	.-4      	; 0x2354 <LCD_sendCommand+0x2f4>
    2358:	fe 01       	movw	r30, r28
    235a:	e9 5b       	subi	r30, 0xB9	; 185
    235c:	ff 4f       	sbci	r31, 0xFF	; 255
    235e:	91 83       	std	Z+1, r25	; 0x01
    2360:	80 83       	st	Z, r24
	_delay_ms(1);

	// Inserts the command in the assigned PORT to be sent to the LCD
	// uint8 BIT_MODE;
	if (LCD_BIT_MODE == 4) {
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 0), GET_BIT( command, 4 ));
    2362:	fe 01       	movw	r30, r28
    2364:	ed 59       	subi	r30, 0x9D	; 157
    2366:	ff 4f       	sbci	r31, 0xFF	; 255
    2368:	80 81       	ld	r24, Z
    236a:	82 95       	swap	r24
    236c:	8f 70       	andi	r24, 0x0F	; 15
    236e:	98 2f       	mov	r25, r24
    2370:	91 70       	andi	r25, 0x01	; 1
    2372:	80 e0       	ldi	r24, 0x00	; 0
    2374:	63 e0       	ldi	r22, 0x03	; 3
    2376:	49 2f       	mov	r20, r25
    2378:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 1), GET_BIT( command, 5 ));
    237c:	fe 01       	movw	r30, r28
    237e:	ed 59       	subi	r30, 0x9D	; 157
    2380:	ff 4f       	sbci	r31, 0xFF	; 255
    2382:	80 81       	ld	r24, Z
    2384:	82 95       	swap	r24
    2386:	86 95       	lsr	r24
    2388:	87 70       	andi	r24, 0x07	; 7
    238a:	98 2f       	mov	r25, r24
    238c:	91 70       	andi	r25, 0x01	; 1
    238e:	80 e0       	ldi	r24, 0x00	; 0
    2390:	64 e0       	ldi	r22, 0x04	; 4
    2392:	49 2f       	mov	r20, r25
    2394:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 2), GET_BIT( command, 6 ));
    2398:	fe 01       	movw	r30, r28
    239a:	ed 59       	subi	r30, 0x9D	; 157
    239c:	ff 4f       	sbci	r31, 0xFF	; 255
    239e:	80 81       	ld	r24, Z
    23a0:	82 95       	swap	r24
    23a2:	86 95       	lsr	r24
    23a4:	86 95       	lsr	r24
    23a6:	83 70       	andi	r24, 0x03	; 3
    23a8:	98 2f       	mov	r25, r24
    23aa:	91 70       	andi	r25, 0x01	; 1
    23ac:	80 e0       	ldi	r24, 0x00	; 0
    23ae:	65 e0       	ldi	r22, 0x05	; 5
    23b0:	49 2f       	mov	r20, r25
    23b2:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 3), GET_BIT( command, 7 ));
    23b6:	fe 01       	movw	r30, r28
    23b8:	ed 59       	subi	r30, 0x9D	; 157
    23ba:	ff 4f       	sbci	r31, 0xFF	; 255
    23bc:	80 81       	ld	r24, Z
    23be:	98 2f       	mov	r25, r24
    23c0:	99 1f       	adc	r25, r25
    23c2:	99 27       	eor	r25, r25
    23c4:	99 1f       	adc	r25, r25
    23c6:	80 e0       	ldi	r24, 0x00	; 0
    23c8:	66 e0       	ldi	r22, 0x06	; 6
    23ca:	49 2f       	mov	r20, r25
    23cc:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
    23d0:	fe 01       	movw	r30, r28
    23d2:	ed 5b       	subi	r30, 0xBD	; 189
    23d4:	ff 4f       	sbci	r31, 0xFF	; 255
    23d6:	80 e0       	ldi	r24, 0x00	; 0
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	a0 e8       	ldi	r26, 0x80	; 128
    23dc:	bf e3       	ldi	r27, 0x3F	; 63
    23de:	80 83       	st	Z, r24
    23e0:	91 83       	std	Z+1, r25	; 0x01
    23e2:	a2 83       	std	Z+2, r26	; 0x02
    23e4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23e6:	8e 01       	movw	r16, r28
    23e8:	01 5c       	subi	r16, 0xC1	; 193
    23ea:	1f 4f       	sbci	r17, 0xFF	; 255
    23ec:	fe 01       	movw	r30, r28
    23ee:	ed 5b       	subi	r30, 0xBD	; 189
    23f0:	ff 4f       	sbci	r31, 0xFF	; 255
    23f2:	60 81       	ld	r22, Z
    23f4:	71 81       	ldd	r23, Z+1	; 0x01
    23f6:	82 81       	ldd	r24, Z+2	; 0x02
    23f8:	93 81       	ldd	r25, Z+3	; 0x03
    23fa:	20 e0       	ldi	r18, 0x00	; 0
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	4a e7       	ldi	r20, 0x7A	; 122
    2400:	53 e4       	ldi	r21, 0x43	; 67
    2402:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2406:	dc 01       	movw	r26, r24
    2408:	cb 01       	movw	r24, r22
    240a:	f8 01       	movw	r30, r16
    240c:	80 83       	st	Z, r24
    240e:	91 83       	std	Z+1, r25	; 0x01
    2410:	a2 83       	std	Z+2, r26	; 0x02
    2412:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2414:	fe 01       	movw	r30, r28
    2416:	ff 96       	adiw	r30, 0x3f	; 63
    2418:	60 81       	ld	r22, Z
    241a:	71 81       	ldd	r23, Z+1	; 0x01
    241c:	82 81       	ldd	r24, Z+2	; 0x02
    241e:	93 81       	ldd	r25, Z+3	; 0x03
    2420:	20 e0       	ldi	r18, 0x00	; 0
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	40 e8       	ldi	r20, 0x80	; 128
    2426:	5f e3       	ldi	r21, 0x3F	; 63
    2428:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    242c:	88 23       	and	r24, r24
    242e:	2c f4       	brge	.+10     	; 0x243a <LCD_sendCommand+0x3da>
		__ticks = 1;
    2430:	81 e0       	ldi	r24, 0x01	; 1
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	9e af       	std	Y+62, r25	; 0x3e
    2436:	8d af       	std	Y+61, r24	; 0x3d
    2438:	46 c0       	rjmp	.+140    	; 0x24c6 <LCD_sendCommand+0x466>
	else if (__tmp > 65535)
    243a:	fe 01       	movw	r30, r28
    243c:	ff 96       	adiw	r30, 0x3f	; 63
    243e:	60 81       	ld	r22, Z
    2440:	71 81       	ldd	r23, Z+1	; 0x01
    2442:	82 81       	ldd	r24, Z+2	; 0x02
    2444:	93 81       	ldd	r25, Z+3	; 0x03
    2446:	20 e0       	ldi	r18, 0x00	; 0
    2448:	3f ef       	ldi	r19, 0xFF	; 255
    244a:	4f e7       	ldi	r20, 0x7F	; 127
    244c:	57 e4       	ldi	r21, 0x47	; 71
    244e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2452:	18 16       	cp	r1, r24
    2454:	64 f5       	brge	.+88     	; 0x24ae <LCD_sendCommand+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2456:	fe 01       	movw	r30, r28
    2458:	ed 5b       	subi	r30, 0xBD	; 189
    245a:	ff 4f       	sbci	r31, 0xFF	; 255
    245c:	60 81       	ld	r22, Z
    245e:	71 81       	ldd	r23, Z+1	; 0x01
    2460:	82 81       	ldd	r24, Z+2	; 0x02
    2462:	93 81       	ldd	r25, Z+3	; 0x03
    2464:	20 e0       	ldi	r18, 0x00	; 0
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	40 e2       	ldi	r20, 0x20	; 32
    246a:	51 e4       	ldi	r21, 0x41	; 65
    246c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2470:	dc 01       	movw	r26, r24
    2472:	cb 01       	movw	r24, r22
    2474:	bc 01       	movw	r22, r24
    2476:	cd 01       	movw	r24, r26
    2478:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    247c:	dc 01       	movw	r26, r24
    247e:	cb 01       	movw	r24, r22
    2480:	9e af       	std	Y+62, r25	; 0x3e
    2482:	8d af       	std	Y+61, r24	; 0x3d
    2484:	0f c0       	rjmp	.+30     	; 0x24a4 <LCD_sendCommand+0x444>
    2486:	89 e1       	ldi	r24, 0x19	; 25
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	9c af       	std	Y+60, r25	; 0x3c
    248c:	8b af       	std	Y+59, r24	; 0x3b
    248e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2490:	9c ad       	ldd	r25, Y+60	; 0x3c
    2492:	01 97       	sbiw	r24, 0x01	; 1
    2494:	f1 f7       	brne	.-4      	; 0x2492 <LCD_sendCommand+0x432>
    2496:	9c af       	std	Y+60, r25	; 0x3c
    2498:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    249a:	8d ad       	ldd	r24, Y+61	; 0x3d
    249c:	9e ad       	ldd	r25, Y+62	; 0x3e
    249e:	01 97       	sbiw	r24, 0x01	; 1
    24a0:	9e af       	std	Y+62, r25	; 0x3e
    24a2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24a4:	8d ad       	ldd	r24, Y+61	; 0x3d
    24a6:	9e ad       	ldd	r25, Y+62	; 0x3e
    24a8:	00 97       	sbiw	r24, 0x00	; 0
    24aa:	69 f7       	brne	.-38     	; 0x2486 <LCD_sendCommand+0x426>
    24ac:	16 c0       	rjmp	.+44     	; 0x24da <LCD_sendCommand+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ae:	fe 01       	movw	r30, r28
    24b0:	ff 96       	adiw	r30, 0x3f	; 63
    24b2:	60 81       	ld	r22, Z
    24b4:	71 81       	ldd	r23, Z+1	; 0x01
    24b6:	82 81       	ldd	r24, Z+2	; 0x02
    24b8:	93 81       	ldd	r25, Z+3	; 0x03
    24ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24be:	dc 01       	movw	r26, r24
    24c0:	cb 01       	movw	r24, r22
    24c2:	9e af       	std	Y+62, r25	; 0x3e
    24c4:	8d af       	std	Y+61, r24	; 0x3d
    24c6:	8d ad       	ldd	r24, Y+61	; 0x3d
    24c8:	9e ad       	ldd	r25, Y+62	; 0x3e
    24ca:	9a af       	std	Y+58, r25	; 0x3a
    24cc:	89 af       	std	Y+57, r24	; 0x39
    24ce:	89 ad       	ldd	r24, Y+57	; 0x39
    24d0:	9a ad       	ldd	r25, Y+58	; 0x3a
    24d2:	01 97       	sbiw	r24, 0x01	; 1
    24d4:	f1 f7       	brne	.-4      	; 0x24d2 <LCD_sendCommand+0x472>
    24d6:	9a af       	std	Y+58, r25	; 0x3a
    24d8:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(1);

		// Clear Enable Pin to '0'
		GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
    24da:	80 e0       	ldi	r24, 0x00	; 0
    24dc:	62 e0       	ldi	r22, 0x02	; 2
    24de:	40 e0       	ldi	r20, 0x00	; 0
    24e0:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
    24e4:	80 e0       	ldi	r24, 0x00	; 0
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	a0 e8       	ldi	r26, 0x80	; 128
    24ea:	bf e3       	ldi	r27, 0x3F	; 63
    24ec:	8d ab       	std	Y+53, r24	; 0x35
    24ee:	9e ab       	std	Y+54, r25	; 0x36
    24f0:	af ab       	std	Y+55, r26	; 0x37
    24f2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24f4:	6d a9       	ldd	r22, Y+53	; 0x35
    24f6:	7e a9       	ldd	r23, Y+54	; 0x36
    24f8:	8f a9       	ldd	r24, Y+55	; 0x37
    24fa:	98 ad       	ldd	r25, Y+56	; 0x38
    24fc:	20 e0       	ldi	r18, 0x00	; 0
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	4a e7       	ldi	r20, 0x7A	; 122
    2502:	53 e4       	ldi	r21, 0x43	; 67
    2504:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2508:	dc 01       	movw	r26, r24
    250a:	cb 01       	movw	r24, r22
    250c:	89 ab       	std	Y+49, r24	; 0x31
    250e:	9a ab       	std	Y+50, r25	; 0x32
    2510:	ab ab       	std	Y+51, r26	; 0x33
    2512:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2514:	69 a9       	ldd	r22, Y+49	; 0x31
    2516:	7a a9       	ldd	r23, Y+50	; 0x32
    2518:	8b a9       	ldd	r24, Y+51	; 0x33
    251a:	9c a9       	ldd	r25, Y+52	; 0x34
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	40 e8       	ldi	r20, 0x80	; 128
    2522:	5f e3       	ldi	r21, 0x3F	; 63
    2524:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2528:	88 23       	and	r24, r24
    252a:	2c f4       	brge	.+10     	; 0x2536 <LCD_sendCommand+0x4d6>
		__ticks = 1;
    252c:	81 e0       	ldi	r24, 0x01	; 1
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	98 ab       	std	Y+48, r25	; 0x30
    2532:	8f a7       	std	Y+47, r24	; 0x2f
    2534:	3f c0       	rjmp	.+126    	; 0x25b4 <LCD_sendCommand+0x554>
	else if (__tmp > 65535)
    2536:	69 a9       	ldd	r22, Y+49	; 0x31
    2538:	7a a9       	ldd	r23, Y+50	; 0x32
    253a:	8b a9       	ldd	r24, Y+51	; 0x33
    253c:	9c a9       	ldd	r25, Y+52	; 0x34
    253e:	20 e0       	ldi	r18, 0x00	; 0
    2540:	3f ef       	ldi	r19, 0xFF	; 255
    2542:	4f e7       	ldi	r20, 0x7F	; 127
    2544:	57 e4       	ldi	r21, 0x47	; 71
    2546:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    254a:	18 16       	cp	r1, r24
    254c:	4c f5       	brge	.+82     	; 0x25a0 <LCD_sendCommand+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    254e:	6d a9       	ldd	r22, Y+53	; 0x35
    2550:	7e a9       	ldd	r23, Y+54	; 0x36
    2552:	8f a9       	ldd	r24, Y+55	; 0x37
    2554:	98 ad       	ldd	r25, Y+56	; 0x38
    2556:	20 e0       	ldi	r18, 0x00	; 0
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	40 e2       	ldi	r20, 0x20	; 32
    255c:	51 e4       	ldi	r21, 0x41	; 65
    255e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2562:	dc 01       	movw	r26, r24
    2564:	cb 01       	movw	r24, r22
    2566:	bc 01       	movw	r22, r24
    2568:	cd 01       	movw	r24, r26
    256a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    256e:	dc 01       	movw	r26, r24
    2570:	cb 01       	movw	r24, r22
    2572:	98 ab       	std	Y+48, r25	; 0x30
    2574:	8f a7       	std	Y+47, r24	; 0x2f
    2576:	0f c0       	rjmp	.+30     	; 0x2596 <LCD_sendCommand+0x536>
    2578:	89 e1       	ldi	r24, 0x19	; 25
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	9e a7       	std	Y+46, r25	; 0x2e
    257e:	8d a7       	std	Y+45, r24	; 0x2d
    2580:	8d a5       	ldd	r24, Y+45	; 0x2d
    2582:	9e a5       	ldd	r25, Y+46	; 0x2e
    2584:	01 97       	sbiw	r24, 0x01	; 1
    2586:	f1 f7       	brne	.-4      	; 0x2584 <LCD_sendCommand+0x524>
    2588:	9e a7       	std	Y+46, r25	; 0x2e
    258a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    258c:	8f a5       	ldd	r24, Y+47	; 0x2f
    258e:	98 a9       	ldd	r25, Y+48	; 0x30
    2590:	01 97       	sbiw	r24, 0x01	; 1
    2592:	98 ab       	std	Y+48, r25	; 0x30
    2594:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2596:	8f a5       	ldd	r24, Y+47	; 0x2f
    2598:	98 a9       	ldd	r25, Y+48	; 0x30
    259a:	00 97       	sbiw	r24, 0x00	; 0
    259c:	69 f7       	brne	.-38     	; 0x2578 <LCD_sendCommand+0x518>
    259e:	14 c0       	rjmp	.+40     	; 0x25c8 <LCD_sendCommand+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25a0:	69 a9       	ldd	r22, Y+49	; 0x31
    25a2:	7a a9       	ldd	r23, Y+50	; 0x32
    25a4:	8b a9       	ldd	r24, Y+51	; 0x33
    25a6:	9c a9       	ldd	r25, Y+52	; 0x34
    25a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ac:	dc 01       	movw	r26, r24
    25ae:	cb 01       	movw	r24, r22
    25b0:	98 ab       	std	Y+48, r25	; 0x30
    25b2:	8f a7       	std	Y+47, r24	; 0x2f
    25b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    25b6:	98 a9       	ldd	r25, Y+48	; 0x30
    25b8:	9c a7       	std	Y+44, r25	; 0x2c
    25ba:	8b a7       	std	Y+43, r24	; 0x2b
    25bc:	8b a5       	ldd	r24, Y+43	; 0x2b
    25be:	9c a5       	ldd	r25, Y+44	; 0x2c
    25c0:	01 97       	sbiw	r24, 0x01	; 1
    25c2:	f1 f7       	brne	.-4      	; 0x25c0 <LCD_sendCommand+0x560>
    25c4:	9c a7       	std	Y+44, r25	; 0x2c
    25c6:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1); /* delay for processing Th = 13ns */

		// Set Enable Pin to '1'
		GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
    25c8:	80 e0       	ldi	r24, 0x00	; 0
    25ca:	62 e0       	ldi	r22, 0x02	; 2
    25cc:	41 e0       	ldi	r20, 0x01	; 1
    25ce:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
    25d2:	80 e0       	ldi	r24, 0x00	; 0
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	a0 e8       	ldi	r26, 0x80	; 128
    25d8:	bf e3       	ldi	r27, 0x3F	; 63
    25da:	8f a3       	std	Y+39, r24	; 0x27
    25dc:	98 a7       	std	Y+40, r25	; 0x28
    25de:	a9 a7       	std	Y+41, r26	; 0x29
    25e0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25e2:	6f a1       	ldd	r22, Y+39	; 0x27
    25e4:	78 a5       	ldd	r23, Y+40	; 0x28
    25e6:	89 a5       	ldd	r24, Y+41	; 0x29
    25e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    25ea:	20 e0       	ldi	r18, 0x00	; 0
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	4a e7       	ldi	r20, 0x7A	; 122
    25f0:	53 e4       	ldi	r21, 0x43	; 67
    25f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f6:	dc 01       	movw	r26, r24
    25f8:	cb 01       	movw	r24, r22
    25fa:	8b a3       	std	Y+35, r24	; 0x23
    25fc:	9c a3       	std	Y+36, r25	; 0x24
    25fe:	ad a3       	std	Y+37, r26	; 0x25
    2600:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2602:	6b a1       	ldd	r22, Y+35	; 0x23
    2604:	7c a1       	ldd	r23, Y+36	; 0x24
    2606:	8d a1       	ldd	r24, Y+37	; 0x25
    2608:	9e a1       	ldd	r25, Y+38	; 0x26
    260a:	20 e0       	ldi	r18, 0x00	; 0
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	40 e8       	ldi	r20, 0x80	; 128
    2610:	5f e3       	ldi	r21, 0x3F	; 63
    2612:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2616:	88 23       	and	r24, r24
    2618:	2c f4       	brge	.+10     	; 0x2624 <LCD_sendCommand+0x5c4>
		__ticks = 1;
    261a:	81 e0       	ldi	r24, 0x01	; 1
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	9a a3       	std	Y+34, r25	; 0x22
    2620:	89 a3       	std	Y+33, r24	; 0x21
    2622:	3f c0       	rjmp	.+126    	; 0x26a2 <LCD_sendCommand+0x642>
	else if (__tmp > 65535)
    2624:	6b a1       	ldd	r22, Y+35	; 0x23
    2626:	7c a1       	ldd	r23, Y+36	; 0x24
    2628:	8d a1       	ldd	r24, Y+37	; 0x25
    262a:	9e a1       	ldd	r25, Y+38	; 0x26
    262c:	20 e0       	ldi	r18, 0x00	; 0
    262e:	3f ef       	ldi	r19, 0xFF	; 255
    2630:	4f e7       	ldi	r20, 0x7F	; 127
    2632:	57 e4       	ldi	r21, 0x47	; 71
    2634:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2638:	18 16       	cp	r1, r24
    263a:	4c f5       	brge	.+82     	; 0x268e <LCD_sendCommand+0x62e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    263c:	6f a1       	ldd	r22, Y+39	; 0x27
    263e:	78 a5       	ldd	r23, Y+40	; 0x28
    2640:	89 a5       	ldd	r24, Y+41	; 0x29
    2642:	9a a5       	ldd	r25, Y+42	; 0x2a
    2644:	20 e0       	ldi	r18, 0x00	; 0
    2646:	30 e0       	ldi	r19, 0x00	; 0
    2648:	40 e2       	ldi	r20, 0x20	; 32
    264a:	51 e4       	ldi	r21, 0x41	; 65
    264c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2650:	dc 01       	movw	r26, r24
    2652:	cb 01       	movw	r24, r22
    2654:	bc 01       	movw	r22, r24
    2656:	cd 01       	movw	r24, r26
    2658:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    265c:	dc 01       	movw	r26, r24
    265e:	cb 01       	movw	r24, r22
    2660:	9a a3       	std	Y+34, r25	; 0x22
    2662:	89 a3       	std	Y+33, r24	; 0x21
    2664:	0f c0       	rjmp	.+30     	; 0x2684 <LCD_sendCommand+0x624>
    2666:	89 e1       	ldi	r24, 0x19	; 25
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	98 a3       	std	Y+32, r25	; 0x20
    266c:	8f 8f       	std	Y+31, r24	; 0x1f
    266e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2670:	98 a1       	ldd	r25, Y+32	; 0x20
    2672:	01 97       	sbiw	r24, 0x01	; 1
    2674:	f1 f7       	brne	.-4      	; 0x2672 <LCD_sendCommand+0x612>
    2676:	98 a3       	std	Y+32, r25	; 0x20
    2678:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    267a:	89 a1       	ldd	r24, Y+33	; 0x21
    267c:	9a a1       	ldd	r25, Y+34	; 0x22
    267e:	01 97       	sbiw	r24, 0x01	; 1
    2680:	9a a3       	std	Y+34, r25	; 0x22
    2682:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2684:	89 a1       	ldd	r24, Y+33	; 0x21
    2686:	9a a1       	ldd	r25, Y+34	; 0x22
    2688:	00 97       	sbiw	r24, 0x00	; 0
    268a:	69 f7       	brne	.-38     	; 0x2666 <LCD_sendCommand+0x606>
    268c:	14 c0       	rjmp	.+40     	; 0x26b6 <LCD_sendCommand+0x656>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    268e:	6b a1       	ldd	r22, Y+35	; 0x23
    2690:	7c a1       	ldd	r23, Y+36	; 0x24
    2692:	8d a1       	ldd	r24, Y+37	; 0x25
    2694:	9e a1       	ldd	r25, Y+38	; 0x26
    2696:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    269a:	dc 01       	movw	r26, r24
    269c:	cb 01       	movw	r24, r22
    269e:	9a a3       	std	Y+34, r25	; 0x22
    26a0:	89 a3       	std	Y+33, r24	; 0x21
    26a2:	89 a1       	ldd	r24, Y+33	; 0x21
    26a4:	9a a1       	ldd	r25, Y+34	; 0x22
    26a6:	9e 8f       	std	Y+30, r25	; 0x1e
    26a8:	8d 8f       	std	Y+29, r24	; 0x1d
    26aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26ac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26ae:	01 97       	sbiw	r24, 0x01	; 1
    26b0:	f1 f7       	brne	.-4      	; 0x26ae <LCD_sendCommand+0x64e>
    26b2:	9e 8f       	std	Y+30, r25	; 0x1e
    26b4:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 0), GET_BIT( command, 0 ));
    26b6:	fe 01       	movw	r30, r28
    26b8:	ed 59       	subi	r30, 0x9D	; 157
    26ba:	ff 4f       	sbci	r31, 0xFF	; 255
    26bc:	80 81       	ld	r24, Z
    26be:	98 2f       	mov	r25, r24
    26c0:	91 70       	andi	r25, 0x01	; 1
    26c2:	80 e0       	ldi	r24, 0x00	; 0
    26c4:	63 e0       	ldi	r22, 0x03	; 3
    26c6:	49 2f       	mov	r20, r25
    26c8:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 1), GET_BIT( command, 1 ));
    26cc:	fe 01       	movw	r30, r28
    26ce:	ed 59       	subi	r30, 0x9D	; 157
    26d0:	ff 4f       	sbci	r31, 0xFF	; 255
    26d2:	80 81       	ld	r24, Z
    26d4:	86 95       	lsr	r24
    26d6:	98 2f       	mov	r25, r24
    26d8:	91 70       	andi	r25, 0x01	; 1
    26da:	80 e0       	ldi	r24, 0x00	; 0
    26dc:	64 e0       	ldi	r22, 0x04	; 4
    26de:	49 2f       	mov	r20, r25
    26e0:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 2), GET_BIT( command, 2 ));
    26e4:	fe 01       	movw	r30, r28
    26e6:	ed 59       	subi	r30, 0x9D	; 157
    26e8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ea:	80 81       	ld	r24, Z
    26ec:	86 95       	lsr	r24
    26ee:	86 95       	lsr	r24
    26f0:	98 2f       	mov	r25, r24
    26f2:	91 70       	andi	r25, 0x01	; 1
    26f4:	80 e0       	ldi	r24, 0x00	; 0
    26f6:	65 e0       	ldi	r22, 0x05	; 5
    26f8:	49 2f       	mov	r20, r25
    26fa:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 3), GET_BIT( command, 3 ));
    26fe:	fe 01       	movw	r30, r28
    2700:	ed 59       	subi	r30, 0x9D	; 157
    2702:	ff 4f       	sbci	r31, 0xFF	; 255
    2704:	80 81       	ld	r24, Z
    2706:	86 95       	lsr	r24
    2708:	86 95       	lsr	r24
    270a:	86 95       	lsr	r24
    270c:	98 2f       	mov	r25, r24
    270e:	91 70       	andi	r25, 0x01	; 1
    2710:	80 e0       	ldi	r24, 0x00	; 0
    2712:	66 e0       	ldi	r22, 0x06	; 6
    2714:	49 2f       	mov	r20, r25
    2716:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
    271a:	80 e0       	ldi	r24, 0x00	; 0
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	a0 e8       	ldi	r26, 0x80	; 128
    2720:	bf e3       	ldi	r27, 0x3F	; 63
    2722:	89 8f       	std	Y+25, r24	; 0x19
    2724:	9a 8f       	std	Y+26, r25	; 0x1a
    2726:	ab 8f       	std	Y+27, r26	; 0x1b
    2728:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    272a:	69 8d       	ldd	r22, Y+25	; 0x19
    272c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    272e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2730:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2732:	20 e0       	ldi	r18, 0x00	; 0
    2734:	30 e0       	ldi	r19, 0x00	; 0
    2736:	4a e7       	ldi	r20, 0x7A	; 122
    2738:	53 e4       	ldi	r21, 0x43	; 67
    273a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    273e:	dc 01       	movw	r26, r24
    2740:	cb 01       	movw	r24, r22
    2742:	8d 8b       	std	Y+21, r24	; 0x15
    2744:	9e 8b       	std	Y+22, r25	; 0x16
    2746:	af 8b       	std	Y+23, r26	; 0x17
    2748:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    274a:	6d 89       	ldd	r22, Y+21	; 0x15
    274c:	7e 89       	ldd	r23, Y+22	; 0x16
    274e:	8f 89       	ldd	r24, Y+23	; 0x17
    2750:	98 8d       	ldd	r25, Y+24	; 0x18
    2752:	20 e0       	ldi	r18, 0x00	; 0
    2754:	30 e0       	ldi	r19, 0x00	; 0
    2756:	40 e8       	ldi	r20, 0x80	; 128
    2758:	5f e3       	ldi	r21, 0x3F	; 63
    275a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    275e:	88 23       	and	r24, r24
    2760:	2c f4       	brge	.+10     	; 0x276c <LCD_sendCommand+0x70c>
		__ticks = 1;
    2762:	81 e0       	ldi	r24, 0x01	; 1
    2764:	90 e0       	ldi	r25, 0x00	; 0
    2766:	9c 8b       	std	Y+20, r25	; 0x14
    2768:	8b 8b       	std	Y+19, r24	; 0x13
    276a:	3f c0       	rjmp	.+126    	; 0x27ea <LCD_sendCommand+0x78a>
	else if (__tmp > 65535)
    276c:	6d 89       	ldd	r22, Y+21	; 0x15
    276e:	7e 89       	ldd	r23, Y+22	; 0x16
    2770:	8f 89       	ldd	r24, Y+23	; 0x17
    2772:	98 8d       	ldd	r25, Y+24	; 0x18
    2774:	20 e0       	ldi	r18, 0x00	; 0
    2776:	3f ef       	ldi	r19, 0xFF	; 255
    2778:	4f e7       	ldi	r20, 0x7F	; 127
    277a:	57 e4       	ldi	r21, 0x47	; 71
    277c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2780:	18 16       	cp	r1, r24
    2782:	4c f5       	brge	.+82     	; 0x27d6 <LCD_sendCommand+0x776>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2784:	69 8d       	ldd	r22, Y+25	; 0x19
    2786:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2788:	8b 8d       	ldd	r24, Y+27	; 0x1b
    278a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    278c:	20 e0       	ldi	r18, 0x00	; 0
    278e:	30 e0       	ldi	r19, 0x00	; 0
    2790:	40 e2       	ldi	r20, 0x20	; 32
    2792:	51 e4       	ldi	r21, 0x41	; 65
    2794:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2798:	dc 01       	movw	r26, r24
    279a:	cb 01       	movw	r24, r22
    279c:	bc 01       	movw	r22, r24
    279e:	cd 01       	movw	r24, r26
    27a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27a4:	dc 01       	movw	r26, r24
    27a6:	cb 01       	movw	r24, r22
    27a8:	9c 8b       	std	Y+20, r25	; 0x14
    27aa:	8b 8b       	std	Y+19, r24	; 0x13
    27ac:	0f c0       	rjmp	.+30     	; 0x27cc <LCD_sendCommand+0x76c>
    27ae:	89 e1       	ldi	r24, 0x19	; 25
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	9a 8b       	std	Y+18, r25	; 0x12
    27b4:	89 8b       	std	Y+17, r24	; 0x11
    27b6:	89 89       	ldd	r24, Y+17	; 0x11
    27b8:	9a 89       	ldd	r25, Y+18	; 0x12
    27ba:	01 97       	sbiw	r24, 0x01	; 1
    27bc:	f1 f7       	brne	.-4      	; 0x27ba <LCD_sendCommand+0x75a>
    27be:	9a 8b       	std	Y+18, r25	; 0x12
    27c0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27c2:	8b 89       	ldd	r24, Y+19	; 0x13
    27c4:	9c 89       	ldd	r25, Y+20	; 0x14
    27c6:	01 97       	sbiw	r24, 0x01	; 1
    27c8:	9c 8b       	std	Y+20, r25	; 0x14
    27ca:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27cc:	8b 89       	ldd	r24, Y+19	; 0x13
    27ce:	9c 89       	ldd	r25, Y+20	; 0x14
    27d0:	00 97       	sbiw	r24, 0x00	; 0
    27d2:	69 f7       	brne	.-38     	; 0x27ae <LCD_sendCommand+0x74e>
    27d4:	14 c0       	rjmp	.+40     	; 0x27fe <LCD_sendCommand+0x79e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27d6:	6d 89       	ldd	r22, Y+21	; 0x15
    27d8:	7e 89       	ldd	r23, Y+22	; 0x16
    27da:	8f 89       	ldd	r24, Y+23	; 0x17
    27dc:	98 8d       	ldd	r25, Y+24	; 0x18
    27de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27e2:	dc 01       	movw	r26, r24
    27e4:	cb 01       	movw	r24, r22
    27e6:	9c 8b       	std	Y+20, r25	; 0x14
    27e8:	8b 8b       	std	Y+19, r24	; 0x13
    27ea:	8b 89       	ldd	r24, Y+19	; 0x13
    27ec:	9c 89       	ldd	r25, Y+20	; 0x14
    27ee:	98 8b       	std	Y+16, r25	; 0x10
    27f0:	8f 87       	std	Y+15, r24	; 0x0f
    27f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    27f4:	98 89       	ldd	r25, Y+16	; 0x10
    27f6:	01 97       	sbiw	r24, 0x01	; 1
    27f8:	f1 f7       	brne	.-4      	; 0x27f6 <LCD_sendCommand+0x796>
    27fa:	98 8b       	std	Y+16, r25	; 0x10
    27fc:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1); /* delay for processing Tdsw = 100ns */

		// Clear Enable Pin to '0'
		GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
    27fe:	80 e0       	ldi	r24, 0x00	; 0
    2800:	62 e0       	ldi	r22, 0x02	; 2
    2802:	40 e0       	ldi	r20, 0x00	; 0
    2804:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
    2808:	80 e0       	ldi	r24, 0x00	; 0
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	a0 e8       	ldi	r26, 0x80	; 128
    280e:	bf e3       	ldi	r27, 0x3F	; 63
    2810:	8b 87       	std	Y+11, r24	; 0x0b
    2812:	9c 87       	std	Y+12, r25	; 0x0c
    2814:	ad 87       	std	Y+13, r26	; 0x0d
    2816:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2818:	6b 85       	ldd	r22, Y+11	; 0x0b
    281a:	7c 85       	ldd	r23, Y+12	; 0x0c
    281c:	8d 85       	ldd	r24, Y+13	; 0x0d
    281e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2820:	20 e0       	ldi	r18, 0x00	; 0
    2822:	30 e0       	ldi	r19, 0x00	; 0
    2824:	4a e7       	ldi	r20, 0x7A	; 122
    2826:	53 e4       	ldi	r21, 0x43	; 67
    2828:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    282c:	dc 01       	movw	r26, r24
    282e:	cb 01       	movw	r24, r22
    2830:	8f 83       	std	Y+7, r24	; 0x07
    2832:	98 87       	std	Y+8, r25	; 0x08
    2834:	a9 87       	std	Y+9, r26	; 0x09
    2836:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2838:	6f 81       	ldd	r22, Y+7	; 0x07
    283a:	78 85       	ldd	r23, Y+8	; 0x08
    283c:	89 85       	ldd	r24, Y+9	; 0x09
    283e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2840:	20 e0       	ldi	r18, 0x00	; 0
    2842:	30 e0       	ldi	r19, 0x00	; 0
    2844:	40 e8       	ldi	r20, 0x80	; 128
    2846:	5f e3       	ldi	r21, 0x3F	; 63
    2848:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    284c:	88 23       	and	r24, r24
    284e:	2c f4       	brge	.+10     	; 0x285a <LCD_sendCommand+0x7fa>
		__ticks = 1;
    2850:	81 e0       	ldi	r24, 0x01	; 1
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	9e 83       	std	Y+6, r25	; 0x06
    2856:	8d 83       	std	Y+5, r24	; 0x05
    2858:	3f c0       	rjmp	.+126    	; 0x28d8 <LCD_sendCommand+0x878>
	else if (__tmp > 65535)
    285a:	6f 81       	ldd	r22, Y+7	; 0x07
    285c:	78 85       	ldd	r23, Y+8	; 0x08
    285e:	89 85       	ldd	r24, Y+9	; 0x09
    2860:	9a 85       	ldd	r25, Y+10	; 0x0a
    2862:	20 e0       	ldi	r18, 0x00	; 0
    2864:	3f ef       	ldi	r19, 0xFF	; 255
    2866:	4f e7       	ldi	r20, 0x7F	; 127
    2868:	57 e4       	ldi	r21, 0x47	; 71
    286a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    286e:	18 16       	cp	r1, r24
    2870:	4c f5       	brge	.+82     	; 0x28c4 <LCD_sendCommand+0x864>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2872:	6b 85       	ldd	r22, Y+11	; 0x0b
    2874:	7c 85       	ldd	r23, Y+12	; 0x0c
    2876:	8d 85       	ldd	r24, Y+13	; 0x0d
    2878:	9e 85       	ldd	r25, Y+14	; 0x0e
    287a:	20 e0       	ldi	r18, 0x00	; 0
    287c:	30 e0       	ldi	r19, 0x00	; 0
    287e:	40 e2       	ldi	r20, 0x20	; 32
    2880:	51 e4       	ldi	r21, 0x41	; 65
    2882:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2886:	dc 01       	movw	r26, r24
    2888:	cb 01       	movw	r24, r22
    288a:	bc 01       	movw	r22, r24
    288c:	cd 01       	movw	r24, r26
    288e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2892:	dc 01       	movw	r26, r24
    2894:	cb 01       	movw	r24, r22
    2896:	9e 83       	std	Y+6, r25	; 0x06
    2898:	8d 83       	std	Y+5, r24	; 0x05
    289a:	0f c0       	rjmp	.+30     	; 0x28ba <LCD_sendCommand+0x85a>
    289c:	89 e1       	ldi	r24, 0x19	; 25
    289e:	90 e0       	ldi	r25, 0x00	; 0
    28a0:	9c 83       	std	Y+4, r25	; 0x04
    28a2:	8b 83       	std	Y+3, r24	; 0x03
    28a4:	8b 81       	ldd	r24, Y+3	; 0x03
    28a6:	9c 81       	ldd	r25, Y+4	; 0x04
    28a8:	01 97       	sbiw	r24, 0x01	; 1
    28aa:	f1 f7       	brne	.-4      	; 0x28a8 <LCD_sendCommand+0x848>
    28ac:	9c 83       	std	Y+4, r25	; 0x04
    28ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28b0:	8d 81       	ldd	r24, Y+5	; 0x05
    28b2:	9e 81       	ldd	r25, Y+6	; 0x06
    28b4:	01 97       	sbiw	r24, 0x01	; 1
    28b6:	9e 83       	std	Y+6, r25	; 0x06
    28b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28ba:	8d 81       	ldd	r24, Y+5	; 0x05
    28bc:	9e 81       	ldd	r25, Y+6	; 0x06
    28be:	00 97       	sbiw	r24, 0x00	; 0
    28c0:	69 f7       	brne	.-38     	; 0x289c <LCD_sendCommand+0x83c>
    28c2:	14 c0       	rjmp	.+40     	; 0x28ec <LCD_sendCommand+0x88c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28c4:	6f 81       	ldd	r22, Y+7	; 0x07
    28c6:	78 85       	ldd	r23, Y+8	; 0x08
    28c8:	89 85       	ldd	r24, Y+9	; 0x09
    28ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    28cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d0:	dc 01       	movw	r26, r24
    28d2:	cb 01       	movw	r24, r22
    28d4:	9e 83       	std	Y+6, r25	; 0x06
    28d6:	8d 83       	std	Y+5, r24	; 0x05
    28d8:	8d 81       	ldd	r24, Y+5	; 0x05
    28da:	9e 81       	ldd	r25, Y+6	; 0x06
    28dc:	9a 83       	std	Y+2, r25	; 0x02
    28de:	89 83       	std	Y+1, r24	; 0x01
    28e0:	89 81       	ldd	r24, Y+1	; 0x01
    28e2:	9a 81       	ldd	r25, Y+2	; 0x02
    28e4:	01 97       	sbiw	r24, 0x01	; 1
    28e6:	f1 f7       	brne	.-4      	; 0x28e4 <LCD_sendCommand+0x884>
    28e8:	9a 83       	std	Y+2, r25	; 0x02
    28ea:	89 83       	std	Y+1, r24	; 0x01

		// Clear Enable Pin to '0'
		GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
		_delay_ms(1); /* delay for processing Th = 13ns */
	}
}
    28ec:	cd 59       	subi	r28, 0x9D	; 157
    28ee:	df 4f       	sbci	r29, 0xFF	; 255
    28f0:	0f b6       	in	r0, 0x3f	; 63
    28f2:	f8 94       	cli
    28f4:	de bf       	out	0x3e, r29	; 62
    28f6:	0f be       	out	0x3f, r0	; 63
    28f8:	cd bf       	out	0x3d, r28	; 61
    28fa:	cf 91       	pop	r28
    28fc:	df 91       	pop	r29
    28fe:	1f 91       	pop	r17
    2900:	0f 91       	pop	r16
    2902:	08 95       	ret

00002904 <LCD_displayCharacter>:


// Displays a character on the LCD
void LCD_displayCharacter(uint8 data) {
    2904:	0f 93       	push	r16
    2906:	1f 93       	push	r17
    2908:	df 93       	push	r29
    290a:	cf 93       	push	r28
    290c:	cd b7       	in	r28, 0x3d	; 61
    290e:	de b7       	in	r29, 0x3e	; 62
    2910:	c3 56       	subi	r28, 0x63	; 99
    2912:	d0 40       	sbci	r29, 0x00	; 0
    2914:	0f b6       	in	r0, 0x3f	; 63
    2916:	f8 94       	cli
    2918:	de bf       	out	0x3e, r29	; 62
    291a:	0f be       	out	0x3f, r0	; 63
    291c:	cd bf       	out	0x3d, r28	; 61
    291e:	fe 01       	movw	r30, r28
    2920:	ed 59       	subi	r30, 0x9D	; 157
    2922:	ff 4f       	sbci	r31, 0xFF	; 255
    2924:	80 83       	st	Z, r24
	// Set RS Pin to '1'
	GPIO_writePin(LCD_INIT_PORT, LCD_RS, LOGIC_HIGH);
    2926:	80 e0       	ldi	r24, 0x00	; 0
    2928:	61 e0       	ldi	r22, 0x01	; 1
    292a:	41 e0       	ldi	r20, 0x01	; 1
    292c:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
    2930:	fe 01       	movw	r30, r28
    2932:	e1 5a       	subi	r30, 0xA1	; 161
    2934:	ff 4f       	sbci	r31, 0xFF	; 255
    2936:	80 e0       	ldi	r24, 0x00	; 0
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	a0 e8       	ldi	r26, 0x80	; 128
    293c:	bf e3       	ldi	r27, 0x3F	; 63
    293e:	80 83       	st	Z, r24
    2940:	91 83       	std	Z+1, r25	; 0x01
    2942:	a2 83       	std	Z+2, r26	; 0x02
    2944:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2946:	8e 01       	movw	r16, r28
    2948:	05 5a       	subi	r16, 0xA5	; 165
    294a:	1f 4f       	sbci	r17, 0xFF	; 255
    294c:	fe 01       	movw	r30, r28
    294e:	e1 5a       	subi	r30, 0xA1	; 161
    2950:	ff 4f       	sbci	r31, 0xFF	; 255
    2952:	60 81       	ld	r22, Z
    2954:	71 81       	ldd	r23, Z+1	; 0x01
    2956:	82 81       	ldd	r24, Z+2	; 0x02
    2958:	93 81       	ldd	r25, Z+3	; 0x03
    295a:	20 e0       	ldi	r18, 0x00	; 0
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	4a e7       	ldi	r20, 0x7A	; 122
    2960:	53 e4       	ldi	r21, 0x43	; 67
    2962:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2966:	dc 01       	movw	r26, r24
    2968:	cb 01       	movw	r24, r22
    296a:	f8 01       	movw	r30, r16
    296c:	80 83       	st	Z, r24
    296e:	91 83       	std	Z+1, r25	; 0x01
    2970:	a2 83       	std	Z+2, r26	; 0x02
    2972:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2974:	fe 01       	movw	r30, r28
    2976:	e5 5a       	subi	r30, 0xA5	; 165
    2978:	ff 4f       	sbci	r31, 0xFF	; 255
    297a:	60 81       	ld	r22, Z
    297c:	71 81       	ldd	r23, Z+1	; 0x01
    297e:	82 81       	ldd	r24, Z+2	; 0x02
    2980:	93 81       	ldd	r25, Z+3	; 0x03
    2982:	20 e0       	ldi	r18, 0x00	; 0
    2984:	30 e0       	ldi	r19, 0x00	; 0
    2986:	40 e8       	ldi	r20, 0x80	; 128
    2988:	5f e3       	ldi	r21, 0x3F	; 63
    298a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    298e:	88 23       	and	r24, r24
    2990:	44 f4       	brge	.+16     	; 0x29a2 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    2992:	fe 01       	movw	r30, r28
    2994:	e7 5a       	subi	r30, 0xA7	; 167
    2996:	ff 4f       	sbci	r31, 0xFF	; 255
    2998:	81 e0       	ldi	r24, 0x01	; 1
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	91 83       	std	Z+1, r25	; 0x01
    299e:	80 83       	st	Z, r24
    29a0:	64 c0       	rjmp	.+200    	; 0x2a6a <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    29a2:	fe 01       	movw	r30, r28
    29a4:	e5 5a       	subi	r30, 0xA5	; 165
    29a6:	ff 4f       	sbci	r31, 0xFF	; 255
    29a8:	60 81       	ld	r22, Z
    29aa:	71 81       	ldd	r23, Z+1	; 0x01
    29ac:	82 81       	ldd	r24, Z+2	; 0x02
    29ae:	93 81       	ldd	r25, Z+3	; 0x03
    29b0:	20 e0       	ldi	r18, 0x00	; 0
    29b2:	3f ef       	ldi	r19, 0xFF	; 255
    29b4:	4f e7       	ldi	r20, 0x7F	; 127
    29b6:	57 e4       	ldi	r21, 0x47	; 71
    29b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29bc:	18 16       	cp	r1, r24
    29be:	0c f0       	brlt	.+2      	; 0x29c2 <LCD_displayCharacter+0xbe>
    29c0:	43 c0       	rjmp	.+134    	; 0x2a48 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29c2:	fe 01       	movw	r30, r28
    29c4:	e1 5a       	subi	r30, 0xA1	; 161
    29c6:	ff 4f       	sbci	r31, 0xFF	; 255
    29c8:	60 81       	ld	r22, Z
    29ca:	71 81       	ldd	r23, Z+1	; 0x01
    29cc:	82 81       	ldd	r24, Z+2	; 0x02
    29ce:	93 81       	ldd	r25, Z+3	; 0x03
    29d0:	20 e0       	ldi	r18, 0x00	; 0
    29d2:	30 e0       	ldi	r19, 0x00	; 0
    29d4:	40 e2       	ldi	r20, 0x20	; 32
    29d6:	51 e4       	ldi	r21, 0x41	; 65
    29d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29dc:	dc 01       	movw	r26, r24
    29de:	cb 01       	movw	r24, r22
    29e0:	8e 01       	movw	r16, r28
    29e2:	07 5a       	subi	r16, 0xA7	; 167
    29e4:	1f 4f       	sbci	r17, 0xFF	; 255
    29e6:	bc 01       	movw	r22, r24
    29e8:	cd 01       	movw	r24, r26
    29ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ee:	dc 01       	movw	r26, r24
    29f0:	cb 01       	movw	r24, r22
    29f2:	f8 01       	movw	r30, r16
    29f4:	91 83       	std	Z+1, r25	; 0x01
    29f6:	80 83       	st	Z, r24
    29f8:	1f c0       	rjmp	.+62     	; 0x2a38 <LCD_displayCharacter+0x134>
    29fa:	fe 01       	movw	r30, r28
    29fc:	e9 5a       	subi	r30, 0xA9	; 169
    29fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2a00:	89 e1       	ldi	r24, 0x19	; 25
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	91 83       	std	Z+1, r25	; 0x01
    2a06:	80 83       	st	Z, r24
    2a08:	fe 01       	movw	r30, r28
    2a0a:	e9 5a       	subi	r30, 0xA9	; 169
    2a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0e:	80 81       	ld	r24, Z
    2a10:	91 81       	ldd	r25, Z+1	; 0x01
    2a12:	01 97       	sbiw	r24, 0x01	; 1
    2a14:	f1 f7       	brne	.-4      	; 0x2a12 <LCD_displayCharacter+0x10e>
    2a16:	fe 01       	movw	r30, r28
    2a18:	e9 5a       	subi	r30, 0xA9	; 169
    2a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1c:	91 83       	std	Z+1, r25	; 0x01
    2a1e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a20:	de 01       	movw	r26, r28
    2a22:	a7 5a       	subi	r26, 0xA7	; 167
    2a24:	bf 4f       	sbci	r27, 0xFF	; 255
    2a26:	fe 01       	movw	r30, r28
    2a28:	e7 5a       	subi	r30, 0xA7	; 167
    2a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2c:	80 81       	ld	r24, Z
    2a2e:	91 81       	ldd	r25, Z+1	; 0x01
    2a30:	01 97       	sbiw	r24, 0x01	; 1
    2a32:	11 96       	adiw	r26, 0x01	; 1
    2a34:	9c 93       	st	X, r25
    2a36:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a38:	fe 01       	movw	r30, r28
    2a3a:	e7 5a       	subi	r30, 0xA7	; 167
    2a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3e:	80 81       	ld	r24, Z
    2a40:	91 81       	ldd	r25, Z+1	; 0x01
    2a42:	00 97       	sbiw	r24, 0x00	; 0
    2a44:	d1 f6       	brne	.-76     	; 0x29fa <LCD_displayCharacter+0xf6>
    2a46:	27 c0       	rjmp	.+78     	; 0x2a96 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a48:	8e 01       	movw	r16, r28
    2a4a:	07 5a       	subi	r16, 0xA7	; 167
    2a4c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a4e:	fe 01       	movw	r30, r28
    2a50:	e5 5a       	subi	r30, 0xA5	; 165
    2a52:	ff 4f       	sbci	r31, 0xFF	; 255
    2a54:	60 81       	ld	r22, Z
    2a56:	71 81       	ldd	r23, Z+1	; 0x01
    2a58:	82 81       	ldd	r24, Z+2	; 0x02
    2a5a:	93 81       	ldd	r25, Z+3	; 0x03
    2a5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a60:	dc 01       	movw	r26, r24
    2a62:	cb 01       	movw	r24, r22
    2a64:	f8 01       	movw	r30, r16
    2a66:	91 83       	std	Z+1, r25	; 0x01
    2a68:	80 83       	st	Z, r24
    2a6a:	de 01       	movw	r26, r28
    2a6c:	ab 5a       	subi	r26, 0xAB	; 171
    2a6e:	bf 4f       	sbci	r27, 0xFF	; 255
    2a70:	fe 01       	movw	r30, r28
    2a72:	e7 5a       	subi	r30, 0xA7	; 167
    2a74:	ff 4f       	sbci	r31, 0xFF	; 255
    2a76:	80 81       	ld	r24, Z
    2a78:	91 81       	ldd	r25, Z+1	; 0x01
    2a7a:	8d 93       	st	X+, r24
    2a7c:	9c 93       	st	X, r25
    2a7e:	fe 01       	movw	r30, r28
    2a80:	eb 5a       	subi	r30, 0xAB	; 171
    2a82:	ff 4f       	sbci	r31, 0xFF	; 255
    2a84:	80 81       	ld	r24, Z
    2a86:	91 81       	ldd	r25, Z+1	; 0x01
    2a88:	01 97       	sbiw	r24, 0x01	; 1
    2a8a:	f1 f7       	brne	.-4      	; 0x2a88 <LCD_displayCharacter+0x184>
    2a8c:	fe 01       	movw	r30, r28
    2a8e:	eb 5a       	subi	r30, 0xAB	; 171
    2a90:	ff 4f       	sbci	r31, 0xFF	; 255
    2a92:	91 83       	std	Z+1, r25	; 0x01
    2a94:	80 83       	st	Z, r24
	_delay_ms(1);

	// Set Enable Pin to '1'
	GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
    2a96:	80 e0       	ldi	r24, 0x00	; 0
    2a98:	62 e0       	ldi	r22, 0x02	; 2
    2a9a:	41 e0       	ldi	r20, 0x01	; 1
    2a9c:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
    2aa0:	fe 01       	movw	r30, r28
    2aa2:	ef 5a       	subi	r30, 0xAF	; 175
    2aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa6:	80 e0       	ldi	r24, 0x00	; 0
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	a0 e8       	ldi	r26, 0x80	; 128
    2aac:	bf e3       	ldi	r27, 0x3F	; 63
    2aae:	80 83       	st	Z, r24
    2ab0:	91 83       	std	Z+1, r25	; 0x01
    2ab2:	a2 83       	std	Z+2, r26	; 0x02
    2ab4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ab6:	8e 01       	movw	r16, r28
    2ab8:	03 5b       	subi	r16, 0xB3	; 179
    2aba:	1f 4f       	sbci	r17, 0xFF	; 255
    2abc:	fe 01       	movw	r30, r28
    2abe:	ef 5a       	subi	r30, 0xAF	; 175
    2ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac2:	60 81       	ld	r22, Z
    2ac4:	71 81       	ldd	r23, Z+1	; 0x01
    2ac6:	82 81       	ldd	r24, Z+2	; 0x02
    2ac8:	93 81       	ldd	r25, Z+3	; 0x03
    2aca:	20 e0       	ldi	r18, 0x00	; 0
    2acc:	30 e0       	ldi	r19, 0x00	; 0
    2ace:	4a e7       	ldi	r20, 0x7A	; 122
    2ad0:	53 e4       	ldi	r21, 0x43	; 67
    2ad2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ad6:	dc 01       	movw	r26, r24
    2ad8:	cb 01       	movw	r24, r22
    2ada:	f8 01       	movw	r30, r16
    2adc:	80 83       	st	Z, r24
    2ade:	91 83       	std	Z+1, r25	; 0x01
    2ae0:	a2 83       	std	Z+2, r26	; 0x02
    2ae2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ae4:	fe 01       	movw	r30, r28
    2ae6:	e3 5b       	subi	r30, 0xB3	; 179
    2ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aea:	60 81       	ld	r22, Z
    2aec:	71 81       	ldd	r23, Z+1	; 0x01
    2aee:	82 81       	ldd	r24, Z+2	; 0x02
    2af0:	93 81       	ldd	r25, Z+3	; 0x03
    2af2:	20 e0       	ldi	r18, 0x00	; 0
    2af4:	30 e0       	ldi	r19, 0x00	; 0
    2af6:	40 e8       	ldi	r20, 0x80	; 128
    2af8:	5f e3       	ldi	r21, 0x3F	; 63
    2afa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2afe:	88 23       	and	r24, r24
    2b00:	44 f4       	brge	.+16     	; 0x2b12 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2b02:	fe 01       	movw	r30, r28
    2b04:	e5 5b       	subi	r30, 0xB5	; 181
    2b06:	ff 4f       	sbci	r31, 0xFF	; 255
    2b08:	81 e0       	ldi	r24, 0x01	; 1
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	91 83       	std	Z+1, r25	; 0x01
    2b0e:	80 83       	st	Z, r24
    2b10:	64 c0       	rjmp	.+200    	; 0x2bda <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2b12:	fe 01       	movw	r30, r28
    2b14:	e3 5b       	subi	r30, 0xB3	; 179
    2b16:	ff 4f       	sbci	r31, 0xFF	; 255
    2b18:	60 81       	ld	r22, Z
    2b1a:	71 81       	ldd	r23, Z+1	; 0x01
    2b1c:	82 81       	ldd	r24, Z+2	; 0x02
    2b1e:	93 81       	ldd	r25, Z+3	; 0x03
    2b20:	20 e0       	ldi	r18, 0x00	; 0
    2b22:	3f ef       	ldi	r19, 0xFF	; 255
    2b24:	4f e7       	ldi	r20, 0x7F	; 127
    2b26:	57 e4       	ldi	r21, 0x47	; 71
    2b28:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b2c:	18 16       	cp	r1, r24
    2b2e:	0c f0       	brlt	.+2      	; 0x2b32 <LCD_displayCharacter+0x22e>
    2b30:	43 c0       	rjmp	.+134    	; 0x2bb8 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b32:	fe 01       	movw	r30, r28
    2b34:	ef 5a       	subi	r30, 0xAF	; 175
    2b36:	ff 4f       	sbci	r31, 0xFF	; 255
    2b38:	60 81       	ld	r22, Z
    2b3a:	71 81       	ldd	r23, Z+1	; 0x01
    2b3c:	82 81       	ldd	r24, Z+2	; 0x02
    2b3e:	93 81       	ldd	r25, Z+3	; 0x03
    2b40:	20 e0       	ldi	r18, 0x00	; 0
    2b42:	30 e0       	ldi	r19, 0x00	; 0
    2b44:	40 e2       	ldi	r20, 0x20	; 32
    2b46:	51 e4       	ldi	r21, 0x41	; 65
    2b48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b4c:	dc 01       	movw	r26, r24
    2b4e:	cb 01       	movw	r24, r22
    2b50:	8e 01       	movw	r16, r28
    2b52:	05 5b       	subi	r16, 0xB5	; 181
    2b54:	1f 4f       	sbci	r17, 0xFF	; 255
    2b56:	bc 01       	movw	r22, r24
    2b58:	cd 01       	movw	r24, r26
    2b5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b5e:	dc 01       	movw	r26, r24
    2b60:	cb 01       	movw	r24, r22
    2b62:	f8 01       	movw	r30, r16
    2b64:	91 83       	std	Z+1, r25	; 0x01
    2b66:	80 83       	st	Z, r24
    2b68:	1f c0       	rjmp	.+62     	; 0x2ba8 <LCD_displayCharacter+0x2a4>
    2b6a:	fe 01       	movw	r30, r28
    2b6c:	e7 5b       	subi	r30, 0xB7	; 183
    2b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b70:	89 e1       	ldi	r24, 0x19	; 25
    2b72:	90 e0       	ldi	r25, 0x00	; 0
    2b74:	91 83       	std	Z+1, r25	; 0x01
    2b76:	80 83       	st	Z, r24
    2b78:	fe 01       	movw	r30, r28
    2b7a:	e7 5b       	subi	r30, 0xB7	; 183
    2b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7e:	80 81       	ld	r24, Z
    2b80:	91 81       	ldd	r25, Z+1	; 0x01
    2b82:	01 97       	sbiw	r24, 0x01	; 1
    2b84:	f1 f7       	brne	.-4      	; 0x2b82 <LCD_displayCharacter+0x27e>
    2b86:	fe 01       	movw	r30, r28
    2b88:	e7 5b       	subi	r30, 0xB7	; 183
    2b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8c:	91 83       	std	Z+1, r25	; 0x01
    2b8e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b90:	de 01       	movw	r26, r28
    2b92:	a5 5b       	subi	r26, 0xB5	; 181
    2b94:	bf 4f       	sbci	r27, 0xFF	; 255
    2b96:	fe 01       	movw	r30, r28
    2b98:	e5 5b       	subi	r30, 0xB5	; 181
    2b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9c:	80 81       	ld	r24, Z
    2b9e:	91 81       	ldd	r25, Z+1	; 0x01
    2ba0:	01 97       	sbiw	r24, 0x01	; 1
    2ba2:	11 96       	adiw	r26, 0x01	; 1
    2ba4:	9c 93       	st	X, r25
    2ba6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ba8:	fe 01       	movw	r30, r28
    2baa:	e5 5b       	subi	r30, 0xB5	; 181
    2bac:	ff 4f       	sbci	r31, 0xFF	; 255
    2bae:	80 81       	ld	r24, Z
    2bb0:	91 81       	ldd	r25, Z+1	; 0x01
    2bb2:	00 97       	sbiw	r24, 0x00	; 0
    2bb4:	d1 f6       	brne	.-76     	; 0x2b6a <LCD_displayCharacter+0x266>
    2bb6:	27 c0       	rjmp	.+78     	; 0x2c06 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bb8:	8e 01       	movw	r16, r28
    2bba:	05 5b       	subi	r16, 0xB5	; 181
    2bbc:	1f 4f       	sbci	r17, 0xFF	; 255
    2bbe:	fe 01       	movw	r30, r28
    2bc0:	e3 5b       	subi	r30, 0xB3	; 179
    2bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc4:	60 81       	ld	r22, Z
    2bc6:	71 81       	ldd	r23, Z+1	; 0x01
    2bc8:	82 81       	ldd	r24, Z+2	; 0x02
    2bca:	93 81       	ldd	r25, Z+3	; 0x03
    2bcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd0:	dc 01       	movw	r26, r24
    2bd2:	cb 01       	movw	r24, r22
    2bd4:	f8 01       	movw	r30, r16
    2bd6:	91 83       	std	Z+1, r25	; 0x01
    2bd8:	80 83       	st	Z, r24
    2bda:	de 01       	movw	r26, r28
    2bdc:	a9 5b       	subi	r26, 0xB9	; 185
    2bde:	bf 4f       	sbci	r27, 0xFF	; 255
    2be0:	fe 01       	movw	r30, r28
    2be2:	e5 5b       	subi	r30, 0xB5	; 181
    2be4:	ff 4f       	sbci	r31, 0xFF	; 255
    2be6:	80 81       	ld	r24, Z
    2be8:	91 81       	ldd	r25, Z+1	; 0x01
    2bea:	8d 93       	st	X+, r24
    2bec:	9c 93       	st	X, r25
    2bee:	fe 01       	movw	r30, r28
    2bf0:	e9 5b       	subi	r30, 0xB9	; 185
    2bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf4:	80 81       	ld	r24, Z
    2bf6:	91 81       	ldd	r25, Z+1	; 0x01
    2bf8:	01 97       	sbiw	r24, 0x01	; 1
    2bfa:	f1 f7       	brne	.-4      	; 0x2bf8 <LCD_displayCharacter+0x2f4>
    2bfc:	fe 01       	movw	r30, r28
    2bfe:	e9 5b       	subi	r30, 0xB9	; 185
    2c00:	ff 4f       	sbci	r31, 0xFF	; 255
    2c02:	91 83       	std	Z+1, r25	; 0x01
    2c04:	80 83       	st	Z, r24
	_delay_ms(1);

	// Inserts the data in the assigned PORT to be sent to the LCD
	// Inserts the data in the assigned PORT to be sent to the LCD
	if (LCD_BIT_MODE == 4) {
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 0), GET_BIT( data, 4 ));
    2c06:	fe 01       	movw	r30, r28
    2c08:	ed 59       	subi	r30, 0x9D	; 157
    2c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0c:	80 81       	ld	r24, Z
    2c0e:	82 95       	swap	r24
    2c10:	8f 70       	andi	r24, 0x0F	; 15
    2c12:	98 2f       	mov	r25, r24
    2c14:	91 70       	andi	r25, 0x01	; 1
    2c16:	80 e0       	ldi	r24, 0x00	; 0
    2c18:	63 e0       	ldi	r22, 0x03	; 3
    2c1a:	49 2f       	mov	r20, r25
    2c1c:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 1), GET_BIT( data, 5 ));
    2c20:	fe 01       	movw	r30, r28
    2c22:	ed 59       	subi	r30, 0x9D	; 157
    2c24:	ff 4f       	sbci	r31, 0xFF	; 255
    2c26:	80 81       	ld	r24, Z
    2c28:	82 95       	swap	r24
    2c2a:	86 95       	lsr	r24
    2c2c:	87 70       	andi	r24, 0x07	; 7
    2c2e:	98 2f       	mov	r25, r24
    2c30:	91 70       	andi	r25, 0x01	; 1
    2c32:	80 e0       	ldi	r24, 0x00	; 0
    2c34:	64 e0       	ldi	r22, 0x04	; 4
    2c36:	49 2f       	mov	r20, r25
    2c38:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 2), GET_BIT( data, 6 ));
    2c3c:	fe 01       	movw	r30, r28
    2c3e:	ed 59       	subi	r30, 0x9D	; 157
    2c40:	ff 4f       	sbci	r31, 0xFF	; 255
    2c42:	80 81       	ld	r24, Z
    2c44:	82 95       	swap	r24
    2c46:	86 95       	lsr	r24
    2c48:	86 95       	lsr	r24
    2c4a:	83 70       	andi	r24, 0x03	; 3
    2c4c:	98 2f       	mov	r25, r24
    2c4e:	91 70       	andi	r25, 0x01	; 1
    2c50:	80 e0       	ldi	r24, 0x00	; 0
    2c52:	65 e0       	ldi	r22, 0x05	; 5
    2c54:	49 2f       	mov	r20, r25
    2c56:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 3), GET_BIT( data, 7 ));
    2c5a:	fe 01       	movw	r30, r28
    2c5c:	ed 59       	subi	r30, 0x9D	; 157
    2c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c60:	80 81       	ld	r24, Z
    2c62:	98 2f       	mov	r25, r24
    2c64:	99 1f       	adc	r25, r25
    2c66:	99 27       	eor	r25, r25
    2c68:	99 1f       	adc	r25, r25
    2c6a:	80 e0       	ldi	r24, 0x00	; 0
    2c6c:	66 e0       	ldi	r22, 0x06	; 6
    2c6e:	49 2f       	mov	r20, r25
    2c70:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
    2c74:	fe 01       	movw	r30, r28
    2c76:	ed 5b       	subi	r30, 0xBD	; 189
    2c78:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7a:	80 e0       	ldi	r24, 0x00	; 0
    2c7c:	90 e0       	ldi	r25, 0x00	; 0
    2c7e:	a0 e8       	ldi	r26, 0x80	; 128
    2c80:	bf e3       	ldi	r27, 0x3F	; 63
    2c82:	80 83       	st	Z, r24
    2c84:	91 83       	std	Z+1, r25	; 0x01
    2c86:	a2 83       	std	Z+2, r26	; 0x02
    2c88:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c8a:	8e 01       	movw	r16, r28
    2c8c:	01 5c       	subi	r16, 0xC1	; 193
    2c8e:	1f 4f       	sbci	r17, 0xFF	; 255
    2c90:	fe 01       	movw	r30, r28
    2c92:	ed 5b       	subi	r30, 0xBD	; 189
    2c94:	ff 4f       	sbci	r31, 0xFF	; 255
    2c96:	60 81       	ld	r22, Z
    2c98:	71 81       	ldd	r23, Z+1	; 0x01
    2c9a:	82 81       	ldd	r24, Z+2	; 0x02
    2c9c:	93 81       	ldd	r25, Z+3	; 0x03
    2c9e:	20 e0       	ldi	r18, 0x00	; 0
    2ca0:	30 e0       	ldi	r19, 0x00	; 0
    2ca2:	4a e7       	ldi	r20, 0x7A	; 122
    2ca4:	53 e4       	ldi	r21, 0x43	; 67
    2ca6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2caa:	dc 01       	movw	r26, r24
    2cac:	cb 01       	movw	r24, r22
    2cae:	f8 01       	movw	r30, r16
    2cb0:	80 83       	st	Z, r24
    2cb2:	91 83       	std	Z+1, r25	; 0x01
    2cb4:	a2 83       	std	Z+2, r26	; 0x02
    2cb6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2cb8:	fe 01       	movw	r30, r28
    2cba:	ff 96       	adiw	r30, 0x3f	; 63
    2cbc:	60 81       	ld	r22, Z
    2cbe:	71 81       	ldd	r23, Z+1	; 0x01
    2cc0:	82 81       	ldd	r24, Z+2	; 0x02
    2cc2:	93 81       	ldd	r25, Z+3	; 0x03
    2cc4:	20 e0       	ldi	r18, 0x00	; 0
    2cc6:	30 e0       	ldi	r19, 0x00	; 0
    2cc8:	40 e8       	ldi	r20, 0x80	; 128
    2cca:	5f e3       	ldi	r21, 0x3F	; 63
    2ccc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cd0:	88 23       	and	r24, r24
    2cd2:	2c f4       	brge	.+10     	; 0x2cde <LCD_displayCharacter+0x3da>
		__ticks = 1;
    2cd4:	81 e0       	ldi	r24, 0x01	; 1
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	9e af       	std	Y+62, r25	; 0x3e
    2cda:	8d af       	std	Y+61, r24	; 0x3d
    2cdc:	46 c0       	rjmp	.+140    	; 0x2d6a <LCD_displayCharacter+0x466>
	else if (__tmp > 65535)
    2cde:	fe 01       	movw	r30, r28
    2ce0:	ff 96       	adiw	r30, 0x3f	; 63
    2ce2:	60 81       	ld	r22, Z
    2ce4:	71 81       	ldd	r23, Z+1	; 0x01
    2ce6:	82 81       	ldd	r24, Z+2	; 0x02
    2ce8:	93 81       	ldd	r25, Z+3	; 0x03
    2cea:	20 e0       	ldi	r18, 0x00	; 0
    2cec:	3f ef       	ldi	r19, 0xFF	; 255
    2cee:	4f e7       	ldi	r20, 0x7F	; 127
    2cf0:	57 e4       	ldi	r21, 0x47	; 71
    2cf2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cf6:	18 16       	cp	r1, r24
    2cf8:	64 f5       	brge	.+88     	; 0x2d52 <LCD_displayCharacter+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cfa:	fe 01       	movw	r30, r28
    2cfc:	ed 5b       	subi	r30, 0xBD	; 189
    2cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2d00:	60 81       	ld	r22, Z
    2d02:	71 81       	ldd	r23, Z+1	; 0x01
    2d04:	82 81       	ldd	r24, Z+2	; 0x02
    2d06:	93 81       	ldd	r25, Z+3	; 0x03
    2d08:	20 e0       	ldi	r18, 0x00	; 0
    2d0a:	30 e0       	ldi	r19, 0x00	; 0
    2d0c:	40 e2       	ldi	r20, 0x20	; 32
    2d0e:	51 e4       	ldi	r21, 0x41	; 65
    2d10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d14:	dc 01       	movw	r26, r24
    2d16:	cb 01       	movw	r24, r22
    2d18:	bc 01       	movw	r22, r24
    2d1a:	cd 01       	movw	r24, r26
    2d1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d20:	dc 01       	movw	r26, r24
    2d22:	cb 01       	movw	r24, r22
    2d24:	9e af       	std	Y+62, r25	; 0x3e
    2d26:	8d af       	std	Y+61, r24	; 0x3d
    2d28:	0f c0       	rjmp	.+30     	; 0x2d48 <LCD_displayCharacter+0x444>
    2d2a:	89 e1       	ldi	r24, 0x19	; 25
    2d2c:	90 e0       	ldi	r25, 0x00	; 0
    2d2e:	9c af       	std	Y+60, r25	; 0x3c
    2d30:	8b af       	std	Y+59, r24	; 0x3b
    2d32:	8b ad       	ldd	r24, Y+59	; 0x3b
    2d34:	9c ad       	ldd	r25, Y+60	; 0x3c
    2d36:	01 97       	sbiw	r24, 0x01	; 1
    2d38:	f1 f7       	brne	.-4      	; 0x2d36 <LCD_displayCharacter+0x432>
    2d3a:	9c af       	std	Y+60, r25	; 0x3c
    2d3c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d3e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d40:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d42:	01 97       	sbiw	r24, 0x01	; 1
    2d44:	9e af       	std	Y+62, r25	; 0x3e
    2d46:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d48:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d4a:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d4c:	00 97       	sbiw	r24, 0x00	; 0
    2d4e:	69 f7       	brne	.-38     	; 0x2d2a <LCD_displayCharacter+0x426>
    2d50:	16 c0       	rjmp	.+44     	; 0x2d7e <LCD_displayCharacter+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d52:	fe 01       	movw	r30, r28
    2d54:	ff 96       	adiw	r30, 0x3f	; 63
    2d56:	60 81       	ld	r22, Z
    2d58:	71 81       	ldd	r23, Z+1	; 0x01
    2d5a:	82 81       	ldd	r24, Z+2	; 0x02
    2d5c:	93 81       	ldd	r25, Z+3	; 0x03
    2d5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d62:	dc 01       	movw	r26, r24
    2d64:	cb 01       	movw	r24, r22
    2d66:	9e af       	std	Y+62, r25	; 0x3e
    2d68:	8d af       	std	Y+61, r24	; 0x3d
    2d6a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d6c:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d6e:	9a af       	std	Y+58, r25	; 0x3a
    2d70:	89 af       	std	Y+57, r24	; 0x39
    2d72:	89 ad       	ldd	r24, Y+57	; 0x39
    2d74:	9a ad       	ldd	r25, Y+58	; 0x3a
    2d76:	01 97       	sbiw	r24, 0x01	; 1
    2d78:	f1 f7       	brne	.-4      	; 0x2d76 <LCD_displayCharacter+0x472>
    2d7a:	9a af       	std	Y+58, r25	; 0x3a
    2d7c:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(1);

		// Clear Enable Pin to '0'
		GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
    2d7e:	80 e0       	ldi	r24, 0x00	; 0
    2d80:	62 e0       	ldi	r22, 0x02	; 2
    2d82:	40 e0       	ldi	r20, 0x00	; 0
    2d84:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
    2d88:	80 e0       	ldi	r24, 0x00	; 0
    2d8a:	90 e0       	ldi	r25, 0x00	; 0
    2d8c:	a0 e8       	ldi	r26, 0x80	; 128
    2d8e:	bf e3       	ldi	r27, 0x3F	; 63
    2d90:	8d ab       	std	Y+53, r24	; 0x35
    2d92:	9e ab       	std	Y+54, r25	; 0x36
    2d94:	af ab       	std	Y+55, r26	; 0x37
    2d96:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d98:	6d a9       	ldd	r22, Y+53	; 0x35
    2d9a:	7e a9       	ldd	r23, Y+54	; 0x36
    2d9c:	8f a9       	ldd	r24, Y+55	; 0x37
    2d9e:	98 ad       	ldd	r25, Y+56	; 0x38
    2da0:	20 e0       	ldi	r18, 0x00	; 0
    2da2:	30 e0       	ldi	r19, 0x00	; 0
    2da4:	4a e7       	ldi	r20, 0x7A	; 122
    2da6:	53 e4       	ldi	r21, 0x43	; 67
    2da8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dac:	dc 01       	movw	r26, r24
    2dae:	cb 01       	movw	r24, r22
    2db0:	89 ab       	std	Y+49, r24	; 0x31
    2db2:	9a ab       	std	Y+50, r25	; 0x32
    2db4:	ab ab       	std	Y+51, r26	; 0x33
    2db6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2db8:	69 a9       	ldd	r22, Y+49	; 0x31
    2dba:	7a a9       	ldd	r23, Y+50	; 0x32
    2dbc:	8b a9       	ldd	r24, Y+51	; 0x33
    2dbe:	9c a9       	ldd	r25, Y+52	; 0x34
    2dc0:	20 e0       	ldi	r18, 0x00	; 0
    2dc2:	30 e0       	ldi	r19, 0x00	; 0
    2dc4:	40 e8       	ldi	r20, 0x80	; 128
    2dc6:	5f e3       	ldi	r21, 0x3F	; 63
    2dc8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dcc:	88 23       	and	r24, r24
    2dce:	2c f4       	brge	.+10     	; 0x2dda <LCD_displayCharacter+0x4d6>
		__ticks = 1;
    2dd0:	81 e0       	ldi	r24, 0x01	; 1
    2dd2:	90 e0       	ldi	r25, 0x00	; 0
    2dd4:	98 ab       	std	Y+48, r25	; 0x30
    2dd6:	8f a7       	std	Y+47, r24	; 0x2f
    2dd8:	3f c0       	rjmp	.+126    	; 0x2e58 <LCD_displayCharacter+0x554>
	else if (__tmp > 65535)
    2dda:	69 a9       	ldd	r22, Y+49	; 0x31
    2ddc:	7a a9       	ldd	r23, Y+50	; 0x32
    2dde:	8b a9       	ldd	r24, Y+51	; 0x33
    2de0:	9c a9       	ldd	r25, Y+52	; 0x34
    2de2:	20 e0       	ldi	r18, 0x00	; 0
    2de4:	3f ef       	ldi	r19, 0xFF	; 255
    2de6:	4f e7       	ldi	r20, 0x7F	; 127
    2de8:	57 e4       	ldi	r21, 0x47	; 71
    2dea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2dee:	18 16       	cp	r1, r24
    2df0:	4c f5       	brge	.+82     	; 0x2e44 <LCD_displayCharacter+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2df2:	6d a9       	ldd	r22, Y+53	; 0x35
    2df4:	7e a9       	ldd	r23, Y+54	; 0x36
    2df6:	8f a9       	ldd	r24, Y+55	; 0x37
    2df8:	98 ad       	ldd	r25, Y+56	; 0x38
    2dfa:	20 e0       	ldi	r18, 0x00	; 0
    2dfc:	30 e0       	ldi	r19, 0x00	; 0
    2dfe:	40 e2       	ldi	r20, 0x20	; 32
    2e00:	51 e4       	ldi	r21, 0x41	; 65
    2e02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e06:	dc 01       	movw	r26, r24
    2e08:	cb 01       	movw	r24, r22
    2e0a:	bc 01       	movw	r22, r24
    2e0c:	cd 01       	movw	r24, r26
    2e0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e12:	dc 01       	movw	r26, r24
    2e14:	cb 01       	movw	r24, r22
    2e16:	98 ab       	std	Y+48, r25	; 0x30
    2e18:	8f a7       	std	Y+47, r24	; 0x2f
    2e1a:	0f c0       	rjmp	.+30     	; 0x2e3a <LCD_displayCharacter+0x536>
    2e1c:	89 e1       	ldi	r24, 0x19	; 25
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	9e a7       	std	Y+46, r25	; 0x2e
    2e22:	8d a7       	std	Y+45, r24	; 0x2d
    2e24:	8d a5       	ldd	r24, Y+45	; 0x2d
    2e26:	9e a5       	ldd	r25, Y+46	; 0x2e
    2e28:	01 97       	sbiw	r24, 0x01	; 1
    2e2a:	f1 f7       	brne	.-4      	; 0x2e28 <LCD_displayCharacter+0x524>
    2e2c:	9e a7       	std	Y+46, r25	; 0x2e
    2e2e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e30:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e32:	98 a9       	ldd	r25, Y+48	; 0x30
    2e34:	01 97       	sbiw	r24, 0x01	; 1
    2e36:	98 ab       	std	Y+48, r25	; 0x30
    2e38:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e3a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e3c:	98 a9       	ldd	r25, Y+48	; 0x30
    2e3e:	00 97       	sbiw	r24, 0x00	; 0
    2e40:	69 f7       	brne	.-38     	; 0x2e1c <LCD_displayCharacter+0x518>
    2e42:	14 c0       	rjmp	.+40     	; 0x2e6c <LCD_displayCharacter+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e44:	69 a9       	ldd	r22, Y+49	; 0x31
    2e46:	7a a9       	ldd	r23, Y+50	; 0x32
    2e48:	8b a9       	ldd	r24, Y+51	; 0x33
    2e4a:	9c a9       	ldd	r25, Y+52	; 0x34
    2e4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e50:	dc 01       	movw	r26, r24
    2e52:	cb 01       	movw	r24, r22
    2e54:	98 ab       	std	Y+48, r25	; 0x30
    2e56:	8f a7       	std	Y+47, r24	; 0x2f
    2e58:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e5a:	98 a9       	ldd	r25, Y+48	; 0x30
    2e5c:	9c a7       	std	Y+44, r25	; 0x2c
    2e5e:	8b a7       	std	Y+43, r24	; 0x2b
    2e60:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e62:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e64:	01 97       	sbiw	r24, 0x01	; 1
    2e66:	f1 f7       	brne	.-4      	; 0x2e64 <LCD_displayCharacter+0x560>
    2e68:	9c a7       	std	Y+44, r25	; 0x2c
    2e6a:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1); /* delay for processing Th = 13ns */

		// Set Enable Pin to '1'
		GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
    2e6c:	80 e0       	ldi	r24, 0x00	; 0
    2e6e:	62 e0       	ldi	r22, 0x02	; 2
    2e70:	41 e0       	ldi	r20, 0x01	; 1
    2e72:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
    2e76:	80 e0       	ldi	r24, 0x00	; 0
    2e78:	90 e0       	ldi	r25, 0x00	; 0
    2e7a:	a0 e8       	ldi	r26, 0x80	; 128
    2e7c:	bf e3       	ldi	r27, 0x3F	; 63
    2e7e:	8f a3       	std	Y+39, r24	; 0x27
    2e80:	98 a7       	std	Y+40, r25	; 0x28
    2e82:	a9 a7       	std	Y+41, r26	; 0x29
    2e84:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e86:	6f a1       	ldd	r22, Y+39	; 0x27
    2e88:	78 a5       	ldd	r23, Y+40	; 0x28
    2e8a:	89 a5       	ldd	r24, Y+41	; 0x29
    2e8c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e8e:	20 e0       	ldi	r18, 0x00	; 0
    2e90:	30 e0       	ldi	r19, 0x00	; 0
    2e92:	4a e7       	ldi	r20, 0x7A	; 122
    2e94:	53 e4       	ldi	r21, 0x43	; 67
    2e96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e9a:	dc 01       	movw	r26, r24
    2e9c:	cb 01       	movw	r24, r22
    2e9e:	8b a3       	std	Y+35, r24	; 0x23
    2ea0:	9c a3       	std	Y+36, r25	; 0x24
    2ea2:	ad a3       	std	Y+37, r26	; 0x25
    2ea4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2ea6:	6b a1       	ldd	r22, Y+35	; 0x23
    2ea8:	7c a1       	ldd	r23, Y+36	; 0x24
    2eaa:	8d a1       	ldd	r24, Y+37	; 0x25
    2eac:	9e a1       	ldd	r25, Y+38	; 0x26
    2eae:	20 e0       	ldi	r18, 0x00	; 0
    2eb0:	30 e0       	ldi	r19, 0x00	; 0
    2eb2:	40 e8       	ldi	r20, 0x80	; 128
    2eb4:	5f e3       	ldi	r21, 0x3F	; 63
    2eb6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2eba:	88 23       	and	r24, r24
    2ebc:	2c f4       	brge	.+10     	; 0x2ec8 <LCD_displayCharacter+0x5c4>
		__ticks = 1;
    2ebe:	81 e0       	ldi	r24, 0x01	; 1
    2ec0:	90 e0       	ldi	r25, 0x00	; 0
    2ec2:	9a a3       	std	Y+34, r25	; 0x22
    2ec4:	89 a3       	std	Y+33, r24	; 0x21
    2ec6:	3f c0       	rjmp	.+126    	; 0x2f46 <LCD_displayCharacter+0x642>
	else if (__tmp > 65535)
    2ec8:	6b a1       	ldd	r22, Y+35	; 0x23
    2eca:	7c a1       	ldd	r23, Y+36	; 0x24
    2ecc:	8d a1       	ldd	r24, Y+37	; 0x25
    2ece:	9e a1       	ldd	r25, Y+38	; 0x26
    2ed0:	20 e0       	ldi	r18, 0x00	; 0
    2ed2:	3f ef       	ldi	r19, 0xFF	; 255
    2ed4:	4f e7       	ldi	r20, 0x7F	; 127
    2ed6:	57 e4       	ldi	r21, 0x47	; 71
    2ed8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2edc:	18 16       	cp	r1, r24
    2ede:	4c f5       	brge	.+82     	; 0x2f32 <LCD_displayCharacter+0x62e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ee0:	6f a1       	ldd	r22, Y+39	; 0x27
    2ee2:	78 a5       	ldd	r23, Y+40	; 0x28
    2ee4:	89 a5       	ldd	r24, Y+41	; 0x29
    2ee6:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ee8:	20 e0       	ldi	r18, 0x00	; 0
    2eea:	30 e0       	ldi	r19, 0x00	; 0
    2eec:	40 e2       	ldi	r20, 0x20	; 32
    2eee:	51 e4       	ldi	r21, 0x41	; 65
    2ef0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ef4:	dc 01       	movw	r26, r24
    2ef6:	cb 01       	movw	r24, r22
    2ef8:	bc 01       	movw	r22, r24
    2efa:	cd 01       	movw	r24, r26
    2efc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f00:	dc 01       	movw	r26, r24
    2f02:	cb 01       	movw	r24, r22
    2f04:	9a a3       	std	Y+34, r25	; 0x22
    2f06:	89 a3       	std	Y+33, r24	; 0x21
    2f08:	0f c0       	rjmp	.+30     	; 0x2f28 <LCD_displayCharacter+0x624>
    2f0a:	89 e1       	ldi	r24, 0x19	; 25
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	98 a3       	std	Y+32, r25	; 0x20
    2f10:	8f 8f       	std	Y+31, r24	; 0x1f
    2f12:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f14:	98 a1       	ldd	r25, Y+32	; 0x20
    2f16:	01 97       	sbiw	r24, 0x01	; 1
    2f18:	f1 f7       	brne	.-4      	; 0x2f16 <LCD_displayCharacter+0x612>
    2f1a:	98 a3       	std	Y+32, r25	; 0x20
    2f1c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f1e:	89 a1       	ldd	r24, Y+33	; 0x21
    2f20:	9a a1       	ldd	r25, Y+34	; 0x22
    2f22:	01 97       	sbiw	r24, 0x01	; 1
    2f24:	9a a3       	std	Y+34, r25	; 0x22
    2f26:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f28:	89 a1       	ldd	r24, Y+33	; 0x21
    2f2a:	9a a1       	ldd	r25, Y+34	; 0x22
    2f2c:	00 97       	sbiw	r24, 0x00	; 0
    2f2e:	69 f7       	brne	.-38     	; 0x2f0a <LCD_displayCharacter+0x606>
    2f30:	14 c0       	rjmp	.+40     	; 0x2f5a <LCD_displayCharacter+0x656>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f32:	6b a1       	ldd	r22, Y+35	; 0x23
    2f34:	7c a1       	ldd	r23, Y+36	; 0x24
    2f36:	8d a1       	ldd	r24, Y+37	; 0x25
    2f38:	9e a1       	ldd	r25, Y+38	; 0x26
    2f3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f3e:	dc 01       	movw	r26, r24
    2f40:	cb 01       	movw	r24, r22
    2f42:	9a a3       	std	Y+34, r25	; 0x22
    2f44:	89 a3       	std	Y+33, r24	; 0x21
    2f46:	89 a1       	ldd	r24, Y+33	; 0x21
    2f48:	9a a1       	ldd	r25, Y+34	; 0x22
    2f4a:	9e 8f       	std	Y+30, r25	; 0x1e
    2f4c:	8d 8f       	std	Y+29, r24	; 0x1d
    2f4e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f50:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f52:	01 97       	sbiw	r24, 0x01	; 1
    2f54:	f1 f7       	brne	.-4      	; 0x2f52 <LCD_displayCharacter+0x64e>
    2f56:	9e 8f       	std	Y+30, r25	; 0x1e
    2f58:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 0), GET_BIT( data, 0 ));
    2f5a:	fe 01       	movw	r30, r28
    2f5c:	ed 59       	subi	r30, 0x9D	; 157
    2f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f60:	80 81       	ld	r24, Z
    2f62:	98 2f       	mov	r25, r24
    2f64:	91 70       	andi	r25, 0x01	; 1
    2f66:	80 e0       	ldi	r24, 0x00	; 0
    2f68:	63 e0       	ldi	r22, 0x03	; 3
    2f6a:	49 2f       	mov	r20, r25
    2f6c:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 1), GET_BIT( data, 1 ));
    2f70:	fe 01       	movw	r30, r28
    2f72:	ed 59       	subi	r30, 0x9D	; 157
    2f74:	ff 4f       	sbci	r31, 0xFF	; 255
    2f76:	80 81       	ld	r24, Z
    2f78:	86 95       	lsr	r24
    2f7a:	98 2f       	mov	r25, r24
    2f7c:	91 70       	andi	r25, 0x01	; 1
    2f7e:	80 e0       	ldi	r24, 0x00	; 0
    2f80:	64 e0       	ldi	r22, 0x04	; 4
    2f82:	49 2f       	mov	r20, r25
    2f84:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 2), GET_BIT( data, 2 ));
    2f88:	fe 01       	movw	r30, r28
    2f8a:	ed 59       	subi	r30, 0x9D	; 157
    2f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8e:	80 81       	ld	r24, Z
    2f90:	86 95       	lsr	r24
    2f92:	86 95       	lsr	r24
    2f94:	98 2f       	mov	r25, r24
    2f96:	91 70       	andi	r25, 0x01	; 1
    2f98:	80 e0       	ldi	r24, 0x00	; 0
    2f9a:	65 e0       	ldi	r22, 0x05	; 5
    2f9c:	49 2f       	mov	r20, r25
    2f9e:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 3), GET_BIT( data, 3 ));
    2fa2:	fe 01       	movw	r30, r28
    2fa4:	ed 59       	subi	r30, 0x9D	; 157
    2fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa8:	80 81       	ld	r24, Z
    2faa:	86 95       	lsr	r24
    2fac:	86 95       	lsr	r24
    2fae:	86 95       	lsr	r24
    2fb0:	98 2f       	mov	r25, r24
    2fb2:	91 70       	andi	r25, 0x01	; 1
    2fb4:	80 e0       	ldi	r24, 0x00	; 0
    2fb6:	66 e0       	ldi	r22, 0x06	; 6
    2fb8:	49 2f       	mov	r20, r25
    2fba:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
    2fbe:	80 e0       	ldi	r24, 0x00	; 0
    2fc0:	90 e0       	ldi	r25, 0x00	; 0
    2fc2:	a0 e8       	ldi	r26, 0x80	; 128
    2fc4:	bf e3       	ldi	r27, 0x3F	; 63
    2fc6:	89 8f       	std	Y+25, r24	; 0x19
    2fc8:	9a 8f       	std	Y+26, r25	; 0x1a
    2fca:	ab 8f       	std	Y+27, r26	; 0x1b
    2fcc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fce:	69 8d       	ldd	r22, Y+25	; 0x19
    2fd0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fd2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fd4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fd6:	20 e0       	ldi	r18, 0x00	; 0
    2fd8:	30 e0       	ldi	r19, 0x00	; 0
    2fda:	4a e7       	ldi	r20, 0x7A	; 122
    2fdc:	53 e4       	ldi	r21, 0x43	; 67
    2fde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fe2:	dc 01       	movw	r26, r24
    2fe4:	cb 01       	movw	r24, r22
    2fe6:	8d 8b       	std	Y+21, r24	; 0x15
    2fe8:	9e 8b       	std	Y+22, r25	; 0x16
    2fea:	af 8b       	std	Y+23, r26	; 0x17
    2fec:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2fee:	6d 89       	ldd	r22, Y+21	; 0x15
    2ff0:	7e 89       	ldd	r23, Y+22	; 0x16
    2ff2:	8f 89       	ldd	r24, Y+23	; 0x17
    2ff4:	98 8d       	ldd	r25, Y+24	; 0x18
    2ff6:	20 e0       	ldi	r18, 0x00	; 0
    2ff8:	30 e0       	ldi	r19, 0x00	; 0
    2ffa:	40 e8       	ldi	r20, 0x80	; 128
    2ffc:	5f e3       	ldi	r21, 0x3F	; 63
    2ffe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3002:	88 23       	and	r24, r24
    3004:	2c f4       	brge	.+10     	; 0x3010 <LCD_displayCharacter+0x70c>
		__ticks = 1;
    3006:	81 e0       	ldi	r24, 0x01	; 1
    3008:	90 e0       	ldi	r25, 0x00	; 0
    300a:	9c 8b       	std	Y+20, r25	; 0x14
    300c:	8b 8b       	std	Y+19, r24	; 0x13
    300e:	3f c0       	rjmp	.+126    	; 0x308e <LCD_displayCharacter+0x78a>
	else if (__tmp > 65535)
    3010:	6d 89       	ldd	r22, Y+21	; 0x15
    3012:	7e 89       	ldd	r23, Y+22	; 0x16
    3014:	8f 89       	ldd	r24, Y+23	; 0x17
    3016:	98 8d       	ldd	r25, Y+24	; 0x18
    3018:	20 e0       	ldi	r18, 0x00	; 0
    301a:	3f ef       	ldi	r19, 0xFF	; 255
    301c:	4f e7       	ldi	r20, 0x7F	; 127
    301e:	57 e4       	ldi	r21, 0x47	; 71
    3020:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3024:	18 16       	cp	r1, r24
    3026:	4c f5       	brge	.+82     	; 0x307a <LCD_displayCharacter+0x776>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3028:	69 8d       	ldd	r22, Y+25	; 0x19
    302a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    302c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    302e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3030:	20 e0       	ldi	r18, 0x00	; 0
    3032:	30 e0       	ldi	r19, 0x00	; 0
    3034:	40 e2       	ldi	r20, 0x20	; 32
    3036:	51 e4       	ldi	r21, 0x41	; 65
    3038:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    303c:	dc 01       	movw	r26, r24
    303e:	cb 01       	movw	r24, r22
    3040:	bc 01       	movw	r22, r24
    3042:	cd 01       	movw	r24, r26
    3044:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3048:	dc 01       	movw	r26, r24
    304a:	cb 01       	movw	r24, r22
    304c:	9c 8b       	std	Y+20, r25	; 0x14
    304e:	8b 8b       	std	Y+19, r24	; 0x13
    3050:	0f c0       	rjmp	.+30     	; 0x3070 <LCD_displayCharacter+0x76c>
    3052:	89 e1       	ldi	r24, 0x19	; 25
    3054:	90 e0       	ldi	r25, 0x00	; 0
    3056:	9a 8b       	std	Y+18, r25	; 0x12
    3058:	89 8b       	std	Y+17, r24	; 0x11
    305a:	89 89       	ldd	r24, Y+17	; 0x11
    305c:	9a 89       	ldd	r25, Y+18	; 0x12
    305e:	01 97       	sbiw	r24, 0x01	; 1
    3060:	f1 f7       	brne	.-4      	; 0x305e <LCD_displayCharacter+0x75a>
    3062:	9a 8b       	std	Y+18, r25	; 0x12
    3064:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3066:	8b 89       	ldd	r24, Y+19	; 0x13
    3068:	9c 89       	ldd	r25, Y+20	; 0x14
    306a:	01 97       	sbiw	r24, 0x01	; 1
    306c:	9c 8b       	std	Y+20, r25	; 0x14
    306e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3070:	8b 89       	ldd	r24, Y+19	; 0x13
    3072:	9c 89       	ldd	r25, Y+20	; 0x14
    3074:	00 97       	sbiw	r24, 0x00	; 0
    3076:	69 f7       	brne	.-38     	; 0x3052 <LCD_displayCharacter+0x74e>
    3078:	14 c0       	rjmp	.+40     	; 0x30a2 <LCD_displayCharacter+0x79e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    307a:	6d 89       	ldd	r22, Y+21	; 0x15
    307c:	7e 89       	ldd	r23, Y+22	; 0x16
    307e:	8f 89       	ldd	r24, Y+23	; 0x17
    3080:	98 8d       	ldd	r25, Y+24	; 0x18
    3082:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3086:	dc 01       	movw	r26, r24
    3088:	cb 01       	movw	r24, r22
    308a:	9c 8b       	std	Y+20, r25	; 0x14
    308c:	8b 8b       	std	Y+19, r24	; 0x13
    308e:	8b 89       	ldd	r24, Y+19	; 0x13
    3090:	9c 89       	ldd	r25, Y+20	; 0x14
    3092:	98 8b       	std	Y+16, r25	; 0x10
    3094:	8f 87       	std	Y+15, r24	; 0x0f
    3096:	8f 85       	ldd	r24, Y+15	; 0x0f
    3098:	98 89       	ldd	r25, Y+16	; 0x10
    309a:	01 97       	sbiw	r24, 0x01	; 1
    309c:	f1 f7       	brne	.-4      	; 0x309a <LCD_displayCharacter+0x796>
    309e:	98 8b       	std	Y+16, r25	; 0x10
    30a0:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1); /* delay for processing Tdsw = 100ns */

		// Clear Enable Pin to '0'
		GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
    30a2:	80 e0       	ldi	r24, 0x00	; 0
    30a4:	62 e0       	ldi	r22, 0x02	; 2
    30a6:	40 e0       	ldi	r20, 0x00	; 0
    30a8:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>
    30ac:	80 e0       	ldi	r24, 0x00	; 0
    30ae:	90 e0       	ldi	r25, 0x00	; 0
    30b0:	a0 e8       	ldi	r26, 0x80	; 128
    30b2:	bf e3       	ldi	r27, 0x3F	; 63
    30b4:	8b 87       	std	Y+11, r24	; 0x0b
    30b6:	9c 87       	std	Y+12, r25	; 0x0c
    30b8:	ad 87       	std	Y+13, r26	; 0x0d
    30ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    30be:	7c 85       	ldd	r23, Y+12	; 0x0c
    30c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    30c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    30c4:	20 e0       	ldi	r18, 0x00	; 0
    30c6:	30 e0       	ldi	r19, 0x00	; 0
    30c8:	4a e7       	ldi	r20, 0x7A	; 122
    30ca:	53 e4       	ldi	r21, 0x43	; 67
    30cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30d0:	dc 01       	movw	r26, r24
    30d2:	cb 01       	movw	r24, r22
    30d4:	8f 83       	std	Y+7, r24	; 0x07
    30d6:	98 87       	std	Y+8, r25	; 0x08
    30d8:	a9 87       	std	Y+9, r26	; 0x09
    30da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30dc:	6f 81       	ldd	r22, Y+7	; 0x07
    30de:	78 85       	ldd	r23, Y+8	; 0x08
    30e0:	89 85       	ldd	r24, Y+9	; 0x09
    30e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    30e4:	20 e0       	ldi	r18, 0x00	; 0
    30e6:	30 e0       	ldi	r19, 0x00	; 0
    30e8:	40 e8       	ldi	r20, 0x80	; 128
    30ea:	5f e3       	ldi	r21, 0x3F	; 63
    30ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30f0:	88 23       	and	r24, r24
    30f2:	2c f4       	brge	.+10     	; 0x30fe <LCD_displayCharacter+0x7fa>
		__ticks = 1;
    30f4:	81 e0       	ldi	r24, 0x01	; 1
    30f6:	90 e0       	ldi	r25, 0x00	; 0
    30f8:	9e 83       	std	Y+6, r25	; 0x06
    30fa:	8d 83       	std	Y+5, r24	; 0x05
    30fc:	3f c0       	rjmp	.+126    	; 0x317c <LCD_displayCharacter+0x878>
	else if (__tmp > 65535)
    30fe:	6f 81       	ldd	r22, Y+7	; 0x07
    3100:	78 85       	ldd	r23, Y+8	; 0x08
    3102:	89 85       	ldd	r24, Y+9	; 0x09
    3104:	9a 85       	ldd	r25, Y+10	; 0x0a
    3106:	20 e0       	ldi	r18, 0x00	; 0
    3108:	3f ef       	ldi	r19, 0xFF	; 255
    310a:	4f e7       	ldi	r20, 0x7F	; 127
    310c:	57 e4       	ldi	r21, 0x47	; 71
    310e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3112:	18 16       	cp	r1, r24
    3114:	4c f5       	brge	.+82     	; 0x3168 <LCD_displayCharacter+0x864>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3116:	6b 85       	ldd	r22, Y+11	; 0x0b
    3118:	7c 85       	ldd	r23, Y+12	; 0x0c
    311a:	8d 85       	ldd	r24, Y+13	; 0x0d
    311c:	9e 85       	ldd	r25, Y+14	; 0x0e
    311e:	20 e0       	ldi	r18, 0x00	; 0
    3120:	30 e0       	ldi	r19, 0x00	; 0
    3122:	40 e2       	ldi	r20, 0x20	; 32
    3124:	51 e4       	ldi	r21, 0x41	; 65
    3126:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    312a:	dc 01       	movw	r26, r24
    312c:	cb 01       	movw	r24, r22
    312e:	bc 01       	movw	r22, r24
    3130:	cd 01       	movw	r24, r26
    3132:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3136:	dc 01       	movw	r26, r24
    3138:	cb 01       	movw	r24, r22
    313a:	9e 83       	std	Y+6, r25	; 0x06
    313c:	8d 83       	std	Y+5, r24	; 0x05
    313e:	0f c0       	rjmp	.+30     	; 0x315e <LCD_displayCharacter+0x85a>
    3140:	89 e1       	ldi	r24, 0x19	; 25
    3142:	90 e0       	ldi	r25, 0x00	; 0
    3144:	9c 83       	std	Y+4, r25	; 0x04
    3146:	8b 83       	std	Y+3, r24	; 0x03
    3148:	8b 81       	ldd	r24, Y+3	; 0x03
    314a:	9c 81       	ldd	r25, Y+4	; 0x04
    314c:	01 97       	sbiw	r24, 0x01	; 1
    314e:	f1 f7       	brne	.-4      	; 0x314c <LCD_displayCharacter+0x848>
    3150:	9c 83       	std	Y+4, r25	; 0x04
    3152:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3154:	8d 81       	ldd	r24, Y+5	; 0x05
    3156:	9e 81       	ldd	r25, Y+6	; 0x06
    3158:	01 97       	sbiw	r24, 0x01	; 1
    315a:	9e 83       	std	Y+6, r25	; 0x06
    315c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    315e:	8d 81       	ldd	r24, Y+5	; 0x05
    3160:	9e 81       	ldd	r25, Y+6	; 0x06
    3162:	00 97       	sbiw	r24, 0x00	; 0
    3164:	69 f7       	brne	.-38     	; 0x3140 <LCD_displayCharacter+0x83c>
    3166:	14 c0       	rjmp	.+40     	; 0x3190 <LCD_displayCharacter+0x88c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3168:	6f 81       	ldd	r22, Y+7	; 0x07
    316a:	78 85       	ldd	r23, Y+8	; 0x08
    316c:	89 85       	ldd	r24, Y+9	; 0x09
    316e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3170:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3174:	dc 01       	movw	r26, r24
    3176:	cb 01       	movw	r24, r22
    3178:	9e 83       	std	Y+6, r25	; 0x06
    317a:	8d 83       	std	Y+5, r24	; 0x05
    317c:	8d 81       	ldd	r24, Y+5	; 0x05
    317e:	9e 81       	ldd	r25, Y+6	; 0x06
    3180:	9a 83       	std	Y+2, r25	; 0x02
    3182:	89 83       	std	Y+1, r24	; 0x01
    3184:	89 81       	ldd	r24, Y+1	; 0x01
    3186:	9a 81       	ldd	r25, Y+2	; 0x02
    3188:	01 97       	sbiw	r24, 0x01	; 1
    318a:	f1 f7       	brne	.-4      	; 0x3188 <LCD_displayCharacter+0x884>
    318c:	9a 83       	std	Y+2, r25	; 0x02
    318e:	89 83       	std	Y+1, r24	; 0x01

		// Clear Enable Pin to '0'
		GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
		_delay_ms(1); /* delay for processing Th = 13ns */
	}
}
    3190:	cd 59       	subi	r28, 0x9D	; 157
    3192:	df 4f       	sbci	r29, 0xFF	; 255
    3194:	0f b6       	in	r0, 0x3f	; 63
    3196:	f8 94       	cli
    3198:	de bf       	out	0x3e, r29	; 62
    319a:	0f be       	out	0x3f, r0	; 63
    319c:	cd bf       	out	0x3d, r28	; 61
    319e:	cf 91       	pop	r28
    31a0:	df 91       	pop	r29
    31a2:	1f 91       	pop	r17
    31a4:	0f 91       	pop	r16
    31a6:	08 95       	ret

000031a8 <LCD_displayString>:


// Displays a string on the LCD
void LCD_displayString(const char *str) {
    31a8:	df 93       	push	r29
    31aa:	cf 93       	push	r28
    31ac:	00 d0       	rcall	.+0      	; 0x31ae <LCD_displayString+0x6>
    31ae:	0f 92       	push	r0
    31b0:	cd b7       	in	r28, 0x3d	; 61
    31b2:	de b7       	in	r29, 0x3e	; 62
    31b4:	9b 83       	std	Y+3, r25	; 0x03
    31b6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    31b8:	19 82       	std	Y+1, r1	; 0x01
    31ba:	0e c0       	rjmp	.+28     	; 0x31d8 <LCD_displayString+0x30>
	while(str[i] != '\0') {
		LCD_displayCharacter(str[i]);
    31bc:	89 81       	ldd	r24, Y+1	; 0x01
    31be:	28 2f       	mov	r18, r24
    31c0:	30 e0       	ldi	r19, 0x00	; 0
    31c2:	8a 81       	ldd	r24, Y+2	; 0x02
    31c4:	9b 81       	ldd	r25, Y+3	; 0x03
    31c6:	fc 01       	movw	r30, r24
    31c8:	e2 0f       	add	r30, r18
    31ca:	f3 1f       	adc	r31, r19
    31cc:	80 81       	ld	r24, Z
    31ce:	0e 94 82 14 	call	0x2904	; 0x2904 <LCD_displayCharacter>
		i++;
    31d2:	89 81       	ldd	r24, Y+1	; 0x01
    31d4:	8f 5f       	subi	r24, 0xFF	; 255
    31d6:	89 83       	std	Y+1, r24	; 0x01


// Displays a string on the LCD
void LCD_displayString(const char *str) {
	uint8 i = 0;
	while(str[i] != '\0') {
    31d8:	89 81       	ldd	r24, Y+1	; 0x01
    31da:	28 2f       	mov	r18, r24
    31dc:	30 e0       	ldi	r19, 0x00	; 0
    31de:	8a 81       	ldd	r24, Y+2	; 0x02
    31e0:	9b 81       	ldd	r25, Y+3	; 0x03
    31e2:	fc 01       	movw	r30, r24
    31e4:	e2 0f       	add	r30, r18
    31e6:	f3 1f       	adc	r31, r19
    31e8:	80 81       	ld	r24, Z
    31ea:	88 23       	and	r24, r24
    31ec:	39 f7       	brne	.-50     	; 0x31bc <LCD_displayString+0x14>
	}
	/*
	for (int i = 0 ; i < strlen(str) ; i++) {
		LCD_displayCharacters(str[i]);
	}*/
}
    31ee:	0f 90       	pop	r0
    31f0:	0f 90       	pop	r0
    31f2:	0f 90       	pop	r0
    31f4:	cf 91       	pop	r28
    31f6:	df 91       	pop	r29
    31f8:	08 95       	ret

000031fa <LCD_moveCursor>:


// Chooses where the cursor would stand on the LCD to type from it
void LCD_moveCursor(uint8 row, uint8 col) {
    31fa:	df 93       	push	r29
    31fc:	cf 93       	push	r28
    31fe:	00 d0       	rcall	.+0      	; 0x3200 <LCD_moveCursor+0x6>
    3200:	00 d0       	rcall	.+0      	; 0x3202 <LCD_moveCursor+0x8>
    3202:	0f 92       	push	r0
    3204:	cd b7       	in	r28, 0x3d	; 61
    3206:	de b7       	in	r29, 0x3e	; 62
    3208:	8a 83       	std	Y+2, r24	; 0x02
    320a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 LCD_MEMORY_ADDRESS;

	// Calculate the required address in the LCD DDRAM checking
	// The location of the cursor originally on which line
	switch(row) {
    320c:	8a 81       	ldd	r24, Y+2	; 0x02
    320e:	28 2f       	mov	r18, r24
    3210:	30 e0       	ldi	r19, 0x00	; 0
    3212:	3d 83       	std	Y+5, r19	; 0x05
    3214:	2c 83       	std	Y+4, r18	; 0x04
    3216:	8c 81       	ldd	r24, Y+4	; 0x04
    3218:	9d 81       	ldd	r25, Y+5	; 0x05
    321a:	81 30       	cpi	r24, 0x01	; 1
    321c:	91 05       	cpc	r25, r1
    321e:	c1 f0       	breq	.+48     	; 0x3250 <LCD_moveCursor+0x56>
    3220:	2c 81       	ldd	r18, Y+4	; 0x04
    3222:	3d 81       	ldd	r19, Y+5	; 0x05
    3224:	22 30       	cpi	r18, 0x02	; 2
    3226:	31 05       	cpc	r19, r1
    3228:	2c f4       	brge	.+10     	; 0x3234 <LCD_moveCursor+0x3a>
    322a:	8c 81       	ldd	r24, Y+4	; 0x04
    322c:	9d 81       	ldd	r25, Y+5	; 0x05
    322e:	00 97       	sbiw	r24, 0x00	; 0
    3230:	61 f0       	breq	.+24     	; 0x324a <LCD_moveCursor+0x50>
    3232:	19 c0       	rjmp	.+50     	; 0x3266 <LCD_moveCursor+0x6c>
    3234:	2c 81       	ldd	r18, Y+4	; 0x04
    3236:	3d 81       	ldd	r19, Y+5	; 0x05
    3238:	22 30       	cpi	r18, 0x02	; 2
    323a:	31 05       	cpc	r19, r1
    323c:	69 f0       	breq	.+26     	; 0x3258 <LCD_moveCursor+0x5e>
    323e:	8c 81       	ldd	r24, Y+4	; 0x04
    3240:	9d 81       	ldd	r25, Y+5	; 0x05
    3242:	83 30       	cpi	r24, 0x03	; 3
    3244:	91 05       	cpc	r25, r1
    3246:	61 f0       	breq	.+24     	; 0x3260 <LCD_moveCursor+0x66>
    3248:	0e c0       	rjmp	.+28     	; 0x3266 <LCD_moveCursor+0x6c>
		case 0:
			LCD_MEMORY_ADDRESS = col;
    324a:	8b 81       	ldd	r24, Y+3	; 0x03
    324c:	89 83       	std	Y+1, r24	; 0x01
    324e:	0b c0       	rjmp	.+22     	; 0x3266 <LCD_moveCursor+0x6c>
				break;
		case 1:
			LCD_MEMORY_ADDRESS = col + 0x40;
    3250:	8b 81       	ldd	r24, Y+3	; 0x03
    3252:	80 5c       	subi	r24, 0xC0	; 192
    3254:	89 83       	std	Y+1, r24	; 0x01
    3256:	07 c0       	rjmp	.+14     	; 0x3266 <LCD_moveCursor+0x6c>
				break;
		case 2:
			LCD_MEMORY_ADDRESS = col + 0x10;
    3258:	8b 81       	ldd	r24, Y+3	; 0x03
    325a:	80 5f       	subi	r24, 0xF0	; 240
    325c:	89 83       	std	Y+1, r24	; 0x01
    325e:	03 c0       	rjmp	.+6      	; 0x3266 <LCD_moveCursor+0x6c>
				break;
		case 3:
			LCD_MEMORY_ADDRESS = col + 0x50;
    3260:	8b 81       	ldd	r24, Y+3	; 0x03
    3262:	80 5b       	subi	r24, 0xB0	; 176
    3264:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(LCD_MEMORY_ADDRESS | LCD_CURSOR_LOCATION);
    3266:	89 81       	ldd	r24, Y+1	; 0x01
    3268:	80 68       	ori	r24, 0x80	; 128
    326a:	0e 94 30 10 	call	0x2060	; 0x2060 <LCD_sendCommand>
}
    326e:	0f 90       	pop	r0
    3270:	0f 90       	pop	r0
    3272:	0f 90       	pop	r0
    3274:	0f 90       	pop	r0
    3276:	0f 90       	pop	r0
    3278:	cf 91       	pop	r28
    327a:	df 91       	pop	r29
    327c:	08 95       	ret

0000327e <LCD_displayStringRowColumn>:


// Displays a string on the LCD at a chosen cursor and row
void LCD_displayStringRowColumn(uint8 row, uint8 col, const char *Str) {
    327e:	df 93       	push	r29
    3280:	cf 93       	push	r28
    3282:	00 d0       	rcall	.+0      	; 0x3284 <LCD_displayStringRowColumn+0x6>
    3284:	00 d0       	rcall	.+0      	; 0x3286 <LCD_displayStringRowColumn+0x8>
    3286:	cd b7       	in	r28, 0x3d	; 61
    3288:	de b7       	in	r29, 0x3e	; 62
    328a:	89 83       	std	Y+1, r24	; 0x01
    328c:	6a 83       	std	Y+2, r22	; 0x02
    328e:	5c 83       	std	Y+4, r21	; 0x04
    3290:	4b 83       	std	Y+3, r20	; 0x03
	// Go to to the required LCD position
	LCD_moveCursor(row, col);
    3292:	89 81       	ldd	r24, Y+1	; 0x01
    3294:	6a 81       	ldd	r22, Y+2	; 0x02
    3296:	0e 94 fd 18 	call	0x31fa	; 0x31fa <LCD_moveCursor>

	// Display the string from the cursor
	LCD_displayString(Str);
    329a:	8b 81       	ldd	r24, Y+3	; 0x03
    329c:	9c 81       	ldd	r25, Y+4	; 0x04
    329e:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <LCD_displayString>
}
    32a2:	0f 90       	pop	r0
    32a4:	0f 90       	pop	r0
    32a6:	0f 90       	pop	r0
    32a8:	0f 90       	pop	r0
    32aa:	cf 91       	pop	r28
    32ac:	df 91       	pop	r29
    32ae:	08 95       	ret

000032b0 <LCD_intgerToString>:

// LCD only understands ASCII, so this converts Int to a string
void LCD_intgerToString(int data) {
    32b0:	df 93       	push	r29
    32b2:	cf 93       	push	r28
    32b4:	cd b7       	in	r28, 0x3d	; 61
    32b6:	de b7       	in	r29, 0x3e	; 62
    32b8:	62 97       	sbiw	r28, 0x12	; 18
    32ba:	0f b6       	in	r0, 0x3f	; 63
    32bc:	f8 94       	cli
    32be:	de bf       	out	0x3e, r29	; 62
    32c0:	0f be       	out	0x3f, r0	; 63
    32c2:	cd bf       	out	0x3d, r28	; 61
    32c4:	9a 8b       	std	Y+18, r25	; 0x12
    32c6:	89 8b       	std	Y+17, r24	; 0x11
	// A string to hold the ASCII values
	char buffer[16];

	// Converts data to its ASCII
	itoa(data, buffer, 10);
    32c8:	89 89       	ldd	r24, Y+17	; 0x11
    32ca:	9a 89       	ldd	r25, Y+18	; 0x12
    32cc:	9e 01       	movw	r18, r28
    32ce:	2f 5f       	subi	r18, 0xFF	; 255
    32d0:	3f 4f       	sbci	r19, 0xFF	; 255
    32d2:	b9 01       	movw	r22, r18
    32d4:	4a e0       	ldi	r20, 0x0A	; 10
    32d6:	50 e0       	ldi	r21, 0x00	; 0
    32d8:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <itoa>

	// Display string with the results in the buffer
	LCD_displayString(buffer);
    32dc:	ce 01       	movw	r24, r28
    32de:	01 96       	adiw	r24, 0x01	; 1
    32e0:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <LCD_displayString>
}
    32e4:	62 96       	adiw	r28, 0x12	; 18
    32e6:	0f b6       	in	r0, 0x3f	; 63
    32e8:	f8 94       	cli
    32ea:	de bf       	out	0x3e, r29	; 62
    32ec:	0f be       	out	0x3f, r0	; 63
    32ee:	cd bf       	out	0x3d, r28	; 61
    32f0:	cf 91       	pop	r28
    32f2:	df 91       	pop	r29
    32f4:	08 95       	ret

000032f6 <LCD_clearScreen>:

// Clears the LCD from any garbage
void LCD_clearScreen(void) {
    32f6:	df 93       	push	r29
    32f8:	cf 93       	push	r28
    32fa:	cd b7       	in	r28, 0x3d	; 61
    32fc:	de b7       	in	r29, 0x3e	; 62
	// Clears the LCD Display
	LCD_sendCommand(LCD_CLEAR_DISPLAY);
    32fe:	81 e0       	ldi	r24, 0x01	; 1
    3300:	0e 94 30 10 	call	0x2060	; 0x2060 <LCD_sendCommand>
}
    3304:	cf 91       	pop	r28
    3306:	df 91       	pop	r29
    3308:	08 95       	ret

0000330a <KEYPAD_Init>:
	#endif

#endif /* STD_KEYPAD */


void KEYPAD_Init(void) {
    330a:	df 93       	push	r29
    330c:	cf 93       	push	r28
    330e:	cd b7       	in	r28, 0x3d	; 61
    3310:	de b7       	in	r29, 0x3e	; 62
		/* Setup PORT and PINS for for KEYPAD Rows*/
		GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN, PIN_INPUT);
    3312:	81 e0       	ldi	r24, 0x01	; 1
    3314:	64 e0       	ldi	r22, 0x04	; 4
    3316:	40 e0       	ldi	r20, 0x00	; 0
    3318:	0e 94 41 08 	call	0x1082	; 0x1082 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN+1, PIN_INPUT);
    331c:	81 e0       	ldi	r24, 0x01	; 1
    331e:	65 e0       	ldi	r22, 0x05	; 5
    3320:	40 e0       	ldi	r20, 0x00	; 0
    3322:	0e 94 41 08 	call	0x1082	; 0x1082 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN+2, PIN_INPUT);
    3326:	81 e0       	ldi	r24, 0x01	; 1
    3328:	66 e0       	ldi	r22, 0x06	; 6
    332a:	40 e0       	ldi	r20, 0x00	; 0
    332c:	0e 94 41 08 	call	0x1082	; 0x1082 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN+3, PIN_INPUT);
    3330:	81 e0       	ldi	r24, 0x01	; 1
    3332:	67 e0       	ldi	r22, 0x07	; 7
    3334:	40 e0       	ldi	r20, 0x00	; 0
    3336:	0e 94 41 08 	call	0x1082	; 0x1082 <GPIO_setupPinDirection>

		/* Setup PORT and PINS for for KEYPAD Columns*/
		GPIO_setupPinDirection(KEYPAD_COL_PORT, KEYPAD_FIRSTCOL_PIN, PIN_INPUT);
    333a:	81 e0       	ldi	r24, 0x01	; 1
    333c:	60 e0       	ldi	r22, 0x00	; 0
    333e:	40 e0       	ldi	r20, 0x00	; 0
    3340:	0e 94 41 08 	call	0x1082	; 0x1082 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(KEYPAD_COL_PORT, KEYPAD_FIRSTCOL_PIN+1, PIN_INPUT);
    3344:	81 e0       	ldi	r24, 0x01	; 1
    3346:	61 e0       	ldi	r22, 0x01	; 1
    3348:	40 e0       	ldi	r20, 0x00	; 0
    334a:	0e 94 41 08 	call	0x1082	; 0x1082 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(KEYPAD_COL_PORT, KEYPAD_FIRSTCOL_PIN+2, PIN_INPUT);
    334e:	81 e0       	ldi	r24, 0x01	; 1
    3350:	62 e0       	ldi	r22, 0x02	; 2
    3352:	40 e0       	ldi	r20, 0x00	; 0
    3354:	0e 94 41 08 	call	0x1082	; 0x1082 <GPIO_setupPinDirection>

		#if(KEYPAD_COL_NUM == 4)
			GPIO_setupPinDirection(KEYPAD_COL_PORT, KEYPAD_FIRSTCOL_PIN+3, PIN_INPUT);
		#endif
}
    3358:	cf 91       	pop	r28
    335a:	df 91       	pop	r29
    335c:	08 95       	ret

0000335e <KEYPAD_getPressedKey>:


uint8 KEYPAD_getPressedKey(void) {
    335e:	df 93       	push	r29
    3360:	cf 93       	push	r28
    3362:	00 d0       	rcall	.+0      	; 0x3364 <KEYPAD_getPressedKey+0x6>
    3364:	cd b7       	in	r28, 0x3d	; 61
    3366:	de b7       	in	r29, 0x3e	; 62
	uint8 row, col;
	while(1) {
			for (row = 0 ; row < KEYPAD_ROW_NUM ; row++) {
    3368:	1a 82       	std	Y+2, r1	; 0x02
    336a:	3a c0       	rjmp	.+116    	; 0x33e0 <KEYPAD_getPressedKey+0x82>
				// I set the pin by '1' for the row, and will iterate
				GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, PIN_OUTPUT);
    336c:	8a 81       	ldd	r24, Y+2	; 0x02
    336e:	98 2f       	mov	r25, r24
    3370:	9c 5f       	subi	r25, 0xFC	; 252
    3372:	81 e0       	ldi	r24, 0x01	; 1
    3374:	69 2f       	mov	r22, r25
    3376:	41 e0       	ldi	r20, 0x01	; 1
    3378:	0e 94 41 08 	call	0x1082	; 0x1082 <GPIO_setupPinDirection>

				/* Set/Clear the row output pin */
				GPIO_writePin(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, KEYPAD_BUTTON_PRESSED);
    337c:	8a 81       	ldd	r24, Y+2	; 0x02
    337e:	98 2f       	mov	r25, r24
    3380:	9c 5f       	subi	r25, 0xFC	; 252
    3382:	81 e0       	ldi	r24, 0x01	; 1
    3384:	69 2f       	mov	r22, r25
    3386:	40 e0       	ldi	r20, 0x00	; 0
    3388:	0e 94 3d 09 	call	0x127a	; 0x127a <GPIO_writePin>

				for (col = 0 ; col < KEYPAD_COL_NUM ; col++) {
    338c:	19 82       	std	Y+1, r1	; 0x01
    338e:	1a c0       	rjmp	.+52     	; 0x33c4 <KEYPAD_getPressedKey+0x66>
					/* Check if the switch is pressed in this column */
					if(GPIO_readPin(KEYPAD_COL_PORT,KEYPAD_FIRSTCOL_PIN + col) == KEYPAD_BUTTON_PRESSED) {
    3390:	81 e0       	ldi	r24, 0x01	; 1
    3392:	69 81       	ldd	r22, Y+1	; 0x01
    3394:	0e 94 c7 0a 	call	0x158e	; 0x158e <GPIO_readPin>
    3398:	88 23       	and	r24, r24
    339a:	89 f4       	brne	.+34     	; 0x33be <KEYPAD_getPressedKey+0x60>
						#if (KEYPAD_COL_NUM == 3)
							#ifdef STD_KEYPAD
								return ( (row * KEYPAD_COL_NUM) + col + 1);
    339c:	8a 81       	ldd	r24, Y+2	; 0x02
    339e:	28 2f       	mov	r18, r24
    33a0:	30 e0       	ldi	r19, 0x00	; 0
    33a2:	c9 01       	movw	r24, r18
    33a4:	88 0f       	add	r24, r24
    33a6:	99 1f       	adc	r25, r25
    33a8:	82 0f       	add	r24, r18
    33aa:	93 1f       	adc	r25, r19
    33ac:	98 2f       	mov	r25, r24
    33ae:	89 81       	ldd	r24, Y+1	; 0x01
    33b0:	89 0f       	add	r24, r25
    33b2:	8f 5f       	subi	r24, 0xFF	; 255
					}
				}
				GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, PIN_INPUT);
			}
		}
}
    33b4:	0f 90       	pop	r0
    33b6:	0f 90       	pop	r0
    33b8:	cf 91       	pop	r28
    33ba:	df 91       	pop	r29
    33bc:	08 95       	ret
				GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, PIN_OUTPUT);

				/* Set/Clear the row output pin */
				GPIO_writePin(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, KEYPAD_BUTTON_PRESSED);

				for (col = 0 ; col < KEYPAD_COL_NUM ; col++) {
    33be:	89 81       	ldd	r24, Y+1	; 0x01
    33c0:	8f 5f       	subi	r24, 0xFF	; 255
    33c2:	89 83       	std	Y+1, r24	; 0x01
    33c4:	89 81       	ldd	r24, Y+1	; 0x01
    33c6:	83 30       	cpi	r24, 0x03	; 3
    33c8:	18 f3       	brcs	.-58     	; 0x3390 <KEYPAD_getPressedKey+0x32>
								return KEYPAD_4x4_adjustKeyNumber( (row * KEYPAD_COL_NUM) + col + 1);
							#endif
						#endif
					}
				}
				GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, PIN_INPUT);
    33ca:	8a 81       	ldd	r24, Y+2	; 0x02
    33cc:	98 2f       	mov	r25, r24
    33ce:	9c 5f       	subi	r25, 0xFC	; 252
    33d0:	81 e0       	ldi	r24, 0x01	; 1
    33d2:	69 2f       	mov	r22, r25
    33d4:	40 e0       	ldi	r20, 0x00	; 0
    33d6:	0e 94 41 08 	call	0x1082	; 0x1082 <GPIO_setupPinDirection>


uint8 KEYPAD_getPressedKey(void) {
	uint8 row, col;
	while(1) {
			for (row = 0 ; row < KEYPAD_ROW_NUM ; row++) {
    33da:	8a 81       	ldd	r24, Y+2	; 0x02
    33dc:	8f 5f       	subi	r24, 0xFF	; 255
    33de:	8a 83       	std	Y+2, r24	; 0x02
    33e0:	8a 81       	ldd	r24, Y+2	; 0x02
    33e2:	84 30       	cpi	r24, 0x04	; 4
    33e4:	18 f2       	brcs	.-122    	; 0x336c <KEYPAD_getPressedKey+0xe>
    33e6:	c0 cf       	rjmp	.-128    	; 0x3368 <KEYPAD_getPressedKey+0xa>

000033e8 <BUTTON_Init>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
BUTTON_Error_t BUTTON_Init(uint8 port_num, uint8 pin_num) {
    33e8:	df 93       	push	r29
    33ea:	cf 93       	push	r28
    33ec:	00 d0       	rcall	.+0      	; 0x33ee <BUTTON_Init+0x6>
    33ee:	0f 92       	push	r0
    33f0:	cd b7       	in	r28, 0x3d	; 61
    33f2:	de b7       	in	r29, 0x3e	; 62
    33f4:	8a 83       	std	Y+2, r24	; 0x02
    33f6:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t BUTTON_Driver_Checker = NULL;
    33f8:	19 82       	std	Y+1, r1	; 0x01
	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    33fa:	8b 81       	ldd	r24, Y+3	; 0x03
    33fc:	88 30       	cpi	r24, 0x08	; 8
    33fe:	18 f0       	brcs	.+6      	; 0x3406 <BUTTON_Init+0x1e>
		BUTTON_Driver_Checker = BUTTON_WRONG_PIN_NUMBER;
    3400:	81 e0       	ldi	r24, 0x01	; 1
    3402:	89 83       	std	Y+1, r24	; 0x01
    3404:	0c c0       	rjmp	.+24     	; 0x341e <BUTTON_Init+0x36>
	}
	else if((port_num >= NUM_OF_PORTS)) {
    3406:	8a 81       	ldd	r24, Y+2	; 0x02
    3408:	84 30       	cpi	r24, 0x04	; 4
    340a:	18 f0       	brcs	.+6      	; 0x3412 <BUTTON_Init+0x2a>
		BUTTON_Driver_Checker = BUTTON_WRONG_PORT_NUMBER;
    340c:	82 e0       	ldi	r24, 0x02	; 2
    340e:	89 83       	std	Y+1, r24	; 0x01
    3410:	06 c0       	rjmp	.+12     	; 0x341e <BUTTON_Init+0x36>
	}
	else {
		/* Setup the pin direction as required */
		GPIO_setupPinDirection(port_num, pin_num, PIN_INPUT);
    3412:	8a 81       	ldd	r24, Y+2	; 0x02
    3414:	6b 81       	ldd	r22, Y+3	; 0x03
    3416:	40 e0       	ldi	r20, 0x00	; 0
    3418:	0e 94 41 08 	call	0x1082	; 0x1082 <GPIO_setupPinDirection>
		BUTTON_Driver_Checker = BUTTON_OK;
    341c:	19 82       	std	Y+1, r1	; 0x01
	}
	return BUTTON_Driver_Checker;
    341e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3420:	0f 90       	pop	r0
    3422:	0f 90       	pop	r0
    3424:	0f 90       	pop	r0
    3426:	cf 91       	pop	r28
    3428:	df 91       	pop	r29
    342a:	08 95       	ret

0000342c <BUTTON_Read>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
uint8 BUTTON_Read(uint8 port_num, uint8 pin_num) {
    342c:	df 93       	push	r29
    342e:	cf 93       	push	r28
    3430:	00 d0       	rcall	.+0      	; 0x3432 <BUTTON_Read+0x6>
    3432:	0f 92       	push	r0
    3434:	cd b7       	in	r28, 0x3d	; 61
    3436:	de b7       	in	r29, 0x3e	; 62
    3438:	8a 83       	std	Y+2, r24	; 0x02
    343a:	6b 83       	std	Y+3, r22	; 0x03

	uint8_t BUTTON_Driver_Checker = NULL;
    343c:	19 82       	std	Y+1, r1	; 0x01
		if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    343e:	8b 81       	ldd	r24, Y+3	; 0x03
    3440:	88 30       	cpi	r24, 0x08	; 8
    3442:	18 f0       	brcs	.+6      	; 0x344a <BUTTON_Read+0x1e>
			BUTTON_Driver_Checker = BUTTON_WRONG_PIN_NUMBER;
    3444:	81 e0       	ldi	r24, 0x01	; 1
    3446:	89 83       	std	Y+1, r24	; 0x01
    3448:	0b c0       	rjmp	.+22     	; 0x3460 <BUTTON_Read+0x34>
		}
		else if((port_num >= NUM_OF_PORTS)) {
    344a:	8a 81       	ldd	r24, Y+2	; 0x02
    344c:	84 30       	cpi	r24, 0x04	; 4
    344e:	18 f0       	brcs	.+6      	; 0x3456 <BUTTON_Read+0x2a>
			BUTTON_Driver_Checker = BUTTON_WRONG_PORT_NUMBER;
    3450:	82 e0       	ldi	r24, 0x02	; 2
    3452:	89 83       	std	Y+1, r24	; 0x01
    3454:	05 c0       	rjmp	.+10     	; 0x3460 <BUTTON_Read+0x34>
		}
		else {
			/* Setup the pin direction as required */
			GPIO_readPin(port_num, pin_num);
    3456:	8a 81       	ldd	r24, Y+2	; 0x02
    3458:	6b 81       	ldd	r22, Y+3	; 0x03
    345a:	0e 94 c7 0a 	call	0x158e	; 0x158e <GPIO_readPin>
			BUTTON_Driver_Checker = BUTTON_OK;
    345e:	19 82       	std	Y+1, r1	; 0x01
		}
		return GPIO_readPin(port_num, pin_num);
    3460:	8a 81       	ldd	r24, Y+2	; 0x02
    3462:	6b 81       	ldd	r22, Y+3	; 0x03
    3464:	0e 94 c7 0a 	call	0x158e	; 0x158e <GPIO_readPin>
}
    3468:	0f 90       	pop	r0
    346a:	0f 90       	pop	r0
    346c:	0f 90       	pop	r0
    346e:	cf 91       	pop	r28
    3470:	df 91       	pop	r29
    3472:	08 95       	ret

00003474 <main>:
//#include "../ECUAL/SEVEN-SEGMENT_DRIVER/SEGMENT.h"
//#include "../ECUAL/KEYPAD_DRIVER/KEYPAD.h"
//#include "../ECUAL/LCD_DRIVER/LCD.h"
//#include "../MCAL/ADC_DRIVER/ADC.h"

int main(void) {
    3474:	df 93       	push	r29
    3476:	cf 93       	push	r28
    3478:	cd b7       	in	r28, 0x3d	; 61
    347a:	de b7       	in	r29, 0x3e	; 62

	// Initializes LED Driver
	LED_Init(PORT_C, PIN_0);
    347c:	82 e0       	ldi	r24, 0x02	; 2
    347e:	60 e0       	ldi	r22, 0x00	; 0
    3480:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <LED_Init>
	LED_Off(PORT_C, PIN_0);
    3484:	82 e0       	ldi	r24, 0x02	; 2
    3486:	60 e0       	ldi	r22, 0x00	; 0
    3488:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <LED_Off>


	// Initializes Button Driver
	BUTTON_Init(PORT_D, PIN_2);
    348c:	83 e0       	ldi	r24, 0x03	; 3
    348e:	62 e0       	ldi	r22, 0x02	; 2
    3490:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <BUTTON_Init>
	BUTTON_Read(PORT_D, PIN_2);
    3494:	83 e0       	ldi	r24, 0x03	; 3
    3496:	62 e0       	ldi	r22, 0x02	; 2
    3498:	0e 94 16 1a 	call	0x342c	; 0x342c <BUTTON_Read>

	// Initializes External Interrupt Driver
	EXT_INTERRUPT_Init();
    349c:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <EXT_INTERRUPT_Init>
    34a0:	ff cf       	rjmp	.-2      	; 0x34a0 <main+0x2c>

000034a2 <__vector_1>:

	}
}

// The Interrupt Service Routine that will execute the Interrupt
ISR (INT0_vect) {
    34a2:	1f 92       	push	r1
    34a4:	0f 92       	push	r0
    34a6:	0f b6       	in	r0, 0x3f	; 63
    34a8:	0f 92       	push	r0
    34aa:	11 24       	eor	r1, r1
    34ac:	2f 93       	push	r18
    34ae:	3f 93       	push	r19
    34b0:	4f 93       	push	r20
    34b2:	5f 93       	push	r21
    34b4:	6f 93       	push	r22
    34b6:	7f 93       	push	r23
    34b8:	8f 93       	push	r24
    34ba:	9f 93       	push	r25
    34bc:	af 93       	push	r26
    34be:	bf 93       	push	r27
    34c0:	ef 93       	push	r30
    34c2:	ff 93       	push	r31
    34c4:	df 93       	push	r29
    34c6:	cf 93       	push	r28
    34c8:	cd b7       	in	r28, 0x3d	; 61
    34ca:	de b7       	in	r29, 0x3e	; 62
	LED_Toggle(PORT_C, PIN_0);
    34cc:	82 e0       	ldi	r24, 0x02	; 2
    34ce:	60 e0       	ldi	r22, 0x00	; 0
    34d0:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <LED_Toggle>
}
    34d4:	cf 91       	pop	r28
    34d6:	df 91       	pop	r29
    34d8:	ff 91       	pop	r31
    34da:	ef 91       	pop	r30
    34dc:	bf 91       	pop	r27
    34de:	af 91       	pop	r26
    34e0:	9f 91       	pop	r25
    34e2:	8f 91       	pop	r24
    34e4:	7f 91       	pop	r23
    34e6:	6f 91       	pop	r22
    34e8:	5f 91       	pop	r21
    34ea:	4f 91       	pop	r20
    34ec:	3f 91       	pop	r19
    34ee:	2f 91       	pop	r18
    34f0:	0f 90       	pop	r0
    34f2:	0f be       	out	0x3f, r0	; 63
    34f4:	0f 90       	pop	r0
    34f6:	1f 90       	pop	r1
    34f8:	18 95       	reti

000034fa <__mulsi3>:
    34fa:	62 9f       	mul	r22, r18
    34fc:	d0 01       	movw	r26, r0
    34fe:	73 9f       	mul	r23, r19
    3500:	f0 01       	movw	r30, r0
    3502:	82 9f       	mul	r24, r18
    3504:	e0 0d       	add	r30, r0
    3506:	f1 1d       	adc	r31, r1
    3508:	64 9f       	mul	r22, r20
    350a:	e0 0d       	add	r30, r0
    350c:	f1 1d       	adc	r31, r1
    350e:	92 9f       	mul	r25, r18
    3510:	f0 0d       	add	r31, r0
    3512:	83 9f       	mul	r24, r19
    3514:	f0 0d       	add	r31, r0
    3516:	74 9f       	mul	r23, r20
    3518:	f0 0d       	add	r31, r0
    351a:	65 9f       	mul	r22, r21
    351c:	f0 0d       	add	r31, r0
    351e:	99 27       	eor	r25, r25
    3520:	72 9f       	mul	r23, r18
    3522:	b0 0d       	add	r27, r0
    3524:	e1 1d       	adc	r30, r1
    3526:	f9 1f       	adc	r31, r25
    3528:	63 9f       	mul	r22, r19
    352a:	b0 0d       	add	r27, r0
    352c:	e1 1d       	adc	r30, r1
    352e:	f9 1f       	adc	r31, r25
    3530:	bd 01       	movw	r22, r26
    3532:	cf 01       	movw	r24, r30
    3534:	11 24       	eor	r1, r1
    3536:	08 95       	ret

00003538 <__udivmodsi4>:
    3538:	a1 e2       	ldi	r26, 0x21	; 33
    353a:	1a 2e       	mov	r1, r26
    353c:	aa 1b       	sub	r26, r26
    353e:	bb 1b       	sub	r27, r27
    3540:	fd 01       	movw	r30, r26
    3542:	0d c0       	rjmp	.+26     	; 0x355e <__udivmodsi4_ep>

00003544 <__udivmodsi4_loop>:
    3544:	aa 1f       	adc	r26, r26
    3546:	bb 1f       	adc	r27, r27
    3548:	ee 1f       	adc	r30, r30
    354a:	ff 1f       	adc	r31, r31
    354c:	a2 17       	cp	r26, r18
    354e:	b3 07       	cpc	r27, r19
    3550:	e4 07       	cpc	r30, r20
    3552:	f5 07       	cpc	r31, r21
    3554:	20 f0       	brcs	.+8      	; 0x355e <__udivmodsi4_ep>
    3556:	a2 1b       	sub	r26, r18
    3558:	b3 0b       	sbc	r27, r19
    355a:	e4 0b       	sbc	r30, r20
    355c:	f5 0b       	sbc	r31, r21

0000355e <__udivmodsi4_ep>:
    355e:	66 1f       	adc	r22, r22
    3560:	77 1f       	adc	r23, r23
    3562:	88 1f       	adc	r24, r24
    3564:	99 1f       	adc	r25, r25
    3566:	1a 94       	dec	r1
    3568:	69 f7       	brne	.-38     	; 0x3544 <__udivmodsi4_loop>
    356a:	60 95       	com	r22
    356c:	70 95       	com	r23
    356e:	80 95       	com	r24
    3570:	90 95       	com	r25
    3572:	9b 01       	movw	r18, r22
    3574:	ac 01       	movw	r20, r24
    3576:	bd 01       	movw	r22, r26
    3578:	cf 01       	movw	r24, r30
    357a:	08 95       	ret

0000357c <__prologue_saves__>:
    357c:	2f 92       	push	r2
    357e:	3f 92       	push	r3
    3580:	4f 92       	push	r4
    3582:	5f 92       	push	r5
    3584:	6f 92       	push	r6
    3586:	7f 92       	push	r7
    3588:	8f 92       	push	r8
    358a:	9f 92       	push	r9
    358c:	af 92       	push	r10
    358e:	bf 92       	push	r11
    3590:	cf 92       	push	r12
    3592:	df 92       	push	r13
    3594:	ef 92       	push	r14
    3596:	ff 92       	push	r15
    3598:	0f 93       	push	r16
    359a:	1f 93       	push	r17
    359c:	cf 93       	push	r28
    359e:	df 93       	push	r29
    35a0:	cd b7       	in	r28, 0x3d	; 61
    35a2:	de b7       	in	r29, 0x3e	; 62
    35a4:	ca 1b       	sub	r28, r26
    35a6:	db 0b       	sbc	r29, r27
    35a8:	0f b6       	in	r0, 0x3f	; 63
    35aa:	f8 94       	cli
    35ac:	de bf       	out	0x3e, r29	; 62
    35ae:	0f be       	out	0x3f, r0	; 63
    35b0:	cd bf       	out	0x3d, r28	; 61
    35b2:	09 94       	ijmp

000035b4 <__epilogue_restores__>:
    35b4:	2a 88       	ldd	r2, Y+18	; 0x12
    35b6:	39 88       	ldd	r3, Y+17	; 0x11
    35b8:	48 88       	ldd	r4, Y+16	; 0x10
    35ba:	5f 84       	ldd	r5, Y+15	; 0x0f
    35bc:	6e 84       	ldd	r6, Y+14	; 0x0e
    35be:	7d 84       	ldd	r7, Y+13	; 0x0d
    35c0:	8c 84       	ldd	r8, Y+12	; 0x0c
    35c2:	9b 84       	ldd	r9, Y+11	; 0x0b
    35c4:	aa 84       	ldd	r10, Y+10	; 0x0a
    35c6:	b9 84       	ldd	r11, Y+9	; 0x09
    35c8:	c8 84       	ldd	r12, Y+8	; 0x08
    35ca:	df 80       	ldd	r13, Y+7	; 0x07
    35cc:	ee 80       	ldd	r14, Y+6	; 0x06
    35ce:	fd 80       	ldd	r15, Y+5	; 0x05
    35d0:	0c 81       	ldd	r16, Y+4	; 0x04
    35d2:	1b 81       	ldd	r17, Y+3	; 0x03
    35d4:	aa 81       	ldd	r26, Y+2	; 0x02
    35d6:	b9 81       	ldd	r27, Y+1	; 0x01
    35d8:	ce 0f       	add	r28, r30
    35da:	d1 1d       	adc	r29, r1
    35dc:	0f b6       	in	r0, 0x3f	; 63
    35de:	f8 94       	cli
    35e0:	de bf       	out	0x3e, r29	; 62
    35e2:	0f be       	out	0x3f, r0	; 63
    35e4:	cd bf       	out	0x3d, r28	; 61
    35e6:	ed 01       	movw	r28, r26
    35e8:	08 95       	ret

000035ea <itoa>:
    35ea:	fb 01       	movw	r30, r22
    35ec:	9f 01       	movw	r18, r30
    35ee:	e8 94       	clt
    35f0:	42 30       	cpi	r20, 0x02	; 2
    35f2:	c4 f0       	brlt	.+48     	; 0x3624 <itoa+0x3a>
    35f4:	45 32       	cpi	r20, 0x25	; 37
    35f6:	b4 f4       	brge	.+44     	; 0x3624 <itoa+0x3a>
    35f8:	4a 30       	cpi	r20, 0x0A	; 10
    35fa:	29 f4       	brne	.+10     	; 0x3606 <itoa+0x1c>
    35fc:	97 fb       	bst	r25, 7
    35fe:	1e f4       	brtc	.+6      	; 0x3606 <itoa+0x1c>
    3600:	90 95       	com	r25
    3602:	81 95       	neg	r24
    3604:	9f 4f       	sbci	r25, 0xFF	; 255
    3606:	64 2f       	mov	r22, r20
    3608:	77 27       	eor	r23, r23
    360a:	0e 94 26 1b 	call	0x364c	; 0x364c <__udivmodhi4>
    360e:	80 5d       	subi	r24, 0xD0	; 208
    3610:	8a 33       	cpi	r24, 0x3A	; 58
    3612:	0c f0       	brlt	.+2      	; 0x3616 <itoa+0x2c>
    3614:	89 5d       	subi	r24, 0xD9	; 217
    3616:	81 93       	st	Z+, r24
    3618:	cb 01       	movw	r24, r22
    361a:	00 97       	sbiw	r24, 0x00	; 0
    361c:	a1 f7       	brne	.-24     	; 0x3606 <itoa+0x1c>
    361e:	16 f4       	brtc	.+4      	; 0x3624 <itoa+0x3a>
    3620:	5d e2       	ldi	r21, 0x2D	; 45
    3622:	51 93       	st	Z+, r21
    3624:	10 82       	st	Z, r1
    3626:	c9 01       	movw	r24, r18
    3628:	0c 94 16 1b 	jmp	0x362c	; 0x362c <strrev>

0000362c <strrev>:
    362c:	dc 01       	movw	r26, r24
    362e:	fc 01       	movw	r30, r24
    3630:	67 2f       	mov	r22, r23
    3632:	71 91       	ld	r23, Z+
    3634:	77 23       	and	r23, r23
    3636:	e1 f7       	brne	.-8      	; 0x3630 <strrev+0x4>
    3638:	32 97       	sbiw	r30, 0x02	; 2
    363a:	04 c0       	rjmp	.+8      	; 0x3644 <strrev+0x18>
    363c:	7c 91       	ld	r23, X
    363e:	6d 93       	st	X+, r22
    3640:	70 83       	st	Z, r23
    3642:	62 91       	ld	r22, -Z
    3644:	ae 17       	cp	r26, r30
    3646:	bf 07       	cpc	r27, r31
    3648:	c8 f3       	brcs	.-14     	; 0x363c <strrev+0x10>
    364a:	08 95       	ret

0000364c <__udivmodhi4>:
    364c:	aa 1b       	sub	r26, r26
    364e:	bb 1b       	sub	r27, r27
    3650:	51 e1       	ldi	r21, 0x11	; 17
    3652:	07 c0       	rjmp	.+14     	; 0x3662 <__udivmodhi4_ep>

00003654 <__udivmodhi4_loop>:
    3654:	aa 1f       	adc	r26, r26
    3656:	bb 1f       	adc	r27, r27
    3658:	a6 17       	cp	r26, r22
    365a:	b7 07       	cpc	r27, r23
    365c:	10 f0       	brcs	.+4      	; 0x3662 <__udivmodhi4_ep>
    365e:	a6 1b       	sub	r26, r22
    3660:	b7 0b       	sbc	r27, r23

00003662 <__udivmodhi4_ep>:
    3662:	88 1f       	adc	r24, r24
    3664:	99 1f       	adc	r25, r25
    3666:	5a 95       	dec	r21
    3668:	a9 f7       	brne	.-22     	; 0x3654 <__udivmodhi4_loop>
    366a:	80 95       	com	r24
    366c:	90 95       	com	r25
    366e:	bc 01       	movw	r22, r24
    3670:	cd 01       	movw	r24, r26
    3672:	08 95       	ret

00003674 <_exit>:
    3674:	f8 94       	cli

00003676 <__stop_program>:
    3676:	ff cf       	rjmp	.-2      	; 0x3676 <__stop_program>
