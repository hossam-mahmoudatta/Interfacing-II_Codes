
USART_EX1_HOSA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003b72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00003b72  00003c06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800168  00800168  00003d0e  2**0
                  ALLOC
  3 .stab         000050d0  00000000  00000000  00003d10  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000222d  00000000  00000000  00008de0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000b00d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000b1ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000b39f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000d7aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000eb30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000fd08  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000fec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  000101be  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010b2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 ce 1c 	jmp	0x399c	; 0x399c <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	aa 36       	cpi	r26, 0x6A	; 106
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e2 e7       	ldi	r30, 0x72	; 114
      78:	fb e3       	ldi	r31, 0x3B	; 59
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 b7 1c 	call	0x396e	; 0x396e <main>
      8a:	0c 94 b7 1d 	jmp	0x3b6e	; 0x3b6e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 3b 1d 	jmp	0x3a76	; 0x3a76 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 57 1d 	jmp	0x3aae	; 0x3aae <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 47 1d 	jmp	0x3a8e	; 0x3a8e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 63 1d 	jmp	0x3ac6	; 0x3ac6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 47 1d 	jmp	0x3a8e	; 0x3a8e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 63 1d 	jmp	0x3ac6	; 0x3ac6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 3b 1d 	jmp	0x3a76	; 0x3a76 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 57 1d 	jmp	0x3aae	; 0x3aae <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 43 1d 	jmp	0x3a86	; 0x3a86 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 5f 1d 	jmp	0x3abe	; 0x3abe <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 47 1d 	jmp	0x3a8e	; 0x3a8e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 63 1d 	jmp	0x3ac6	; 0x3ac6 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 47 1d 	jmp	0x3a8e	; 0x3a8e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 63 1d 	jmp	0x3ac6	; 0x3ac6 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 47 1d 	jmp	0x3a8e	; 0x3a8e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 63 1d 	jmp	0x3ac6	; 0x3ac6 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 4b 1d 	jmp	0x3a96	; 0x3a96 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 67 1d 	jmp	0x3ace	; 0x3ace <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 43 1d 	jmp	0x3a86	; 0x3a86 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 5f 1d 	jmp	0x3abe	; 0x3abe <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <USART_Init>:
#include "avr/io.h" /* To use the IO Ports Registers */
#include <util/delay.h>


// Initializes and enables the USART Module to start functionality
void USART_Init(uint32 baudRate) {
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <USART_Init+0x6>
     e34:	00 d0       	rcall	.+0      	; 0xe36 <USART_Init+0x8>
     e36:	00 d0       	rcall	.+0      	; 0xe38 <USART_Init+0xa>
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
     e3c:	6b 83       	std	Y+3, r22	; 0x03
     e3e:	7c 83       	std	Y+4, r23	; 0x04
     e40:	8d 83       	std	Y+5, r24	; 0x05
     e42:	9e 83       	std	Y+6, r25	; 0x06

	// To initialize this Init Function, i need to:
	// Tweak the Frame
	// Set the baud rate

	uint16 UBBR_Value = 0;
     e44:	1a 82       	std	Y+2, r1	; 0x02
     e46:	19 82       	std	Y+1, r1	; 0x01

	SET_BIT(UCSRA, U2X);
     e48:	ab e2       	ldi	r26, 0x2B	; 43
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	eb e2       	ldi	r30, 0x2B	; 43
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	82 60       	ori	r24, 0x02	; 2
     e54:	8c 93       	st	X, r24

	SET_BIT(UCSRB, TXEN);
     e56:	aa e2       	ldi	r26, 0x2A	; 42
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	ea e2       	ldi	r30, 0x2A	; 42
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	88 60       	ori	r24, 0x08	; 8
     e62:	8c 93       	st	X, r24
	SET_BIT(UCSRB, RXEN);
     e64:	aa e2       	ldi	r26, 0x2A	; 42
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	ea e2       	ldi	r30, 0x2A	; 42
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	80 61       	ori	r24, 0x10	; 16
     e70:	8c 93       	st	X, r24

	SET_BIT(UCSRC, URSEL);
     e72:	a0 e4       	ldi	r26, 0x40	; 64
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	e0 e4       	ldi	r30, 0x40	; 64
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	80 68       	ori	r24, 0x80	; 128
     e7e:	8c 93       	st	X, r24
	CLR_BIT(UCSRC, UMSEL);
     e80:	a0 e4       	ldi	r26, 0x40	; 64
     e82:	b0 e0       	ldi	r27, 0x00	; 0
     e84:	e0 e4       	ldi	r30, 0x40	; 64
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	8f 7b       	andi	r24, 0xBF	; 191
     e8c:	8c 93       	st	X, r24
	SET_BIT(UCSRC, TXEN);
     e8e:	a0 e4       	ldi	r26, 0x40	; 64
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	e0 e4       	ldi	r30, 0x40	; 64
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	88 60       	ori	r24, 0x08	; 8
     e9a:	8c 93       	st	X, r24

	CLR_BIT(UCSRC, UCSZ2);
     e9c:	a0 e4       	ldi	r26, 0x40	; 64
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e0 e4       	ldi	r30, 0x40	; 64
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	8b 7f       	andi	r24, 0xFB	; 251
     ea8:	8c 93       	st	X, r24
	SET_BIT(UCSRC, UCSZ1);
     eaa:	a0 e4       	ldi	r26, 0x40	; 64
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e0 e4       	ldi	r30, 0x40	; 64
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	84 60       	ori	r24, 0x04	; 4
     eb6:	8c 93       	st	X, r24
	SET_BIT(UCSRC, UCSZ0);
     eb8:	a0 e4       	ldi	r26, 0x40	; 64
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e0 e4       	ldi	r30, 0x40	; 64
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	82 60       	ori	r24, 0x02	; 2
     ec4:	8c 93       	st	X, r24

	// UBBRH = 0;
	// UBBRL = 207;
	// (0000) (1100 1111) 12 bits, (0000) is for UBBRH, (1100 1111) if for UBBRL

	UBBR_Value = (uint16) ( ( (F_CPU) / (8 * baudRate * 8UL) ) - 1 );
     ec6:	8b 81       	ldd	r24, Y+3	; 0x03
     ec8:	9c 81       	ldd	r25, Y+4	; 0x04
     eca:	ad 81       	ldd	r26, Y+5	; 0x05
     ecc:	be 81       	ldd	r27, Y+6	; 0x06
     ece:	88 0f       	add	r24, r24
     ed0:	99 1f       	adc	r25, r25
     ed2:	aa 1f       	adc	r26, r26
     ed4:	bb 1f       	adc	r27, r27
     ed6:	88 0f       	add	r24, r24
     ed8:	99 1f       	adc	r25, r25
     eda:	aa 1f       	adc	r26, r26
     edc:	bb 1f       	adc	r27, r27
     ede:	88 0f       	add	r24, r24
     ee0:	99 1f       	adc	r25, r25
     ee2:	aa 1f       	adc	r26, r26
     ee4:	bb 1f       	adc	r27, r27
     ee6:	88 0f       	add	r24, r24
     ee8:	99 1f       	adc	r25, r25
     eea:	aa 1f       	adc	r26, r26
     eec:	bb 1f       	adc	r27, r27
     eee:	88 0f       	add	r24, r24
     ef0:	99 1f       	adc	r25, r25
     ef2:	aa 1f       	adc	r26, r26
     ef4:	bb 1f       	adc	r27, r27
     ef6:	88 0f       	add	r24, r24
     ef8:	99 1f       	adc	r25, r25
     efa:	aa 1f       	adc	r26, r26
     efc:	bb 1f       	adc	r27, r27
     efe:	9c 01       	movw	r18, r24
     f00:	ad 01       	movw	r20, r26
     f02:	80 e4       	ldi	r24, 0x40	; 64
     f04:	92 e4       	ldi	r25, 0x42	; 66
     f06:	af e0       	ldi	r26, 0x0F	; 15
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	bc 01       	movw	r22, r24
     f0c:	cd 01       	movw	r24, r26
     f0e:	0e 94 19 1d 	call	0x3a32	; 0x3a32 <__udivmodsi4>
     f12:	da 01       	movw	r26, r20
     f14:	c9 01       	movw	r24, r18
     f16:	01 97       	sbiw	r24, 0x01	; 1
     f18:	9a 83       	std	Y+2, r25	; 0x02
     f1a:	89 83       	std	Y+1, r24	; 0x01
	UBRRH = UBBR_Value >> 8;
     f1c:	e0 e4       	ldi	r30, 0x40	; 64
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	89 81       	ldd	r24, Y+1	; 0x01
     f22:	9a 81       	ldd	r25, Y+2	; 0x02
     f24:	89 2f       	mov	r24, r25
     f26:	99 27       	eor	r25, r25
     f28:	80 83       	st	Z, r24
	// Because I want the 4 Zeroes in it

	UBRRL = UBBR_Value;
     f2a:	e9 e2       	ldi	r30, 0x29	; 41
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	89 81       	ldd	r24, Y+1	; 0x01
     f30:	80 83       	st	Z, r24
	// Because I want the actual value

}
     f32:	26 96       	adiw	r28, 0x06	; 6
     f34:	0f b6       	in	r0, 0x3f	; 63
     f36:	f8 94       	cli
     f38:	de bf       	out	0x3e, r29	; 62
     f3a:	0f be       	out	0x3f, r0	; 63
     f3c:	cd bf       	out	0x3d, r28	; 61
     f3e:	cf 91       	pop	r28
     f40:	df 91       	pop	r29
     f42:	08 95       	ret

00000f44 <USART_sendByte>:


// Responsible for the USART to send a byte
void USART_sendByte(const uint8 data) {
     f44:	df 93       	push	r29
     f46:	cf 93       	push	r28
     f48:	0f 92       	push	r0
     f4a:	cd b7       	in	r28, 0x3d	; 61
     f4c:	de b7       	in	r29, 0x3e	; 62
     f4e:	89 83       	std	Y+1, r24	; 0x01
	  *  Bit 5 – UDRE: USART Data Register Empty
	  *
	  *  UDRE flag is set when the TX Buffer (UDR) is empty and ready
	  *  for transmitting a new byte waiting untill this flag is set to '1'
	  */
	while(BIT_IS_CLR(UCSRA,UDRE)) {
     f50:	eb e2       	ldi	r30, 0x2B	; 43
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	80 81       	ld	r24, Z
     f56:	88 2f       	mov	r24, r24
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	80 72       	andi	r24, 0x20	; 32
     f5c:	90 70       	andi	r25, 0x00	; 0
     f5e:	00 97       	sbiw	r24, 0x00	; 0
     f60:	b9 f3       	breq	.-18     	; 0xf50 <USART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
     f62:	ec e2       	ldi	r30, 0x2C	; 44
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	80 83       	st	Z, r24

	} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	// This is waiting for the flag to be set to '0' to know that I received data
	*******************************************************************/
}
     f6a:	0f 90       	pop	r0
     f6c:	cf 91       	pop	r28
     f6e:	df 91       	pop	r29
     f70:	08 95       	ret

00000f72 <USART_receiveByte>:


// Responsible for the USART to receive a byte
uint8 USART_receiveByte(void) {
     f72:	df 93       	push	r29
     f74:	cf 93       	push	r28
     f76:	cd b7       	in	r28, 0x3d	; 61
     f78:	de b7       	in	r29, 0x3e	; 62
	/* UCSRA - USART Control and Status Register A
	  *  Bit 7 – RXC: USART Receive Complete, when it receives data, the flag = 0
	  */

	while ( BIT_IS_CLR(UCSRA, RXC) );
     f7a:	eb e2       	ldi	r30, 0x2B	; 43
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	88 23       	and	r24, r24
     f82:	dc f7       	brge	.-10     	; 0xf7a <USART_receiveByte+0x8>
	// This is waiting for the flag to be set to '0' to know that I received data

	// When reading
	return UDR;
     f84:	ec e2       	ldi	r30, 0x2C	; 44
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
}
     f8a:	cf 91       	pop	r28
     f8c:	df 91       	pop	r29
     f8e:	08 95       	ret

00000f90 <USART_sendString>:


// Responsible for the USART to send an array of bytes, a string
void USART_sendString(const uint8 *str) {
     f90:	df 93       	push	r29
     f92:	cf 93       	push	r28
     f94:	00 d0       	rcall	.+0      	; 0xf96 <USART_sendString+0x6>
     f96:	0f 92       	push	r0
     f98:	cd b7       	in	r28, 0x3d	; 61
     f9a:	de b7       	in	r29, 0x3e	; 62
     f9c:	9b 83       	std	Y+3, r25	; 0x03
     f9e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     fa0:	19 82       	std	Y+1, r1	; 0x01
     fa2:	0e c0       	rjmp	.+28     	; 0xfc0 <USART_sendString+0x30>
	while (str[i] != '\0') {
		USART_sendByte(str[i]);
     fa4:	89 81       	ldd	r24, Y+1	; 0x01
     fa6:	28 2f       	mov	r18, r24
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	8a 81       	ldd	r24, Y+2	; 0x02
     fac:	9b 81       	ldd	r25, Y+3	; 0x03
     fae:	fc 01       	movw	r30, r24
     fb0:	e2 0f       	add	r30, r18
     fb2:	f3 1f       	adc	r31, r19
     fb4:	80 81       	ld	r24, Z
     fb6:	0e 94 a2 07 	call	0xf44	; 0xf44 <USART_sendByte>
		i++;
     fba:	89 81       	ldd	r24, Y+1	; 0x01
     fbc:	8f 5f       	subi	r24, 0xFF	; 255
     fbe:	89 83       	std	Y+1, r24	; 0x01


// Responsible for the USART to send an array of bytes, a string
void USART_sendString(const uint8 *str) {
	uint8 i = 0;
	while (str[i] != '\0') {
     fc0:	89 81       	ldd	r24, Y+1	; 0x01
     fc2:	28 2f       	mov	r18, r24
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	8a 81       	ldd	r24, Y+2	; 0x02
     fc8:	9b 81       	ldd	r25, Y+3	; 0x03
     fca:	fc 01       	movw	r30, r24
     fcc:	e2 0f       	add	r30, r18
     fce:	f3 1f       	adc	r31, r19
     fd0:	80 81       	ld	r24, Z
     fd2:	88 23       	and	r24, r24
     fd4:	39 f7       	brne	.-50     	; 0xfa4 <USART_sendString+0x14>
		USART_sendByte(str[i]);
		i++;
	}
}
     fd6:	0f 90       	pop	r0
     fd8:	0f 90       	pop	r0
     fda:	0f 90       	pop	r0
     fdc:	cf 91       	pop	r28
     fde:	df 91       	pop	r29
     fe0:	08 95       	ret

00000fe2 <USART_receiveString>:


// Responsible for the USART to receive an array of bytes, a string
void USART_receiveString(uint8 *str) {
     fe2:	0f 93       	push	r16
     fe4:	1f 93       	push	r17
     fe6:	df 93       	push	r29
     fe8:	cf 93       	push	r28
     fea:	00 d0       	rcall	.+0      	; 0xfec <USART_receiveString+0xa>
     fec:	0f 92       	push	r0
     fee:	cd b7       	in	r28, 0x3d	; 61
     ff0:	de b7       	in	r29, 0x3e	; 62
     ff2:	9b 83       	std	Y+3, r25	; 0x03
     ff4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     ff6:	19 82       	std	Y+1, r1	; 0x01
	str[i] = USART_receiveByte();
     ff8:	89 81       	ldd	r24, Y+1	; 0x01
     ffa:	28 2f       	mov	r18, r24
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    1000:	9b 81       	ldd	r25, Y+3	; 0x03
    1002:	8c 01       	movw	r16, r24
    1004:	02 0f       	add	r16, r18
    1006:	13 1f       	adc	r17, r19
    1008:	0e 94 b9 07 	call	0xf72	; 0xf72 <USART_receiveByte>
    100c:	f8 01       	movw	r30, r16
    100e:	80 83       	st	Z, r24
    1010:	0f c0       	rjmp	.+30     	; 0x1030 <USART_receiveString+0x4e>

	while (str[i] != '#') {
		i++;
    1012:	89 81       	ldd	r24, Y+1	; 0x01
    1014:	8f 5f       	subi	r24, 0xFF	; 255
    1016:	89 83       	std	Y+1, r24	; 0x01
		str[i] = USART_receiveByte();
    1018:	89 81       	ldd	r24, Y+1	; 0x01
    101a:	28 2f       	mov	r18, r24
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	8a 81       	ldd	r24, Y+2	; 0x02
    1020:	9b 81       	ldd	r25, Y+3	; 0x03
    1022:	8c 01       	movw	r16, r24
    1024:	02 0f       	add	r16, r18
    1026:	13 1f       	adc	r17, r19
    1028:	0e 94 b9 07 	call	0xf72	; 0xf72 <USART_receiveByte>
    102c:	f8 01       	movw	r30, r16
    102e:	80 83       	st	Z, r24
// Responsible for the USART to receive an array of bytes, a string
void USART_receiveString(uint8 *str) {
	uint8 i = 0;
	str[i] = USART_receiveByte();

	while (str[i] != '#') {
    1030:	89 81       	ldd	r24, Y+1	; 0x01
    1032:	28 2f       	mov	r18, r24
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	8a 81       	ldd	r24, Y+2	; 0x02
    1038:	9b 81       	ldd	r25, Y+3	; 0x03
    103a:	fc 01       	movw	r30, r24
    103c:	e2 0f       	add	r30, r18
    103e:	f3 1f       	adc	r31, r19
    1040:	80 81       	ld	r24, Z
    1042:	83 32       	cpi	r24, 0x23	; 35
    1044:	31 f7       	brne	.-52     	; 0x1012 <USART_receiveString+0x30>
		i++;
		str[i] = USART_receiveByte();
	}
	str[i] = '\0'; // replacing the '#' with '\0'
    1046:	89 81       	ldd	r24, Y+1	; 0x01
    1048:	28 2f       	mov	r18, r24
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	8a 81       	ldd	r24, Y+2	; 0x02
    104e:	9b 81       	ldd	r25, Y+3	; 0x03
    1050:	fc 01       	movw	r30, r24
    1052:	e2 0f       	add	r30, r18
    1054:	f3 1f       	adc	r31, r19
    1056:	10 82       	st	Z, r1
}
    1058:	0f 90       	pop	r0
    105a:	0f 90       	pop	r0
    105c:	0f 90       	pop	r0
    105e:	cf 91       	pop	r28
    1060:	df 91       	pop	r29
    1062:	1f 91       	pop	r17
    1064:	0f 91       	pop	r16
    1066:	08 95       	ret

00001068 <SPI_initMaster>:
#include "avr/io.h" /* To use the IO Ports Registers */
#include <util/delay.h>


// Initializes and enables the Master mode for the SPI Module to start functionality
void SPI_initMaster(void) {
    1068:	df 93       	push	r29
    106a:	cf 93       	push	r28
    106c:	cd b7       	in	r28, 0x3d	; 61
    106e:	de b7       	in	r29, 0x3e	; 62
	 *	SS (PB4)   	--> 	Output
	 *	MOSI (PB5) --> 	Output
	 *	MISO (PB6) --> 	Input
	 *	SCK (PB7) 	--> 	Output
	 */
	GPIO_setupPinDirection(PORT_B, SS, PIN_OUTPUT);
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	64 e0       	ldi	r22, 0x04	; 4
    1074:	41 e0       	ldi	r20, 0x01	; 1
    1076:	0e 94 1e 0a 	call	0x143c	; 0x143c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORT_B, MOSI, PIN_OUTPUT);
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	65 e0       	ldi	r22, 0x05	; 5
    107e:	41 e0       	ldi	r20, 0x01	; 1
    1080:	0e 94 1e 0a 	call	0x143c	; 0x143c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORT_B, MISO, PIN_INPUT);
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	66 e0       	ldi	r22, 0x06	; 6
    1088:	40 e0       	ldi	r20, 0x00	; 0
    108a:	0e 94 1e 0a 	call	0x143c	; 0x143c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORT_B, SCK, PIN_OUTPUT);
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	67 e0       	ldi	r22, 0x07	; 7
    1092:	41 e0       	ldi	r20, 0x01	; 1
    1094:	0e 94 1e 0a 	call	0x143c	; 0x143c <GPIO_setupPinDirection>
	  *  Bit 3 – CPOL: Clock Polarity
	  *  Bit 2 – CPHA: Clock Phase
	  *  Bits 1, 0 – SPR1, SPR0: SPI Clock Rate Select 1 and 0
	  */

	SET_BIT(SPCR, SPE); // Enabling the SPI Module
    1098:	ad e2       	ldi	r26, 0x2D	; 45
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	ed e2       	ldi	r30, 0x2D	; 45
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	80 64       	ori	r24, 0x40	; 64
    10a4:	8c 93       	st	X, r24
	SET_BIT(SPCR, MSTR); // Enabling the Master / Slave Mode; I will choose Master
    10a6:	ad e2       	ldi	r26, 0x2D	; 45
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	ed e2       	ldi	r30, 0x2D	; 45
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	80 61       	ori	r24, 0x10	; 16
    10b2:	8c 93       	st	X, r24
	CLR_BIT(SPCR, SPR1); // Choosing the SCK rate, Fosc / 4
    10b4:	ad e2       	ldi	r26, 0x2D	; 45
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	ed e2       	ldi	r30, 0x2D	; 45
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	8d 7f       	andi	r24, 0xFD	; 253
    10c0:	8c 93       	st	X, r24
	CLR_BIT(SPCR, SPR0); // So SPR1, SPR0 = '00'
    10c2:	ad e2       	ldi	r26, 0x2D	; 45
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	ed e2       	ldi	r30, 0x2D	; 45
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	8e 7f       	andi	r24, 0xFE	; 254
    10ce:	8c 93       	st	X, r24
	  *  Bit 7 – SPIF: SPI Interrupt Flag
	  *  Bit 6 – WCOL: Write COLlision Flag
	  *  Bit 5..1 – Res: Reserved Bits
	  *  Bit 0 – SPI2X: Double SPI Speed Bit
	  */
	CLR_BIT(SPSR, SPI2X); // Make SPI2X = '0' to support the Fosc / 4
    10d0:	ae e2       	ldi	r26, 0x2E	; 46
    10d2:	b0 e0       	ldi	r27, 0x00	; 0
    10d4:	ee e2       	ldi	r30, 0x2E	; 46
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	8e 7f       	andi	r24, 0xFE	; 254
    10dc:	8c 93       	st	X, r24

}
    10de:	cf 91       	pop	r28
    10e0:	df 91       	pop	r29
    10e2:	08 95       	ret

000010e4 <SPI_initSlave>:


// Initializes and enables the Slave mode for the SPI Module to start functionality
void SPI_initSlave(void) {
    10e4:	df 93       	push	r29
    10e6:	cf 93       	push	r28
    10e8:	cd b7       	in	r28, 0x3d	; 61
    10ea:	de b7       	in	r29, 0x3e	; 62
	 *	SS (PB4)   	--> 	Input
	 *	MOSI (PB5) --> 	Input
	 *	MISO (PB6) --> 	Output
	 *	SCK (PB7) 	--> 	Input
	 */
	GPIO_setupPinDirection(PORT_B, SS, PIN_INPUT);
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	64 e0       	ldi	r22, 0x04	; 4
    10f0:	40 e0       	ldi	r20, 0x00	; 0
    10f2:	0e 94 1e 0a 	call	0x143c	; 0x143c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORT_B, MOSI, PIN_INPUT);
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	65 e0       	ldi	r22, 0x05	; 5
    10fa:	40 e0       	ldi	r20, 0x00	; 0
    10fc:	0e 94 1e 0a 	call	0x143c	; 0x143c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORT_B, MISO, PIN_OUTPUT);
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	66 e0       	ldi	r22, 0x06	; 6
    1104:	41 e0       	ldi	r20, 0x01	; 1
    1106:	0e 94 1e 0a 	call	0x143c	; 0x143c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORT_B, SCK, PIN_INPUT);
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	67 e0       	ldi	r22, 0x07	; 7
    110e:	40 e0       	ldi	r20, 0x00	; 0
    1110:	0e 94 1e 0a 	call	0x143c	; 0x143c <GPIO_setupPinDirection>
	  *  Bit 4 – MSTR: Master/Slave Select
	  *  Bit 3 – CPOL: Clock Polarity
	  *  Bit 2 – CPHA: Clock Phase
	  *  Bits 1, 0 – SPR1, SPR0: SPI Clock Rate Select 1 and 0
	  */
	SET_BIT(SPCR, SPE); // Enabling the SPI Module
    1114:	ad e2       	ldi	r26, 0x2D	; 45
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	ed e2       	ldi	r30, 0x2D	; 45
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	80 64       	ori	r24, 0x40	; 64
    1120:	8c 93       	st	X, r24
	CLR_BIT(SPCR, MSTR); // Enabling the Master / Slave Mode; I will choose Master
    1122:	ad e2       	ldi	r26, 0x2D	; 45
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	ed e2       	ldi	r30, 0x2D	; 45
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	8f 7e       	andi	r24, 0xEF	; 239
    112e:	8c 93       	st	X, r24
	CLR_BIT(SPCR, SPR1); // Choosing the SCK rate, Fosc / 4
    1130:	ad e2       	ldi	r26, 0x2D	; 45
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	ed e2       	ldi	r30, 0x2D	; 45
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	8d 7f       	andi	r24, 0xFD	; 253
    113c:	8c 93       	st	X, r24
	CLR_BIT(SPCR, SPR0); // So SPR1, SPR0 = '00'
    113e:	ad e2       	ldi	r26, 0x2D	; 45
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	ed e2       	ldi	r30, 0x2D	; 45
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	8e 7f       	andi	r24, 0xFE	; 254
    114a:	8c 93       	st	X, r24
	  *  Bit 7 – SPIF: SPI Interrupt Flag
	  *  Bit 6 – WCOL: Write COLlision Flag
	  *  Bit 5..1 – Res: Reserved Bits
	  *  Bit 0 – SPI2X: Double SPI Speed Bit
	  */
	CLR_BIT(SPSR, SPI2X); // Make SPI2X = '0' to support the Fosc / 4
    114c:	ae e2       	ldi	r26, 0x2E	; 46
    114e:	b0 e0       	ldi	r27, 0x00	; 0
    1150:	ee e2       	ldi	r30, 0x2E	; 46
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	8e 7f       	andi	r24, 0xFE	; 254
    1158:	8c 93       	st	X, r24

}
    115a:	cf 91       	pop	r28
    115c:	df 91       	pop	r29
    115e:	08 95       	ret

00001160 <SPI_sendReceiveByte>:


// Responsible for the SPI to send & receive a byte
uint8 SPI_sendReceiveByte(uint8 data) {
    1160:	df 93       	push	r29
    1162:	cf 93       	push	r28
    1164:	0f 92       	push	r0
    1166:	cd b7       	in	r28, 0x3d	; 61
    1168:	de b7       	in	r29, 0x3e	; 62
    116a:	89 83       	std	Y+1, r24	; 0x01

	SPDR = data;
    116c:	ef e2       	ldi	r30, 0x2F	; 47
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	89 81       	ldd	r24, Y+1	; 0x01
    1172:	80 83       	st	Z, r24

	while(BIT_IS_CLR(SPSR, SPIF)) {
    1174:	ee e2       	ldi	r30, 0x2E	; 46
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	88 23       	and	r24, r24
    117c:	dc f7       	brge	.-10     	; 0x1174 <SPI_sendReceiveByte+0x14>
		 * flag is set, Master will set SS to low to generate clock on SCK pin
		 */
	}

	// after SPIF is set, then I return the data
	return SPDR;
    117e:	ef e2       	ldi	r30, 0x2F	; 47
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
}
    1184:	0f 90       	pop	r0
    1186:	cf 91       	pop	r28
    1188:	df 91       	pop	r29
    118a:	08 95       	ret

0000118c <SPI_sendString>:

void SPI_sendString(const uint8 *str) {
    118c:	df 93       	push	r29
    118e:	cf 93       	push	r28
    1190:	00 d0       	rcall	.+0      	; 0x1192 <SPI_sendString+0x6>
    1192:	00 d0       	rcall	.+0      	; 0x1194 <SPI_sendString+0x8>
    1194:	cd b7       	in	r28, 0x3d	; 61
    1196:	de b7       	in	r29, 0x3e	; 62
    1198:	9c 83       	std	Y+4, r25	; 0x04
    119a:	8b 83       	std	Y+3, r24	; 0x03
	uint8 i = 0;
    119c:	1a 82       	std	Y+2, r1	; 0x02
	uint8 receivedData = 0;
    119e:	19 82       	std	Y+1, r1	; 0x01
    11a0:	0f c0       	rjmp	.+30     	; 0x11c0 <SPI_sendString+0x34>

	while (str[i] != '\0') {
		// receivedData contains the data from the other device
		receivedData = SPI_sendReceiveByte(str[i]);
    11a2:	8a 81       	ldd	r24, Y+2	; 0x02
    11a4:	28 2f       	mov	r18, r24
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	8b 81       	ldd	r24, Y+3	; 0x03
    11aa:	9c 81       	ldd	r25, Y+4	; 0x04
    11ac:	fc 01       	movw	r30, r24
    11ae:	e2 0f       	add	r30, r18
    11b0:	f3 1f       	adc	r31, r19
    11b2:	80 81       	ld	r24, Z
    11b4:	0e 94 b0 08 	call	0x1160	; 0x1160 <SPI_sendReceiveByte>
    11b8:	89 83       	std	Y+1, r24	; 0x01
		i++;
    11ba:	8a 81       	ldd	r24, Y+2	; 0x02
    11bc:	8f 5f       	subi	r24, 0xFF	; 255
    11be:	8a 83       	std	Y+2, r24	; 0x02

void SPI_sendString(const uint8 *str) {
	uint8 i = 0;
	uint8 receivedData = 0;

	while (str[i] != '\0') {
    11c0:	8a 81       	ldd	r24, Y+2	; 0x02
    11c2:	28 2f       	mov	r18, r24
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	9c 81       	ldd	r25, Y+4	; 0x04
    11ca:	fc 01       	movw	r30, r24
    11cc:	e2 0f       	add	r30, r18
    11ce:	f3 1f       	adc	r31, r19
    11d0:	80 81       	ld	r24, Z
    11d2:	88 23       	and	r24, r24
    11d4:	31 f7       	brne	.-52     	; 0x11a2 <SPI_sendString+0x16>
		// receivedData contains the data from the other device
		receivedData = SPI_sendReceiveByte(str[i]);
		i++;
	}

}
    11d6:	0f 90       	pop	r0
    11d8:	0f 90       	pop	r0
    11da:	0f 90       	pop	r0
    11dc:	0f 90       	pop	r0
    11de:	cf 91       	pop	r28
    11e0:	df 91       	pop	r29
    11e2:	08 95       	ret

000011e4 <SPI_receiveString>:


void SPI_receiveString(uint8 *str) {
    11e4:	0f 93       	push	r16
    11e6:	1f 93       	push	r17
    11e8:	df 93       	push	r29
    11ea:	cf 93       	push	r28
    11ec:	00 d0       	rcall	.+0      	; 0x11ee <SPI_receiveString+0xa>
    11ee:	0f 92       	push	r0
    11f0:	cd b7       	in	r28, 0x3d	; 61
    11f2:	de b7       	in	r29, 0x3e	; 62
    11f4:	9b 83       	std	Y+3, r25	; 0x03
    11f6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    11f8:	19 82       	std	Y+1, r1	; 0x01
	// Receives and stores the first byte
	str[i] = SPI_sendReceiveByte(SPI_DEF_DATA_VAL);
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	8a 81       	ldd	r24, Y+2	; 0x02
    1202:	9b 81       	ldd	r25, Y+3	; 0x03
    1204:	8c 01       	movw	r16, r24
    1206:	02 0f       	add	r16, r18
    1208:	13 1f       	adc	r17, r19
    120a:	8f ef       	ldi	r24, 0xFF	; 255
    120c:	0e 94 b0 08 	call	0x1160	; 0x1160 <SPI_sendReceiveByte>
    1210:	f8 01       	movw	r30, r16
    1212:	80 83       	st	Z, r24
    1214:	10 c0       	rjmp	.+32     	; 0x1236 <SPI_receiveString+0x52>


	while (str[i] != '#') {
		i++; // why the incrementer above?
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	8f 5f       	subi	r24, 0xFF	; 255
    121a:	89 83       	std	Y+1, r24	; 0x01
		str[i] = SPI_sendReceiveByte(SPI_DEF_DATA_VAL);
    121c:	89 81       	ldd	r24, Y+1	; 0x01
    121e:	28 2f       	mov	r18, r24
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	8a 81       	ldd	r24, Y+2	; 0x02
    1224:	9b 81       	ldd	r25, Y+3	; 0x03
    1226:	8c 01       	movw	r16, r24
    1228:	02 0f       	add	r16, r18
    122a:	13 1f       	adc	r17, r19
    122c:	8f ef       	ldi	r24, 0xFF	; 255
    122e:	0e 94 b0 08 	call	0x1160	; 0x1160 <SPI_sendReceiveByte>
    1232:	f8 01       	movw	r30, r16
    1234:	80 83       	st	Z, r24
	uint8 i = 0;
	// Receives and stores the first byte
	str[i] = SPI_sendReceiveByte(SPI_DEF_DATA_VAL);


	while (str[i] != '#') {
    1236:	89 81       	ldd	r24, Y+1	; 0x01
    1238:	28 2f       	mov	r18, r24
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	8a 81       	ldd	r24, Y+2	; 0x02
    123e:	9b 81       	ldd	r25, Y+3	; 0x03
    1240:	fc 01       	movw	r30, r24
    1242:	e2 0f       	add	r30, r18
    1244:	f3 1f       	adc	r31, r19
    1246:	80 81       	ld	r24, Z
    1248:	83 32       	cpi	r24, 0x23	; 35
    124a:	29 f7       	brne	.-54     	; 0x1216 <SPI_receiveString+0x32>
		i++; // why the incrementer above?
		str[i] = SPI_sendReceiveByte(SPI_DEF_DATA_VAL);
	}

	str[i] = '\0'; // replacing the '#' with '\0'
    124c:	89 81       	ldd	r24, Y+1	; 0x01
    124e:	28 2f       	mov	r18, r24
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	8a 81       	ldd	r24, Y+2	; 0x02
    1254:	9b 81       	ldd	r25, Y+3	; 0x03
    1256:	fc 01       	movw	r30, r24
    1258:	e2 0f       	add	r30, r18
    125a:	f3 1f       	adc	r31, r19
    125c:	10 82       	st	Z, r1

}
    125e:	0f 90       	pop	r0
    1260:	0f 90       	pop	r0
    1262:	0f 90       	pop	r0
    1264:	cf 91       	pop	r28
    1266:	df 91       	pop	r29
    1268:	1f 91       	pop	r17
    126a:	0f 91       	pop	r16
    126c:	08 95       	ret

0000126e <ICU_Init>:
#include <util/delay.h>
//#include <avr/interrupt.h>


// Initializes and enables the ADC Module to start functionality
void ICU_Init(void) {
    126e:	df 93       	push	r29
    1270:	cf 93       	push	r28
    1272:	cd b7       	in	r28, 0x3d	; 61
    1274:	de b7       	in	r29, 0x3e	; 62
	 * 2 – FOC1B: Force Output Compare for Compare unit B
	 * 1:0 – WGM11:0: Waveform Generation Mode
	 */

	// Clears COM1A1:0 to '00', I want normal mode
	CLR_BIT(TCCR1A, COM1A1);
    1276:	af e4       	ldi	r26, 0x4F	; 79
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	ef e4       	ldi	r30, 0x4F	; 79
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	8f 77       	andi	r24, 0x7F	; 127
    1282:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, COM1A0);
    1284:	af e4       	ldi	r26, 0x4F	; 79
    1286:	b0 e0       	ldi	r27, 0x00	; 0
    1288:	ef e4       	ldi	r30, 0x4F	; 79
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	8f 7b       	andi	r24, 0xBF	; 191
    1290:	8c 93       	st	X, r24

	// Clears COM1B1:0 to '00', I want normal mode
	CLR_BIT(TCCR1A, COM1B1);
    1292:	af e4       	ldi	r26, 0x4F	; 79
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	ef e4       	ldi	r30, 0x4F	; 79
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	8f 7d       	andi	r24, 0xDF	; 223
    129e:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, COM1B0);
    12a0:	af e4       	ldi	r26, 0x4F	; 79
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	ef e4       	ldi	r30, 0x4F	; 79
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	8f 7e       	andi	r24, 0xEF	; 239
    12ac:	8c 93       	st	X, r24

	// Sets FOC1A to '1', I'm in normal mode
	SET_BIT(TCCR1A, FOC1A);
    12ae:	af e4       	ldi	r26, 0x4F	; 79
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	ef e4       	ldi	r30, 0x4F	; 79
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	88 60       	ori	r24, 0x08	; 8
    12ba:	8c 93       	st	X, r24

	// Sets FOC1A to '1', I'm in normal mode
	SET_BIT(TCCR1A, FOC1B);
    12bc:	af e4       	ldi	r26, 0x4F	; 79
    12be:	b0 e0       	ldi	r27, 0x00	; 0
    12c0:	ef e4       	ldi	r30, 0x4F	; 79
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	84 60       	ori	r24, 0x04	; 4
    12c8:	8c 93       	st	X, r24

	// Clears COM1B1:0 to '00', I want normal mode
	CLR_BIT(TCCR1A, WGM11);
    12ca:	af e4       	ldi	r26, 0x4F	; 79
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	ef e4       	ldi	r30, 0x4F	; 79
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	8d 7f       	andi	r24, 0xFD	; 253
    12d6:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, WGM10);
    12d8:	af e4       	ldi	r26, 0x4F	; 79
    12da:	b0 e0       	ldi	r27, 0x00	; 0
    12dc:	ef e4       	ldi	r30, 0x4F	; 79
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	8e 7f       	andi	r24, 0xFE	; 254
    12e4:	8c 93       	st	X, r24
	 * Bit 4:3 – WGM13:2: Waveform Generation Mode
	 * Bit 2:0 – CS12:0: Clock Select
	 */

	// Clears ICNC1 to '0', I DONT want the noise canceling
	CLR_BIT(TCCR1B, ICNC1);
    12e6:	ae e4       	ldi	r26, 0x4E	; 78
    12e8:	b0 e0       	ldi	r27, 0x00	; 0
    12ea:	ee e4       	ldi	r30, 0x4E	; 78
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	8f 77       	andi	r24, 0x7F	; 127
    12f2:	8c 93       	st	X, r24

	// Sets ICES1 to '1', I want the rising edge
	SET_BIT(TCCR1B, ICES1);
    12f4:	ae e4       	ldi	r26, 0x4E	; 78
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	ee e4       	ldi	r30, 0x4E	; 78
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	80 64       	ori	r24, 0x40	; 64
    1300:	8c 93       	st	X, r24

	// Sets CS12:0 to '001', nO PRESCALING
	CLR_BIT(TCCR1B, CS12);
    1302:	ae e4       	ldi	r26, 0x4E	; 78
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	ee e4       	ldi	r30, 0x4E	; 78
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	8b 7f       	andi	r24, 0xFB	; 251
    130e:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, CS11);
    1310:	ae e4       	ldi	r26, 0x4E	; 78
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	ee e4       	ldi	r30, 0x4E	; 78
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	8d 7f       	andi	r24, 0xFD	; 253
    131c:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, CS10);
    131e:	ae e4       	ldi	r26, 0x4E	; 78
    1320:	b0 e0       	ldi	r27, 0x00	; 0
    1322:	ee e4       	ldi	r30, 0x4E	; 78
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	80 81       	ld	r24, Z
    1328:	81 60       	ori	r24, 0x01	; 1
    132a:	8c 93       	st	X, r24

	// Clears TCNT1 to '0', Initialize to '0'
	TCNT1 = 0;
    132c:	ec e4       	ldi	r30, 0x4C	; 76
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	11 82       	std	Z+1, r1	; 0x01
    1332:	10 82       	st	Z, r1

	// Clears ICR1 to '0', Initialize to '0'
	ICR1 = 0;
    1334:	e6 e4       	ldi	r30, 0x46	; 70
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	11 82       	std	Z+1, r1	; 0x01
    133a:	10 82       	st	Z, r1
	 */

	// TIMSK1 |= (1 << TICIE1);
	// SREG |= (1 << 7);

}
    133c:	cf 91       	pop	r28
    133e:	df 91       	pop	r29
    1340:	08 95       	ret

00001342 <I2C_init>:
  *  Bit 0 – TWGCE: TWI General Call Recognition Enable Bit
  */


// Initializes and enables the Master mode for the TWI Module to start functionality
void I2C_init(void) {
    1342:	df 93       	push	r29
    1344:	cf 93       	push	r28
    1346:	cd b7       	in	r28, 0x3d	; 61
    1348:	de b7       	in	r29, 0x3e	; 62
	 * In the previous equation, I have two unknowns, the TWBR & TWPS
	 * Its the prescaler bits.. so what to choose?
	 * I know that the SCL is 400 KHz, & F_CPU is 8 MHz
	 * I can control TWPS & let it, TWPS = 0, so TWBR = 2
	 */
	TWSR = 0x00;
    134a:	e1 e2       	ldi	r30, 0x21	; 33
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	10 82       	st	Z, r1
	TWBR = 0x02;
    1350:	e0 e2       	ldi	r30, 0x20	; 32
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	82 e0       	ldi	r24, 0x02	; 2
    1356:	80 83       	st	Z, r24
	TWAR = I2C_SLAVE_ADDR; // Slave Address
    1358:	e2 e2       	ldi	r30, 0x22	; 34
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	82 e0       	ldi	r24, 0x02	; 2
    135e:	80 83       	st	Z, r24
	TWCR = (1 << TWEN); // Enabling the I2C Module
    1360:	e6 e5       	ldi	r30, 0x56	; 86
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	84 e0       	ldi	r24, 0x04	; 4
    1366:	80 83       	st	Z, r24

}
    1368:	cf 91       	pop	r28
    136a:	df 91       	pop	r29
    136c:	08 95       	ret

0000136e <I2C_start>:

// Responsible for the SPI to send an array of bytes, a string
void I2C_start(void) {
    136e:	df 93       	push	r29
    1370:	cf 93       	push	r28
    1372:	cd b7       	in	r28, 0x3d	; 61
    1374:	de b7       	in	r29, 0x3e	; 62
	// Again enabling the I2C Module, Set the Start Condition, Clearing the TWINT Flag
	/* But why I'm not using the normal set bit technique?
	 * Because I don't want to keep old data, & I want the information always set by me
	 */
	TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWSTA);
    1376:	e6 e5       	ldi	r30, 0x56	; 86
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	84 ea       	ldi	r24, 0xA4	; 164
    137c:	80 83       	st	Z, r24

	while(BIT_IS_CLR(TWCR, TWINT)) {
    137e:	e6 e5       	ldi	r30, 0x56	; 86
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	80 81       	ld	r24, Z
    1384:	88 23       	and	r24, r24
    1386:	dc f7       	brge	.-10     	; 0x137e <I2C_start+0x10>
		// Busy Wait for TWINT set in TWCR Register
		// to ensure that start bit is send successfully
	}
}
    1388:	cf 91       	pop	r28
    138a:	df 91       	pop	r29
    138c:	08 95       	ret

0000138e <I2C_stop>:

// Responsible for the SPI to receive an array of bytes, a string
void I2C_stop(void) {
    138e:	df 93       	push	r29
    1390:	cf 93       	push	r28
    1392:	cd b7       	in	r28, 0x3d	; 61
    1394:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWSTO);
    1396:	e6 e5       	ldi	r30, 0x56	; 86
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	84 e9       	ldi	r24, 0x94	; 148
    139c:	80 83       	st	Z, r24
}
    139e:	cf 91       	pop	r28
    13a0:	df 91       	pop	r29
    13a2:	08 95       	ret

000013a4 <I2C_writeByte>:

// Responsible for the SPI to receive an array of bytes, a string
void I2C_writeByte(uint8 data) {
    13a4:	df 93       	push	r29
    13a6:	cf 93       	push	r28
    13a8:	0f 92       	push	r0
    13aa:	cd b7       	in	r28, 0x3d	; 61
    13ac:	de b7       	in	r29, 0x3e	; 62
    13ae:	89 83       	std	Y+1, r24	; 0x01
	TWCR = (1 << TWEN) | (1 << TWINT);
    13b0:	e6 e5       	ldi	r30, 0x56	; 86
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	84 e8       	ldi	r24, 0x84	; 132
    13b6:	80 83       	st	Z, r24
	TWDR = data;
    13b8:	e3 e2       	ldi	r30, 0x23	; 35
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	89 81       	ldd	r24, Y+1	; 0x01
    13be:	80 83       	st	Z, r24

	while(BIT_IS_CLR(TWCR, TWINT)) {
    13c0:	e6 e5       	ldi	r30, 0x56	; 86
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	88 23       	and	r24, r24
    13c8:	dc f7       	brge	.-10     	; 0x13c0 <I2C_writeByte+0x1c>
		// Busy Wait for TWINT set in TWCR Register
		// to ensure that data is sent successfully
	}
}
    13ca:	0f 90       	pop	r0
    13cc:	cf 91       	pop	r28
    13ce:	df 91       	pop	r29
    13d0:	08 95       	ret

000013d2 <I2C_readByteWithACK>:

// Responsible for the SPI to receive an array of bytes, a string
uint8 I2C_readByteWithACK(void) {
    13d2:	df 93       	push	r29
    13d4:	cf 93       	push	r28
    13d6:	cd b7       	in	r28, 0x3d	; 61
    13d8:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWEA);
    13da:	e6 e5       	ldi	r30, 0x56	; 86
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	84 ec       	ldi	r24, 0xC4	; 196
    13e0:	80 83       	st	Z, r24

	while(BIT_IS_CLR(TWCR, TWINT)) {
    13e2:	e6 e5       	ldi	r30, 0x56	; 86
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	88 23       	and	r24, r24
    13ea:	dc f7       	brge	.-10     	; 0x13e2 <I2C_readByteWithACK+0x10>
		// Busy Wait for TWINT set in TWCR Register
		// to ensure that data is sent successfully
	}
	return TWDR;
    13ec:	e3 e2       	ldi	r30, 0x23	; 35
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
}
    13f2:	cf 91       	pop	r28
    13f4:	df 91       	pop	r29
    13f6:	08 95       	ret

000013f8 <I2C_readByteWithNACK>:

// Responsible for the SPI to receive an array of bytes, a string
uint8 I2C_readByteWithNACK(void) {
    13f8:	df 93       	push	r29
    13fa:	cf 93       	push	r28
    13fc:	cd b7       	in	r28, 0x3d	; 61
    13fe:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWEN) | (1 << TWINT);
    1400:	e6 e5       	ldi	r30, 0x56	; 86
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	84 e8       	ldi	r24, 0x84	; 132
    1406:	80 83       	st	Z, r24

	while(BIT_IS_CLR(TWCR, TWINT)) {
    1408:	e6 e5       	ldi	r30, 0x56	; 86
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	88 23       	and	r24, r24
    1410:	dc f7       	brge	.-10     	; 0x1408 <I2C_readByteWithNACK+0x10>
		// Busy Wait for TWINT set in TWCR Register
		// to ensure that data is sent successfully
	}
	return TWDR;
    1412:	e3 e2       	ldi	r30, 0x23	; 35
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
}
    1418:	cf 91       	pop	r28
    141a:	df 91       	pop	r29
    141c:	08 95       	ret

0000141e <I2C_getStatus>:

// Responsible for the SPI to receive an array of bytes, a string
uint8 I2C_getStatus(void) {
    141e:	df 93       	push	r29
    1420:	cf 93       	push	r28
    1422:	0f 92       	push	r0
    1424:	cd b7       	in	r28, 0x3d	; 61
    1426:	de b7       	in	r29, 0x3e	; 62
	uint8 I2CStatus;
	I2CStatus = TWSR & I2C_INITIALSTATUS;
    1428:	e1 e2       	ldi	r30, 0x21	; 33
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	88 7f       	andi	r24, 0xF8	; 248
    1430:	89 83       	std	Y+1, r24	; 0x01
	return I2CStatus;
    1432:	89 81       	ldd	r24, Y+1	; 0x01
}
    1434:	0f 90       	pop	r0
    1436:	cf 91       	pop	r28
    1438:	df 91       	pop	r29
    143a:	08 95       	ret

0000143c <GPIO_setupPinDirection>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
GPIO_Error_t GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction) {
    143c:	df 93       	push	r29
    143e:	cf 93       	push	r28
    1440:	00 d0       	rcall	.+0      	; 0x1442 <GPIO_setupPinDirection+0x6>
    1442:	00 d0       	rcall	.+0      	; 0x1444 <GPIO_setupPinDirection+0x8>
    1444:	00 d0       	rcall	.+0      	; 0x1446 <GPIO_setupPinDirection+0xa>
    1446:	cd b7       	in	r28, 0x3d	; 61
    1448:	de b7       	in	r29, 0x3e	; 62
    144a:	8a 83       	std	Y+2, r24	; 0x02
    144c:	6b 83       	std	Y+3, r22	; 0x03
    144e:	4c 83       	std	Y+4, r20	; 0x04
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t GPIO_Driver_Checker = NULL;
    1450:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    1452:	8b 81       	ldd	r24, Y+3	; 0x03
    1454:	88 30       	cpi	r24, 0x08	; 8
    1456:	18 f0       	brcs	.+6      	; 0x145e <GPIO_setupPinDirection+0x22>
		// Checks if the entered pin number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	89 83       	std	Y+1, r24	; 0x01
    145c:	e1 c0       	rjmp	.+450    	; 0x1620 <GPIO_setupPinDirection+0x1e4>
	}
	else if((port_num >= NUM_OF_PORTS)) {
    145e:	8a 81       	ldd	r24, Y+2	; 0x02
    1460:	84 30       	cpi	r24, 0x04	; 4
    1462:	18 f0       	brcs	.+6      	; 0x146a <GPIO_setupPinDirection+0x2e>
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    1464:	82 e0       	ldi	r24, 0x02	; 2
    1466:	89 83       	std	Y+1, r24	; 0x01
    1468:	db c0       	rjmp	.+438    	; 0x1620 <GPIO_setupPinDirection+0x1e4>
	}
	else if((direction != PIN_INPUT) && (direction != PIN_OUTPUT)) {
    146a:	8c 81       	ldd	r24, Y+4	; 0x04
    146c:	88 23       	and	r24, r24
    146e:	31 f0       	breq	.+12     	; 0x147c <GPIO_setupPinDirection+0x40>
    1470:	8c 81       	ldd	r24, Y+4	; 0x04
    1472:	81 30       	cpi	r24, 0x01	; 1
    1474:	19 f0       	breq	.+6      	; 0x147c <GPIO_setupPinDirection+0x40>
		// Checks if the entered direction is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
    1476:	83 e0       	ldi	r24, 0x03	; 3
    1478:	89 83       	std	Y+1, r24	; 0x01
    147a:	d2 c0       	rjmp	.+420    	; 0x1620 <GPIO_setupPinDirection+0x1e4>
	}
	else {
		// Setup the pin direction as required
		switch(port_num) {
    147c:	8a 81       	ldd	r24, Y+2	; 0x02
    147e:	28 2f       	mov	r18, r24
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	3e 83       	std	Y+6, r19	; 0x06
    1484:	2d 83       	std	Y+5, r18	; 0x05
    1486:	8d 81       	ldd	r24, Y+5	; 0x05
    1488:	9e 81       	ldd	r25, Y+6	; 0x06
    148a:	81 30       	cpi	r24, 0x01	; 1
    148c:	91 05       	cpc	r25, r1
    148e:	09 f4       	brne	.+2      	; 0x1492 <GPIO_setupPinDirection+0x56>
    1490:	43 c0       	rjmp	.+134    	; 0x1518 <GPIO_setupPinDirection+0xdc>
    1492:	2d 81       	ldd	r18, Y+5	; 0x05
    1494:	3e 81       	ldd	r19, Y+6	; 0x06
    1496:	22 30       	cpi	r18, 0x02	; 2
    1498:	31 05       	cpc	r19, r1
    149a:	2c f4       	brge	.+10     	; 0x14a6 <GPIO_setupPinDirection+0x6a>
    149c:	8d 81       	ldd	r24, Y+5	; 0x05
    149e:	9e 81       	ldd	r25, Y+6	; 0x06
    14a0:	00 97       	sbiw	r24, 0x00	; 0
    14a2:	71 f0       	breq	.+28     	; 0x14c0 <GPIO_setupPinDirection+0x84>
    14a4:	bc c0       	rjmp	.+376    	; 0x161e <GPIO_setupPinDirection+0x1e2>
    14a6:	2d 81       	ldd	r18, Y+5	; 0x05
    14a8:	3e 81       	ldd	r19, Y+6	; 0x06
    14aa:	22 30       	cpi	r18, 0x02	; 2
    14ac:	31 05       	cpc	r19, r1
    14ae:	09 f4       	brne	.+2      	; 0x14b2 <GPIO_setupPinDirection+0x76>
    14b0:	5f c0       	rjmp	.+190    	; 0x1570 <GPIO_setupPinDirection+0x134>
    14b2:	8d 81       	ldd	r24, Y+5	; 0x05
    14b4:	9e 81       	ldd	r25, Y+6	; 0x06
    14b6:	83 30       	cpi	r24, 0x03	; 3
    14b8:	91 05       	cpc	r25, r1
    14ba:	09 f4       	brne	.+2      	; 0x14be <GPIO_setupPinDirection+0x82>
    14bc:	85 c0       	rjmp	.+266    	; 0x15c8 <GPIO_setupPinDirection+0x18c>
    14be:	af c0       	rjmp	.+350    	; 0x161e <GPIO_setupPinDirection+0x1e2>
		case PORT_A:
			if(direction == PIN_OUTPUT) {
    14c0:	8c 81       	ldd	r24, Y+4	; 0x04
    14c2:	81 30       	cpi	r24, 0x01	; 1
    14c4:	a1 f4       	brne	.+40     	; 0x14ee <GPIO_setupPinDirection+0xb2>
				SET_BIT(DDRA, pin_num);
    14c6:	aa e3       	ldi	r26, 0x3A	; 58
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	ea e3       	ldi	r30, 0x3A	; 58
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	48 2f       	mov	r20, r24
    14d2:	8b 81       	ldd	r24, Y+3	; 0x03
    14d4:	28 2f       	mov	r18, r24
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	02 2e       	mov	r0, r18
    14de:	02 c0       	rjmp	.+4      	; 0x14e4 <GPIO_setupPinDirection+0xa8>
    14e0:	88 0f       	add	r24, r24
    14e2:	99 1f       	adc	r25, r25
    14e4:	0a 94       	dec	r0
    14e6:	e2 f7       	brpl	.-8      	; 0x14e0 <GPIO_setupPinDirection+0xa4>
    14e8:	84 2b       	or	r24, r20
    14ea:	8c 93       	st	X, r24
    14ec:	98 c0       	rjmp	.+304    	; 0x161e <GPIO_setupPinDirection+0x1e2>
			}
			else {
				CLR_BIT(DDRA, pin_num);
    14ee:	aa e3       	ldi	r26, 0x3A	; 58
    14f0:	b0 e0       	ldi	r27, 0x00	; 0
    14f2:	ea e3       	ldi	r30, 0x3A	; 58
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	80 81       	ld	r24, Z
    14f8:	48 2f       	mov	r20, r24
    14fa:	8b 81       	ldd	r24, Y+3	; 0x03
    14fc:	28 2f       	mov	r18, r24
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	02 2e       	mov	r0, r18
    1506:	02 c0       	rjmp	.+4      	; 0x150c <GPIO_setupPinDirection+0xd0>
    1508:	88 0f       	add	r24, r24
    150a:	99 1f       	adc	r25, r25
    150c:	0a 94       	dec	r0
    150e:	e2 f7       	brpl	.-8      	; 0x1508 <GPIO_setupPinDirection+0xcc>
    1510:	80 95       	com	r24
    1512:	84 23       	and	r24, r20
    1514:	8c 93       	st	X, r24
    1516:	83 c0       	rjmp	.+262    	; 0x161e <GPIO_setupPinDirection+0x1e2>
			}
			break;
		case PORT_B:
			if(direction == PIN_OUTPUT) {
    1518:	8c 81       	ldd	r24, Y+4	; 0x04
    151a:	81 30       	cpi	r24, 0x01	; 1
    151c:	a1 f4       	brne	.+40     	; 0x1546 <GPIO_setupPinDirection+0x10a>
				SET_BIT(DDRB,pin_num);
    151e:	a7 e3       	ldi	r26, 0x37	; 55
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	e7 e3       	ldi	r30, 0x37	; 55
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	48 2f       	mov	r20, r24
    152a:	8b 81       	ldd	r24, Y+3	; 0x03
    152c:	28 2f       	mov	r18, r24
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	02 2e       	mov	r0, r18
    1536:	02 c0       	rjmp	.+4      	; 0x153c <GPIO_setupPinDirection+0x100>
    1538:	88 0f       	add	r24, r24
    153a:	99 1f       	adc	r25, r25
    153c:	0a 94       	dec	r0
    153e:	e2 f7       	brpl	.-8      	; 0x1538 <GPIO_setupPinDirection+0xfc>
    1540:	84 2b       	or	r24, r20
    1542:	8c 93       	st	X, r24
    1544:	6c c0       	rjmp	.+216    	; 0x161e <GPIO_setupPinDirection+0x1e2>
			}
			else {
				CLR_BIT(DDRB,pin_num);
    1546:	a7 e3       	ldi	r26, 0x37	; 55
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	e7 e3       	ldi	r30, 0x37	; 55
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	48 2f       	mov	r20, r24
    1552:	8b 81       	ldd	r24, Y+3	; 0x03
    1554:	28 2f       	mov	r18, r24
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	02 2e       	mov	r0, r18
    155e:	02 c0       	rjmp	.+4      	; 0x1564 <GPIO_setupPinDirection+0x128>
    1560:	88 0f       	add	r24, r24
    1562:	99 1f       	adc	r25, r25
    1564:	0a 94       	dec	r0
    1566:	e2 f7       	brpl	.-8      	; 0x1560 <GPIO_setupPinDirection+0x124>
    1568:	80 95       	com	r24
    156a:	84 23       	and	r24, r20
    156c:	8c 93       	st	X, r24
    156e:	57 c0       	rjmp	.+174    	; 0x161e <GPIO_setupPinDirection+0x1e2>
			}
			break;
		case PORT_C:
			if(direction == PIN_OUTPUT) {
    1570:	8c 81       	ldd	r24, Y+4	; 0x04
    1572:	81 30       	cpi	r24, 0x01	; 1
    1574:	a1 f4       	brne	.+40     	; 0x159e <GPIO_setupPinDirection+0x162>
				SET_BIT(DDRC,pin_num);
    1576:	a4 e3       	ldi	r26, 0x34	; 52
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	e4 e3       	ldi	r30, 0x34	; 52
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	48 2f       	mov	r20, r24
    1582:	8b 81       	ldd	r24, Y+3	; 0x03
    1584:	28 2f       	mov	r18, r24
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	02 2e       	mov	r0, r18
    158e:	02 c0       	rjmp	.+4      	; 0x1594 <GPIO_setupPinDirection+0x158>
    1590:	88 0f       	add	r24, r24
    1592:	99 1f       	adc	r25, r25
    1594:	0a 94       	dec	r0
    1596:	e2 f7       	brpl	.-8      	; 0x1590 <GPIO_setupPinDirection+0x154>
    1598:	84 2b       	or	r24, r20
    159a:	8c 93       	st	X, r24
    159c:	40 c0       	rjmp	.+128    	; 0x161e <GPIO_setupPinDirection+0x1e2>
			}
			else {
				CLR_BIT(DDRC,pin_num);
    159e:	a4 e3       	ldi	r26, 0x34	; 52
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	e4 e3       	ldi	r30, 0x34	; 52
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	48 2f       	mov	r20, r24
    15aa:	8b 81       	ldd	r24, Y+3	; 0x03
    15ac:	28 2f       	mov	r18, r24
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	02 2e       	mov	r0, r18
    15b6:	02 c0       	rjmp	.+4      	; 0x15bc <GPIO_setupPinDirection+0x180>
    15b8:	88 0f       	add	r24, r24
    15ba:	99 1f       	adc	r25, r25
    15bc:	0a 94       	dec	r0
    15be:	e2 f7       	brpl	.-8      	; 0x15b8 <GPIO_setupPinDirection+0x17c>
    15c0:	80 95       	com	r24
    15c2:	84 23       	and	r24, r20
    15c4:	8c 93       	st	X, r24
    15c6:	2b c0       	rjmp	.+86     	; 0x161e <GPIO_setupPinDirection+0x1e2>
			}
			break;
		case PORT_D:
			if(direction == PIN_OUTPUT) {
    15c8:	8c 81       	ldd	r24, Y+4	; 0x04
    15ca:	81 30       	cpi	r24, 0x01	; 1
    15cc:	a1 f4       	brne	.+40     	; 0x15f6 <GPIO_setupPinDirection+0x1ba>
				SET_BIT(DDRD,pin_num);
    15ce:	a1 e3       	ldi	r26, 0x31	; 49
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	e1 e3       	ldi	r30, 0x31	; 49
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	48 2f       	mov	r20, r24
    15da:	8b 81       	ldd	r24, Y+3	; 0x03
    15dc:	28 2f       	mov	r18, r24
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	02 2e       	mov	r0, r18
    15e6:	02 c0       	rjmp	.+4      	; 0x15ec <GPIO_setupPinDirection+0x1b0>
    15e8:	88 0f       	add	r24, r24
    15ea:	99 1f       	adc	r25, r25
    15ec:	0a 94       	dec	r0
    15ee:	e2 f7       	brpl	.-8      	; 0x15e8 <GPIO_setupPinDirection+0x1ac>
    15f0:	84 2b       	or	r24, r20
    15f2:	8c 93       	st	X, r24
    15f4:	14 c0       	rjmp	.+40     	; 0x161e <GPIO_setupPinDirection+0x1e2>
			}
			else {
				CLR_BIT(DDRD,pin_num);
    15f6:	a1 e3       	ldi	r26, 0x31	; 49
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	e1 e3       	ldi	r30, 0x31	; 49
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	48 2f       	mov	r20, r24
    1602:	8b 81       	ldd	r24, Y+3	; 0x03
    1604:	28 2f       	mov	r18, r24
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	02 2e       	mov	r0, r18
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <GPIO_setupPinDirection+0x1d8>
    1610:	88 0f       	add	r24, r24
    1612:	99 1f       	adc	r25, r25
    1614:	0a 94       	dec	r0
    1616:	e2 f7       	brpl	.-8      	; 0x1610 <GPIO_setupPinDirection+0x1d4>
    1618:	80 95       	com	r24
    161a:	84 23       	and	r24, r20
    161c:	8c 93       	st	X, r24
			}
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    161e:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    1620:	89 81       	ldd	r24, Y+1	; 0x01
}
    1622:	26 96       	adiw	r28, 0x06	; 6
    1624:	0f b6       	in	r0, 0x3f	; 63
    1626:	f8 94       	cli
    1628:	de bf       	out	0x3e, r29	; 62
    162a:	0f be       	out	0x3f, r0	; 63
    162c:	cd bf       	out	0x3d, r28	; 61
    162e:	cf 91       	pop	r28
    1630:	df 91       	pop	r29
    1632:	08 95       	ret

00001634 <GPIO_writePin>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
GPIO_Error_t GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value) {
    1634:	df 93       	push	r29
    1636:	cf 93       	push	r28
    1638:	00 d0       	rcall	.+0      	; 0x163a <GPIO_writePin+0x6>
    163a:	00 d0       	rcall	.+0      	; 0x163c <GPIO_writePin+0x8>
    163c:	00 d0       	rcall	.+0      	; 0x163e <GPIO_writePin+0xa>
    163e:	cd b7       	in	r28, 0x3d	; 61
    1640:	de b7       	in	r29, 0x3e	; 62
    1642:	8a 83       	std	Y+2, r24	; 0x02
    1644:	6b 83       	std	Y+3, r22	; 0x03
    1646:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t GPIO_Driver_Checker = NULL;
    1648:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    164a:	8b 81       	ldd	r24, Y+3	; 0x03
    164c:	88 30       	cpi	r24, 0x08	; 8
    164e:	18 f0       	brcs	.+6      	; 0x1656 <GPIO_writePin+0x22>
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	89 83       	std	Y+1, r24	; 0x01
    1654:	e1 c0       	rjmp	.+450    	; 0x1818 <GPIO_writePin+0x1e4>
	}
	else if((port_num >= NUM_OF_PORTS)) {
    1656:	8a 81       	ldd	r24, Y+2	; 0x02
    1658:	84 30       	cpi	r24, 0x04	; 4
    165a:	18 f0       	brcs	.+6      	; 0x1662 <GPIO_writePin+0x2e>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    165c:	82 e0       	ldi	r24, 0x02	; 2
    165e:	89 83       	std	Y+1, r24	; 0x01
    1660:	db c0       	rjmp	.+438    	; 0x1818 <GPIO_writePin+0x1e4>
	}
	else if((value != LOGIC_HIGH) && (value != LOGIC_LOW)) {
    1662:	8c 81       	ldd	r24, Y+4	; 0x04
    1664:	81 30       	cpi	r24, 0x01	; 1
    1666:	31 f0       	breq	.+12     	; 0x1674 <GPIO_writePin+0x40>
    1668:	8c 81       	ldd	r24, Y+4	; 0x04
    166a:	88 23       	and	r24, r24
    166c:	19 f0       	breq	.+6      	; 0x1674 <GPIO_writePin+0x40>
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
    166e:	83 e0       	ldi	r24, 0x03	; 3
    1670:	89 83       	std	Y+1, r24	; 0x01
    1672:	d2 c0       	rjmp	.+420    	; 0x1818 <GPIO_writePin+0x1e4>
	}
	else {
		switch(port_num) {
    1674:	8a 81       	ldd	r24, Y+2	; 0x02
    1676:	28 2f       	mov	r18, r24
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	3e 83       	std	Y+6, r19	; 0x06
    167c:	2d 83       	std	Y+5, r18	; 0x05
    167e:	8d 81       	ldd	r24, Y+5	; 0x05
    1680:	9e 81       	ldd	r25, Y+6	; 0x06
    1682:	81 30       	cpi	r24, 0x01	; 1
    1684:	91 05       	cpc	r25, r1
    1686:	09 f4       	brne	.+2      	; 0x168a <GPIO_writePin+0x56>
    1688:	43 c0       	rjmp	.+134    	; 0x1710 <GPIO_writePin+0xdc>
    168a:	2d 81       	ldd	r18, Y+5	; 0x05
    168c:	3e 81       	ldd	r19, Y+6	; 0x06
    168e:	22 30       	cpi	r18, 0x02	; 2
    1690:	31 05       	cpc	r19, r1
    1692:	2c f4       	brge	.+10     	; 0x169e <GPIO_writePin+0x6a>
    1694:	8d 81       	ldd	r24, Y+5	; 0x05
    1696:	9e 81       	ldd	r25, Y+6	; 0x06
    1698:	00 97       	sbiw	r24, 0x00	; 0
    169a:	71 f0       	breq	.+28     	; 0x16b8 <GPIO_writePin+0x84>
    169c:	bc c0       	rjmp	.+376    	; 0x1816 <GPIO_writePin+0x1e2>
    169e:	2d 81       	ldd	r18, Y+5	; 0x05
    16a0:	3e 81       	ldd	r19, Y+6	; 0x06
    16a2:	22 30       	cpi	r18, 0x02	; 2
    16a4:	31 05       	cpc	r19, r1
    16a6:	09 f4       	brne	.+2      	; 0x16aa <GPIO_writePin+0x76>
    16a8:	5f c0       	rjmp	.+190    	; 0x1768 <GPIO_writePin+0x134>
    16aa:	8d 81       	ldd	r24, Y+5	; 0x05
    16ac:	9e 81       	ldd	r25, Y+6	; 0x06
    16ae:	83 30       	cpi	r24, 0x03	; 3
    16b0:	91 05       	cpc	r25, r1
    16b2:	09 f4       	brne	.+2      	; 0x16b6 <GPIO_writePin+0x82>
    16b4:	85 c0       	rjmp	.+266    	; 0x17c0 <GPIO_writePin+0x18c>
    16b6:	af c0       	rjmp	.+350    	; 0x1816 <GPIO_writePin+0x1e2>
		case PORT_A:
			if(value == LOGIC_HIGH) {
    16b8:	8c 81       	ldd	r24, Y+4	; 0x04
    16ba:	81 30       	cpi	r24, 0x01	; 1
    16bc:	a1 f4       	brne	.+40     	; 0x16e6 <GPIO_writePin+0xb2>
				SET_BIT(PORTA,pin_num);
    16be:	ab e3       	ldi	r26, 0x3B	; 59
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	eb e3       	ldi	r30, 0x3B	; 59
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	48 2f       	mov	r20, r24
    16ca:	8b 81       	ldd	r24, Y+3	; 0x03
    16cc:	28 2f       	mov	r18, r24
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	02 2e       	mov	r0, r18
    16d6:	02 c0       	rjmp	.+4      	; 0x16dc <GPIO_writePin+0xa8>
    16d8:	88 0f       	add	r24, r24
    16da:	99 1f       	adc	r25, r25
    16dc:	0a 94       	dec	r0
    16de:	e2 f7       	brpl	.-8      	; 0x16d8 <GPIO_writePin+0xa4>
    16e0:	84 2b       	or	r24, r20
    16e2:	8c 93       	st	X, r24
    16e4:	98 c0       	rjmp	.+304    	; 0x1816 <GPIO_writePin+0x1e2>
			}
			else {
				CLR_BIT(PORTA,pin_num);
    16e6:	ab e3       	ldi	r26, 0x3B	; 59
    16e8:	b0 e0       	ldi	r27, 0x00	; 0
    16ea:	eb e3       	ldi	r30, 0x3B	; 59
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	80 81       	ld	r24, Z
    16f0:	48 2f       	mov	r20, r24
    16f2:	8b 81       	ldd	r24, Y+3	; 0x03
    16f4:	28 2f       	mov	r18, r24
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	02 2e       	mov	r0, r18
    16fe:	02 c0       	rjmp	.+4      	; 0x1704 <GPIO_writePin+0xd0>
    1700:	88 0f       	add	r24, r24
    1702:	99 1f       	adc	r25, r25
    1704:	0a 94       	dec	r0
    1706:	e2 f7       	brpl	.-8      	; 0x1700 <GPIO_writePin+0xcc>
    1708:	80 95       	com	r24
    170a:	84 23       	and	r24, r20
    170c:	8c 93       	st	X, r24
    170e:	83 c0       	rjmp	.+262    	; 0x1816 <GPIO_writePin+0x1e2>
			}
			break;
		case PORT_B:
			if(value == LOGIC_HIGH) {
    1710:	8c 81       	ldd	r24, Y+4	; 0x04
    1712:	81 30       	cpi	r24, 0x01	; 1
    1714:	a1 f4       	brne	.+40     	; 0x173e <GPIO_writePin+0x10a>
				SET_BIT(PORTB,pin_num);
    1716:	a8 e3       	ldi	r26, 0x38	; 56
    1718:	b0 e0       	ldi	r27, 0x00	; 0
    171a:	e8 e3       	ldi	r30, 0x38	; 56
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 81       	ld	r24, Z
    1720:	48 2f       	mov	r20, r24
    1722:	8b 81       	ldd	r24, Y+3	; 0x03
    1724:	28 2f       	mov	r18, r24
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	02 2e       	mov	r0, r18
    172e:	02 c0       	rjmp	.+4      	; 0x1734 <GPIO_writePin+0x100>
    1730:	88 0f       	add	r24, r24
    1732:	99 1f       	adc	r25, r25
    1734:	0a 94       	dec	r0
    1736:	e2 f7       	brpl	.-8      	; 0x1730 <GPIO_writePin+0xfc>
    1738:	84 2b       	or	r24, r20
    173a:	8c 93       	st	X, r24
    173c:	6c c0       	rjmp	.+216    	; 0x1816 <GPIO_writePin+0x1e2>
			}
			else {
				CLR_BIT(PORTB,pin_num);
    173e:	a8 e3       	ldi	r26, 0x38	; 56
    1740:	b0 e0       	ldi	r27, 0x00	; 0
    1742:	e8 e3       	ldi	r30, 0x38	; 56
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	80 81       	ld	r24, Z
    1748:	48 2f       	mov	r20, r24
    174a:	8b 81       	ldd	r24, Y+3	; 0x03
    174c:	28 2f       	mov	r18, r24
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	02 2e       	mov	r0, r18
    1756:	02 c0       	rjmp	.+4      	; 0x175c <GPIO_writePin+0x128>
    1758:	88 0f       	add	r24, r24
    175a:	99 1f       	adc	r25, r25
    175c:	0a 94       	dec	r0
    175e:	e2 f7       	brpl	.-8      	; 0x1758 <GPIO_writePin+0x124>
    1760:	80 95       	com	r24
    1762:	84 23       	and	r24, r20
    1764:	8c 93       	st	X, r24
    1766:	57 c0       	rjmp	.+174    	; 0x1816 <GPIO_writePin+0x1e2>
			}
			break;
		case PORT_C:
			if(value == LOGIC_HIGH) {
    1768:	8c 81       	ldd	r24, Y+4	; 0x04
    176a:	81 30       	cpi	r24, 0x01	; 1
    176c:	a1 f4       	brne	.+40     	; 0x1796 <GPIO_writePin+0x162>
				SET_BIT(PORTC,pin_num);
    176e:	a5 e3       	ldi	r26, 0x35	; 53
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	e5 e3       	ldi	r30, 0x35	; 53
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 81       	ld	r24, Z
    1778:	48 2f       	mov	r20, r24
    177a:	8b 81       	ldd	r24, Y+3	; 0x03
    177c:	28 2f       	mov	r18, r24
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	02 2e       	mov	r0, r18
    1786:	02 c0       	rjmp	.+4      	; 0x178c <GPIO_writePin+0x158>
    1788:	88 0f       	add	r24, r24
    178a:	99 1f       	adc	r25, r25
    178c:	0a 94       	dec	r0
    178e:	e2 f7       	brpl	.-8      	; 0x1788 <GPIO_writePin+0x154>
    1790:	84 2b       	or	r24, r20
    1792:	8c 93       	st	X, r24
    1794:	40 c0       	rjmp	.+128    	; 0x1816 <GPIO_writePin+0x1e2>
			}
			else {
				CLR_BIT(PORTC,pin_num);
    1796:	a5 e3       	ldi	r26, 0x35	; 53
    1798:	b0 e0       	ldi	r27, 0x00	; 0
    179a:	e5 e3       	ldi	r30, 0x35	; 53
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	80 81       	ld	r24, Z
    17a0:	48 2f       	mov	r20, r24
    17a2:	8b 81       	ldd	r24, Y+3	; 0x03
    17a4:	28 2f       	mov	r18, r24
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	02 2e       	mov	r0, r18
    17ae:	02 c0       	rjmp	.+4      	; 0x17b4 <GPIO_writePin+0x180>
    17b0:	88 0f       	add	r24, r24
    17b2:	99 1f       	adc	r25, r25
    17b4:	0a 94       	dec	r0
    17b6:	e2 f7       	brpl	.-8      	; 0x17b0 <GPIO_writePin+0x17c>
    17b8:	80 95       	com	r24
    17ba:	84 23       	and	r24, r20
    17bc:	8c 93       	st	X, r24
    17be:	2b c0       	rjmp	.+86     	; 0x1816 <GPIO_writePin+0x1e2>
			}
			break;
		case PORT_D:
			if(value == LOGIC_HIGH) {
    17c0:	8c 81       	ldd	r24, Y+4	; 0x04
    17c2:	81 30       	cpi	r24, 0x01	; 1
    17c4:	a1 f4       	brne	.+40     	; 0x17ee <GPIO_writePin+0x1ba>
				SET_BIT(PORTD,pin_num);
    17c6:	a2 e3       	ldi	r26, 0x32	; 50
    17c8:	b0 e0       	ldi	r27, 0x00	; 0
    17ca:	e2 e3       	ldi	r30, 0x32	; 50
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	80 81       	ld	r24, Z
    17d0:	48 2f       	mov	r20, r24
    17d2:	8b 81       	ldd	r24, Y+3	; 0x03
    17d4:	28 2f       	mov	r18, r24
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	02 2e       	mov	r0, r18
    17de:	02 c0       	rjmp	.+4      	; 0x17e4 <GPIO_writePin+0x1b0>
    17e0:	88 0f       	add	r24, r24
    17e2:	99 1f       	adc	r25, r25
    17e4:	0a 94       	dec	r0
    17e6:	e2 f7       	brpl	.-8      	; 0x17e0 <GPIO_writePin+0x1ac>
    17e8:	84 2b       	or	r24, r20
    17ea:	8c 93       	st	X, r24
    17ec:	14 c0       	rjmp	.+40     	; 0x1816 <GPIO_writePin+0x1e2>
			}
			else {
				CLR_BIT(PORTD,pin_num);
    17ee:	a2 e3       	ldi	r26, 0x32	; 50
    17f0:	b0 e0       	ldi	r27, 0x00	; 0
    17f2:	e2 e3       	ldi	r30, 0x32	; 50
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	48 2f       	mov	r20, r24
    17fa:	8b 81       	ldd	r24, Y+3	; 0x03
    17fc:	28 2f       	mov	r18, r24
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	02 2e       	mov	r0, r18
    1806:	02 c0       	rjmp	.+4      	; 0x180c <GPIO_writePin+0x1d8>
    1808:	88 0f       	add	r24, r24
    180a:	99 1f       	adc	r25, r25
    180c:	0a 94       	dec	r0
    180e:	e2 f7       	brpl	.-8      	; 0x1808 <GPIO_writePin+0x1d4>
    1810:	80 95       	com	r24
    1812:	84 23       	and	r24, r20
    1814:	8c 93       	st	X, r24
			}
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    1816:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    1818:	89 81       	ldd	r24, Y+1	; 0x01
}
    181a:	26 96       	adiw	r28, 0x06	; 6
    181c:	0f b6       	in	r0, 0x3f	; 63
    181e:	f8 94       	cli
    1820:	de bf       	out	0x3e, r29	; 62
    1822:	0f be       	out	0x3f, r0	; 63
    1824:	cd bf       	out	0x3d, r28	; 61
    1826:	cf 91       	pop	r28
    1828:	df 91       	pop	r29
    182a:	08 95       	ret

0000182c <GPIO_togglePin>:
/*
 * Description :
 * Toggles a certain pin when requested.
 * If the input port number or pin number are not correct, The function will return an error.
 */
GPIO_Error_t GPIO_togglePin(uint8 port_num, uint8 pin_num) {
    182c:	df 93       	push	r29
    182e:	cf 93       	push	r28
    1830:	00 d0       	rcall	.+0      	; 0x1832 <GPIO_togglePin+0x6>
    1832:	00 d0       	rcall	.+0      	; 0x1834 <GPIO_togglePin+0x8>
    1834:	0f 92       	push	r0
    1836:	cd b7       	in	r28, 0x3d	; 61
    1838:	de b7       	in	r29, 0x3e	; 62
    183a:	8a 83       	std	Y+2, r24	; 0x02
    183c:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t GPIO_Driver_Checker = NULL;
    183e:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    1840:	8b 81       	ldd	r24, Y+3	; 0x03
    1842:	88 30       	cpi	r24, 0x08	; 8
    1844:	18 f0       	brcs	.+6      	; 0x184c <GPIO_togglePin+0x20>
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	89 83       	std	Y+1, r24	; 0x01
    184a:	75 c0       	rjmp	.+234    	; 0x1936 <GPIO_togglePin+0x10a>
	}
	else if((port_num >= NUM_OF_PORTS)) {
    184c:	8a 81       	ldd	r24, Y+2	; 0x02
    184e:	84 30       	cpi	r24, 0x04	; 4
    1850:	18 f0       	brcs	.+6      	; 0x1858 <GPIO_togglePin+0x2c>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    1852:	82 e0       	ldi	r24, 0x02	; 2
    1854:	89 83       	std	Y+1, r24	; 0x01
    1856:	6f c0       	rjmp	.+222    	; 0x1936 <GPIO_togglePin+0x10a>
	}
	else {
		switch(port_num) {
    1858:	8a 81       	ldd	r24, Y+2	; 0x02
    185a:	28 2f       	mov	r18, r24
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	3d 83       	std	Y+5, r19	; 0x05
    1860:	2c 83       	std	Y+4, r18	; 0x04
    1862:	8c 81       	ldd	r24, Y+4	; 0x04
    1864:	9d 81       	ldd	r25, Y+5	; 0x05
    1866:	81 30       	cpi	r24, 0x01	; 1
    1868:	91 05       	cpc	r25, r1
    186a:	49 f1       	breq	.+82     	; 0x18be <GPIO_togglePin+0x92>
    186c:	2c 81       	ldd	r18, Y+4	; 0x04
    186e:	3d 81       	ldd	r19, Y+5	; 0x05
    1870:	22 30       	cpi	r18, 0x02	; 2
    1872:	31 05       	cpc	r19, r1
    1874:	2c f4       	brge	.+10     	; 0x1880 <GPIO_togglePin+0x54>
    1876:	8c 81       	ldd	r24, Y+4	; 0x04
    1878:	9d 81       	ldd	r25, Y+5	; 0x05
    187a:	00 97       	sbiw	r24, 0x00	; 0
    187c:	61 f0       	breq	.+24     	; 0x1896 <GPIO_togglePin+0x6a>
    187e:	5a c0       	rjmp	.+180    	; 0x1934 <GPIO_togglePin+0x108>
    1880:	2c 81       	ldd	r18, Y+4	; 0x04
    1882:	3d 81       	ldd	r19, Y+5	; 0x05
    1884:	22 30       	cpi	r18, 0x02	; 2
    1886:	31 05       	cpc	r19, r1
    1888:	71 f1       	breq	.+92     	; 0x18e6 <GPIO_togglePin+0xba>
    188a:	8c 81       	ldd	r24, Y+4	; 0x04
    188c:	9d 81       	ldd	r25, Y+5	; 0x05
    188e:	83 30       	cpi	r24, 0x03	; 3
    1890:	91 05       	cpc	r25, r1
    1892:	e9 f1       	breq	.+122    	; 0x190e <GPIO_togglePin+0xe2>
    1894:	4f c0       	rjmp	.+158    	; 0x1934 <GPIO_togglePin+0x108>
		case PORT_A:
			TOG_BIT(PORTA,pin_num);
    1896:	ab e3       	ldi	r26, 0x3B	; 59
    1898:	b0 e0       	ldi	r27, 0x00	; 0
    189a:	eb e3       	ldi	r30, 0x3B	; 59
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	80 81       	ld	r24, Z
    18a0:	48 2f       	mov	r20, r24
    18a2:	8b 81       	ldd	r24, Y+3	; 0x03
    18a4:	28 2f       	mov	r18, r24
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	02 2e       	mov	r0, r18
    18ae:	02 c0       	rjmp	.+4      	; 0x18b4 <GPIO_togglePin+0x88>
    18b0:	88 0f       	add	r24, r24
    18b2:	99 1f       	adc	r25, r25
    18b4:	0a 94       	dec	r0
    18b6:	e2 f7       	brpl	.-8      	; 0x18b0 <GPIO_togglePin+0x84>
    18b8:	84 27       	eor	r24, r20
    18ba:	8c 93       	st	X, r24
    18bc:	3b c0       	rjmp	.+118    	; 0x1934 <GPIO_togglePin+0x108>
			break;
		case PORT_B:
			TOG_BIT(PORTB,pin_num);
    18be:	a8 e3       	ldi	r26, 0x38	; 56
    18c0:	b0 e0       	ldi	r27, 0x00	; 0
    18c2:	e8 e3       	ldi	r30, 0x38	; 56
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	80 81       	ld	r24, Z
    18c8:	48 2f       	mov	r20, r24
    18ca:	8b 81       	ldd	r24, Y+3	; 0x03
    18cc:	28 2f       	mov	r18, r24
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	02 2e       	mov	r0, r18
    18d6:	02 c0       	rjmp	.+4      	; 0x18dc <GPIO_togglePin+0xb0>
    18d8:	88 0f       	add	r24, r24
    18da:	99 1f       	adc	r25, r25
    18dc:	0a 94       	dec	r0
    18de:	e2 f7       	brpl	.-8      	; 0x18d8 <GPIO_togglePin+0xac>
    18e0:	84 27       	eor	r24, r20
    18e2:	8c 93       	st	X, r24
    18e4:	27 c0       	rjmp	.+78     	; 0x1934 <GPIO_togglePin+0x108>
			break;
		case PORT_C:
			TOG_BIT(PORTC,pin_num);
    18e6:	a5 e3       	ldi	r26, 0x35	; 53
    18e8:	b0 e0       	ldi	r27, 0x00	; 0
    18ea:	e5 e3       	ldi	r30, 0x35	; 53
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	48 2f       	mov	r20, r24
    18f2:	8b 81       	ldd	r24, Y+3	; 0x03
    18f4:	28 2f       	mov	r18, r24
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	02 2e       	mov	r0, r18
    18fe:	02 c0       	rjmp	.+4      	; 0x1904 <GPIO_togglePin+0xd8>
    1900:	88 0f       	add	r24, r24
    1902:	99 1f       	adc	r25, r25
    1904:	0a 94       	dec	r0
    1906:	e2 f7       	brpl	.-8      	; 0x1900 <GPIO_togglePin+0xd4>
    1908:	84 27       	eor	r24, r20
    190a:	8c 93       	st	X, r24
    190c:	13 c0       	rjmp	.+38     	; 0x1934 <GPIO_togglePin+0x108>
			break;
		case PORT_D:
			TOG_BIT(PORTD,pin_num);
    190e:	a2 e3       	ldi	r26, 0x32	; 50
    1910:	b0 e0       	ldi	r27, 0x00	; 0
    1912:	e2 e3       	ldi	r30, 0x32	; 50
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	80 81       	ld	r24, Z
    1918:	48 2f       	mov	r20, r24
    191a:	8b 81       	ldd	r24, Y+3	; 0x03
    191c:	28 2f       	mov	r18, r24
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	02 2e       	mov	r0, r18
    1926:	02 c0       	rjmp	.+4      	; 0x192c <GPIO_togglePin+0x100>
    1928:	88 0f       	add	r24, r24
    192a:	99 1f       	adc	r25, r25
    192c:	0a 94       	dec	r0
    192e:	e2 f7       	brpl	.-8      	; 0x1928 <GPIO_togglePin+0xfc>
    1930:	84 27       	eor	r24, r20
    1932:	8c 93       	st	X, r24
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    1934:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    1936:	89 81       	ldd	r24, Y+1	; 0x01
}
    1938:	0f 90       	pop	r0
    193a:	0f 90       	pop	r0
    193c:	0f 90       	pop	r0
    193e:	0f 90       	pop	r0
    1940:	0f 90       	pop	r0
    1942:	cf 91       	pop	r28
    1944:	df 91       	pop	r29
    1946:	08 95       	ret

00001948 <GPIO_readPin>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return an error.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num) {
    1948:	df 93       	push	r29
    194a:	cf 93       	push	r28
    194c:	cd b7       	in	r28, 0x3d	; 61
    194e:	de b7       	in	r29, 0x3e	; 62
    1950:	27 97       	sbiw	r28, 0x07	; 7
    1952:	0f b6       	in	r0, 0x3f	; 63
    1954:	f8 94       	cli
    1956:	de bf       	out	0x3e, r29	; 62
    1958:	0f be       	out	0x3f, r0	; 63
    195a:	cd bf       	out	0x3d, r28	; 61
    195c:	8b 83       	std	Y+3, r24	; 0x03
    195e:	6c 83       	std	Y+4, r22	; 0x04
	uint8 pin_value = LOGIC_LOW;
    1960:	1a 82       	std	Y+2, r1	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t GPIO_Driver_Checker = NULL;
    1962:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    1964:	8c 81       	ldd	r24, Y+4	; 0x04
    1966:	88 30       	cpi	r24, 0x08	; 8
    1968:	28 f0       	brcs	.+10     	; 0x1974 <GPIO_readPin+0x2c>
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	89 83       	std	Y+1, r24	; 0x01
		return GPIO_Driver_Checker;
    196e:	29 81       	ldd	r18, Y+1	; 0x01
    1970:	2f 83       	std	Y+7, r18	; 0x07
    1972:	8b c0       	rjmp	.+278    	; 0x1a8a <GPIO_readPin+0x142>
	}
	else if((port_num >= NUM_OF_PORTS)) {
    1974:	8b 81       	ldd	r24, Y+3	; 0x03
    1976:	84 30       	cpi	r24, 0x04	; 4
    1978:	28 f0       	brcs	.+10     	; 0x1984 <GPIO_readPin+0x3c>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    197a:	82 e0       	ldi	r24, 0x02	; 2
    197c:	89 83       	std	Y+1, r24	; 0x01
		return GPIO_Driver_Checker;
    197e:	39 81       	ldd	r19, Y+1	; 0x01
    1980:	3f 83       	std	Y+7, r19	; 0x07
    1982:	83 c0       	rjmp	.+262    	; 0x1a8a <GPIO_readPin+0x142>
	}
	else {
		/* Read the pin value as required */
		switch(port_num) {
    1984:	8b 81       	ldd	r24, Y+3	; 0x03
    1986:	48 2f       	mov	r20, r24
    1988:	50 e0       	ldi	r21, 0x00	; 0
    198a:	5e 83       	std	Y+6, r21	; 0x06
    198c:	4d 83       	std	Y+5, r20	; 0x05
    198e:	8d 81       	ldd	r24, Y+5	; 0x05
    1990:	9e 81       	ldd	r25, Y+6	; 0x06
    1992:	81 30       	cpi	r24, 0x01	; 1
    1994:	91 05       	cpc	r25, r1
    1996:	79 f1       	breq	.+94     	; 0x19f6 <GPIO_readPin+0xae>
    1998:	2d 81       	ldd	r18, Y+5	; 0x05
    199a:	3e 81       	ldd	r19, Y+6	; 0x06
    199c:	22 30       	cpi	r18, 0x02	; 2
    199e:	31 05       	cpc	r19, r1
    19a0:	34 f4       	brge	.+12     	; 0x19ae <GPIO_readPin+0x66>
    19a2:	4d 81       	ldd	r20, Y+5	; 0x05
    19a4:	5e 81       	ldd	r21, Y+6	; 0x06
    19a6:	41 15       	cp	r20, r1
    19a8:	51 05       	cpc	r21, r1
    19aa:	69 f0       	breq	.+26     	; 0x19c6 <GPIO_readPin+0x7e>
    19ac:	6b c0       	rjmp	.+214    	; 0x1a84 <GPIO_readPin+0x13c>
    19ae:	8d 81       	ldd	r24, Y+5	; 0x05
    19b0:	9e 81       	ldd	r25, Y+6	; 0x06
    19b2:	82 30       	cpi	r24, 0x02	; 2
    19b4:	91 05       	cpc	r25, r1
    19b6:	b9 f1       	breq	.+110    	; 0x1a26 <GPIO_readPin+0xde>
    19b8:	2d 81       	ldd	r18, Y+5	; 0x05
    19ba:	3e 81       	ldd	r19, Y+6	; 0x06
    19bc:	23 30       	cpi	r18, 0x03	; 3
    19be:	31 05       	cpc	r19, r1
    19c0:	09 f4       	brne	.+2      	; 0x19c4 <GPIO_readPin+0x7c>
    19c2:	49 c0       	rjmp	.+146    	; 0x1a56 <GPIO_readPin+0x10e>
    19c4:	5f c0       	rjmp	.+190    	; 0x1a84 <GPIO_readPin+0x13c>
		case PORT_A:
			// Checks if the bit equals '1' or not
			if(BIT_IS_SET(PINA,pin_num)) {
    19c6:	e9 e3       	ldi	r30, 0x39	; 57
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	80 81       	ld	r24, Z
    19cc:	28 2f       	mov	r18, r24
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	8c 81       	ldd	r24, Y+4	; 0x04
    19d2:	88 2f       	mov	r24, r24
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	a9 01       	movw	r20, r18
    19d8:	02 c0       	rjmp	.+4      	; 0x19de <GPIO_readPin+0x96>
    19da:	55 95       	asr	r21
    19dc:	47 95       	ror	r20
    19de:	8a 95       	dec	r24
    19e0:	e2 f7       	brpl	.-8      	; 0x19da <GPIO_readPin+0x92>
    19e2:	ca 01       	movw	r24, r20
    19e4:	81 70       	andi	r24, 0x01	; 1
    19e6:	90 70       	andi	r25, 0x00	; 0
    19e8:	88 23       	and	r24, r24
    19ea:	19 f0       	breq	.+6      	; 0x19f2 <GPIO_readPin+0xaa>
				pin_value = LOGIC_HIGH;
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	8a 83       	std	Y+2, r24	; 0x02
    19f0:	49 c0       	rjmp	.+146    	; 0x1a84 <GPIO_readPin+0x13c>
			}
			else {
				pin_value = LOGIC_LOW;
    19f2:	1a 82       	std	Y+2, r1	; 0x02
    19f4:	47 c0       	rjmp	.+142    	; 0x1a84 <GPIO_readPin+0x13c>
			}
			break;
		case PORT_B:
			if(BIT_IS_SET(PINB,pin_num)) {
    19f6:	e6 e3       	ldi	r30, 0x36	; 54
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	28 2f       	mov	r18, r24
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	8c 81       	ldd	r24, Y+4	; 0x04
    1a02:	88 2f       	mov	r24, r24
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	a9 01       	movw	r20, r18
    1a08:	02 c0       	rjmp	.+4      	; 0x1a0e <GPIO_readPin+0xc6>
    1a0a:	55 95       	asr	r21
    1a0c:	47 95       	ror	r20
    1a0e:	8a 95       	dec	r24
    1a10:	e2 f7       	brpl	.-8      	; 0x1a0a <GPIO_readPin+0xc2>
    1a12:	ca 01       	movw	r24, r20
    1a14:	81 70       	andi	r24, 0x01	; 1
    1a16:	90 70       	andi	r25, 0x00	; 0
    1a18:	88 23       	and	r24, r24
    1a1a:	19 f0       	breq	.+6      	; 0x1a22 <GPIO_readPin+0xda>
				pin_value = LOGIC_HIGH;
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	8a 83       	std	Y+2, r24	; 0x02
    1a20:	31 c0       	rjmp	.+98     	; 0x1a84 <GPIO_readPin+0x13c>
			}
			else {
				pin_value = LOGIC_LOW;
    1a22:	1a 82       	std	Y+2, r1	; 0x02
    1a24:	2f c0       	rjmp	.+94     	; 0x1a84 <GPIO_readPin+0x13c>
			}
			break;
		case PORT_C:
			if(BIT_IS_SET(PINC,pin_num)) {
    1a26:	e3 e3       	ldi	r30, 0x33	; 51
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	28 2f       	mov	r18, r24
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	8c 81       	ldd	r24, Y+4	; 0x04
    1a32:	88 2f       	mov	r24, r24
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	a9 01       	movw	r20, r18
    1a38:	02 c0       	rjmp	.+4      	; 0x1a3e <GPIO_readPin+0xf6>
    1a3a:	55 95       	asr	r21
    1a3c:	47 95       	ror	r20
    1a3e:	8a 95       	dec	r24
    1a40:	e2 f7       	brpl	.-8      	; 0x1a3a <GPIO_readPin+0xf2>
    1a42:	ca 01       	movw	r24, r20
    1a44:	81 70       	andi	r24, 0x01	; 1
    1a46:	90 70       	andi	r25, 0x00	; 0
    1a48:	88 23       	and	r24, r24
    1a4a:	19 f0       	breq	.+6      	; 0x1a52 <GPIO_readPin+0x10a>
				pin_value = LOGIC_HIGH;
    1a4c:	81 e0       	ldi	r24, 0x01	; 1
    1a4e:	8a 83       	std	Y+2, r24	; 0x02
    1a50:	19 c0       	rjmp	.+50     	; 0x1a84 <GPIO_readPin+0x13c>
			}
			else {
				pin_value = LOGIC_LOW;
    1a52:	1a 82       	std	Y+2, r1	; 0x02
    1a54:	17 c0       	rjmp	.+46     	; 0x1a84 <GPIO_readPin+0x13c>
			}
			break;
		case PORT_D:
			if(BIT_IS_SET(PIND,pin_num)) {
    1a56:	e0 e3       	ldi	r30, 0x30	; 48
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	80 81       	ld	r24, Z
    1a5c:	28 2f       	mov	r18, r24
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	8c 81       	ldd	r24, Y+4	; 0x04
    1a62:	88 2f       	mov	r24, r24
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	a9 01       	movw	r20, r18
    1a68:	02 c0       	rjmp	.+4      	; 0x1a6e <GPIO_readPin+0x126>
    1a6a:	55 95       	asr	r21
    1a6c:	47 95       	ror	r20
    1a6e:	8a 95       	dec	r24
    1a70:	e2 f7       	brpl	.-8      	; 0x1a6a <GPIO_readPin+0x122>
    1a72:	ca 01       	movw	r24, r20
    1a74:	81 70       	andi	r24, 0x01	; 1
    1a76:	90 70       	andi	r25, 0x00	; 0
    1a78:	88 23       	and	r24, r24
    1a7a:	19 f0       	breq	.+6      	; 0x1a82 <GPIO_readPin+0x13a>
				pin_value = LOGIC_HIGH;
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	8a 83       	std	Y+2, r24	; 0x02
    1a80:	01 c0       	rjmp	.+2      	; 0x1a84 <GPIO_readPin+0x13c>
			}
			else {
				pin_value = LOGIC_LOW;
    1a82:	1a 82       	std	Y+2, r1	; 0x02
			}
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    1a84:	19 82       	std	Y+1, r1	; 0x01
	}
	return pin_value;
    1a86:	5a 81       	ldd	r21, Y+2	; 0x02
    1a88:	5f 83       	std	Y+7, r21	; 0x07
    1a8a:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1a8c:	27 96       	adiw	r28, 0x07	; 7
    1a8e:	0f b6       	in	r0, 0x3f	; 63
    1a90:	f8 94       	cli
    1a92:	de bf       	out	0x3e, r29	; 62
    1a94:	0f be       	out	0x3f, r0	; 63
    1a96:	cd bf       	out	0x3d, r28	; 61
    1a98:	cf 91       	pop	r28
    1a9a:	df 91       	pop	r29
    1a9c:	08 95       	ret

00001a9e <GPIO_setupPortDirection>:
 * Setup the direction of the required port all pins input/output.
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
GPIO_Error_t GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction) {
    1a9e:	df 93       	push	r29
    1aa0:	cf 93       	push	r28
    1aa2:	00 d0       	rcall	.+0      	; 0x1aa4 <GPIO_setupPortDirection+0x6>
    1aa4:	00 d0       	rcall	.+0      	; 0x1aa6 <GPIO_setupPortDirection+0x8>
    1aa6:	0f 92       	push	r0
    1aa8:	cd b7       	in	r28, 0x3d	; 61
    1aaa:	de b7       	in	r29, 0x3e	; 62
    1aac:	8a 83       	std	Y+2, r24	; 0x02
    1aae:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	uint8_t GPIO_Driver_Checker = NULL;
    1ab0:	19 82       	std	Y+1, r1	; 0x01

	if((port_num >= NUM_OF_PORTS)) {
    1ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab4:	84 30       	cpi	r24, 0x04	; 4
    1ab6:	18 f0       	brcs	.+6      	; 0x1abe <GPIO_setupPortDirection+0x20>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    1ab8:	82 e0       	ldi	r24, 0x02	; 2
    1aba:	89 83       	std	Y+1, r24	; 0x01
    1abc:	3c c0       	rjmp	.+120    	; 0x1b36 <GPIO_setupPortDirection+0x98>
	}
	else if((direction != PORT_INPUT) && (direction != PORT_OUTPUT)) {
    1abe:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac0:	88 23       	and	r24, r24
    1ac2:	31 f0       	breq	.+12     	; 0x1ad0 <GPIO_setupPortDirection+0x32>
    1ac4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac6:	8f 3f       	cpi	r24, 0xFF	; 255
    1ac8:	19 f0       	breq	.+6      	; 0x1ad0 <GPIO_setupPortDirection+0x32>
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
    1aca:	83 e0       	ldi	r24, 0x03	; 3
    1acc:	89 83       	std	Y+1, r24	; 0x01
    1ace:	33 c0       	rjmp	.+102    	; 0x1b36 <GPIO_setupPortDirection+0x98>
	}
	else {
		/* Setup the port direction as required */
		switch(port_num) {
    1ad0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad2:	28 2f       	mov	r18, r24
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	3d 83       	std	Y+5, r19	; 0x05
    1ad8:	2c 83       	std	Y+4, r18	; 0x04
    1ada:	8c 81       	ldd	r24, Y+4	; 0x04
    1adc:	9d 81       	ldd	r25, Y+5	; 0x05
    1ade:	81 30       	cpi	r24, 0x01	; 1
    1ae0:	91 05       	cpc	r25, r1
    1ae2:	d1 f0       	breq	.+52     	; 0x1b18 <GPIO_setupPortDirection+0x7a>
    1ae4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ae6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ae8:	22 30       	cpi	r18, 0x02	; 2
    1aea:	31 05       	cpc	r19, r1
    1aec:	2c f4       	brge	.+10     	; 0x1af8 <GPIO_setupPortDirection+0x5a>
    1aee:	8c 81       	ldd	r24, Y+4	; 0x04
    1af0:	9d 81       	ldd	r25, Y+5	; 0x05
    1af2:	00 97       	sbiw	r24, 0x00	; 0
    1af4:	61 f0       	breq	.+24     	; 0x1b0e <GPIO_setupPortDirection+0x70>
    1af6:	1e c0       	rjmp	.+60     	; 0x1b34 <GPIO_setupPortDirection+0x96>
    1af8:	2c 81       	ldd	r18, Y+4	; 0x04
    1afa:	3d 81       	ldd	r19, Y+5	; 0x05
    1afc:	22 30       	cpi	r18, 0x02	; 2
    1afe:	31 05       	cpc	r19, r1
    1b00:	81 f0       	breq	.+32     	; 0x1b22 <GPIO_setupPortDirection+0x84>
    1b02:	8c 81       	ldd	r24, Y+4	; 0x04
    1b04:	9d 81       	ldd	r25, Y+5	; 0x05
    1b06:	83 30       	cpi	r24, 0x03	; 3
    1b08:	91 05       	cpc	r25, r1
    1b0a:	81 f0       	breq	.+32     	; 0x1b2c <GPIO_setupPortDirection+0x8e>
    1b0c:	13 c0       	rjmp	.+38     	; 0x1b34 <GPIO_setupPortDirection+0x96>
		case PORT_A:
			DDRA = direction;
    1b0e:	ea e3       	ldi	r30, 0x3A	; 58
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	8b 81       	ldd	r24, Y+3	; 0x03
    1b14:	80 83       	st	Z, r24
    1b16:	0e c0       	rjmp	.+28     	; 0x1b34 <GPIO_setupPortDirection+0x96>
			break;
		case PORT_B:
			DDRB = direction;
    1b18:	e7 e3       	ldi	r30, 0x37	; 55
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1e:	80 83       	st	Z, r24
    1b20:	09 c0       	rjmp	.+18     	; 0x1b34 <GPIO_setupPortDirection+0x96>
			break;
		case PORT_C:
			DDRC = direction;
    1b22:	e4 e3       	ldi	r30, 0x34	; 52
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	8b 81       	ldd	r24, Y+3	; 0x03
    1b28:	80 83       	st	Z, r24
    1b2a:	04 c0       	rjmp	.+8      	; 0x1b34 <GPIO_setupPortDirection+0x96>
			break;
		case PORT_D:
			DDRD = direction;
    1b2c:	e1 e3       	ldi	r30, 0x31	; 49
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	8b 81       	ldd	r24, Y+3	; 0x03
    1b32:	80 83       	st	Z, r24
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    1b34:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    1b36:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b38:	0f 90       	pop	r0
    1b3a:	0f 90       	pop	r0
    1b3c:	0f 90       	pop	r0
    1b3e:	0f 90       	pop	r0
    1b40:	0f 90       	pop	r0
    1b42:	cf 91       	pop	r28
    1b44:	df 91       	pop	r29
    1b46:	08 95       	ret

00001b48 <GPIO_writePort>:
 * Write the value on the required port.
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
GPIO_Error_t GPIO_writePort(uint8 port_num, uint8 value) {
    1b48:	df 93       	push	r29
    1b4a:	cf 93       	push	r28
    1b4c:	00 d0       	rcall	.+0      	; 0x1b4e <GPIO_writePort+0x6>
    1b4e:	00 d0       	rcall	.+0      	; 0x1b50 <GPIO_writePort+0x8>
    1b50:	0f 92       	push	r0
    1b52:	cd b7       	in	r28, 0x3d	; 61
    1b54:	de b7       	in	r29, 0x3e	; 62
    1b56:	8a 83       	std	Y+2, r24	; 0x02
    1b58:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t GPIO_Driver_Checker = NULL;
    1b5a:	19 82       	std	Y+1, r1	; 0x01
	if((port_num >= NUM_OF_PORTS)) {
    1b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5e:	84 30       	cpi	r24, 0x04	; 4
    1b60:	18 f0       	brcs	.+6      	; 0x1b68 <GPIO_writePort+0x20>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    1b62:	82 e0       	ldi	r24, 0x02	; 2
    1b64:	89 83       	std	Y+1, r24	; 0x01
    1b66:	33 c0       	rjmp	.+102    	; 0x1bce <GPIO_writePort+0x86>
	}
	else {
		/* Setup the port direction as required */
		switch(port_num) {
    1b68:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6a:	28 2f       	mov	r18, r24
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	3d 83       	std	Y+5, r19	; 0x05
    1b70:	2c 83       	std	Y+4, r18	; 0x04
    1b72:	8c 81       	ldd	r24, Y+4	; 0x04
    1b74:	9d 81       	ldd	r25, Y+5	; 0x05
    1b76:	81 30       	cpi	r24, 0x01	; 1
    1b78:	91 05       	cpc	r25, r1
    1b7a:	d1 f0       	breq	.+52     	; 0x1bb0 <GPIO_writePort+0x68>
    1b7c:	2c 81       	ldd	r18, Y+4	; 0x04
    1b7e:	3d 81       	ldd	r19, Y+5	; 0x05
    1b80:	22 30       	cpi	r18, 0x02	; 2
    1b82:	31 05       	cpc	r19, r1
    1b84:	2c f4       	brge	.+10     	; 0x1b90 <GPIO_writePort+0x48>
    1b86:	8c 81       	ldd	r24, Y+4	; 0x04
    1b88:	9d 81       	ldd	r25, Y+5	; 0x05
    1b8a:	00 97       	sbiw	r24, 0x00	; 0
    1b8c:	61 f0       	breq	.+24     	; 0x1ba6 <GPIO_writePort+0x5e>
    1b8e:	1e c0       	rjmp	.+60     	; 0x1bcc <GPIO_writePort+0x84>
    1b90:	2c 81       	ldd	r18, Y+4	; 0x04
    1b92:	3d 81       	ldd	r19, Y+5	; 0x05
    1b94:	22 30       	cpi	r18, 0x02	; 2
    1b96:	31 05       	cpc	r19, r1
    1b98:	81 f0       	breq	.+32     	; 0x1bba <GPIO_writePort+0x72>
    1b9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b9c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b9e:	83 30       	cpi	r24, 0x03	; 3
    1ba0:	91 05       	cpc	r25, r1
    1ba2:	81 f0       	breq	.+32     	; 0x1bc4 <GPIO_writePort+0x7c>
    1ba4:	13 c0       	rjmp	.+38     	; 0x1bcc <GPIO_writePort+0x84>
		case PORT_A:
			PORTA = value;
    1ba6:	eb e3       	ldi	r30, 0x3B	; 59
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bac:	80 83       	st	Z, r24
    1bae:	0e c0       	rjmp	.+28     	; 0x1bcc <GPIO_writePort+0x84>
			break;
		case PORT_B:
			PORTB = value;
    1bb0:	e8 e3       	ldi	r30, 0x38	; 56
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb6:	80 83       	st	Z, r24
    1bb8:	09 c0       	rjmp	.+18     	; 0x1bcc <GPIO_writePort+0x84>
			break;
		case PORT_C:
			PORTC = value;
    1bba:	e5 e3       	ldi	r30, 0x35	; 53
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc0:	80 83       	st	Z, r24
    1bc2:	04 c0       	rjmp	.+8      	; 0x1bcc <GPIO_writePort+0x84>
			break;
		case PORT_D:
			PORTD = value;
    1bc4:	e2 e3       	ldi	r30, 0x32	; 50
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bca:	80 83       	st	Z, r24
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    1bcc:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    1bce:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bd0:	0f 90       	pop	r0
    1bd2:	0f 90       	pop	r0
    1bd4:	0f 90       	pop	r0
    1bd6:	0f 90       	pop	r0
    1bd8:	0f 90       	pop	r0
    1bda:	cf 91       	pop	r28
    1bdc:	df 91       	pop	r29
    1bde:	08 95       	ret

00001be0 <GPIO_readPort>:
/*
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num) {
    1be0:	df 93       	push	r29
    1be2:	cf 93       	push	r28
    1be4:	00 d0       	rcall	.+0      	; 0x1be6 <GPIO_readPort+0x6>
    1be6:	00 d0       	rcall	.+0      	; 0x1be8 <GPIO_readPort+0x8>
    1be8:	0f 92       	push	r0
    1bea:	cd b7       	in	r28, 0x3d	; 61
    1bec:	de b7       	in	r29, 0x3e	; 62
    1bee:	8b 83       	std	Y+3, r24	; 0x03
	uint8 value = LOGIC_LOW;
    1bf0:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t GPIO_Driver_Checker = NULL;
    1bf2:	19 82       	std	Y+1, r1	; 0x01

	if((port_num >= NUM_OF_PORTS)) {
    1bf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf6:	84 30       	cpi	r24, 0x04	; 4
    1bf8:	18 f0       	brcs	.+6      	; 0x1c00 <GPIO_readPort+0x20>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    1bfa:	82 e0       	ldi	r24, 0x02	; 2
    1bfc:	89 83       	std	Y+1, r24	; 0x01
    1bfe:	32 c0       	rjmp	.+100    	; 0x1c64 <GPIO_readPort+0x84>
	}
	else {
		switch(port_num) {
    1c00:	8b 81       	ldd	r24, Y+3	; 0x03
    1c02:	28 2f       	mov	r18, r24
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	3d 83       	std	Y+5, r19	; 0x05
    1c08:	2c 83       	std	Y+4, r18	; 0x04
    1c0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c0c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c0e:	81 30       	cpi	r24, 0x01	; 1
    1c10:	91 05       	cpc	r25, r1
    1c12:	d1 f0       	breq	.+52     	; 0x1c48 <GPIO_readPort+0x68>
    1c14:	2c 81       	ldd	r18, Y+4	; 0x04
    1c16:	3d 81       	ldd	r19, Y+5	; 0x05
    1c18:	22 30       	cpi	r18, 0x02	; 2
    1c1a:	31 05       	cpc	r19, r1
    1c1c:	2c f4       	brge	.+10     	; 0x1c28 <GPIO_readPort+0x48>
    1c1e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c20:	9d 81       	ldd	r25, Y+5	; 0x05
    1c22:	00 97       	sbiw	r24, 0x00	; 0
    1c24:	61 f0       	breq	.+24     	; 0x1c3e <GPIO_readPort+0x5e>
    1c26:	1e c0       	rjmp	.+60     	; 0x1c64 <GPIO_readPort+0x84>
    1c28:	2c 81       	ldd	r18, Y+4	; 0x04
    1c2a:	3d 81       	ldd	r19, Y+5	; 0x05
    1c2c:	22 30       	cpi	r18, 0x02	; 2
    1c2e:	31 05       	cpc	r19, r1
    1c30:	81 f0       	breq	.+32     	; 0x1c52 <GPIO_readPort+0x72>
    1c32:	8c 81       	ldd	r24, Y+4	; 0x04
    1c34:	9d 81       	ldd	r25, Y+5	; 0x05
    1c36:	83 30       	cpi	r24, 0x03	; 3
    1c38:	91 05       	cpc	r25, r1
    1c3a:	81 f0       	breq	.+32     	; 0x1c5c <GPIO_readPort+0x7c>
    1c3c:	13 c0       	rjmp	.+38     	; 0x1c64 <GPIO_readPort+0x84>
		case PORT_A:
			// Why value equals PINA?
			value = PINA;
    1c3e:	e9 e3       	ldi	r30, 0x39	; 57
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	80 81       	ld	r24, Z
    1c44:	8a 83       	std	Y+2, r24	; 0x02
    1c46:	0e c0       	rjmp	.+28     	; 0x1c64 <GPIO_readPort+0x84>
			break;
		case PORT_B:
			value = PINB;
    1c48:	e6 e3       	ldi	r30, 0x36	; 54
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	80 81       	ld	r24, Z
    1c4e:	8a 83       	std	Y+2, r24	; 0x02
    1c50:	09 c0       	rjmp	.+18     	; 0x1c64 <GPIO_readPort+0x84>
			break;
		case PORT_C:
			value = PINC;
    1c52:	e3 e3       	ldi	r30, 0x33	; 51
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	80 81       	ld	r24, Z
    1c58:	8a 83       	std	Y+2, r24	; 0x02
    1c5a:	04 c0       	rjmp	.+8      	; 0x1c64 <GPIO_readPort+0x84>
			break;
		case PORT_D:
			value = PIND;
    1c5c:	e0 e3       	ldi	r30, 0x30	; 48
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	8a 83       	std	Y+2, r24	; 0x02
			break;
		}
	}
	return value;
    1c64:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1c66:	0f 90       	pop	r0
    1c68:	0f 90       	pop	r0
    1c6a:	0f 90       	pop	r0
    1c6c:	0f 90       	pop	r0
    1c6e:	0f 90       	pop	r0
    1c70:	cf 91       	pop	r28
    1c72:	df 91       	pop	r29
    1c74:	08 95       	ret

00001c76 <EXT_INTERRUPT_Init>:

#include "avr/io.h" /* To use the IO Ports Registers */
#include <util/delay.h>

// Initialize External Interrupt
void EXT_INTERRUPT_Init(void) {
    1c76:	df 93       	push	r29
    1c78:	cf 93       	push	r28
    1c7a:	cd b7       	in	r28, 0x3d	; 61
    1c7c:	de b7       	in	r29, 0x3e	; 62
	 */

	// Checking if INT0 is enabled or disabled
	#if (EXT_INTERRUPT_INT0_INIT_STATE == EXT_INTERRUPT_Enable_State)
		// Enabling the INT0 bit inside GICR
		SET_BIT(GICR, INT0);
    1c7e:	ab e5       	ldi	r26, 0x5B	; 91
    1c80:	b0 e0       	ldi	r27, 0x00	; 0
    1c82:	eb e5       	ldi	r30, 0x5B	; 91
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	80 81       	ld	r24, Z
    1c88:	80 64       	ori	r24, 0x40	; 64
    1c8a:	8c 93       	st	X, r24

		// Setup Pin PD2 "INT0" to Input
		GPIO_setupPinDirection(PORT_D, PIN_2, PIN_INPUT);
    1c8c:	83 e0       	ldi	r24, 0x03	; 3
    1c8e:	62 e0       	ldi	r22, 0x02	; 2
    1c90:	40 e0       	ldi	r20, 0x00	; 0
    1c92:	0e 94 1e 0a 	call	0x143c	; 0x143c <GPIO_setupPinDirection>
			SET_BIT(MCUCR, ISC00);
		#elif (EXT_INTERRUPT_0_MODE == EXT_INTERRUPT_Falling_Edge)
			SET_BIT(MCUCR, ISC01);
			CLR_BIT(MCUCR, ISC00);
		#elif (EXT_INTERRUPT_0_MODE == EXT_INTERRUPT_Rising_Edge)
			SET_BIT(MCUCR, ISC01);
    1c96:	a5 e5       	ldi	r26, 0x55	; 85
    1c98:	b0 e0       	ldi	r27, 0x00	; 0
    1c9a:	e5 e5       	ldi	r30, 0x55	; 85
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	80 81       	ld	r24, Z
    1ca0:	82 60       	ori	r24, 0x02	; 2
    1ca2:	8c 93       	st	X, r24
			SET_BIT(MCUCR, ISC00);
    1ca4:	a5 e5       	ldi	r26, 0x55	; 85
    1ca6:	b0 e0       	ldi	r27, 0x00	; 0
    1ca8:	e5 e5       	ldi	r30, 0x55	; 85
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	80 81       	ld	r24, Z
    1cae:	81 60       	ori	r24, 0x01	; 1
    1cb0:	8c 93       	st	X, r24
		#elif (EXT_INTERRUPT_1_MODE == EXT_INTERRUPT_Rising_Edge)
			SET_BIT(MCUCR, ISC11);
			SET_BIT(MCUCR, ISC10);
		#endif
	#elif (EXT_INTERRUPT_INT1_INIT_STATE == EXT_INTERRUPT_Disable_State)
			CLR_BIT(GICR, INT1);
    1cb2:	ab e5       	ldi	r26, 0x5B	; 91
    1cb4:	b0 e0       	ldi	r27, 0x00	; 0
    1cb6:	eb e5       	ldi	r30, 0x5B	; 91
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	80 81       	ld	r24, Z
    1cbc:	8f 77       	andi	r24, 0x7F	; 127
    1cbe:	8c 93       	st	X, r24
			CLR_BIT(MCUCSR, ISC2);
		#elif (EXT_INTERRUPT_2_MODE == EXT_INTERRUPT_INT2_Rising_Edge)
			SET_BIT(MCUCSR, ISC2);
		#endif
	#elif (EXT_INTERRUPT_INT2_INIT_STATE == EXT_INTERRUPT_Disable_State)
			CLR_BIT(GICR, INT2);
    1cc0:	ab e5       	ldi	r26, 0x5B	; 91
    1cc2:	b0 e0       	ldi	r27, 0x00	; 0
    1cc4:	eb e5       	ldi	r30, 0x5B	; 91
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	80 81       	ld	r24, Z
    1cca:	8f 7d       	andi	r24, 0xDF	; 223
    1ccc:	8c 93       	st	X, r24

	/* Status Register – SREG Register Bits Description:
	 * Bit 7 – I: Global Interrupt Enable
	 */
	// Enabling the I-Bit
	SET_BIT(SREG, SREG_I_BIT);
    1cce:	af e5       	ldi	r26, 0x5F	; 95
    1cd0:	b0 e0       	ldi	r27, 0x00	; 0
    1cd2:	ef e5       	ldi	r30, 0x5F	; 95
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	80 81       	ld	r24, Z
    1cd8:	80 68       	ori	r24, 0x80	; 128
    1cda:	8c 93       	st	X, r24
}
    1cdc:	cf 91       	pop	r28
    1cde:	df 91       	pop	r29
    1ce0:	08 95       	ret

00001ce2 <EXT_INTERRUPT_DeInit>:

// Disable External Interrupt ISR
void EXT_INTERRUPT_DeInit(void) {
    1ce2:	df 93       	push	r29
    1ce4:	cf 93       	push	r28
    1ce6:	cd b7       	in	r28, 0x3d	; 61
    1ce8:	de b7       	in	r29, 0x3e	; 62

	#if (EXT_INTERRUPT_INT0_INIT_STATE == EXT_INTERRUPT_Enable_State)
		CLR_BIT(GICR, INT0);
    1cea:	ab e5       	ldi	r26, 0x5B	; 91
    1cec:	b0 e0       	ldi	r27, 0x00	; 0
    1cee:	eb e5       	ldi	r30, 0x5B	; 91
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	80 81       	ld	r24, Z
    1cf4:	8f 7b       	andi	r24, 0xBF	; 191
    1cf6:	8c 93       	st	X, r24

	#if (EXT_INTERRUPT_INT2_INIT_STATE == EXT_INTERRUPT_Enable_State)
		CLR_BIT(GICR, INT2);
	#endif

	CLR_BIT(SREG, SREG_I_BIT);
    1cf8:	af e5       	ldi	r26, 0x5F	; 95
    1cfa:	b0 e0       	ldi	r27, 0x00	; 0
    1cfc:	ef e5       	ldi	r30, 0x5F	; 95
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	80 81       	ld	r24, Z
    1d02:	8f 77       	andi	r24, 0x7F	; 127
    1d04:	8c 93       	st	X, r24
}
    1d06:	cf 91       	pop	r28
    1d08:	df 91       	pop	r29
    1d0a:	08 95       	ret

00001d0c <EXT_INTERRUPT_SetCallBack>:

//The function that will be called in the EXT INT
void (*CallBackPtr) (void) = NULL;

// External Interrupt Call Back Function
void EXT_INTERRUPT_SetCallBack(void (*CopyFuncPtr) (void)) {
    1d0c:	df 93       	push	r29
    1d0e:	cf 93       	push	r28
    1d10:	00 d0       	rcall	.+0      	; 0x1d12 <EXT_INTERRUPT_SetCallBack+0x6>
    1d12:	cd b7       	in	r28, 0x3d	; 61
    1d14:	de b7       	in	r29, 0x3e	; 62
    1d16:	9a 83       	std	Y+2, r25	; 0x02
    1d18:	89 83       	std	Y+1, r24	; 0x01
	CallBackPtr = CopyFuncPtr;
    1d1a:	89 81       	ldd	r24, Y+1	; 0x01
    1d1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d1e:	90 93 69 01 	sts	0x0169, r25
    1d22:	80 93 68 01 	sts	0x0168, r24
}
    1d26:	0f 90       	pop	r0
    1d28:	0f 90       	pop	r0
    1d2a:	cf 91       	pop	r28
    1d2c:	df 91       	pop	r29
    1d2e:	08 95       	ret

00001d30 <ADC_Init>:
#include "avr/io.h" /* To use the IO Ports Registers */
#include <util/delay.h>


// Initializes and enables the ADC Module to start functionality
void ADC_Init(void) {
    1d30:	df 93       	push	r29
    1d32:	cf 93       	push	r28
    1d34:	cd b7       	in	r28, 0x3d	; 61
    1d36:	de b7       	in	r29, 0x3e	; 62
	 * 7:6, REFS1:0 = 01 to choose AVCC = 5v as reference voltage
	 * 5, ADLAR   = 0 right adjusted
	 * 4:0, MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	// Sets REFS1:0 to '01'
	SET_BIT(ADMUX, REFS0);
    1d38:	a7 e2       	ldi	r26, 0x27	; 39
    1d3a:	b0 e0       	ldi	r27, 0x00	; 0
    1d3c:	e7 e2       	ldi	r30, 0x27	; 39
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	80 81       	ld	r24, Z
    1d42:	80 64       	ori	r24, 0x40	; 64
    1d44:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, REFS1);
    1d46:	a7 e2       	ldi	r26, 0x27	; 39
    1d48:	b0 e0       	ldi	r27, 0x00	; 0
    1d4a:	e7 e2       	ldi	r30, 0x27	; 39
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	80 81       	ld	r24, Z
    1d50:	8f 77       	andi	r24, 0x7F	; 127
    1d52:	8c 93       	st	X, r24

	CLR_BIT(ADMUX, ADLAR);
    1d54:	a7 e2       	ldi	r26, 0x27	; 39
    1d56:	b0 e0       	ldi	r27, 0x00	; 0
    1d58:	e7 e2       	ldi	r30, 0x27	; 39
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	80 81       	ld	r24, Z
    1d5e:	8f 7d       	andi	r24, 0xDF	; 223
    1d60:	8c 93       	st	X, r24

	CLR_BIT(ADMUX, MUX4);
    1d62:	a7 e2       	ldi	r26, 0x27	; 39
    1d64:	b0 e0       	ldi	r27, 0x00	; 0
    1d66:	e7 e2       	ldi	r30, 0x27	; 39
    1d68:	f0 e0       	ldi	r31, 0x00	; 0
    1d6a:	80 81       	ld	r24, Z
    1d6c:	8f 7e       	andi	r24, 0xEF	; 239
    1d6e:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, MUX3);
    1d70:	a7 e2       	ldi	r26, 0x27	; 39
    1d72:	b0 e0       	ldi	r27, 0x00	; 0
    1d74:	e7 e2       	ldi	r30, 0x27	; 39
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	80 81       	ld	r24, Z
    1d7a:	87 7f       	andi	r24, 0xF7	; 247
    1d7c:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, MUX2);
    1d7e:	a7 e2       	ldi	r26, 0x27	; 39
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	e7 e2       	ldi	r30, 0x27	; 39
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	80 81       	ld	r24, Z
    1d88:	8b 7f       	andi	r24, 0xFB	; 251
    1d8a:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, MUX1);
    1d8c:	a7 e2       	ldi	r26, 0x27	; 39
    1d8e:	b0 e0       	ldi	r27, 0x00	; 0
    1d90:	e7 e2       	ldi	r30, 0x27	; 39
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	80 81       	ld	r24, Z
    1d96:	8d 7f       	andi	r24, 0xFD	; 253
    1d98:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, MUX0);
    1d9a:	a7 e2       	ldi	r26, 0x27	; 39
    1d9c:	b0 e0       	ldi	r27, 0x00	; 0
    1d9e:	e7 e2       	ldi	r30, 0x27	; 39
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	80 81       	ld	r24, Z
    1da4:	8e 7f       	andi	r24, 0xFE	; 254
    1da6:	8c 93       	st	X, r24
	 * ADIE = 0 Disable ADC Interrupt
	 * ADATE = 0 Disable Auto Trigger
	 * ADPS2:0 = 111 to choose ADC_Clock = F_CPU/128 = 16Mhz/128 = 125Khz --> ADC must operate in range 50-200Khz
	 */
	// Enables ADC
	SET_BIT(ADCSRA, ADEN);
    1da8:	a6 e2       	ldi	r26, 0x26	; 38
    1daa:	b0 e0       	ldi	r27, 0x00	; 0
    1dac:	e6 e2       	ldi	r30, 0x26	; 38
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	80 81       	ld	r24, Z
    1db2:	80 68       	ori	r24, 0x80	; 128
    1db4:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA, ADIE);
    1db6:	a6 e2       	ldi	r26, 0x26	; 38
    1db8:	b0 e0       	ldi	r27, 0x00	; 0
    1dba:	e6 e2       	ldi	r30, 0x26	; 38
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	80 81       	ld	r24, Z
    1dc0:	87 7f       	andi	r24, 0xF7	; 247
    1dc2:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA, ADATE);
    1dc4:	a6 e2       	ldi	r26, 0x26	; 38
    1dc6:	b0 e0       	ldi	r27, 0x00	; 0
    1dc8:	e6 e2       	ldi	r30, 0x26	; 38
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	80 81       	ld	r24, Z
    1dce:	8f 7d       	andi	r24, 0xDF	; 223
    1dd0:	8c 93       	st	X, r24

	// Choose Prescaler: 128
	SET_BIT(ADCSRA, ADPS2);
    1dd2:	a6 e2       	ldi	r26, 0x26	; 38
    1dd4:	b0 e0       	ldi	r27, 0x00	; 0
    1dd6:	e6 e2       	ldi	r30, 0x26	; 38
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	80 81       	ld	r24, Z
    1ddc:	84 60       	ori	r24, 0x04	; 4
    1dde:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADPS1);
    1de0:	a6 e2       	ldi	r26, 0x26	; 38
    1de2:	b0 e0       	ldi	r27, 0x00	; 0
    1de4:	e6 e2       	ldi	r30, 0x26	; 38
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	80 81       	ld	r24, Z
    1dea:	82 60       	ori	r24, 0x02	; 2
    1dec:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADPS0);
    1dee:	a6 e2       	ldi	r26, 0x26	; 38
    1df0:	b0 e0       	ldi	r27, 0x00	; 0
    1df2:	e6 e2       	ldi	r30, 0x26	; 38
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	80 81       	ld	r24, Z
    1df8:	81 60       	ori	r24, 0x01	; 1
    1dfa:	8c 93       	st	X, r24

}
    1dfc:	cf 91       	pop	r28
    1dfe:	df 91       	pop	r29
    1e00:	08 95       	ret

00001e02 <ADC_readChannel>:


// Reads the content written to the selected channel of the ADC
uint16 ADC_readChannel(uint8 channel_num) {
    1e02:	df 93       	push	r29
    1e04:	cf 93       	push	r28
    1e06:	0f 92       	push	r0
    1e08:	cd b7       	in	r28, 0x3d	; 61
    1e0a:	de b7       	in	r29, 0x3e	; 62
    1e0c:	89 83       	std	Y+1, r24	; 0x01

	// Insert Channel Number in ADMUX Procedure

	// Clears first 5 bits to zero
	ADMUX &= 0xE0; // 0b1110 0000
    1e0e:	a7 e2       	ldi	r26, 0x27	; 39
    1e10:	b0 e0       	ldi	r27, 0x00	; 0
    1e12:	e7 e2       	ldi	r30, 0x27	; 39
    1e14:	f0 e0       	ldi	r31, 0x00	; 0
    1e16:	80 81       	ld	r24, Z
    1e18:	80 7e       	andi	r24, 0xE0	; 224
    1e1a:	8c 93       	st	X, r24

	// Mask the Channel No. Input with max channel No.
	channel_num &= 0x07; // 0b0000 0111
    1e1c:	89 81       	ldd	r24, Y+1	; 0x01
    1e1e:	87 70       	andi	r24, 0x07	; 7
    1e20:	89 83       	std	Y+1, r24	; 0x01

	// Insert Channel no. into ADMUX Register
	ADMUX |= channel_num;
    1e22:	a7 e2       	ldi	r26, 0x27	; 39
    1e24:	b0 e0       	ldi	r27, 0x00	; 0
    1e26:	e7 e2       	ldi	r30, 0x27	; 39
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	90 81       	ld	r25, Z
    1e2c:	89 81       	ldd	r24, Y+1	; 0x01
    1e2e:	89 2b       	or	r24, r25
    1e30:	8c 93       	st	X, r24

	// Starts ADC Conversion
	SET_BIT(ADCSRA, ADSC);
    1e32:	a6 e2       	ldi	r26, 0x26	; 38
    1e34:	b0 e0       	ldi	r27, 0x00	; 0
    1e36:	e6 e2       	ldi	r30, 0x26	; 38
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	80 81       	ld	r24, Z
    1e3c:	80 64       	ori	r24, 0x40	; 64
    1e3e:	8c 93       	st	X, r24

	// Busy wait (Polling) untill ADIF = 1
	while ( BIT_IS_CLR(ADCSRA, ADIF) );
    1e40:	e6 e2       	ldi	r30, 0x26	; 38
    1e42:	f0 e0       	ldi	r31, 0x00	; 0
    1e44:	80 81       	ld	r24, Z
    1e46:	88 2f       	mov	r24, r24
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	80 71       	andi	r24, 0x10	; 16
    1e4c:	90 70       	andi	r25, 0x00	; 0
    1e4e:	00 97       	sbiw	r24, 0x00	; 0
    1e50:	b9 f3       	breq	.-18     	; 0x1e40 <ADC_readChannel+0x3e>

	// sET FLAG BY 1 TO CLEAR
	SET_BIT(ADCSRA, ADIF);
    1e52:	a6 e2       	ldi	r26, 0x26	; 38
    1e54:	b0 e0       	ldi	r27, 0x00	; 0
    1e56:	e6 e2       	ldi	r30, 0x26	; 38
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	80 81       	ld	r24, Z
    1e5c:	80 61       	ori	r24, 0x10	; 16
    1e5e:	8c 93       	st	X, r24

	// Read Data
	return ADC;
    1e60:	e4 e2       	ldi	r30, 0x24	; 36
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	80 81       	ld	r24, Z
    1e66:	91 81       	ldd	r25, Z+1	; 0x01
}
    1e68:	0f 90       	pop	r0
    1e6a:	cf 91       	pop	r28
    1e6c:	df 91       	pop	r29
    1e6e:	08 95       	ret

00001e70 <SEGMENT_Init>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
SEGMENT_Error_t SEGMENT_Init(uint8 port_num) {
    1e70:	df 93       	push	r29
    1e72:	cf 93       	push	r28
    1e74:	00 d0       	rcall	.+0      	; 0x1e76 <SEGMENT_Init+0x6>
    1e76:	cd b7       	in	r28, 0x3d	; 61
    1e78:	de b7       	in	r29, 0x3e	; 62
    1e7a:	8a 83       	std	Y+2, r24	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t SEGMENT_Driver_Checker = NULL;
    1e7c:	19 82       	std	Y+1, r1	; 0x01

	if((port_num >= NUM_OF_PORTS)) {
    1e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e80:	84 30       	cpi	r24, 0x04	; 4
    1e82:	18 f0       	brcs	.+6      	; 0x1e8a <SEGMENT_Init+0x1a>
		SEGMENT_Driver_Checker = SEGMENT_WRONG_PORT_NUMBER;
    1e84:	82 e0       	ldi	r24, 0x02	; 2
    1e86:	89 83       	std	Y+1, r24	; 0x01
    1e88:	15 c0       	rjmp	.+42     	; 0x1eb4 <SEGMENT_Init+0x44>
	}
	else {
		/* Setup the pin direction as required */
		GPIO_setupPinDirection(port_num, PIN_0, PIN_OUTPUT);
    1e8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8c:	60 e0       	ldi	r22, 0x00	; 0
    1e8e:	41 e0       	ldi	r20, 0x01	; 1
    1e90:	0e 94 1e 0a 	call	0x143c	; 0x143c <GPIO_setupPinDirection>
		GPIO_setupPinDirection(port_num, PIN_1, PIN_OUTPUT);
    1e94:	8a 81       	ldd	r24, Y+2	; 0x02
    1e96:	61 e0       	ldi	r22, 0x01	; 1
    1e98:	41 e0       	ldi	r20, 0x01	; 1
    1e9a:	0e 94 1e 0a 	call	0x143c	; 0x143c <GPIO_setupPinDirection>
		GPIO_setupPinDirection(port_num, PIN_2, PIN_OUTPUT);
    1e9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea0:	62 e0       	ldi	r22, 0x02	; 2
    1ea2:	41 e0       	ldi	r20, 0x01	; 1
    1ea4:	0e 94 1e 0a 	call	0x143c	; 0x143c <GPIO_setupPinDirection>
		GPIO_setupPinDirection(port_num, PIN_3, PIN_OUTPUT);
    1ea8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eaa:	63 e0       	ldi	r22, 0x03	; 3
    1eac:	41 e0       	ldi	r20, 0x01	; 1
    1eae:	0e 94 1e 0a 	call	0x143c	; 0x143c <GPIO_setupPinDirection>
		SEGMENT_Driver_Checker = SEGMENT_OK;
    1eb2:	19 82       	std	Y+1, r1	; 0x01
	}
	return SEGMENT_Driver_Checker;
    1eb4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1eb6:	0f 90       	pop	r0
    1eb8:	0f 90       	pop	r0
    1eba:	cf 91       	pop	r28
    1ebc:	df 91       	pop	r29
    1ebe:	08 95       	ret

00001ec0 <SEGMENT_DISPLAY>:

SEGMENT_Error_t SEGMENT_DISPLAY(uint8 port_num, uint8 value) {
    1ec0:	df 93       	push	r29
    1ec2:	cf 93       	push	r28
    1ec4:	00 d0       	rcall	.+0      	; 0x1ec6 <SEGMENT_DISPLAY+0x6>
    1ec6:	00 d0       	rcall	.+0      	; 0x1ec8 <SEGMENT_DISPLAY+0x8>
    1ec8:	0f 92       	push	r0
    1eca:	cd b7       	in	r28, 0x3d	; 61
    1ecc:	de b7       	in	r29, 0x3e	; 62
    1ece:	8a 83       	std	Y+2, r24	; 0x02
    1ed0:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t SEGMENT_Driver_Checker = NULL;
    1ed2:	19 82       	std	Y+1, r1	; 0x01

	if((port_num >= NUM_OF_PORTS)) {
    1ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed6:	84 30       	cpi	r24, 0x04	; 4
    1ed8:	18 f0       	brcs	.+6      	; 0x1ee0 <SEGMENT_DISPLAY+0x20>
		SEGMENT_Driver_Checker = SEGMENT_WRONG_PORT_NUMBER;
    1eda:	82 e0       	ldi	r24, 0x02	; 2
    1edc:	89 83       	std	Y+1, r24	; 0x01
    1ede:	24 c1       	rjmp	.+584    	; 0x2128 <SEGMENT_DISPLAY+0x268>
	}
	else if((value < 0 && value > 9)) {
		SEGMENT_Driver_Checker = SEGMENT_WRONG_VALUE;
	}
	else {
		switch(value) {
    1ee0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee2:	28 2f       	mov	r18, r24
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	3d 83       	std	Y+5, r19	; 0x05
    1ee8:	2c 83       	std	Y+4, r18	; 0x04
    1eea:	8c 81       	ldd	r24, Y+4	; 0x04
    1eec:	9d 81       	ldd	r25, Y+5	; 0x05
    1eee:	84 30       	cpi	r24, 0x04	; 4
    1ef0:	91 05       	cpc	r25, r1
    1ef2:	09 f4       	brne	.+2      	; 0x1ef6 <SEGMENT_DISPLAY+0x36>
    1ef4:	9b c0       	rjmp	.+310    	; 0x202c <SEGMENT_DISPLAY+0x16c>
    1ef6:	2c 81       	ldd	r18, Y+4	; 0x04
    1ef8:	3d 81       	ldd	r19, Y+5	; 0x05
    1efa:	25 30       	cpi	r18, 0x05	; 5
    1efc:	31 05       	cpc	r19, r1
    1efe:	ec f4       	brge	.+58     	; 0x1f3a <SEGMENT_DISPLAY+0x7a>
    1f00:	8c 81       	ldd	r24, Y+4	; 0x04
    1f02:	9d 81       	ldd	r25, Y+5	; 0x05
    1f04:	81 30       	cpi	r24, 0x01	; 1
    1f06:	91 05       	cpc	r25, r1
    1f08:	09 f4       	brne	.+2      	; 0x1f0c <SEGMENT_DISPLAY+0x4c>
    1f0a:	51 c0       	rjmp	.+162    	; 0x1fae <SEGMENT_DISPLAY+0xee>
    1f0c:	2c 81       	ldd	r18, Y+4	; 0x04
    1f0e:	3d 81       	ldd	r19, Y+5	; 0x05
    1f10:	22 30       	cpi	r18, 0x02	; 2
    1f12:	31 05       	cpc	r19, r1
    1f14:	2c f4       	brge	.+10     	; 0x1f20 <SEGMENT_DISPLAY+0x60>
    1f16:	8c 81       	ldd	r24, Y+4	; 0x04
    1f18:	9d 81       	ldd	r25, Y+5	; 0x05
    1f1a:	00 97       	sbiw	r24, 0x00	; 0
    1f1c:	99 f1       	breq	.+102    	; 0x1f84 <SEGMENT_DISPLAY+0xc4>
    1f1e:	03 c1       	rjmp	.+518    	; 0x2126 <SEGMENT_DISPLAY+0x266>
    1f20:	2c 81       	ldd	r18, Y+4	; 0x04
    1f22:	3d 81       	ldd	r19, Y+5	; 0x05
    1f24:	22 30       	cpi	r18, 0x02	; 2
    1f26:	31 05       	cpc	r19, r1
    1f28:	09 f4       	brne	.+2      	; 0x1f2c <SEGMENT_DISPLAY+0x6c>
    1f2a:	56 c0       	rjmp	.+172    	; 0x1fd8 <SEGMENT_DISPLAY+0x118>
    1f2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f2e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f30:	83 30       	cpi	r24, 0x03	; 3
    1f32:	91 05       	cpc	r25, r1
    1f34:	09 f4       	brne	.+2      	; 0x1f38 <SEGMENT_DISPLAY+0x78>
    1f36:	65 c0       	rjmp	.+202    	; 0x2002 <SEGMENT_DISPLAY+0x142>
    1f38:	f6 c0       	rjmp	.+492    	; 0x2126 <SEGMENT_DISPLAY+0x266>
    1f3a:	2c 81       	ldd	r18, Y+4	; 0x04
    1f3c:	3d 81       	ldd	r19, Y+5	; 0x05
    1f3e:	27 30       	cpi	r18, 0x07	; 7
    1f40:	31 05       	cpc	r19, r1
    1f42:	09 f4       	brne	.+2      	; 0x1f46 <SEGMENT_DISPLAY+0x86>
    1f44:	b2 c0       	rjmp	.+356    	; 0x20aa <SEGMENT_DISPLAY+0x1ea>
    1f46:	8c 81       	ldd	r24, Y+4	; 0x04
    1f48:	9d 81       	ldd	r25, Y+5	; 0x05
    1f4a:	88 30       	cpi	r24, 0x08	; 8
    1f4c:	91 05       	cpc	r25, r1
    1f4e:	6c f4       	brge	.+26     	; 0x1f6a <SEGMENT_DISPLAY+0xaa>
    1f50:	2c 81       	ldd	r18, Y+4	; 0x04
    1f52:	3d 81       	ldd	r19, Y+5	; 0x05
    1f54:	25 30       	cpi	r18, 0x05	; 5
    1f56:	31 05       	cpc	r19, r1
    1f58:	09 f4       	brne	.+2      	; 0x1f5c <SEGMENT_DISPLAY+0x9c>
    1f5a:	7d c0       	rjmp	.+250    	; 0x2056 <SEGMENT_DISPLAY+0x196>
    1f5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f5e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f60:	86 30       	cpi	r24, 0x06	; 6
    1f62:	91 05       	cpc	r25, r1
    1f64:	09 f4       	brne	.+2      	; 0x1f68 <SEGMENT_DISPLAY+0xa8>
    1f66:	8c c0       	rjmp	.+280    	; 0x2080 <SEGMENT_DISPLAY+0x1c0>
    1f68:	de c0       	rjmp	.+444    	; 0x2126 <SEGMENT_DISPLAY+0x266>
    1f6a:	2c 81       	ldd	r18, Y+4	; 0x04
    1f6c:	3d 81       	ldd	r19, Y+5	; 0x05
    1f6e:	28 30       	cpi	r18, 0x08	; 8
    1f70:	31 05       	cpc	r19, r1
    1f72:	09 f4       	brne	.+2      	; 0x1f76 <SEGMENT_DISPLAY+0xb6>
    1f74:	af c0       	rjmp	.+350    	; 0x20d4 <SEGMENT_DISPLAY+0x214>
    1f76:	8c 81       	ldd	r24, Y+4	; 0x04
    1f78:	9d 81       	ldd	r25, Y+5	; 0x05
    1f7a:	89 30       	cpi	r24, 0x09	; 9
    1f7c:	91 05       	cpc	r25, r1
    1f7e:	09 f4       	brne	.+2      	; 0x1f82 <SEGMENT_DISPLAY+0xc2>
    1f80:	be c0       	rjmp	.+380    	; 0x20fe <SEGMENT_DISPLAY+0x23e>
    1f82:	d1 c0       	rjmp	.+418    	; 0x2126 <SEGMENT_DISPLAY+0x266>
			case 0:
				GPIO_writePin(port_num, PIN_0, LOGIC_LOW);
    1f84:	8a 81       	ldd	r24, Y+2	; 0x02
    1f86:	60 e0       	ldi	r22, 0x00	; 0
    1f88:	40 e0       	ldi	r20, 0x00	; 0
    1f8a:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
    1f8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f90:	61 e0       	ldi	r22, 0x01	; 1
    1f92:	40 e0       	ldi	r20, 0x00	; 0
    1f94:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
    1f98:	8a 81       	ldd	r24, Y+2	; 0x02
    1f9a:	62 e0       	ldi	r22, 0x02	; 2
    1f9c:	40 e0       	ldi	r20, 0x00	; 0
    1f9e:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    1fa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa4:	63 e0       	ldi	r22, 0x03	; 3
    1fa6:	40 e0       	ldi	r20, 0x00	; 0
    1fa8:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
    1fac:	bc c0       	rjmp	.+376    	; 0x2126 <SEGMENT_DISPLAY+0x266>
				break;
			case 1:
				GPIO_writePin(port_num, PIN_0, LOGIC_HIGH);
    1fae:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb0:	60 e0       	ldi	r22, 0x00	; 0
    1fb2:	41 e0       	ldi	r20, 0x01	; 1
    1fb4:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
    1fb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fba:	61 e0       	ldi	r22, 0x01	; 1
    1fbc:	40 e0       	ldi	r20, 0x00	; 0
    1fbe:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
    1fc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc4:	62 e0       	ldi	r22, 0x02	; 2
    1fc6:	40 e0       	ldi	r20, 0x00	; 0
    1fc8:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    1fcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fce:	63 e0       	ldi	r22, 0x03	; 3
    1fd0:	40 e0       	ldi	r20, 0x00	; 0
    1fd2:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
    1fd6:	a7 c0       	rjmp	.+334    	; 0x2126 <SEGMENT_DISPLAY+0x266>
				break;
			case 2:
				GPIO_writePin(port_num, PIN_0, LOGIC_LOW);
    1fd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fda:	60 e0       	ldi	r22, 0x00	; 0
    1fdc:	40 e0       	ldi	r20, 0x00	; 0
    1fde:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_HIGH);
    1fe2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe4:	61 e0       	ldi	r22, 0x01	; 1
    1fe6:	41 e0       	ldi	r20, 0x01	; 1
    1fe8:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
    1fec:	8a 81       	ldd	r24, Y+2	; 0x02
    1fee:	62 e0       	ldi	r22, 0x02	; 2
    1ff0:	40 e0       	ldi	r20, 0x00	; 0
    1ff2:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    1ff6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff8:	63 e0       	ldi	r22, 0x03	; 3
    1ffa:	40 e0       	ldi	r20, 0x00	; 0
    1ffc:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
    2000:	92 c0       	rjmp	.+292    	; 0x2126 <SEGMENT_DISPLAY+0x266>
				break;
			case 3:
				GPIO_writePin(port_num, PIN_0, LOGIC_HIGH);
    2002:	8a 81       	ldd	r24, Y+2	; 0x02
    2004:	60 e0       	ldi	r22, 0x00	; 0
    2006:	41 e0       	ldi	r20, 0x01	; 1
    2008:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_HIGH);
    200c:	8a 81       	ldd	r24, Y+2	; 0x02
    200e:	61 e0       	ldi	r22, 0x01	; 1
    2010:	41 e0       	ldi	r20, 0x01	; 1
    2012:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
    2016:	8a 81       	ldd	r24, Y+2	; 0x02
    2018:	62 e0       	ldi	r22, 0x02	; 2
    201a:	40 e0       	ldi	r20, 0x00	; 0
    201c:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    2020:	8a 81       	ldd	r24, Y+2	; 0x02
    2022:	63 e0       	ldi	r22, 0x03	; 3
    2024:	40 e0       	ldi	r20, 0x00	; 0
    2026:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
    202a:	7d c0       	rjmp	.+250    	; 0x2126 <SEGMENT_DISPLAY+0x266>
				break;
			case 4:
				GPIO_writePin(port_num, PIN_0, LOGIC_LOW);
    202c:	8a 81       	ldd	r24, Y+2	; 0x02
    202e:	60 e0       	ldi	r22, 0x00	; 0
    2030:	40 e0       	ldi	r20, 0x00	; 0
    2032:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
    2036:	8a 81       	ldd	r24, Y+2	; 0x02
    2038:	61 e0       	ldi	r22, 0x01	; 1
    203a:	40 e0       	ldi	r20, 0x00	; 0
    203c:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_HIGH);
    2040:	8a 81       	ldd	r24, Y+2	; 0x02
    2042:	62 e0       	ldi	r22, 0x02	; 2
    2044:	41 e0       	ldi	r20, 0x01	; 1
    2046:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    204a:	8a 81       	ldd	r24, Y+2	; 0x02
    204c:	63 e0       	ldi	r22, 0x03	; 3
    204e:	40 e0       	ldi	r20, 0x00	; 0
    2050:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
    2054:	68 c0       	rjmp	.+208    	; 0x2126 <SEGMENT_DISPLAY+0x266>
				break;
			case 5:
				GPIO_writePin(port_num, PIN_0, LOGIC_HIGH);
    2056:	8a 81       	ldd	r24, Y+2	; 0x02
    2058:	60 e0       	ldi	r22, 0x00	; 0
    205a:	41 e0       	ldi	r20, 0x01	; 1
    205c:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
    2060:	8a 81       	ldd	r24, Y+2	; 0x02
    2062:	61 e0       	ldi	r22, 0x01	; 1
    2064:	40 e0       	ldi	r20, 0x00	; 0
    2066:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_HIGH);
    206a:	8a 81       	ldd	r24, Y+2	; 0x02
    206c:	62 e0       	ldi	r22, 0x02	; 2
    206e:	41 e0       	ldi	r20, 0x01	; 1
    2070:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    2074:	8a 81       	ldd	r24, Y+2	; 0x02
    2076:	63 e0       	ldi	r22, 0x03	; 3
    2078:	40 e0       	ldi	r20, 0x00	; 0
    207a:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
    207e:	53 c0       	rjmp	.+166    	; 0x2126 <SEGMENT_DISPLAY+0x266>
				break;
			case 6:
				GPIO_writePin(port_num, PIN_0, LOGIC_LOW);
    2080:	8a 81       	ldd	r24, Y+2	; 0x02
    2082:	60 e0       	ldi	r22, 0x00	; 0
    2084:	40 e0       	ldi	r20, 0x00	; 0
    2086:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_HIGH);
    208a:	8a 81       	ldd	r24, Y+2	; 0x02
    208c:	61 e0       	ldi	r22, 0x01	; 1
    208e:	41 e0       	ldi	r20, 0x01	; 1
    2090:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_HIGH);
    2094:	8a 81       	ldd	r24, Y+2	; 0x02
    2096:	62 e0       	ldi	r22, 0x02	; 2
    2098:	41 e0       	ldi	r20, 0x01	; 1
    209a:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    209e:	8a 81       	ldd	r24, Y+2	; 0x02
    20a0:	63 e0       	ldi	r22, 0x03	; 3
    20a2:	40 e0       	ldi	r20, 0x00	; 0
    20a4:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
    20a8:	3e c0       	rjmp	.+124    	; 0x2126 <SEGMENT_DISPLAY+0x266>
				break;
			case 7:
				GPIO_writePin(port_num, PIN_0, LOGIC_HIGH);
    20aa:	8a 81       	ldd	r24, Y+2	; 0x02
    20ac:	60 e0       	ldi	r22, 0x00	; 0
    20ae:	41 e0       	ldi	r20, 0x01	; 1
    20b0:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_HIGH);
    20b4:	8a 81       	ldd	r24, Y+2	; 0x02
    20b6:	61 e0       	ldi	r22, 0x01	; 1
    20b8:	41 e0       	ldi	r20, 0x01	; 1
    20ba:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_HIGH);
    20be:	8a 81       	ldd	r24, Y+2	; 0x02
    20c0:	62 e0       	ldi	r22, 0x02	; 2
    20c2:	41 e0       	ldi	r20, 0x01	; 1
    20c4:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    20c8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ca:	63 e0       	ldi	r22, 0x03	; 3
    20cc:	40 e0       	ldi	r20, 0x00	; 0
    20ce:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
    20d2:	29 c0       	rjmp	.+82     	; 0x2126 <SEGMENT_DISPLAY+0x266>
				break;
			case 8:
				GPIO_writePin(port_num, PIN_0, LOGIC_LOW);
    20d4:	8a 81       	ldd	r24, Y+2	; 0x02
    20d6:	60 e0       	ldi	r22, 0x00	; 0
    20d8:	40 e0       	ldi	r20, 0x00	; 0
    20da:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
    20de:	8a 81       	ldd	r24, Y+2	; 0x02
    20e0:	61 e0       	ldi	r22, 0x01	; 1
    20e2:	40 e0       	ldi	r20, 0x00	; 0
    20e4:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
    20e8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ea:	62 e0       	ldi	r22, 0x02	; 2
    20ec:	40 e0       	ldi	r20, 0x00	; 0
    20ee:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_HIGH);
    20f2:	8a 81       	ldd	r24, Y+2	; 0x02
    20f4:	63 e0       	ldi	r22, 0x03	; 3
    20f6:	41 e0       	ldi	r20, 0x01	; 1
    20f8:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
    20fc:	14 c0       	rjmp	.+40     	; 0x2126 <SEGMENT_DISPLAY+0x266>
				break;
			case 9:
				GPIO_writePin(port_num, PIN_0, LOGIC_HIGH);
    20fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2100:	60 e0       	ldi	r22, 0x00	; 0
    2102:	41 e0       	ldi	r20, 0x01	; 1
    2104:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
    2108:	8a 81       	ldd	r24, Y+2	; 0x02
    210a:	61 e0       	ldi	r22, 0x01	; 1
    210c:	40 e0       	ldi	r20, 0x00	; 0
    210e:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
    2112:	8a 81       	ldd	r24, Y+2	; 0x02
    2114:	62 e0       	ldi	r22, 0x02	; 2
    2116:	40 e0       	ldi	r20, 0x00	; 0
    2118:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_HIGH);
    211c:	8a 81       	ldd	r24, Y+2	; 0x02
    211e:	63 e0       	ldi	r22, 0x03	; 3
    2120:	41 e0       	ldi	r20, 0x01	; 1
    2122:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
				break;
		}
		SEGMENT_Driver_Checker = SEGMENT_OK;
    2126:	19 82       	std	Y+1, r1	; 0x01
	}
	return SEGMENT_Driver_Checker;
    2128:	89 81       	ldd	r24, Y+1	; 0x01
}
    212a:	0f 90       	pop	r0
    212c:	0f 90       	pop	r0
    212e:	0f 90       	pop	r0
    2130:	0f 90       	pop	r0
    2132:	0f 90       	pop	r0
    2134:	cf 91       	pop	r28
    2136:	df 91       	pop	r29
    2138:	08 95       	ret

0000213a <LM35_getTemperature>:
#include "avr/io.h" /* To use the IO Ports Registers */
#include <util/delay.h>


// Initializes and enables the ADC Module to start functionality
uint8 LM35_getTemperature(void) {
    213a:	df 93       	push	r29
    213c:	cf 93       	push	r28
    213e:	00 d0       	rcall	.+0      	; 0x2140 <LM35_getTemperature+0x6>
    2140:	cd b7       	in	r28, 0x3d	; 61
    2142:	de b7       	in	r29, 0x3e	; 62
	uint8 temperature = 0;
    2144:	1a 82       	std	Y+2, r1	; 0x02
	uint8 ADC_Value = 0;
    2146:	19 82       	std	Y+1, r1	; 0x01
	ADC_Value = ADC_readChannel(LM35_CH_ID);
    2148:	82 e0       	ldi	r24, 0x02	; 2
    214a:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <ADC_readChannel>
    214e:	89 83       	std	Y+1, r24	; 0x01

	temperature = (uint8) ( ( (uint32)ADC_Value * LM35_MAX_TEMP * ADC_REFERENCE_VOLT_VALUE) / (ADC_MAX_VALUE * LM35_MAX_VOLT) );
    2150:	89 81       	ldd	r24, Y+1	; 0x01
    2152:	88 2f       	mov	r24, r24
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	a0 e0       	ldi	r26, 0x00	; 0
    2158:	b0 e0       	ldi	r27, 0x00	; 0
    215a:	2e ee       	ldi	r18, 0xEE	; 238
    215c:	32 e0       	ldi	r19, 0x02	; 2
    215e:	40 e0       	ldi	r20, 0x00	; 0
    2160:	50 e0       	ldi	r21, 0x00	; 0
    2162:	bc 01       	movw	r22, r24
    2164:	cd 01       	movw	r24, r26
    2166:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <__mulsi3>
    216a:	dc 01       	movw	r26, r24
    216c:	cb 01       	movw	r24, r22
    216e:	bc 01       	movw	r22, r24
    2170:	cd 01       	movw	r24, r26
    2172:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2176:	dc 01       	movw	r26, r24
    2178:	cb 01       	movw	r24, r22
    217a:	bc 01       	movw	r22, r24
    217c:	cd 01       	movw	r24, r26
    217e:	20 e0       	ldi	r18, 0x00	; 0
    2180:	30 ed       	ldi	r19, 0xD0	; 208
    2182:	4f eb       	ldi	r20, 0xBF	; 191
    2184:	54 e4       	ldi	r21, 0x44	; 68
    2186:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    218a:	dc 01       	movw	r26, r24
    218c:	cb 01       	movw	r24, r22
    218e:	bc 01       	movw	r22, r24
    2190:	cd 01       	movw	r24, r26
    2192:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2196:	dc 01       	movw	r26, r24
    2198:	cb 01       	movw	r24, r22
    219a:	8a 83       	std	Y+2, r24	; 0x02

	return temperature;
    219c:	8a 81       	ldd	r24, Y+2	; 0x02

}
    219e:	0f 90       	pop	r0
    21a0:	0f 90       	pop	r0
    21a2:	cf 91       	pop	r28
    21a4:	df 91       	pop	r29
    21a6:	08 95       	ret

000021a8 <LED_Init>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
LED_Error_t LED_Init(uint8 port_num, uint8 pin_num) {
    21a8:	df 93       	push	r29
    21aa:	cf 93       	push	r28
    21ac:	00 d0       	rcall	.+0      	; 0x21ae <LED_Init+0x6>
    21ae:	0f 92       	push	r0
    21b0:	cd b7       	in	r28, 0x3d	; 61
    21b2:	de b7       	in	r29, 0x3e	; 62
    21b4:	8a 83       	std	Y+2, r24	; 0x02
    21b6:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t LED_Driver_Checker = NULL;
    21b8:	19 82       	std	Y+1, r1	; 0x01
	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    21ba:	8b 81       	ldd	r24, Y+3	; 0x03
    21bc:	88 30       	cpi	r24, 0x08	; 8
    21be:	18 f0       	brcs	.+6      	; 0x21c6 <LED_Init+0x1e>
		LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    21c0:	81 e0       	ldi	r24, 0x01	; 1
    21c2:	89 83       	std	Y+1, r24	; 0x01
    21c4:	0c c0       	rjmp	.+24     	; 0x21de <LED_Init+0x36>
	}
	else if((port_num >= NUM_OF_PORTS)) {
    21c6:	8a 81       	ldd	r24, Y+2	; 0x02
    21c8:	84 30       	cpi	r24, 0x04	; 4
    21ca:	18 f0       	brcs	.+6      	; 0x21d2 <LED_Init+0x2a>
		LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    21cc:	82 e0       	ldi	r24, 0x02	; 2
    21ce:	89 83       	std	Y+1, r24	; 0x01
    21d0:	06 c0       	rjmp	.+12     	; 0x21de <LED_Init+0x36>
	}
	else {
		/* Setup the pin direction as required */
		GPIO_setupPinDirection(port_num, pin_num, PIN_OUTPUT);
    21d2:	8a 81       	ldd	r24, Y+2	; 0x02
    21d4:	6b 81       	ldd	r22, Y+3	; 0x03
    21d6:	41 e0       	ldi	r20, 0x01	; 1
    21d8:	0e 94 1e 0a 	call	0x143c	; 0x143c <GPIO_setupPinDirection>
		LED_Driver_Checker = LED_OK;
    21dc:	19 82       	std	Y+1, r1	; 0x01
	}
	return LED_Driver_Checker;
    21de:	89 81       	ldd	r24, Y+1	; 0x01
}
    21e0:	0f 90       	pop	r0
    21e2:	0f 90       	pop	r0
    21e4:	0f 90       	pop	r0
    21e6:	cf 91       	pop	r28
    21e8:	df 91       	pop	r29
    21ea:	08 95       	ret

000021ec <LED_On>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
LED_Error_t LED_On(uint8 port_num, uint8 pin_num) {
    21ec:	df 93       	push	r29
    21ee:	cf 93       	push	r28
    21f0:	00 d0       	rcall	.+0      	; 0x21f2 <LED_On+0x6>
    21f2:	0f 92       	push	r0
    21f4:	cd b7       	in	r28, 0x3d	; 61
    21f6:	de b7       	in	r29, 0x3e	; 62
    21f8:	8a 83       	std	Y+2, r24	; 0x02
    21fa:	6b 83       	std	Y+3, r22	; 0x03

	uint8_t LED_Driver_Checker = NULL;
    21fc:	19 82       	std	Y+1, r1	; 0x01
		if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    21fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2200:	88 30       	cpi	r24, 0x08	; 8
    2202:	18 f0       	brcs	.+6      	; 0x220a <LED_On+0x1e>
			LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    2204:	81 e0       	ldi	r24, 0x01	; 1
    2206:	89 83       	std	Y+1, r24	; 0x01
    2208:	0c c0       	rjmp	.+24     	; 0x2222 <LED_On+0x36>
		}
		else if((port_num >= NUM_OF_PORTS)) {
    220a:	8a 81       	ldd	r24, Y+2	; 0x02
    220c:	84 30       	cpi	r24, 0x04	; 4
    220e:	18 f0       	brcs	.+6      	; 0x2216 <LED_On+0x2a>
			LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    2210:	82 e0       	ldi	r24, 0x02	; 2
    2212:	89 83       	std	Y+1, r24	; 0x01
    2214:	06 c0       	rjmp	.+12     	; 0x2222 <LED_On+0x36>
		}
		else {
			/* Setup the pin direction as required */
			#if (LED_MODE == LED_NEGATIVE_LOGIC)
				GPIO_writePin(port_num, pin_num, LOGIC_LOW);
    2216:	8a 81       	ldd	r24, Y+2	; 0x02
    2218:	6b 81       	ldd	r22, Y+3	; 0x03
    221a:	40 e0       	ldi	r20, 0x00	; 0
    221c:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
			#elif (LED_MODE == LED_POSITIVE_LOGIC)
				GPIO_writePin(port_num, pin_num, LOGIC_HIGH);
			#endif
			LED_Driver_Checker = LED_OK;
    2220:	19 82       	std	Y+1, r1	; 0x01
		}
		return LED_Driver_Checker;
    2222:	89 81       	ldd	r24, Y+1	; 0x01
}
    2224:	0f 90       	pop	r0
    2226:	0f 90       	pop	r0
    2228:	0f 90       	pop	r0
    222a:	cf 91       	pop	r28
    222c:	df 91       	pop	r29
    222e:	08 95       	ret

00002230 <LED_Off>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
LED_Error_t LED_Off(uint8 port_num, uint8 pin_num) {
    2230:	df 93       	push	r29
    2232:	cf 93       	push	r28
    2234:	00 d0       	rcall	.+0      	; 0x2236 <LED_Off+0x6>
    2236:	0f 92       	push	r0
    2238:	cd b7       	in	r28, 0x3d	; 61
    223a:	de b7       	in	r29, 0x3e	; 62
    223c:	8a 83       	std	Y+2, r24	; 0x02
    223e:	6b 83       	std	Y+3, r22	; 0x03

	uint8_t LED_Driver_Checker = NULL;
    2240:	19 82       	std	Y+1, r1	; 0x01
		if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    2242:	8b 81       	ldd	r24, Y+3	; 0x03
    2244:	88 30       	cpi	r24, 0x08	; 8
    2246:	18 f0       	brcs	.+6      	; 0x224e <LED_Off+0x1e>
			LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	89 83       	std	Y+1, r24	; 0x01
    224c:	0c c0       	rjmp	.+24     	; 0x2266 <LED_Off+0x36>
		}
		else if((port_num >= NUM_OF_PORTS)) {
    224e:	8a 81       	ldd	r24, Y+2	; 0x02
    2250:	84 30       	cpi	r24, 0x04	; 4
    2252:	18 f0       	brcs	.+6      	; 0x225a <LED_Off+0x2a>
			LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    2254:	82 e0       	ldi	r24, 0x02	; 2
    2256:	89 83       	std	Y+1, r24	; 0x01
    2258:	06 c0       	rjmp	.+12     	; 0x2266 <LED_Off+0x36>
		}
		else {
			/* Setup the pin direction as required */
			#if (LED_MODE == LED_NEGATIVE_LOGIC)
				GPIO_writePin(port_num, pin_num, LOGIC_HIGH);
    225a:	8a 81       	ldd	r24, Y+2	; 0x02
    225c:	6b 81       	ldd	r22, Y+3	; 0x03
    225e:	41 e0       	ldi	r20, 0x01	; 1
    2260:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
			#elif (LED_MODE == LED_POSITIVE_LOGIC)
				GPIO_writePin(port_num, pin_num, LOGIC_LOW);
			#endif
			LED_Driver_Checker = LED_OK;
    2264:	19 82       	std	Y+1, r1	; 0x01
		}
		return LED_Driver_Checker;
    2266:	89 81       	ldd	r24, Y+1	; 0x01
}
    2268:	0f 90       	pop	r0
    226a:	0f 90       	pop	r0
    226c:	0f 90       	pop	r0
    226e:	cf 91       	pop	r28
    2270:	df 91       	pop	r29
    2272:	08 95       	ret

00002274 <LED_Toggle>:

LED_Error_t LED_Toggle(uint8 port_num, uint8 pin_num) {
    2274:	df 93       	push	r29
    2276:	cf 93       	push	r28
    2278:	00 d0       	rcall	.+0      	; 0x227a <LED_Toggle+0x6>
    227a:	0f 92       	push	r0
    227c:	cd b7       	in	r28, 0x3d	; 61
    227e:	de b7       	in	r29, 0x3e	; 62
    2280:	8a 83       	std	Y+2, r24	; 0x02
    2282:	6b 83       	std	Y+3, r22	; 0x03

	uint8_t LED_Driver_Checker = NULL;
    2284:	19 82       	std	Y+1, r1	; 0x01
		if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    2286:	8b 81       	ldd	r24, Y+3	; 0x03
    2288:	88 30       	cpi	r24, 0x08	; 8
    228a:	18 f0       	brcs	.+6      	; 0x2292 <LED_Toggle+0x1e>
			LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    228c:	81 e0       	ldi	r24, 0x01	; 1
    228e:	89 83       	std	Y+1, r24	; 0x01
    2290:	0b c0       	rjmp	.+22     	; 0x22a8 <LED_Toggle+0x34>
		}
		else if((port_num >= NUM_OF_PORTS)) {
    2292:	8a 81       	ldd	r24, Y+2	; 0x02
    2294:	84 30       	cpi	r24, 0x04	; 4
    2296:	18 f0       	brcs	.+6      	; 0x229e <LED_Toggle+0x2a>
			LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    2298:	82 e0       	ldi	r24, 0x02	; 2
    229a:	89 83       	std	Y+1, r24	; 0x01
    229c:	05 c0       	rjmp	.+10     	; 0x22a8 <LED_Toggle+0x34>
		}
		else {
			/* Setup the pin direction as required */
			GPIO_togglePin(port_num, pin_num);
    229e:	8a 81       	ldd	r24, Y+2	; 0x02
    22a0:	6b 81       	ldd	r22, Y+3	; 0x03
    22a2:	0e 94 16 0c 	call	0x182c	; 0x182c <GPIO_togglePin>
			LED_Driver_Checker = LED_OK;
    22a6:	19 82       	std	Y+1, r1	; 0x01
		}
		return LED_Driver_Checker;
    22a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    22aa:	0f 90       	pop	r0
    22ac:	0f 90       	pop	r0
    22ae:	0f 90       	pop	r0
    22b0:	cf 91       	pop	r28
    22b2:	df 91       	pop	r29
    22b4:	08 95       	ret

000022b6 <LCD_Init>:
#include "avr/io.h" /* To use the IO Ports Registers */
#include <util/delay.h>


// Initializes and enables the LCD Module to start functionality
void LCD_Init(void) {
    22b6:	df 93       	push	r29
    22b8:	cf 93       	push	r28
    22ba:	cd b7       	in	r28, 0x3d	; 61
    22bc:	de b7       	in	r29, 0x3e	; 62
    22be:	2e 97       	sbiw	r28, 0x0e	; 14
    22c0:	0f b6       	in	r0, 0x3f	; 63
    22c2:	f8 94       	cli
    22c4:	de bf       	out	0x3e, r29	; 62
    22c6:	0f be       	out	0x3f, r0	; 63
    22c8:	cd bf       	out	0x3d, r28	; 61
	// Initialize RS Pin
	GPIO_setupPinDirection(LCD_INIT_PORT, LCD_RS, PIN_OUTPUT);
    22ca:	80 e0       	ldi	r24, 0x00	; 0
    22cc:	61 e0       	ldi	r22, 0x01	; 1
    22ce:	41 e0       	ldi	r20, 0x01	; 1
    22d0:	0e 94 1e 0a 	call	0x143c	; 0x143c <GPIO_setupPinDirection>

	// Initialize Enable Pin
	GPIO_setupPinDirection(LCD_INIT_PORT, LCD_ENABLE, PIN_OUTPUT);
    22d4:	80 e0       	ldi	r24, 0x00	; 0
    22d6:	62 e0       	ldi	r22, 0x02	; 2
    22d8:	41 e0       	ldi	r20, 0x01	; 1
    22da:	0e 94 1e 0a 	call	0x143c	; 0x143c <GPIO_setupPinDirection>
    22de:	80 e0       	ldi	r24, 0x00	; 0
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	a0 ea       	ldi	r26, 0xA0	; 160
    22e4:	b1 e4       	ldi	r27, 0x41	; 65
    22e6:	8b 87       	std	Y+11, r24	; 0x0b
    22e8:	9c 87       	std	Y+12, r25	; 0x0c
    22ea:	ad 87       	std	Y+13, r26	; 0x0d
    22ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    22f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    22f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    22f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    22f6:	20 e0       	ldi	r18, 0x00	; 0
    22f8:	30 e0       	ldi	r19, 0x00	; 0
    22fa:	4a e7       	ldi	r20, 0x7A	; 122
    22fc:	53 e4       	ldi	r21, 0x43	; 67
    22fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2302:	dc 01       	movw	r26, r24
    2304:	cb 01       	movw	r24, r22
    2306:	8f 83       	std	Y+7, r24	; 0x07
    2308:	98 87       	std	Y+8, r25	; 0x08
    230a:	a9 87       	std	Y+9, r26	; 0x09
    230c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    230e:	6f 81       	ldd	r22, Y+7	; 0x07
    2310:	78 85       	ldd	r23, Y+8	; 0x08
    2312:	89 85       	ldd	r24, Y+9	; 0x09
    2314:	9a 85       	ldd	r25, Y+10	; 0x0a
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	40 e8       	ldi	r20, 0x80	; 128
    231c:	5f e3       	ldi	r21, 0x3F	; 63
    231e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2322:	88 23       	and	r24, r24
    2324:	2c f4       	brge	.+10     	; 0x2330 <LCD_Init+0x7a>
		__ticks = 1;
    2326:	81 e0       	ldi	r24, 0x01	; 1
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	9e 83       	std	Y+6, r25	; 0x06
    232c:	8d 83       	std	Y+5, r24	; 0x05
    232e:	3f c0       	rjmp	.+126    	; 0x23ae <LCD_Init+0xf8>
	else if (__tmp > 65535)
    2330:	6f 81       	ldd	r22, Y+7	; 0x07
    2332:	78 85       	ldd	r23, Y+8	; 0x08
    2334:	89 85       	ldd	r24, Y+9	; 0x09
    2336:	9a 85       	ldd	r25, Y+10	; 0x0a
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	3f ef       	ldi	r19, 0xFF	; 255
    233c:	4f e7       	ldi	r20, 0x7F	; 127
    233e:	57 e4       	ldi	r21, 0x47	; 71
    2340:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2344:	18 16       	cp	r1, r24
    2346:	4c f5       	brge	.+82     	; 0x239a <LCD_Init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2348:	6b 85       	ldd	r22, Y+11	; 0x0b
    234a:	7c 85       	ldd	r23, Y+12	; 0x0c
    234c:	8d 85       	ldd	r24, Y+13	; 0x0d
    234e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	40 e2       	ldi	r20, 0x20	; 32
    2356:	51 e4       	ldi	r21, 0x41	; 65
    2358:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    235c:	dc 01       	movw	r26, r24
    235e:	cb 01       	movw	r24, r22
    2360:	bc 01       	movw	r22, r24
    2362:	cd 01       	movw	r24, r26
    2364:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2368:	dc 01       	movw	r26, r24
    236a:	cb 01       	movw	r24, r22
    236c:	9e 83       	std	Y+6, r25	; 0x06
    236e:	8d 83       	std	Y+5, r24	; 0x05
    2370:	0f c0       	rjmp	.+30     	; 0x2390 <LCD_Init+0xda>
    2372:	89 e1       	ldi	r24, 0x19	; 25
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	9c 83       	std	Y+4, r25	; 0x04
    2378:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    237a:	8b 81       	ldd	r24, Y+3	; 0x03
    237c:	9c 81       	ldd	r25, Y+4	; 0x04
    237e:	01 97       	sbiw	r24, 0x01	; 1
    2380:	f1 f7       	brne	.-4      	; 0x237e <LCD_Init+0xc8>
    2382:	9c 83       	std	Y+4, r25	; 0x04
    2384:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2386:	8d 81       	ldd	r24, Y+5	; 0x05
    2388:	9e 81       	ldd	r25, Y+6	; 0x06
    238a:	01 97       	sbiw	r24, 0x01	; 1
    238c:	9e 83       	std	Y+6, r25	; 0x06
    238e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2390:	8d 81       	ldd	r24, Y+5	; 0x05
    2392:	9e 81       	ldd	r25, Y+6	; 0x06
    2394:	00 97       	sbiw	r24, 0x00	; 0
    2396:	69 f7       	brne	.-38     	; 0x2372 <LCD_Init+0xbc>
    2398:	14 c0       	rjmp	.+40     	; 0x23c2 <LCD_Init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    239a:	6f 81       	ldd	r22, Y+7	; 0x07
    239c:	78 85       	ldd	r23, Y+8	; 0x08
    239e:	89 85       	ldd	r24, Y+9	; 0x09
    23a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    23a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a6:	dc 01       	movw	r26, r24
    23a8:	cb 01       	movw	r24, r22
    23aa:	9e 83       	std	Y+6, r25	; 0x06
    23ac:	8d 83       	std	Y+5, r24	; 0x05
    23ae:	8d 81       	ldd	r24, Y+5	; 0x05
    23b0:	9e 81       	ldd	r25, Y+6	; 0x06
    23b2:	9a 83       	std	Y+2, r25	; 0x02
    23b4:	89 83       	std	Y+1, r24	; 0x01
    23b6:	89 81       	ldd	r24, Y+1	; 0x01
    23b8:	9a 81       	ldd	r25, Y+2	; 0x02
    23ba:	01 97       	sbiw	r24, 0x01	; 1
    23bc:	f1 f7       	brne	.-4      	; 0x23ba <LCD_Init+0x104>
    23be:	9a 83       	std	Y+2, r25	; 0x02
    23c0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);

	// Initializing Sending Commands
	// Checks which BIT Mode, 4 or 8 line bit
	if (LCD_BIT_MODE == 4) {
		GPIO_setupPinDirection(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 0), PIN_OUTPUT);
    23c2:	80 e0       	ldi	r24, 0x00	; 0
    23c4:	63 e0       	ldi	r22, 0x03	; 3
    23c6:	41 e0       	ldi	r20, 0x01	; 1
    23c8:	0e 94 1e 0a 	call	0x143c	; 0x143c <GPIO_setupPinDirection>
		GPIO_setupPinDirection(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 1), PIN_OUTPUT);
    23cc:	80 e0       	ldi	r24, 0x00	; 0
    23ce:	64 e0       	ldi	r22, 0x04	; 4
    23d0:	41 e0       	ldi	r20, 0x01	; 1
    23d2:	0e 94 1e 0a 	call	0x143c	; 0x143c <GPIO_setupPinDirection>
		GPIO_setupPinDirection(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 2), PIN_OUTPUT);
    23d6:	80 e0       	ldi	r24, 0x00	; 0
    23d8:	65 e0       	ldi	r22, 0x05	; 5
    23da:	41 e0       	ldi	r20, 0x01	; 1
    23dc:	0e 94 1e 0a 	call	0x143c	; 0x143c <GPIO_setupPinDirection>
		GPIO_setupPinDirection(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 3), PIN_OUTPUT);
    23e0:	80 e0       	ldi	r24, 0x00	; 0
    23e2:	66 e0       	ldi	r22, 0x06	; 6
    23e4:	41 e0       	ldi	r20, 0x01	; 1
    23e6:	0e 94 1e 0a 	call	0x143c	; 0x143c <GPIO_setupPinDirection>

		LCD_sendCommand(LCD_TWO_LINE_FOUR_BIT_INIT1);
    23ea:	83 e3       	ldi	r24, 0x33	; 51
    23ec:	0e 94 0d 12 	call	0x241a	; 0x241a <LCD_sendCommand>
		LCD_sendCommand(LCD_TWO_LINE_FOUR_BIT_INIT2);
    23f0:	82 e3       	ldi	r24, 0x32	; 50
    23f2:	0e 94 0d 12 	call	0x241a	; 0x241a <LCD_sendCommand>
		LCD_sendCommand(LCD_TWO_LINE_FOUR_BIT);
    23f6:	88 e2       	ldi	r24, 0x28	; 40
    23f8:	0e 94 0d 12 	call	0x241a	; 0x241a <LCD_sendCommand>

		LCD_sendCommand(LCD_TWO_LINE_EIGHT_BIT);
	}

	// Makes the cursor off
	LCD_sendCommand(LCD_CURSOR_OFF);
    23fc:	8c e0       	ldi	r24, 0x0C	; 12
    23fe:	0e 94 0d 12 	call	0x241a	; 0x241a <LCD_sendCommand>
	// Clears Display
	LCD_sendCommand(LCD_CLEAR_DISPLAY);
    2402:	81 e0       	ldi	r24, 0x01	; 1
    2404:	0e 94 0d 12 	call	0x241a	; 0x241a <LCD_sendCommand>
}
    2408:	2e 96       	adiw	r28, 0x0e	; 14
    240a:	0f b6       	in	r0, 0x3f	; 63
    240c:	f8 94       	cli
    240e:	de bf       	out	0x3e, r29	; 62
    2410:	0f be       	out	0x3f, r0	; 63
    2412:	cd bf       	out	0x3d, r28	; 61
    2414:	cf 91       	pop	r28
    2416:	df 91       	pop	r29
    2418:	08 95       	ret

0000241a <LCD_sendCommand>:


// Sends a command to the LCD
void LCD_sendCommand(uint8 command) {
    241a:	0f 93       	push	r16
    241c:	1f 93       	push	r17
    241e:	df 93       	push	r29
    2420:	cf 93       	push	r28
    2422:	cd b7       	in	r28, 0x3d	; 61
    2424:	de b7       	in	r29, 0x3e	; 62
    2426:	c3 56       	subi	r28, 0x63	; 99
    2428:	d0 40       	sbci	r29, 0x00	; 0
    242a:	0f b6       	in	r0, 0x3f	; 63
    242c:	f8 94       	cli
    242e:	de bf       	out	0x3e, r29	; 62
    2430:	0f be       	out	0x3f, r0	; 63
    2432:	cd bf       	out	0x3d, r28	; 61
    2434:	fe 01       	movw	r30, r28
    2436:	ed 59       	subi	r30, 0x9D	; 157
    2438:	ff 4f       	sbci	r31, 0xFF	; 255
    243a:	80 83       	st	Z, r24
	// Set RS Pin to '0'
	GPIO_writePin(LCD_INIT_PORT, LCD_RS, LOGIC_LOW);
    243c:	80 e0       	ldi	r24, 0x00	; 0
    243e:	61 e0       	ldi	r22, 0x01	; 1
    2440:	40 e0       	ldi	r20, 0x00	; 0
    2442:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
    2446:	fe 01       	movw	r30, r28
    2448:	e1 5a       	subi	r30, 0xA1	; 161
    244a:	ff 4f       	sbci	r31, 0xFF	; 255
    244c:	80 e0       	ldi	r24, 0x00	; 0
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	a0 e8       	ldi	r26, 0x80	; 128
    2452:	bf e3       	ldi	r27, 0x3F	; 63
    2454:	80 83       	st	Z, r24
    2456:	91 83       	std	Z+1, r25	; 0x01
    2458:	a2 83       	std	Z+2, r26	; 0x02
    245a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    245c:	8e 01       	movw	r16, r28
    245e:	05 5a       	subi	r16, 0xA5	; 165
    2460:	1f 4f       	sbci	r17, 0xFF	; 255
    2462:	fe 01       	movw	r30, r28
    2464:	e1 5a       	subi	r30, 0xA1	; 161
    2466:	ff 4f       	sbci	r31, 0xFF	; 255
    2468:	60 81       	ld	r22, Z
    246a:	71 81       	ldd	r23, Z+1	; 0x01
    246c:	82 81       	ldd	r24, Z+2	; 0x02
    246e:	93 81       	ldd	r25, Z+3	; 0x03
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	4a e7       	ldi	r20, 0x7A	; 122
    2476:	53 e4       	ldi	r21, 0x43	; 67
    2478:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    247c:	dc 01       	movw	r26, r24
    247e:	cb 01       	movw	r24, r22
    2480:	f8 01       	movw	r30, r16
    2482:	80 83       	st	Z, r24
    2484:	91 83       	std	Z+1, r25	; 0x01
    2486:	a2 83       	std	Z+2, r26	; 0x02
    2488:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    248a:	fe 01       	movw	r30, r28
    248c:	e5 5a       	subi	r30, 0xA5	; 165
    248e:	ff 4f       	sbci	r31, 0xFF	; 255
    2490:	60 81       	ld	r22, Z
    2492:	71 81       	ldd	r23, Z+1	; 0x01
    2494:	82 81       	ldd	r24, Z+2	; 0x02
    2496:	93 81       	ldd	r25, Z+3	; 0x03
    2498:	20 e0       	ldi	r18, 0x00	; 0
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	40 e8       	ldi	r20, 0x80	; 128
    249e:	5f e3       	ldi	r21, 0x3F	; 63
    24a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24a4:	88 23       	and	r24, r24
    24a6:	44 f4       	brge	.+16     	; 0x24b8 <LCD_sendCommand+0x9e>
		__ticks = 1;
    24a8:	fe 01       	movw	r30, r28
    24aa:	e7 5a       	subi	r30, 0xA7	; 167
    24ac:	ff 4f       	sbci	r31, 0xFF	; 255
    24ae:	81 e0       	ldi	r24, 0x01	; 1
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	91 83       	std	Z+1, r25	; 0x01
    24b4:	80 83       	st	Z, r24
    24b6:	64 c0       	rjmp	.+200    	; 0x2580 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    24b8:	fe 01       	movw	r30, r28
    24ba:	e5 5a       	subi	r30, 0xA5	; 165
    24bc:	ff 4f       	sbci	r31, 0xFF	; 255
    24be:	60 81       	ld	r22, Z
    24c0:	71 81       	ldd	r23, Z+1	; 0x01
    24c2:	82 81       	ldd	r24, Z+2	; 0x02
    24c4:	93 81       	ldd	r25, Z+3	; 0x03
    24c6:	20 e0       	ldi	r18, 0x00	; 0
    24c8:	3f ef       	ldi	r19, 0xFF	; 255
    24ca:	4f e7       	ldi	r20, 0x7F	; 127
    24cc:	57 e4       	ldi	r21, 0x47	; 71
    24ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24d2:	18 16       	cp	r1, r24
    24d4:	0c f0       	brlt	.+2      	; 0x24d8 <LCD_sendCommand+0xbe>
    24d6:	43 c0       	rjmp	.+134    	; 0x255e <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24d8:	fe 01       	movw	r30, r28
    24da:	e1 5a       	subi	r30, 0xA1	; 161
    24dc:	ff 4f       	sbci	r31, 0xFF	; 255
    24de:	60 81       	ld	r22, Z
    24e0:	71 81       	ldd	r23, Z+1	; 0x01
    24e2:	82 81       	ldd	r24, Z+2	; 0x02
    24e4:	93 81       	ldd	r25, Z+3	; 0x03
    24e6:	20 e0       	ldi	r18, 0x00	; 0
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	40 e2       	ldi	r20, 0x20	; 32
    24ec:	51 e4       	ldi	r21, 0x41	; 65
    24ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f2:	dc 01       	movw	r26, r24
    24f4:	cb 01       	movw	r24, r22
    24f6:	8e 01       	movw	r16, r28
    24f8:	07 5a       	subi	r16, 0xA7	; 167
    24fa:	1f 4f       	sbci	r17, 0xFF	; 255
    24fc:	bc 01       	movw	r22, r24
    24fe:	cd 01       	movw	r24, r26
    2500:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2504:	dc 01       	movw	r26, r24
    2506:	cb 01       	movw	r24, r22
    2508:	f8 01       	movw	r30, r16
    250a:	91 83       	std	Z+1, r25	; 0x01
    250c:	80 83       	st	Z, r24
    250e:	1f c0       	rjmp	.+62     	; 0x254e <LCD_sendCommand+0x134>
    2510:	fe 01       	movw	r30, r28
    2512:	e9 5a       	subi	r30, 0xA9	; 169
    2514:	ff 4f       	sbci	r31, 0xFF	; 255
    2516:	89 e1       	ldi	r24, 0x19	; 25
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	91 83       	std	Z+1, r25	; 0x01
    251c:	80 83       	st	Z, r24
    251e:	fe 01       	movw	r30, r28
    2520:	e9 5a       	subi	r30, 0xA9	; 169
    2522:	ff 4f       	sbci	r31, 0xFF	; 255
    2524:	80 81       	ld	r24, Z
    2526:	91 81       	ldd	r25, Z+1	; 0x01
    2528:	01 97       	sbiw	r24, 0x01	; 1
    252a:	f1 f7       	brne	.-4      	; 0x2528 <LCD_sendCommand+0x10e>
    252c:	fe 01       	movw	r30, r28
    252e:	e9 5a       	subi	r30, 0xA9	; 169
    2530:	ff 4f       	sbci	r31, 0xFF	; 255
    2532:	91 83       	std	Z+1, r25	; 0x01
    2534:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2536:	de 01       	movw	r26, r28
    2538:	a7 5a       	subi	r26, 0xA7	; 167
    253a:	bf 4f       	sbci	r27, 0xFF	; 255
    253c:	fe 01       	movw	r30, r28
    253e:	e7 5a       	subi	r30, 0xA7	; 167
    2540:	ff 4f       	sbci	r31, 0xFF	; 255
    2542:	80 81       	ld	r24, Z
    2544:	91 81       	ldd	r25, Z+1	; 0x01
    2546:	01 97       	sbiw	r24, 0x01	; 1
    2548:	11 96       	adiw	r26, 0x01	; 1
    254a:	9c 93       	st	X, r25
    254c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    254e:	fe 01       	movw	r30, r28
    2550:	e7 5a       	subi	r30, 0xA7	; 167
    2552:	ff 4f       	sbci	r31, 0xFF	; 255
    2554:	80 81       	ld	r24, Z
    2556:	91 81       	ldd	r25, Z+1	; 0x01
    2558:	00 97       	sbiw	r24, 0x00	; 0
    255a:	d1 f6       	brne	.-76     	; 0x2510 <LCD_sendCommand+0xf6>
    255c:	27 c0       	rjmp	.+78     	; 0x25ac <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    255e:	8e 01       	movw	r16, r28
    2560:	07 5a       	subi	r16, 0xA7	; 167
    2562:	1f 4f       	sbci	r17, 0xFF	; 255
    2564:	fe 01       	movw	r30, r28
    2566:	e5 5a       	subi	r30, 0xA5	; 165
    2568:	ff 4f       	sbci	r31, 0xFF	; 255
    256a:	60 81       	ld	r22, Z
    256c:	71 81       	ldd	r23, Z+1	; 0x01
    256e:	82 81       	ldd	r24, Z+2	; 0x02
    2570:	93 81       	ldd	r25, Z+3	; 0x03
    2572:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2576:	dc 01       	movw	r26, r24
    2578:	cb 01       	movw	r24, r22
    257a:	f8 01       	movw	r30, r16
    257c:	91 83       	std	Z+1, r25	; 0x01
    257e:	80 83       	st	Z, r24
    2580:	de 01       	movw	r26, r28
    2582:	ab 5a       	subi	r26, 0xAB	; 171
    2584:	bf 4f       	sbci	r27, 0xFF	; 255
    2586:	fe 01       	movw	r30, r28
    2588:	e7 5a       	subi	r30, 0xA7	; 167
    258a:	ff 4f       	sbci	r31, 0xFF	; 255
    258c:	80 81       	ld	r24, Z
    258e:	91 81       	ldd	r25, Z+1	; 0x01
    2590:	8d 93       	st	X+, r24
    2592:	9c 93       	st	X, r25
    2594:	fe 01       	movw	r30, r28
    2596:	eb 5a       	subi	r30, 0xAB	; 171
    2598:	ff 4f       	sbci	r31, 0xFF	; 255
    259a:	80 81       	ld	r24, Z
    259c:	91 81       	ldd	r25, Z+1	; 0x01
    259e:	01 97       	sbiw	r24, 0x01	; 1
    25a0:	f1 f7       	brne	.-4      	; 0x259e <LCD_sendCommand+0x184>
    25a2:	fe 01       	movw	r30, r28
    25a4:	eb 5a       	subi	r30, 0xAB	; 171
    25a6:	ff 4f       	sbci	r31, 0xFF	; 255
    25a8:	91 83       	std	Z+1, r25	; 0x01
    25aa:	80 83       	st	Z, r24
	_delay_ms(1);

	// Set Enable Pin to '1'
	GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
    25ac:	80 e0       	ldi	r24, 0x00	; 0
    25ae:	62 e0       	ldi	r22, 0x02	; 2
    25b0:	41 e0       	ldi	r20, 0x01	; 1
    25b2:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
    25b6:	fe 01       	movw	r30, r28
    25b8:	ef 5a       	subi	r30, 0xAF	; 175
    25ba:	ff 4f       	sbci	r31, 0xFF	; 255
    25bc:	80 e0       	ldi	r24, 0x00	; 0
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	a0 e8       	ldi	r26, 0x80	; 128
    25c2:	bf e3       	ldi	r27, 0x3F	; 63
    25c4:	80 83       	st	Z, r24
    25c6:	91 83       	std	Z+1, r25	; 0x01
    25c8:	a2 83       	std	Z+2, r26	; 0x02
    25ca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25cc:	8e 01       	movw	r16, r28
    25ce:	03 5b       	subi	r16, 0xB3	; 179
    25d0:	1f 4f       	sbci	r17, 0xFF	; 255
    25d2:	fe 01       	movw	r30, r28
    25d4:	ef 5a       	subi	r30, 0xAF	; 175
    25d6:	ff 4f       	sbci	r31, 0xFF	; 255
    25d8:	60 81       	ld	r22, Z
    25da:	71 81       	ldd	r23, Z+1	; 0x01
    25dc:	82 81       	ldd	r24, Z+2	; 0x02
    25de:	93 81       	ldd	r25, Z+3	; 0x03
    25e0:	20 e0       	ldi	r18, 0x00	; 0
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	4a e7       	ldi	r20, 0x7A	; 122
    25e6:	53 e4       	ldi	r21, 0x43	; 67
    25e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ec:	dc 01       	movw	r26, r24
    25ee:	cb 01       	movw	r24, r22
    25f0:	f8 01       	movw	r30, r16
    25f2:	80 83       	st	Z, r24
    25f4:	91 83       	std	Z+1, r25	; 0x01
    25f6:	a2 83       	std	Z+2, r26	; 0x02
    25f8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25fa:	fe 01       	movw	r30, r28
    25fc:	e3 5b       	subi	r30, 0xB3	; 179
    25fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2600:	60 81       	ld	r22, Z
    2602:	71 81       	ldd	r23, Z+1	; 0x01
    2604:	82 81       	ldd	r24, Z+2	; 0x02
    2606:	93 81       	ldd	r25, Z+3	; 0x03
    2608:	20 e0       	ldi	r18, 0x00	; 0
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	40 e8       	ldi	r20, 0x80	; 128
    260e:	5f e3       	ldi	r21, 0x3F	; 63
    2610:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2614:	88 23       	and	r24, r24
    2616:	44 f4       	brge	.+16     	; 0x2628 <LCD_sendCommand+0x20e>
		__ticks = 1;
    2618:	fe 01       	movw	r30, r28
    261a:	e5 5b       	subi	r30, 0xB5	; 181
    261c:	ff 4f       	sbci	r31, 0xFF	; 255
    261e:	81 e0       	ldi	r24, 0x01	; 1
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	91 83       	std	Z+1, r25	; 0x01
    2624:	80 83       	st	Z, r24
    2626:	64 c0       	rjmp	.+200    	; 0x26f0 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    2628:	fe 01       	movw	r30, r28
    262a:	e3 5b       	subi	r30, 0xB3	; 179
    262c:	ff 4f       	sbci	r31, 0xFF	; 255
    262e:	60 81       	ld	r22, Z
    2630:	71 81       	ldd	r23, Z+1	; 0x01
    2632:	82 81       	ldd	r24, Z+2	; 0x02
    2634:	93 81       	ldd	r25, Z+3	; 0x03
    2636:	20 e0       	ldi	r18, 0x00	; 0
    2638:	3f ef       	ldi	r19, 0xFF	; 255
    263a:	4f e7       	ldi	r20, 0x7F	; 127
    263c:	57 e4       	ldi	r21, 0x47	; 71
    263e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2642:	18 16       	cp	r1, r24
    2644:	0c f0       	brlt	.+2      	; 0x2648 <LCD_sendCommand+0x22e>
    2646:	43 c0       	rjmp	.+134    	; 0x26ce <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2648:	fe 01       	movw	r30, r28
    264a:	ef 5a       	subi	r30, 0xAF	; 175
    264c:	ff 4f       	sbci	r31, 0xFF	; 255
    264e:	60 81       	ld	r22, Z
    2650:	71 81       	ldd	r23, Z+1	; 0x01
    2652:	82 81       	ldd	r24, Z+2	; 0x02
    2654:	93 81       	ldd	r25, Z+3	; 0x03
    2656:	20 e0       	ldi	r18, 0x00	; 0
    2658:	30 e0       	ldi	r19, 0x00	; 0
    265a:	40 e2       	ldi	r20, 0x20	; 32
    265c:	51 e4       	ldi	r21, 0x41	; 65
    265e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2662:	dc 01       	movw	r26, r24
    2664:	cb 01       	movw	r24, r22
    2666:	8e 01       	movw	r16, r28
    2668:	05 5b       	subi	r16, 0xB5	; 181
    266a:	1f 4f       	sbci	r17, 0xFF	; 255
    266c:	bc 01       	movw	r22, r24
    266e:	cd 01       	movw	r24, r26
    2670:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2674:	dc 01       	movw	r26, r24
    2676:	cb 01       	movw	r24, r22
    2678:	f8 01       	movw	r30, r16
    267a:	91 83       	std	Z+1, r25	; 0x01
    267c:	80 83       	st	Z, r24
    267e:	1f c0       	rjmp	.+62     	; 0x26be <LCD_sendCommand+0x2a4>
    2680:	fe 01       	movw	r30, r28
    2682:	e7 5b       	subi	r30, 0xB7	; 183
    2684:	ff 4f       	sbci	r31, 0xFF	; 255
    2686:	89 e1       	ldi	r24, 0x19	; 25
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	91 83       	std	Z+1, r25	; 0x01
    268c:	80 83       	st	Z, r24
    268e:	fe 01       	movw	r30, r28
    2690:	e7 5b       	subi	r30, 0xB7	; 183
    2692:	ff 4f       	sbci	r31, 0xFF	; 255
    2694:	80 81       	ld	r24, Z
    2696:	91 81       	ldd	r25, Z+1	; 0x01
    2698:	01 97       	sbiw	r24, 0x01	; 1
    269a:	f1 f7       	brne	.-4      	; 0x2698 <LCD_sendCommand+0x27e>
    269c:	fe 01       	movw	r30, r28
    269e:	e7 5b       	subi	r30, 0xB7	; 183
    26a0:	ff 4f       	sbci	r31, 0xFF	; 255
    26a2:	91 83       	std	Z+1, r25	; 0x01
    26a4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26a6:	de 01       	movw	r26, r28
    26a8:	a5 5b       	subi	r26, 0xB5	; 181
    26aa:	bf 4f       	sbci	r27, 0xFF	; 255
    26ac:	fe 01       	movw	r30, r28
    26ae:	e5 5b       	subi	r30, 0xB5	; 181
    26b0:	ff 4f       	sbci	r31, 0xFF	; 255
    26b2:	80 81       	ld	r24, Z
    26b4:	91 81       	ldd	r25, Z+1	; 0x01
    26b6:	01 97       	sbiw	r24, 0x01	; 1
    26b8:	11 96       	adiw	r26, 0x01	; 1
    26ba:	9c 93       	st	X, r25
    26bc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26be:	fe 01       	movw	r30, r28
    26c0:	e5 5b       	subi	r30, 0xB5	; 181
    26c2:	ff 4f       	sbci	r31, 0xFF	; 255
    26c4:	80 81       	ld	r24, Z
    26c6:	91 81       	ldd	r25, Z+1	; 0x01
    26c8:	00 97       	sbiw	r24, 0x00	; 0
    26ca:	d1 f6       	brne	.-76     	; 0x2680 <LCD_sendCommand+0x266>
    26cc:	27 c0       	rjmp	.+78     	; 0x271c <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ce:	8e 01       	movw	r16, r28
    26d0:	05 5b       	subi	r16, 0xB5	; 181
    26d2:	1f 4f       	sbci	r17, 0xFF	; 255
    26d4:	fe 01       	movw	r30, r28
    26d6:	e3 5b       	subi	r30, 0xB3	; 179
    26d8:	ff 4f       	sbci	r31, 0xFF	; 255
    26da:	60 81       	ld	r22, Z
    26dc:	71 81       	ldd	r23, Z+1	; 0x01
    26de:	82 81       	ldd	r24, Z+2	; 0x02
    26e0:	93 81       	ldd	r25, Z+3	; 0x03
    26e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e6:	dc 01       	movw	r26, r24
    26e8:	cb 01       	movw	r24, r22
    26ea:	f8 01       	movw	r30, r16
    26ec:	91 83       	std	Z+1, r25	; 0x01
    26ee:	80 83       	st	Z, r24
    26f0:	de 01       	movw	r26, r28
    26f2:	a9 5b       	subi	r26, 0xB9	; 185
    26f4:	bf 4f       	sbci	r27, 0xFF	; 255
    26f6:	fe 01       	movw	r30, r28
    26f8:	e5 5b       	subi	r30, 0xB5	; 181
    26fa:	ff 4f       	sbci	r31, 0xFF	; 255
    26fc:	80 81       	ld	r24, Z
    26fe:	91 81       	ldd	r25, Z+1	; 0x01
    2700:	8d 93       	st	X+, r24
    2702:	9c 93       	st	X, r25
    2704:	fe 01       	movw	r30, r28
    2706:	e9 5b       	subi	r30, 0xB9	; 185
    2708:	ff 4f       	sbci	r31, 0xFF	; 255
    270a:	80 81       	ld	r24, Z
    270c:	91 81       	ldd	r25, Z+1	; 0x01
    270e:	01 97       	sbiw	r24, 0x01	; 1
    2710:	f1 f7       	brne	.-4      	; 0x270e <LCD_sendCommand+0x2f4>
    2712:	fe 01       	movw	r30, r28
    2714:	e9 5b       	subi	r30, 0xB9	; 185
    2716:	ff 4f       	sbci	r31, 0xFF	; 255
    2718:	91 83       	std	Z+1, r25	; 0x01
    271a:	80 83       	st	Z, r24
	_delay_ms(1);

	// Inserts the command in the assigned PORT to be sent to the LCD
	// uint8 BIT_MODE;
	if (LCD_BIT_MODE == 4) {
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 0), GET_BIT( command, 4 ));
    271c:	fe 01       	movw	r30, r28
    271e:	ed 59       	subi	r30, 0x9D	; 157
    2720:	ff 4f       	sbci	r31, 0xFF	; 255
    2722:	80 81       	ld	r24, Z
    2724:	82 95       	swap	r24
    2726:	8f 70       	andi	r24, 0x0F	; 15
    2728:	98 2f       	mov	r25, r24
    272a:	91 70       	andi	r25, 0x01	; 1
    272c:	80 e0       	ldi	r24, 0x00	; 0
    272e:	63 e0       	ldi	r22, 0x03	; 3
    2730:	49 2f       	mov	r20, r25
    2732:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 1), GET_BIT( command, 5 ));
    2736:	fe 01       	movw	r30, r28
    2738:	ed 59       	subi	r30, 0x9D	; 157
    273a:	ff 4f       	sbci	r31, 0xFF	; 255
    273c:	80 81       	ld	r24, Z
    273e:	82 95       	swap	r24
    2740:	86 95       	lsr	r24
    2742:	87 70       	andi	r24, 0x07	; 7
    2744:	98 2f       	mov	r25, r24
    2746:	91 70       	andi	r25, 0x01	; 1
    2748:	80 e0       	ldi	r24, 0x00	; 0
    274a:	64 e0       	ldi	r22, 0x04	; 4
    274c:	49 2f       	mov	r20, r25
    274e:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 2), GET_BIT( command, 6 ));
    2752:	fe 01       	movw	r30, r28
    2754:	ed 59       	subi	r30, 0x9D	; 157
    2756:	ff 4f       	sbci	r31, 0xFF	; 255
    2758:	80 81       	ld	r24, Z
    275a:	82 95       	swap	r24
    275c:	86 95       	lsr	r24
    275e:	86 95       	lsr	r24
    2760:	83 70       	andi	r24, 0x03	; 3
    2762:	98 2f       	mov	r25, r24
    2764:	91 70       	andi	r25, 0x01	; 1
    2766:	80 e0       	ldi	r24, 0x00	; 0
    2768:	65 e0       	ldi	r22, 0x05	; 5
    276a:	49 2f       	mov	r20, r25
    276c:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 3), GET_BIT( command, 7 ));
    2770:	fe 01       	movw	r30, r28
    2772:	ed 59       	subi	r30, 0x9D	; 157
    2774:	ff 4f       	sbci	r31, 0xFF	; 255
    2776:	80 81       	ld	r24, Z
    2778:	98 2f       	mov	r25, r24
    277a:	99 1f       	adc	r25, r25
    277c:	99 27       	eor	r25, r25
    277e:	99 1f       	adc	r25, r25
    2780:	80 e0       	ldi	r24, 0x00	; 0
    2782:	66 e0       	ldi	r22, 0x06	; 6
    2784:	49 2f       	mov	r20, r25
    2786:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
    278a:	fe 01       	movw	r30, r28
    278c:	ed 5b       	subi	r30, 0xBD	; 189
    278e:	ff 4f       	sbci	r31, 0xFF	; 255
    2790:	80 e0       	ldi	r24, 0x00	; 0
    2792:	90 e0       	ldi	r25, 0x00	; 0
    2794:	a0 e8       	ldi	r26, 0x80	; 128
    2796:	bf e3       	ldi	r27, 0x3F	; 63
    2798:	80 83       	st	Z, r24
    279a:	91 83       	std	Z+1, r25	; 0x01
    279c:	a2 83       	std	Z+2, r26	; 0x02
    279e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27a0:	8e 01       	movw	r16, r28
    27a2:	01 5c       	subi	r16, 0xC1	; 193
    27a4:	1f 4f       	sbci	r17, 0xFF	; 255
    27a6:	fe 01       	movw	r30, r28
    27a8:	ed 5b       	subi	r30, 0xBD	; 189
    27aa:	ff 4f       	sbci	r31, 0xFF	; 255
    27ac:	60 81       	ld	r22, Z
    27ae:	71 81       	ldd	r23, Z+1	; 0x01
    27b0:	82 81       	ldd	r24, Z+2	; 0x02
    27b2:	93 81       	ldd	r25, Z+3	; 0x03
    27b4:	20 e0       	ldi	r18, 0x00	; 0
    27b6:	30 e0       	ldi	r19, 0x00	; 0
    27b8:	4a e7       	ldi	r20, 0x7A	; 122
    27ba:	53 e4       	ldi	r21, 0x43	; 67
    27bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c0:	dc 01       	movw	r26, r24
    27c2:	cb 01       	movw	r24, r22
    27c4:	f8 01       	movw	r30, r16
    27c6:	80 83       	st	Z, r24
    27c8:	91 83       	std	Z+1, r25	; 0x01
    27ca:	a2 83       	std	Z+2, r26	; 0x02
    27cc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27ce:	fe 01       	movw	r30, r28
    27d0:	ff 96       	adiw	r30, 0x3f	; 63
    27d2:	60 81       	ld	r22, Z
    27d4:	71 81       	ldd	r23, Z+1	; 0x01
    27d6:	82 81       	ldd	r24, Z+2	; 0x02
    27d8:	93 81       	ldd	r25, Z+3	; 0x03
    27da:	20 e0       	ldi	r18, 0x00	; 0
    27dc:	30 e0       	ldi	r19, 0x00	; 0
    27de:	40 e8       	ldi	r20, 0x80	; 128
    27e0:	5f e3       	ldi	r21, 0x3F	; 63
    27e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27e6:	88 23       	and	r24, r24
    27e8:	2c f4       	brge	.+10     	; 0x27f4 <LCD_sendCommand+0x3da>
		__ticks = 1;
    27ea:	81 e0       	ldi	r24, 0x01	; 1
    27ec:	90 e0       	ldi	r25, 0x00	; 0
    27ee:	9e af       	std	Y+62, r25	; 0x3e
    27f0:	8d af       	std	Y+61, r24	; 0x3d
    27f2:	46 c0       	rjmp	.+140    	; 0x2880 <LCD_sendCommand+0x466>
	else if (__tmp > 65535)
    27f4:	fe 01       	movw	r30, r28
    27f6:	ff 96       	adiw	r30, 0x3f	; 63
    27f8:	60 81       	ld	r22, Z
    27fa:	71 81       	ldd	r23, Z+1	; 0x01
    27fc:	82 81       	ldd	r24, Z+2	; 0x02
    27fe:	93 81       	ldd	r25, Z+3	; 0x03
    2800:	20 e0       	ldi	r18, 0x00	; 0
    2802:	3f ef       	ldi	r19, 0xFF	; 255
    2804:	4f e7       	ldi	r20, 0x7F	; 127
    2806:	57 e4       	ldi	r21, 0x47	; 71
    2808:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    280c:	18 16       	cp	r1, r24
    280e:	64 f5       	brge	.+88     	; 0x2868 <LCD_sendCommand+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2810:	fe 01       	movw	r30, r28
    2812:	ed 5b       	subi	r30, 0xBD	; 189
    2814:	ff 4f       	sbci	r31, 0xFF	; 255
    2816:	60 81       	ld	r22, Z
    2818:	71 81       	ldd	r23, Z+1	; 0x01
    281a:	82 81       	ldd	r24, Z+2	; 0x02
    281c:	93 81       	ldd	r25, Z+3	; 0x03
    281e:	20 e0       	ldi	r18, 0x00	; 0
    2820:	30 e0       	ldi	r19, 0x00	; 0
    2822:	40 e2       	ldi	r20, 0x20	; 32
    2824:	51 e4       	ldi	r21, 0x41	; 65
    2826:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    282a:	dc 01       	movw	r26, r24
    282c:	cb 01       	movw	r24, r22
    282e:	bc 01       	movw	r22, r24
    2830:	cd 01       	movw	r24, r26
    2832:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2836:	dc 01       	movw	r26, r24
    2838:	cb 01       	movw	r24, r22
    283a:	9e af       	std	Y+62, r25	; 0x3e
    283c:	8d af       	std	Y+61, r24	; 0x3d
    283e:	0f c0       	rjmp	.+30     	; 0x285e <LCD_sendCommand+0x444>
    2840:	89 e1       	ldi	r24, 0x19	; 25
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	9c af       	std	Y+60, r25	; 0x3c
    2846:	8b af       	std	Y+59, r24	; 0x3b
    2848:	8b ad       	ldd	r24, Y+59	; 0x3b
    284a:	9c ad       	ldd	r25, Y+60	; 0x3c
    284c:	01 97       	sbiw	r24, 0x01	; 1
    284e:	f1 f7       	brne	.-4      	; 0x284c <LCD_sendCommand+0x432>
    2850:	9c af       	std	Y+60, r25	; 0x3c
    2852:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2854:	8d ad       	ldd	r24, Y+61	; 0x3d
    2856:	9e ad       	ldd	r25, Y+62	; 0x3e
    2858:	01 97       	sbiw	r24, 0x01	; 1
    285a:	9e af       	std	Y+62, r25	; 0x3e
    285c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    285e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2860:	9e ad       	ldd	r25, Y+62	; 0x3e
    2862:	00 97       	sbiw	r24, 0x00	; 0
    2864:	69 f7       	brne	.-38     	; 0x2840 <LCD_sendCommand+0x426>
    2866:	16 c0       	rjmp	.+44     	; 0x2894 <LCD_sendCommand+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2868:	fe 01       	movw	r30, r28
    286a:	ff 96       	adiw	r30, 0x3f	; 63
    286c:	60 81       	ld	r22, Z
    286e:	71 81       	ldd	r23, Z+1	; 0x01
    2870:	82 81       	ldd	r24, Z+2	; 0x02
    2872:	93 81       	ldd	r25, Z+3	; 0x03
    2874:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2878:	dc 01       	movw	r26, r24
    287a:	cb 01       	movw	r24, r22
    287c:	9e af       	std	Y+62, r25	; 0x3e
    287e:	8d af       	std	Y+61, r24	; 0x3d
    2880:	8d ad       	ldd	r24, Y+61	; 0x3d
    2882:	9e ad       	ldd	r25, Y+62	; 0x3e
    2884:	9a af       	std	Y+58, r25	; 0x3a
    2886:	89 af       	std	Y+57, r24	; 0x39
    2888:	89 ad       	ldd	r24, Y+57	; 0x39
    288a:	9a ad       	ldd	r25, Y+58	; 0x3a
    288c:	01 97       	sbiw	r24, 0x01	; 1
    288e:	f1 f7       	brne	.-4      	; 0x288c <LCD_sendCommand+0x472>
    2890:	9a af       	std	Y+58, r25	; 0x3a
    2892:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(1);

		// Clear Enable Pin to '0'
		GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
    2894:	80 e0       	ldi	r24, 0x00	; 0
    2896:	62 e0       	ldi	r22, 0x02	; 2
    2898:	40 e0       	ldi	r20, 0x00	; 0
    289a:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
    289e:	80 e0       	ldi	r24, 0x00	; 0
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	a0 e8       	ldi	r26, 0x80	; 128
    28a4:	bf e3       	ldi	r27, 0x3F	; 63
    28a6:	8d ab       	std	Y+53, r24	; 0x35
    28a8:	9e ab       	std	Y+54, r25	; 0x36
    28aa:	af ab       	std	Y+55, r26	; 0x37
    28ac:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28ae:	6d a9       	ldd	r22, Y+53	; 0x35
    28b0:	7e a9       	ldd	r23, Y+54	; 0x36
    28b2:	8f a9       	ldd	r24, Y+55	; 0x37
    28b4:	98 ad       	ldd	r25, Y+56	; 0x38
    28b6:	20 e0       	ldi	r18, 0x00	; 0
    28b8:	30 e0       	ldi	r19, 0x00	; 0
    28ba:	4a e7       	ldi	r20, 0x7A	; 122
    28bc:	53 e4       	ldi	r21, 0x43	; 67
    28be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c2:	dc 01       	movw	r26, r24
    28c4:	cb 01       	movw	r24, r22
    28c6:	89 ab       	std	Y+49, r24	; 0x31
    28c8:	9a ab       	std	Y+50, r25	; 0x32
    28ca:	ab ab       	std	Y+51, r26	; 0x33
    28cc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    28ce:	69 a9       	ldd	r22, Y+49	; 0x31
    28d0:	7a a9       	ldd	r23, Y+50	; 0x32
    28d2:	8b a9       	ldd	r24, Y+51	; 0x33
    28d4:	9c a9       	ldd	r25, Y+52	; 0x34
    28d6:	20 e0       	ldi	r18, 0x00	; 0
    28d8:	30 e0       	ldi	r19, 0x00	; 0
    28da:	40 e8       	ldi	r20, 0x80	; 128
    28dc:	5f e3       	ldi	r21, 0x3F	; 63
    28de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28e2:	88 23       	and	r24, r24
    28e4:	2c f4       	brge	.+10     	; 0x28f0 <LCD_sendCommand+0x4d6>
		__ticks = 1;
    28e6:	81 e0       	ldi	r24, 0x01	; 1
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	98 ab       	std	Y+48, r25	; 0x30
    28ec:	8f a7       	std	Y+47, r24	; 0x2f
    28ee:	3f c0       	rjmp	.+126    	; 0x296e <LCD_sendCommand+0x554>
	else if (__tmp > 65535)
    28f0:	69 a9       	ldd	r22, Y+49	; 0x31
    28f2:	7a a9       	ldd	r23, Y+50	; 0x32
    28f4:	8b a9       	ldd	r24, Y+51	; 0x33
    28f6:	9c a9       	ldd	r25, Y+52	; 0x34
    28f8:	20 e0       	ldi	r18, 0x00	; 0
    28fa:	3f ef       	ldi	r19, 0xFF	; 255
    28fc:	4f e7       	ldi	r20, 0x7F	; 127
    28fe:	57 e4       	ldi	r21, 0x47	; 71
    2900:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2904:	18 16       	cp	r1, r24
    2906:	4c f5       	brge	.+82     	; 0x295a <LCD_sendCommand+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2908:	6d a9       	ldd	r22, Y+53	; 0x35
    290a:	7e a9       	ldd	r23, Y+54	; 0x36
    290c:	8f a9       	ldd	r24, Y+55	; 0x37
    290e:	98 ad       	ldd	r25, Y+56	; 0x38
    2910:	20 e0       	ldi	r18, 0x00	; 0
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	40 e2       	ldi	r20, 0x20	; 32
    2916:	51 e4       	ldi	r21, 0x41	; 65
    2918:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    291c:	dc 01       	movw	r26, r24
    291e:	cb 01       	movw	r24, r22
    2920:	bc 01       	movw	r22, r24
    2922:	cd 01       	movw	r24, r26
    2924:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2928:	dc 01       	movw	r26, r24
    292a:	cb 01       	movw	r24, r22
    292c:	98 ab       	std	Y+48, r25	; 0x30
    292e:	8f a7       	std	Y+47, r24	; 0x2f
    2930:	0f c0       	rjmp	.+30     	; 0x2950 <LCD_sendCommand+0x536>
    2932:	89 e1       	ldi	r24, 0x19	; 25
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	9e a7       	std	Y+46, r25	; 0x2e
    2938:	8d a7       	std	Y+45, r24	; 0x2d
    293a:	8d a5       	ldd	r24, Y+45	; 0x2d
    293c:	9e a5       	ldd	r25, Y+46	; 0x2e
    293e:	01 97       	sbiw	r24, 0x01	; 1
    2940:	f1 f7       	brne	.-4      	; 0x293e <LCD_sendCommand+0x524>
    2942:	9e a7       	std	Y+46, r25	; 0x2e
    2944:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2946:	8f a5       	ldd	r24, Y+47	; 0x2f
    2948:	98 a9       	ldd	r25, Y+48	; 0x30
    294a:	01 97       	sbiw	r24, 0x01	; 1
    294c:	98 ab       	std	Y+48, r25	; 0x30
    294e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2950:	8f a5       	ldd	r24, Y+47	; 0x2f
    2952:	98 a9       	ldd	r25, Y+48	; 0x30
    2954:	00 97       	sbiw	r24, 0x00	; 0
    2956:	69 f7       	brne	.-38     	; 0x2932 <LCD_sendCommand+0x518>
    2958:	14 c0       	rjmp	.+40     	; 0x2982 <LCD_sendCommand+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    295a:	69 a9       	ldd	r22, Y+49	; 0x31
    295c:	7a a9       	ldd	r23, Y+50	; 0x32
    295e:	8b a9       	ldd	r24, Y+51	; 0x33
    2960:	9c a9       	ldd	r25, Y+52	; 0x34
    2962:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2966:	dc 01       	movw	r26, r24
    2968:	cb 01       	movw	r24, r22
    296a:	98 ab       	std	Y+48, r25	; 0x30
    296c:	8f a7       	std	Y+47, r24	; 0x2f
    296e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2970:	98 a9       	ldd	r25, Y+48	; 0x30
    2972:	9c a7       	std	Y+44, r25	; 0x2c
    2974:	8b a7       	std	Y+43, r24	; 0x2b
    2976:	8b a5       	ldd	r24, Y+43	; 0x2b
    2978:	9c a5       	ldd	r25, Y+44	; 0x2c
    297a:	01 97       	sbiw	r24, 0x01	; 1
    297c:	f1 f7       	brne	.-4      	; 0x297a <LCD_sendCommand+0x560>
    297e:	9c a7       	std	Y+44, r25	; 0x2c
    2980:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1); /* delay for processing Th = 13ns */

		// Set Enable Pin to '1'
		GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
    2982:	80 e0       	ldi	r24, 0x00	; 0
    2984:	62 e0       	ldi	r22, 0x02	; 2
    2986:	41 e0       	ldi	r20, 0x01	; 1
    2988:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
    298c:	80 e0       	ldi	r24, 0x00	; 0
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	a0 e8       	ldi	r26, 0x80	; 128
    2992:	bf e3       	ldi	r27, 0x3F	; 63
    2994:	8f a3       	std	Y+39, r24	; 0x27
    2996:	98 a7       	std	Y+40, r25	; 0x28
    2998:	a9 a7       	std	Y+41, r26	; 0x29
    299a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    299c:	6f a1       	ldd	r22, Y+39	; 0x27
    299e:	78 a5       	ldd	r23, Y+40	; 0x28
    29a0:	89 a5       	ldd	r24, Y+41	; 0x29
    29a2:	9a a5       	ldd	r25, Y+42	; 0x2a
    29a4:	20 e0       	ldi	r18, 0x00	; 0
    29a6:	30 e0       	ldi	r19, 0x00	; 0
    29a8:	4a e7       	ldi	r20, 0x7A	; 122
    29aa:	53 e4       	ldi	r21, 0x43	; 67
    29ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b0:	dc 01       	movw	r26, r24
    29b2:	cb 01       	movw	r24, r22
    29b4:	8b a3       	std	Y+35, r24	; 0x23
    29b6:	9c a3       	std	Y+36, r25	; 0x24
    29b8:	ad a3       	std	Y+37, r26	; 0x25
    29ba:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    29bc:	6b a1       	ldd	r22, Y+35	; 0x23
    29be:	7c a1       	ldd	r23, Y+36	; 0x24
    29c0:	8d a1       	ldd	r24, Y+37	; 0x25
    29c2:	9e a1       	ldd	r25, Y+38	; 0x26
    29c4:	20 e0       	ldi	r18, 0x00	; 0
    29c6:	30 e0       	ldi	r19, 0x00	; 0
    29c8:	40 e8       	ldi	r20, 0x80	; 128
    29ca:	5f e3       	ldi	r21, 0x3F	; 63
    29cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29d0:	88 23       	and	r24, r24
    29d2:	2c f4       	brge	.+10     	; 0x29de <LCD_sendCommand+0x5c4>
		__ticks = 1;
    29d4:	81 e0       	ldi	r24, 0x01	; 1
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	9a a3       	std	Y+34, r25	; 0x22
    29da:	89 a3       	std	Y+33, r24	; 0x21
    29dc:	3f c0       	rjmp	.+126    	; 0x2a5c <LCD_sendCommand+0x642>
	else if (__tmp > 65535)
    29de:	6b a1       	ldd	r22, Y+35	; 0x23
    29e0:	7c a1       	ldd	r23, Y+36	; 0x24
    29e2:	8d a1       	ldd	r24, Y+37	; 0x25
    29e4:	9e a1       	ldd	r25, Y+38	; 0x26
    29e6:	20 e0       	ldi	r18, 0x00	; 0
    29e8:	3f ef       	ldi	r19, 0xFF	; 255
    29ea:	4f e7       	ldi	r20, 0x7F	; 127
    29ec:	57 e4       	ldi	r21, 0x47	; 71
    29ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29f2:	18 16       	cp	r1, r24
    29f4:	4c f5       	brge	.+82     	; 0x2a48 <LCD_sendCommand+0x62e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29f6:	6f a1       	ldd	r22, Y+39	; 0x27
    29f8:	78 a5       	ldd	r23, Y+40	; 0x28
    29fa:	89 a5       	ldd	r24, Y+41	; 0x29
    29fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    29fe:	20 e0       	ldi	r18, 0x00	; 0
    2a00:	30 e0       	ldi	r19, 0x00	; 0
    2a02:	40 e2       	ldi	r20, 0x20	; 32
    2a04:	51 e4       	ldi	r21, 0x41	; 65
    2a06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a0a:	dc 01       	movw	r26, r24
    2a0c:	cb 01       	movw	r24, r22
    2a0e:	bc 01       	movw	r22, r24
    2a10:	cd 01       	movw	r24, r26
    2a12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a16:	dc 01       	movw	r26, r24
    2a18:	cb 01       	movw	r24, r22
    2a1a:	9a a3       	std	Y+34, r25	; 0x22
    2a1c:	89 a3       	std	Y+33, r24	; 0x21
    2a1e:	0f c0       	rjmp	.+30     	; 0x2a3e <LCD_sendCommand+0x624>
    2a20:	89 e1       	ldi	r24, 0x19	; 25
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	98 a3       	std	Y+32, r25	; 0x20
    2a26:	8f 8f       	std	Y+31, r24	; 0x1f
    2a28:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a2a:	98 a1       	ldd	r25, Y+32	; 0x20
    2a2c:	01 97       	sbiw	r24, 0x01	; 1
    2a2e:	f1 f7       	brne	.-4      	; 0x2a2c <LCD_sendCommand+0x612>
    2a30:	98 a3       	std	Y+32, r25	; 0x20
    2a32:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a34:	89 a1       	ldd	r24, Y+33	; 0x21
    2a36:	9a a1       	ldd	r25, Y+34	; 0x22
    2a38:	01 97       	sbiw	r24, 0x01	; 1
    2a3a:	9a a3       	std	Y+34, r25	; 0x22
    2a3c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a3e:	89 a1       	ldd	r24, Y+33	; 0x21
    2a40:	9a a1       	ldd	r25, Y+34	; 0x22
    2a42:	00 97       	sbiw	r24, 0x00	; 0
    2a44:	69 f7       	brne	.-38     	; 0x2a20 <LCD_sendCommand+0x606>
    2a46:	14 c0       	rjmp	.+40     	; 0x2a70 <LCD_sendCommand+0x656>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a48:	6b a1       	ldd	r22, Y+35	; 0x23
    2a4a:	7c a1       	ldd	r23, Y+36	; 0x24
    2a4c:	8d a1       	ldd	r24, Y+37	; 0x25
    2a4e:	9e a1       	ldd	r25, Y+38	; 0x26
    2a50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a54:	dc 01       	movw	r26, r24
    2a56:	cb 01       	movw	r24, r22
    2a58:	9a a3       	std	Y+34, r25	; 0x22
    2a5a:	89 a3       	std	Y+33, r24	; 0x21
    2a5c:	89 a1       	ldd	r24, Y+33	; 0x21
    2a5e:	9a a1       	ldd	r25, Y+34	; 0x22
    2a60:	9e 8f       	std	Y+30, r25	; 0x1e
    2a62:	8d 8f       	std	Y+29, r24	; 0x1d
    2a64:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a66:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a68:	01 97       	sbiw	r24, 0x01	; 1
    2a6a:	f1 f7       	brne	.-4      	; 0x2a68 <LCD_sendCommand+0x64e>
    2a6c:	9e 8f       	std	Y+30, r25	; 0x1e
    2a6e:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 0), GET_BIT( command, 0 ));
    2a70:	fe 01       	movw	r30, r28
    2a72:	ed 59       	subi	r30, 0x9D	; 157
    2a74:	ff 4f       	sbci	r31, 0xFF	; 255
    2a76:	80 81       	ld	r24, Z
    2a78:	98 2f       	mov	r25, r24
    2a7a:	91 70       	andi	r25, 0x01	; 1
    2a7c:	80 e0       	ldi	r24, 0x00	; 0
    2a7e:	63 e0       	ldi	r22, 0x03	; 3
    2a80:	49 2f       	mov	r20, r25
    2a82:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 1), GET_BIT( command, 1 ));
    2a86:	fe 01       	movw	r30, r28
    2a88:	ed 59       	subi	r30, 0x9D	; 157
    2a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8c:	80 81       	ld	r24, Z
    2a8e:	86 95       	lsr	r24
    2a90:	98 2f       	mov	r25, r24
    2a92:	91 70       	andi	r25, 0x01	; 1
    2a94:	80 e0       	ldi	r24, 0x00	; 0
    2a96:	64 e0       	ldi	r22, 0x04	; 4
    2a98:	49 2f       	mov	r20, r25
    2a9a:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 2), GET_BIT( command, 2 ));
    2a9e:	fe 01       	movw	r30, r28
    2aa0:	ed 59       	subi	r30, 0x9D	; 157
    2aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa4:	80 81       	ld	r24, Z
    2aa6:	86 95       	lsr	r24
    2aa8:	86 95       	lsr	r24
    2aaa:	98 2f       	mov	r25, r24
    2aac:	91 70       	andi	r25, 0x01	; 1
    2aae:	80 e0       	ldi	r24, 0x00	; 0
    2ab0:	65 e0       	ldi	r22, 0x05	; 5
    2ab2:	49 2f       	mov	r20, r25
    2ab4:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 3), GET_BIT( command, 3 ));
    2ab8:	fe 01       	movw	r30, r28
    2aba:	ed 59       	subi	r30, 0x9D	; 157
    2abc:	ff 4f       	sbci	r31, 0xFF	; 255
    2abe:	80 81       	ld	r24, Z
    2ac0:	86 95       	lsr	r24
    2ac2:	86 95       	lsr	r24
    2ac4:	86 95       	lsr	r24
    2ac6:	98 2f       	mov	r25, r24
    2ac8:	91 70       	andi	r25, 0x01	; 1
    2aca:	80 e0       	ldi	r24, 0x00	; 0
    2acc:	66 e0       	ldi	r22, 0x06	; 6
    2ace:	49 2f       	mov	r20, r25
    2ad0:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
    2ad4:	80 e0       	ldi	r24, 0x00	; 0
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	a0 e8       	ldi	r26, 0x80	; 128
    2ada:	bf e3       	ldi	r27, 0x3F	; 63
    2adc:	89 8f       	std	Y+25, r24	; 0x19
    2ade:	9a 8f       	std	Y+26, r25	; 0x1a
    2ae0:	ab 8f       	std	Y+27, r26	; 0x1b
    2ae2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ae4:	69 8d       	ldd	r22, Y+25	; 0x19
    2ae6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ae8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2aea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2aec:	20 e0       	ldi	r18, 0x00	; 0
    2aee:	30 e0       	ldi	r19, 0x00	; 0
    2af0:	4a e7       	ldi	r20, 0x7A	; 122
    2af2:	53 e4       	ldi	r21, 0x43	; 67
    2af4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af8:	dc 01       	movw	r26, r24
    2afa:	cb 01       	movw	r24, r22
    2afc:	8d 8b       	std	Y+21, r24	; 0x15
    2afe:	9e 8b       	std	Y+22, r25	; 0x16
    2b00:	af 8b       	std	Y+23, r26	; 0x17
    2b02:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b04:	6d 89       	ldd	r22, Y+21	; 0x15
    2b06:	7e 89       	ldd	r23, Y+22	; 0x16
    2b08:	8f 89       	ldd	r24, Y+23	; 0x17
    2b0a:	98 8d       	ldd	r25, Y+24	; 0x18
    2b0c:	20 e0       	ldi	r18, 0x00	; 0
    2b0e:	30 e0       	ldi	r19, 0x00	; 0
    2b10:	40 e8       	ldi	r20, 0x80	; 128
    2b12:	5f e3       	ldi	r21, 0x3F	; 63
    2b14:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b18:	88 23       	and	r24, r24
    2b1a:	2c f4       	brge	.+10     	; 0x2b26 <LCD_sendCommand+0x70c>
		__ticks = 1;
    2b1c:	81 e0       	ldi	r24, 0x01	; 1
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	9c 8b       	std	Y+20, r25	; 0x14
    2b22:	8b 8b       	std	Y+19, r24	; 0x13
    2b24:	3f c0       	rjmp	.+126    	; 0x2ba4 <LCD_sendCommand+0x78a>
	else if (__tmp > 65535)
    2b26:	6d 89       	ldd	r22, Y+21	; 0x15
    2b28:	7e 89       	ldd	r23, Y+22	; 0x16
    2b2a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b2c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b2e:	20 e0       	ldi	r18, 0x00	; 0
    2b30:	3f ef       	ldi	r19, 0xFF	; 255
    2b32:	4f e7       	ldi	r20, 0x7F	; 127
    2b34:	57 e4       	ldi	r21, 0x47	; 71
    2b36:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b3a:	18 16       	cp	r1, r24
    2b3c:	4c f5       	brge	.+82     	; 0x2b90 <LCD_sendCommand+0x776>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b3e:	69 8d       	ldd	r22, Y+25	; 0x19
    2b40:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b42:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b44:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b46:	20 e0       	ldi	r18, 0x00	; 0
    2b48:	30 e0       	ldi	r19, 0x00	; 0
    2b4a:	40 e2       	ldi	r20, 0x20	; 32
    2b4c:	51 e4       	ldi	r21, 0x41	; 65
    2b4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b52:	dc 01       	movw	r26, r24
    2b54:	cb 01       	movw	r24, r22
    2b56:	bc 01       	movw	r22, r24
    2b58:	cd 01       	movw	r24, r26
    2b5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b5e:	dc 01       	movw	r26, r24
    2b60:	cb 01       	movw	r24, r22
    2b62:	9c 8b       	std	Y+20, r25	; 0x14
    2b64:	8b 8b       	std	Y+19, r24	; 0x13
    2b66:	0f c0       	rjmp	.+30     	; 0x2b86 <LCD_sendCommand+0x76c>
    2b68:	89 e1       	ldi	r24, 0x19	; 25
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	9a 8b       	std	Y+18, r25	; 0x12
    2b6e:	89 8b       	std	Y+17, r24	; 0x11
    2b70:	89 89       	ldd	r24, Y+17	; 0x11
    2b72:	9a 89       	ldd	r25, Y+18	; 0x12
    2b74:	01 97       	sbiw	r24, 0x01	; 1
    2b76:	f1 f7       	brne	.-4      	; 0x2b74 <LCD_sendCommand+0x75a>
    2b78:	9a 8b       	std	Y+18, r25	; 0x12
    2b7a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b7c:	8b 89       	ldd	r24, Y+19	; 0x13
    2b7e:	9c 89       	ldd	r25, Y+20	; 0x14
    2b80:	01 97       	sbiw	r24, 0x01	; 1
    2b82:	9c 8b       	std	Y+20, r25	; 0x14
    2b84:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b86:	8b 89       	ldd	r24, Y+19	; 0x13
    2b88:	9c 89       	ldd	r25, Y+20	; 0x14
    2b8a:	00 97       	sbiw	r24, 0x00	; 0
    2b8c:	69 f7       	brne	.-38     	; 0x2b68 <LCD_sendCommand+0x74e>
    2b8e:	14 c0       	rjmp	.+40     	; 0x2bb8 <LCD_sendCommand+0x79e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b90:	6d 89       	ldd	r22, Y+21	; 0x15
    2b92:	7e 89       	ldd	r23, Y+22	; 0x16
    2b94:	8f 89       	ldd	r24, Y+23	; 0x17
    2b96:	98 8d       	ldd	r25, Y+24	; 0x18
    2b98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b9c:	dc 01       	movw	r26, r24
    2b9e:	cb 01       	movw	r24, r22
    2ba0:	9c 8b       	std	Y+20, r25	; 0x14
    2ba2:	8b 8b       	std	Y+19, r24	; 0x13
    2ba4:	8b 89       	ldd	r24, Y+19	; 0x13
    2ba6:	9c 89       	ldd	r25, Y+20	; 0x14
    2ba8:	98 8b       	std	Y+16, r25	; 0x10
    2baa:	8f 87       	std	Y+15, r24	; 0x0f
    2bac:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bae:	98 89       	ldd	r25, Y+16	; 0x10
    2bb0:	01 97       	sbiw	r24, 0x01	; 1
    2bb2:	f1 f7       	brne	.-4      	; 0x2bb0 <LCD_sendCommand+0x796>
    2bb4:	98 8b       	std	Y+16, r25	; 0x10
    2bb6:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1); /* delay for processing Tdsw = 100ns */

		// Clear Enable Pin to '0'
		GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
    2bb8:	80 e0       	ldi	r24, 0x00	; 0
    2bba:	62 e0       	ldi	r22, 0x02	; 2
    2bbc:	40 e0       	ldi	r20, 0x00	; 0
    2bbe:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
    2bc2:	80 e0       	ldi	r24, 0x00	; 0
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	a0 e8       	ldi	r26, 0x80	; 128
    2bc8:	bf e3       	ldi	r27, 0x3F	; 63
    2bca:	8b 87       	std	Y+11, r24	; 0x0b
    2bcc:	9c 87       	std	Y+12, r25	; 0x0c
    2bce:	ad 87       	std	Y+13, r26	; 0x0d
    2bd0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bda:	20 e0       	ldi	r18, 0x00	; 0
    2bdc:	30 e0       	ldi	r19, 0x00	; 0
    2bde:	4a e7       	ldi	r20, 0x7A	; 122
    2be0:	53 e4       	ldi	r21, 0x43	; 67
    2be2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2be6:	dc 01       	movw	r26, r24
    2be8:	cb 01       	movw	r24, r22
    2bea:	8f 83       	std	Y+7, r24	; 0x07
    2bec:	98 87       	std	Y+8, r25	; 0x08
    2bee:	a9 87       	std	Y+9, r26	; 0x09
    2bf0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bf2:	6f 81       	ldd	r22, Y+7	; 0x07
    2bf4:	78 85       	ldd	r23, Y+8	; 0x08
    2bf6:	89 85       	ldd	r24, Y+9	; 0x09
    2bf8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bfa:	20 e0       	ldi	r18, 0x00	; 0
    2bfc:	30 e0       	ldi	r19, 0x00	; 0
    2bfe:	40 e8       	ldi	r20, 0x80	; 128
    2c00:	5f e3       	ldi	r21, 0x3F	; 63
    2c02:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c06:	88 23       	and	r24, r24
    2c08:	2c f4       	brge	.+10     	; 0x2c14 <LCD_sendCommand+0x7fa>
		__ticks = 1;
    2c0a:	81 e0       	ldi	r24, 0x01	; 1
    2c0c:	90 e0       	ldi	r25, 0x00	; 0
    2c0e:	9e 83       	std	Y+6, r25	; 0x06
    2c10:	8d 83       	std	Y+5, r24	; 0x05
    2c12:	3f c0       	rjmp	.+126    	; 0x2c92 <LCD_sendCommand+0x878>
	else if (__tmp > 65535)
    2c14:	6f 81       	ldd	r22, Y+7	; 0x07
    2c16:	78 85       	ldd	r23, Y+8	; 0x08
    2c18:	89 85       	ldd	r24, Y+9	; 0x09
    2c1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c1c:	20 e0       	ldi	r18, 0x00	; 0
    2c1e:	3f ef       	ldi	r19, 0xFF	; 255
    2c20:	4f e7       	ldi	r20, 0x7F	; 127
    2c22:	57 e4       	ldi	r21, 0x47	; 71
    2c24:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c28:	18 16       	cp	r1, r24
    2c2a:	4c f5       	brge	.+82     	; 0x2c7e <LCD_sendCommand+0x864>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c30:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c32:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c34:	20 e0       	ldi	r18, 0x00	; 0
    2c36:	30 e0       	ldi	r19, 0x00	; 0
    2c38:	40 e2       	ldi	r20, 0x20	; 32
    2c3a:	51 e4       	ldi	r21, 0x41	; 65
    2c3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c40:	dc 01       	movw	r26, r24
    2c42:	cb 01       	movw	r24, r22
    2c44:	bc 01       	movw	r22, r24
    2c46:	cd 01       	movw	r24, r26
    2c48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c4c:	dc 01       	movw	r26, r24
    2c4e:	cb 01       	movw	r24, r22
    2c50:	9e 83       	std	Y+6, r25	; 0x06
    2c52:	8d 83       	std	Y+5, r24	; 0x05
    2c54:	0f c0       	rjmp	.+30     	; 0x2c74 <LCD_sendCommand+0x85a>
    2c56:	89 e1       	ldi	r24, 0x19	; 25
    2c58:	90 e0       	ldi	r25, 0x00	; 0
    2c5a:	9c 83       	std	Y+4, r25	; 0x04
    2c5c:	8b 83       	std	Y+3, r24	; 0x03
    2c5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c60:	9c 81       	ldd	r25, Y+4	; 0x04
    2c62:	01 97       	sbiw	r24, 0x01	; 1
    2c64:	f1 f7       	brne	.-4      	; 0x2c62 <LCD_sendCommand+0x848>
    2c66:	9c 83       	std	Y+4, r25	; 0x04
    2c68:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c6c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c6e:	01 97       	sbiw	r24, 0x01	; 1
    2c70:	9e 83       	std	Y+6, r25	; 0x06
    2c72:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c74:	8d 81       	ldd	r24, Y+5	; 0x05
    2c76:	9e 81       	ldd	r25, Y+6	; 0x06
    2c78:	00 97       	sbiw	r24, 0x00	; 0
    2c7a:	69 f7       	brne	.-38     	; 0x2c56 <LCD_sendCommand+0x83c>
    2c7c:	14 c0       	rjmp	.+40     	; 0x2ca6 <LCD_sendCommand+0x88c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c7e:	6f 81       	ldd	r22, Y+7	; 0x07
    2c80:	78 85       	ldd	r23, Y+8	; 0x08
    2c82:	89 85       	ldd	r24, Y+9	; 0x09
    2c84:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c8a:	dc 01       	movw	r26, r24
    2c8c:	cb 01       	movw	r24, r22
    2c8e:	9e 83       	std	Y+6, r25	; 0x06
    2c90:	8d 83       	std	Y+5, r24	; 0x05
    2c92:	8d 81       	ldd	r24, Y+5	; 0x05
    2c94:	9e 81       	ldd	r25, Y+6	; 0x06
    2c96:	9a 83       	std	Y+2, r25	; 0x02
    2c98:	89 83       	std	Y+1, r24	; 0x01
    2c9a:	89 81       	ldd	r24, Y+1	; 0x01
    2c9c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c9e:	01 97       	sbiw	r24, 0x01	; 1
    2ca0:	f1 f7       	brne	.-4      	; 0x2c9e <LCD_sendCommand+0x884>
    2ca2:	9a 83       	std	Y+2, r25	; 0x02
    2ca4:	89 83       	std	Y+1, r24	; 0x01

		// Clear Enable Pin to '0'
		GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
		_delay_ms(1); /* delay for processing Th = 13ns */
	}
}
    2ca6:	cd 59       	subi	r28, 0x9D	; 157
    2ca8:	df 4f       	sbci	r29, 0xFF	; 255
    2caa:	0f b6       	in	r0, 0x3f	; 63
    2cac:	f8 94       	cli
    2cae:	de bf       	out	0x3e, r29	; 62
    2cb0:	0f be       	out	0x3f, r0	; 63
    2cb2:	cd bf       	out	0x3d, r28	; 61
    2cb4:	cf 91       	pop	r28
    2cb6:	df 91       	pop	r29
    2cb8:	1f 91       	pop	r17
    2cba:	0f 91       	pop	r16
    2cbc:	08 95       	ret

00002cbe <LCD_displayCharacter>:


// Displays a character on the LCD
void LCD_displayCharacter(uint8 data) {
    2cbe:	0f 93       	push	r16
    2cc0:	1f 93       	push	r17
    2cc2:	df 93       	push	r29
    2cc4:	cf 93       	push	r28
    2cc6:	cd b7       	in	r28, 0x3d	; 61
    2cc8:	de b7       	in	r29, 0x3e	; 62
    2cca:	c3 56       	subi	r28, 0x63	; 99
    2ccc:	d0 40       	sbci	r29, 0x00	; 0
    2cce:	0f b6       	in	r0, 0x3f	; 63
    2cd0:	f8 94       	cli
    2cd2:	de bf       	out	0x3e, r29	; 62
    2cd4:	0f be       	out	0x3f, r0	; 63
    2cd6:	cd bf       	out	0x3d, r28	; 61
    2cd8:	fe 01       	movw	r30, r28
    2cda:	ed 59       	subi	r30, 0x9D	; 157
    2cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cde:	80 83       	st	Z, r24
	// Set RS Pin to '1'
	GPIO_writePin(LCD_INIT_PORT, LCD_RS, LOGIC_HIGH);
    2ce0:	80 e0       	ldi	r24, 0x00	; 0
    2ce2:	61 e0       	ldi	r22, 0x01	; 1
    2ce4:	41 e0       	ldi	r20, 0x01	; 1
    2ce6:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
    2cea:	fe 01       	movw	r30, r28
    2cec:	e1 5a       	subi	r30, 0xA1	; 161
    2cee:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf0:	80 e0       	ldi	r24, 0x00	; 0
    2cf2:	90 e0       	ldi	r25, 0x00	; 0
    2cf4:	a0 e8       	ldi	r26, 0x80	; 128
    2cf6:	bf e3       	ldi	r27, 0x3F	; 63
    2cf8:	80 83       	st	Z, r24
    2cfa:	91 83       	std	Z+1, r25	; 0x01
    2cfc:	a2 83       	std	Z+2, r26	; 0x02
    2cfe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d00:	8e 01       	movw	r16, r28
    2d02:	05 5a       	subi	r16, 0xA5	; 165
    2d04:	1f 4f       	sbci	r17, 0xFF	; 255
    2d06:	fe 01       	movw	r30, r28
    2d08:	e1 5a       	subi	r30, 0xA1	; 161
    2d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0c:	60 81       	ld	r22, Z
    2d0e:	71 81       	ldd	r23, Z+1	; 0x01
    2d10:	82 81       	ldd	r24, Z+2	; 0x02
    2d12:	93 81       	ldd	r25, Z+3	; 0x03
    2d14:	20 e0       	ldi	r18, 0x00	; 0
    2d16:	30 e0       	ldi	r19, 0x00	; 0
    2d18:	4a e7       	ldi	r20, 0x7A	; 122
    2d1a:	53 e4       	ldi	r21, 0x43	; 67
    2d1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d20:	dc 01       	movw	r26, r24
    2d22:	cb 01       	movw	r24, r22
    2d24:	f8 01       	movw	r30, r16
    2d26:	80 83       	st	Z, r24
    2d28:	91 83       	std	Z+1, r25	; 0x01
    2d2a:	a2 83       	std	Z+2, r26	; 0x02
    2d2c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d2e:	fe 01       	movw	r30, r28
    2d30:	e5 5a       	subi	r30, 0xA5	; 165
    2d32:	ff 4f       	sbci	r31, 0xFF	; 255
    2d34:	60 81       	ld	r22, Z
    2d36:	71 81       	ldd	r23, Z+1	; 0x01
    2d38:	82 81       	ldd	r24, Z+2	; 0x02
    2d3a:	93 81       	ldd	r25, Z+3	; 0x03
    2d3c:	20 e0       	ldi	r18, 0x00	; 0
    2d3e:	30 e0       	ldi	r19, 0x00	; 0
    2d40:	40 e8       	ldi	r20, 0x80	; 128
    2d42:	5f e3       	ldi	r21, 0x3F	; 63
    2d44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d48:	88 23       	and	r24, r24
    2d4a:	44 f4       	brge	.+16     	; 0x2d5c <LCD_displayCharacter+0x9e>
		__ticks = 1;
    2d4c:	fe 01       	movw	r30, r28
    2d4e:	e7 5a       	subi	r30, 0xA7	; 167
    2d50:	ff 4f       	sbci	r31, 0xFF	; 255
    2d52:	81 e0       	ldi	r24, 0x01	; 1
    2d54:	90 e0       	ldi	r25, 0x00	; 0
    2d56:	91 83       	std	Z+1, r25	; 0x01
    2d58:	80 83       	st	Z, r24
    2d5a:	64 c0       	rjmp	.+200    	; 0x2e24 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    2d5c:	fe 01       	movw	r30, r28
    2d5e:	e5 5a       	subi	r30, 0xA5	; 165
    2d60:	ff 4f       	sbci	r31, 0xFF	; 255
    2d62:	60 81       	ld	r22, Z
    2d64:	71 81       	ldd	r23, Z+1	; 0x01
    2d66:	82 81       	ldd	r24, Z+2	; 0x02
    2d68:	93 81       	ldd	r25, Z+3	; 0x03
    2d6a:	20 e0       	ldi	r18, 0x00	; 0
    2d6c:	3f ef       	ldi	r19, 0xFF	; 255
    2d6e:	4f e7       	ldi	r20, 0x7F	; 127
    2d70:	57 e4       	ldi	r21, 0x47	; 71
    2d72:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d76:	18 16       	cp	r1, r24
    2d78:	0c f0       	brlt	.+2      	; 0x2d7c <LCD_displayCharacter+0xbe>
    2d7a:	43 c0       	rjmp	.+134    	; 0x2e02 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d7c:	fe 01       	movw	r30, r28
    2d7e:	e1 5a       	subi	r30, 0xA1	; 161
    2d80:	ff 4f       	sbci	r31, 0xFF	; 255
    2d82:	60 81       	ld	r22, Z
    2d84:	71 81       	ldd	r23, Z+1	; 0x01
    2d86:	82 81       	ldd	r24, Z+2	; 0x02
    2d88:	93 81       	ldd	r25, Z+3	; 0x03
    2d8a:	20 e0       	ldi	r18, 0x00	; 0
    2d8c:	30 e0       	ldi	r19, 0x00	; 0
    2d8e:	40 e2       	ldi	r20, 0x20	; 32
    2d90:	51 e4       	ldi	r21, 0x41	; 65
    2d92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d96:	dc 01       	movw	r26, r24
    2d98:	cb 01       	movw	r24, r22
    2d9a:	8e 01       	movw	r16, r28
    2d9c:	07 5a       	subi	r16, 0xA7	; 167
    2d9e:	1f 4f       	sbci	r17, 0xFF	; 255
    2da0:	bc 01       	movw	r22, r24
    2da2:	cd 01       	movw	r24, r26
    2da4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2da8:	dc 01       	movw	r26, r24
    2daa:	cb 01       	movw	r24, r22
    2dac:	f8 01       	movw	r30, r16
    2dae:	91 83       	std	Z+1, r25	; 0x01
    2db0:	80 83       	st	Z, r24
    2db2:	1f c0       	rjmp	.+62     	; 0x2df2 <LCD_displayCharacter+0x134>
    2db4:	fe 01       	movw	r30, r28
    2db6:	e9 5a       	subi	r30, 0xA9	; 169
    2db8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dba:	89 e1       	ldi	r24, 0x19	; 25
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	91 83       	std	Z+1, r25	; 0x01
    2dc0:	80 83       	st	Z, r24
    2dc2:	fe 01       	movw	r30, r28
    2dc4:	e9 5a       	subi	r30, 0xA9	; 169
    2dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc8:	80 81       	ld	r24, Z
    2dca:	91 81       	ldd	r25, Z+1	; 0x01
    2dcc:	01 97       	sbiw	r24, 0x01	; 1
    2dce:	f1 f7       	brne	.-4      	; 0x2dcc <LCD_displayCharacter+0x10e>
    2dd0:	fe 01       	movw	r30, r28
    2dd2:	e9 5a       	subi	r30, 0xA9	; 169
    2dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd6:	91 83       	std	Z+1, r25	; 0x01
    2dd8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dda:	de 01       	movw	r26, r28
    2ddc:	a7 5a       	subi	r26, 0xA7	; 167
    2dde:	bf 4f       	sbci	r27, 0xFF	; 255
    2de0:	fe 01       	movw	r30, r28
    2de2:	e7 5a       	subi	r30, 0xA7	; 167
    2de4:	ff 4f       	sbci	r31, 0xFF	; 255
    2de6:	80 81       	ld	r24, Z
    2de8:	91 81       	ldd	r25, Z+1	; 0x01
    2dea:	01 97       	sbiw	r24, 0x01	; 1
    2dec:	11 96       	adiw	r26, 0x01	; 1
    2dee:	9c 93       	st	X, r25
    2df0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2df2:	fe 01       	movw	r30, r28
    2df4:	e7 5a       	subi	r30, 0xA7	; 167
    2df6:	ff 4f       	sbci	r31, 0xFF	; 255
    2df8:	80 81       	ld	r24, Z
    2dfa:	91 81       	ldd	r25, Z+1	; 0x01
    2dfc:	00 97       	sbiw	r24, 0x00	; 0
    2dfe:	d1 f6       	brne	.-76     	; 0x2db4 <LCD_displayCharacter+0xf6>
    2e00:	27 c0       	rjmp	.+78     	; 0x2e50 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e02:	8e 01       	movw	r16, r28
    2e04:	07 5a       	subi	r16, 0xA7	; 167
    2e06:	1f 4f       	sbci	r17, 0xFF	; 255
    2e08:	fe 01       	movw	r30, r28
    2e0a:	e5 5a       	subi	r30, 0xA5	; 165
    2e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0e:	60 81       	ld	r22, Z
    2e10:	71 81       	ldd	r23, Z+1	; 0x01
    2e12:	82 81       	ldd	r24, Z+2	; 0x02
    2e14:	93 81       	ldd	r25, Z+3	; 0x03
    2e16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e1a:	dc 01       	movw	r26, r24
    2e1c:	cb 01       	movw	r24, r22
    2e1e:	f8 01       	movw	r30, r16
    2e20:	91 83       	std	Z+1, r25	; 0x01
    2e22:	80 83       	st	Z, r24
    2e24:	de 01       	movw	r26, r28
    2e26:	ab 5a       	subi	r26, 0xAB	; 171
    2e28:	bf 4f       	sbci	r27, 0xFF	; 255
    2e2a:	fe 01       	movw	r30, r28
    2e2c:	e7 5a       	subi	r30, 0xA7	; 167
    2e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e30:	80 81       	ld	r24, Z
    2e32:	91 81       	ldd	r25, Z+1	; 0x01
    2e34:	8d 93       	st	X+, r24
    2e36:	9c 93       	st	X, r25
    2e38:	fe 01       	movw	r30, r28
    2e3a:	eb 5a       	subi	r30, 0xAB	; 171
    2e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3e:	80 81       	ld	r24, Z
    2e40:	91 81       	ldd	r25, Z+1	; 0x01
    2e42:	01 97       	sbiw	r24, 0x01	; 1
    2e44:	f1 f7       	brne	.-4      	; 0x2e42 <LCD_displayCharacter+0x184>
    2e46:	fe 01       	movw	r30, r28
    2e48:	eb 5a       	subi	r30, 0xAB	; 171
    2e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4c:	91 83       	std	Z+1, r25	; 0x01
    2e4e:	80 83       	st	Z, r24
	_delay_ms(1);

	// Set Enable Pin to '1'
	GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
    2e50:	80 e0       	ldi	r24, 0x00	; 0
    2e52:	62 e0       	ldi	r22, 0x02	; 2
    2e54:	41 e0       	ldi	r20, 0x01	; 1
    2e56:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
    2e5a:	fe 01       	movw	r30, r28
    2e5c:	ef 5a       	subi	r30, 0xAF	; 175
    2e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e60:	80 e0       	ldi	r24, 0x00	; 0
    2e62:	90 e0       	ldi	r25, 0x00	; 0
    2e64:	a0 e8       	ldi	r26, 0x80	; 128
    2e66:	bf e3       	ldi	r27, 0x3F	; 63
    2e68:	80 83       	st	Z, r24
    2e6a:	91 83       	std	Z+1, r25	; 0x01
    2e6c:	a2 83       	std	Z+2, r26	; 0x02
    2e6e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e70:	8e 01       	movw	r16, r28
    2e72:	03 5b       	subi	r16, 0xB3	; 179
    2e74:	1f 4f       	sbci	r17, 0xFF	; 255
    2e76:	fe 01       	movw	r30, r28
    2e78:	ef 5a       	subi	r30, 0xAF	; 175
    2e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7c:	60 81       	ld	r22, Z
    2e7e:	71 81       	ldd	r23, Z+1	; 0x01
    2e80:	82 81       	ldd	r24, Z+2	; 0x02
    2e82:	93 81       	ldd	r25, Z+3	; 0x03
    2e84:	20 e0       	ldi	r18, 0x00	; 0
    2e86:	30 e0       	ldi	r19, 0x00	; 0
    2e88:	4a e7       	ldi	r20, 0x7A	; 122
    2e8a:	53 e4       	ldi	r21, 0x43	; 67
    2e8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e90:	dc 01       	movw	r26, r24
    2e92:	cb 01       	movw	r24, r22
    2e94:	f8 01       	movw	r30, r16
    2e96:	80 83       	st	Z, r24
    2e98:	91 83       	std	Z+1, r25	; 0x01
    2e9a:	a2 83       	std	Z+2, r26	; 0x02
    2e9c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e9e:	fe 01       	movw	r30, r28
    2ea0:	e3 5b       	subi	r30, 0xB3	; 179
    2ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea4:	60 81       	ld	r22, Z
    2ea6:	71 81       	ldd	r23, Z+1	; 0x01
    2ea8:	82 81       	ldd	r24, Z+2	; 0x02
    2eaa:	93 81       	ldd	r25, Z+3	; 0x03
    2eac:	20 e0       	ldi	r18, 0x00	; 0
    2eae:	30 e0       	ldi	r19, 0x00	; 0
    2eb0:	40 e8       	ldi	r20, 0x80	; 128
    2eb2:	5f e3       	ldi	r21, 0x3F	; 63
    2eb4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2eb8:	88 23       	and	r24, r24
    2eba:	44 f4       	brge	.+16     	; 0x2ecc <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2ebc:	fe 01       	movw	r30, r28
    2ebe:	e5 5b       	subi	r30, 0xB5	; 181
    2ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec2:	81 e0       	ldi	r24, 0x01	; 1
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	91 83       	std	Z+1, r25	; 0x01
    2ec8:	80 83       	st	Z, r24
    2eca:	64 c0       	rjmp	.+200    	; 0x2f94 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2ecc:	fe 01       	movw	r30, r28
    2ece:	e3 5b       	subi	r30, 0xB3	; 179
    2ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed2:	60 81       	ld	r22, Z
    2ed4:	71 81       	ldd	r23, Z+1	; 0x01
    2ed6:	82 81       	ldd	r24, Z+2	; 0x02
    2ed8:	93 81       	ldd	r25, Z+3	; 0x03
    2eda:	20 e0       	ldi	r18, 0x00	; 0
    2edc:	3f ef       	ldi	r19, 0xFF	; 255
    2ede:	4f e7       	ldi	r20, 0x7F	; 127
    2ee0:	57 e4       	ldi	r21, 0x47	; 71
    2ee2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ee6:	18 16       	cp	r1, r24
    2ee8:	0c f0       	brlt	.+2      	; 0x2eec <LCD_displayCharacter+0x22e>
    2eea:	43 c0       	rjmp	.+134    	; 0x2f72 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eec:	fe 01       	movw	r30, r28
    2eee:	ef 5a       	subi	r30, 0xAF	; 175
    2ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef2:	60 81       	ld	r22, Z
    2ef4:	71 81       	ldd	r23, Z+1	; 0x01
    2ef6:	82 81       	ldd	r24, Z+2	; 0x02
    2ef8:	93 81       	ldd	r25, Z+3	; 0x03
    2efa:	20 e0       	ldi	r18, 0x00	; 0
    2efc:	30 e0       	ldi	r19, 0x00	; 0
    2efe:	40 e2       	ldi	r20, 0x20	; 32
    2f00:	51 e4       	ldi	r21, 0x41	; 65
    2f02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f06:	dc 01       	movw	r26, r24
    2f08:	cb 01       	movw	r24, r22
    2f0a:	8e 01       	movw	r16, r28
    2f0c:	05 5b       	subi	r16, 0xB5	; 181
    2f0e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f10:	bc 01       	movw	r22, r24
    2f12:	cd 01       	movw	r24, r26
    2f14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f18:	dc 01       	movw	r26, r24
    2f1a:	cb 01       	movw	r24, r22
    2f1c:	f8 01       	movw	r30, r16
    2f1e:	91 83       	std	Z+1, r25	; 0x01
    2f20:	80 83       	st	Z, r24
    2f22:	1f c0       	rjmp	.+62     	; 0x2f62 <LCD_displayCharacter+0x2a4>
    2f24:	fe 01       	movw	r30, r28
    2f26:	e7 5b       	subi	r30, 0xB7	; 183
    2f28:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2a:	89 e1       	ldi	r24, 0x19	; 25
    2f2c:	90 e0       	ldi	r25, 0x00	; 0
    2f2e:	91 83       	std	Z+1, r25	; 0x01
    2f30:	80 83       	st	Z, r24
    2f32:	fe 01       	movw	r30, r28
    2f34:	e7 5b       	subi	r30, 0xB7	; 183
    2f36:	ff 4f       	sbci	r31, 0xFF	; 255
    2f38:	80 81       	ld	r24, Z
    2f3a:	91 81       	ldd	r25, Z+1	; 0x01
    2f3c:	01 97       	sbiw	r24, 0x01	; 1
    2f3e:	f1 f7       	brne	.-4      	; 0x2f3c <LCD_displayCharacter+0x27e>
    2f40:	fe 01       	movw	r30, r28
    2f42:	e7 5b       	subi	r30, 0xB7	; 183
    2f44:	ff 4f       	sbci	r31, 0xFF	; 255
    2f46:	91 83       	std	Z+1, r25	; 0x01
    2f48:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f4a:	de 01       	movw	r26, r28
    2f4c:	a5 5b       	subi	r26, 0xB5	; 181
    2f4e:	bf 4f       	sbci	r27, 0xFF	; 255
    2f50:	fe 01       	movw	r30, r28
    2f52:	e5 5b       	subi	r30, 0xB5	; 181
    2f54:	ff 4f       	sbci	r31, 0xFF	; 255
    2f56:	80 81       	ld	r24, Z
    2f58:	91 81       	ldd	r25, Z+1	; 0x01
    2f5a:	01 97       	sbiw	r24, 0x01	; 1
    2f5c:	11 96       	adiw	r26, 0x01	; 1
    2f5e:	9c 93       	st	X, r25
    2f60:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f62:	fe 01       	movw	r30, r28
    2f64:	e5 5b       	subi	r30, 0xB5	; 181
    2f66:	ff 4f       	sbci	r31, 0xFF	; 255
    2f68:	80 81       	ld	r24, Z
    2f6a:	91 81       	ldd	r25, Z+1	; 0x01
    2f6c:	00 97       	sbiw	r24, 0x00	; 0
    2f6e:	d1 f6       	brne	.-76     	; 0x2f24 <LCD_displayCharacter+0x266>
    2f70:	27 c0       	rjmp	.+78     	; 0x2fc0 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f72:	8e 01       	movw	r16, r28
    2f74:	05 5b       	subi	r16, 0xB5	; 181
    2f76:	1f 4f       	sbci	r17, 0xFF	; 255
    2f78:	fe 01       	movw	r30, r28
    2f7a:	e3 5b       	subi	r30, 0xB3	; 179
    2f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7e:	60 81       	ld	r22, Z
    2f80:	71 81       	ldd	r23, Z+1	; 0x01
    2f82:	82 81       	ldd	r24, Z+2	; 0x02
    2f84:	93 81       	ldd	r25, Z+3	; 0x03
    2f86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f8a:	dc 01       	movw	r26, r24
    2f8c:	cb 01       	movw	r24, r22
    2f8e:	f8 01       	movw	r30, r16
    2f90:	91 83       	std	Z+1, r25	; 0x01
    2f92:	80 83       	st	Z, r24
    2f94:	de 01       	movw	r26, r28
    2f96:	a9 5b       	subi	r26, 0xB9	; 185
    2f98:	bf 4f       	sbci	r27, 0xFF	; 255
    2f9a:	fe 01       	movw	r30, r28
    2f9c:	e5 5b       	subi	r30, 0xB5	; 181
    2f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa0:	80 81       	ld	r24, Z
    2fa2:	91 81       	ldd	r25, Z+1	; 0x01
    2fa4:	8d 93       	st	X+, r24
    2fa6:	9c 93       	st	X, r25
    2fa8:	fe 01       	movw	r30, r28
    2faa:	e9 5b       	subi	r30, 0xB9	; 185
    2fac:	ff 4f       	sbci	r31, 0xFF	; 255
    2fae:	80 81       	ld	r24, Z
    2fb0:	91 81       	ldd	r25, Z+1	; 0x01
    2fb2:	01 97       	sbiw	r24, 0x01	; 1
    2fb4:	f1 f7       	brne	.-4      	; 0x2fb2 <LCD_displayCharacter+0x2f4>
    2fb6:	fe 01       	movw	r30, r28
    2fb8:	e9 5b       	subi	r30, 0xB9	; 185
    2fba:	ff 4f       	sbci	r31, 0xFF	; 255
    2fbc:	91 83       	std	Z+1, r25	; 0x01
    2fbe:	80 83       	st	Z, r24
	_delay_ms(1);

	// Inserts the data in the assigned PORT to be sent to the LCD
	// Inserts the data in the assigned PORT to be sent to the LCD
	if (LCD_BIT_MODE == 4) {
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 0), GET_BIT( data, 4 ));
    2fc0:	fe 01       	movw	r30, r28
    2fc2:	ed 59       	subi	r30, 0x9D	; 157
    2fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc6:	80 81       	ld	r24, Z
    2fc8:	82 95       	swap	r24
    2fca:	8f 70       	andi	r24, 0x0F	; 15
    2fcc:	98 2f       	mov	r25, r24
    2fce:	91 70       	andi	r25, 0x01	; 1
    2fd0:	80 e0       	ldi	r24, 0x00	; 0
    2fd2:	63 e0       	ldi	r22, 0x03	; 3
    2fd4:	49 2f       	mov	r20, r25
    2fd6:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 1), GET_BIT( data, 5 ));
    2fda:	fe 01       	movw	r30, r28
    2fdc:	ed 59       	subi	r30, 0x9D	; 157
    2fde:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe0:	80 81       	ld	r24, Z
    2fe2:	82 95       	swap	r24
    2fe4:	86 95       	lsr	r24
    2fe6:	87 70       	andi	r24, 0x07	; 7
    2fe8:	98 2f       	mov	r25, r24
    2fea:	91 70       	andi	r25, 0x01	; 1
    2fec:	80 e0       	ldi	r24, 0x00	; 0
    2fee:	64 e0       	ldi	r22, 0x04	; 4
    2ff0:	49 2f       	mov	r20, r25
    2ff2:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 2), GET_BIT( data, 6 ));
    2ff6:	fe 01       	movw	r30, r28
    2ff8:	ed 59       	subi	r30, 0x9D	; 157
    2ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffc:	80 81       	ld	r24, Z
    2ffe:	82 95       	swap	r24
    3000:	86 95       	lsr	r24
    3002:	86 95       	lsr	r24
    3004:	83 70       	andi	r24, 0x03	; 3
    3006:	98 2f       	mov	r25, r24
    3008:	91 70       	andi	r25, 0x01	; 1
    300a:	80 e0       	ldi	r24, 0x00	; 0
    300c:	65 e0       	ldi	r22, 0x05	; 5
    300e:	49 2f       	mov	r20, r25
    3010:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 3), GET_BIT( data, 7 ));
    3014:	fe 01       	movw	r30, r28
    3016:	ed 59       	subi	r30, 0x9D	; 157
    3018:	ff 4f       	sbci	r31, 0xFF	; 255
    301a:	80 81       	ld	r24, Z
    301c:	98 2f       	mov	r25, r24
    301e:	99 1f       	adc	r25, r25
    3020:	99 27       	eor	r25, r25
    3022:	99 1f       	adc	r25, r25
    3024:	80 e0       	ldi	r24, 0x00	; 0
    3026:	66 e0       	ldi	r22, 0x06	; 6
    3028:	49 2f       	mov	r20, r25
    302a:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
    302e:	fe 01       	movw	r30, r28
    3030:	ed 5b       	subi	r30, 0xBD	; 189
    3032:	ff 4f       	sbci	r31, 0xFF	; 255
    3034:	80 e0       	ldi	r24, 0x00	; 0
    3036:	90 e0       	ldi	r25, 0x00	; 0
    3038:	a0 e8       	ldi	r26, 0x80	; 128
    303a:	bf e3       	ldi	r27, 0x3F	; 63
    303c:	80 83       	st	Z, r24
    303e:	91 83       	std	Z+1, r25	; 0x01
    3040:	a2 83       	std	Z+2, r26	; 0x02
    3042:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3044:	8e 01       	movw	r16, r28
    3046:	01 5c       	subi	r16, 0xC1	; 193
    3048:	1f 4f       	sbci	r17, 0xFF	; 255
    304a:	fe 01       	movw	r30, r28
    304c:	ed 5b       	subi	r30, 0xBD	; 189
    304e:	ff 4f       	sbci	r31, 0xFF	; 255
    3050:	60 81       	ld	r22, Z
    3052:	71 81       	ldd	r23, Z+1	; 0x01
    3054:	82 81       	ldd	r24, Z+2	; 0x02
    3056:	93 81       	ldd	r25, Z+3	; 0x03
    3058:	20 e0       	ldi	r18, 0x00	; 0
    305a:	30 e0       	ldi	r19, 0x00	; 0
    305c:	4a e7       	ldi	r20, 0x7A	; 122
    305e:	53 e4       	ldi	r21, 0x43	; 67
    3060:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3064:	dc 01       	movw	r26, r24
    3066:	cb 01       	movw	r24, r22
    3068:	f8 01       	movw	r30, r16
    306a:	80 83       	st	Z, r24
    306c:	91 83       	std	Z+1, r25	; 0x01
    306e:	a2 83       	std	Z+2, r26	; 0x02
    3070:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3072:	fe 01       	movw	r30, r28
    3074:	ff 96       	adiw	r30, 0x3f	; 63
    3076:	60 81       	ld	r22, Z
    3078:	71 81       	ldd	r23, Z+1	; 0x01
    307a:	82 81       	ldd	r24, Z+2	; 0x02
    307c:	93 81       	ldd	r25, Z+3	; 0x03
    307e:	20 e0       	ldi	r18, 0x00	; 0
    3080:	30 e0       	ldi	r19, 0x00	; 0
    3082:	40 e8       	ldi	r20, 0x80	; 128
    3084:	5f e3       	ldi	r21, 0x3F	; 63
    3086:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    308a:	88 23       	and	r24, r24
    308c:	2c f4       	brge	.+10     	; 0x3098 <LCD_displayCharacter+0x3da>
		__ticks = 1;
    308e:	81 e0       	ldi	r24, 0x01	; 1
    3090:	90 e0       	ldi	r25, 0x00	; 0
    3092:	9e af       	std	Y+62, r25	; 0x3e
    3094:	8d af       	std	Y+61, r24	; 0x3d
    3096:	46 c0       	rjmp	.+140    	; 0x3124 <LCD_displayCharacter+0x466>
	else if (__tmp > 65535)
    3098:	fe 01       	movw	r30, r28
    309a:	ff 96       	adiw	r30, 0x3f	; 63
    309c:	60 81       	ld	r22, Z
    309e:	71 81       	ldd	r23, Z+1	; 0x01
    30a0:	82 81       	ldd	r24, Z+2	; 0x02
    30a2:	93 81       	ldd	r25, Z+3	; 0x03
    30a4:	20 e0       	ldi	r18, 0x00	; 0
    30a6:	3f ef       	ldi	r19, 0xFF	; 255
    30a8:	4f e7       	ldi	r20, 0x7F	; 127
    30aa:	57 e4       	ldi	r21, 0x47	; 71
    30ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30b0:	18 16       	cp	r1, r24
    30b2:	64 f5       	brge	.+88     	; 0x310c <LCD_displayCharacter+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30b4:	fe 01       	movw	r30, r28
    30b6:	ed 5b       	subi	r30, 0xBD	; 189
    30b8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ba:	60 81       	ld	r22, Z
    30bc:	71 81       	ldd	r23, Z+1	; 0x01
    30be:	82 81       	ldd	r24, Z+2	; 0x02
    30c0:	93 81       	ldd	r25, Z+3	; 0x03
    30c2:	20 e0       	ldi	r18, 0x00	; 0
    30c4:	30 e0       	ldi	r19, 0x00	; 0
    30c6:	40 e2       	ldi	r20, 0x20	; 32
    30c8:	51 e4       	ldi	r21, 0x41	; 65
    30ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ce:	dc 01       	movw	r26, r24
    30d0:	cb 01       	movw	r24, r22
    30d2:	bc 01       	movw	r22, r24
    30d4:	cd 01       	movw	r24, r26
    30d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30da:	dc 01       	movw	r26, r24
    30dc:	cb 01       	movw	r24, r22
    30de:	9e af       	std	Y+62, r25	; 0x3e
    30e0:	8d af       	std	Y+61, r24	; 0x3d
    30e2:	0f c0       	rjmp	.+30     	; 0x3102 <LCD_displayCharacter+0x444>
    30e4:	89 e1       	ldi	r24, 0x19	; 25
    30e6:	90 e0       	ldi	r25, 0x00	; 0
    30e8:	9c af       	std	Y+60, r25	; 0x3c
    30ea:	8b af       	std	Y+59, r24	; 0x3b
    30ec:	8b ad       	ldd	r24, Y+59	; 0x3b
    30ee:	9c ad       	ldd	r25, Y+60	; 0x3c
    30f0:	01 97       	sbiw	r24, 0x01	; 1
    30f2:	f1 f7       	brne	.-4      	; 0x30f0 <LCD_displayCharacter+0x432>
    30f4:	9c af       	std	Y+60, r25	; 0x3c
    30f6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30f8:	8d ad       	ldd	r24, Y+61	; 0x3d
    30fa:	9e ad       	ldd	r25, Y+62	; 0x3e
    30fc:	01 97       	sbiw	r24, 0x01	; 1
    30fe:	9e af       	std	Y+62, r25	; 0x3e
    3100:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3102:	8d ad       	ldd	r24, Y+61	; 0x3d
    3104:	9e ad       	ldd	r25, Y+62	; 0x3e
    3106:	00 97       	sbiw	r24, 0x00	; 0
    3108:	69 f7       	brne	.-38     	; 0x30e4 <LCD_displayCharacter+0x426>
    310a:	16 c0       	rjmp	.+44     	; 0x3138 <LCD_displayCharacter+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    310c:	fe 01       	movw	r30, r28
    310e:	ff 96       	adiw	r30, 0x3f	; 63
    3110:	60 81       	ld	r22, Z
    3112:	71 81       	ldd	r23, Z+1	; 0x01
    3114:	82 81       	ldd	r24, Z+2	; 0x02
    3116:	93 81       	ldd	r25, Z+3	; 0x03
    3118:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    311c:	dc 01       	movw	r26, r24
    311e:	cb 01       	movw	r24, r22
    3120:	9e af       	std	Y+62, r25	; 0x3e
    3122:	8d af       	std	Y+61, r24	; 0x3d
    3124:	8d ad       	ldd	r24, Y+61	; 0x3d
    3126:	9e ad       	ldd	r25, Y+62	; 0x3e
    3128:	9a af       	std	Y+58, r25	; 0x3a
    312a:	89 af       	std	Y+57, r24	; 0x39
    312c:	89 ad       	ldd	r24, Y+57	; 0x39
    312e:	9a ad       	ldd	r25, Y+58	; 0x3a
    3130:	01 97       	sbiw	r24, 0x01	; 1
    3132:	f1 f7       	brne	.-4      	; 0x3130 <LCD_displayCharacter+0x472>
    3134:	9a af       	std	Y+58, r25	; 0x3a
    3136:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(1);

		// Clear Enable Pin to '0'
		GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
    3138:	80 e0       	ldi	r24, 0x00	; 0
    313a:	62 e0       	ldi	r22, 0x02	; 2
    313c:	40 e0       	ldi	r20, 0x00	; 0
    313e:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
    3142:	80 e0       	ldi	r24, 0x00	; 0
    3144:	90 e0       	ldi	r25, 0x00	; 0
    3146:	a0 e8       	ldi	r26, 0x80	; 128
    3148:	bf e3       	ldi	r27, 0x3F	; 63
    314a:	8d ab       	std	Y+53, r24	; 0x35
    314c:	9e ab       	std	Y+54, r25	; 0x36
    314e:	af ab       	std	Y+55, r26	; 0x37
    3150:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3152:	6d a9       	ldd	r22, Y+53	; 0x35
    3154:	7e a9       	ldd	r23, Y+54	; 0x36
    3156:	8f a9       	ldd	r24, Y+55	; 0x37
    3158:	98 ad       	ldd	r25, Y+56	; 0x38
    315a:	20 e0       	ldi	r18, 0x00	; 0
    315c:	30 e0       	ldi	r19, 0x00	; 0
    315e:	4a e7       	ldi	r20, 0x7A	; 122
    3160:	53 e4       	ldi	r21, 0x43	; 67
    3162:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3166:	dc 01       	movw	r26, r24
    3168:	cb 01       	movw	r24, r22
    316a:	89 ab       	std	Y+49, r24	; 0x31
    316c:	9a ab       	std	Y+50, r25	; 0x32
    316e:	ab ab       	std	Y+51, r26	; 0x33
    3170:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3172:	69 a9       	ldd	r22, Y+49	; 0x31
    3174:	7a a9       	ldd	r23, Y+50	; 0x32
    3176:	8b a9       	ldd	r24, Y+51	; 0x33
    3178:	9c a9       	ldd	r25, Y+52	; 0x34
    317a:	20 e0       	ldi	r18, 0x00	; 0
    317c:	30 e0       	ldi	r19, 0x00	; 0
    317e:	40 e8       	ldi	r20, 0x80	; 128
    3180:	5f e3       	ldi	r21, 0x3F	; 63
    3182:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3186:	88 23       	and	r24, r24
    3188:	2c f4       	brge	.+10     	; 0x3194 <LCD_displayCharacter+0x4d6>
		__ticks = 1;
    318a:	81 e0       	ldi	r24, 0x01	; 1
    318c:	90 e0       	ldi	r25, 0x00	; 0
    318e:	98 ab       	std	Y+48, r25	; 0x30
    3190:	8f a7       	std	Y+47, r24	; 0x2f
    3192:	3f c0       	rjmp	.+126    	; 0x3212 <LCD_displayCharacter+0x554>
	else if (__tmp > 65535)
    3194:	69 a9       	ldd	r22, Y+49	; 0x31
    3196:	7a a9       	ldd	r23, Y+50	; 0x32
    3198:	8b a9       	ldd	r24, Y+51	; 0x33
    319a:	9c a9       	ldd	r25, Y+52	; 0x34
    319c:	20 e0       	ldi	r18, 0x00	; 0
    319e:	3f ef       	ldi	r19, 0xFF	; 255
    31a0:	4f e7       	ldi	r20, 0x7F	; 127
    31a2:	57 e4       	ldi	r21, 0x47	; 71
    31a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31a8:	18 16       	cp	r1, r24
    31aa:	4c f5       	brge	.+82     	; 0x31fe <LCD_displayCharacter+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31ac:	6d a9       	ldd	r22, Y+53	; 0x35
    31ae:	7e a9       	ldd	r23, Y+54	; 0x36
    31b0:	8f a9       	ldd	r24, Y+55	; 0x37
    31b2:	98 ad       	ldd	r25, Y+56	; 0x38
    31b4:	20 e0       	ldi	r18, 0x00	; 0
    31b6:	30 e0       	ldi	r19, 0x00	; 0
    31b8:	40 e2       	ldi	r20, 0x20	; 32
    31ba:	51 e4       	ldi	r21, 0x41	; 65
    31bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31c0:	dc 01       	movw	r26, r24
    31c2:	cb 01       	movw	r24, r22
    31c4:	bc 01       	movw	r22, r24
    31c6:	cd 01       	movw	r24, r26
    31c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31cc:	dc 01       	movw	r26, r24
    31ce:	cb 01       	movw	r24, r22
    31d0:	98 ab       	std	Y+48, r25	; 0x30
    31d2:	8f a7       	std	Y+47, r24	; 0x2f
    31d4:	0f c0       	rjmp	.+30     	; 0x31f4 <LCD_displayCharacter+0x536>
    31d6:	89 e1       	ldi	r24, 0x19	; 25
    31d8:	90 e0       	ldi	r25, 0x00	; 0
    31da:	9e a7       	std	Y+46, r25	; 0x2e
    31dc:	8d a7       	std	Y+45, r24	; 0x2d
    31de:	8d a5       	ldd	r24, Y+45	; 0x2d
    31e0:	9e a5       	ldd	r25, Y+46	; 0x2e
    31e2:	01 97       	sbiw	r24, 0x01	; 1
    31e4:	f1 f7       	brne	.-4      	; 0x31e2 <LCD_displayCharacter+0x524>
    31e6:	9e a7       	std	Y+46, r25	; 0x2e
    31e8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    31ec:	98 a9       	ldd	r25, Y+48	; 0x30
    31ee:	01 97       	sbiw	r24, 0x01	; 1
    31f0:	98 ab       	std	Y+48, r25	; 0x30
    31f2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    31f6:	98 a9       	ldd	r25, Y+48	; 0x30
    31f8:	00 97       	sbiw	r24, 0x00	; 0
    31fa:	69 f7       	brne	.-38     	; 0x31d6 <LCD_displayCharacter+0x518>
    31fc:	14 c0       	rjmp	.+40     	; 0x3226 <LCD_displayCharacter+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31fe:	69 a9       	ldd	r22, Y+49	; 0x31
    3200:	7a a9       	ldd	r23, Y+50	; 0x32
    3202:	8b a9       	ldd	r24, Y+51	; 0x33
    3204:	9c a9       	ldd	r25, Y+52	; 0x34
    3206:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    320a:	dc 01       	movw	r26, r24
    320c:	cb 01       	movw	r24, r22
    320e:	98 ab       	std	Y+48, r25	; 0x30
    3210:	8f a7       	std	Y+47, r24	; 0x2f
    3212:	8f a5       	ldd	r24, Y+47	; 0x2f
    3214:	98 a9       	ldd	r25, Y+48	; 0x30
    3216:	9c a7       	std	Y+44, r25	; 0x2c
    3218:	8b a7       	std	Y+43, r24	; 0x2b
    321a:	8b a5       	ldd	r24, Y+43	; 0x2b
    321c:	9c a5       	ldd	r25, Y+44	; 0x2c
    321e:	01 97       	sbiw	r24, 0x01	; 1
    3220:	f1 f7       	brne	.-4      	; 0x321e <LCD_displayCharacter+0x560>
    3222:	9c a7       	std	Y+44, r25	; 0x2c
    3224:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1); /* delay for processing Th = 13ns */

		// Set Enable Pin to '1'
		GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
    3226:	80 e0       	ldi	r24, 0x00	; 0
    3228:	62 e0       	ldi	r22, 0x02	; 2
    322a:	41 e0       	ldi	r20, 0x01	; 1
    322c:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
    3230:	80 e0       	ldi	r24, 0x00	; 0
    3232:	90 e0       	ldi	r25, 0x00	; 0
    3234:	a0 e8       	ldi	r26, 0x80	; 128
    3236:	bf e3       	ldi	r27, 0x3F	; 63
    3238:	8f a3       	std	Y+39, r24	; 0x27
    323a:	98 a7       	std	Y+40, r25	; 0x28
    323c:	a9 a7       	std	Y+41, r26	; 0x29
    323e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3240:	6f a1       	ldd	r22, Y+39	; 0x27
    3242:	78 a5       	ldd	r23, Y+40	; 0x28
    3244:	89 a5       	ldd	r24, Y+41	; 0x29
    3246:	9a a5       	ldd	r25, Y+42	; 0x2a
    3248:	20 e0       	ldi	r18, 0x00	; 0
    324a:	30 e0       	ldi	r19, 0x00	; 0
    324c:	4a e7       	ldi	r20, 0x7A	; 122
    324e:	53 e4       	ldi	r21, 0x43	; 67
    3250:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3254:	dc 01       	movw	r26, r24
    3256:	cb 01       	movw	r24, r22
    3258:	8b a3       	std	Y+35, r24	; 0x23
    325a:	9c a3       	std	Y+36, r25	; 0x24
    325c:	ad a3       	std	Y+37, r26	; 0x25
    325e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3260:	6b a1       	ldd	r22, Y+35	; 0x23
    3262:	7c a1       	ldd	r23, Y+36	; 0x24
    3264:	8d a1       	ldd	r24, Y+37	; 0x25
    3266:	9e a1       	ldd	r25, Y+38	; 0x26
    3268:	20 e0       	ldi	r18, 0x00	; 0
    326a:	30 e0       	ldi	r19, 0x00	; 0
    326c:	40 e8       	ldi	r20, 0x80	; 128
    326e:	5f e3       	ldi	r21, 0x3F	; 63
    3270:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3274:	88 23       	and	r24, r24
    3276:	2c f4       	brge	.+10     	; 0x3282 <LCD_displayCharacter+0x5c4>
		__ticks = 1;
    3278:	81 e0       	ldi	r24, 0x01	; 1
    327a:	90 e0       	ldi	r25, 0x00	; 0
    327c:	9a a3       	std	Y+34, r25	; 0x22
    327e:	89 a3       	std	Y+33, r24	; 0x21
    3280:	3f c0       	rjmp	.+126    	; 0x3300 <LCD_displayCharacter+0x642>
	else if (__tmp > 65535)
    3282:	6b a1       	ldd	r22, Y+35	; 0x23
    3284:	7c a1       	ldd	r23, Y+36	; 0x24
    3286:	8d a1       	ldd	r24, Y+37	; 0x25
    3288:	9e a1       	ldd	r25, Y+38	; 0x26
    328a:	20 e0       	ldi	r18, 0x00	; 0
    328c:	3f ef       	ldi	r19, 0xFF	; 255
    328e:	4f e7       	ldi	r20, 0x7F	; 127
    3290:	57 e4       	ldi	r21, 0x47	; 71
    3292:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3296:	18 16       	cp	r1, r24
    3298:	4c f5       	brge	.+82     	; 0x32ec <LCD_displayCharacter+0x62e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    329a:	6f a1       	ldd	r22, Y+39	; 0x27
    329c:	78 a5       	ldd	r23, Y+40	; 0x28
    329e:	89 a5       	ldd	r24, Y+41	; 0x29
    32a0:	9a a5       	ldd	r25, Y+42	; 0x2a
    32a2:	20 e0       	ldi	r18, 0x00	; 0
    32a4:	30 e0       	ldi	r19, 0x00	; 0
    32a6:	40 e2       	ldi	r20, 0x20	; 32
    32a8:	51 e4       	ldi	r21, 0x41	; 65
    32aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32ae:	dc 01       	movw	r26, r24
    32b0:	cb 01       	movw	r24, r22
    32b2:	bc 01       	movw	r22, r24
    32b4:	cd 01       	movw	r24, r26
    32b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ba:	dc 01       	movw	r26, r24
    32bc:	cb 01       	movw	r24, r22
    32be:	9a a3       	std	Y+34, r25	; 0x22
    32c0:	89 a3       	std	Y+33, r24	; 0x21
    32c2:	0f c0       	rjmp	.+30     	; 0x32e2 <LCD_displayCharacter+0x624>
    32c4:	89 e1       	ldi	r24, 0x19	; 25
    32c6:	90 e0       	ldi	r25, 0x00	; 0
    32c8:	98 a3       	std	Y+32, r25	; 0x20
    32ca:	8f 8f       	std	Y+31, r24	; 0x1f
    32cc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    32ce:	98 a1       	ldd	r25, Y+32	; 0x20
    32d0:	01 97       	sbiw	r24, 0x01	; 1
    32d2:	f1 f7       	brne	.-4      	; 0x32d0 <LCD_displayCharacter+0x612>
    32d4:	98 a3       	std	Y+32, r25	; 0x20
    32d6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32d8:	89 a1       	ldd	r24, Y+33	; 0x21
    32da:	9a a1       	ldd	r25, Y+34	; 0x22
    32dc:	01 97       	sbiw	r24, 0x01	; 1
    32de:	9a a3       	std	Y+34, r25	; 0x22
    32e0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32e2:	89 a1       	ldd	r24, Y+33	; 0x21
    32e4:	9a a1       	ldd	r25, Y+34	; 0x22
    32e6:	00 97       	sbiw	r24, 0x00	; 0
    32e8:	69 f7       	brne	.-38     	; 0x32c4 <LCD_displayCharacter+0x606>
    32ea:	14 c0       	rjmp	.+40     	; 0x3314 <LCD_displayCharacter+0x656>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32ec:	6b a1       	ldd	r22, Y+35	; 0x23
    32ee:	7c a1       	ldd	r23, Y+36	; 0x24
    32f0:	8d a1       	ldd	r24, Y+37	; 0x25
    32f2:	9e a1       	ldd	r25, Y+38	; 0x26
    32f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32f8:	dc 01       	movw	r26, r24
    32fa:	cb 01       	movw	r24, r22
    32fc:	9a a3       	std	Y+34, r25	; 0x22
    32fe:	89 a3       	std	Y+33, r24	; 0x21
    3300:	89 a1       	ldd	r24, Y+33	; 0x21
    3302:	9a a1       	ldd	r25, Y+34	; 0x22
    3304:	9e 8f       	std	Y+30, r25	; 0x1e
    3306:	8d 8f       	std	Y+29, r24	; 0x1d
    3308:	8d 8d       	ldd	r24, Y+29	; 0x1d
    330a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    330c:	01 97       	sbiw	r24, 0x01	; 1
    330e:	f1 f7       	brne	.-4      	; 0x330c <LCD_displayCharacter+0x64e>
    3310:	9e 8f       	std	Y+30, r25	; 0x1e
    3312:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 0), GET_BIT( data, 0 ));
    3314:	fe 01       	movw	r30, r28
    3316:	ed 59       	subi	r30, 0x9D	; 157
    3318:	ff 4f       	sbci	r31, 0xFF	; 255
    331a:	80 81       	ld	r24, Z
    331c:	98 2f       	mov	r25, r24
    331e:	91 70       	andi	r25, 0x01	; 1
    3320:	80 e0       	ldi	r24, 0x00	; 0
    3322:	63 e0       	ldi	r22, 0x03	; 3
    3324:	49 2f       	mov	r20, r25
    3326:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 1), GET_BIT( data, 1 ));
    332a:	fe 01       	movw	r30, r28
    332c:	ed 59       	subi	r30, 0x9D	; 157
    332e:	ff 4f       	sbci	r31, 0xFF	; 255
    3330:	80 81       	ld	r24, Z
    3332:	86 95       	lsr	r24
    3334:	98 2f       	mov	r25, r24
    3336:	91 70       	andi	r25, 0x01	; 1
    3338:	80 e0       	ldi	r24, 0x00	; 0
    333a:	64 e0       	ldi	r22, 0x04	; 4
    333c:	49 2f       	mov	r20, r25
    333e:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 2), GET_BIT( data, 2 ));
    3342:	fe 01       	movw	r30, r28
    3344:	ed 59       	subi	r30, 0x9D	; 157
    3346:	ff 4f       	sbci	r31, 0xFF	; 255
    3348:	80 81       	ld	r24, Z
    334a:	86 95       	lsr	r24
    334c:	86 95       	lsr	r24
    334e:	98 2f       	mov	r25, r24
    3350:	91 70       	andi	r25, 0x01	; 1
    3352:	80 e0       	ldi	r24, 0x00	; 0
    3354:	65 e0       	ldi	r22, 0x05	; 5
    3356:	49 2f       	mov	r20, r25
    3358:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 3), GET_BIT( data, 3 ));
    335c:	fe 01       	movw	r30, r28
    335e:	ed 59       	subi	r30, 0x9D	; 157
    3360:	ff 4f       	sbci	r31, 0xFF	; 255
    3362:	80 81       	ld	r24, Z
    3364:	86 95       	lsr	r24
    3366:	86 95       	lsr	r24
    3368:	86 95       	lsr	r24
    336a:	98 2f       	mov	r25, r24
    336c:	91 70       	andi	r25, 0x01	; 1
    336e:	80 e0       	ldi	r24, 0x00	; 0
    3370:	66 e0       	ldi	r22, 0x06	; 6
    3372:	49 2f       	mov	r20, r25
    3374:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
    3378:	80 e0       	ldi	r24, 0x00	; 0
    337a:	90 e0       	ldi	r25, 0x00	; 0
    337c:	a0 e8       	ldi	r26, 0x80	; 128
    337e:	bf e3       	ldi	r27, 0x3F	; 63
    3380:	89 8f       	std	Y+25, r24	; 0x19
    3382:	9a 8f       	std	Y+26, r25	; 0x1a
    3384:	ab 8f       	std	Y+27, r26	; 0x1b
    3386:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3388:	69 8d       	ldd	r22, Y+25	; 0x19
    338a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    338c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    338e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3390:	20 e0       	ldi	r18, 0x00	; 0
    3392:	30 e0       	ldi	r19, 0x00	; 0
    3394:	4a e7       	ldi	r20, 0x7A	; 122
    3396:	53 e4       	ldi	r21, 0x43	; 67
    3398:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    339c:	dc 01       	movw	r26, r24
    339e:	cb 01       	movw	r24, r22
    33a0:	8d 8b       	std	Y+21, r24	; 0x15
    33a2:	9e 8b       	std	Y+22, r25	; 0x16
    33a4:	af 8b       	std	Y+23, r26	; 0x17
    33a6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    33a8:	6d 89       	ldd	r22, Y+21	; 0x15
    33aa:	7e 89       	ldd	r23, Y+22	; 0x16
    33ac:	8f 89       	ldd	r24, Y+23	; 0x17
    33ae:	98 8d       	ldd	r25, Y+24	; 0x18
    33b0:	20 e0       	ldi	r18, 0x00	; 0
    33b2:	30 e0       	ldi	r19, 0x00	; 0
    33b4:	40 e8       	ldi	r20, 0x80	; 128
    33b6:	5f e3       	ldi	r21, 0x3F	; 63
    33b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33bc:	88 23       	and	r24, r24
    33be:	2c f4       	brge	.+10     	; 0x33ca <LCD_displayCharacter+0x70c>
		__ticks = 1;
    33c0:	81 e0       	ldi	r24, 0x01	; 1
    33c2:	90 e0       	ldi	r25, 0x00	; 0
    33c4:	9c 8b       	std	Y+20, r25	; 0x14
    33c6:	8b 8b       	std	Y+19, r24	; 0x13
    33c8:	3f c0       	rjmp	.+126    	; 0x3448 <LCD_displayCharacter+0x78a>
	else if (__tmp > 65535)
    33ca:	6d 89       	ldd	r22, Y+21	; 0x15
    33cc:	7e 89       	ldd	r23, Y+22	; 0x16
    33ce:	8f 89       	ldd	r24, Y+23	; 0x17
    33d0:	98 8d       	ldd	r25, Y+24	; 0x18
    33d2:	20 e0       	ldi	r18, 0x00	; 0
    33d4:	3f ef       	ldi	r19, 0xFF	; 255
    33d6:	4f e7       	ldi	r20, 0x7F	; 127
    33d8:	57 e4       	ldi	r21, 0x47	; 71
    33da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33de:	18 16       	cp	r1, r24
    33e0:	4c f5       	brge	.+82     	; 0x3434 <LCD_displayCharacter+0x776>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33e2:	69 8d       	ldd	r22, Y+25	; 0x19
    33e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33ea:	20 e0       	ldi	r18, 0x00	; 0
    33ec:	30 e0       	ldi	r19, 0x00	; 0
    33ee:	40 e2       	ldi	r20, 0x20	; 32
    33f0:	51 e4       	ldi	r21, 0x41	; 65
    33f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33f6:	dc 01       	movw	r26, r24
    33f8:	cb 01       	movw	r24, r22
    33fa:	bc 01       	movw	r22, r24
    33fc:	cd 01       	movw	r24, r26
    33fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3402:	dc 01       	movw	r26, r24
    3404:	cb 01       	movw	r24, r22
    3406:	9c 8b       	std	Y+20, r25	; 0x14
    3408:	8b 8b       	std	Y+19, r24	; 0x13
    340a:	0f c0       	rjmp	.+30     	; 0x342a <LCD_displayCharacter+0x76c>
    340c:	89 e1       	ldi	r24, 0x19	; 25
    340e:	90 e0       	ldi	r25, 0x00	; 0
    3410:	9a 8b       	std	Y+18, r25	; 0x12
    3412:	89 8b       	std	Y+17, r24	; 0x11
    3414:	89 89       	ldd	r24, Y+17	; 0x11
    3416:	9a 89       	ldd	r25, Y+18	; 0x12
    3418:	01 97       	sbiw	r24, 0x01	; 1
    341a:	f1 f7       	brne	.-4      	; 0x3418 <LCD_displayCharacter+0x75a>
    341c:	9a 8b       	std	Y+18, r25	; 0x12
    341e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3420:	8b 89       	ldd	r24, Y+19	; 0x13
    3422:	9c 89       	ldd	r25, Y+20	; 0x14
    3424:	01 97       	sbiw	r24, 0x01	; 1
    3426:	9c 8b       	std	Y+20, r25	; 0x14
    3428:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    342a:	8b 89       	ldd	r24, Y+19	; 0x13
    342c:	9c 89       	ldd	r25, Y+20	; 0x14
    342e:	00 97       	sbiw	r24, 0x00	; 0
    3430:	69 f7       	brne	.-38     	; 0x340c <LCD_displayCharacter+0x74e>
    3432:	14 c0       	rjmp	.+40     	; 0x345c <LCD_displayCharacter+0x79e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3434:	6d 89       	ldd	r22, Y+21	; 0x15
    3436:	7e 89       	ldd	r23, Y+22	; 0x16
    3438:	8f 89       	ldd	r24, Y+23	; 0x17
    343a:	98 8d       	ldd	r25, Y+24	; 0x18
    343c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3440:	dc 01       	movw	r26, r24
    3442:	cb 01       	movw	r24, r22
    3444:	9c 8b       	std	Y+20, r25	; 0x14
    3446:	8b 8b       	std	Y+19, r24	; 0x13
    3448:	8b 89       	ldd	r24, Y+19	; 0x13
    344a:	9c 89       	ldd	r25, Y+20	; 0x14
    344c:	98 8b       	std	Y+16, r25	; 0x10
    344e:	8f 87       	std	Y+15, r24	; 0x0f
    3450:	8f 85       	ldd	r24, Y+15	; 0x0f
    3452:	98 89       	ldd	r25, Y+16	; 0x10
    3454:	01 97       	sbiw	r24, 0x01	; 1
    3456:	f1 f7       	brne	.-4      	; 0x3454 <LCD_displayCharacter+0x796>
    3458:	98 8b       	std	Y+16, r25	; 0x10
    345a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1); /* delay for processing Tdsw = 100ns */

		// Clear Enable Pin to '0'
		GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
    345c:	80 e0       	ldi	r24, 0x00	; 0
    345e:	62 e0       	ldi	r22, 0x02	; 2
    3460:	40 e0       	ldi	r20, 0x00	; 0
    3462:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>
    3466:	80 e0       	ldi	r24, 0x00	; 0
    3468:	90 e0       	ldi	r25, 0x00	; 0
    346a:	a0 e8       	ldi	r26, 0x80	; 128
    346c:	bf e3       	ldi	r27, 0x3F	; 63
    346e:	8b 87       	std	Y+11, r24	; 0x0b
    3470:	9c 87       	std	Y+12, r25	; 0x0c
    3472:	ad 87       	std	Y+13, r26	; 0x0d
    3474:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3476:	6b 85       	ldd	r22, Y+11	; 0x0b
    3478:	7c 85       	ldd	r23, Y+12	; 0x0c
    347a:	8d 85       	ldd	r24, Y+13	; 0x0d
    347c:	9e 85       	ldd	r25, Y+14	; 0x0e
    347e:	20 e0       	ldi	r18, 0x00	; 0
    3480:	30 e0       	ldi	r19, 0x00	; 0
    3482:	4a e7       	ldi	r20, 0x7A	; 122
    3484:	53 e4       	ldi	r21, 0x43	; 67
    3486:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    348a:	dc 01       	movw	r26, r24
    348c:	cb 01       	movw	r24, r22
    348e:	8f 83       	std	Y+7, r24	; 0x07
    3490:	98 87       	std	Y+8, r25	; 0x08
    3492:	a9 87       	std	Y+9, r26	; 0x09
    3494:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3496:	6f 81       	ldd	r22, Y+7	; 0x07
    3498:	78 85       	ldd	r23, Y+8	; 0x08
    349a:	89 85       	ldd	r24, Y+9	; 0x09
    349c:	9a 85       	ldd	r25, Y+10	; 0x0a
    349e:	20 e0       	ldi	r18, 0x00	; 0
    34a0:	30 e0       	ldi	r19, 0x00	; 0
    34a2:	40 e8       	ldi	r20, 0x80	; 128
    34a4:	5f e3       	ldi	r21, 0x3F	; 63
    34a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34aa:	88 23       	and	r24, r24
    34ac:	2c f4       	brge	.+10     	; 0x34b8 <LCD_displayCharacter+0x7fa>
		__ticks = 1;
    34ae:	81 e0       	ldi	r24, 0x01	; 1
    34b0:	90 e0       	ldi	r25, 0x00	; 0
    34b2:	9e 83       	std	Y+6, r25	; 0x06
    34b4:	8d 83       	std	Y+5, r24	; 0x05
    34b6:	3f c0       	rjmp	.+126    	; 0x3536 <LCD_displayCharacter+0x878>
	else if (__tmp > 65535)
    34b8:	6f 81       	ldd	r22, Y+7	; 0x07
    34ba:	78 85       	ldd	r23, Y+8	; 0x08
    34bc:	89 85       	ldd	r24, Y+9	; 0x09
    34be:	9a 85       	ldd	r25, Y+10	; 0x0a
    34c0:	20 e0       	ldi	r18, 0x00	; 0
    34c2:	3f ef       	ldi	r19, 0xFF	; 255
    34c4:	4f e7       	ldi	r20, 0x7F	; 127
    34c6:	57 e4       	ldi	r21, 0x47	; 71
    34c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34cc:	18 16       	cp	r1, r24
    34ce:	4c f5       	brge	.+82     	; 0x3522 <LCD_displayCharacter+0x864>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    34d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    34d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    34d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    34d8:	20 e0       	ldi	r18, 0x00	; 0
    34da:	30 e0       	ldi	r19, 0x00	; 0
    34dc:	40 e2       	ldi	r20, 0x20	; 32
    34de:	51 e4       	ldi	r21, 0x41	; 65
    34e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34e4:	dc 01       	movw	r26, r24
    34e6:	cb 01       	movw	r24, r22
    34e8:	bc 01       	movw	r22, r24
    34ea:	cd 01       	movw	r24, r26
    34ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34f0:	dc 01       	movw	r26, r24
    34f2:	cb 01       	movw	r24, r22
    34f4:	9e 83       	std	Y+6, r25	; 0x06
    34f6:	8d 83       	std	Y+5, r24	; 0x05
    34f8:	0f c0       	rjmp	.+30     	; 0x3518 <LCD_displayCharacter+0x85a>
    34fa:	89 e1       	ldi	r24, 0x19	; 25
    34fc:	90 e0       	ldi	r25, 0x00	; 0
    34fe:	9c 83       	std	Y+4, r25	; 0x04
    3500:	8b 83       	std	Y+3, r24	; 0x03
    3502:	8b 81       	ldd	r24, Y+3	; 0x03
    3504:	9c 81       	ldd	r25, Y+4	; 0x04
    3506:	01 97       	sbiw	r24, 0x01	; 1
    3508:	f1 f7       	brne	.-4      	; 0x3506 <LCD_displayCharacter+0x848>
    350a:	9c 83       	std	Y+4, r25	; 0x04
    350c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    350e:	8d 81       	ldd	r24, Y+5	; 0x05
    3510:	9e 81       	ldd	r25, Y+6	; 0x06
    3512:	01 97       	sbiw	r24, 0x01	; 1
    3514:	9e 83       	std	Y+6, r25	; 0x06
    3516:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3518:	8d 81       	ldd	r24, Y+5	; 0x05
    351a:	9e 81       	ldd	r25, Y+6	; 0x06
    351c:	00 97       	sbiw	r24, 0x00	; 0
    351e:	69 f7       	brne	.-38     	; 0x34fa <LCD_displayCharacter+0x83c>
    3520:	14 c0       	rjmp	.+40     	; 0x354a <LCD_displayCharacter+0x88c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3522:	6f 81       	ldd	r22, Y+7	; 0x07
    3524:	78 85       	ldd	r23, Y+8	; 0x08
    3526:	89 85       	ldd	r24, Y+9	; 0x09
    3528:	9a 85       	ldd	r25, Y+10	; 0x0a
    352a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    352e:	dc 01       	movw	r26, r24
    3530:	cb 01       	movw	r24, r22
    3532:	9e 83       	std	Y+6, r25	; 0x06
    3534:	8d 83       	std	Y+5, r24	; 0x05
    3536:	8d 81       	ldd	r24, Y+5	; 0x05
    3538:	9e 81       	ldd	r25, Y+6	; 0x06
    353a:	9a 83       	std	Y+2, r25	; 0x02
    353c:	89 83       	std	Y+1, r24	; 0x01
    353e:	89 81       	ldd	r24, Y+1	; 0x01
    3540:	9a 81       	ldd	r25, Y+2	; 0x02
    3542:	01 97       	sbiw	r24, 0x01	; 1
    3544:	f1 f7       	brne	.-4      	; 0x3542 <LCD_displayCharacter+0x884>
    3546:	9a 83       	std	Y+2, r25	; 0x02
    3548:	89 83       	std	Y+1, r24	; 0x01

		// Clear Enable Pin to '0'
		GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
		_delay_ms(1); /* delay for processing Th = 13ns */
	}
}
    354a:	cd 59       	subi	r28, 0x9D	; 157
    354c:	df 4f       	sbci	r29, 0xFF	; 255
    354e:	0f b6       	in	r0, 0x3f	; 63
    3550:	f8 94       	cli
    3552:	de bf       	out	0x3e, r29	; 62
    3554:	0f be       	out	0x3f, r0	; 63
    3556:	cd bf       	out	0x3d, r28	; 61
    3558:	cf 91       	pop	r28
    355a:	df 91       	pop	r29
    355c:	1f 91       	pop	r17
    355e:	0f 91       	pop	r16
    3560:	08 95       	ret

00003562 <LCD_displayString>:


// Displays a string on the LCD
void LCD_displayString(const char *str) {
    3562:	df 93       	push	r29
    3564:	cf 93       	push	r28
    3566:	00 d0       	rcall	.+0      	; 0x3568 <LCD_displayString+0x6>
    3568:	0f 92       	push	r0
    356a:	cd b7       	in	r28, 0x3d	; 61
    356c:	de b7       	in	r29, 0x3e	; 62
    356e:	9b 83       	std	Y+3, r25	; 0x03
    3570:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3572:	19 82       	std	Y+1, r1	; 0x01
    3574:	0e c0       	rjmp	.+28     	; 0x3592 <LCD_displayString+0x30>
	while(str[i] != '\0') {
		LCD_displayCharacter(str[i]);
    3576:	89 81       	ldd	r24, Y+1	; 0x01
    3578:	28 2f       	mov	r18, r24
    357a:	30 e0       	ldi	r19, 0x00	; 0
    357c:	8a 81       	ldd	r24, Y+2	; 0x02
    357e:	9b 81       	ldd	r25, Y+3	; 0x03
    3580:	fc 01       	movw	r30, r24
    3582:	e2 0f       	add	r30, r18
    3584:	f3 1f       	adc	r31, r19
    3586:	80 81       	ld	r24, Z
    3588:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <LCD_displayCharacter>
		i++;
    358c:	89 81       	ldd	r24, Y+1	; 0x01
    358e:	8f 5f       	subi	r24, 0xFF	; 255
    3590:	89 83       	std	Y+1, r24	; 0x01


// Displays a string on the LCD
void LCD_displayString(const char *str) {
	uint8 i = 0;
	while(str[i] != '\0') {
    3592:	89 81       	ldd	r24, Y+1	; 0x01
    3594:	28 2f       	mov	r18, r24
    3596:	30 e0       	ldi	r19, 0x00	; 0
    3598:	8a 81       	ldd	r24, Y+2	; 0x02
    359a:	9b 81       	ldd	r25, Y+3	; 0x03
    359c:	fc 01       	movw	r30, r24
    359e:	e2 0f       	add	r30, r18
    35a0:	f3 1f       	adc	r31, r19
    35a2:	80 81       	ld	r24, Z
    35a4:	88 23       	and	r24, r24
    35a6:	39 f7       	brne	.-50     	; 0x3576 <LCD_displayString+0x14>
	}
	/*
	for (int i = 0 ; i < strlen(str) ; i++) {
		LCD_displayCharacters(str[i]);
	}*/
}
    35a8:	0f 90       	pop	r0
    35aa:	0f 90       	pop	r0
    35ac:	0f 90       	pop	r0
    35ae:	cf 91       	pop	r28
    35b0:	df 91       	pop	r29
    35b2:	08 95       	ret

000035b4 <LCD_moveCursor>:


// Chooses where the cursor would stand on the LCD to type from it
void LCD_moveCursor(uint8 row, uint8 col) {
    35b4:	df 93       	push	r29
    35b6:	cf 93       	push	r28
    35b8:	00 d0       	rcall	.+0      	; 0x35ba <LCD_moveCursor+0x6>
    35ba:	00 d0       	rcall	.+0      	; 0x35bc <LCD_moveCursor+0x8>
    35bc:	0f 92       	push	r0
    35be:	cd b7       	in	r28, 0x3d	; 61
    35c0:	de b7       	in	r29, 0x3e	; 62
    35c2:	8a 83       	std	Y+2, r24	; 0x02
    35c4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 LCD_MEMORY_ADDRESS;

	// Calculate the required address in the LCD DDRAM checking
	// The location of the cursor originally on which line
	switch(row) {
    35c6:	8a 81       	ldd	r24, Y+2	; 0x02
    35c8:	28 2f       	mov	r18, r24
    35ca:	30 e0       	ldi	r19, 0x00	; 0
    35cc:	3d 83       	std	Y+5, r19	; 0x05
    35ce:	2c 83       	std	Y+4, r18	; 0x04
    35d0:	8c 81       	ldd	r24, Y+4	; 0x04
    35d2:	9d 81       	ldd	r25, Y+5	; 0x05
    35d4:	81 30       	cpi	r24, 0x01	; 1
    35d6:	91 05       	cpc	r25, r1
    35d8:	c1 f0       	breq	.+48     	; 0x360a <LCD_moveCursor+0x56>
    35da:	2c 81       	ldd	r18, Y+4	; 0x04
    35dc:	3d 81       	ldd	r19, Y+5	; 0x05
    35de:	22 30       	cpi	r18, 0x02	; 2
    35e0:	31 05       	cpc	r19, r1
    35e2:	2c f4       	brge	.+10     	; 0x35ee <LCD_moveCursor+0x3a>
    35e4:	8c 81       	ldd	r24, Y+4	; 0x04
    35e6:	9d 81       	ldd	r25, Y+5	; 0x05
    35e8:	00 97       	sbiw	r24, 0x00	; 0
    35ea:	61 f0       	breq	.+24     	; 0x3604 <LCD_moveCursor+0x50>
    35ec:	19 c0       	rjmp	.+50     	; 0x3620 <LCD_moveCursor+0x6c>
    35ee:	2c 81       	ldd	r18, Y+4	; 0x04
    35f0:	3d 81       	ldd	r19, Y+5	; 0x05
    35f2:	22 30       	cpi	r18, 0x02	; 2
    35f4:	31 05       	cpc	r19, r1
    35f6:	69 f0       	breq	.+26     	; 0x3612 <LCD_moveCursor+0x5e>
    35f8:	8c 81       	ldd	r24, Y+4	; 0x04
    35fa:	9d 81       	ldd	r25, Y+5	; 0x05
    35fc:	83 30       	cpi	r24, 0x03	; 3
    35fe:	91 05       	cpc	r25, r1
    3600:	61 f0       	breq	.+24     	; 0x361a <LCD_moveCursor+0x66>
    3602:	0e c0       	rjmp	.+28     	; 0x3620 <LCD_moveCursor+0x6c>
		case 0:
			LCD_MEMORY_ADDRESS = col;
    3604:	8b 81       	ldd	r24, Y+3	; 0x03
    3606:	89 83       	std	Y+1, r24	; 0x01
    3608:	0b c0       	rjmp	.+22     	; 0x3620 <LCD_moveCursor+0x6c>
				break;
		case 1:
			LCD_MEMORY_ADDRESS = col + 0x40;
    360a:	8b 81       	ldd	r24, Y+3	; 0x03
    360c:	80 5c       	subi	r24, 0xC0	; 192
    360e:	89 83       	std	Y+1, r24	; 0x01
    3610:	07 c0       	rjmp	.+14     	; 0x3620 <LCD_moveCursor+0x6c>
				break;
		case 2:
			LCD_MEMORY_ADDRESS = col + 0x10;
    3612:	8b 81       	ldd	r24, Y+3	; 0x03
    3614:	80 5f       	subi	r24, 0xF0	; 240
    3616:	89 83       	std	Y+1, r24	; 0x01
    3618:	03 c0       	rjmp	.+6      	; 0x3620 <LCD_moveCursor+0x6c>
				break;
		case 3:
			LCD_MEMORY_ADDRESS = col + 0x50;
    361a:	8b 81       	ldd	r24, Y+3	; 0x03
    361c:	80 5b       	subi	r24, 0xB0	; 176
    361e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(LCD_MEMORY_ADDRESS | LCD_CURSOR_LOCATION);
    3620:	89 81       	ldd	r24, Y+1	; 0x01
    3622:	80 68       	ori	r24, 0x80	; 128
    3624:	0e 94 0d 12 	call	0x241a	; 0x241a <LCD_sendCommand>
}
    3628:	0f 90       	pop	r0
    362a:	0f 90       	pop	r0
    362c:	0f 90       	pop	r0
    362e:	0f 90       	pop	r0
    3630:	0f 90       	pop	r0
    3632:	cf 91       	pop	r28
    3634:	df 91       	pop	r29
    3636:	08 95       	ret

00003638 <LCD_displayStringRowColumn>:


// Displays a string on the LCD at a chosen cursor and row
void LCD_displayStringRowColumn(uint8 row, uint8 col, const char *Str) {
    3638:	df 93       	push	r29
    363a:	cf 93       	push	r28
    363c:	00 d0       	rcall	.+0      	; 0x363e <LCD_displayStringRowColumn+0x6>
    363e:	00 d0       	rcall	.+0      	; 0x3640 <LCD_displayStringRowColumn+0x8>
    3640:	cd b7       	in	r28, 0x3d	; 61
    3642:	de b7       	in	r29, 0x3e	; 62
    3644:	89 83       	std	Y+1, r24	; 0x01
    3646:	6a 83       	std	Y+2, r22	; 0x02
    3648:	5c 83       	std	Y+4, r21	; 0x04
    364a:	4b 83       	std	Y+3, r20	; 0x03
	// Go to to the required LCD position
	LCD_moveCursor(row, col);
    364c:	89 81       	ldd	r24, Y+1	; 0x01
    364e:	6a 81       	ldd	r22, Y+2	; 0x02
    3650:	0e 94 da 1a 	call	0x35b4	; 0x35b4 <LCD_moveCursor>

	// Display the string from the cursor
	LCD_displayString(Str);
    3654:	8b 81       	ldd	r24, Y+3	; 0x03
    3656:	9c 81       	ldd	r25, Y+4	; 0x04
    3658:	0e 94 b1 1a 	call	0x3562	; 0x3562 <LCD_displayString>
}
    365c:	0f 90       	pop	r0
    365e:	0f 90       	pop	r0
    3660:	0f 90       	pop	r0
    3662:	0f 90       	pop	r0
    3664:	cf 91       	pop	r28
    3666:	df 91       	pop	r29
    3668:	08 95       	ret

0000366a <LCD_intgerToString>:

// LCD only understands ASCII, so this converts Int to a string
void LCD_intgerToString(int data) {
    366a:	df 93       	push	r29
    366c:	cf 93       	push	r28
    366e:	cd b7       	in	r28, 0x3d	; 61
    3670:	de b7       	in	r29, 0x3e	; 62
    3672:	62 97       	sbiw	r28, 0x12	; 18
    3674:	0f b6       	in	r0, 0x3f	; 63
    3676:	f8 94       	cli
    3678:	de bf       	out	0x3e, r29	; 62
    367a:	0f be       	out	0x3f, r0	; 63
    367c:	cd bf       	out	0x3d, r28	; 61
    367e:	9a 8b       	std	Y+18, r25	; 0x12
    3680:	89 8b       	std	Y+17, r24	; 0x11
	// A string to hold the ASCII values
	char buffer[16];

	// Converts data to its ASCII
	itoa(data, buffer, 10);
    3682:	89 89       	ldd	r24, Y+17	; 0x11
    3684:	9a 89       	ldd	r25, Y+18	; 0x12
    3686:	9e 01       	movw	r18, r28
    3688:	2f 5f       	subi	r18, 0xFF	; 255
    368a:	3f 4f       	sbci	r19, 0xFF	; 255
    368c:	b9 01       	movw	r22, r18
    368e:	4a e0       	ldi	r20, 0x0A	; 10
    3690:	50 e0       	ldi	r21, 0x00	; 0
    3692:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <itoa>

	// Display string with the results in the buffer
	LCD_displayString(buffer);
    3696:	ce 01       	movw	r24, r28
    3698:	01 96       	adiw	r24, 0x01	; 1
    369a:	0e 94 b1 1a 	call	0x3562	; 0x3562 <LCD_displayString>
}
    369e:	62 96       	adiw	r28, 0x12	; 18
    36a0:	0f b6       	in	r0, 0x3f	; 63
    36a2:	f8 94       	cli
    36a4:	de bf       	out	0x3e, r29	; 62
    36a6:	0f be       	out	0x3f, r0	; 63
    36a8:	cd bf       	out	0x3d, r28	; 61
    36aa:	cf 91       	pop	r28
    36ac:	df 91       	pop	r29
    36ae:	08 95       	ret

000036b0 <LCD_clearScreen>:

// Clears the LCD from any garbage
void LCD_clearScreen(void) {
    36b0:	df 93       	push	r29
    36b2:	cf 93       	push	r28
    36b4:	cd b7       	in	r28, 0x3d	; 61
    36b6:	de b7       	in	r29, 0x3e	; 62
	// Clears the LCD Display
	LCD_sendCommand(LCD_CLEAR_DISPLAY);
    36b8:	81 e0       	ldi	r24, 0x01	; 1
    36ba:	0e 94 0d 12 	call	0x241a	; 0x241a <LCD_sendCommand>
}
    36be:	cf 91       	pop	r28
    36c0:	df 91       	pop	r29
    36c2:	08 95       	ret

000036c4 <KEYPAD_Init>:
	#endif

#endif /* STD_KEYPAD */


void KEYPAD_Init(void) {
    36c4:	df 93       	push	r29
    36c6:	cf 93       	push	r28
    36c8:	cd b7       	in	r28, 0x3d	; 61
    36ca:	de b7       	in	r29, 0x3e	; 62
		/* Setup PORT and PINS for for KEYPAD Rows*/
		GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN, PIN_INPUT);
    36cc:	81 e0       	ldi	r24, 0x01	; 1
    36ce:	64 e0       	ldi	r22, 0x04	; 4
    36d0:	40 e0       	ldi	r20, 0x00	; 0
    36d2:	0e 94 1e 0a 	call	0x143c	; 0x143c <GPIO_setupPinDirection>
		GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN+1, PIN_INPUT);
    36d6:	81 e0       	ldi	r24, 0x01	; 1
    36d8:	65 e0       	ldi	r22, 0x05	; 5
    36da:	40 e0       	ldi	r20, 0x00	; 0
    36dc:	0e 94 1e 0a 	call	0x143c	; 0x143c <GPIO_setupPinDirection>
		GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN+2, PIN_INPUT);
    36e0:	81 e0       	ldi	r24, 0x01	; 1
    36e2:	66 e0       	ldi	r22, 0x06	; 6
    36e4:	40 e0       	ldi	r20, 0x00	; 0
    36e6:	0e 94 1e 0a 	call	0x143c	; 0x143c <GPIO_setupPinDirection>
		GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN+3, PIN_INPUT);
    36ea:	81 e0       	ldi	r24, 0x01	; 1
    36ec:	67 e0       	ldi	r22, 0x07	; 7
    36ee:	40 e0       	ldi	r20, 0x00	; 0
    36f0:	0e 94 1e 0a 	call	0x143c	; 0x143c <GPIO_setupPinDirection>

		/* Setup PORT and PINS for for KEYPAD Columns*/
		GPIO_setupPinDirection(KEYPAD_COL_PORT, KEYPAD_FIRSTCOL_PIN, PIN_INPUT);
    36f4:	81 e0       	ldi	r24, 0x01	; 1
    36f6:	60 e0       	ldi	r22, 0x00	; 0
    36f8:	40 e0       	ldi	r20, 0x00	; 0
    36fa:	0e 94 1e 0a 	call	0x143c	; 0x143c <GPIO_setupPinDirection>
		GPIO_setupPinDirection(KEYPAD_COL_PORT, KEYPAD_FIRSTCOL_PIN+1, PIN_INPUT);
    36fe:	81 e0       	ldi	r24, 0x01	; 1
    3700:	61 e0       	ldi	r22, 0x01	; 1
    3702:	40 e0       	ldi	r20, 0x00	; 0
    3704:	0e 94 1e 0a 	call	0x143c	; 0x143c <GPIO_setupPinDirection>
		GPIO_setupPinDirection(KEYPAD_COL_PORT, KEYPAD_FIRSTCOL_PIN+2, PIN_INPUT);
    3708:	81 e0       	ldi	r24, 0x01	; 1
    370a:	62 e0       	ldi	r22, 0x02	; 2
    370c:	40 e0       	ldi	r20, 0x00	; 0
    370e:	0e 94 1e 0a 	call	0x143c	; 0x143c <GPIO_setupPinDirection>

		#if(KEYPAD_COL_NUM == 4)
			GPIO_setupPinDirection(KEYPAD_COL_PORT, KEYPAD_FIRSTCOL_PIN+3, PIN_INPUT);
		#endif
}
    3712:	cf 91       	pop	r28
    3714:	df 91       	pop	r29
    3716:	08 95       	ret

00003718 <KEYPAD_getPressedKey>:


uint8 KEYPAD_getPressedKey(void) {
    3718:	df 93       	push	r29
    371a:	cf 93       	push	r28
    371c:	00 d0       	rcall	.+0      	; 0x371e <KEYPAD_getPressedKey+0x6>
    371e:	cd b7       	in	r28, 0x3d	; 61
    3720:	de b7       	in	r29, 0x3e	; 62
	uint8 row, col;
	while(1) {
			for (row = 0 ; row < KEYPAD_ROW_NUM ; row++) {
    3722:	1a 82       	std	Y+2, r1	; 0x02
    3724:	3a c0       	rjmp	.+116    	; 0x379a <KEYPAD_getPressedKey+0x82>
				// I set the pin by '1' for the row, and will iterate
				GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, PIN_OUTPUT);
    3726:	8a 81       	ldd	r24, Y+2	; 0x02
    3728:	98 2f       	mov	r25, r24
    372a:	9c 5f       	subi	r25, 0xFC	; 252
    372c:	81 e0       	ldi	r24, 0x01	; 1
    372e:	69 2f       	mov	r22, r25
    3730:	41 e0       	ldi	r20, 0x01	; 1
    3732:	0e 94 1e 0a 	call	0x143c	; 0x143c <GPIO_setupPinDirection>

				/* Set/Clear the row output pin */
				GPIO_writePin(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, KEYPAD_BUTTON_PRESSED);
    3736:	8a 81       	ldd	r24, Y+2	; 0x02
    3738:	98 2f       	mov	r25, r24
    373a:	9c 5f       	subi	r25, 0xFC	; 252
    373c:	81 e0       	ldi	r24, 0x01	; 1
    373e:	69 2f       	mov	r22, r25
    3740:	40 e0       	ldi	r20, 0x00	; 0
    3742:	0e 94 1a 0b 	call	0x1634	; 0x1634 <GPIO_writePin>

				for (col = 0 ; col < KEYPAD_COL_NUM ; col++) {
    3746:	19 82       	std	Y+1, r1	; 0x01
    3748:	1a c0       	rjmp	.+52     	; 0x377e <KEYPAD_getPressedKey+0x66>
					/* Check if the switch is pressed in this column */
					if(GPIO_readPin(KEYPAD_COL_PORT,KEYPAD_FIRSTCOL_PIN + col) == KEYPAD_BUTTON_PRESSED) {
    374a:	81 e0       	ldi	r24, 0x01	; 1
    374c:	69 81       	ldd	r22, Y+1	; 0x01
    374e:	0e 94 a4 0c 	call	0x1948	; 0x1948 <GPIO_readPin>
    3752:	88 23       	and	r24, r24
    3754:	89 f4       	brne	.+34     	; 0x3778 <KEYPAD_getPressedKey+0x60>
						#if (KEYPAD_COL_NUM == 3)
							#ifdef STD_KEYPAD
								return ( (row * KEYPAD_COL_NUM) + col + 1);
    3756:	8a 81       	ldd	r24, Y+2	; 0x02
    3758:	28 2f       	mov	r18, r24
    375a:	30 e0       	ldi	r19, 0x00	; 0
    375c:	c9 01       	movw	r24, r18
    375e:	88 0f       	add	r24, r24
    3760:	99 1f       	adc	r25, r25
    3762:	82 0f       	add	r24, r18
    3764:	93 1f       	adc	r25, r19
    3766:	98 2f       	mov	r25, r24
    3768:	89 81       	ldd	r24, Y+1	; 0x01
    376a:	89 0f       	add	r24, r25
    376c:	8f 5f       	subi	r24, 0xFF	; 255
					}
				}
				GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, PIN_INPUT);
			}
		}
}
    376e:	0f 90       	pop	r0
    3770:	0f 90       	pop	r0
    3772:	cf 91       	pop	r28
    3774:	df 91       	pop	r29
    3776:	08 95       	ret
				GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, PIN_OUTPUT);

				/* Set/Clear the row output pin */
				GPIO_writePin(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, KEYPAD_BUTTON_PRESSED);

				for (col = 0 ; col < KEYPAD_COL_NUM ; col++) {
    3778:	89 81       	ldd	r24, Y+1	; 0x01
    377a:	8f 5f       	subi	r24, 0xFF	; 255
    377c:	89 83       	std	Y+1, r24	; 0x01
    377e:	89 81       	ldd	r24, Y+1	; 0x01
    3780:	83 30       	cpi	r24, 0x03	; 3
    3782:	18 f3       	brcs	.-58     	; 0x374a <KEYPAD_getPressedKey+0x32>
								return KEYPAD_4x4_adjustKeyNumber( (row * KEYPAD_COL_NUM) + col + 1);
							#endif
						#endif
					}
				}
				GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, PIN_INPUT);
    3784:	8a 81       	ldd	r24, Y+2	; 0x02
    3786:	98 2f       	mov	r25, r24
    3788:	9c 5f       	subi	r25, 0xFC	; 252
    378a:	81 e0       	ldi	r24, 0x01	; 1
    378c:	69 2f       	mov	r22, r25
    378e:	40 e0       	ldi	r20, 0x00	; 0
    3790:	0e 94 1e 0a 	call	0x143c	; 0x143c <GPIO_setupPinDirection>


uint8 KEYPAD_getPressedKey(void) {
	uint8 row, col;
	while(1) {
			for (row = 0 ; row < KEYPAD_ROW_NUM ; row++) {
    3794:	8a 81       	ldd	r24, Y+2	; 0x02
    3796:	8f 5f       	subi	r24, 0xFF	; 255
    3798:	8a 83       	std	Y+2, r24	; 0x02
    379a:	8a 81       	ldd	r24, Y+2	; 0x02
    379c:	84 30       	cpi	r24, 0x04	; 4
    379e:	18 f2       	brcs	.-122    	; 0x3726 <KEYPAD_getPressedKey+0xe>
    37a0:	c0 cf       	rjmp	.-128    	; 0x3722 <KEYPAD_getPressedKey+0xa>

000037a2 <EEPROM_writeByte>:
#include "avr/io.h" /* To use the IO Ports Registers */
#include <util/delay.h>



uint8 EEPROM_writeByte(uint16 u16Address, uint8 u8Data) {
    37a2:	df 93       	push	r29
    37a4:	cf 93       	push	r28
    37a6:	00 d0       	rcall	.+0      	; 0x37a8 <EEPROM_writeByte+0x6>
    37a8:	00 d0       	rcall	.+0      	; 0x37aa <EEPROM_writeByte+0x8>
    37aa:	0f 92       	push	r0
    37ac:	cd b7       	in	r28, 0x3d	; 61
    37ae:	de b7       	in	r29, 0x3e	; 62
    37b0:	9b 83       	std	Y+3, r25	; 0x03
    37b2:	8a 83       	std	Y+2, r24	; 0x02
    37b4:	6c 83       	std	Y+4, r22	; 0x04
	I2C_start();
    37b6:	0e 94 b7 09 	call	0x136e	; 0x136e <I2C_start>
	if (I2C_getStatus() != I2C_START) {
    37ba:	0e 94 0f 0a 	call	0x141e	; 0x141e <I2C_getStatus>
    37be:	88 30       	cpi	r24, 0x08	; 8
    37c0:	11 f0       	breq	.+4      	; 0x37c6 <EEPROM_writeByte+0x24>
	        return ERROR;
    37c2:	1d 82       	std	Y+5, r1	; 0x05
    37c4:	2a c0       	rjmp	.+84     	; 0x381a <EEPROM_writeByte+0x78>
	 * EEPROM address is 11 bits, the 3 MSB is the device address
	 * The other bits are the word address
	 * but the device address is again shifted to another 8 bit frame:
	 * the 4 MSB is 1010, then the Device Address, then R/W
	 */
	uint8 EEPROM_ADDRESS_EQN = (uint8) (0xA0 | ( (u16Address & 0x0700) >> 7) );
    37c6:	8a 81       	ldd	r24, Y+2	; 0x02
    37c8:	9b 81       	ldd	r25, Y+3	; 0x03
    37ca:	80 70       	andi	r24, 0x00	; 0
    37cc:	97 70       	andi	r25, 0x07	; 7
    37ce:	88 0f       	add	r24, r24
    37d0:	89 2f       	mov	r24, r25
    37d2:	88 1f       	adc	r24, r24
    37d4:	99 0b       	sbc	r25, r25
    37d6:	91 95       	neg	r25
    37d8:	80 6a       	ori	r24, 0xA0	; 160
    37da:	89 83       	std	Y+1, r24	; 0x01
	// 0xA0 = 1010, 0x0700 = 0b111 0000 000
	I2C_writeByte(EEPROM_ADDRESS_EQN);
    37dc:	89 81       	ldd	r24, Y+1	; 0x01
    37de:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <I2C_writeByte>
	if (I2C_getStatus() != I2C_MT_SLA_W_ACK) {
    37e2:	0e 94 0f 0a 	call	0x141e	; 0x141e <I2C_getStatus>
    37e6:	88 31       	cpi	r24, 0x18	; 24
    37e8:	11 f0       	breq	.+4      	; 0x37ee <EEPROM_writeByte+0x4c>
		return ERROR;
    37ea:	1d 82       	std	Y+5, r1	; 0x05
    37ec:	16 c0       	rjmp	.+44     	; 0x381a <EEPROM_writeByte+0x78>
	}

	I2C_writeByte((uint8) (u16Address));
    37ee:	8a 81       	ldd	r24, Y+2	; 0x02
    37f0:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <I2C_writeByte>
	if (I2C_getStatus() != I2C_MT_DATA_ACK) {
    37f4:	0e 94 0f 0a 	call	0x141e	; 0x141e <I2C_getStatus>
    37f8:	88 32       	cpi	r24, 0x28	; 40
    37fa:	11 f0       	breq	.+4      	; 0x3800 <EEPROM_writeByte+0x5e>
		return ERROR;
    37fc:	1d 82       	std	Y+5, r1	; 0x05
    37fe:	0d c0       	rjmp	.+26     	; 0x381a <EEPROM_writeByte+0x78>
	}

	I2C_writeByte(u8Data);
    3800:	8c 81       	ldd	r24, Y+4	; 0x04
    3802:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <I2C_writeByte>
	if (I2C_getStatus() != I2C_MT_DATA_ACK) {
    3806:	0e 94 0f 0a 	call	0x141e	; 0x141e <I2C_getStatus>
    380a:	88 32       	cpi	r24, 0x28	; 40
    380c:	11 f0       	breq	.+4      	; 0x3812 <EEPROM_writeByte+0x70>
		return ERROR;
    380e:	1d 82       	std	Y+5, r1	; 0x05
    3810:	04 c0       	rjmp	.+8      	; 0x381a <EEPROM_writeByte+0x78>
	}

	I2C_stop();
    3812:	0e 94 c7 09 	call	0x138e	; 0x138e <I2C_stop>

	return SUCCESS;
    3816:	81 e0       	ldi	r24, 0x01	; 1
    3818:	8d 83       	std	Y+5, r24	; 0x05
    381a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    381c:	0f 90       	pop	r0
    381e:	0f 90       	pop	r0
    3820:	0f 90       	pop	r0
    3822:	0f 90       	pop	r0
    3824:	0f 90       	pop	r0
    3826:	cf 91       	pop	r28
    3828:	df 91       	pop	r29
    382a:	08 95       	ret

0000382c <EEPROM_readByte>:


uint8 EEPROM_readByte(uint16 u16Address, uint8 *u8Data) {
    382c:	df 93       	push	r29
    382e:	cf 93       	push	r28
    3830:	00 d0       	rcall	.+0      	; 0x3832 <EEPROM_readByte+0x6>
    3832:	00 d0       	rcall	.+0      	; 0x3834 <EEPROM_readByte+0x8>
    3834:	00 d0       	rcall	.+0      	; 0x3836 <EEPROM_readByte+0xa>
    3836:	cd b7       	in	r28, 0x3d	; 61
    3838:	de b7       	in	r29, 0x3e	; 62
    383a:	9b 83       	std	Y+3, r25	; 0x03
    383c:	8a 83       	std	Y+2, r24	; 0x02
    383e:	7d 83       	std	Y+5, r23	; 0x05
    3840:	6c 83       	std	Y+4, r22	; 0x04
	I2C_start();
    3842:	0e 94 b7 09 	call	0x136e	; 0x136e <I2C_start>
	if (I2C_getStatus() != I2C_START) {
    3846:	0e 94 0f 0a 	call	0x141e	; 0x141e <I2C_getStatus>
    384a:	88 30       	cpi	r24, 0x08	; 8
    384c:	11 f0       	breq	.+4      	; 0x3852 <EEPROM_readByte+0x26>
			return ERROR;
    384e:	1e 82       	std	Y+6, r1	; 0x06
    3850:	3e c0       	rjmp	.+124    	; 0x38ce <EEPROM_readByte+0xa2>
	 * EEPROM address is 11 bits, the 3 MSB is the device address
	 * The other bits are the word address
	 * but the device address is again shifted to another 8 bit frame:
	 * the 4 MSB is 1010, then the Device Address, then R/W
	 */
	uint8 EEPROM_ADDRESS_EQN = (uint8) (0xA0 | ( (u16Address & 0x0700) >> 7) );
    3852:	8a 81       	ldd	r24, Y+2	; 0x02
    3854:	9b 81       	ldd	r25, Y+3	; 0x03
    3856:	80 70       	andi	r24, 0x00	; 0
    3858:	97 70       	andi	r25, 0x07	; 7
    385a:	88 0f       	add	r24, r24
    385c:	89 2f       	mov	r24, r25
    385e:	88 1f       	adc	r24, r24
    3860:	99 0b       	sbc	r25, r25
    3862:	91 95       	neg	r25
    3864:	80 6a       	ori	r24, 0xA0	; 160
    3866:	89 83       	std	Y+1, r24	; 0x01
	// 0xA0 = 1010, 0x0700 = 0b111 0000 000
	I2C_writeByte(EEPROM_ADDRESS_EQN);
    3868:	89 81       	ldd	r24, Y+1	; 0x01
    386a:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <I2C_writeByte>
	if (I2C_getStatus() != I2C_MT_SLA_W_ACK) {
    386e:	0e 94 0f 0a 	call	0x141e	; 0x141e <I2C_getStatus>
    3872:	88 31       	cpi	r24, 0x18	; 24
    3874:	11 f0       	breq	.+4      	; 0x387a <EEPROM_readByte+0x4e>
		return ERROR;
    3876:	1e 82       	std	Y+6, r1	; 0x06
    3878:	2a c0       	rjmp	.+84     	; 0x38ce <EEPROM_readByte+0xa2>
	}

	I2C_writeByte((uint8) (u16Address));
    387a:	8a 81       	ldd	r24, Y+2	; 0x02
    387c:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <I2C_writeByte>
	if (I2C_getStatus() != I2C_MT_DATA_ACK) {
    3880:	0e 94 0f 0a 	call	0x141e	; 0x141e <I2C_getStatus>
    3884:	88 32       	cpi	r24, 0x28	; 40
    3886:	11 f0       	breq	.+4      	; 0x388c <EEPROM_readByte+0x60>
		return ERROR;
    3888:	1e 82       	std	Y+6, r1	; 0x06
    388a:	21 c0       	rjmp	.+66     	; 0x38ce <EEPROM_readByte+0xa2>
	}

	I2C_start();
    388c:	0e 94 b7 09 	call	0x136e	; 0x136e <I2C_start>
	if (I2C_getStatus() != I2C_REP_START) {
    3890:	0e 94 0f 0a 	call	0x141e	; 0x141e <I2C_getStatus>
    3894:	80 31       	cpi	r24, 0x10	; 16
    3896:	11 f0       	breq	.+4      	; 0x389c <EEPROM_readByte+0x70>
		return ERROR;
    3898:	1e 82       	std	Y+6, r1	; 0x06
    389a:	19 c0       	rjmp	.+50     	; 0x38ce <EEPROM_readByte+0xa2>
	}

	I2C_writeByte(EEPROM_ADDRESS_EQN | 1); // For Reading
    389c:	89 81       	ldd	r24, Y+1	; 0x01
    389e:	81 60       	ori	r24, 0x01	; 1
    38a0:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <I2C_writeByte>
	if (I2C_getStatus() != I2C_MT_SLA_R_ACK) {
    38a4:	0e 94 0f 0a 	call	0x141e	; 0x141e <I2C_getStatus>
    38a8:	80 34       	cpi	r24, 0x40	; 64
    38aa:	11 f0       	breq	.+4      	; 0x38b0 <EEPROM_readByte+0x84>
		return ERROR;
    38ac:	1e 82       	std	Y+6, r1	; 0x06
    38ae:	0f c0       	rjmp	.+30     	; 0x38ce <EEPROM_readByte+0xa2>
	}

	*u8Data = I2C_readByteWithNACK();
    38b0:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <I2C_readByteWithNACK>
    38b4:	ec 81       	ldd	r30, Y+4	; 0x04
    38b6:	fd 81       	ldd	r31, Y+5	; 0x05
    38b8:	80 83       	st	Z, r24
	if (I2C_getStatus() != I2C_MR_DATA_NACK) {
    38ba:	0e 94 0f 0a 	call	0x141e	; 0x141e <I2C_getStatus>
    38be:	88 35       	cpi	r24, 0x58	; 88
    38c0:	11 f0       	breq	.+4      	; 0x38c6 <EEPROM_readByte+0x9a>
		return ERROR;
    38c2:	1e 82       	std	Y+6, r1	; 0x06
    38c4:	04 c0       	rjmp	.+8      	; 0x38ce <EEPROM_readByte+0xa2>
	}

	I2C_stop();
    38c6:	0e 94 c7 09 	call	0x138e	; 0x138e <I2C_stop>

	return SUCCESS;
    38ca:	81 e0       	ldi	r24, 0x01	; 1
    38cc:	8e 83       	std	Y+6, r24	; 0x06
    38ce:	8e 81       	ldd	r24, Y+6	; 0x06
}
    38d0:	26 96       	adiw	r28, 0x06	; 6
    38d2:	0f b6       	in	r0, 0x3f	; 63
    38d4:	f8 94       	cli
    38d6:	de bf       	out	0x3e, r29	; 62
    38d8:	0f be       	out	0x3f, r0	; 63
    38da:	cd bf       	out	0x3d, r28	; 61
    38dc:	cf 91       	pop	r28
    38de:	df 91       	pop	r29
    38e0:	08 95       	ret

000038e2 <BUTTON_Init>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
BUTTON_Error_t BUTTON_Init(uint8 port_num, uint8 pin_num) {
    38e2:	df 93       	push	r29
    38e4:	cf 93       	push	r28
    38e6:	00 d0       	rcall	.+0      	; 0x38e8 <BUTTON_Init+0x6>
    38e8:	0f 92       	push	r0
    38ea:	cd b7       	in	r28, 0x3d	; 61
    38ec:	de b7       	in	r29, 0x3e	; 62
    38ee:	8a 83       	std	Y+2, r24	; 0x02
    38f0:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t BUTTON_Driver_Checker = NULL;
    38f2:	19 82       	std	Y+1, r1	; 0x01
	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    38f4:	8b 81       	ldd	r24, Y+3	; 0x03
    38f6:	88 30       	cpi	r24, 0x08	; 8
    38f8:	18 f0       	brcs	.+6      	; 0x3900 <BUTTON_Init+0x1e>
		BUTTON_Driver_Checker = BUTTON_WRONG_PIN_NUMBER;
    38fa:	81 e0       	ldi	r24, 0x01	; 1
    38fc:	89 83       	std	Y+1, r24	; 0x01
    38fe:	0c c0       	rjmp	.+24     	; 0x3918 <BUTTON_Init+0x36>
	}
	else if((port_num >= NUM_OF_PORTS)) {
    3900:	8a 81       	ldd	r24, Y+2	; 0x02
    3902:	84 30       	cpi	r24, 0x04	; 4
    3904:	18 f0       	brcs	.+6      	; 0x390c <BUTTON_Init+0x2a>
		BUTTON_Driver_Checker = BUTTON_WRONG_PORT_NUMBER;
    3906:	82 e0       	ldi	r24, 0x02	; 2
    3908:	89 83       	std	Y+1, r24	; 0x01
    390a:	06 c0       	rjmp	.+12     	; 0x3918 <BUTTON_Init+0x36>
	}
	else {
		/* Setup the pin direction as required */
		GPIO_setupPinDirection(port_num, pin_num, PIN_INPUT);
    390c:	8a 81       	ldd	r24, Y+2	; 0x02
    390e:	6b 81       	ldd	r22, Y+3	; 0x03
    3910:	40 e0       	ldi	r20, 0x00	; 0
    3912:	0e 94 1e 0a 	call	0x143c	; 0x143c <GPIO_setupPinDirection>
		BUTTON_Driver_Checker = BUTTON_OK;
    3916:	19 82       	std	Y+1, r1	; 0x01
	}
	return BUTTON_Driver_Checker;
    3918:	89 81       	ldd	r24, Y+1	; 0x01
}
    391a:	0f 90       	pop	r0
    391c:	0f 90       	pop	r0
    391e:	0f 90       	pop	r0
    3920:	cf 91       	pop	r28
    3922:	df 91       	pop	r29
    3924:	08 95       	ret

00003926 <BUTTON_Read>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
uint8 BUTTON_Read(uint8 port_num, uint8 pin_num) {
    3926:	df 93       	push	r29
    3928:	cf 93       	push	r28
    392a:	00 d0       	rcall	.+0      	; 0x392c <BUTTON_Read+0x6>
    392c:	0f 92       	push	r0
    392e:	cd b7       	in	r28, 0x3d	; 61
    3930:	de b7       	in	r29, 0x3e	; 62
    3932:	8a 83       	std	Y+2, r24	; 0x02
    3934:	6b 83       	std	Y+3, r22	; 0x03

	uint8_t BUTTON_Driver_Checker = NULL;
    3936:	19 82       	std	Y+1, r1	; 0x01
		if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    3938:	8b 81       	ldd	r24, Y+3	; 0x03
    393a:	88 30       	cpi	r24, 0x08	; 8
    393c:	18 f0       	brcs	.+6      	; 0x3944 <BUTTON_Read+0x1e>
			BUTTON_Driver_Checker = BUTTON_WRONG_PIN_NUMBER;
    393e:	81 e0       	ldi	r24, 0x01	; 1
    3940:	89 83       	std	Y+1, r24	; 0x01
    3942:	0b c0       	rjmp	.+22     	; 0x395a <BUTTON_Read+0x34>
		}
		else if((port_num >= NUM_OF_PORTS)) {
    3944:	8a 81       	ldd	r24, Y+2	; 0x02
    3946:	84 30       	cpi	r24, 0x04	; 4
    3948:	18 f0       	brcs	.+6      	; 0x3950 <BUTTON_Read+0x2a>
			BUTTON_Driver_Checker = BUTTON_WRONG_PORT_NUMBER;
    394a:	82 e0       	ldi	r24, 0x02	; 2
    394c:	89 83       	std	Y+1, r24	; 0x01
    394e:	05 c0       	rjmp	.+10     	; 0x395a <BUTTON_Read+0x34>
		}
		else {
			/* Setup the pin direction as required */
			GPIO_readPin(port_num, pin_num);
    3950:	8a 81       	ldd	r24, Y+2	; 0x02
    3952:	6b 81       	ldd	r22, Y+3	; 0x03
    3954:	0e 94 a4 0c 	call	0x1948	; 0x1948 <GPIO_readPin>
			BUTTON_Driver_Checker = BUTTON_OK;
    3958:	19 82       	std	Y+1, r1	; 0x01
		}
		return GPIO_readPin(port_num, pin_num);
    395a:	8a 81       	ldd	r24, Y+2	; 0x02
    395c:	6b 81       	ldd	r22, Y+3	; 0x03
    395e:	0e 94 a4 0c 	call	0x1948	; 0x1948 <GPIO_readPin>
}
    3962:	0f 90       	pop	r0
    3964:	0f 90       	pop	r0
    3966:	0f 90       	pop	r0
    3968:	cf 91       	pop	r28
    396a:	df 91       	pop	r29
    396c:	08 95       	ret

0000396e <main>:

/*******************************************************************************
 *                              						Application Execution                              					  *
 *******************************************************************************/

int main(void) {
    396e:	df 93       	push	r29
    3970:	cf 93       	push	r28
    3972:	cd b7       	in	r28, 0x3d	; 61
    3974:	de b7       	in	r29, 0x3e	; 62

	// Initializes LED Driver
	LED_Init(PORT_C, PIN_0);
    3976:	82 e0       	ldi	r24, 0x02	; 2
    3978:	60 e0       	ldi	r22, 0x00	; 0
    397a:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <LED_Init>
	LED_Off(PORT_C, PIN_0);
    397e:	82 e0       	ldi	r24, 0x02	; 2
    3980:	60 e0       	ldi	r22, 0x00	; 0
    3982:	0e 94 18 11 	call	0x2230	; 0x2230 <LED_Off>


	// Initializes Button Driver
	BUTTON_Init(PORT_D, PIN_2);
    3986:	83 e0       	ldi	r24, 0x03	; 3
    3988:	62 e0       	ldi	r22, 0x02	; 2
    398a:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <BUTTON_Init>
	BUTTON_Read(PORT_D, PIN_2);
    398e:	83 e0       	ldi	r24, 0x03	; 3
    3990:	62 e0       	ldi	r22, 0x02	; 2
    3992:	0e 94 93 1c 	call	0x3926	; 0x3926 <BUTTON_Read>

	// Initializes External Interrupt Driver
	EXT_INTERRUPT_Init();
    3996:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <EXT_INTERRUPT_Init>
    399a:	ff cf       	rjmp	.-2      	; 0x399a <main+0x2c>

0000399c <__vector_1>:

	}
}

// The Interrupt Service Routine that will execute the Interrupt
ISR (INT0_vect) {
    399c:	1f 92       	push	r1
    399e:	0f 92       	push	r0
    39a0:	0f b6       	in	r0, 0x3f	; 63
    39a2:	0f 92       	push	r0
    39a4:	11 24       	eor	r1, r1
    39a6:	2f 93       	push	r18
    39a8:	3f 93       	push	r19
    39aa:	4f 93       	push	r20
    39ac:	5f 93       	push	r21
    39ae:	6f 93       	push	r22
    39b0:	7f 93       	push	r23
    39b2:	8f 93       	push	r24
    39b4:	9f 93       	push	r25
    39b6:	af 93       	push	r26
    39b8:	bf 93       	push	r27
    39ba:	ef 93       	push	r30
    39bc:	ff 93       	push	r31
    39be:	df 93       	push	r29
    39c0:	cf 93       	push	r28
    39c2:	cd b7       	in	r28, 0x3d	; 61
    39c4:	de b7       	in	r29, 0x3e	; 62
	LED_Toggle(PORT_C, PIN_0);
    39c6:	82 e0       	ldi	r24, 0x02	; 2
    39c8:	60 e0       	ldi	r22, 0x00	; 0
    39ca:	0e 94 3a 11 	call	0x2274	; 0x2274 <LED_Toggle>
}
    39ce:	cf 91       	pop	r28
    39d0:	df 91       	pop	r29
    39d2:	ff 91       	pop	r31
    39d4:	ef 91       	pop	r30
    39d6:	bf 91       	pop	r27
    39d8:	af 91       	pop	r26
    39da:	9f 91       	pop	r25
    39dc:	8f 91       	pop	r24
    39de:	7f 91       	pop	r23
    39e0:	6f 91       	pop	r22
    39e2:	5f 91       	pop	r21
    39e4:	4f 91       	pop	r20
    39e6:	3f 91       	pop	r19
    39e8:	2f 91       	pop	r18
    39ea:	0f 90       	pop	r0
    39ec:	0f be       	out	0x3f, r0	; 63
    39ee:	0f 90       	pop	r0
    39f0:	1f 90       	pop	r1
    39f2:	18 95       	reti

000039f4 <__mulsi3>:
    39f4:	62 9f       	mul	r22, r18
    39f6:	d0 01       	movw	r26, r0
    39f8:	73 9f       	mul	r23, r19
    39fa:	f0 01       	movw	r30, r0
    39fc:	82 9f       	mul	r24, r18
    39fe:	e0 0d       	add	r30, r0
    3a00:	f1 1d       	adc	r31, r1
    3a02:	64 9f       	mul	r22, r20
    3a04:	e0 0d       	add	r30, r0
    3a06:	f1 1d       	adc	r31, r1
    3a08:	92 9f       	mul	r25, r18
    3a0a:	f0 0d       	add	r31, r0
    3a0c:	83 9f       	mul	r24, r19
    3a0e:	f0 0d       	add	r31, r0
    3a10:	74 9f       	mul	r23, r20
    3a12:	f0 0d       	add	r31, r0
    3a14:	65 9f       	mul	r22, r21
    3a16:	f0 0d       	add	r31, r0
    3a18:	99 27       	eor	r25, r25
    3a1a:	72 9f       	mul	r23, r18
    3a1c:	b0 0d       	add	r27, r0
    3a1e:	e1 1d       	adc	r30, r1
    3a20:	f9 1f       	adc	r31, r25
    3a22:	63 9f       	mul	r22, r19
    3a24:	b0 0d       	add	r27, r0
    3a26:	e1 1d       	adc	r30, r1
    3a28:	f9 1f       	adc	r31, r25
    3a2a:	bd 01       	movw	r22, r26
    3a2c:	cf 01       	movw	r24, r30
    3a2e:	11 24       	eor	r1, r1
    3a30:	08 95       	ret

00003a32 <__udivmodsi4>:
    3a32:	a1 e2       	ldi	r26, 0x21	; 33
    3a34:	1a 2e       	mov	r1, r26
    3a36:	aa 1b       	sub	r26, r26
    3a38:	bb 1b       	sub	r27, r27
    3a3a:	fd 01       	movw	r30, r26
    3a3c:	0d c0       	rjmp	.+26     	; 0x3a58 <__udivmodsi4_ep>

00003a3e <__udivmodsi4_loop>:
    3a3e:	aa 1f       	adc	r26, r26
    3a40:	bb 1f       	adc	r27, r27
    3a42:	ee 1f       	adc	r30, r30
    3a44:	ff 1f       	adc	r31, r31
    3a46:	a2 17       	cp	r26, r18
    3a48:	b3 07       	cpc	r27, r19
    3a4a:	e4 07       	cpc	r30, r20
    3a4c:	f5 07       	cpc	r31, r21
    3a4e:	20 f0       	brcs	.+8      	; 0x3a58 <__udivmodsi4_ep>
    3a50:	a2 1b       	sub	r26, r18
    3a52:	b3 0b       	sbc	r27, r19
    3a54:	e4 0b       	sbc	r30, r20
    3a56:	f5 0b       	sbc	r31, r21

00003a58 <__udivmodsi4_ep>:
    3a58:	66 1f       	adc	r22, r22
    3a5a:	77 1f       	adc	r23, r23
    3a5c:	88 1f       	adc	r24, r24
    3a5e:	99 1f       	adc	r25, r25
    3a60:	1a 94       	dec	r1
    3a62:	69 f7       	brne	.-38     	; 0x3a3e <__udivmodsi4_loop>
    3a64:	60 95       	com	r22
    3a66:	70 95       	com	r23
    3a68:	80 95       	com	r24
    3a6a:	90 95       	com	r25
    3a6c:	9b 01       	movw	r18, r22
    3a6e:	ac 01       	movw	r20, r24
    3a70:	bd 01       	movw	r22, r26
    3a72:	cf 01       	movw	r24, r30
    3a74:	08 95       	ret

00003a76 <__prologue_saves__>:
    3a76:	2f 92       	push	r2
    3a78:	3f 92       	push	r3
    3a7a:	4f 92       	push	r4
    3a7c:	5f 92       	push	r5
    3a7e:	6f 92       	push	r6
    3a80:	7f 92       	push	r7
    3a82:	8f 92       	push	r8
    3a84:	9f 92       	push	r9
    3a86:	af 92       	push	r10
    3a88:	bf 92       	push	r11
    3a8a:	cf 92       	push	r12
    3a8c:	df 92       	push	r13
    3a8e:	ef 92       	push	r14
    3a90:	ff 92       	push	r15
    3a92:	0f 93       	push	r16
    3a94:	1f 93       	push	r17
    3a96:	cf 93       	push	r28
    3a98:	df 93       	push	r29
    3a9a:	cd b7       	in	r28, 0x3d	; 61
    3a9c:	de b7       	in	r29, 0x3e	; 62
    3a9e:	ca 1b       	sub	r28, r26
    3aa0:	db 0b       	sbc	r29, r27
    3aa2:	0f b6       	in	r0, 0x3f	; 63
    3aa4:	f8 94       	cli
    3aa6:	de bf       	out	0x3e, r29	; 62
    3aa8:	0f be       	out	0x3f, r0	; 63
    3aaa:	cd bf       	out	0x3d, r28	; 61
    3aac:	09 94       	ijmp

00003aae <__epilogue_restores__>:
    3aae:	2a 88       	ldd	r2, Y+18	; 0x12
    3ab0:	39 88       	ldd	r3, Y+17	; 0x11
    3ab2:	48 88       	ldd	r4, Y+16	; 0x10
    3ab4:	5f 84       	ldd	r5, Y+15	; 0x0f
    3ab6:	6e 84       	ldd	r6, Y+14	; 0x0e
    3ab8:	7d 84       	ldd	r7, Y+13	; 0x0d
    3aba:	8c 84       	ldd	r8, Y+12	; 0x0c
    3abc:	9b 84       	ldd	r9, Y+11	; 0x0b
    3abe:	aa 84       	ldd	r10, Y+10	; 0x0a
    3ac0:	b9 84       	ldd	r11, Y+9	; 0x09
    3ac2:	c8 84       	ldd	r12, Y+8	; 0x08
    3ac4:	df 80       	ldd	r13, Y+7	; 0x07
    3ac6:	ee 80       	ldd	r14, Y+6	; 0x06
    3ac8:	fd 80       	ldd	r15, Y+5	; 0x05
    3aca:	0c 81       	ldd	r16, Y+4	; 0x04
    3acc:	1b 81       	ldd	r17, Y+3	; 0x03
    3ace:	aa 81       	ldd	r26, Y+2	; 0x02
    3ad0:	b9 81       	ldd	r27, Y+1	; 0x01
    3ad2:	ce 0f       	add	r28, r30
    3ad4:	d1 1d       	adc	r29, r1
    3ad6:	0f b6       	in	r0, 0x3f	; 63
    3ad8:	f8 94       	cli
    3ada:	de bf       	out	0x3e, r29	; 62
    3adc:	0f be       	out	0x3f, r0	; 63
    3ade:	cd bf       	out	0x3d, r28	; 61
    3ae0:	ed 01       	movw	r28, r26
    3ae2:	08 95       	ret

00003ae4 <itoa>:
    3ae4:	fb 01       	movw	r30, r22
    3ae6:	9f 01       	movw	r18, r30
    3ae8:	e8 94       	clt
    3aea:	42 30       	cpi	r20, 0x02	; 2
    3aec:	c4 f0       	brlt	.+48     	; 0x3b1e <itoa+0x3a>
    3aee:	45 32       	cpi	r20, 0x25	; 37
    3af0:	b4 f4       	brge	.+44     	; 0x3b1e <itoa+0x3a>
    3af2:	4a 30       	cpi	r20, 0x0A	; 10
    3af4:	29 f4       	brne	.+10     	; 0x3b00 <itoa+0x1c>
    3af6:	97 fb       	bst	r25, 7
    3af8:	1e f4       	brtc	.+6      	; 0x3b00 <itoa+0x1c>
    3afa:	90 95       	com	r25
    3afc:	81 95       	neg	r24
    3afe:	9f 4f       	sbci	r25, 0xFF	; 255
    3b00:	64 2f       	mov	r22, r20
    3b02:	77 27       	eor	r23, r23
    3b04:	0e 94 a3 1d 	call	0x3b46	; 0x3b46 <__udivmodhi4>
    3b08:	80 5d       	subi	r24, 0xD0	; 208
    3b0a:	8a 33       	cpi	r24, 0x3A	; 58
    3b0c:	0c f0       	brlt	.+2      	; 0x3b10 <itoa+0x2c>
    3b0e:	89 5d       	subi	r24, 0xD9	; 217
    3b10:	81 93       	st	Z+, r24
    3b12:	cb 01       	movw	r24, r22
    3b14:	00 97       	sbiw	r24, 0x00	; 0
    3b16:	a1 f7       	brne	.-24     	; 0x3b00 <itoa+0x1c>
    3b18:	16 f4       	brtc	.+4      	; 0x3b1e <itoa+0x3a>
    3b1a:	5d e2       	ldi	r21, 0x2D	; 45
    3b1c:	51 93       	st	Z+, r21
    3b1e:	10 82       	st	Z, r1
    3b20:	c9 01       	movw	r24, r18
    3b22:	0c 94 93 1d 	jmp	0x3b26	; 0x3b26 <strrev>

00003b26 <strrev>:
    3b26:	dc 01       	movw	r26, r24
    3b28:	fc 01       	movw	r30, r24
    3b2a:	67 2f       	mov	r22, r23
    3b2c:	71 91       	ld	r23, Z+
    3b2e:	77 23       	and	r23, r23
    3b30:	e1 f7       	brne	.-8      	; 0x3b2a <strrev+0x4>
    3b32:	32 97       	sbiw	r30, 0x02	; 2
    3b34:	04 c0       	rjmp	.+8      	; 0x3b3e <strrev+0x18>
    3b36:	7c 91       	ld	r23, X
    3b38:	6d 93       	st	X+, r22
    3b3a:	70 83       	st	Z, r23
    3b3c:	62 91       	ld	r22, -Z
    3b3e:	ae 17       	cp	r26, r30
    3b40:	bf 07       	cpc	r27, r31
    3b42:	c8 f3       	brcs	.-14     	; 0x3b36 <strrev+0x10>
    3b44:	08 95       	ret

00003b46 <__udivmodhi4>:
    3b46:	aa 1b       	sub	r26, r26
    3b48:	bb 1b       	sub	r27, r27
    3b4a:	51 e1       	ldi	r21, 0x11	; 17
    3b4c:	07 c0       	rjmp	.+14     	; 0x3b5c <__udivmodhi4_ep>

00003b4e <__udivmodhi4_loop>:
    3b4e:	aa 1f       	adc	r26, r26
    3b50:	bb 1f       	adc	r27, r27
    3b52:	a6 17       	cp	r26, r22
    3b54:	b7 07       	cpc	r27, r23
    3b56:	10 f0       	brcs	.+4      	; 0x3b5c <__udivmodhi4_ep>
    3b58:	a6 1b       	sub	r26, r22
    3b5a:	b7 0b       	sbc	r27, r23

00003b5c <__udivmodhi4_ep>:
    3b5c:	88 1f       	adc	r24, r24
    3b5e:	99 1f       	adc	r25, r25
    3b60:	5a 95       	dec	r21
    3b62:	a9 f7       	brne	.-22     	; 0x3b4e <__udivmodhi4_loop>
    3b64:	80 95       	com	r24
    3b66:	90 95       	com	r25
    3b68:	bc 01       	movw	r22, r24
    3b6a:	cd 01       	movw	r24, r26
    3b6c:	08 95       	ret

00003b6e <_exit>:
    3b6e:	f8 94       	cli

00003b70 <__stop_program>:
    3b70:	ff cf       	rjmp	.-2      	; 0x3b70 <__stop_program>
