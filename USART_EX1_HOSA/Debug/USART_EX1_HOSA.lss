
USART_EX1_HOSA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000042d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  000042d6  0000436a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800168  00800168  00004472  2**0
                  ALLOC
  3 .stab         000059ac  00000000  00000000  00004474  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000024e4  00000000  00000000  00009e20  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000c304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000c4c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000c6d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000ecea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  000101b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  000114c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  000116a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  000119ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000123c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 04 20 	jmp	0x4008	; 0x4008 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	aa 36       	cpi	r26, 0x6A	; 106
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e6 ed       	ldi	r30, 0xD6	; 214
      78:	f2 e4       	ldi	r31, 0x42	; 66
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <main>
      8a:	0c 94 69 21 	jmp	0x42d2	; 0x42d2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 71 20 	jmp	0x40e2	; 0x40e2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 8d 20 	jmp	0x411a	; 0x411a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 99 20 	jmp	0x4132	; 0x4132 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 99 20 	jmp	0x4132	; 0x4132 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 71 20 	jmp	0x40e2	; 0x40e2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 8d 20 	jmp	0x411a	; 0x411a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 79 20 	jmp	0x40f2	; 0x40f2 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 95 20 	jmp	0x412a	; 0x412a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 99 20 	jmp	0x4132	; 0x4132 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 99 20 	jmp	0x4132	; 0x4132 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 99 20 	jmp	0x4132	; 0x4132 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 7a 20 	jmp	0x40f4	; 0x40f4 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 96 20 	jmp	0x412c	; 0x412c <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 81 20 	jmp	0x4102	; 0x4102 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 9d 20 	jmp	0x413a	; 0x413a <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 79 20 	jmp	0x40f2	; 0x40f2 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 95 20 	jmp	0x412a	; 0x412a <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e8 59       	subi	r30, 0x98	; 152
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <USART_Init>:
#include "avr/io.h" /* To use the IO Ports Registers */
#include <util/delay.h>


// Initializes and enables the USART Module to start functionality
void USART_Init(uint32 baudRate) {
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	00 d0       	rcall	.+0      	; 0xef0 <USART_Init+0x6>
     ef0:	00 d0       	rcall	.+0      	; 0xef2 <USART_Init+0x8>
     ef2:	00 d0       	rcall	.+0      	; 0xef4 <USART_Init+0xa>
     ef4:	cd b7       	in	r28, 0x3d	; 61
     ef6:	de b7       	in	r29, 0x3e	; 62
     ef8:	6b 83       	std	Y+3, r22	; 0x03
     efa:	7c 83       	std	Y+4, r23	; 0x04
     efc:	8d 83       	std	Y+5, r24	; 0x05
     efe:	9e 83       	std	Y+6, r25	; 0x06

	// To initialize this Init Function, i need to:
	// Tweak the Frame
	// Set the baud rate

	uint16 UBBR_Value = 0;
     f00:	1a 82       	std	Y+2, r1	; 0x02
     f02:	19 82       	std	Y+1, r1	; 0x01

	SET_BIT(UCSRA, U2X);
     f04:	ab e2       	ldi	r26, 0x2B	; 43
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	eb e2       	ldi	r30, 0x2B	; 43
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	82 60       	ori	r24, 0x02	; 2
     f10:	8c 93       	st	X, r24

	SET_BIT(UCSRB, TXEN);
     f12:	aa e2       	ldi	r26, 0x2A	; 42
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	ea e2       	ldi	r30, 0x2A	; 42
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	88 60       	ori	r24, 0x08	; 8
     f1e:	8c 93       	st	X, r24
	SET_BIT(UCSRB, RXEN);
     f20:	aa e2       	ldi	r26, 0x2A	; 42
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	ea e2       	ldi	r30, 0x2A	; 42
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	80 61       	ori	r24, 0x10	; 16
     f2c:	8c 93       	st	X, r24

	SET_BIT(UCSRC, URSEL);
     f2e:	a0 e4       	ldi	r26, 0x40	; 64
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	e0 e4       	ldi	r30, 0x40	; 64
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	80 68       	ori	r24, 0x80	; 128
     f3a:	8c 93       	st	X, r24
	CLR_BIT(UCSRC, UMSEL);
     f3c:	a0 e4       	ldi	r26, 0x40	; 64
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	e0 e4       	ldi	r30, 0x40	; 64
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	8f 7b       	andi	r24, 0xBF	; 191
     f48:	8c 93       	st	X, r24
	SET_BIT(UCSRC, TXEN);
     f4a:	a0 e4       	ldi	r26, 0x40	; 64
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	e0 e4       	ldi	r30, 0x40	; 64
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	88 60       	ori	r24, 0x08	; 8
     f56:	8c 93       	st	X, r24

	CLR_BIT(UCSRC, UCSZ2);
     f58:	a0 e4       	ldi	r26, 0x40	; 64
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	e0 e4       	ldi	r30, 0x40	; 64
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	8b 7f       	andi	r24, 0xFB	; 251
     f64:	8c 93       	st	X, r24
	SET_BIT(UCSRC, UCSZ1);
     f66:	a0 e4       	ldi	r26, 0x40	; 64
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	e0 e4       	ldi	r30, 0x40	; 64
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	84 60       	ori	r24, 0x04	; 4
     f72:	8c 93       	st	X, r24
	SET_BIT(UCSRC, UCSZ0);
     f74:	a0 e4       	ldi	r26, 0x40	; 64
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e0 e4       	ldi	r30, 0x40	; 64
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	82 60       	ori	r24, 0x02	; 2
     f80:	8c 93       	st	X, r24

	// UBBRH = 0;
	// UBBRL = 207;
	// (0000) (1100 1111) 12 bits, (0000) is for UBBRH, (1100 1111) if for UBBRL

	UBBR_Value = (uint16) ( ( (F_CPU) / (8 * baudRate * 8UL) ) - 1 );
     f82:	8b 81       	ldd	r24, Y+3	; 0x03
     f84:	9c 81       	ldd	r25, Y+4	; 0x04
     f86:	ad 81       	ldd	r26, Y+5	; 0x05
     f88:	be 81       	ldd	r27, Y+6	; 0x06
     f8a:	88 0f       	add	r24, r24
     f8c:	99 1f       	adc	r25, r25
     f8e:	aa 1f       	adc	r26, r26
     f90:	bb 1f       	adc	r27, r27
     f92:	88 0f       	add	r24, r24
     f94:	99 1f       	adc	r25, r25
     f96:	aa 1f       	adc	r26, r26
     f98:	bb 1f       	adc	r27, r27
     f9a:	88 0f       	add	r24, r24
     f9c:	99 1f       	adc	r25, r25
     f9e:	aa 1f       	adc	r26, r26
     fa0:	bb 1f       	adc	r27, r27
     fa2:	88 0f       	add	r24, r24
     fa4:	99 1f       	adc	r25, r25
     fa6:	aa 1f       	adc	r26, r26
     fa8:	bb 1f       	adc	r27, r27
     faa:	88 0f       	add	r24, r24
     fac:	99 1f       	adc	r25, r25
     fae:	aa 1f       	adc	r26, r26
     fb0:	bb 1f       	adc	r27, r27
     fb2:	88 0f       	add	r24, r24
     fb4:	99 1f       	adc	r25, r25
     fb6:	aa 1f       	adc	r26, r26
     fb8:	bb 1f       	adc	r27, r27
     fba:	9c 01       	movw	r18, r24
     fbc:	ad 01       	movw	r20, r26
     fbe:	80 e4       	ldi	r24, 0x40	; 64
     fc0:	92 e4       	ldi	r25, 0x42	; 66
     fc2:	af e0       	ldi	r26, 0x0F	; 15
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	bc 01       	movw	r22, r24
     fc8:	cd 01       	movw	r24, r26
     fca:	0e 94 4f 20 	call	0x409e	; 0x409e <__udivmodsi4>
     fce:	da 01       	movw	r26, r20
     fd0:	c9 01       	movw	r24, r18
     fd2:	01 97       	sbiw	r24, 0x01	; 1
     fd4:	9a 83       	std	Y+2, r25	; 0x02
     fd6:	89 83       	std	Y+1, r24	; 0x01
	UBRRH = UBBR_Value >> 8;
     fd8:	e0 e4       	ldi	r30, 0x40	; 64
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	89 81       	ldd	r24, Y+1	; 0x01
     fde:	9a 81       	ldd	r25, Y+2	; 0x02
     fe0:	89 2f       	mov	r24, r25
     fe2:	99 27       	eor	r25, r25
     fe4:	80 83       	st	Z, r24
	// Because I want the 4 Zeroes in it

	UBRRL = UBBR_Value;
     fe6:	e9 e2       	ldi	r30, 0x29	; 41
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	89 81       	ldd	r24, Y+1	; 0x01
     fec:	80 83       	st	Z, r24
	// Because I want the actual value

}
     fee:	26 96       	adiw	r28, 0x06	; 6
     ff0:	0f b6       	in	r0, 0x3f	; 63
     ff2:	f8 94       	cli
     ff4:	de bf       	out	0x3e, r29	; 62
     ff6:	0f be       	out	0x3f, r0	; 63
     ff8:	cd bf       	out	0x3d, r28	; 61
     ffa:	cf 91       	pop	r28
     ffc:	df 91       	pop	r29
     ffe:	08 95       	ret

00001000 <USART_sendByte>:


// Responsible for the USART to send a byte
void USART_sendByte(const uint8 data) {
    1000:	df 93       	push	r29
    1002:	cf 93       	push	r28
    1004:	0f 92       	push	r0
    1006:	cd b7       	in	r28, 0x3d	; 61
    1008:	de b7       	in	r29, 0x3e	; 62
    100a:	89 83       	std	Y+1, r24	; 0x01
	  *  Bit 5 – UDRE: USART Data Register Empty
	  *
	  *  UDRE flag is set when the TX Buffer (UDR) is empty and ready
	  *  for transmitting a new byte waiting untill this flag is set to '1'
	  */
	while(BIT_IS_CLR(UCSRA,UDRE)) {
    100c:	eb e2       	ldi	r30, 0x2B	; 43
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	88 2f       	mov	r24, r24
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	80 72       	andi	r24, 0x20	; 32
    1018:	90 70       	andi	r25, 0x00	; 0
    101a:	00 97       	sbiw	r24, 0x00	; 0
    101c:	b9 f3       	breq	.-18     	; 0x100c <USART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    101e:	ec e2       	ldi	r30, 0x2C	; 44
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	89 81       	ldd	r24, Y+1	; 0x01
    1024:	80 83       	st	Z, r24

	} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	// This is waiting for the flag to be set to '0' to know that I received data
	*******************************************************************/
}
    1026:	0f 90       	pop	r0
    1028:	cf 91       	pop	r28
    102a:	df 91       	pop	r29
    102c:	08 95       	ret

0000102e <USART_receiveByte>:


// Responsible for the USART to receive a byte
uint8 USART_receiveByte(void) {
    102e:	df 93       	push	r29
    1030:	cf 93       	push	r28
    1032:	cd b7       	in	r28, 0x3d	; 61
    1034:	de b7       	in	r29, 0x3e	; 62
	/* UCSRA - USART Control and Status Register A
	  *  Bit 7 – RXC: USART Receive Complete, when it receives data, the flag = 0
	  */

	while ( BIT_IS_CLR(UCSRA, RXC) );
    1036:	eb e2       	ldi	r30, 0x2B	; 43
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	88 23       	and	r24, r24
    103e:	dc f7       	brge	.-10     	; 0x1036 <USART_receiveByte+0x8>
	// This is waiting for the flag to be set to '0' to know that I received data

	// When reading
	return UDR;
    1040:	ec e2       	ldi	r30, 0x2C	; 44
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
}
    1046:	cf 91       	pop	r28
    1048:	df 91       	pop	r29
    104a:	08 95       	ret

0000104c <USART_sendString>:


// Responsible for the USART to send an array of bytes, a string
void USART_sendString(const uint8 *str) {
    104c:	df 93       	push	r29
    104e:	cf 93       	push	r28
    1050:	00 d0       	rcall	.+0      	; 0x1052 <USART_sendString+0x6>
    1052:	0f 92       	push	r0
    1054:	cd b7       	in	r28, 0x3d	; 61
    1056:	de b7       	in	r29, 0x3e	; 62
    1058:	9b 83       	std	Y+3, r25	; 0x03
    105a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    105c:	19 82       	std	Y+1, r1	; 0x01
    105e:	0e c0       	rjmp	.+28     	; 0x107c <USART_sendString+0x30>
	while (str[i] != '\0') {
		USART_sendByte(str[i]);
    1060:	89 81       	ldd	r24, Y+1	; 0x01
    1062:	28 2f       	mov	r18, r24
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	8a 81       	ldd	r24, Y+2	; 0x02
    1068:	9b 81       	ldd	r25, Y+3	; 0x03
    106a:	fc 01       	movw	r30, r24
    106c:	e2 0f       	add	r30, r18
    106e:	f3 1f       	adc	r31, r19
    1070:	80 81       	ld	r24, Z
    1072:	0e 94 00 08 	call	0x1000	; 0x1000 <USART_sendByte>
		i++;
    1076:	89 81       	ldd	r24, Y+1	; 0x01
    1078:	8f 5f       	subi	r24, 0xFF	; 255
    107a:	89 83       	std	Y+1, r24	; 0x01


// Responsible for the USART to send an array of bytes, a string
void USART_sendString(const uint8 *str) {
	uint8 i = 0;
	while (str[i] != '\0') {
    107c:	89 81       	ldd	r24, Y+1	; 0x01
    107e:	28 2f       	mov	r18, r24
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	8a 81       	ldd	r24, Y+2	; 0x02
    1084:	9b 81       	ldd	r25, Y+3	; 0x03
    1086:	fc 01       	movw	r30, r24
    1088:	e2 0f       	add	r30, r18
    108a:	f3 1f       	adc	r31, r19
    108c:	80 81       	ld	r24, Z
    108e:	88 23       	and	r24, r24
    1090:	39 f7       	brne	.-50     	; 0x1060 <USART_sendString+0x14>
		USART_sendByte(str[i]);
		i++;
	}
}
    1092:	0f 90       	pop	r0
    1094:	0f 90       	pop	r0
    1096:	0f 90       	pop	r0
    1098:	cf 91       	pop	r28
    109a:	df 91       	pop	r29
    109c:	08 95       	ret

0000109e <USART_receiveString>:


// Responsible for the USART to receive an array of bytes, a string
void USART_receiveString(uint8 *str) {
    109e:	0f 93       	push	r16
    10a0:	1f 93       	push	r17
    10a2:	df 93       	push	r29
    10a4:	cf 93       	push	r28
    10a6:	00 d0       	rcall	.+0      	; 0x10a8 <USART_receiveString+0xa>
    10a8:	0f 92       	push	r0
    10aa:	cd b7       	in	r28, 0x3d	; 61
    10ac:	de b7       	in	r29, 0x3e	; 62
    10ae:	9b 83       	std	Y+3, r25	; 0x03
    10b0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    10b2:	19 82       	std	Y+1, r1	; 0x01
	str[i] = USART_receiveByte();
    10b4:	89 81       	ldd	r24, Y+1	; 0x01
    10b6:	28 2f       	mov	r18, r24
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	8a 81       	ldd	r24, Y+2	; 0x02
    10bc:	9b 81       	ldd	r25, Y+3	; 0x03
    10be:	8c 01       	movw	r16, r24
    10c0:	02 0f       	add	r16, r18
    10c2:	13 1f       	adc	r17, r19
    10c4:	0e 94 17 08 	call	0x102e	; 0x102e <USART_receiveByte>
    10c8:	f8 01       	movw	r30, r16
    10ca:	80 83       	st	Z, r24
    10cc:	0f c0       	rjmp	.+30     	; 0x10ec <USART_receiveString+0x4e>

	while (str[i] != '#') {
		i++;
    10ce:	89 81       	ldd	r24, Y+1	; 0x01
    10d0:	8f 5f       	subi	r24, 0xFF	; 255
    10d2:	89 83       	std	Y+1, r24	; 0x01
		str[i] = USART_receiveByte();
    10d4:	89 81       	ldd	r24, Y+1	; 0x01
    10d6:	28 2f       	mov	r18, r24
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	8a 81       	ldd	r24, Y+2	; 0x02
    10dc:	9b 81       	ldd	r25, Y+3	; 0x03
    10de:	8c 01       	movw	r16, r24
    10e0:	02 0f       	add	r16, r18
    10e2:	13 1f       	adc	r17, r19
    10e4:	0e 94 17 08 	call	0x102e	; 0x102e <USART_receiveByte>
    10e8:	f8 01       	movw	r30, r16
    10ea:	80 83       	st	Z, r24
// Responsible for the USART to receive an array of bytes, a string
void USART_receiveString(uint8 *str) {
	uint8 i = 0;
	str[i] = USART_receiveByte();

	while (str[i] != '#') {
    10ec:	89 81       	ldd	r24, Y+1	; 0x01
    10ee:	28 2f       	mov	r18, r24
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	8a 81       	ldd	r24, Y+2	; 0x02
    10f4:	9b 81       	ldd	r25, Y+3	; 0x03
    10f6:	fc 01       	movw	r30, r24
    10f8:	e2 0f       	add	r30, r18
    10fa:	f3 1f       	adc	r31, r19
    10fc:	80 81       	ld	r24, Z
    10fe:	83 32       	cpi	r24, 0x23	; 35
    1100:	31 f7       	brne	.-52     	; 0x10ce <USART_receiveString+0x30>
		i++;
		str[i] = USART_receiveByte();
	}
	str[i] = '\0'; // replacing the '#' with '\0'
    1102:	89 81       	ldd	r24, Y+1	; 0x01
    1104:	28 2f       	mov	r18, r24
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	9b 81       	ldd	r25, Y+3	; 0x03
    110c:	fc 01       	movw	r30, r24
    110e:	e2 0f       	add	r30, r18
    1110:	f3 1f       	adc	r31, r19
    1112:	10 82       	st	Z, r1
}
    1114:	0f 90       	pop	r0
    1116:	0f 90       	pop	r0
    1118:	0f 90       	pop	r0
    111a:	cf 91       	pop	r28
    111c:	df 91       	pop	r29
    111e:	1f 91       	pop	r17
    1120:	0f 91       	pop	r16
    1122:	08 95       	ret

00001124 <Timer0_setPrescaler>:

/*******************************************************************************
 *                              					Module Implementation                           					  *
 *******************************************************************************/

void Timer0_setPrescaler(void) {
    1124:	df 93       	push	r29
    1126:	cf 93       	push	r28
    1128:	cd b7       	in	r28, 0x3d	; 61
    112a:	de b7       	in	r29, 0x3e	; 62
	switch(PRESCALER_VALUE) {
		case PRESCALER_1024:
			SET_BIT(TCCR0, CS00);
    112c:	a3 e5       	ldi	r26, 0x53	; 83
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	e3 e5       	ldi	r30, 0x53	; 83
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	81 60       	ori	r24, 0x01	; 1
    1138:	8c 93       	st	X, r24
			CLR_BIT(TCCR0, CS01);
    113a:	a3 e5       	ldi	r26, 0x53	; 83
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	e3 e5       	ldi	r30, 0x53	; 83
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	8d 7f       	andi	r24, 0xFD	; 253
    1146:	8c 93       	st	X, r24
			SET_BIT(TCCR0, CS02);
    1148:	a3 e5       	ldi	r26, 0x53	; 83
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	e3 e5       	ldi	r30, 0x53	; 83
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	84 60       	ori	r24, 0x04	; 4
    1154:	8c 93       	st	X, r24
			SET_BIT(TCCR0, CS00);
			CLR_BIT(TCCR0, CS01);
			CLR_BIT(TCCR0, CS02);
		break;
	}
}
    1156:	cf 91       	pop	r28
    1158:	df 91       	pop	r29
    115a:	08 95       	ret

0000115c <Timer0_setMode>:

void Timer0_setMode(void) {
    115c:	df 93       	push	r29
    115e:	cf 93       	push	r28
    1160:	cd b7       	in	r28, 0x3d	; 61
    1162:	de b7       	in	r29, 0x3e	; 62
	switch(TIMER_MODE) {
		case NORMAL_MODE:
			Timer0_normalMode();
    1164:	0e 94 b7 08 	call	0x116e	; 0x116e <Timer0_normalMode>

		default:
			Timer0_normalMode();
		break;
	}
}
    1168:	cf 91       	pop	r28
    116a:	df 91       	pop	r29
    116c:	08 95       	ret

0000116e <Timer0_normalMode>:

void Timer0_normalMode(void) {
    116e:	df 93       	push	r29
    1170:	cf 93       	push	r28
    1172:	cd b7       	in	r28, 0x3d	; 61
    1174:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0, FOC0);
    1176:	a3 e5       	ldi	r26, 0x53	; 83
    1178:	b0 e0       	ldi	r27, 0x00	; 0
    117a:	e3 e5       	ldi	r30, 0x53	; 83
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	80 68       	ori	r24, 0x80	; 128
    1182:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, WGM00);
    1184:	a3 e5       	ldi	r26, 0x53	; 83
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	e3 e5       	ldi	r30, 0x53	; 83
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	8f 7b       	andi	r24, 0xBF	; 191
    1190:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, WGM01);
    1192:	a3 e5       	ldi	r26, 0x53	; 83
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	e3 e5       	ldi	r30, 0x53	; 83
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	87 7f       	andi	r24, 0xF7	; 247
    119e:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, COM01);
    11a0:	a3 e5       	ldi	r26, 0x53	; 83
    11a2:	b0 e0       	ldi	r27, 0x00	; 0
    11a4:	e3 e5       	ldi	r30, 0x53	; 83
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	8f 7d       	andi	r24, 0xDF	; 223
    11ac:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, COM00);
    11ae:	a3 e5       	ldi	r26, 0x53	; 83
    11b0:	b0 e0       	ldi	r27, 0x00	; 0
    11b2:	e3 e5       	ldi	r30, 0x53	; 83
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	80 81       	ld	r24, Z
    11b8:	8f 7e       	andi	r24, 0xEF	; 239
    11ba:	8c 93       	st	X, r24
}
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	08 95       	ret

000011c2 <Timer0_compareMode>:

void Timer0_compareMode(void) {
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0, FOC0);
    11ca:	a3 e5       	ldi	r26, 0x53	; 83
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	e3 e5       	ldi	r30, 0x53	; 83
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	80 68       	ori	r24, 0x80	; 128
    11d6:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, WGM00);
    11d8:	a3 e5       	ldi	r26, 0x53	; 83
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	e3 e5       	ldi	r30, 0x53	; 83
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	8f 7b       	andi	r24, 0xBF	; 191
    11e4:	8c 93       	st	X, r24
	SET_BIT(TCCR0, WGM01);
    11e6:	a3 e5       	ldi	r26, 0x53	; 83
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	e3 e5       	ldi	r30, 0x53	; 83
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	88 60       	ori	r24, 0x08	; 8
    11f2:	8c 93       	st	X, r24
#if (CTC_MODE == CTC_NORMAL)
	CLR_BIT(TCCR0, COM01);
	CLR_BIT(TCCR0, COM00);
#elif (CTC_MODE == CTC_TOGGLE)
	CLR_BIT(TCCR0, COM01);
    11f4:	a3 e5       	ldi	r26, 0x53	; 83
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	e3 e5       	ldi	r30, 0x53	; 83
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	8f 7d       	andi	r24, 0xDF	; 223
    1200:	8c 93       	st	X, r24
	SET_BIT(TCCR0, COM00);
    1202:	a3 e5       	ldi	r26, 0x53	; 83
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	e3 e5       	ldi	r30, 0x53	; 83
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	80 61       	ori	r24, 0x10	; 16
    120e:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, COM00);
#elif (CTC_MODE == CTC_SET)
	SET_BIT(TCCR0, COM01);
	SET_BIT(TCCR0, COM00);
#endif
}
    1210:	cf 91       	pop	r28
    1212:	df 91       	pop	r29
    1214:	08 95       	ret

00001216 <Timer0_fastPWMMode>:

void Timer0_fastPWMMode(void) {
    1216:	df 93       	push	r29
    1218:	cf 93       	push	r28
    121a:	cd b7       	in	r28, 0x3d	; 61
    121c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR0, FOC0);
    121e:	a3 e5       	ldi	r26, 0x53	; 83
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	e3 e5       	ldi	r30, 0x53	; 83
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	8f 77       	andi	r24, 0x7F	; 127
    122a:	8c 93       	st	X, r24
	SET_BIT(TCCR0, WGM00);
    122c:	a3 e5       	ldi	r26, 0x53	; 83
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	e3 e5       	ldi	r30, 0x53	; 83
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	80 64       	ori	r24, 0x40	; 64
    1238:	8c 93       	st	X, r24
	SET_BIT(TCCR0, WGM01);
    123a:	a3 e5       	ldi	r26, 0x53	; 83
    123c:	b0 e0       	ldi	r27, 0x00	; 0
    123e:	e3 e5       	ldi	r30, 0x53	; 83
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	88 60       	ori	r24, 0x08	; 8
    1246:	8c 93       	st	X, r24
#if (FASTPWM_MODE == FASTPWM_NORMAL)
	CLR_BIT(TCCR0, COM01);
	CLR_BIT(TCCR0, COM00);
#elif (FASTPWM_MODE == FASTPWM_NOINVERT)
	SET_BIT(TCCR0, COM01);
    1248:	a3 e5       	ldi	r26, 0x53	; 83
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	e3 e5       	ldi	r30, 0x53	; 83
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	80 62       	ori	r24, 0x20	; 32
    1254:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, COM00);
    1256:	a3 e5       	ldi	r26, 0x53	; 83
    1258:	b0 e0       	ldi	r27, 0x00	; 0
    125a:	e3 e5       	ldi	r30, 0x53	; 83
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	8f 7e       	andi	r24, 0xEF	; 239
    1262:	8c 93       	st	X, r24
#elif (FASTPWM_MODE == FASTPWM_INVERT)
	SET_BIT(TCCR0, COM01);
	SET_BIT(TCCR0, COM00);
#endif
}
    1264:	cf 91       	pop	r28
    1266:	df 91       	pop	r29
    1268:	08 95       	ret

0000126a <Timer1_setPrescaler>:



void Timer1_setPrescaler(void) {
    126a:	df 93       	push	r29
    126c:	cf 93       	push	r28
    126e:	cd b7       	in	r28, 0x3d	; 61
    1270:	de b7       	in	r29, 0x3e	; 62
	switch(PRESCALER_VALUE) {
		case PRESCALER_1024:
			SET_BIT(TCCR1B, CS10);
    1272:	ae e4       	ldi	r26, 0x4E	; 78
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	ee e4       	ldi	r30, 0x4E	; 78
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	80 81       	ld	r24, Z
    127c:	81 60       	ori	r24, 0x01	; 1
    127e:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, CS11);
    1280:	ae e4       	ldi	r26, 0x4E	; 78
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	ee e4       	ldi	r30, 0x4E	; 78
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	8d 7f       	andi	r24, 0xFD	; 253
    128c:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, CS12);
    128e:	ae e4       	ldi	r26, 0x4E	; 78
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	ee e4       	ldi	r30, 0x4E	; 78
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 81       	ld	r24, Z
    1298:	84 60       	ori	r24, 0x04	; 4
    129a:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, CS10);
			CLR_BIT(TCCR1B, CS11);
			CLR_BIT(TCCR1B, CS12);
		break;
	}
}
    129c:	cf 91       	pop	r28
    129e:	df 91       	pop	r29
    12a0:	08 95       	ret

000012a2 <Timer1_setMode>:

void Timer1_setMode(void) {
    12a2:	df 93       	push	r29
    12a4:	cf 93       	push	r28
    12a6:	cd b7       	in	r28, 0x3d	; 61
    12a8:	de b7       	in	r29, 0x3e	; 62
	switch(TIMER_MODE) {
		case NORMAL_MODE:
			Timer1_normalMode();
    12aa:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <Timer1_normalMode>

		default:
			Timer1_normalMode();
		break;
	}
}
    12ae:	cf 91       	pop	r28
    12b0:	df 91       	pop	r29
    12b2:	08 95       	ret

000012b4 <Timer1_normalMode>:

void Timer1_normalMode(void) {
    12b4:	df 93       	push	r29
    12b6:	cf 93       	push	r28
    12b8:	cd b7       	in	r28, 0x3d	; 61
    12ba:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1A, COM1A1);
    12bc:	af e4       	ldi	r26, 0x4F	; 79
    12be:	b0 e0       	ldi	r27, 0x00	; 0
    12c0:	ef e4       	ldi	r30, 0x4F	; 79
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	8f 77       	andi	r24, 0x7F	; 127
    12c8:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, COM1A0);
    12ca:	af e4       	ldi	r26, 0x4F	; 79
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	ef e4       	ldi	r30, 0x4F	; 79
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	8f 7b       	andi	r24, 0xBF	; 191
    12d6:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, COM1B1);
    12d8:	af e4       	ldi	r26, 0x4F	; 79
    12da:	b0 e0       	ldi	r27, 0x00	; 0
    12dc:	ef e4       	ldi	r30, 0x4F	; 79
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	8f 7d       	andi	r24, 0xDF	; 223
    12e4:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, COM1B0);
    12e6:	af e4       	ldi	r26, 0x4F	; 79
    12e8:	b0 e0       	ldi	r27, 0x00	; 0
    12ea:	ef e4       	ldi	r30, 0x4F	; 79
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	8f 7e       	andi	r24, 0xEF	; 239
    12f2:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, FOC1A);
    12f4:	af e4       	ldi	r26, 0x4F	; 79
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	ef e4       	ldi	r30, 0x4F	; 79
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	88 60       	ori	r24, 0x08	; 8
    1300:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, FOC1B);
    1302:	af e4       	ldi	r26, 0x4F	; 79
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	ef e4       	ldi	r30, 0x4F	; 79
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	84 60       	ori	r24, 0x04	; 4
    130e:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, WGM13);
    1310:	ae e4       	ldi	r26, 0x4E	; 78
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	ee e4       	ldi	r30, 0x4E	; 78
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	8f 7e       	andi	r24, 0xEF	; 239
    131c:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, WGM12);
    131e:	ae e4       	ldi	r26, 0x4E	; 78
    1320:	b0 e0       	ldi	r27, 0x00	; 0
    1322:	ee e4       	ldi	r30, 0x4E	; 78
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	80 81       	ld	r24, Z
    1328:	87 7f       	andi	r24, 0xF7	; 247
    132a:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, WGM11);
    132c:	af e4       	ldi	r26, 0x4F	; 79
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	ef e4       	ldi	r30, 0x4F	; 79
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	8d 7f       	andi	r24, 0xFD	; 253
    1338:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, WGM10);
    133a:	af e4       	ldi	r26, 0x4F	; 79
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	ef e4       	ldi	r30, 0x4F	; 79
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	8e 7f       	andi	r24, 0xFE	; 254
    1346:	8c 93       	st	X, r24
}
    1348:	cf 91       	pop	r28
    134a:	df 91       	pop	r29
    134c:	08 95       	ret

0000134e <Timer1_compareMode>:

void Timer1_compareMode(void) {
    134e:	df 93       	push	r29
    1350:	cf 93       	push	r28
    1352:	cd b7       	in	r28, 0x3d	; 61
    1354:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1A, FOC1A);
    1356:	af e4       	ldi	r26, 0x4F	; 79
    1358:	b0 e0       	ldi	r27, 0x00	; 0
    135a:	ef e4       	ldi	r30, 0x4F	; 79
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	80 81       	ld	r24, Z
    1360:	88 60       	ori	r24, 0x08	; 8
    1362:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, FOC1B);
    1364:	af e4       	ldi	r26, 0x4F	; 79
    1366:	b0 e0       	ldi	r27, 0x00	; 0
    1368:	ef e4       	ldi	r30, 0x4F	; 79
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	80 81       	ld	r24, Z
    136e:	84 60       	ori	r24, 0x04	; 4
    1370:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, WGM13);
    1372:	ae e4       	ldi	r26, 0x4E	; 78
    1374:	b0 e0       	ldi	r27, 0x00	; 0
    1376:	ee e4       	ldi	r30, 0x4E	; 78
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	8f 7e       	andi	r24, 0xEF	; 239
    137e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, WGM12);
    1380:	ae e4       	ldi	r26, 0x4E	; 78
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	ee e4       	ldi	r30, 0x4E	; 78
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	88 60       	ori	r24, 0x08	; 8
    138c:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, WGM11);
    138e:	af e4       	ldi	r26, 0x4F	; 79
    1390:	b0 e0       	ldi	r27, 0x00	; 0
    1392:	ef e4       	ldi	r30, 0x4F	; 79
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	8d 7f       	andi	r24, 0xFD	; 253
    139a:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, WGM10);
    139c:	af e4       	ldi	r26, 0x4F	; 79
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	ef e4       	ldi	r30, 0x4F	; 79
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	8e 7f       	andi	r24, 0xFE	; 254
    13a8:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, COM1A1);
	CLR_BIT(TCCR1A, COM1A0);
	CLR_BIT(TCCR1A, COM1B1);
	CLR_BIT(TCCR1A, COM1B0);
#elif (CTC_MODE == CTC_TOGGLE)
	CLR_BIT(TCCR1A, COM1A1);
    13aa:	af e4       	ldi	r26, 0x4F	; 79
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    13ae:	ef e4       	ldi	r30, 0x4F	; 79
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	8f 77       	andi	r24, 0x7F	; 127
    13b6:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, COM1A0);
    13b8:	af e4       	ldi	r26, 0x4F	; 79
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	ef e4       	ldi	r30, 0x4F	; 79
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	80 64       	ori	r24, 0x40	; 64
    13c4:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, COM1B1);
    13c6:	af e4       	ldi	r26, 0x4F	; 79
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	ef e4       	ldi	r30, 0x4F	; 79
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	8f 7d       	andi	r24, 0xDF	; 223
    13d2:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, COM1B0);
    13d4:	af e4       	ldi	r26, 0x4F	; 79
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	ef e4       	ldi	r30, 0x4F	; 79
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	80 61       	ori	r24, 0x10	; 16
    13e0:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, COM1A1);
	SET_BIT(TCCR1A, COM1A0);
	SET_BIT(TCCR1A, COM1B1);
	SET_BIT(TCCR1A, COM1B0);
#endif
}
    13e2:	cf 91       	pop	r28
    13e4:	df 91       	pop	r29
    13e6:	08 95       	ret

000013e8 <Timer1_fastPWMMode>:

void Timer1_fastPWMMode(void) {
    13e8:	df 93       	push	r29
    13ea:	cf 93       	push	r28
    13ec:	cd b7       	in	r28, 0x3d	; 61
    13ee:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1B, WGM13);
    13f0:	ae e4       	ldi	r26, 0x4E	; 78
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	ee e4       	ldi	r30, 0x4E	; 78
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	80 61       	ori	r24, 0x10	; 16
    13fc:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, WGM12);
    13fe:	ae e4       	ldi	r26, 0x4E	; 78
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	ee e4       	ldi	r30, 0x4E	; 78
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	88 60       	ori	r24, 0x08	; 8
    140a:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, WGM11);
    140c:	af e4       	ldi	r26, 0x4F	; 79
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	ef e4       	ldi	r30, 0x4F	; 79
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	82 60       	ori	r24, 0x02	; 2
    1418:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, WGM10);
    141a:	af e4       	ldi	r26, 0x4F	; 79
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	ef e4       	ldi	r30, 0x4F	; 79
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	81 60       	ori	r24, 0x01	; 1
    1426:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, COM1A1);
	CLR_BIT(TCCR1A, COM1A0);
	CLR_BIT(TCCR1A, COM1B1);
	CLR_BIT(TCCR1A, COM1B0);
#elif (FASTPWM_MODE == FASTPWM_NOINVERT)
	SET_BIT(TCCR1A, COM1A1);
    1428:	af e4       	ldi	r26, 0x4F	; 79
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	ef e4       	ldi	r30, 0x4F	; 79
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 81       	ld	r24, Z
    1432:	80 68       	ori	r24, 0x80	; 128
    1434:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, COM1A0);
    1436:	af e4       	ldi	r26, 0x4F	; 79
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	ef e4       	ldi	r30, 0x4F	; 79
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	8f 7b       	andi	r24, 0xBF	; 191
    1442:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, COM1B1);
    1444:	af e4       	ldi	r26, 0x4F	; 79
    1446:	b0 e0       	ldi	r27, 0x00	; 0
    1448:	ef e4       	ldi	r30, 0x4F	; 79
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	80 62       	ori	r24, 0x20	; 32
    1450:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, COM1B0);
    1452:	af e4       	ldi	r26, 0x4F	; 79
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	ef e4       	ldi	r30, 0x4F	; 79
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	8f 7e       	andi	r24, 0xEF	; 239
    145e:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, COM1A1);
	SET_BIT(TCCR1A, COM1A0);
	SET_BIT(TCCR1A, COM1B1);
	SET_BIT(TCCR1A, COM1B0);
#endif
}
    1460:	cf 91       	pop	r28
    1462:	df 91       	pop	r29
    1464:	08 95       	ret

00001466 <Timer2_setPrescaler>:



void Timer2_setPrescaler(void) {
    1466:	df 93       	push	r29
    1468:	cf 93       	push	r28
    146a:	cd b7       	in	r28, 0x3d	; 61
    146c:	de b7       	in	r29, 0x3e	; 62
	switch(PRESCALER_VALUE) {
		case PRESCALER_1024:
			SET_BIT(TCCR2, CS20);
    146e:	a5 e4       	ldi	r26, 0x45	; 69
    1470:	b0 e0       	ldi	r27, 0x00	; 0
    1472:	e5 e4       	ldi	r30, 0x45	; 69
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	81 60       	ori	r24, 0x01	; 1
    147a:	8c 93       	st	X, r24
			CLR_BIT(TCCR2, CS21);
    147c:	a5 e4       	ldi	r26, 0x45	; 69
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	e5 e4       	ldi	r30, 0x45	; 69
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	8d 7f       	andi	r24, 0xFD	; 253
    1488:	8c 93       	st	X, r24
			SET_BIT(TCCR2, CS22);
    148a:	a5 e4       	ldi	r26, 0x45	; 69
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	e5 e4       	ldi	r30, 0x45	; 69
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	84 60       	ori	r24, 0x04	; 4
    1496:	8c 93       	st	X, r24
			SET_BIT(TCCR2, CS20);
			CLR_BIT(TCCR2, CS21);
			CLR_BIT(TCCR2, CS22);
		break;
	}
}
    1498:	cf 91       	pop	r28
    149a:	df 91       	pop	r29
    149c:	08 95       	ret

0000149e <Timer2_setMode>:

void Timer2_setMode(void) {
    149e:	df 93       	push	r29
    14a0:	cf 93       	push	r28
    14a2:	cd b7       	in	r28, 0x3d	; 61
    14a4:	de b7       	in	r29, 0x3e	; 62
	switch(TIMER_MODE) {
		case NORMAL_MODE:
			Timer2_normalMode();
    14a6:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <Timer2_normalMode>

		default:
			Timer2_normalMode();
		break;
	}
}
    14aa:	cf 91       	pop	r28
    14ac:	df 91       	pop	r29
    14ae:	08 95       	ret

000014b0 <Timer2_normalMode>:

void Timer2_normalMode(void) {
    14b0:	df 93       	push	r29
    14b2:	cf 93       	push	r28
    14b4:	cd b7       	in	r28, 0x3d	; 61
    14b6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR2, FOC2);
    14b8:	a5 e4       	ldi	r26, 0x45	; 69
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	e5 e4       	ldi	r30, 0x45	; 69
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	80 68       	ori	r24, 0x80	; 128
    14c4:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, WGM20);
    14c6:	a5 e4       	ldi	r26, 0x45	; 69
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	e5 e4       	ldi	r30, 0x45	; 69
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	8f 7b       	andi	r24, 0xBF	; 191
    14d2:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, WGM21);
    14d4:	a5 e4       	ldi	r26, 0x45	; 69
    14d6:	b0 e0       	ldi	r27, 0x00	; 0
    14d8:	e5 e4       	ldi	r30, 0x45	; 69
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	87 7f       	andi	r24, 0xF7	; 247
    14e0:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, COM21);
    14e2:	a5 e4       	ldi	r26, 0x45	; 69
    14e4:	b0 e0       	ldi	r27, 0x00	; 0
    14e6:	e5 e4       	ldi	r30, 0x45	; 69
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
    14ec:	8f 7d       	andi	r24, 0xDF	; 223
    14ee:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, COM20);
    14f0:	a5 e4       	ldi	r26, 0x45	; 69
    14f2:	b0 e0       	ldi	r27, 0x00	; 0
    14f4:	e5 e4       	ldi	r30, 0x45	; 69
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	80 81       	ld	r24, Z
    14fa:	8f 7e       	andi	r24, 0xEF	; 239
    14fc:	8c 93       	st	X, r24
}
    14fe:	cf 91       	pop	r28
    1500:	df 91       	pop	r29
    1502:	08 95       	ret

00001504 <Timer2_compareMode>:

void Timer2_compareMode(void) {
    1504:	df 93       	push	r29
    1506:	cf 93       	push	r28
    1508:	cd b7       	in	r28, 0x3d	; 61
    150a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR2, FOC2);
    150c:	a5 e4       	ldi	r26, 0x45	; 69
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	e5 e4       	ldi	r30, 0x45	; 69
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	80 68       	ori	r24, 0x80	; 128
    1518:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, WGM20);
    151a:	a5 e4       	ldi	r26, 0x45	; 69
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	e5 e4       	ldi	r30, 0x45	; 69
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	8f 7b       	andi	r24, 0xBF	; 191
    1526:	8c 93       	st	X, r24
	SET_BIT(TCCR2, WGM21);
    1528:	a5 e4       	ldi	r26, 0x45	; 69
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	e5 e4       	ldi	r30, 0x45	; 69
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	88 60       	ori	r24, 0x08	; 8
    1534:	8c 93       	st	X, r24
#if (CTC_MODE == CTC_NORMAL)
	CLR_BIT(TCCR2, COM21);
	CLR_BIT(TCCR2, COM20);
#elif (CTC_MODE == CTC_TOGGLE)
	CLR_BIT(TCCR2, COM21);
    1536:	a5 e4       	ldi	r26, 0x45	; 69
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	e5 e4       	ldi	r30, 0x45	; 69
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	8f 7d       	andi	r24, 0xDF	; 223
    1542:	8c 93       	st	X, r24
	SET_BIT(TCCR2, COM20);
    1544:	a5 e4       	ldi	r26, 0x45	; 69
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	e5 e4       	ldi	r30, 0x45	; 69
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	80 61       	ori	r24, 0x10	; 16
    1550:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, COM20);
#elif (CTC_MODE == CTC_SET)
	SET_BIT(TCCR2, COM21);
	SET_BIT(TCCR2, COM20);
#endif
}
    1552:	cf 91       	pop	r28
    1554:	df 91       	pop	r29
    1556:	08 95       	ret

00001558 <Timer2_fastPWMMode>:

void Timer2_fastPWMMode(void) {
    1558:	df 93       	push	r29
    155a:	cf 93       	push	r28
    155c:	cd b7       	in	r28, 0x3d	; 61
    155e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR2, WGM20);
    1560:	a5 e4       	ldi	r26, 0x45	; 69
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	e5 e4       	ldi	r30, 0x45	; 69
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	80 64       	ori	r24, 0x40	; 64
    156c:	8c 93       	st	X, r24
	SET_BIT(TCCR2, WGM21);
    156e:	a5 e4       	ldi	r26, 0x45	; 69
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	e5 e4       	ldi	r30, 0x45	; 69
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	88 60       	ori	r24, 0x08	; 8
    157a:	8c 93       	st	X, r24
#if (FASTPWM_MODE == FASTPWM_NORMAL)
	CLR_BIT(TCCR2, COM21);
	CLR_BIT(TCCR2, COM20);
#elif (FASTPWM_MODE == FASTPWM_NOINVERT)
	SET_BIT(TCCR2, COM21);
    157c:	a5 e4       	ldi	r26, 0x45	; 69
    157e:	b0 e0       	ldi	r27, 0x00	; 0
    1580:	e5 e4       	ldi	r30, 0x45	; 69
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	80 81       	ld	r24, Z
    1586:	80 62       	ori	r24, 0x20	; 32
    1588:	8c 93       	st	X, r24
	CLR_BIT(TCCR2, COM20);
    158a:	a5 e4       	ldi	r26, 0x45	; 69
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	e5 e4       	ldi	r30, 0x45	; 69
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	8f 7e       	andi	r24, 0xEF	; 239
    1596:	8c 93       	st	X, r24
#elif (FASTPWM_MODE == FASTPWM_INVERT)
	SET_BIT(TCCR2, COM21);
	SET_BIT(TCCR2, COM20);
#endif
}
    1598:	cf 91       	pop	r28
    159a:	df 91       	pop	r29
    159c:	08 95       	ret

0000159e <Timer0_Init>:


// Initializes and enables the Master mode for the TWI Module to start functionality
#if (TIMER_SELECT == TIMER0)
	void Timer0_Init() {
    159e:	df 93       	push	r29
    15a0:	cf 93       	push	r28
    15a2:	cd b7       	in	r28, 0x3d	; 61
    15a4:	de b7       	in	r29, 0x3e	; 62
		Timer0_setPrescaler();
    15a6:	0e 94 92 08 	call	0x1124	; 0x1124 <Timer0_setPrescaler>
		Timer0_setMode();
    15aa:	0e 94 ae 08 	call	0x115c	; 0x115c <Timer0_setMode>
	}
    15ae:	cf 91       	pop	r28
    15b0:	df 91       	pop	r29
    15b2:	08 95       	ret

000015b4 <Timer_setDelay>:
		Timer2_setMode();
	}
#endif


void Timer_setDelay(float32 timeDelay) {
    15b4:	df 93       	push	r29
    15b6:	cf 93       	push	r28
    15b8:	cd b7       	in	r28, 0x3d	; 61
    15ba:	de b7       	in	r29, 0x3e	; 62
    15bc:	61 97       	sbiw	r28, 0x11	; 17
    15be:	0f b6       	in	r0, 0x3f	; 63
    15c0:	f8 94       	cli
    15c2:	de bf       	out	0x3e, r29	; 62
    15c4:	0f be       	out	0x3f, r0	; 63
    15c6:	cd bf       	out	0x3d, r28	; 61
    15c8:	6e 87       	std	Y+14, r22	; 0x0e
    15ca:	7f 87       	std	Y+15, r23	; 0x0f
    15cc:	88 8b       	std	Y+16, r24	; 0x10
    15ce:	99 8b       	std	Y+17, r25	; 0x11
	// Compares overflow counter with overflow amount in a loop
	// Executes a busy wait function
	// Then clears the TIFR by setting it
	// Iterates Overflow Counter

	float32 Tick_Time = 0;
    15d0:	80 e0       	ldi	r24, 0x00	; 0
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	a0 e0       	ldi	r26, 0x00	; 0
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	8a 87       	std	Y+10, r24	; 0x0a
    15da:	9b 87       	std	Y+11, r25	; 0x0b
    15dc:	ac 87       	std	Y+12, r26	; 0x0c
    15de:	bd 87       	std	Y+13, r27	; 0x0d
	float32 MaxDelay_Time = 0;
    15e0:	80 e0       	ldi	r24, 0x00	; 0
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	a0 e0       	ldi	r26, 0x00	; 0
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	8e 83       	std	Y+6, r24	; 0x06
    15ea:	9f 83       	std	Y+7, r25	; 0x07
    15ec:	a8 87       	std	Y+8, r26	; 0x08
    15ee:	b9 87       	std	Y+9, r27	; 0x09
	float32 overflowAmount = 0;
    15f0:	80 e0       	ldi	r24, 0x00	; 0
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	a0 e0       	ldi	r26, 0x00	; 0
    15f6:	b0 e0       	ldi	r27, 0x00	; 0
    15f8:	8a 83       	std	Y+2, r24	; 0x02
    15fa:	9b 83       	std	Y+3, r25	; 0x03
    15fc:	ac 83       	std	Y+4, r26	; 0x04
    15fe:	bd 83       	std	Y+5, r27	; 0x05
	uint8 overFlowCounter = 0;
    1600:	19 82       	std	Y+1, r1	; 0x01

	Tick_Time = PRESCALER_VALUE / (float)F_CPU;
    1602:	8d eb       	ldi	r24, 0xBD	; 189
    1604:	97 e3       	ldi	r25, 0x37	; 55
    1606:	a6 e8       	ldi	r26, 0x86	; 134
    1608:	ba e3       	ldi	r27, 0x3A	; 58
    160a:	8a 87       	std	Y+10, r24	; 0x0a
    160c:	9b 87       	std	Y+11, r25	; 0x0b
    160e:	ac 87       	std	Y+12, r26	; 0x0c
    1610:	bd 87       	std	Y+13, r27	; 0x0d
	MaxDelay_Time = Tick_Time * 256; 		// 2^n = 256
    1612:	6a 85       	ldd	r22, Y+10	; 0x0a
    1614:	7b 85       	ldd	r23, Y+11	; 0x0b
    1616:	8c 85       	ldd	r24, Y+12	; 0x0c
    1618:	9d 85       	ldd	r25, Y+13	; 0x0d
    161a:	20 e0       	ldi	r18, 0x00	; 0
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	40 e8       	ldi	r20, 0x80	; 128
    1620:	53 e4       	ldi	r21, 0x43	; 67
    1622:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1626:	dc 01       	movw	r26, r24
    1628:	cb 01       	movw	r24, r22
    162a:	8e 83       	std	Y+6, r24	; 0x06
    162c:	9f 83       	std	Y+7, r25	; 0x07
    162e:	a8 87       	std	Y+8, r26	; 0x08
    1630:	b9 87       	std	Y+9, r27	; 0x09
	overflowAmount = ceil((timeDelay) / (MaxDelay_Time));
    1632:	6e 85       	ldd	r22, Y+14	; 0x0e
    1634:	7f 85       	ldd	r23, Y+15	; 0x0f
    1636:	88 89       	ldd	r24, Y+16	; 0x10
    1638:	99 89       	ldd	r25, Y+17	; 0x11
    163a:	2e 81       	ldd	r18, Y+6	; 0x06
    163c:	3f 81       	ldd	r19, Y+7	; 0x07
    163e:	48 85       	ldd	r20, Y+8	; 0x08
    1640:	59 85       	ldd	r21, Y+9	; 0x09
    1642:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1646:	dc 01       	movw	r26, r24
    1648:	cb 01       	movw	r24, r22
    164a:	bc 01       	movw	r22, r24
    164c:	cd 01       	movw	r24, r26
    164e:	0e 94 c9 20 	call	0x4192	; 0x4192 <ceil>
    1652:	dc 01       	movw	r26, r24
    1654:	cb 01       	movw	r24, r22
    1656:	8a 83       	std	Y+2, r24	; 0x02
    1658:	9b 83       	std	Y+3, r25	; 0x03
    165a:	ac 83       	std	Y+4, r26	; 0x04
    165c:	bd 83       	std	Y+5, r27	; 0x05
	//overflowAmount = floor((timeDelay) / (MaxDelay_Time));

#if (TIMER_SELECT == TIMER0)
	// Using the Timer Overflow Flag TOV
	TCNT0 = 0x00;
    165e:	e2 e5       	ldi	r30, 0x52	; 82
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	10 82       	st	Z, r1
    1664:	13 c0       	rjmp	.+38     	; 0x168c <Timer_setDelay+0xd8>
	while (overFlowCounter < overflowAmount) {
		while (BIT_IS_CLR(TIFR, TOV0)) {
    1666:	e8 e5       	ldi	r30, 0x58	; 88
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	80 81       	ld	r24, Z
    166c:	88 2f       	mov	r24, r24
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	81 70       	andi	r24, 0x01	; 1
    1672:	90 70       	andi	r25, 0x00	; 0
    1674:	00 97       	sbiw	r24, 0x00	; 0
    1676:	b9 f3       	breq	.-18     	; 0x1666 <Timer_setDelay+0xb2>
			// This function is a Busy Wait
		}
		overFlowCounter++;
    1678:	89 81       	ldd	r24, Y+1	; 0x01
    167a:	8f 5f       	subi	r24, 0xFF	; 255
    167c:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(TIFR, TOV0);
    167e:	a8 e5       	ldi	r26, 0x58	; 88
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	e8 e5       	ldi	r30, 0x58	; 88
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	81 60       	ori	r24, 0x01	; 1
    168a:	8c 93       	st	X, r24
	//overflowAmount = floor((timeDelay) / (MaxDelay_Time));

#if (TIMER_SELECT == TIMER0)
	// Using the Timer Overflow Flag TOV
	TCNT0 = 0x00;
	while (overFlowCounter < overflowAmount) {
    168c:	89 81       	ldd	r24, Y+1	; 0x01
    168e:	88 2f       	mov	r24, r24
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	aa 27       	eor	r26, r26
    1694:	97 fd       	sbrc	r25, 7
    1696:	a0 95       	com	r26
    1698:	ba 2f       	mov	r27, r26
    169a:	bc 01       	movw	r22, r24
    169c:	cd 01       	movw	r24, r26
    169e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    16a2:	dc 01       	movw	r26, r24
    16a4:	cb 01       	movw	r24, r22
    16a6:	bc 01       	movw	r22, r24
    16a8:	cd 01       	movw	r24, r26
    16aa:	2a 81       	ldd	r18, Y+2	; 0x02
    16ac:	3b 81       	ldd	r19, Y+3	; 0x03
    16ae:	4c 81       	ldd	r20, Y+4	; 0x04
    16b0:	5d 81       	ldd	r21, Y+5	; 0x05
    16b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16b6:	88 23       	and	r24, r24
    16b8:	b4 f2       	brlt	.-84     	; 0x1666 <Timer_setDelay+0xb2>
			// This function is a Busy Wait
		}
		overFlowCounter++;
		SET_BIT(TIFR, TOV0);
	}
	overFlowCounter = 0;
    16ba:	19 82       	std	Y+1, r1	; 0x01
	TCCR0 = 0x00;
    16bc:	e3 e5       	ldi	r30, 0x53	; 83
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	10 82       	st	Z, r1
	}
	overFlowCounter = 0;
	TCNT2 = 0x00;

#endif
}
    16c2:	61 96       	adiw	r28, 0x11	; 17
    16c4:	0f b6       	in	r0, 0x3f	; 63
    16c6:	f8 94       	cli
    16c8:	de bf       	out	0x3e, r29	; 62
    16ca:	0f be       	out	0x3f, r0	; 63
    16cc:	cd bf       	out	0x3d, r28	; 61
    16ce:	cf 91       	pop	r28
    16d0:	df 91       	pop	r29
    16d2:	08 95       	ret

000016d4 <SPI_initMaster>:
#include "avr/io.h" /* To use the IO Ports Registers */
#include <util/delay.h>


// Initializes and enables the Master mode for the SPI Module to start functionality
void SPI_initMaster(void) {
    16d4:	df 93       	push	r29
    16d6:	cf 93       	push	r28
    16d8:	cd b7       	in	r28, 0x3d	; 61
    16da:	de b7       	in	r29, 0x3e	; 62
	 *	SS (PB4)   	--> 	Output
	 *	MOSI (PB5) --> 	Output
	 *	MISO (PB6) --> 	Input
	 *	SCK (PB7) 	--> 	Output
	 */
	GPIO_setupPinDirection(PORT_B, SS, PIN_OUTPUT);
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	64 e0       	ldi	r22, 0x04	; 4
    16e0:	41 e0       	ldi	r20, 0x01	; 1
    16e2:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORT_B, MOSI, PIN_OUTPUT);
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	65 e0       	ldi	r22, 0x05	; 5
    16ea:	41 e0       	ldi	r20, 0x01	; 1
    16ec:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORT_B, MISO, PIN_INPUT);
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	66 e0       	ldi	r22, 0x06	; 6
    16f4:	40 e0       	ldi	r20, 0x00	; 0
    16f6:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORT_B, SCK, PIN_OUTPUT);
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	67 e0       	ldi	r22, 0x07	; 7
    16fe:	41 e0       	ldi	r20, 0x01	; 1
    1700:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <GPIO_setupPinDirection>
	  *  Bit 3 – CPOL: Clock Polarity
	  *  Bit 2 – CPHA: Clock Phase
	  *  Bits 1, 0 – SPR1, SPR0: SPI Clock Rate Select 1 and 0
	  */

	SET_BIT(SPCR, SPE); // Enabling the SPI Module
    1704:	ad e2       	ldi	r26, 0x2D	; 45
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	ed e2       	ldi	r30, 0x2D	; 45
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	80 64       	ori	r24, 0x40	; 64
    1710:	8c 93       	st	X, r24
	SET_BIT(SPCR, MSTR); // Enabling the Master / Slave Mode; I will choose Master
    1712:	ad e2       	ldi	r26, 0x2D	; 45
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	ed e2       	ldi	r30, 0x2D	; 45
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	80 61       	ori	r24, 0x10	; 16
    171e:	8c 93       	st	X, r24
	CLR_BIT(SPCR, SPR1); // Choosing the SCK rate, Fosc / 4
    1720:	ad e2       	ldi	r26, 0x2D	; 45
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	ed e2       	ldi	r30, 0x2D	; 45
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
    172a:	8d 7f       	andi	r24, 0xFD	; 253
    172c:	8c 93       	st	X, r24
	CLR_BIT(SPCR, SPR0); // So SPR1, SPR0 = '00'
    172e:	ad e2       	ldi	r26, 0x2D	; 45
    1730:	b0 e0       	ldi	r27, 0x00	; 0
    1732:	ed e2       	ldi	r30, 0x2D	; 45
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	8e 7f       	andi	r24, 0xFE	; 254
    173a:	8c 93       	st	X, r24
	  *  Bit 7 – SPIF: SPI Interrupt Flag
	  *  Bit 6 – WCOL: Write COLlision Flag
	  *  Bit 5..1 – Res: Reserved Bits
	  *  Bit 0 – SPI2X: Double SPI Speed Bit
	  */
	CLR_BIT(SPSR, SPI2X); // Make SPI2X = '0' to support the Fosc / 4
    173c:	ae e2       	ldi	r26, 0x2E	; 46
    173e:	b0 e0       	ldi	r27, 0x00	; 0
    1740:	ee e2       	ldi	r30, 0x2E	; 46
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	80 81       	ld	r24, Z
    1746:	8e 7f       	andi	r24, 0xFE	; 254
    1748:	8c 93       	st	X, r24

}
    174a:	cf 91       	pop	r28
    174c:	df 91       	pop	r29
    174e:	08 95       	ret

00001750 <SPI_initSlave>:


// Initializes and enables the Slave mode for the SPI Module to start functionality
void SPI_initSlave(void) {
    1750:	df 93       	push	r29
    1752:	cf 93       	push	r28
    1754:	cd b7       	in	r28, 0x3d	; 61
    1756:	de b7       	in	r29, 0x3e	; 62
	 *	SS (PB4)   	--> 	Input
	 *	MOSI (PB5) --> 	Input
	 *	MISO (PB6) --> 	Output
	 *	SCK (PB7) 	--> 	Input
	 */
	GPIO_setupPinDirection(PORT_B, SS, PIN_INPUT);
    1758:	81 e0       	ldi	r24, 0x01	; 1
    175a:	64 e0       	ldi	r22, 0x04	; 4
    175c:	40 e0       	ldi	r20, 0x00	; 0
    175e:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORT_B, MOSI, PIN_INPUT);
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	65 e0       	ldi	r22, 0x05	; 5
    1766:	40 e0       	ldi	r20, 0x00	; 0
    1768:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORT_B, MISO, PIN_OUTPUT);
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	66 e0       	ldi	r22, 0x06	; 6
    1770:	41 e0       	ldi	r20, 0x01	; 1
    1772:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORT_B, SCK, PIN_INPUT);
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	67 e0       	ldi	r22, 0x07	; 7
    177a:	40 e0       	ldi	r20, 0x00	; 0
    177c:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <GPIO_setupPinDirection>
	  *  Bit 4 – MSTR: Master/Slave Select
	  *  Bit 3 – CPOL: Clock Polarity
	  *  Bit 2 – CPHA: Clock Phase
	  *  Bits 1, 0 – SPR1, SPR0: SPI Clock Rate Select 1 and 0
	  */
	SET_BIT(SPCR, SPE); // Enabling the SPI Module
    1780:	ad e2       	ldi	r26, 0x2D	; 45
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	ed e2       	ldi	r30, 0x2D	; 45
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	80 64       	ori	r24, 0x40	; 64
    178c:	8c 93       	st	X, r24
	CLR_BIT(SPCR, MSTR); // Enabling the Master / Slave Mode; I will choose Master
    178e:	ad e2       	ldi	r26, 0x2D	; 45
    1790:	b0 e0       	ldi	r27, 0x00	; 0
    1792:	ed e2       	ldi	r30, 0x2D	; 45
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	80 81       	ld	r24, Z
    1798:	8f 7e       	andi	r24, 0xEF	; 239
    179a:	8c 93       	st	X, r24
	CLR_BIT(SPCR, SPR1); // Choosing the SCK rate, Fosc / 4
    179c:	ad e2       	ldi	r26, 0x2D	; 45
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	ed e2       	ldi	r30, 0x2D	; 45
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	8d 7f       	andi	r24, 0xFD	; 253
    17a8:	8c 93       	st	X, r24
	CLR_BIT(SPCR, SPR0); // So SPR1, SPR0 = '00'
    17aa:	ad e2       	ldi	r26, 0x2D	; 45
    17ac:	b0 e0       	ldi	r27, 0x00	; 0
    17ae:	ed e2       	ldi	r30, 0x2D	; 45
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	8e 7f       	andi	r24, 0xFE	; 254
    17b6:	8c 93       	st	X, r24
	  *  Bit 7 – SPIF: SPI Interrupt Flag
	  *  Bit 6 – WCOL: Write COLlision Flag
	  *  Bit 5..1 – Res: Reserved Bits
	  *  Bit 0 – SPI2X: Double SPI Speed Bit
	  */
	CLR_BIT(SPSR, SPI2X); // Make SPI2X = '0' to support the Fosc / 4
    17b8:	ae e2       	ldi	r26, 0x2E	; 46
    17ba:	b0 e0       	ldi	r27, 0x00	; 0
    17bc:	ee e2       	ldi	r30, 0x2E	; 46
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 81       	ld	r24, Z
    17c2:	8e 7f       	andi	r24, 0xFE	; 254
    17c4:	8c 93       	st	X, r24

}
    17c6:	cf 91       	pop	r28
    17c8:	df 91       	pop	r29
    17ca:	08 95       	ret

000017cc <SPI_sendReceiveByte>:


// Responsible for the SPI to send & receive a byte
uint8 SPI_sendReceiveByte(uint8 data) {
    17cc:	df 93       	push	r29
    17ce:	cf 93       	push	r28
    17d0:	0f 92       	push	r0
    17d2:	cd b7       	in	r28, 0x3d	; 61
    17d4:	de b7       	in	r29, 0x3e	; 62
    17d6:	89 83       	std	Y+1, r24	; 0x01

	SPDR = data;
    17d8:	ef e2       	ldi	r30, 0x2F	; 47
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	89 81       	ldd	r24, Y+1	; 0x01
    17de:	80 83       	st	Z, r24

	while(BIT_IS_CLR(SPSR, SPIF)) {
    17e0:	ee e2       	ldi	r30, 0x2E	; 46
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	88 23       	and	r24, r24
    17e8:	dc f7       	brge	.-10     	; 0x17e0 <SPI_sendReceiveByte+0x14>
		 * flag is set, Master will set SS to low to generate clock on SCK pin
		 */
	}

	// after SPIF is set, then I return the data
	return SPDR;
    17ea:	ef e2       	ldi	r30, 0x2F	; 47
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
}
    17f0:	0f 90       	pop	r0
    17f2:	cf 91       	pop	r28
    17f4:	df 91       	pop	r29
    17f6:	08 95       	ret

000017f8 <SPI_sendString>:

void SPI_sendString(const uint8 *str) {
    17f8:	df 93       	push	r29
    17fa:	cf 93       	push	r28
    17fc:	00 d0       	rcall	.+0      	; 0x17fe <SPI_sendString+0x6>
    17fe:	00 d0       	rcall	.+0      	; 0x1800 <SPI_sendString+0x8>
    1800:	cd b7       	in	r28, 0x3d	; 61
    1802:	de b7       	in	r29, 0x3e	; 62
    1804:	9c 83       	std	Y+4, r25	; 0x04
    1806:	8b 83       	std	Y+3, r24	; 0x03
	uint8 i = 0;
    1808:	1a 82       	std	Y+2, r1	; 0x02
	uint8 receivedData = 0;
    180a:	19 82       	std	Y+1, r1	; 0x01
    180c:	0f c0       	rjmp	.+30     	; 0x182c <SPI_sendString+0x34>

	while (str[i] != '\0') {
		// receivedData contains the data from the other device
		receivedData = SPI_sendReceiveByte(str[i]);
    180e:	8a 81       	ldd	r24, Y+2	; 0x02
    1810:	28 2f       	mov	r18, r24
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	8b 81       	ldd	r24, Y+3	; 0x03
    1816:	9c 81       	ldd	r25, Y+4	; 0x04
    1818:	fc 01       	movw	r30, r24
    181a:	e2 0f       	add	r30, r18
    181c:	f3 1f       	adc	r31, r19
    181e:	80 81       	ld	r24, Z
    1820:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <SPI_sendReceiveByte>
    1824:	89 83       	std	Y+1, r24	; 0x01
		i++;
    1826:	8a 81       	ldd	r24, Y+2	; 0x02
    1828:	8f 5f       	subi	r24, 0xFF	; 255
    182a:	8a 83       	std	Y+2, r24	; 0x02

void SPI_sendString(const uint8 *str) {
	uint8 i = 0;
	uint8 receivedData = 0;

	while (str[i] != '\0') {
    182c:	8a 81       	ldd	r24, Y+2	; 0x02
    182e:	28 2f       	mov	r18, r24
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	8b 81       	ldd	r24, Y+3	; 0x03
    1834:	9c 81       	ldd	r25, Y+4	; 0x04
    1836:	fc 01       	movw	r30, r24
    1838:	e2 0f       	add	r30, r18
    183a:	f3 1f       	adc	r31, r19
    183c:	80 81       	ld	r24, Z
    183e:	88 23       	and	r24, r24
    1840:	31 f7       	brne	.-52     	; 0x180e <SPI_sendString+0x16>
		// receivedData contains the data from the other device
		receivedData = SPI_sendReceiveByte(str[i]);
		i++;
	}

}
    1842:	0f 90       	pop	r0
    1844:	0f 90       	pop	r0
    1846:	0f 90       	pop	r0
    1848:	0f 90       	pop	r0
    184a:	cf 91       	pop	r28
    184c:	df 91       	pop	r29
    184e:	08 95       	ret

00001850 <SPI_receiveString>:


void SPI_receiveString(uint8 *str) {
    1850:	0f 93       	push	r16
    1852:	1f 93       	push	r17
    1854:	df 93       	push	r29
    1856:	cf 93       	push	r28
    1858:	00 d0       	rcall	.+0      	; 0x185a <SPI_receiveString+0xa>
    185a:	0f 92       	push	r0
    185c:	cd b7       	in	r28, 0x3d	; 61
    185e:	de b7       	in	r29, 0x3e	; 62
    1860:	9b 83       	std	Y+3, r25	; 0x03
    1862:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1864:	19 82       	std	Y+1, r1	; 0x01
	// Receives and stores the first byte
	str[i] = SPI_sendReceiveByte(SPI_DEF_DATA_VAL);
    1866:	89 81       	ldd	r24, Y+1	; 0x01
    1868:	28 2f       	mov	r18, r24
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	8a 81       	ldd	r24, Y+2	; 0x02
    186e:	9b 81       	ldd	r25, Y+3	; 0x03
    1870:	8c 01       	movw	r16, r24
    1872:	02 0f       	add	r16, r18
    1874:	13 1f       	adc	r17, r19
    1876:	8f ef       	ldi	r24, 0xFF	; 255
    1878:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <SPI_sendReceiveByte>
    187c:	f8 01       	movw	r30, r16
    187e:	80 83       	st	Z, r24
    1880:	10 c0       	rjmp	.+32     	; 0x18a2 <SPI_receiveString+0x52>


	while (str[i] != '#') {
		i++; // why the incrementer above?
    1882:	89 81       	ldd	r24, Y+1	; 0x01
    1884:	8f 5f       	subi	r24, 0xFF	; 255
    1886:	89 83       	std	Y+1, r24	; 0x01
		str[i] = SPI_sendReceiveByte(SPI_DEF_DATA_VAL);
    1888:	89 81       	ldd	r24, Y+1	; 0x01
    188a:	28 2f       	mov	r18, r24
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	8a 81       	ldd	r24, Y+2	; 0x02
    1890:	9b 81       	ldd	r25, Y+3	; 0x03
    1892:	8c 01       	movw	r16, r24
    1894:	02 0f       	add	r16, r18
    1896:	13 1f       	adc	r17, r19
    1898:	8f ef       	ldi	r24, 0xFF	; 255
    189a:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <SPI_sendReceiveByte>
    189e:	f8 01       	movw	r30, r16
    18a0:	80 83       	st	Z, r24
	uint8 i = 0;
	// Receives and stores the first byte
	str[i] = SPI_sendReceiveByte(SPI_DEF_DATA_VAL);


	while (str[i] != '#') {
    18a2:	89 81       	ldd	r24, Y+1	; 0x01
    18a4:	28 2f       	mov	r18, r24
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	8a 81       	ldd	r24, Y+2	; 0x02
    18aa:	9b 81       	ldd	r25, Y+3	; 0x03
    18ac:	fc 01       	movw	r30, r24
    18ae:	e2 0f       	add	r30, r18
    18b0:	f3 1f       	adc	r31, r19
    18b2:	80 81       	ld	r24, Z
    18b4:	83 32       	cpi	r24, 0x23	; 35
    18b6:	29 f7       	brne	.-54     	; 0x1882 <SPI_receiveString+0x32>
		i++; // why the incrementer above?
		str[i] = SPI_sendReceiveByte(SPI_DEF_DATA_VAL);
	}

	str[i] = '\0'; // replacing the '#' with '\0'
    18b8:	89 81       	ldd	r24, Y+1	; 0x01
    18ba:	28 2f       	mov	r18, r24
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	8a 81       	ldd	r24, Y+2	; 0x02
    18c0:	9b 81       	ldd	r25, Y+3	; 0x03
    18c2:	fc 01       	movw	r30, r24
    18c4:	e2 0f       	add	r30, r18
    18c6:	f3 1f       	adc	r31, r19
    18c8:	10 82       	st	Z, r1

}
    18ca:	0f 90       	pop	r0
    18cc:	0f 90       	pop	r0
    18ce:	0f 90       	pop	r0
    18d0:	cf 91       	pop	r28
    18d2:	df 91       	pop	r29
    18d4:	1f 91       	pop	r17
    18d6:	0f 91       	pop	r16
    18d8:	08 95       	ret

000018da <ICU_Init>:
#include <util/delay.h>
//#include <avr/interrupt.h>


// Initializes and enables the ADC Module to start functionality
void ICU_Init(void) {
    18da:	df 93       	push	r29
    18dc:	cf 93       	push	r28
    18de:	cd b7       	in	r28, 0x3d	; 61
    18e0:	de b7       	in	r29, 0x3e	; 62
	 * 2 – FOC1B: Force Output Compare for Compare unit B
	 * 1:0 – WGM11:0: Waveform Generation Mode
	 */

	// Clears COM1A1:0 to '00', I want normal mode
	CLR_BIT(TCCR1A, COM1A1);
    18e2:	af e4       	ldi	r26, 0x4F	; 79
    18e4:	b0 e0       	ldi	r27, 0x00	; 0
    18e6:	ef e4       	ldi	r30, 0x4F	; 79
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	80 81       	ld	r24, Z
    18ec:	8f 77       	andi	r24, 0x7F	; 127
    18ee:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, COM1A0);
    18f0:	af e4       	ldi	r26, 0x4F	; 79
    18f2:	b0 e0       	ldi	r27, 0x00	; 0
    18f4:	ef e4       	ldi	r30, 0x4F	; 79
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	8f 7b       	andi	r24, 0xBF	; 191
    18fc:	8c 93       	st	X, r24

	// Clears COM1B1:0 to '00', I want normal mode
	CLR_BIT(TCCR1A, COM1B1);
    18fe:	af e4       	ldi	r26, 0x4F	; 79
    1900:	b0 e0       	ldi	r27, 0x00	; 0
    1902:	ef e4       	ldi	r30, 0x4F	; 79
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	80 81       	ld	r24, Z
    1908:	8f 7d       	andi	r24, 0xDF	; 223
    190a:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, COM1B0);
    190c:	af e4       	ldi	r26, 0x4F	; 79
    190e:	b0 e0       	ldi	r27, 0x00	; 0
    1910:	ef e4       	ldi	r30, 0x4F	; 79
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	8f 7e       	andi	r24, 0xEF	; 239
    1918:	8c 93       	st	X, r24

	// Sets FOC1A to '1', I'm in normal mode
	SET_BIT(TCCR1A, FOC1A);
    191a:	af e4       	ldi	r26, 0x4F	; 79
    191c:	b0 e0       	ldi	r27, 0x00	; 0
    191e:	ef e4       	ldi	r30, 0x4F	; 79
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	80 81       	ld	r24, Z
    1924:	88 60       	ori	r24, 0x08	; 8
    1926:	8c 93       	st	X, r24

	// Sets FOC1A to '1', I'm in normal mode
	SET_BIT(TCCR1A, FOC1B);
    1928:	af e4       	ldi	r26, 0x4F	; 79
    192a:	b0 e0       	ldi	r27, 0x00	; 0
    192c:	ef e4       	ldi	r30, 0x4F	; 79
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	80 81       	ld	r24, Z
    1932:	84 60       	ori	r24, 0x04	; 4
    1934:	8c 93       	st	X, r24

	// Clears COM1B1:0 to '00', I want normal mode
	CLR_BIT(TCCR1A, WGM11);
    1936:	af e4       	ldi	r26, 0x4F	; 79
    1938:	b0 e0       	ldi	r27, 0x00	; 0
    193a:	ef e4       	ldi	r30, 0x4F	; 79
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	80 81       	ld	r24, Z
    1940:	8d 7f       	andi	r24, 0xFD	; 253
    1942:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, WGM10);
    1944:	af e4       	ldi	r26, 0x4F	; 79
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	ef e4       	ldi	r30, 0x4F	; 79
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 81       	ld	r24, Z
    194e:	8e 7f       	andi	r24, 0xFE	; 254
    1950:	8c 93       	st	X, r24
	 * Bit 4:3 – WGM13:2: Waveform Generation Mode
	 * Bit 2:0 – CS12:0: Clock Select
	 */

	// Clears ICNC1 to '0', I DONT want the noise canceling
	CLR_BIT(TCCR1B, ICNC1);
    1952:	ae e4       	ldi	r26, 0x4E	; 78
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	ee e4       	ldi	r30, 0x4E	; 78
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	80 81       	ld	r24, Z
    195c:	8f 77       	andi	r24, 0x7F	; 127
    195e:	8c 93       	st	X, r24

	// Sets ICES1 to '1', I want the rising edge
	SET_BIT(TCCR1B, ICES1);
    1960:	ae e4       	ldi	r26, 0x4E	; 78
    1962:	b0 e0       	ldi	r27, 0x00	; 0
    1964:	ee e4       	ldi	r30, 0x4E	; 78
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	80 81       	ld	r24, Z
    196a:	80 64       	ori	r24, 0x40	; 64
    196c:	8c 93       	st	X, r24

	// Sets CS12:0 to '001', nO PRESCALING
	CLR_BIT(TCCR1B, CS12);
    196e:	ae e4       	ldi	r26, 0x4E	; 78
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	ee e4       	ldi	r30, 0x4E	; 78
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	8b 7f       	andi	r24, 0xFB	; 251
    197a:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, CS11);
    197c:	ae e4       	ldi	r26, 0x4E	; 78
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	ee e4       	ldi	r30, 0x4E	; 78
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	8d 7f       	andi	r24, 0xFD	; 253
    1988:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, CS10);
    198a:	ae e4       	ldi	r26, 0x4E	; 78
    198c:	b0 e0       	ldi	r27, 0x00	; 0
    198e:	ee e4       	ldi	r30, 0x4E	; 78
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	81 60       	ori	r24, 0x01	; 1
    1996:	8c 93       	st	X, r24

	// Clears TCNT1 to '0', Initialize to '0'
	TCNT1 = 0;
    1998:	ec e4       	ldi	r30, 0x4C	; 76
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	11 82       	std	Z+1, r1	; 0x01
    199e:	10 82       	st	Z, r1

	// Clears ICR1 to '0', Initialize to '0'
	ICR1 = 0;
    19a0:	e6 e4       	ldi	r30, 0x46	; 70
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	11 82       	std	Z+1, r1	; 0x01
    19a6:	10 82       	st	Z, r1
	 */

	// TIMSK1 |= (1 << TICIE1);
	// SREG |= (1 << 7);

}
    19a8:	cf 91       	pop	r28
    19aa:	df 91       	pop	r29
    19ac:	08 95       	ret

000019ae <I2C_init>:
/*******************************************************************************
 *                              					Module Implementation                              					  *
 *******************************************************************************/

// Initializes and enables the Master mode for the TWI Module to start functionality
void I2C_init(void) {
    19ae:	df 93       	push	r29
    19b0:	cf 93       	push	r28
    19b2:	cd b7       	in	r28, 0x3d	; 61
    19b4:	de b7       	in	r29, 0x3e	; 62
	 * In the previous equation, I have two unknowns, the TWBR & TWPS
	 * Its the prescaler bits.. so what to choose?
	 * I know that the SCL is 400 KHz, & F_CPU is 8 MHz
	 * I can control TWPS & let it, TWPS = 0, so TWBR = 2
	 */
	TWSR = 0x00;
    19b6:	e1 e2       	ldi	r30, 0x21	; 33
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	10 82       	st	Z, r1
	TWBR = 0x02;
    19bc:	e0 e2       	ldi	r30, 0x20	; 32
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	82 e0       	ldi	r24, 0x02	; 2
    19c2:	80 83       	st	Z, r24
	TWAR = I2C_SLAVE_ADDR; // Slave Address
    19c4:	e2 e2       	ldi	r30, 0x22	; 34
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	82 e0       	ldi	r24, 0x02	; 2
    19ca:	80 83       	st	Z, r24
	TWCR = (1 << TWEN); // Enabling the I2C Module
    19cc:	e6 e5       	ldi	r30, 0x56	; 86
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	84 e0       	ldi	r24, 0x04	; 4
    19d2:	80 83       	st	Z, r24

}
    19d4:	cf 91       	pop	r28
    19d6:	df 91       	pop	r29
    19d8:	08 95       	ret

000019da <I2C_start>:

// Responsible for the SPI to send an array of bytes, a string
void I2C_start(void) {
    19da:	df 93       	push	r29
    19dc:	cf 93       	push	r28
    19de:	cd b7       	in	r28, 0x3d	; 61
    19e0:	de b7       	in	r29, 0x3e	; 62
	// Again enabling the I2C Module, Set the Start Condition, Clearing the TWINT Flag
	/* But why I'm not using the normal set bit technique?
	 * Because I don't want to keep old data, & I want the information always set by me
	 */
	TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWSTA);
    19e2:	e6 e5       	ldi	r30, 0x56	; 86
    19e4:	f0 e0       	ldi	r31, 0x00	; 0
    19e6:	84 ea       	ldi	r24, 0xA4	; 164
    19e8:	80 83       	st	Z, r24

	while(BIT_IS_CLR(TWCR, TWINT)) {
    19ea:	e6 e5       	ldi	r30, 0x56	; 86
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	80 81       	ld	r24, Z
    19f0:	88 23       	and	r24, r24
    19f2:	dc f7       	brge	.-10     	; 0x19ea <I2C_start+0x10>
		// Busy Wait for TWINT set in TWCR Register
		// to ensure that start bit is send successfully
	}
}
    19f4:	cf 91       	pop	r28
    19f6:	df 91       	pop	r29
    19f8:	08 95       	ret

000019fa <I2C_stop>:

// Responsible for the SPI to receive an array of bytes, a string
void I2C_stop(void) {
    19fa:	df 93       	push	r29
    19fc:	cf 93       	push	r28
    19fe:	cd b7       	in	r28, 0x3d	; 61
    1a00:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWSTO);
    1a02:	e6 e5       	ldi	r30, 0x56	; 86
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	84 e9       	ldi	r24, 0x94	; 148
    1a08:	80 83       	st	Z, r24
}
    1a0a:	cf 91       	pop	r28
    1a0c:	df 91       	pop	r29
    1a0e:	08 95       	ret

00001a10 <I2C_writeByte>:

// Responsible for the SPI to receive an array of bytes, a string
void I2C_writeByte(uint8 data) {
    1a10:	df 93       	push	r29
    1a12:	cf 93       	push	r28
    1a14:	0f 92       	push	r0
    1a16:	cd b7       	in	r28, 0x3d	; 61
    1a18:	de b7       	in	r29, 0x3e	; 62
    1a1a:	89 83       	std	Y+1, r24	; 0x01
	TWCR = (1 << TWEN) | (1 << TWINT);
    1a1c:	e6 e5       	ldi	r30, 0x56	; 86
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	84 e8       	ldi	r24, 0x84	; 132
    1a22:	80 83       	st	Z, r24
	TWDR = data;
    1a24:	e3 e2       	ldi	r30, 0x23	; 35
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	89 81       	ldd	r24, Y+1	; 0x01
    1a2a:	80 83       	st	Z, r24

	while(BIT_IS_CLR(TWCR, TWINT)) {
    1a2c:	e6 e5       	ldi	r30, 0x56	; 86
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	80 81       	ld	r24, Z
    1a32:	88 23       	and	r24, r24
    1a34:	dc f7       	brge	.-10     	; 0x1a2c <I2C_writeByte+0x1c>
		// Busy Wait for TWINT set in TWCR Register
		// to ensure that data is sent successfully
	}
}
    1a36:	0f 90       	pop	r0
    1a38:	cf 91       	pop	r28
    1a3a:	df 91       	pop	r29
    1a3c:	08 95       	ret

00001a3e <I2C_readByteWithACK>:

// Responsible for the SPI to receive an array of bytes, a string
uint8 I2C_readByteWithACK(void) {
    1a3e:	df 93       	push	r29
    1a40:	cf 93       	push	r28
    1a42:	cd b7       	in	r28, 0x3d	; 61
    1a44:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWEA);
    1a46:	e6 e5       	ldi	r30, 0x56	; 86
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	84 ec       	ldi	r24, 0xC4	; 196
    1a4c:	80 83       	st	Z, r24

	while(BIT_IS_CLR(TWCR, TWINT)) {
    1a4e:	e6 e5       	ldi	r30, 0x56	; 86
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	80 81       	ld	r24, Z
    1a54:	88 23       	and	r24, r24
    1a56:	dc f7       	brge	.-10     	; 0x1a4e <I2C_readByteWithACK+0x10>
		// Busy Wait for TWINT set in TWCR Register
		// to ensure that data is sent successfully
	}
	return TWDR;
    1a58:	e3 e2       	ldi	r30, 0x23	; 35
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	80 81       	ld	r24, Z
}
    1a5e:	cf 91       	pop	r28
    1a60:	df 91       	pop	r29
    1a62:	08 95       	ret

00001a64 <I2C_readByteWithNACK>:

// Responsible for the SPI to receive an array of bytes, a string
uint8 I2C_readByteWithNACK(void) {
    1a64:	df 93       	push	r29
    1a66:	cf 93       	push	r28
    1a68:	cd b7       	in	r28, 0x3d	; 61
    1a6a:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWEN) | (1 << TWINT);
    1a6c:	e6 e5       	ldi	r30, 0x56	; 86
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	84 e8       	ldi	r24, 0x84	; 132
    1a72:	80 83       	st	Z, r24

	while(BIT_IS_CLR(TWCR, TWINT)) {
    1a74:	e6 e5       	ldi	r30, 0x56	; 86
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	80 81       	ld	r24, Z
    1a7a:	88 23       	and	r24, r24
    1a7c:	dc f7       	brge	.-10     	; 0x1a74 <I2C_readByteWithNACK+0x10>
		// Busy Wait for TWINT set in TWCR Register
		// to ensure that data is sent successfully
	}
	return TWDR;
    1a7e:	e3 e2       	ldi	r30, 0x23	; 35
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	80 81       	ld	r24, Z
}
    1a84:	cf 91       	pop	r28
    1a86:	df 91       	pop	r29
    1a88:	08 95       	ret

00001a8a <I2C_getStatus>:

// Responsible for the SPI to receive an array of bytes, a string
uint8 I2C_getStatus(void) {
    1a8a:	df 93       	push	r29
    1a8c:	cf 93       	push	r28
    1a8e:	0f 92       	push	r0
    1a90:	cd b7       	in	r28, 0x3d	; 61
    1a92:	de b7       	in	r29, 0x3e	; 62
	uint8 I2CStatus;
	I2CStatus = TWSR & I2C_INITIALSTATUS;
    1a94:	e1 e2       	ldi	r30, 0x21	; 33
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	80 81       	ld	r24, Z
    1a9a:	88 7f       	andi	r24, 0xF8	; 248
    1a9c:	89 83       	std	Y+1, r24	; 0x01
	return I2CStatus;
    1a9e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1aa0:	0f 90       	pop	r0
    1aa2:	cf 91       	pop	r28
    1aa4:	df 91       	pop	r29
    1aa6:	08 95       	ret

00001aa8 <GPIO_setupPinDirection>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
GPIO_Error_t GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction) {
    1aa8:	df 93       	push	r29
    1aaa:	cf 93       	push	r28
    1aac:	00 d0       	rcall	.+0      	; 0x1aae <GPIO_setupPinDirection+0x6>
    1aae:	00 d0       	rcall	.+0      	; 0x1ab0 <GPIO_setupPinDirection+0x8>
    1ab0:	00 d0       	rcall	.+0      	; 0x1ab2 <GPIO_setupPinDirection+0xa>
    1ab2:	cd b7       	in	r28, 0x3d	; 61
    1ab4:	de b7       	in	r29, 0x3e	; 62
    1ab6:	8a 83       	std	Y+2, r24	; 0x02
    1ab8:	6b 83       	std	Y+3, r22	; 0x03
    1aba:	4c 83       	std	Y+4, r20	; 0x04
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t GPIO_Driver_Checker = NULL;
    1abc:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    1abe:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac0:	88 30       	cpi	r24, 0x08	; 8
    1ac2:	18 f0       	brcs	.+6      	; 0x1aca <GPIO_setupPinDirection+0x22>
		// Checks if the entered pin number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	89 83       	std	Y+1, r24	; 0x01
    1ac8:	e1 c0       	rjmp	.+450    	; 0x1c8c <GPIO_setupPinDirection+0x1e4>
	}
	else if((port_num >= NUM_OF_PORTS)) {
    1aca:	8a 81       	ldd	r24, Y+2	; 0x02
    1acc:	84 30       	cpi	r24, 0x04	; 4
    1ace:	18 f0       	brcs	.+6      	; 0x1ad6 <GPIO_setupPinDirection+0x2e>
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    1ad0:	82 e0       	ldi	r24, 0x02	; 2
    1ad2:	89 83       	std	Y+1, r24	; 0x01
    1ad4:	db c0       	rjmp	.+438    	; 0x1c8c <GPIO_setupPinDirection+0x1e4>
	}
	else if((direction != PIN_INPUT) && (direction != PIN_OUTPUT)) {
    1ad6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ad8:	88 23       	and	r24, r24
    1ada:	31 f0       	breq	.+12     	; 0x1ae8 <GPIO_setupPinDirection+0x40>
    1adc:	8c 81       	ldd	r24, Y+4	; 0x04
    1ade:	81 30       	cpi	r24, 0x01	; 1
    1ae0:	19 f0       	breq	.+6      	; 0x1ae8 <GPIO_setupPinDirection+0x40>
		// Checks if the entered direction is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
    1ae2:	83 e0       	ldi	r24, 0x03	; 3
    1ae4:	89 83       	std	Y+1, r24	; 0x01
    1ae6:	d2 c0       	rjmp	.+420    	; 0x1c8c <GPIO_setupPinDirection+0x1e4>
	}
	else {
		// Setup the pin direction as required
		switch(port_num) {
    1ae8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aea:	28 2f       	mov	r18, r24
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	3e 83       	std	Y+6, r19	; 0x06
    1af0:	2d 83       	std	Y+5, r18	; 0x05
    1af2:	8d 81       	ldd	r24, Y+5	; 0x05
    1af4:	9e 81       	ldd	r25, Y+6	; 0x06
    1af6:	81 30       	cpi	r24, 0x01	; 1
    1af8:	91 05       	cpc	r25, r1
    1afa:	09 f4       	brne	.+2      	; 0x1afe <GPIO_setupPinDirection+0x56>
    1afc:	43 c0       	rjmp	.+134    	; 0x1b84 <GPIO_setupPinDirection+0xdc>
    1afe:	2d 81       	ldd	r18, Y+5	; 0x05
    1b00:	3e 81       	ldd	r19, Y+6	; 0x06
    1b02:	22 30       	cpi	r18, 0x02	; 2
    1b04:	31 05       	cpc	r19, r1
    1b06:	2c f4       	brge	.+10     	; 0x1b12 <GPIO_setupPinDirection+0x6a>
    1b08:	8d 81       	ldd	r24, Y+5	; 0x05
    1b0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b0c:	00 97       	sbiw	r24, 0x00	; 0
    1b0e:	71 f0       	breq	.+28     	; 0x1b2c <GPIO_setupPinDirection+0x84>
    1b10:	bc c0       	rjmp	.+376    	; 0x1c8a <GPIO_setupPinDirection+0x1e2>
    1b12:	2d 81       	ldd	r18, Y+5	; 0x05
    1b14:	3e 81       	ldd	r19, Y+6	; 0x06
    1b16:	22 30       	cpi	r18, 0x02	; 2
    1b18:	31 05       	cpc	r19, r1
    1b1a:	09 f4       	brne	.+2      	; 0x1b1e <GPIO_setupPinDirection+0x76>
    1b1c:	5f c0       	rjmp	.+190    	; 0x1bdc <GPIO_setupPinDirection+0x134>
    1b1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b20:	9e 81       	ldd	r25, Y+6	; 0x06
    1b22:	83 30       	cpi	r24, 0x03	; 3
    1b24:	91 05       	cpc	r25, r1
    1b26:	09 f4       	brne	.+2      	; 0x1b2a <GPIO_setupPinDirection+0x82>
    1b28:	85 c0       	rjmp	.+266    	; 0x1c34 <GPIO_setupPinDirection+0x18c>
    1b2a:	af c0       	rjmp	.+350    	; 0x1c8a <GPIO_setupPinDirection+0x1e2>
		case PORT_A:
			if(direction == PIN_OUTPUT) {
    1b2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b2e:	81 30       	cpi	r24, 0x01	; 1
    1b30:	a1 f4       	brne	.+40     	; 0x1b5a <GPIO_setupPinDirection+0xb2>
				SET_BIT(DDRA, pin_num);
    1b32:	aa e3       	ldi	r26, 0x3A	; 58
    1b34:	b0 e0       	ldi	r27, 0x00	; 0
    1b36:	ea e3       	ldi	r30, 0x3A	; 58
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	80 81       	ld	r24, Z
    1b3c:	48 2f       	mov	r20, r24
    1b3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b40:	28 2f       	mov	r18, r24
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	81 e0       	ldi	r24, 0x01	; 1
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	02 2e       	mov	r0, r18
    1b4a:	02 c0       	rjmp	.+4      	; 0x1b50 <GPIO_setupPinDirection+0xa8>
    1b4c:	88 0f       	add	r24, r24
    1b4e:	99 1f       	adc	r25, r25
    1b50:	0a 94       	dec	r0
    1b52:	e2 f7       	brpl	.-8      	; 0x1b4c <GPIO_setupPinDirection+0xa4>
    1b54:	84 2b       	or	r24, r20
    1b56:	8c 93       	st	X, r24
    1b58:	98 c0       	rjmp	.+304    	; 0x1c8a <GPIO_setupPinDirection+0x1e2>
			}
			else {
				CLR_BIT(DDRA, pin_num);
    1b5a:	aa e3       	ldi	r26, 0x3A	; 58
    1b5c:	b0 e0       	ldi	r27, 0x00	; 0
    1b5e:	ea e3       	ldi	r30, 0x3A	; 58
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	80 81       	ld	r24, Z
    1b64:	48 2f       	mov	r20, r24
    1b66:	8b 81       	ldd	r24, Y+3	; 0x03
    1b68:	28 2f       	mov	r18, r24
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	02 2e       	mov	r0, r18
    1b72:	02 c0       	rjmp	.+4      	; 0x1b78 <GPIO_setupPinDirection+0xd0>
    1b74:	88 0f       	add	r24, r24
    1b76:	99 1f       	adc	r25, r25
    1b78:	0a 94       	dec	r0
    1b7a:	e2 f7       	brpl	.-8      	; 0x1b74 <GPIO_setupPinDirection+0xcc>
    1b7c:	80 95       	com	r24
    1b7e:	84 23       	and	r24, r20
    1b80:	8c 93       	st	X, r24
    1b82:	83 c0       	rjmp	.+262    	; 0x1c8a <GPIO_setupPinDirection+0x1e2>
			}
			break;
		case PORT_B:
			if(direction == PIN_OUTPUT) {
    1b84:	8c 81       	ldd	r24, Y+4	; 0x04
    1b86:	81 30       	cpi	r24, 0x01	; 1
    1b88:	a1 f4       	brne	.+40     	; 0x1bb2 <GPIO_setupPinDirection+0x10a>
				SET_BIT(DDRB,pin_num);
    1b8a:	a7 e3       	ldi	r26, 0x37	; 55
    1b8c:	b0 e0       	ldi	r27, 0x00	; 0
    1b8e:	e7 e3       	ldi	r30, 0x37	; 55
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	48 2f       	mov	r20, r24
    1b96:	8b 81       	ldd	r24, Y+3	; 0x03
    1b98:	28 2f       	mov	r18, r24
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	02 2e       	mov	r0, r18
    1ba2:	02 c0       	rjmp	.+4      	; 0x1ba8 <GPIO_setupPinDirection+0x100>
    1ba4:	88 0f       	add	r24, r24
    1ba6:	99 1f       	adc	r25, r25
    1ba8:	0a 94       	dec	r0
    1baa:	e2 f7       	brpl	.-8      	; 0x1ba4 <GPIO_setupPinDirection+0xfc>
    1bac:	84 2b       	or	r24, r20
    1bae:	8c 93       	st	X, r24
    1bb0:	6c c0       	rjmp	.+216    	; 0x1c8a <GPIO_setupPinDirection+0x1e2>
			}
			else {
				CLR_BIT(DDRB,pin_num);
    1bb2:	a7 e3       	ldi	r26, 0x37	; 55
    1bb4:	b0 e0       	ldi	r27, 0x00	; 0
    1bb6:	e7 e3       	ldi	r30, 0x37	; 55
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	80 81       	ld	r24, Z
    1bbc:	48 2f       	mov	r20, r24
    1bbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc0:	28 2f       	mov	r18, r24
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	81 e0       	ldi	r24, 0x01	; 1
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	02 2e       	mov	r0, r18
    1bca:	02 c0       	rjmp	.+4      	; 0x1bd0 <GPIO_setupPinDirection+0x128>
    1bcc:	88 0f       	add	r24, r24
    1bce:	99 1f       	adc	r25, r25
    1bd0:	0a 94       	dec	r0
    1bd2:	e2 f7       	brpl	.-8      	; 0x1bcc <GPIO_setupPinDirection+0x124>
    1bd4:	80 95       	com	r24
    1bd6:	84 23       	and	r24, r20
    1bd8:	8c 93       	st	X, r24
    1bda:	57 c0       	rjmp	.+174    	; 0x1c8a <GPIO_setupPinDirection+0x1e2>
			}
			break;
		case PORT_C:
			if(direction == PIN_OUTPUT) {
    1bdc:	8c 81       	ldd	r24, Y+4	; 0x04
    1bde:	81 30       	cpi	r24, 0x01	; 1
    1be0:	a1 f4       	brne	.+40     	; 0x1c0a <GPIO_setupPinDirection+0x162>
				SET_BIT(DDRC,pin_num);
    1be2:	a4 e3       	ldi	r26, 0x34	; 52
    1be4:	b0 e0       	ldi	r27, 0x00	; 0
    1be6:	e4 e3       	ldi	r30, 0x34	; 52
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	80 81       	ld	r24, Z
    1bec:	48 2f       	mov	r20, r24
    1bee:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf0:	28 2f       	mov	r18, r24
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	02 2e       	mov	r0, r18
    1bfa:	02 c0       	rjmp	.+4      	; 0x1c00 <GPIO_setupPinDirection+0x158>
    1bfc:	88 0f       	add	r24, r24
    1bfe:	99 1f       	adc	r25, r25
    1c00:	0a 94       	dec	r0
    1c02:	e2 f7       	brpl	.-8      	; 0x1bfc <GPIO_setupPinDirection+0x154>
    1c04:	84 2b       	or	r24, r20
    1c06:	8c 93       	st	X, r24
    1c08:	40 c0       	rjmp	.+128    	; 0x1c8a <GPIO_setupPinDirection+0x1e2>
			}
			else {
				CLR_BIT(DDRC,pin_num);
    1c0a:	a4 e3       	ldi	r26, 0x34	; 52
    1c0c:	b0 e0       	ldi	r27, 0x00	; 0
    1c0e:	e4 e3       	ldi	r30, 0x34	; 52
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	80 81       	ld	r24, Z
    1c14:	48 2f       	mov	r20, r24
    1c16:	8b 81       	ldd	r24, Y+3	; 0x03
    1c18:	28 2f       	mov	r18, r24
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	02 2e       	mov	r0, r18
    1c22:	02 c0       	rjmp	.+4      	; 0x1c28 <GPIO_setupPinDirection+0x180>
    1c24:	88 0f       	add	r24, r24
    1c26:	99 1f       	adc	r25, r25
    1c28:	0a 94       	dec	r0
    1c2a:	e2 f7       	brpl	.-8      	; 0x1c24 <GPIO_setupPinDirection+0x17c>
    1c2c:	80 95       	com	r24
    1c2e:	84 23       	and	r24, r20
    1c30:	8c 93       	st	X, r24
    1c32:	2b c0       	rjmp	.+86     	; 0x1c8a <GPIO_setupPinDirection+0x1e2>
			}
			break;
		case PORT_D:
			if(direction == PIN_OUTPUT) {
    1c34:	8c 81       	ldd	r24, Y+4	; 0x04
    1c36:	81 30       	cpi	r24, 0x01	; 1
    1c38:	a1 f4       	brne	.+40     	; 0x1c62 <GPIO_setupPinDirection+0x1ba>
				SET_BIT(DDRD,pin_num);
    1c3a:	a1 e3       	ldi	r26, 0x31	; 49
    1c3c:	b0 e0       	ldi	r27, 0x00	; 0
    1c3e:	e1 e3       	ldi	r30, 0x31	; 49
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	80 81       	ld	r24, Z
    1c44:	48 2f       	mov	r20, r24
    1c46:	8b 81       	ldd	r24, Y+3	; 0x03
    1c48:	28 2f       	mov	r18, r24
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	02 2e       	mov	r0, r18
    1c52:	02 c0       	rjmp	.+4      	; 0x1c58 <GPIO_setupPinDirection+0x1b0>
    1c54:	88 0f       	add	r24, r24
    1c56:	99 1f       	adc	r25, r25
    1c58:	0a 94       	dec	r0
    1c5a:	e2 f7       	brpl	.-8      	; 0x1c54 <GPIO_setupPinDirection+0x1ac>
    1c5c:	84 2b       	or	r24, r20
    1c5e:	8c 93       	st	X, r24
    1c60:	14 c0       	rjmp	.+40     	; 0x1c8a <GPIO_setupPinDirection+0x1e2>
			}
			else {
				CLR_BIT(DDRD,pin_num);
    1c62:	a1 e3       	ldi	r26, 0x31	; 49
    1c64:	b0 e0       	ldi	r27, 0x00	; 0
    1c66:	e1 e3       	ldi	r30, 0x31	; 49
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	80 81       	ld	r24, Z
    1c6c:	48 2f       	mov	r20, r24
    1c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c70:	28 2f       	mov	r18, r24
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	02 2e       	mov	r0, r18
    1c7a:	02 c0       	rjmp	.+4      	; 0x1c80 <GPIO_setupPinDirection+0x1d8>
    1c7c:	88 0f       	add	r24, r24
    1c7e:	99 1f       	adc	r25, r25
    1c80:	0a 94       	dec	r0
    1c82:	e2 f7       	brpl	.-8      	; 0x1c7c <GPIO_setupPinDirection+0x1d4>
    1c84:	80 95       	com	r24
    1c86:	84 23       	and	r24, r20
    1c88:	8c 93       	st	X, r24
			}
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    1c8a:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    1c8c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c8e:	26 96       	adiw	r28, 0x06	; 6
    1c90:	0f b6       	in	r0, 0x3f	; 63
    1c92:	f8 94       	cli
    1c94:	de bf       	out	0x3e, r29	; 62
    1c96:	0f be       	out	0x3f, r0	; 63
    1c98:	cd bf       	out	0x3d, r28	; 61
    1c9a:	cf 91       	pop	r28
    1c9c:	df 91       	pop	r29
    1c9e:	08 95       	ret

00001ca0 <GPIO_writePin>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
GPIO_Error_t GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value) {
    1ca0:	df 93       	push	r29
    1ca2:	cf 93       	push	r28
    1ca4:	00 d0       	rcall	.+0      	; 0x1ca6 <GPIO_writePin+0x6>
    1ca6:	00 d0       	rcall	.+0      	; 0x1ca8 <GPIO_writePin+0x8>
    1ca8:	00 d0       	rcall	.+0      	; 0x1caa <GPIO_writePin+0xa>
    1caa:	cd b7       	in	r28, 0x3d	; 61
    1cac:	de b7       	in	r29, 0x3e	; 62
    1cae:	8a 83       	std	Y+2, r24	; 0x02
    1cb0:	6b 83       	std	Y+3, r22	; 0x03
    1cb2:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t GPIO_Driver_Checker = NULL;
    1cb4:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    1cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb8:	88 30       	cpi	r24, 0x08	; 8
    1cba:	18 f0       	brcs	.+6      	; 0x1cc2 <GPIO_writePin+0x22>
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	89 83       	std	Y+1, r24	; 0x01
    1cc0:	e1 c0       	rjmp	.+450    	; 0x1e84 <GPIO_writePin+0x1e4>
	}
	else if((port_num >= NUM_OF_PORTS)) {
    1cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc4:	84 30       	cpi	r24, 0x04	; 4
    1cc6:	18 f0       	brcs	.+6      	; 0x1cce <GPIO_writePin+0x2e>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    1cc8:	82 e0       	ldi	r24, 0x02	; 2
    1cca:	89 83       	std	Y+1, r24	; 0x01
    1ccc:	db c0       	rjmp	.+438    	; 0x1e84 <GPIO_writePin+0x1e4>
	}
	else if((value != LOGIC_HIGH) && (value != LOGIC_LOW)) {
    1cce:	8c 81       	ldd	r24, Y+4	; 0x04
    1cd0:	81 30       	cpi	r24, 0x01	; 1
    1cd2:	31 f0       	breq	.+12     	; 0x1ce0 <GPIO_writePin+0x40>
    1cd4:	8c 81       	ldd	r24, Y+4	; 0x04
    1cd6:	88 23       	and	r24, r24
    1cd8:	19 f0       	breq	.+6      	; 0x1ce0 <GPIO_writePin+0x40>
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
    1cda:	83 e0       	ldi	r24, 0x03	; 3
    1cdc:	89 83       	std	Y+1, r24	; 0x01
    1cde:	d2 c0       	rjmp	.+420    	; 0x1e84 <GPIO_writePin+0x1e4>
	}
	else {
		switch(port_num) {
    1ce0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce2:	28 2f       	mov	r18, r24
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	3e 83       	std	Y+6, r19	; 0x06
    1ce8:	2d 83       	std	Y+5, r18	; 0x05
    1cea:	8d 81       	ldd	r24, Y+5	; 0x05
    1cec:	9e 81       	ldd	r25, Y+6	; 0x06
    1cee:	81 30       	cpi	r24, 0x01	; 1
    1cf0:	91 05       	cpc	r25, r1
    1cf2:	09 f4       	brne	.+2      	; 0x1cf6 <GPIO_writePin+0x56>
    1cf4:	43 c0       	rjmp	.+134    	; 0x1d7c <GPIO_writePin+0xdc>
    1cf6:	2d 81       	ldd	r18, Y+5	; 0x05
    1cf8:	3e 81       	ldd	r19, Y+6	; 0x06
    1cfa:	22 30       	cpi	r18, 0x02	; 2
    1cfc:	31 05       	cpc	r19, r1
    1cfe:	2c f4       	brge	.+10     	; 0x1d0a <GPIO_writePin+0x6a>
    1d00:	8d 81       	ldd	r24, Y+5	; 0x05
    1d02:	9e 81       	ldd	r25, Y+6	; 0x06
    1d04:	00 97       	sbiw	r24, 0x00	; 0
    1d06:	71 f0       	breq	.+28     	; 0x1d24 <GPIO_writePin+0x84>
    1d08:	bc c0       	rjmp	.+376    	; 0x1e82 <GPIO_writePin+0x1e2>
    1d0a:	2d 81       	ldd	r18, Y+5	; 0x05
    1d0c:	3e 81       	ldd	r19, Y+6	; 0x06
    1d0e:	22 30       	cpi	r18, 0x02	; 2
    1d10:	31 05       	cpc	r19, r1
    1d12:	09 f4       	brne	.+2      	; 0x1d16 <GPIO_writePin+0x76>
    1d14:	5f c0       	rjmp	.+190    	; 0x1dd4 <GPIO_writePin+0x134>
    1d16:	8d 81       	ldd	r24, Y+5	; 0x05
    1d18:	9e 81       	ldd	r25, Y+6	; 0x06
    1d1a:	83 30       	cpi	r24, 0x03	; 3
    1d1c:	91 05       	cpc	r25, r1
    1d1e:	09 f4       	brne	.+2      	; 0x1d22 <GPIO_writePin+0x82>
    1d20:	85 c0       	rjmp	.+266    	; 0x1e2c <GPIO_writePin+0x18c>
    1d22:	af c0       	rjmp	.+350    	; 0x1e82 <GPIO_writePin+0x1e2>
		case PORT_A:
			if(value == LOGIC_HIGH) {
    1d24:	8c 81       	ldd	r24, Y+4	; 0x04
    1d26:	81 30       	cpi	r24, 0x01	; 1
    1d28:	a1 f4       	brne	.+40     	; 0x1d52 <GPIO_writePin+0xb2>
				SET_BIT(PORTA,pin_num);
    1d2a:	ab e3       	ldi	r26, 0x3B	; 59
    1d2c:	b0 e0       	ldi	r27, 0x00	; 0
    1d2e:	eb e3       	ldi	r30, 0x3B	; 59
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	80 81       	ld	r24, Z
    1d34:	48 2f       	mov	r20, r24
    1d36:	8b 81       	ldd	r24, Y+3	; 0x03
    1d38:	28 2f       	mov	r18, r24
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	02 2e       	mov	r0, r18
    1d42:	02 c0       	rjmp	.+4      	; 0x1d48 <GPIO_writePin+0xa8>
    1d44:	88 0f       	add	r24, r24
    1d46:	99 1f       	adc	r25, r25
    1d48:	0a 94       	dec	r0
    1d4a:	e2 f7       	brpl	.-8      	; 0x1d44 <GPIO_writePin+0xa4>
    1d4c:	84 2b       	or	r24, r20
    1d4e:	8c 93       	st	X, r24
    1d50:	98 c0       	rjmp	.+304    	; 0x1e82 <GPIO_writePin+0x1e2>
			}
			else {
				CLR_BIT(PORTA,pin_num);
    1d52:	ab e3       	ldi	r26, 0x3B	; 59
    1d54:	b0 e0       	ldi	r27, 0x00	; 0
    1d56:	eb e3       	ldi	r30, 0x3B	; 59
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	80 81       	ld	r24, Z
    1d5c:	48 2f       	mov	r20, r24
    1d5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d60:	28 2f       	mov	r18, r24
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	81 e0       	ldi	r24, 0x01	; 1
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	02 2e       	mov	r0, r18
    1d6a:	02 c0       	rjmp	.+4      	; 0x1d70 <GPIO_writePin+0xd0>
    1d6c:	88 0f       	add	r24, r24
    1d6e:	99 1f       	adc	r25, r25
    1d70:	0a 94       	dec	r0
    1d72:	e2 f7       	brpl	.-8      	; 0x1d6c <GPIO_writePin+0xcc>
    1d74:	80 95       	com	r24
    1d76:	84 23       	and	r24, r20
    1d78:	8c 93       	st	X, r24
    1d7a:	83 c0       	rjmp	.+262    	; 0x1e82 <GPIO_writePin+0x1e2>
			}
			break;
		case PORT_B:
			if(value == LOGIC_HIGH) {
    1d7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d7e:	81 30       	cpi	r24, 0x01	; 1
    1d80:	a1 f4       	brne	.+40     	; 0x1daa <GPIO_writePin+0x10a>
				SET_BIT(PORTB,pin_num);
    1d82:	a8 e3       	ldi	r26, 0x38	; 56
    1d84:	b0 e0       	ldi	r27, 0x00	; 0
    1d86:	e8 e3       	ldi	r30, 0x38	; 56
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	80 81       	ld	r24, Z
    1d8c:	48 2f       	mov	r20, r24
    1d8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d90:	28 2f       	mov	r18, r24
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	81 e0       	ldi	r24, 0x01	; 1
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	02 2e       	mov	r0, r18
    1d9a:	02 c0       	rjmp	.+4      	; 0x1da0 <GPIO_writePin+0x100>
    1d9c:	88 0f       	add	r24, r24
    1d9e:	99 1f       	adc	r25, r25
    1da0:	0a 94       	dec	r0
    1da2:	e2 f7       	brpl	.-8      	; 0x1d9c <GPIO_writePin+0xfc>
    1da4:	84 2b       	or	r24, r20
    1da6:	8c 93       	st	X, r24
    1da8:	6c c0       	rjmp	.+216    	; 0x1e82 <GPIO_writePin+0x1e2>
			}
			else {
				CLR_BIT(PORTB,pin_num);
    1daa:	a8 e3       	ldi	r26, 0x38	; 56
    1dac:	b0 e0       	ldi	r27, 0x00	; 0
    1dae:	e8 e3       	ldi	r30, 0x38	; 56
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	80 81       	ld	r24, Z
    1db4:	48 2f       	mov	r20, r24
    1db6:	8b 81       	ldd	r24, Y+3	; 0x03
    1db8:	28 2f       	mov	r18, r24
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	81 e0       	ldi	r24, 0x01	; 1
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	02 2e       	mov	r0, r18
    1dc2:	02 c0       	rjmp	.+4      	; 0x1dc8 <GPIO_writePin+0x128>
    1dc4:	88 0f       	add	r24, r24
    1dc6:	99 1f       	adc	r25, r25
    1dc8:	0a 94       	dec	r0
    1dca:	e2 f7       	brpl	.-8      	; 0x1dc4 <GPIO_writePin+0x124>
    1dcc:	80 95       	com	r24
    1dce:	84 23       	and	r24, r20
    1dd0:	8c 93       	st	X, r24
    1dd2:	57 c0       	rjmp	.+174    	; 0x1e82 <GPIO_writePin+0x1e2>
			}
			break;
		case PORT_C:
			if(value == LOGIC_HIGH) {
    1dd4:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd6:	81 30       	cpi	r24, 0x01	; 1
    1dd8:	a1 f4       	brne	.+40     	; 0x1e02 <GPIO_writePin+0x162>
				SET_BIT(PORTC,pin_num);
    1dda:	a5 e3       	ldi	r26, 0x35	; 53
    1ddc:	b0 e0       	ldi	r27, 0x00	; 0
    1dde:	e5 e3       	ldi	r30, 0x35	; 53
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	80 81       	ld	r24, Z
    1de4:	48 2f       	mov	r20, r24
    1de6:	8b 81       	ldd	r24, Y+3	; 0x03
    1de8:	28 2f       	mov	r18, r24
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	81 e0       	ldi	r24, 0x01	; 1
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	02 2e       	mov	r0, r18
    1df2:	02 c0       	rjmp	.+4      	; 0x1df8 <GPIO_writePin+0x158>
    1df4:	88 0f       	add	r24, r24
    1df6:	99 1f       	adc	r25, r25
    1df8:	0a 94       	dec	r0
    1dfa:	e2 f7       	brpl	.-8      	; 0x1df4 <GPIO_writePin+0x154>
    1dfc:	84 2b       	or	r24, r20
    1dfe:	8c 93       	st	X, r24
    1e00:	40 c0       	rjmp	.+128    	; 0x1e82 <GPIO_writePin+0x1e2>
			}
			else {
				CLR_BIT(PORTC,pin_num);
    1e02:	a5 e3       	ldi	r26, 0x35	; 53
    1e04:	b0 e0       	ldi	r27, 0x00	; 0
    1e06:	e5 e3       	ldi	r30, 0x35	; 53
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	80 81       	ld	r24, Z
    1e0c:	48 2f       	mov	r20, r24
    1e0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e10:	28 2f       	mov	r18, r24
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	81 e0       	ldi	r24, 0x01	; 1
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	02 2e       	mov	r0, r18
    1e1a:	02 c0       	rjmp	.+4      	; 0x1e20 <GPIO_writePin+0x180>
    1e1c:	88 0f       	add	r24, r24
    1e1e:	99 1f       	adc	r25, r25
    1e20:	0a 94       	dec	r0
    1e22:	e2 f7       	brpl	.-8      	; 0x1e1c <GPIO_writePin+0x17c>
    1e24:	80 95       	com	r24
    1e26:	84 23       	and	r24, r20
    1e28:	8c 93       	st	X, r24
    1e2a:	2b c0       	rjmp	.+86     	; 0x1e82 <GPIO_writePin+0x1e2>
			}
			break;
		case PORT_D:
			if(value == LOGIC_HIGH) {
    1e2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e2e:	81 30       	cpi	r24, 0x01	; 1
    1e30:	a1 f4       	brne	.+40     	; 0x1e5a <GPIO_writePin+0x1ba>
				SET_BIT(PORTD,pin_num);
    1e32:	a2 e3       	ldi	r26, 0x32	; 50
    1e34:	b0 e0       	ldi	r27, 0x00	; 0
    1e36:	e2 e3       	ldi	r30, 0x32	; 50
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	80 81       	ld	r24, Z
    1e3c:	48 2f       	mov	r20, r24
    1e3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e40:	28 2f       	mov	r18, r24
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	81 e0       	ldi	r24, 0x01	; 1
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	02 2e       	mov	r0, r18
    1e4a:	02 c0       	rjmp	.+4      	; 0x1e50 <GPIO_writePin+0x1b0>
    1e4c:	88 0f       	add	r24, r24
    1e4e:	99 1f       	adc	r25, r25
    1e50:	0a 94       	dec	r0
    1e52:	e2 f7       	brpl	.-8      	; 0x1e4c <GPIO_writePin+0x1ac>
    1e54:	84 2b       	or	r24, r20
    1e56:	8c 93       	st	X, r24
    1e58:	14 c0       	rjmp	.+40     	; 0x1e82 <GPIO_writePin+0x1e2>
			}
			else {
				CLR_BIT(PORTD,pin_num);
    1e5a:	a2 e3       	ldi	r26, 0x32	; 50
    1e5c:	b0 e0       	ldi	r27, 0x00	; 0
    1e5e:	e2 e3       	ldi	r30, 0x32	; 50
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	80 81       	ld	r24, Z
    1e64:	48 2f       	mov	r20, r24
    1e66:	8b 81       	ldd	r24, Y+3	; 0x03
    1e68:	28 2f       	mov	r18, r24
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	81 e0       	ldi	r24, 0x01	; 1
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	02 2e       	mov	r0, r18
    1e72:	02 c0       	rjmp	.+4      	; 0x1e78 <GPIO_writePin+0x1d8>
    1e74:	88 0f       	add	r24, r24
    1e76:	99 1f       	adc	r25, r25
    1e78:	0a 94       	dec	r0
    1e7a:	e2 f7       	brpl	.-8      	; 0x1e74 <GPIO_writePin+0x1d4>
    1e7c:	80 95       	com	r24
    1e7e:	84 23       	and	r24, r20
    1e80:	8c 93       	st	X, r24
			}
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    1e82:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    1e84:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e86:	26 96       	adiw	r28, 0x06	; 6
    1e88:	0f b6       	in	r0, 0x3f	; 63
    1e8a:	f8 94       	cli
    1e8c:	de bf       	out	0x3e, r29	; 62
    1e8e:	0f be       	out	0x3f, r0	; 63
    1e90:	cd bf       	out	0x3d, r28	; 61
    1e92:	cf 91       	pop	r28
    1e94:	df 91       	pop	r29
    1e96:	08 95       	ret

00001e98 <GPIO_togglePin>:
/*
 * Description :
 * Toggles a certain pin when requested.
 * If the input port number or pin number are not correct, The function will return an error.
 */
GPIO_Error_t GPIO_togglePin(uint8 port_num, uint8 pin_num) {
    1e98:	df 93       	push	r29
    1e9a:	cf 93       	push	r28
    1e9c:	00 d0       	rcall	.+0      	; 0x1e9e <GPIO_togglePin+0x6>
    1e9e:	00 d0       	rcall	.+0      	; 0x1ea0 <GPIO_togglePin+0x8>
    1ea0:	0f 92       	push	r0
    1ea2:	cd b7       	in	r28, 0x3d	; 61
    1ea4:	de b7       	in	r29, 0x3e	; 62
    1ea6:	8a 83       	std	Y+2, r24	; 0x02
    1ea8:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t GPIO_Driver_Checker = NULL;
    1eaa:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    1eac:	8b 81       	ldd	r24, Y+3	; 0x03
    1eae:	88 30       	cpi	r24, 0x08	; 8
    1eb0:	18 f0       	brcs	.+6      	; 0x1eb8 <GPIO_togglePin+0x20>
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	89 83       	std	Y+1, r24	; 0x01
    1eb6:	75 c0       	rjmp	.+234    	; 0x1fa2 <GPIO_togglePin+0x10a>
	}
	else if((port_num >= NUM_OF_PORTS)) {
    1eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eba:	84 30       	cpi	r24, 0x04	; 4
    1ebc:	18 f0       	brcs	.+6      	; 0x1ec4 <GPIO_togglePin+0x2c>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    1ebe:	82 e0       	ldi	r24, 0x02	; 2
    1ec0:	89 83       	std	Y+1, r24	; 0x01
    1ec2:	6f c0       	rjmp	.+222    	; 0x1fa2 <GPIO_togglePin+0x10a>
	}
	else {
		switch(port_num) {
    1ec4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec6:	28 2f       	mov	r18, r24
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	3d 83       	std	Y+5, r19	; 0x05
    1ecc:	2c 83       	std	Y+4, r18	; 0x04
    1ece:	8c 81       	ldd	r24, Y+4	; 0x04
    1ed0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ed2:	81 30       	cpi	r24, 0x01	; 1
    1ed4:	91 05       	cpc	r25, r1
    1ed6:	49 f1       	breq	.+82     	; 0x1f2a <GPIO_togglePin+0x92>
    1ed8:	2c 81       	ldd	r18, Y+4	; 0x04
    1eda:	3d 81       	ldd	r19, Y+5	; 0x05
    1edc:	22 30       	cpi	r18, 0x02	; 2
    1ede:	31 05       	cpc	r19, r1
    1ee0:	2c f4       	brge	.+10     	; 0x1eec <GPIO_togglePin+0x54>
    1ee2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ee4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ee6:	00 97       	sbiw	r24, 0x00	; 0
    1ee8:	61 f0       	breq	.+24     	; 0x1f02 <GPIO_togglePin+0x6a>
    1eea:	5a c0       	rjmp	.+180    	; 0x1fa0 <GPIO_togglePin+0x108>
    1eec:	2c 81       	ldd	r18, Y+4	; 0x04
    1eee:	3d 81       	ldd	r19, Y+5	; 0x05
    1ef0:	22 30       	cpi	r18, 0x02	; 2
    1ef2:	31 05       	cpc	r19, r1
    1ef4:	71 f1       	breq	.+92     	; 0x1f52 <GPIO_togglePin+0xba>
    1ef6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ef8:	9d 81       	ldd	r25, Y+5	; 0x05
    1efa:	83 30       	cpi	r24, 0x03	; 3
    1efc:	91 05       	cpc	r25, r1
    1efe:	e9 f1       	breq	.+122    	; 0x1f7a <GPIO_togglePin+0xe2>
    1f00:	4f c0       	rjmp	.+158    	; 0x1fa0 <GPIO_togglePin+0x108>
		case PORT_A:
			TOG_BIT(PORTA,pin_num);
    1f02:	ab e3       	ldi	r26, 0x3B	; 59
    1f04:	b0 e0       	ldi	r27, 0x00	; 0
    1f06:	eb e3       	ldi	r30, 0x3B	; 59
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	80 81       	ld	r24, Z
    1f0c:	48 2f       	mov	r20, r24
    1f0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f10:	28 2f       	mov	r18, r24
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	02 2e       	mov	r0, r18
    1f1a:	02 c0       	rjmp	.+4      	; 0x1f20 <GPIO_togglePin+0x88>
    1f1c:	88 0f       	add	r24, r24
    1f1e:	99 1f       	adc	r25, r25
    1f20:	0a 94       	dec	r0
    1f22:	e2 f7       	brpl	.-8      	; 0x1f1c <GPIO_togglePin+0x84>
    1f24:	84 27       	eor	r24, r20
    1f26:	8c 93       	st	X, r24
    1f28:	3b c0       	rjmp	.+118    	; 0x1fa0 <GPIO_togglePin+0x108>
			break;
		case PORT_B:
			TOG_BIT(PORTB,pin_num);
    1f2a:	a8 e3       	ldi	r26, 0x38	; 56
    1f2c:	b0 e0       	ldi	r27, 0x00	; 0
    1f2e:	e8 e3       	ldi	r30, 0x38	; 56
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
    1f32:	80 81       	ld	r24, Z
    1f34:	48 2f       	mov	r20, r24
    1f36:	8b 81       	ldd	r24, Y+3	; 0x03
    1f38:	28 2f       	mov	r18, r24
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	81 e0       	ldi	r24, 0x01	; 1
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	02 2e       	mov	r0, r18
    1f42:	02 c0       	rjmp	.+4      	; 0x1f48 <GPIO_togglePin+0xb0>
    1f44:	88 0f       	add	r24, r24
    1f46:	99 1f       	adc	r25, r25
    1f48:	0a 94       	dec	r0
    1f4a:	e2 f7       	brpl	.-8      	; 0x1f44 <GPIO_togglePin+0xac>
    1f4c:	84 27       	eor	r24, r20
    1f4e:	8c 93       	st	X, r24
    1f50:	27 c0       	rjmp	.+78     	; 0x1fa0 <GPIO_togglePin+0x108>
			break;
		case PORT_C:
			TOG_BIT(PORTC,pin_num);
    1f52:	a5 e3       	ldi	r26, 0x35	; 53
    1f54:	b0 e0       	ldi	r27, 0x00	; 0
    1f56:	e5 e3       	ldi	r30, 0x35	; 53
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	80 81       	ld	r24, Z
    1f5c:	48 2f       	mov	r20, r24
    1f5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f60:	28 2f       	mov	r18, r24
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	02 2e       	mov	r0, r18
    1f6a:	02 c0       	rjmp	.+4      	; 0x1f70 <GPIO_togglePin+0xd8>
    1f6c:	88 0f       	add	r24, r24
    1f6e:	99 1f       	adc	r25, r25
    1f70:	0a 94       	dec	r0
    1f72:	e2 f7       	brpl	.-8      	; 0x1f6c <GPIO_togglePin+0xd4>
    1f74:	84 27       	eor	r24, r20
    1f76:	8c 93       	st	X, r24
    1f78:	13 c0       	rjmp	.+38     	; 0x1fa0 <GPIO_togglePin+0x108>
			break;
		case PORT_D:
			TOG_BIT(PORTD,pin_num);
    1f7a:	a2 e3       	ldi	r26, 0x32	; 50
    1f7c:	b0 e0       	ldi	r27, 0x00	; 0
    1f7e:	e2 e3       	ldi	r30, 0x32	; 50
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	80 81       	ld	r24, Z
    1f84:	48 2f       	mov	r20, r24
    1f86:	8b 81       	ldd	r24, Y+3	; 0x03
    1f88:	28 2f       	mov	r18, r24
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	81 e0       	ldi	r24, 0x01	; 1
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	02 2e       	mov	r0, r18
    1f92:	02 c0       	rjmp	.+4      	; 0x1f98 <GPIO_togglePin+0x100>
    1f94:	88 0f       	add	r24, r24
    1f96:	99 1f       	adc	r25, r25
    1f98:	0a 94       	dec	r0
    1f9a:	e2 f7       	brpl	.-8      	; 0x1f94 <GPIO_togglePin+0xfc>
    1f9c:	84 27       	eor	r24, r20
    1f9e:	8c 93       	st	X, r24
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    1fa0:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    1fa2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fa4:	0f 90       	pop	r0
    1fa6:	0f 90       	pop	r0
    1fa8:	0f 90       	pop	r0
    1faa:	0f 90       	pop	r0
    1fac:	0f 90       	pop	r0
    1fae:	cf 91       	pop	r28
    1fb0:	df 91       	pop	r29
    1fb2:	08 95       	ret

00001fb4 <GPIO_readPin>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return an error.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num) {
    1fb4:	df 93       	push	r29
    1fb6:	cf 93       	push	r28
    1fb8:	cd b7       	in	r28, 0x3d	; 61
    1fba:	de b7       	in	r29, 0x3e	; 62
    1fbc:	27 97       	sbiw	r28, 0x07	; 7
    1fbe:	0f b6       	in	r0, 0x3f	; 63
    1fc0:	f8 94       	cli
    1fc2:	de bf       	out	0x3e, r29	; 62
    1fc4:	0f be       	out	0x3f, r0	; 63
    1fc6:	cd bf       	out	0x3d, r28	; 61
    1fc8:	8b 83       	std	Y+3, r24	; 0x03
    1fca:	6c 83       	std	Y+4, r22	; 0x04
	uint8 pin_value = LOGIC_LOW;
    1fcc:	1a 82       	std	Y+2, r1	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t GPIO_Driver_Checker = NULL;
    1fce:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    1fd0:	8c 81       	ldd	r24, Y+4	; 0x04
    1fd2:	88 30       	cpi	r24, 0x08	; 8
    1fd4:	28 f0       	brcs	.+10     	; 0x1fe0 <GPIO_readPin+0x2c>
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
    1fd6:	81 e0       	ldi	r24, 0x01	; 1
    1fd8:	89 83       	std	Y+1, r24	; 0x01
		return GPIO_Driver_Checker;
    1fda:	29 81       	ldd	r18, Y+1	; 0x01
    1fdc:	2f 83       	std	Y+7, r18	; 0x07
    1fde:	8b c0       	rjmp	.+278    	; 0x20f6 <GPIO_readPin+0x142>
	}
	else if((port_num >= NUM_OF_PORTS)) {
    1fe0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe2:	84 30       	cpi	r24, 0x04	; 4
    1fe4:	28 f0       	brcs	.+10     	; 0x1ff0 <GPIO_readPin+0x3c>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    1fe6:	82 e0       	ldi	r24, 0x02	; 2
    1fe8:	89 83       	std	Y+1, r24	; 0x01
		return GPIO_Driver_Checker;
    1fea:	39 81       	ldd	r19, Y+1	; 0x01
    1fec:	3f 83       	std	Y+7, r19	; 0x07
    1fee:	83 c0       	rjmp	.+262    	; 0x20f6 <GPIO_readPin+0x142>
	}
	else {
		/* Read the pin value as required */
		switch(port_num) {
    1ff0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff2:	48 2f       	mov	r20, r24
    1ff4:	50 e0       	ldi	r21, 0x00	; 0
    1ff6:	5e 83       	std	Y+6, r21	; 0x06
    1ff8:	4d 83       	std	Y+5, r20	; 0x05
    1ffa:	8d 81       	ldd	r24, Y+5	; 0x05
    1ffc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ffe:	81 30       	cpi	r24, 0x01	; 1
    2000:	91 05       	cpc	r25, r1
    2002:	79 f1       	breq	.+94     	; 0x2062 <GPIO_readPin+0xae>
    2004:	2d 81       	ldd	r18, Y+5	; 0x05
    2006:	3e 81       	ldd	r19, Y+6	; 0x06
    2008:	22 30       	cpi	r18, 0x02	; 2
    200a:	31 05       	cpc	r19, r1
    200c:	34 f4       	brge	.+12     	; 0x201a <GPIO_readPin+0x66>
    200e:	4d 81       	ldd	r20, Y+5	; 0x05
    2010:	5e 81       	ldd	r21, Y+6	; 0x06
    2012:	41 15       	cp	r20, r1
    2014:	51 05       	cpc	r21, r1
    2016:	69 f0       	breq	.+26     	; 0x2032 <GPIO_readPin+0x7e>
    2018:	6b c0       	rjmp	.+214    	; 0x20f0 <GPIO_readPin+0x13c>
    201a:	8d 81       	ldd	r24, Y+5	; 0x05
    201c:	9e 81       	ldd	r25, Y+6	; 0x06
    201e:	82 30       	cpi	r24, 0x02	; 2
    2020:	91 05       	cpc	r25, r1
    2022:	b9 f1       	breq	.+110    	; 0x2092 <GPIO_readPin+0xde>
    2024:	2d 81       	ldd	r18, Y+5	; 0x05
    2026:	3e 81       	ldd	r19, Y+6	; 0x06
    2028:	23 30       	cpi	r18, 0x03	; 3
    202a:	31 05       	cpc	r19, r1
    202c:	09 f4       	brne	.+2      	; 0x2030 <GPIO_readPin+0x7c>
    202e:	49 c0       	rjmp	.+146    	; 0x20c2 <GPIO_readPin+0x10e>
    2030:	5f c0       	rjmp	.+190    	; 0x20f0 <GPIO_readPin+0x13c>
		case PORT_A:
			// Checks if the bit equals '1' or not
			if(BIT_IS_SET(PINA,pin_num)) {
    2032:	e9 e3       	ldi	r30, 0x39	; 57
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	80 81       	ld	r24, Z
    2038:	28 2f       	mov	r18, r24
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	8c 81       	ldd	r24, Y+4	; 0x04
    203e:	88 2f       	mov	r24, r24
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	a9 01       	movw	r20, r18
    2044:	02 c0       	rjmp	.+4      	; 0x204a <GPIO_readPin+0x96>
    2046:	55 95       	asr	r21
    2048:	47 95       	ror	r20
    204a:	8a 95       	dec	r24
    204c:	e2 f7       	brpl	.-8      	; 0x2046 <GPIO_readPin+0x92>
    204e:	ca 01       	movw	r24, r20
    2050:	81 70       	andi	r24, 0x01	; 1
    2052:	90 70       	andi	r25, 0x00	; 0
    2054:	88 23       	and	r24, r24
    2056:	19 f0       	breq	.+6      	; 0x205e <GPIO_readPin+0xaa>
				pin_value = LOGIC_HIGH;
    2058:	81 e0       	ldi	r24, 0x01	; 1
    205a:	8a 83       	std	Y+2, r24	; 0x02
    205c:	49 c0       	rjmp	.+146    	; 0x20f0 <GPIO_readPin+0x13c>
			}
			else {
				pin_value = LOGIC_LOW;
    205e:	1a 82       	std	Y+2, r1	; 0x02
    2060:	47 c0       	rjmp	.+142    	; 0x20f0 <GPIO_readPin+0x13c>
			}
			break;
		case PORT_B:
			if(BIT_IS_SET(PINB,pin_num)) {
    2062:	e6 e3       	ldi	r30, 0x36	; 54
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	80 81       	ld	r24, Z
    2068:	28 2f       	mov	r18, r24
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	8c 81       	ldd	r24, Y+4	; 0x04
    206e:	88 2f       	mov	r24, r24
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	a9 01       	movw	r20, r18
    2074:	02 c0       	rjmp	.+4      	; 0x207a <GPIO_readPin+0xc6>
    2076:	55 95       	asr	r21
    2078:	47 95       	ror	r20
    207a:	8a 95       	dec	r24
    207c:	e2 f7       	brpl	.-8      	; 0x2076 <GPIO_readPin+0xc2>
    207e:	ca 01       	movw	r24, r20
    2080:	81 70       	andi	r24, 0x01	; 1
    2082:	90 70       	andi	r25, 0x00	; 0
    2084:	88 23       	and	r24, r24
    2086:	19 f0       	breq	.+6      	; 0x208e <GPIO_readPin+0xda>
				pin_value = LOGIC_HIGH;
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	8a 83       	std	Y+2, r24	; 0x02
    208c:	31 c0       	rjmp	.+98     	; 0x20f0 <GPIO_readPin+0x13c>
			}
			else {
				pin_value = LOGIC_LOW;
    208e:	1a 82       	std	Y+2, r1	; 0x02
    2090:	2f c0       	rjmp	.+94     	; 0x20f0 <GPIO_readPin+0x13c>
			}
			break;
		case PORT_C:
			if(BIT_IS_SET(PINC,pin_num)) {
    2092:	e3 e3       	ldi	r30, 0x33	; 51
    2094:	f0 e0       	ldi	r31, 0x00	; 0
    2096:	80 81       	ld	r24, Z
    2098:	28 2f       	mov	r18, r24
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	8c 81       	ldd	r24, Y+4	; 0x04
    209e:	88 2f       	mov	r24, r24
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	a9 01       	movw	r20, r18
    20a4:	02 c0       	rjmp	.+4      	; 0x20aa <GPIO_readPin+0xf6>
    20a6:	55 95       	asr	r21
    20a8:	47 95       	ror	r20
    20aa:	8a 95       	dec	r24
    20ac:	e2 f7       	brpl	.-8      	; 0x20a6 <GPIO_readPin+0xf2>
    20ae:	ca 01       	movw	r24, r20
    20b0:	81 70       	andi	r24, 0x01	; 1
    20b2:	90 70       	andi	r25, 0x00	; 0
    20b4:	88 23       	and	r24, r24
    20b6:	19 f0       	breq	.+6      	; 0x20be <GPIO_readPin+0x10a>
				pin_value = LOGIC_HIGH;
    20b8:	81 e0       	ldi	r24, 0x01	; 1
    20ba:	8a 83       	std	Y+2, r24	; 0x02
    20bc:	19 c0       	rjmp	.+50     	; 0x20f0 <GPIO_readPin+0x13c>
			}
			else {
				pin_value = LOGIC_LOW;
    20be:	1a 82       	std	Y+2, r1	; 0x02
    20c0:	17 c0       	rjmp	.+46     	; 0x20f0 <GPIO_readPin+0x13c>
			}
			break;
		case PORT_D:
			if(BIT_IS_SET(PIND,pin_num)) {
    20c2:	e0 e3       	ldi	r30, 0x30	; 48
    20c4:	f0 e0       	ldi	r31, 0x00	; 0
    20c6:	80 81       	ld	r24, Z
    20c8:	28 2f       	mov	r18, r24
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	8c 81       	ldd	r24, Y+4	; 0x04
    20ce:	88 2f       	mov	r24, r24
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	a9 01       	movw	r20, r18
    20d4:	02 c0       	rjmp	.+4      	; 0x20da <GPIO_readPin+0x126>
    20d6:	55 95       	asr	r21
    20d8:	47 95       	ror	r20
    20da:	8a 95       	dec	r24
    20dc:	e2 f7       	brpl	.-8      	; 0x20d6 <GPIO_readPin+0x122>
    20de:	ca 01       	movw	r24, r20
    20e0:	81 70       	andi	r24, 0x01	; 1
    20e2:	90 70       	andi	r25, 0x00	; 0
    20e4:	88 23       	and	r24, r24
    20e6:	19 f0       	breq	.+6      	; 0x20ee <GPIO_readPin+0x13a>
				pin_value = LOGIC_HIGH;
    20e8:	81 e0       	ldi	r24, 0x01	; 1
    20ea:	8a 83       	std	Y+2, r24	; 0x02
    20ec:	01 c0       	rjmp	.+2      	; 0x20f0 <GPIO_readPin+0x13c>
			}
			else {
				pin_value = LOGIC_LOW;
    20ee:	1a 82       	std	Y+2, r1	; 0x02
			}
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    20f0:	19 82       	std	Y+1, r1	; 0x01
	}
	return pin_value;
    20f2:	5a 81       	ldd	r21, Y+2	; 0x02
    20f4:	5f 83       	std	Y+7, r21	; 0x07
    20f6:	8f 81       	ldd	r24, Y+7	; 0x07
}
    20f8:	27 96       	adiw	r28, 0x07	; 7
    20fa:	0f b6       	in	r0, 0x3f	; 63
    20fc:	f8 94       	cli
    20fe:	de bf       	out	0x3e, r29	; 62
    2100:	0f be       	out	0x3f, r0	; 63
    2102:	cd bf       	out	0x3d, r28	; 61
    2104:	cf 91       	pop	r28
    2106:	df 91       	pop	r29
    2108:	08 95       	ret

0000210a <GPIO_setupPortDirection>:
 * Setup the direction of the required port all pins input/output.
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
GPIO_Error_t GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction) {
    210a:	df 93       	push	r29
    210c:	cf 93       	push	r28
    210e:	00 d0       	rcall	.+0      	; 0x2110 <GPIO_setupPortDirection+0x6>
    2110:	00 d0       	rcall	.+0      	; 0x2112 <GPIO_setupPortDirection+0x8>
    2112:	0f 92       	push	r0
    2114:	cd b7       	in	r28, 0x3d	; 61
    2116:	de b7       	in	r29, 0x3e	; 62
    2118:	8a 83       	std	Y+2, r24	; 0x02
    211a:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	uint8_t GPIO_Driver_Checker = NULL;
    211c:	19 82       	std	Y+1, r1	; 0x01

	if((port_num >= NUM_OF_PORTS)) {
    211e:	8a 81       	ldd	r24, Y+2	; 0x02
    2120:	84 30       	cpi	r24, 0x04	; 4
    2122:	18 f0       	brcs	.+6      	; 0x212a <GPIO_setupPortDirection+0x20>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    2124:	82 e0       	ldi	r24, 0x02	; 2
    2126:	89 83       	std	Y+1, r24	; 0x01
    2128:	3c c0       	rjmp	.+120    	; 0x21a2 <GPIO_setupPortDirection+0x98>
	}
	else if((direction != PORT_INPUT) && (direction != PORT_OUTPUT)) {
    212a:	8b 81       	ldd	r24, Y+3	; 0x03
    212c:	88 23       	and	r24, r24
    212e:	31 f0       	breq	.+12     	; 0x213c <GPIO_setupPortDirection+0x32>
    2130:	8b 81       	ldd	r24, Y+3	; 0x03
    2132:	8f 3f       	cpi	r24, 0xFF	; 255
    2134:	19 f0       	breq	.+6      	; 0x213c <GPIO_setupPortDirection+0x32>
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
    2136:	83 e0       	ldi	r24, 0x03	; 3
    2138:	89 83       	std	Y+1, r24	; 0x01
    213a:	33 c0       	rjmp	.+102    	; 0x21a2 <GPIO_setupPortDirection+0x98>
	}
	else {
		/* Setup the port direction as required */
		switch(port_num) {
    213c:	8a 81       	ldd	r24, Y+2	; 0x02
    213e:	28 2f       	mov	r18, r24
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	3d 83       	std	Y+5, r19	; 0x05
    2144:	2c 83       	std	Y+4, r18	; 0x04
    2146:	8c 81       	ldd	r24, Y+4	; 0x04
    2148:	9d 81       	ldd	r25, Y+5	; 0x05
    214a:	81 30       	cpi	r24, 0x01	; 1
    214c:	91 05       	cpc	r25, r1
    214e:	d1 f0       	breq	.+52     	; 0x2184 <GPIO_setupPortDirection+0x7a>
    2150:	2c 81       	ldd	r18, Y+4	; 0x04
    2152:	3d 81       	ldd	r19, Y+5	; 0x05
    2154:	22 30       	cpi	r18, 0x02	; 2
    2156:	31 05       	cpc	r19, r1
    2158:	2c f4       	brge	.+10     	; 0x2164 <GPIO_setupPortDirection+0x5a>
    215a:	8c 81       	ldd	r24, Y+4	; 0x04
    215c:	9d 81       	ldd	r25, Y+5	; 0x05
    215e:	00 97       	sbiw	r24, 0x00	; 0
    2160:	61 f0       	breq	.+24     	; 0x217a <GPIO_setupPortDirection+0x70>
    2162:	1e c0       	rjmp	.+60     	; 0x21a0 <GPIO_setupPortDirection+0x96>
    2164:	2c 81       	ldd	r18, Y+4	; 0x04
    2166:	3d 81       	ldd	r19, Y+5	; 0x05
    2168:	22 30       	cpi	r18, 0x02	; 2
    216a:	31 05       	cpc	r19, r1
    216c:	81 f0       	breq	.+32     	; 0x218e <GPIO_setupPortDirection+0x84>
    216e:	8c 81       	ldd	r24, Y+4	; 0x04
    2170:	9d 81       	ldd	r25, Y+5	; 0x05
    2172:	83 30       	cpi	r24, 0x03	; 3
    2174:	91 05       	cpc	r25, r1
    2176:	81 f0       	breq	.+32     	; 0x2198 <GPIO_setupPortDirection+0x8e>
    2178:	13 c0       	rjmp	.+38     	; 0x21a0 <GPIO_setupPortDirection+0x96>
		case PORT_A:
			DDRA = direction;
    217a:	ea e3       	ldi	r30, 0x3A	; 58
    217c:	f0 e0       	ldi	r31, 0x00	; 0
    217e:	8b 81       	ldd	r24, Y+3	; 0x03
    2180:	80 83       	st	Z, r24
    2182:	0e c0       	rjmp	.+28     	; 0x21a0 <GPIO_setupPortDirection+0x96>
			break;
		case PORT_B:
			DDRB = direction;
    2184:	e7 e3       	ldi	r30, 0x37	; 55
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	8b 81       	ldd	r24, Y+3	; 0x03
    218a:	80 83       	st	Z, r24
    218c:	09 c0       	rjmp	.+18     	; 0x21a0 <GPIO_setupPortDirection+0x96>
			break;
		case PORT_C:
			DDRC = direction;
    218e:	e4 e3       	ldi	r30, 0x34	; 52
    2190:	f0 e0       	ldi	r31, 0x00	; 0
    2192:	8b 81       	ldd	r24, Y+3	; 0x03
    2194:	80 83       	st	Z, r24
    2196:	04 c0       	rjmp	.+8      	; 0x21a0 <GPIO_setupPortDirection+0x96>
			break;
		case PORT_D:
			DDRD = direction;
    2198:	e1 e3       	ldi	r30, 0x31	; 49
    219a:	f0 e0       	ldi	r31, 0x00	; 0
    219c:	8b 81       	ldd	r24, Y+3	; 0x03
    219e:	80 83       	st	Z, r24
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    21a0:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    21a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    21a4:	0f 90       	pop	r0
    21a6:	0f 90       	pop	r0
    21a8:	0f 90       	pop	r0
    21aa:	0f 90       	pop	r0
    21ac:	0f 90       	pop	r0
    21ae:	cf 91       	pop	r28
    21b0:	df 91       	pop	r29
    21b2:	08 95       	ret

000021b4 <GPIO_writePort>:
 * Write the value on the required port.
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
GPIO_Error_t GPIO_writePort(uint8 port_num, uint8 value) {
    21b4:	df 93       	push	r29
    21b6:	cf 93       	push	r28
    21b8:	00 d0       	rcall	.+0      	; 0x21ba <GPIO_writePort+0x6>
    21ba:	00 d0       	rcall	.+0      	; 0x21bc <GPIO_writePort+0x8>
    21bc:	0f 92       	push	r0
    21be:	cd b7       	in	r28, 0x3d	; 61
    21c0:	de b7       	in	r29, 0x3e	; 62
    21c2:	8a 83       	std	Y+2, r24	; 0x02
    21c4:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t GPIO_Driver_Checker = NULL;
    21c6:	19 82       	std	Y+1, r1	; 0x01
	if((port_num >= NUM_OF_PORTS)) {
    21c8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ca:	84 30       	cpi	r24, 0x04	; 4
    21cc:	18 f0       	brcs	.+6      	; 0x21d4 <GPIO_writePort+0x20>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    21ce:	82 e0       	ldi	r24, 0x02	; 2
    21d0:	89 83       	std	Y+1, r24	; 0x01
    21d2:	33 c0       	rjmp	.+102    	; 0x223a <GPIO_writePort+0x86>
	}
	else {
		/* Setup the port direction as required */
		switch(port_num) {
    21d4:	8a 81       	ldd	r24, Y+2	; 0x02
    21d6:	28 2f       	mov	r18, r24
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	3d 83       	std	Y+5, r19	; 0x05
    21dc:	2c 83       	std	Y+4, r18	; 0x04
    21de:	8c 81       	ldd	r24, Y+4	; 0x04
    21e0:	9d 81       	ldd	r25, Y+5	; 0x05
    21e2:	81 30       	cpi	r24, 0x01	; 1
    21e4:	91 05       	cpc	r25, r1
    21e6:	d1 f0       	breq	.+52     	; 0x221c <GPIO_writePort+0x68>
    21e8:	2c 81       	ldd	r18, Y+4	; 0x04
    21ea:	3d 81       	ldd	r19, Y+5	; 0x05
    21ec:	22 30       	cpi	r18, 0x02	; 2
    21ee:	31 05       	cpc	r19, r1
    21f0:	2c f4       	brge	.+10     	; 0x21fc <GPIO_writePort+0x48>
    21f2:	8c 81       	ldd	r24, Y+4	; 0x04
    21f4:	9d 81       	ldd	r25, Y+5	; 0x05
    21f6:	00 97       	sbiw	r24, 0x00	; 0
    21f8:	61 f0       	breq	.+24     	; 0x2212 <GPIO_writePort+0x5e>
    21fa:	1e c0       	rjmp	.+60     	; 0x2238 <GPIO_writePort+0x84>
    21fc:	2c 81       	ldd	r18, Y+4	; 0x04
    21fe:	3d 81       	ldd	r19, Y+5	; 0x05
    2200:	22 30       	cpi	r18, 0x02	; 2
    2202:	31 05       	cpc	r19, r1
    2204:	81 f0       	breq	.+32     	; 0x2226 <GPIO_writePort+0x72>
    2206:	8c 81       	ldd	r24, Y+4	; 0x04
    2208:	9d 81       	ldd	r25, Y+5	; 0x05
    220a:	83 30       	cpi	r24, 0x03	; 3
    220c:	91 05       	cpc	r25, r1
    220e:	81 f0       	breq	.+32     	; 0x2230 <GPIO_writePort+0x7c>
    2210:	13 c0       	rjmp	.+38     	; 0x2238 <GPIO_writePort+0x84>
		case PORT_A:
			PORTA = value;
    2212:	eb e3       	ldi	r30, 0x3B	; 59
    2214:	f0 e0       	ldi	r31, 0x00	; 0
    2216:	8b 81       	ldd	r24, Y+3	; 0x03
    2218:	80 83       	st	Z, r24
    221a:	0e c0       	rjmp	.+28     	; 0x2238 <GPIO_writePort+0x84>
			break;
		case PORT_B:
			PORTB = value;
    221c:	e8 e3       	ldi	r30, 0x38	; 56
    221e:	f0 e0       	ldi	r31, 0x00	; 0
    2220:	8b 81       	ldd	r24, Y+3	; 0x03
    2222:	80 83       	st	Z, r24
    2224:	09 c0       	rjmp	.+18     	; 0x2238 <GPIO_writePort+0x84>
			break;
		case PORT_C:
			PORTC = value;
    2226:	e5 e3       	ldi	r30, 0x35	; 53
    2228:	f0 e0       	ldi	r31, 0x00	; 0
    222a:	8b 81       	ldd	r24, Y+3	; 0x03
    222c:	80 83       	st	Z, r24
    222e:	04 c0       	rjmp	.+8      	; 0x2238 <GPIO_writePort+0x84>
			break;
		case PORT_D:
			PORTD = value;
    2230:	e2 e3       	ldi	r30, 0x32	; 50
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	8b 81       	ldd	r24, Y+3	; 0x03
    2236:	80 83       	st	Z, r24
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    2238:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    223a:	89 81       	ldd	r24, Y+1	; 0x01
}
    223c:	0f 90       	pop	r0
    223e:	0f 90       	pop	r0
    2240:	0f 90       	pop	r0
    2242:	0f 90       	pop	r0
    2244:	0f 90       	pop	r0
    2246:	cf 91       	pop	r28
    2248:	df 91       	pop	r29
    224a:	08 95       	ret

0000224c <GPIO_readPort>:
/*
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num) {
    224c:	df 93       	push	r29
    224e:	cf 93       	push	r28
    2250:	00 d0       	rcall	.+0      	; 0x2252 <GPIO_readPort+0x6>
    2252:	00 d0       	rcall	.+0      	; 0x2254 <GPIO_readPort+0x8>
    2254:	0f 92       	push	r0
    2256:	cd b7       	in	r28, 0x3d	; 61
    2258:	de b7       	in	r29, 0x3e	; 62
    225a:	8b 83       	std	Y+3, r24	; 0x03
	uint8 value = LOGIC_LOW;
    225c:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t GPIO_Driver_Checker = NULL;
    225e:	19 82       	std	Y+1, r1	; 0x01

	if((port_num >= NUM_OF_PORTS)) {
    2260:	8b 81       	ldd	r24, Y+3	; 0x03
    2262:	84 30       	cpi	r24, 0x04	; 4
    2264:	18 f0       	brcs	.+6      	; 0x226c <GPIO_readPort+0x20>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    2266:	82 e0       	ldi	r24, 0x02	; 2
    2268:	89 83       	std	Y+1, r24	; 0x01
    226a:	32 c0       	rjmp	.+100    	; 0x22d0 <GPIO_readPort+0x84>
	}
	else {
		switch(port_num) {
    226c:	8b 81       	ldd	r24, Y+3	; 0x03
    226e:	28 2f       	mov	r18, r24
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	3d 83       	std	Y+5, r19	; 0x05
    2274:	2c 83       	std	Y+4, r18	; 0x04
    2276:	8c 81       	ldd	r24, Y+4	; 0x04
    2278:	9d 81       	ldd	r25, Y+5	; 0x05
    227a:	81 30       	cpi	r24, 0x01	; 1
    227c:	91 05       	cpc	r25, r1
    227e:	d1 f0       	breq	.+52     	; 0x22b4 <GPIO_readPort+0x68>
    2280:	2c 81       	ldd	r18, Y+4	; 0x04
    2282:	3d 81       	ldd	r19, Y+5	; 0x05
    2284:	22 30       	cpi	r18, 0x02	; 2
    2286:	31 05       	cpc	r19, r1
    2288:	2c f4       	brge	.+10     	; 0x2294 <GPIO_readPort+0x48>
    228a:	8c 81       	ldd	r24, Y+4	; 0x04
    228c:	9d 81       	ldd	r25, Y+5	; 0x05
    228e:	00 97       	sbiw	r24, 0x00	; 0
    2290:	61 f0       	breq	.+24     	; 0x22aa <GPIO_readPort+0x5e>
    2292:	1e c0       	rjmp	.+60     	; 0x22d0 <GPIO_readPort+0x84>
    2294:	2c 81       	ldd	r18, Y+4	; 0x04
    2296:	3d 81       	ldd	r19, Y+5	; 0x05
    2298:	22 30       	cpi	r18, 0x02	; 2
    229a:	31 05       	cpc	r19, r1
    229c:	81 f0       	breq	.+32     	; 0x22be <GPIO_readPort+0x72>
    229e:	8c 81       	ldd	r24, Y+4	; 0x04
    22a0:	9d 81       	ldd	r25, Y+5	; 0x05
    22a2:	83 30       	cpi	r24, 0x03	; 3
    22a4:	91 05       	cpc	r25, r1
    22a6:	81 f0       	breq	.+32     	; 0x22c8 <GPIO_readPort+0x7c>
    22a8:	13 c0       	rjmp	.+38     	; 0x22d0 <GPIO_readPort+0x84>
		case PORT_A:
			// Why value equals PINA?
			value = PINA;
    22aa:	e9 e3       	ldi	r30, 0x39	; 57
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	80 81       	ld	r24, Z
    22b0:	8a 83       	std	Y+2, r24	; 0x02
    22b2:	0e c0       	rjmp	.+28     	; 0x22d0 <GPIO_readPort+0x84>
			break;
		case PORT_B:
			value = PINB;
    22b4:	e6 e3       	ldi	r30, 0x36	; 54
    22b6:	f0 e0       	ldi	r31, 0x00	; 0
    22b8:	80 81       	ld	r24, Z
    22ba:	8a 83       	std	Y+2, r24	; 0x02
    22bc:	09 c0       	rjmp	.+18     	; 0x22d0 <GPIO_readPort+0x84>
			break;
		case PORT_C:
			value = PINC;
    22be:	e3 e3       	ldi	r30, 0x33	; 51
    22c0:	f0 e0       	ldi	r31, 0x00	; 0
    22c2:	80 81       	ld	r24, Z
    22c4:	8a 83       	std	Y+2, r24	; 0x02
    22c6:	04 c0       	rjmp	.+8      	; 0x22d0 <GPIO_readPort+0x84>
			break;
		case PORT_D:
			value = PIND;
    22c8:	e0 e3       	ldi	r30, 0x30	; 48
    22ca:	f0 e0       	ldi	r31, 0x00	; 0
    22cc:	80 81       	ld	r24, Z
    22ce:	8a 83       	std	Y+2, r24	; 0x02
			break;
		}
	}
	return value;
    22d0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    22d2:	0f 90       	pop	r0
    22d4:	0f 90       	pop	r0
    22d6:	0f 90       	pop	r0
    22d8:	0f 90       	pop	r0
    22da:	0f 90       	pop	r0
    22dc:	cf 91       	pop	r28
    22de:	df 91       	pop	r29
    22e0:	08 95       	ret

000022e2 <EXT_INTERRUPT_Init>:

#include "avr/io.h" /* To use the IO Ports Registers */
#include <util/delay.h>

// Initialize External Interrupt
void EXT_INTERRUPT_Init(void) {
    22e2:	df 93       	push	r29
    22e4:	cf 93       	push	r28
    22e6:	cd b7       	in	r28, 0x3d	; 61
    22e8:	de b7       	in	r29, 0x3e	; 62
	 */

	// Checking if INT0 is enabled or disabled
	#if (EXT_INTERRUPT_INT0_INIT_STATE == EXT_INTERRUPT_Enable_State)
		// Enabling the INT0 bit inside GICR
		SET_BIT(GICR, INT0);
    22ea:	ab e5       	ldi	r26, 0x5B	; 91
    22ec:	b0 e0       	ldi	r27, 0x00	; 0
    22ee:	eb e5       	ldi	r30, 0x5B	; 91
    22f0:	f0 e0       	ldi	r31, 0x00	; 0
    22f2:	80 81       	ld	r24, Z
    22f4:	80 64       	ori	r24, 0x40	; 64
    22f6:	8c 93       	st	X, r24

		// Setup Pin PD2 "INT0" to Input
		GPIO_setupPinDirection(PORT_D, PIN_2, PIN_INPUT);
    22f8:	83 e0       	ldi	r24, 0x03	; 3
    22fa:	62 e0       	ldi	r22, 0x02	; 2
    22fc:	40 e0       	ldi	r20, 0x00	; 0
    22fe:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <GPIO_setupPinDirection>
			SET_BIT(MCUCR, ISC00);
		#elif (EXT_INTERRUPT_0_MODE == EXT_INTERRUPT_Falling_Edge)
			SET_BIT(MCUCR, ISC01);
			CLR_BIT(MCUCR, ISC00);
		#elif (EXT_INTERRUPT_0_MODE == EXT_INTERRUPT_Rising_Edge)
			SET_BIT(MCUCR, ISC01);
    2302:	a5 e5       	ldi	r26, 0x55	; 85
    2304:	b0 e0       	ldi	r27, 0x00	; 0
    2306:	e5 e5       	ldi	r30, 0x55	; 85
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	80 81       	ld	r24, Z
    230c:	82 60       	ori	r24, 0x02	; 2
    230e:	8c 93       	st	X, r24
			SET_BIT(MCUCR, ISC00);
    2310:	a5 e5       	ldi	r26, 0x55	; 85
    2312:	b0 e0       	ldi	r27, 0x00	; 0
    2314:	e5 e5       	ldi	r30, 0x55	; 85
    2316:	f0 e0       	ldi	r31, 0x00	; 0
    2318:	80 81       	ld	r24, Z
    231a:	81 60       	ori	r24, 0x01	; 1
    231c:	8c 93       	st	X, r24
		#elif (EXT_INTERRUPT_1_MODE == EXT_INTERRUPT_Rising_Edge)
			SET_BIT(MCUCR, ISC11);
			SET_BIT(MCUCR, ISC10);
		#endif
	#elif (EXT_INTERRUPT_INT1_INIT_STATE == EXT_INTERRUPT_Disable_State)
			CLR_BIT(GICR, INT1);
    231e:	ab e5       	ldi	r26, 0x5B	; 91
    2320:	b0 e0       	ldi	r27, 0x00	; 0
    2322:	eb e5       	ldi	r30, 0x5B	; 91
    2324:	f0 e0       	ldi	r31, 0x00	; 0
    2326:	80 81       	ld	r24, Z
    2328:	8f 77       	andi	r24, 0x7F	; 127
    232a:	8c 93       	st	X, r24
			CLR_BIT(MCUCSR, ISC2);
		#elif (EXT_INTERRUPT_2_MODE == EXT_INTERRUPT_INT2_Rising_Edge)
			SET_BIT(MCUCSR, ISC2);
		#endif
	#elif (EXT_INTERRUPT_INT2_INIT_STATE == EXT_INTERRUPT_Disable_State)
			CLR_BIT(GICR, INT2);
    232c:	ab e5       	ldi	r26, 0x5B	; 91
    232e:	b0 e0       	ldi	r27, 0x00	; 0
    2330:	eb e5       	ldi	r30, 0x5B	; 91
    2332:	f0 e0       	ldi	r31, 0x00	; 0
    2334:	80 81       	ld	r24, Z
    2336:	8f 7d       	andi	r24, 0xDF	; 223
    2338:	8c 93       	st	X, r24

	/* Status Register – SREG Register Bits Description:
	 * Bit 7 – I: Global Interrupt Enable
	 */
	// Enabling the I-Bit
	SET_BIT(SREG, SREG_I_BIT);
    233a:	af e5       	ldi	r26, 0x5F	; 95
    233c:	b0 e0       	ldi	r27, 0x00	; 0
    233e:	ef e5       	ldi	r30, 0x5F	; 95
    2340:	f0 e0       	ldi	r31, 0x00	; 0
    2342:	80 81       	ld	r24, Z
    2344:	80 68       	ori	r24, 0x80	; 128
    2346:	8c 93       	st	X, r24
}
    2348:	cf 91       	pop	r28
    234a:	df 91       	pop	r29
    234c:	08 95       	ret

0000234e <EXT_INTERRUPT_DeInit>:

// Disable External Interrupt ISR
void EXT_INTERRUPT_DeInit(void) {
    234e:	df 93       	push	r29
    2350:	cf 93       	push	r28
    2352:	cd b7       	in	r28, 0x3d	; 61
    2354:	de b7       	in	r29, 0x3e	; 62

	#if (EXT_INTERRUPT_INT0_INIT_STATE == EXT_INTERRUPT_Enable_State)
		CLR_BIT(GICR, INT0);
    2356:	ab e5       	ldi	r26, 0x5B	; 91
    2358:	b0 e0       	ldi	r27, 0x00	; 0
    235a:	eb e5       	ldi	r30, 0x5B	; 91
    235c:	f0 e0       	ldi	r31, 0x00	; 0
    235e:	80 81       	ld	r24, Z
    2360:	8f 7b       	andi	r24, 0xBF	; 191
    2362:	8c 93       	st	X, r24

	#if (EXT_INTERRUPT_INT2_INIT_STATE == EXT_INTERRUPT_Enable_State)
		CLR_BIT(GICR, INT2);
	#endif

	CLR_BIT(SREG, SREG_I_BIT);
    2364:	af e5       	ldi	r26, 0x5F	; 95
    2366:	b0 e0       	ldi	r27, 0x00	; 0
    2368:	ef e5       	ldi	r30, 0x5F	; 95
    236a:	f0 e0       	ldi	r31, 0x00	; 0
    236c:	80 81       	ld	r24, Z
    236e:	8f 77       	andi	r24, 0x7F	; 127
    2370:	8c 93       	st	X, r24
}
    2372:	cf 91       	pop	r28
    2374:	df 91       	pop	r29
    2376:	08 95       	ret

00002378 <EXT_INTERRUPT_SetCallBack>:

//The function that will be called in the EXT INT
void (*CallBackPtr) (void) = NULL;

// External Interrupt Call Back Function
void EXT_INTERRUPT_SetCallBack(void (*CopyFuncPtr) (void)) {
    2378:	df 93       	push	r29
    237a:	cf 93       	push	r28
    237c:	00 d0       	rcall	.+0      	; 0x237e <EXT_INTERRUPT_SetCallBack+0x6>
    237e:	cd b7       	in	r28, 0x3d	; 61
    2380:	de b7       	in	r29, 0x3e	; 62
    2382:	9a 83       	std	Y+2, r25	; 0x02
    2384:	89 83       	std	Y+1, r24	; 0x01
	CallBackPtr = CopyFuncPtr;
    2386:	89 81       	ldd	r24, Y+1	; 0x01
    2388:	9a 81       	ldd	r25, Y+2	; 0x02
    238a:	90 93 69 01 	sts	0x0169, r25
    238e:	80 93 68 01 	sts	0x0168, r24
}
    2392:	0f 90       	pop	r0
    2394:	0f 90       	pop	r0
    2396:	cf 91       	pop	r28
    2398:	df 91       	pop	r29
    239a:	08 95       	ret

0000239c <ADC_Init>:
#include "avr/io.h" /* To use the IO Ports Registers */
#include <util/delay.h>


// Initializes and enables the ADC Module to start functionality
void ADC_Init(void) {
    239c:	df 93       	push	r29
    239e:	cf 93       	push	r28
    23a0:	cd b7       	in	r28, 0x3d	; 61
    23a2:	de b7       	in	r29, 0x3e	; 62
	 * 7:6, REFS1:0 = 01 to choose AVCC = 5v as reference voltage
	 * 5, ADLAR   = 0 right adjusted
	 * 4:0, MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	// Sets REFS1:0 to '01'
	SET_BIT(ADMUX, REFS0);
    23a4:	a7 e2       	ldi	r26, 0x27	; 39
    23a6:	b0 e0       	ldi	r27, 0x00	; 0
    23a8:	e7 e2       	ldi	r30, 0x27	; 39
    23aa:	f0 e0       	ldi	r31, 0x00	; 0
    23ac:	80 81       	ld	r24, Z
    23ae:	80 64       	ori	r24, 0x40	; 64
    23b0:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, REFS1);
    23b2:	a7 e2       	ldi	r26, 0x27	; 39
    23b4:	b0 e0       	ldi	r27, 0x00	; 0
    23b6:	e7 e2       	ldi	r30, 0x27	; 39
    23b8:	f0 e0       	ldi	r31, 0x00	; 0
    23ba:	80 81       	ld	r24, Z
    23bc:	8f 77       	andi	r24, 0x7F	; 127
    23be:	8c 93       	st	X, r24

	CLR_BIT(ADMUX, ADLAR);
    23c0:	a7 e2       	ldi	r26, 0x27	; 39
    23c2:	b0 e0       	ldi	r27, 0x00	; 0
    23c4:	e7 e2       	ldi	r30, 0x27	; 39
    23c6:	f0 e0       	ldi	r31, 0x00	; 0
    23c8:	80 81       	ld	r24, Z
    23ca:	8f 7d       	andi	r24, 0xDF	; 223
    23cc:	8c 93       	st	X, r24

	CLR_BIT(ADMUX, MUX4);
    23ce:	a7 e2       	ldi	r26, 0x27	; 39
    23d0:	b0 e0       	ldi	r27, 0x00	; 0
    23d2:	e7 e2       	ldi	r30, 0x27	; 39
    23d4:	f0 e0       	ldi	r31, 0x00	; 0
    23d6:	80 81       	ld	r24, Z
    23d8:	8f 7e       	andi	r24, 0xEF	; 239
    23da:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, MUX3);
    23dc:	a7 e2       	ldi	r26, 0x27	; 39
    23de:	b0 e0       	ldi	r27, 0x00	; 0
    23e0:	e7 e2       	ldi	r30, 0x27	; 39
    23e2:	f0 e0       	ldi	r31, 0x00	; 0
    23e4:	80 81       	ld	r24, Z
    23e6:	87 7f       	andi	r24, 0xF7	; 247
    23e8:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, MUX2);
    23ea:	a7 e2       	ldi	r26, 0x27	; 39
    23ec:	b0 e0       	ldi	r27, 0x00	; 0
    23ee:	e7 e2       	ldi	r30, 0x27	; 39
    23f0:	f0 e0       	ldi	r31, 0x00	; 0
    23f2:	80 81       	ld	r24, Z
    23f4:	8b 7f       	andi	r24, 0xFB	; 251
    23f6:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, MUX1);
    23f8:	a7 e2       	ldi	r26, 0x27	; 39
    23fa:	b0 e0       	ldi	r27, 0x00	; 0
    23fc:	e7 e2       	ldi	r30, 0x27	; 39
    23fe:	f0 e0       	ldi	r31, 0x00	; 0
    2400:	80 81       	ld	r24, Z
    2402:	8d 7f       	andi	r24, 0xFD	; 253
    2404:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, MUX0);
    2406:	a7 e2       	ldi	r26, 0x27	; 39
    2408:	b0 e0       	ldi	r27, 0x00	; 0
    240a:	e7 e2       	ldi	r30, 0x27	; 39
    240c:	f0 e0       	ldi	r31, 0x00	; 0
    240e:	80 81       	ld	r24, Z
    2410:	8e 7f       	andi	r24, 0xFE	; 254
    2412:	8c 93       	st	X, r24
	 * ADIE = 0 Disable ADC Interrupt
	 * ADATE = 0 Disable Auto Trigger
	 * ADPS2:0 = 111 to choose ADC_Clock = F_CPU/128 = 16Mhz/128 = 125Khz --> ADC must operate in range 50-200Khz
	 */
	// Enables ADC
	SET_BIT(ADCSRA, ADEN);
    2414:	a6 e2       	ldi	r26, 0x26	; 38
    2416:	b0 e0       	ldi	r27, 0x00	; 0
    2418:	e6 e2       	ldi	r30, 0x26	; 38
    241a:	f0 e0       	ldi	r31, 0x00	; 0
    241c:	80 81       	ld	r24, Z
    241e:	80 68       	ori	r24, 0x80	; 128
    2420:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA, ADIE);
    2422:	a6 e2       	ldi	r26, 0x26	; 38
    2424:	b0 e0       	ldi	r27, 0x00	; 0
    2426:	e6 e2       	ldi	r30, 0x26	; 38
    2428:	f0 e0       	ldi	r31, 0x00	; 0
    242a:	80 81       	ld	r24, Z
    242c:	87 7f       	andi	r24, 0xF7	; 247
    242e:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA, ADATE);
    2430:	a6 e2       	ldi	r26, 0x26	; 38
    2432:	b0 e0       	ldi	r27, 0x00	; 0
    2434:	e6 e2       	ldi	r30, 0x26	; 38
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	80 81       	ld	r24, Z
    243a:	8f 7d       	andi	r24, 0xDF	; 223
    243c:	8c 93       	st	X, r24

	// Choose Prescaler: 128
	SET_BIT(ADCSRA, ADPS2);
    243e:	a6 e2       	ldi	r26, 0x26	; 38
    2440:	b0 e0       	ldi	r27, 0x00	; 0
    2442:	e6 e2       	ldi	r30, 0x26	; 38
    2444:	f0 e0       	ldi	r31, 0x00	; 0
    2446:	80 81       	ld	r24, Z
    2448:	84 60       	ori	r24, 0x04	; 4
    244a:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADPS1);
    244c:	a6 e2       	ldi	r26, 0x26	; 38
    244e:	b0 e0       	ldi	r27, 0x00	; 0
    2450:	e6 e2       	ldi	r30, 0x26	; 38
    2452:	f0 e0       	ldi	r31, 0x00	; 0
    2454:	80 81       	ld	r24, Z
    2456:	82 60       	ori	r24, 0x02	; 2
    2458:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADPS0);
    245a:	a6 e2       	ldi	r26, 0x26	; 38
    245c:	b0 e0       	ldi	r27, 0x00	; 0
    245e:	e6 e2       	ldi	r30, 0x26	; 38
    2460:	f0 e0       	ldi	r31, 0x00	; 0
    2462:	80 81       	ld	r24, Z
    2464:	81 60       	ori	r24, 0x01	; 1
    2466:	8c 93       	st	X, r24

}
    2468:	cf 91       	pop	r28
    246a:	df 91       	pop	r29
    246c:	08 95       	ret

0000246e <ADC_readChannel>:


// Reads the content written to the selected channel of the ADC
uint16 ADC_readChannel(uint8 channel_num) {
    246e:	df 93       	push	r29
    2470:	cf 93       	push	r28
    2472:	0f 92       	push	r0
    2474:	cd b7       	in	r28, 0x3d	; 61
    2476:	de b7       	in	r29, 0x3e	; 62
    2478:	89 83       	std	Y+1, r24	; 0x01

	// Insert Channel Number in ADMUX Procedure

	// Clears first 5 bits to zero
	ADMUX &= 0xE0; // 0b1110 0000
    247a:	a7 e2       	ldi	r26, 0x27	; 39
    247c:	b0 e0       	ldi	r27, 0x00	; 0
    247e:	e7 e2       	ldi	r30, 0x27	; 39
    2480:	f0 e0       	ldi	r31, 0x00	; 0
    2482:	80 81       	ld	r24, Z
    2484:	80 7e       	andi	r24, 0xE0	; 224
    2486:	8c 93       	st	X, r24

	// Mask the Channel No. Input with max channel No.
	channel_num &= 0x07; // 0b0000 0111
    2488:	89 81       	ldd	r24, Y+1	; 0x01
    248a:	87 70       	andi	r24, 0x07	; 7
    248c:	89 83       	std	Y+1, r24	; 0x01

	// Insert Channel no. into ADMUX Register
	ADMUX |= channel_num;
    248e:	a7 e2       	ldi	r26, 0x27	; 39
    2490:	b0 e0       	ldi	r27, 0x00	; 0
    2492:	e7 e2       	ldi	r30, 0x27	; 39
    2494:	f0 e0       	ldi	r31, 0x00	; 0
    2496:	90 81       	ld	r25, Z
    2498:	89 81       	ldd	r24, Y+1	; 0x01
    249a:	89 2b       	or	r24, r25
    249c:	8c 93       	st	X, r24

	// Starts ADC Conversion
	SET_BIT(ADCSRA, ADSC);
    249e:	a6 e2       	ldi	r26, 0x26	; 38
    24a0:	b0 e0       	ldi	r27, 0x00	; 0
    24a2:	e6 e2       	ldi	r30, 0x26	; 38
    24a4:	f0 e0       	ldi	r31, 0x00	; 0
    24a6:	80 81       	ld	r24, Z
    24a8:	80 64       	ori	r24, 0x40	; 64
    24aa:	8c 93       	st	X, r24

	// Busy wait (Polling) untill ADIF = 1
	while ( BIT_IS_CLR(ADCSRA, ADIF) );
    24ac:	e6 e2       	ldi	r30, 0x26	; 38
    24ae:	f0 e0       	ldi	r31, 0x00	; 0
    24b0:	80 81       	ld	r24, Z
    24b2:	88 2f       	mov	r24, r24
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	80 71       	andi	r24, 0x10	; 16
    24b8:	90 70       	andi	r25, 0x00	; 0
    24ba:	00 97       	sbiw	r24, 0x00	; 0
    24bc:	b9 f3       	breq	.-18     	; 0x24ac <ADC_readChannel+0x3e>

	// sET FLAG BY 1 TO CLEAR
	SET_BIT(ADCSRA, ADIF);
    24be:	a6 e2       	ldi	r26, 0x26	; 38
    24c0:	b0 e0       	ldi	r27, 0x00	; 0
    24c2:	e6 e2       	ldi	r30, 0x26	; 38
    24c4:	f0 e0       	ldi	r31, 0x00	; 0
    24c6:	80 81       	ld	r24, Z
    24c8:	80 61       	ori	r24, 0x10	; 16
    24ca:	8c 93       	st	X, r24

	// Read Data
	return ADC;
    24cc:	e4 e2       	ldi	r30, 0x24	; 36
    24ce:	f0 e0       	ldi	r31, 0x00	; 0
    24d0:	80 81       	ld	r24, Z
    24d2:	91 81       	ldd	r25, Z+1	; 0x01
}
    24d4:	0f 90       	pop	r0
    24d6:	cf 91       	pop	r28
    24d8:	df 91       	pop	r29
    24da:	08 95       	ret

000024dc <SEGMENT_Init>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
SEGMENT_Error_t SEGMENT_Init(uint8 port_num) {
    24dc:	df 93       	push	r29
    24de:	cf 93       	push	r28
    24e0:	00 d0       	rcall	.+0      	; 0x24e2 <SEGMENT_Init+0x6>
    24e2:	cd b7       	in	r28, 0x3d	; 61
    24e4:	de b7       	in	r29, 0x3e	; 62
    24e6:	8a 83       	std	Y+2, r24	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t SEGMENT_Driver_Checker = NULL;
    24e8:	19 82       	std	Y+1, r1	; 0x01

	if((port_num >= NUM_OF_PORTS)) {
    24ea:	8a 81       	ldd	r24, Y+2	; 0x02
    24ec:	84 30       	cpi	r24, 0x04	; 4
    24ee:	18 f0       	brcs	.+6      	; 0x24f6 <SEGMENT_Init+0x1a>
		SEGMENT_Driver_Checker = SEGMENT_WRONG_PORT_NUMBER;
    24f0:	82 e0       	ldi	r24, 0x02	; 2
    24f2:	89 83       	std	Y+1, r24	; 0x01
    24f4:	15 c0       	rjmp	.+42     	; 0x2520 <SEGMENT_Init+0x44>
	}
	else {
		/* Setup the pin direction as required */
		GPIO_setupPinDirection(port_num, PIN_0, PIN_OUTPUT);
    24f6:	8a 81       	ldd	r24, Y+2	; 0x02
    24f8:	60 e0       	ldi	r22, 0x00	; 0
    24fa:	41 e0       	ldi	r20, 0x01	; 1
    24fc:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(port_num, PIN_1, PIN_OUTPUT);
    2500:	8a 81       	ldd	r24, Y+2	; 0x02
    2502:	61 e0       	ldi	r22, 0x01	; 1
    2504:	41 e0       	ldi	r20, 0x01	; 1
    2506:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(port_num, PIN_2, PIN_OUTPUT);
    250a:	8a 81       	ldd	r24, Y+2	; 0x02
    250c:	62 e0       	ldi	r22, 0x02	; 2
    250e:	41 e0       	ldi	r20, 0x01	; 1
    2510:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(port_num, PIN_3, PIN_OUTPUT);
    2514:	8a 81       	ldd	r24, Y+2	; 0x02
    2516:	63 e0       	ldi	r22, 0x03	; 3
    2518:	41 e0       	ldi	r20, 0x01	; 1
    251a:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <GPIO_setupPinDirection>
		SEGMENT_Driver_Checker = SEGMENT_OK;
    251e:	19 82       	std	Y+1, r1	; 0x01
	}
	return SEGMENT_Driver_Checker;
    2520:	89 81       	ldd	r24, Y+1	; 0x01
}
    2522:	0f 90       	pop	r0
    2524:	0f 90       	pop	r0
    2526:	cf 91       	pop	r28
    2528:	df 91       	pop	r29
    252a:	08 95       	ret

0000252c <SEGMENT_DISPLAY>:

SEGMENT_Error_t SEGMENT_DISPLAY(uint8 port_num, uint8 value) {
    252c:	df 93       	push	r29
    252e:	cf 93       	push	r28
    2530:	00 d0       	rcall	.+0      	; 0x2532 <SEGMENT_DISPLAY+0x6>
    2532:	00 d0       	rcall	.+0      	; 0x2534 <SEGMENT_DISPLAY+0x8>
    2534:	0f 92       	push	r0
    2536:	cd b7       	in	r28, 0x3d	; 61
    2538:	de b7       	in	r29, 0x3e	; 62
    253a:	8a 83       	std	Y+2, r24	; 0x02
    253c:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t SEGMENT_Driver_Checker = NULL;
    253e:	19 82       	std	Y+1, r1	; 0x01

	if((port_num >= NUM_OF_PORTS)) {
    2540:	8a 81       	ldd	r24, Y+2	; 0x02
    2542:	84 30       	cpi	r24, 0x04	; 4
    2544:	18 f0       	brcs	.+6      	; 0x254c <SEGMENT_DISPLAY+0x20>
		SEGMENT_Driver_Checker = SEGMENT_WRONG_PORT_NUMBER;
    2546:	82 e0       	ldi	r24, 0x02	; 2
    2548:	89 83       	std	Y+1, r24	; 0x01
    254a:	24 c1       	rjmp	.+584    	; 0x2794 <SEGMENT_DISPLAY+0x268>
	}
	else if((value < 0 && value > 9)) {
		SEGMENT_Driver_Checker = SEGMENT_WRONG_VALUE;
	}
	else {
		switch(value) {
    254c:	8b 81       	ldd	r24, Y+3	; 0x03
    254e:	28 2f       	mov	r18, r24
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	3d 83       	std	Y+5, r19	; 0x05
    2554:	2c 83       	std	Y+4, r18	; 0x04
    2556:	8c 81       	ldd	r24, Y+4	; 0x04
    2558:	9d 81       	ldd	r25, Y+5	; 0x05
    255a:	84 30       	cpi	r24, 0x04	; 4
    255c:	91 05       	cpc	r25, r1
    255e:	09 f4       	brne	.+2      	; 0x2562 <SEGMENT_DISPLAY+0x36>
    2560:	9b c0       	rjmp	.+310    	; 0x2698 <SEGMENT_DISPLAY+0x16c>
    2562:	2c 81       	ldd	r18, Y+4	; 0x04
    2564:	3d 81       	ldd	r19, Y+5	; 0x05
    2566:	25 30       	cpi	r18, 0x05	; 5
    2568:	31 05       	cpc	r19, r1
    256a:	ec f4       	brge	.+58     	; 0x25a6 <SEGMENT_DISPLAY+0x7a>
    256c:	8c 81       	ldd	r24, Y+4	; 0x04
    256e:	9d 81       	ldd	r25, Y+5	; 0x05
    2570:	81 30       	cpi	r24, 0x01	; 1
    2572:	91 05       	cpc	r25, r1
    2574:	09 f4       	brne	.+2      	; 0x2578 <SEGMENT_DISPLAY+0x4c>
    2576:	51 c0       	rjmp	.+162    	; 0x261a <SEGMENT_DISPLAY+0xee>
    2578:	2c 81       	ldd	r18, Y+4	; 0x04
    257a:	3d 81       	ldd	r19, Y+5	; 0x05
    257c:	22 30       	cpi	r18, 0x02	; 2
    257e:	31 05       	cpc	r19, r1
    2580:	2c f4       	brge	.+10     	; 0x258c <SEGMENT_DISPLAY+0x60>
    2582:	8c 81       	ldd	r24, Y+4	; 0x04
    2584:	9d 81       	ldd	r25, Y+5	; 0x05
    2586:	00 97       	sbiw	r24, 0x00	; 0
    2588:	99 f1       	breq	.+102    	; 0x25f0 <SEGMENT_DISPLAY+0xc4>
    258a:	03 c1       	rjmp	.+518    	; 0x2792 <SEGMENT_DISPLAY+0x266>
    258c:	2c 81       	ldd	r18, Y+4	; 0x04
    258e:	3d 81       	ldd	r19, Y+5	; 0x05
    2590:	22 30       	cpi	r18, 0x02	; 2
    2592:	31 05       	cpc	r19, r1
    2594:	09 f4       	brne	.+2      	; 0x2598 <SEGMENT_DISPLAY+0x6c>
    2596:	56 c0       	rjmp	.+172    	; 0x2644 <SEGMENT_DISPLAY+0x118>
    2598:	8c 81       	ldd	r24, Y+4	; 0x04
    259a:	9d 81       	ldd	r25, Y+5	; 0x05
    259c:	83 30       	cpi	r24, 0x03	; 3
    259e:	91 05       	cpc	r25, r1
    25a0:	09 f4       	brne	.+2      	; 0x25a4 <SEGMENT_DISPLAY+0x78>
    25a2:	65 c0       	rjmp	.+202    	; 0x266e <SEGMENT_DISPLAY+0x142>
    25a4:	f6 c0       	rjmp	.+492    	; 0x2792 <SEGMENT_DISPLAY+0x266>
    25a6:	2c 81       	ldd	r18, Y+4	; 0x04
    25a8:	3d 81       	ldd	r19, Y+5	; 0x05
    25aa:	27 30       	cpi	r18, 0x07	; 7
    25ac:	31 05       	cpc	r19, r1
    25ae:	09 f4       	brne	.+2      	; 0x25b2 <SEGMENT_DISPLAY+0x86>
    25b0:	b2 c0       	rjmp	.+356    	; 0x2716 <SEGMENT_DISPLAY+0x1ea>
    25b2:	8c 81       	ldd	r24, Y+4	; 0x04
    25b4:	9d 81       	ldd	r25, Y+5	; 0x05
    25b6:	88 30       	cpi	r24, 0x08	; 8
    25b8:	91 05       	cpc	r25, r1
    25ba:	6c f4       	brge	.+26     	; 0x25d6 <SEGMENT_DISPLAY+0xaa>
    25bc:	2c 81       	ldd	r18, Y+4	; 0x04
    25be:	3d 81       	ldd	r19, Y+5	; 0x05
    25c0:	25 30       	cpi	r18, 0x05	; 5
    25c2:	31 05       	cpc	r19, r1
    25c4:	09 f4       	brne	.+2      	; 0x25c8 <SEGMENT_DISPLAY+0x9c>
    25c6:	7d c0       	rjmp	.+250    	; 0x26c2 <SEGMENT_DISPLAY+0x196>
    25c8:	8c 81       	ldd	r24, Y+4	; 0x04
    25ca:	9d 81       	ldd	r25, Y+5	; 0x05
    25cc:	86 30       	cpi	r24, 0x06	; 6
    25ce:	91 05       	cpc	r25, r1
    25d0:	09 f4       	brne	.+2      	; 0x25d4 <SEGMENT_DISPLAY+0xa8>
    25d2:	8c c0       	rjmp	.+280    	; 0x26ec <SEGMENT_DISPLAY+0x1c0>
    25d4:	de c0       	rjmp	.+444    	; 0x2792 <SEGMENT_DISPLAY+0x266>
    25d6:	2c 81       	ldd	r18, Y+4	; 0x04
    25d8:	3d 81       	ldd	r19, Y+5	; 0x05
    25da:	28 30       	cpi	r18, 0x08	; 8
    25dc:	31 05       	cpc	r19, r1
    25de:	09 f4       	brne	.+2      	; 0x25e2 <SEGMENT_DISPLAY+0xb6>
    25e0:	af c0       	rjmp	.+350    	; 0x2740 <SEGMENT_DISPLAY+0x214>
    25e2:	8c 81       	ldd	r24, Y+4	; 0x04
    25e4:	9d 81       	ldd	r25, Y+5	; 0x05
    25e6:	89 30       	cpi	r24, 0x09	; 9
    25e8:	91 05       	cpc	r25, r1
    25ea:	09 f4       	brne	.+2      	; 0x25ee <SEGMENT_DISPLAY+0xc2>
    25ec:	be c0       	rjmp	.+380    	; 0x276a <SEGMENT_DISPLAY+0x23e>
    25ee:	d1 c0       	rjmp	.+418    	; 0x2792 <SEGMENT_DISPLAY+0x266>
			case 0:
				GPIO_writePin(port_num, PIN_0, LOGIC_LOW);
    25f0:	8a 81       	ldd	r24, Y+2	; 0x02
    25f2:	60 e0       	ldi	r22, 0x00	; 0
    25f4:	40 e0       	ldi	r20, 0x00	; 0
    25f6:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
    25fa:	8a 81       	ldd	r24, Y+2	; 0x02
    25fc:	61 e0       	ldi	r22, 0x01	; 1
    25fe:	40 e0       	ldi	r20, 0x00	; 0
    2600:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
    2604:	8a 81       	ldd	r24, Y+2	; 0x02
    2606:	62 e0       	ldi	r22, 0x02	; 2
    2608:	40 e0       	ldi	r20, 0x00	; 0
    260a:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    260e:	8a 81       	ldd	r24, Y+2	; 0x02
    2610:	63 e0       	ldi	r22, 0x03	; 3
    2612:	40 e0       	ldi	r20, 0x00	; 0
    2614:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
    2618:	bc c0       	rjmp	.+376    	; 0x2792 <SEGMENT_DISPLAY+0x266>
				break;
			case 1:
				GPIO_writePin(port_num, PIN_0, LOGIC_HIGH);
    261a:	8a 81       	ldd	r24, Y+2	; 0x02
    261c:	60 e0       	ldi	r22, 0x00	; 0
    261e:	41 e0       	ldi	r20, 0x01	; 1
    2620:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
    2624:	8a 81       	ldd	r24, Y+2	; 0x02
    2626:	61 e0       	ldi	r22, 0x01	; 1
    2628:	40 e0       	ldi	r20, 0x00	; 0
    262a:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
    262e:	8a 81       	ldd	r24, Y+2	; 0x02
    2630:	62 e0       	ldi	r22, 0x02	; 2
    2632:	40 e0       	ldi	r20, 0x00	; 0
    2634:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    2638:	8a 81       	ldd	r24, Y+2	; 0x02
    263a:	63 e0       	ldi	r22, 0x03	; 3
    263c:	40 e0       	ldi	r20, 0x00	; 0
    263e:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
    2642:	a7 c0       	rjmp	.+334    	; 0x2792 <SEGMENT_DISPLAY+0x266>
				break;
			case 2:
				GPIO_writePin(port_num, PIN_0, LOGIC_LOW);
    2644:	8a 81       	ldd	r24, Y+2	; 0x02
    2646:	60 e0       	ldi	r22, 0x00	; 0
    2648:	40 e0       	ldi	r20, 0x00	; 0
    264a:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_HIGH);
    264e:	8a 81       	ldd	r24, Y+2	; 0x02
    2650:	61 e0       	ldi	r22, 0x01	; 1
    2652:	41 e0       	ldi	r20, 0x01	; 1
    2654:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
    2658:	8a 81       	ldd	r24, Y+2	; 0x02
    265a:	62 e0       	ldi	r22, 0x02	; 2
    265c:	40 e0       	ldi	r20, 0x00	; 0
    265e:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    2662:	8a 81       	ldd	r24, Y+2	; 0x02
    2664:	63 e0       	ldi	r22, 0x03	; 3
    2666:	40 e0       	ldi	r20, 0x00	; 0
    2668:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
    266c:	92 c0       	rjmp	.+292    	; 0x2792 <SEGMENT_DISPLAY+0x266>
				break;
			case 3:
				GPIO_writePin(port_num, PIN_0, LOGIC_HIGH);
    266e:	8a 81       	ldd	r24, Y+2	; 0x02
    2670:	60 e0       	ldi	r22, 0x00	; 0
    2672:	41 e0       	ldi	r20, 0x01	; 1
    2674:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_HIGH);
    2678:	8a 81       	ldd	r24, Y+2	; 0x02
    267a:	61 e0       	ldi	r22, 0x01	; 1
    267c:	41 e0       	ldi	r20, 0x01	; 1
    267e:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
    2682:	8a 81       	ldd	r24, Y+2	; 0x02
    2684:	62 e0       	ldi	r22, 0x02	; 2
    2686:	40 e0       	ldi	r20, 0x00	; 0
    2688:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    268c:	8a 81       	ldd	r24, Y+2	; 0x02
    268e:	63 e0       	ldi	r22, 0x03	; 3
    2690:	40 e0       	ldi	r20, 0x00	; 0
    2692:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
    2696:	7d c0       	rjmp	.+250    	; 0x2792 <SEGMENT_DISPLAY+0x266>
				break;
			case 4:
				GPIO_writePin(port_num, PIN_0, LOGIC_LOW);
    2698:	8a 81       	ldd	r24, Y+2	; 0x02
    269a:	60 e0       	ldi	r22, 0x00	; 0
    269c:	40 e0       	ldi	r20, 0x00	; 0
    269e:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
    26a2:	8a 81       	ldd	r24, Y+2	; 0x02
    26a4:	61 e0       	ldi	r22, 0x01	; 1
    26a6:	40 e0       	ldi	r20, 0x00	; 0
    26a8:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_HIGH);
    26ac:	8a 81       	ldd	r24, Y+2	; 0x02
    26ae:	62 e0       	ldi	r22, 0x02	; 2
    26b0:	41 e0       	ldi	r20, 0x01	; 1
    26b2:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    26b6:	8a 81       	ldd	r24, Y+2	; 0x02
    26b8:	63 e0       	ldi	r22, 0x03	; 3
    26ba:	40 e0       	ldi	r20, 0x00	; 0
    26bc:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
    26c0:	68 c0       	rjmp	.+208    	; 0x2792 <SEGMENT_DISPLAY+0x266>
				break;
			case 5:
				GPIO_writePin(port_num, PIN_0, LOGIC_HIGH);
    26c2:	8a 81       	ldd	r24, Y+2	; 0x02
    26c4:	60 e0       	ldi	r22, 0x00	; 0
    26c6:	41 e0       	ldi	r20, 0x01	; 1
    26c8:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
    26cc:	8a 81       	ldd	r24, Y+2	; 0x02
    26ce:	61 e0       	ldi	r22, 0x01	; 1
    26d0:	40 e0       	ldi	r20, 0x00	; 0
    26d2:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_HIGH);
    26d6:	8a 81       	ldd	r24, Y+2	; 0x02
    26d8:	62 e0       	ldi	r22, 0x02	; 2
    26da:	41 e0       	ldi	r20, 0x01	; 1
    26dc:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    26e0:	8a 81       	ldd	r24, Y+2	; 0x02
    26e2:	63 e0       	ldi	r22, 0x03	; 3
    26e4:	40 e0       	ldi	r20, 0x00	; 0
    26e6:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
    26ea:	53 c0       	rjmp	.+166    	; 0x2792 <SEGMENT_DISPLAY+0x266>
				break;
			case 6:
				GPIO_writePin(port_num, PIN_0, LOGIC_LOW);
    26ec:	8a 81       	ldd	r24, Y+2	; 0x02
    26ee:	60 e0       	ldi	r22, 0x00	; 0
    26f0:	40 e0       	ldi	r20, 0x00	; 0
    26f2:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_HIGH);
    26f6:	8a 81       	ldd	r24, Y+2	; 0x02
    26f8:	61 e0       	ldi	r22, 0x01	; 1
    26fa:	41 e0       	ldi	r20, 0x01	; 1
    26fc:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_HIGH);
    2700:	8a 81       	ldd	r24, Y+2	; 0x02
    2702:	62 e0       	ldi	r22, 0x02	; 2
    2704:	41 e0       	ldi	r20, 0x01	; 1
    2706:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    270a:	8a 81       	ldd	r24, Y+2	; 0x02
    270c:	63 e0       	ldi	r22, 0x03	; 3
    270e:	40 e0       	ldi	r20, 0x00	; 0
    2710:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
    2714:	3e c0       	rjmp	.+124    	; 0x2792 <SEGMENT_DISPLAY+0x266>
				break;
			case 7:
				GPIO_writePin(port_num, PIN_0, LOGIC_HIGH);
    2716:	8a 81       	ldd	r24, Y+2	; 0x02
    2718:	60 e0       	ldi	r22, 0x00	; 0
    271a:	41 e0       	ldi	r20, 0x01	; 1
    271c:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_HIGH);
    2720:	8a 81       	ldd	r24, Y+2	; 0x02
    2722:	61 e0       	ldi	r22, 0x01	; 1
    2724:	41 e0       	ldi	r20, 0x01	; 1
    2726:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_HIGH);
    272a:	8a 81       	ldd	r24, Y+2	; 0x02
    272c:	62 e0       	ldi	r22, 0x02	; 2
    272e:	41 e0       	ldi	r20, 0x01	; 1
    2730:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    2734:	8a 81       	ldd	r24, Y+2	; 0x02
    2736:	63 e0       	ldi	r22, 0x03	; 3
    2738:	40 e0       	ldi	r20, 0x00	; 0
    273a:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
    273e:	29 c0       	rjmp	.+82     	; 0x2792 <SEGMENT_DISPLAY+0x266>
				break;
			case 8:
				GPIO_writePin(port_num, PIN_0, LOGIC_LOW);
    2740:	8a 81       	ldd	r24, Y+2	; 0x02
    2742:	60 e0       	ldi	r22, 0x00	; 0
    2744:	40 e0       	ldi	r20, 0x00	; 0
    2746:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
    274a:	8a 81       	ldd	r24, Y+2	; 0x02
    274c:	61 e0       	ldi	r22, 0x01	; 1
    274e:	40 e0       	ldi	r20, 0x00	; 0
    2750:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
    2754:	8a 81       	ldd	r24, Y+2	; 0x02
    2756:	62 e0       	ldi	r22, 0x02	; 2
    2758:	40 e0       	ldi	r20, 0x00	; 0
    275a:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_HIGH);
    275e:	8a 81       	ldd	r24, Y+2	; 0x02
    2760:	63 e0       	ldi	r22, 0x03	; 3
    2762:	41 e0       	ldi	r20, 0x01	; 1
    2764:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
    2768:	14 c0       	rjmp	.+40     	; 0x2792 <SEGMENT_DISPLAY+0x266>
				break;
			case 9:
				GPIO_writePin(port_num, PIN_0, LOGIC_HIGH);
    276a:	8a 81       	ldd	r24, Y+2	; 0x02
    276c:	60 e0       	ldi	r22, 0x00	; 0
    276e:	41 e0       	ldi	r20, 0x01	; 1
    2770:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
    2774:	8a 81       	ldd	r24, Y+2	; 0x02
    2776:	61 e0       	ldi	r22, 0x01	; 1
    2778:	40 e0       	ldi	r20, 0x00	; 0
    277a:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
    277e:	8a 81       	ldd	r24, Y+2	; 0x02
    2780:	62 e0       	ldi	r22, 0x02	; 2
    2782:	40 e0       	ldi	r20, 0x00	; 0
    2784:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_HIGH);
    2788:	8a 81       	ldd	r24, Y+2	; 0x02
    278a:	63 e0       	ldi	r22, 0x03	; 3
    278c:	41 e0       	ldi	r20, 0x01	; 1
    278e:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
				break;
		}
		SEGMENT_Driver_Checker = SEGMENT_OK;
    2792:	19 82       	std	Y+1, r1	; 0x01
	}
	return SEGMENT_Driver_Checker;
    2794:	89 81       	ldd	r24, Y+1	; 0x01
}
    2796:	0f 90       	pop	r0
    2798:	0f 90       	pop	r0
    279a:	0f 90       	pop	r0
    279c:	0f 90       	pop	r0
    279e:	0f 90       	pop	r0
    27a0:	cf 91       	pop	r28
    27a2:	df 91       	pop	r29
    27a4:	08 95       	ret

000027a6 <LM35_getTemperature>:
#include "avr/io.h" /* To use the IO Ports Registers */
#include <util/delay.h>


// Initializes and enables the ADC Module to start functionality
uint8 LM35_getTemperature(void) {
    27a6:	df 93       	push	r29
    27a8:	cf 93       	push	r28
    27aa:	00 d0       	rcall	.+0      	; 0x27ac <LM35_getTemperature+0x6>
    27ac:	cd b7       	in	r28, 0x3d	; 61
    27ae:	de b7       	in	r29, 0x3e	; 62
	uint8 temperature = 0;
    27b0:	1a 82       	std	Y+2, r1	; 0x02
	uint8 ADC_Value = 0;
    27b2:	19 82       	std	Y+1, r1	; 0x01
	ADC_Value = ADC_readChannel(LM35_CH_ID);
    27b4:	82 e0       	ldi	r24, 0x02	; 2
    27b6:	0e 94 37 12 	call	0x246e	; 0x246e <ADC_readChannel>
    27ba:	89 83       	std	Y+1, r24	; 0x01

	temperature = (uint8) ( ( (uint32)ADC_Value * LM35_MAX_TEMP * ADC_REFERENCE_VOLT_VALUE) / (ADC_MAX_VALUE * LM35_MAX_VOLT) );
    27bc:	89 81       	ldd	r24, Y+1	; 0x01
    27be:	88 2f       	mov	r24, r24
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	a0 e0       	ldi	r26, 0x00	; 0
    27c4:	b0 e0       	ldi	r27, 0x00	; 0
    27c6:	2e ee       	ldi	r18, 0xEE	; 238
    27c8:	32 e0       	ldi	r19, 0x02	; 2
    27ca:	40 e0       	ldi	r20, 0x00	; 0
    27cc:	50 e0       	ldi	r21, 0x00	; 0
    27ce:	bc 01       	movw	r22, r24
    27d0:	cd 01       	movw	r24, r26
    27d2:	0e 94 30 20 	call	0x4060	; 0x4060 <__mulsi3>
    27d6:	dc 01       	movw	r26, r24
    27d8:	cb 01       	movw	r24, r22
    27da:	bc 01       	movw	r22, r24
    27dc:	cd 01       	movw	r24, r26
    27de:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    27e2:	dc 01       	movw	r26, r24
    27e4:	cb 01       	movw	r24, r22
    27e6:	bc 01       	movw	r22, r24
    27e8:	cd 01       	movw	r24, r26
    27ea:	20 e0       	ldi	r18, 0x00	; 0
    27ec:	30 ed       	ldi	r19, 0xD0	; 208
    27ee:	4f eb       	ldi	r20, 0xBF	; 191
    27f0:	54 e4       	ldi	r21, 0x44	; 68
    27f2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    27f6:	dc 01       	movw	r26, r24
    27f8:	cb 01       	movw	r24, r22
    27fa:	bc 01       	movw	r22, r24
    27fc:	cd 01       	movw	r24, r26
    27fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2802:	dc 01       	movw	r26, r24
    2804:	cb 01       	movw	r24, r22
    2806:	8a 83       	std	Y+2, r24	; 0x02

	return temperature;
    2808:	8a 81       	ldd	r24, Y+2	; 0x02

}
    280a:	0f 90       	pop	r0
    280c:	0f 90       	pop	r0
    280e:	cf 91       	pop	r28
    2810:	df 91       	pop	r29
    2812:	08 95       	ret

00002814 <LED_Init>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
LED_Error_t LED_Init(uint8 port_num, uint8 pin_num) {
    2814:	df 93       	push	r29
    2816:	cf 93       	push	r28
    2818:	00 d0       	rcall	.+0      	; 0x281a <LED_Init+0x6>
    281a:	0f 92       	push	r0
    281c:	cd b7       	in	r28, 0x3d	; 61
    281e:	de b7       	in	r29, 0x3e	; 62
    2820:	8a 83       	std	Y+2, r24	; 0x02
    2822:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t LED_Driver_Checker = NULL;
    2824:	19 82       	std	Y+1, r1	; 0x01
	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    2826:	8b 81       	ldd	r24, Y+3	; 0x03
    2828:	88 30       	cpi	r24, 0x08	; 8
    282a:	18 f0       	brcs	.+6      	; 0x2832 <LED_Init+0x1e>
		LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    282c:	81 e0       	ldi	r24, 0x01	; 1
    282e:	89 83       	std	Y+1, r24	; 0x01
    2830:	0c c0       	rjmp	.+24     	; 0x284a <LED_Init+0x36>
	}
	else if((port_num >= NUM_OF_PORTS)) {
    2832:	8a 81       	ldd	r24, Y+2	; 0x02
    2834:	84 30       	cpi	r24, 0x04	; 4
    2836:	18 f0       	brcs	.+6      	; 0x283e <LED_Init+0x2a>
		LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    2838:	82 e0       	ldi	r24, 0x02	; 2
    283a:	89 83       	std	Y+1, r24	; 0x01
    283c:	06 c0       	rjmp	.+12     	; 0x284a <LED_Init+0x36>
	}
	else {
		/* Setup the pin direction as required */
		GPIO_setupPinDirection(port_num, pin_num, PIN_OUTPUT);
    283e:	8a 81       	ldd	r24, Y+2	; 0x02
    2840:	6b 81       	ldd	r22, Y+3	; 0x03
    2842:	41 e0       	ldi	r20, 0x01	; 1
    2844:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <GPIO_setupPinDirection>
		LED_Driver_Checker = LED_OK;
    2848:	19 82       	std	Y+1, r1	; 0x01
	}
	return LED_Driver_Checker;
    284a:	89 81       	ldd	r24, Y+1	; 0x01
}
    284c:	0f 90       	pop	r0
    284e:	0f 90       	pop	r0
    2850:	0f 90       	pop	r0
    2852:	cf 91       	pop	r28
    2854:	df 91       	pop	r29
    2856:	08 95       	ret

00002858 <LED_On>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
LED_Error_t LED_On(uint8 port_num, uint8 pin_num) {
    2858:	df 93       	push	r29
    285a:	cf 93       	push	r28
    285c:	00 d0       	rcall	.+0      	; 0x285e <LED_On+0x6>
    285e:	0f 92       	push	r0
    2860:	cd b7       	in	r28, 0x3d	; 61
    2862:	de b7       	in	r29, 0x3e	; 62
    2864:	8a 83       	std	Y+2, r24	; 0x02
    2866:	6b 83       	std	Y+3, r22	; 0x03

	uint8_t LED_Driver_Checker = NULL;
    2868:	19 82       	std	Y+1, r1	; 0x01
		if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    286a:	8b 81       	ldd	r24, Y+3	; 0x03
    286c:	88 30       	cpi	r24, 0x08	; 8
    286e:	18 f0       	brcs	.+6      	; 0x2876 <LED_On+0x1e>
			LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    2870:	81 e0       	ldi	r24, 0x01	; 1
    2872:	89 83       	std	Y+1, r24	; 0x01
    2874:	0c c0       	rjmp	.+24     	; 0x288e <LED_On+0x36>
		}
		else if((port_num >= NUM_OF_PORTS)) {
    2876:	8a 81       	ldd	r24, Y+2	; 0x02
    2878:	84 30       	cpi	r24, 0x04	; 4
    287a:	18 f0       	brcs	.+6      	; 0x2882 <LED_On+0x2a>
			LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    287c:	82 e0       	ldi	r24, 0x02	; 2
    287e:	89 83       	std	Y+1, r24	; 0x01
    2880:	06 c0       	rjmp	.+12     	; 0x288e <LED_On+0x36>
		}
		else {
			/* Setup the pin direction as required */
			#if (LED_MODE == LED_NEGATIVE_LOGIC)
				GPIO_writePin(port_num, pin_num, LOGIC_LOW);
    2882:	8a 81       	ldd	r24, Y+2	; 0x02
    2884:	6b 81       	ldd	r22, Y+3	; 0x03
    2886:	40 e0       	ldi	r20, 0x00	; 0
    2888:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
			#elif (LED_MODE == LED_POSITIVE_LOGIC)
				GPIO_writePin(port_num, pin_num, LOGIC_HIGH);
			#endif
			LED_Driver_Checker = LED_OK;
    288c:	19 82       	std	Y+1, r1	; 0x01
		}
		return LED_Driver_Checker;
    288e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2890:	0f 90       	pop	r0
    2892:	0f 90       	pop	r0
    2894:	0f 90       	pop	r0
    2896:	cf 91       	pop	r28
    2898:	df 91       	pop	r29
    289a:	08 95       	ret

0000289c <LED_Off>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
LED_Error_t LED_Off(uint8 port_num, uint8 pin_num) {
    289c:	df 93       	push	r29
    289e:	cf 93       	push	r28
    28a0:	00 d0       	rcall	.+0      	; 0x28a2 <LED_Off+0x6>
    28a2:	0f 92       	push	r0
    28a4:	cd b7       	in	r28, 0x3d	; 61
    28a6:	de b7       	in	r29, 0x3e	; 62
    28a8:	8a 83       	std	Y+2, r24	; 0x02
    28aa:	6b 83       	std	Y+3, r22	; 0x03

	uint8_t LED_Driver_Checker = NULL;
    28ac:	19 82       	std	Y+1, r1	; 0x01
		if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    28ae:	8b 81       	ldd	r24, Y+3	; 0x03
    28b0:	88 30       	cpi	r24, 0x08	; 8
    28b2:	18 f0       	brcs	.+6      	; 0x28ba <LED_Off+0x1e>
			LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    28b4:	81 e0       	ldi	r24, 0x01	; 1
    28b6:	89 83       	std	Y+1, r24	; 0x01
    28b8:	0c c0       	rjmp	.+24     	; 0x28d2 <LED_Off+0x36>
		}
		else if((port_num >= NUM_OF_PORTS)) {
    28ba:	8a 81       	ldd	r24, Y+2	; 0x02
    28bc:	84 30       	cpi	r24, 0x04	; 4
    28be:	18 f0       	brcs	.+6      	; 0x28c6 <LED_Off+0x2a>
			LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    28c0:	82 e0       	ldi	r24, 0x02	; 2
    28c2:	89 83       	std	Y+1, r24	; 0x01
    28c4:	06 c0       	rjmp	.+12     	; 0x28d2 <LED_Off+0x36>
		}
		else {
			/* Setup the pin direction as required */
			#if (LED_MODE == LED_NEGATIVE_LOGIC)
				GPIO_writePin(port_num, pin_num, LOGIC_HIGH);
    28c6:	8a 81       	ldd	r24, Y+2	; 0x02
    28c8:	6b 81       	ldd	r22, Y+3	; 0x03
    28ca:	41 e0       	ldi	r20, 0x01	; 1
    28cc:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
			#elif (LED_MODE == LED_POSITIVE_LOGIC)
				GPIO_writePin(port_num, pin_num, LOGIC_LOW);
			#endif
			LED_Driver_Checker = LED_OK;
    28d0:	19 82       	std	Y+1, r1	; 0x01
		}
		return LED_Driver_Checker;
    28d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    28d4:	0f 90       	pop	r0
    28d6:	0f 90       	pop	r0
    28d8:	0f 90       	pop	r0
    28da:	cf 91       	pop	r28
    28dc:	df 91       	pop	r29
    28de:	08 95       	ret

000028e0 <LED_Toggle>:

LED_Error_t LED_Toggle(uint8 port_num, uint8 pin_num) {
    28e0:	df 93       	push	r29
    28e2:	cf 93       	push	r28
    28e4:	00 d0       	rcall	.+0      	; 0x28e6 <LED_Toggle+0x6>
    28e6:	0f 92       	push	r0
    28e8:	cd b7       	in	r28, 0x3d	; 61
    28ea:	de b7       	in	r29, 0x3e	; 62
    28ec:	8a 83       	std	Y+2, r24	; 0x02
    28ee:	6b 83       	std	Y+3, r22	; 0x03

	uint8_t LED_Driver_Checker = NULL;
    28f0:	19 82       	std	Y+1, r1	; 0x01
		if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    28f2:	8b 81       	ldd	r24, Y+3	; 0x03
    28f4:	88 30       	cpi	r24, 0x08	; 8
    28f6:	18 f0       	brcs	.+6      	; 0x28fe <LED_Toggle+0x1e>
			LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    28f8:	81 e0       	ldi	r24, 0x01	; 1
    28fa:	89 83       	std	Y+1, r24	; 0x01
    28fc:	0b c0       	rjmp	.+22     	; 0x2914 <LED_Toggle+0x34>
		}
		else if((port_num >= NUM_OF_PORTS)) {
    28fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2900:	84 30       	cpi	r24, 0x04	; 4
    2902:	18 f0       	brcs	.+6      	; 0x290a <LED_Toggle+0x2a>
			LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    2904:	82 e0       	ldi	r24, 0x02	; 2
    2906:	89 83       	std	Y+1, r24	; 0x01
    2908:	05 c0       	rjmp	.+10     	; 0x2914 <LED_Toggle+0x34>
		}
		else {
			/* Setup the pin direction as required */
			GPIO_togglePin(port_num, pin_num);
    290a:	8a 81       	ldd	r24, Y+2	; 0x02
    290c:	6b 81       	ldd	r22, Y+3	; 0x03
    290e:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <GPIO_togglePin>
			LED_Driver_Checker = LED_OK;
    2912:	19 82       	std	Y+1, r1	; 0x01
		}
		return LED_Driver_Checker;
    2914:	89 81       	ldd	r24, Y+1	; 0x01
}
    2916:	0f 90       	pop	r0
    2918:	0f 90       	pop	r0
    291a:	0f 90       	pop	r0
    291c:	cf 91       	pop	r28
    291e:	df 91       	pop	r29
    2920:	08 95       	ret

00002922 <LCD_Init>:
#include "avr/io.h" /* To use the IO Ports Registers */
#include <util/delay.h>


// Initializes and enables the LCD Module to start functionality
void LCD_Init(void) {
    2922:	df 93       	push	r29
    2924:	cf 93       	push	r28
    2926:	cd b7       	in	r28, 0x3d	; 61
    2928:	de b7       	in	r29, 0x3e	; 62
    292a:	2e 97       	sbiw	r28, 0x0e	; 14
    292c:	0f b6       	in	r0, 0x3f	; 63
    292e:	f8 94       	cli
    2930:	de bf       	out	0x3e, r29	; 62
    2932:	0f be       	out	0x3f, r0	; 63
    2934:	cd bf       	out	0x3d, r28	; 61
	// Initialize RS Pin
	GPIO_setupPinDirection(LCD_INIT_PORT, LCD_RS, PIN_OUTPUT);
    2936:	80 e0       	ldi	r24, 0x00	; 0
    2938:	61 e0       	ldi	r22, 0x01	; 1
    293a:	41 e0       	ldi	r20, 0x01	; 1
    293c:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <GPIO_setupPinDirection>

	// Initialize Enable Pin
	GPIO_setupPinDirection(LCD_INIT_PORT, LCD_ENABLE, PIN_OUTPUT);
    2940:	80 e0       	ldi	r24, 0x00	; 0
    2942:	62 e0       	ldi	r22, 0x02	; 2
    2944:	41 e0       	ldi	r20, 0x01	; 1
    2946:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <GPIO_setupPinDirection>
    294a:	80 e0       	ldi	r24, 0x00	; 0
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	a0 ea       	ldi	r26, 0xA0	; 160
    2950:	b1 e4       	ldi	r27, 0x41	; 65
    2952:	8b 87       	std	Y+11, r24	; 0x0b
    2954:	9c 87       	std	Y+12, r25	; 0x0c
    2956:	ad 87       	std	Y+13, r26	; 0x0d
    2958:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    295a:	6b 85       	ldd	r22, Y+11	; 0x0b
    295c:	7c 85       	ldd	r23, Y+12	; 0x0c
    295e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2960:	9e 85       	ldd	r25, Y+14	; 0x0e
    2962:	20 e0       	ldi	r18, 0x00	; 0
    2964:	30 e0       	ldi	r19, 0x00	; 0
    2966:	4a e7       	ldi	r20, 0x7A	; 122
    2968:	53 e4       	ldi	r21, 0x43	; 67
    296a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    296e:	dc 01       	movw	r26, r24
    2970:	cb 01       	movw	r24, r22
    2972:	8f 83       	std	Y+7, r24	; 0x07
    2974:	98 87       	std	Y+8, r25	; 0x08
    2976:	a9 87       	std	Y+9, r26	; 0x09
    2978:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    297a:	6f 81       	ldd	r22, Y+7	; 0x07
    297c:	78 85       	ldd	r23, Y+8	; 0x08
    297e:	89 85       	ldd	r24, Y+9	; 0x09
    2980:	9a 85       	ldd	r25, Y+10	; 0x0a
    2982:	20 e0       	ldi	r18, 0x00	; 0
    2984:	30 e0       	ldi	r19, 0x00	; 0
    2986:	40 e8       	ldi	r20, 0x80	; 128
    2988:	5f e3       	ldi	r21, 0x3F	; 63
    298a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    298e:	88 23       	and	r24, r24
    2990:	2c f4       	brge	.+10     	; 0x299c <LCD_Init+0x7a>
		__ticks = 1;
    2992:	81 e0       	ldi	r24, 0x01	; 1
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	9e 83       	std	Y+6, r25	; 0x06
    2998:	8d 83       	std	Y+5, r24	; 0x05
    299a:	3f c0       	rjmp	.+126    	; 0x2a1a <LCD_Init+0xf8>
	else if (__tmp > 65535)
    299c:	6f 81       	ldd	r22, Y+7	; 0x07
    299e:	78 85       	ldd	r23, Y+8	; 0x08
    29a0:	89 85       	ldd	r24, Y+9	; 0x09
    29a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    29a4:	20 e0       	ldi	r18, 0x00	; 0
    29a6:	3f ef       	ldi	r19, 0xFF	; 255
    29a8:	4f e7       	ldi	r20, 0x7F	; 127
    29aa:	57 e4       	ldi	r21, 0x47	; 71
    29ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29b0:	18 16       	cp	r1, r24
    29b2:	4c f5       	brge	.+82     	; 0x2a06 <LCD_Init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    29b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    29b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    29ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    29bc:	20 e0       	ldi	r18, 0x00	; 0
    29be:	30 e0       	ldi	r19, 0x00	; 0
    29c0:	40 e2       	ldi	r20, 0x20	; 32
    29c2:	51 e4       	ldi	r21, 0x41	; 65
    29c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29c8:	dc 01       	movw	r26, r24
    29ca:	cb 01       	movw	r24, r22
    29cc:	bc 01       	movw	r22, r24
    29ce:	cd 01       	movw	r24, r26
    29d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d4:	dc 01       	movw	r26, r24
    29d6:	cb 01       	movw	r24, r22
    29d8:	9e 83       	std	Y+6, r25	; 0x06
    29da:	8d 83       	std	Y+5, r24	; 0x05
    29dc:	0f c0       	rjmp	.+30     	; 0x29fc <LCD_Init+0xda>
    29de:	89 e1       	ldi	r24, 0x19	; 25
    29e0:	90 e0       	ldi	r25, 0x00	; 0
    29e2:	9c 83       	std	Y+4, r25	; 0x04
    29e4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    29e6:	8b 81       	ldd	r24, Y+3	; 0x03
    29e8:	9c 81       	ldd	r25, Y+4	; 0x04
    29ea:	01 97       	sbiw	r24, 0x01	; 1
    29ec:	f1 f7       	brne	.-4      	; 0x29ea <LCD_Init+0xc8>
    29ee:	9c 83       	std	Y+4, r25	; 0x04
    29f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29f2:	8d 81       	ldd	r24, Y+5	; 0x05
    29f4:	9e 81       	ldd	r25, Y+6	; 0x06
    29f6:	01 97       	sbiw	r24, 0x01	; 1
    29f8:	9e 83       	std	Y+6, r25	; 0x06
    29fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29fc:	8d 81       	ldd	r24, Y+5	; 0x05
    29fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2a00:	00 97       	sbiw	r24, 0x00	; 0
    2a02:	69 f7       	brne	.-38     	; 0x29de <LCD_Init+0xbc>
    2a04:	14 c0       	rjmp	.+40     	; 0x2a2e <LCD_Init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a06:	6f 81       	ldd	r22, Y+7	; 0x07
    2a08:	78 85       	ldd	r23, Y+8	; 0x08
    2a0a:	89 85       	ldd	r24, Y+9	; 0x09
    2a0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a12:	dc 01       	movw	r26, r24
    2a14:	cb 01       	movw	r24, r22
    2a16:	9e 83       	std	Y+6, r25	; 0x06
    2a18:	8d 83       	std	Y+5, r24	; 0x05
    2a1a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a1c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a1e:	9a 83       	std	Y+2, r25	; 0x02
    2a20:	89 83       	std	Y+1, r24	; 0x01
    2a22:	89 81       	ldd	r24, Y+1	; 0x01
    2a24:	9a 81       	ldd	r25, Y+2	; 0x02
    2a26:	01 97       	sbiw	r24, 0x01	; 1
    2a28:	f1 f7       	brne	.-4      	; 0x2a26 <LCD_Init+0x104>
    2a2a:	9a 83       	std	Y+2, r25	; 0x02
    2a2c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);

	// Initializing Sending Commands
	// Checks which BIT Mode, 4 or 8 line bit
	if (LCD_BIT_MODE == 4) {
		GPIO_setupPinDirection(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 0), PIN_OUTPUT);
    2a2e:	80 e0       	ldi	r24, 0x00	; 0
    2a30:	63 e0       	ldi	r22, 0x03	; 3
    2a32:	41 e0       	ldi	r20, 0x01	; 1
    2a34:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 1), PIN_OUTPUT);
    2a38:	80 e0       	ldi	r24, 0x00	; 0
    2a3a:	64 e0       	ldi	r22, 0x04	; 4
    2a3c:	41 e0       	ldi	r20, 0x01	; 1
    2a3e:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 2), PIN_OUTPUT);
    2a42:	80 e0       	ldi	r24, 0x00	; 0
    2a44:	65 e0       	ldi	r22, 0x05	; 5
    2a46:	41 e0       	ldi	r20, 0x01	; 1
    2a48:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 3), PIN_OUTPUT);
    2a4c:	80 e0       	ldi	r24, 0x00	; 0
    2a4e:	66 e0       	ldi	r22, 0x06	; 6
    2a50:	41 e0       	ldi	r20, 0x01	; 1
    2a52:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <GPIO_setupPinDirection>

		LCD_sendCommand(LCD_TWO_LINE_FOUR_BIT_INIT1);
    2a56:	83 e3       	ldi	r24, 0x33	; 51
    2a58:	0e 94 43 15 	call	0x2a86	; 0x2a86 <LCD_sendCommand>
		LCD_sendCommand(LCD_TWO_LINE_FOUR_BIT_INIT2);
    2a5c:	82 e3       	ldi	r24, 0x32	; 50
    2a5e:	0e 94 43 15 	call	0x2a86	; 0x2a86 <LCD_sendCommand>
		LCD_sendCommand(LCD_TWO_LINE_FOUR_BIT);
    2a62:	88 e2       	ldi	r24, 0x28	; 40
    2a64:	0e 94 43 15 	call	0x2a86	; 0x2a86 <LCD_sendCommand>

		LCD_sendCommand(LCD_TWO_LINE_EIGHT_BIT);
	}

	// Makes the cursor off
	LCD_sendCommand(LCD_CURSOR_OFF);
    2a68:	8c e0       	ldi	r24, 0x0C	; 12
    2a6a:	0e 94 43 15 	call	0x2a86	; 0x2a86 <LCD_sendCommand>
	// Clears Display
	LCD_sendCommand(LCD_CLEAR_DISPLAY);
    2a6e:	81 e0       	ldi	r24, 0x01	; 1
    2a70:	0e 94 43 15 	call	0x2a86	; 0x2a86 <LCD_sendCommand>
}
    2a74:	2e 96       	adiw	r28, 0x0e	; 14
    2a76:	0f b6       	in	r0, 0x3f	; 63
    2a78:	f8 94       	cli
    2a7a:	de bf       	out	0x3e, r29	; 62
    2a7c:	0f be       	out	0x3f, r0	; 63
    2a7e:	cd bf       	out	0x3d, r28	; 61
    2a80:	cf 91       	pop	r28
    2a82:	df 91       	pop	r29
    2a84:	08 95       	ret

00002a86 <LCD_sendCommand>:


// Sends a command to the LCD
void LCD_sendCommand(uint8 command) {
    2a86:	0f 93       	push	r16
    2a88:	1f 93       	push	r17
    2a8a:	df 93       	push	r29
    2a8c:	cf 93       	push	r28
    2a8e:	cd b7       	in	r28, 0x3d	; 61
    2a90:	de b7       	in	r29, 0x3e	; 62
    2a92:	c3 56       	subi	r28, 0x63	; 99
    2a94:	d0 40       	sbci	r29, 0x00	; 0
    2a96:	0f b6       	in	r0, 0x3f	; 63
    2a98:	f8 94       	cli
    2a9a:	de bf       	out	0x3e, r29	; 62
    2a9c:	0f be       	out	0x3f, r0	; 63
    2a9e:	cd bf       	out	0x3d, r28	; 61
    2aa0:	fe 01       	movw	r30, r28
    2aa2:	ed 59       	subi	r30, 0x9D	; 157
    2aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa6:	80 83       	st	Z, r24
	// Set RS Pin to '0'
	GPIO_writePin(LCD_INIT_PORT, LCD_RS, LOGIC_LOW);
    2aa8:	80 e0       	ldi	r24, 0x00	; 0
    2aaa:	61 e0       	ldi	r22, 0x01	; 1
    2aac:	40 e0       	ldi	r20, 0x00	; 0
    2aae:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
    2ab2:	fe 01       	movw	r30, r28
    2ab4:	e1 5a       	subi	r30, 0xA1	; 161
    2ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab8:	80 e0       	ldi	r24, 0x00	; 0
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	a0 e8       	ldi	r26, 0x80	; 128
    2abe:	bf e3       	ldi	r27, 0x3F	; 63
    2ac0:	80 83       	st	Z, r24
    2ac2:	91 83       	std	Z+1, r25	; 0x01
    2ac4:	a2 83       	std	Z+2, r26	; 0x02
    2ac6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ac8:	8e 01       	movw	r16, r28
    2aca:	05 5a       	subi	r16, 0xA5	; 165
    2acc:	1f 4f       	sbci	r17, 0xFF	; 255
    2ace:	fe 01       	movw	r30, r28
    2ad0:	e1 5a       	subi	r30, 0xA1	; 161
    2ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad4:	60 81       	ld	r22, Z
    2ad6:	71 81       	ldd	r23, Z+1	; 0x01
    2ad8:	82 81       	ldd	r24, Z+2	; 0x02
    2ada:	93 81       	ldd	r25, Z+3	; 0x03
    2adc:	20 e0       	ldi	r18, 0x00	; 0
    2ade:	30 e0       	ldi	r19, 0x00	; 0
    2ae0:	4a e7       	ldi	r20, 0x7A	; 122
    2ae2:	53 e4       	ldi	r21, 0x43	; 67
    2ae4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae8:	dc 01       	movw	r26, r24
    2aea:	cb 01       	movw	r24, r22
    2aec:	f8 01       	movw	r30, r16
    2aee:	80 83       	st	Z, r24
    2af0:	91 83       	std	Z+1, r25	; 0x01
    2af2:	a2 83       	std	Z+2, r26	; 0x02
    2af4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2af6:	fe 01       	movw	r30, r28
    2af8:	e5 5a       	subi	r30, 0xA5	; 165
    2afa:	ff 4f       	sbci	r31, 0xFF	; 255
    2afc:	60 81       	ld	r22, Z
    2afe:	71 81       	ldd	r23, Z+1	; 0x01
    2b00:	82 81       	ldd	r24, Z+2	; 0x02
    2b02:	93 81       	ldd	r25, Z+3	; 0x03
    2b04:	20 e0       	ldi	r18, 0x00	; 0
    2b06:	30 e0       	ldi	r19, 0x00	; 0
    2b08:	40 e8       	ldi	r20, 0x80	; 128
    2b0a:	5f e3       	ldi	r21, 0x3F	; 63
    2b0c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b10:	88 23       	and	r24, r24
    2b12:	44 f4       	brge	.+16     	; 0x2b24 <LCD_sendCommand+0x9e>
		__ticks = 1;
    2b14:	fe 01       	movw	r30, r28
    2b16:	e7 5a       	subi	r30, 0xA7	; 167
    2b18:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1a:	81 e0       	ldi	r24, 0x01	; 1
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	91 83       	std	Z+1, r25	; 0x01
    2b20:	80 83       	st	Z, r24
    2b22:	64 c0       	rjmp	.+200    	; 0x2bec <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    2b24:	fe 01       	movw	r30, r28
    2b26:	e5 5a       	subi	r30, 0xA5	; 165
    2b28:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2a:	60 81       	ld	r22, Z
    2b2c:	71 81       	ldd	r23, Z+1	; 0x01
    2b2e:	82 81       	ldd	r24, Z+2	; 0x02
    2b30:	93 81       	ldd	r25, Z+3	; 0x03
    2b32:	20 e0       	ldi	r18, 0x00	; 0
    2b34:	3f ef       	ldi	r19, 0xFF	; 255
    2b36:	4f e7       	ldi	r20, 0x7F	; 127
    2b38:	57 e4       	ldi	r21, 0x47	; 71
    2b3a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b3e:	18 16       	cp	r1, r24
    2b40:	0c f0       	brlt	.+2      	; 0x2b44 <LCD_sendCommand+0xbe>
    2b42:	43 c0       	rjmp	.+134    	; 0x2bca <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b44:	fe 01       	movw	r30, r28
    2b46:	e1 5a       	subi	r30, 0xA1	; 161
    2b48:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4a:	60 81       	ld	r22, Z
    2b4c:	71 81       	ldd	r23, Z+1	; 0x01
    2b4e:	82 81       	ldd	r24, Z+2	; 0x02
    2b50:	93 81       	ldd	r25, Z+3	; 0x03
    2b52:	20 e0       	ldi	r18, 0x00	; 0
    2b54:	30 e0       	ldi	r19, 0x00	; 0
    2b56:	40 e2       	ldi	r20, 0x20	; 32
    2b58:	51 e4       	ldi	r21, 0x41	; 65
    2b5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b5e:	dc 01       	movw	r26, r24
    2b60:	cb 01       	movw	r24, r22
    2b62:	8e 01       	movw	r16, r28
    2b64:	07 5a       	subi	r16, 0xA7	; 167
    2b66:	1f 4f       	sbci	r17, 0xFF	; 255
    2b68:	bc 01       	movw	r22, r24
    2b6a:	cd 01       	movw	r24, r26
    2b6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b70:	dc 01       	movw	r26, r24
    2b72:	cb 01       	movw	r24, r22
    2b74:	f8 01       	movw	r30, r16
    2b76:	91 83       	std	Z+1, r25	; 0x01
    2b78:	80 83       	st	Z, r24
    2b7a:	1f c0       	rjmp	.+62     	; 0x2bba <LCD_sendCommand+0x134>
    2b7c:	fe 01       	movw	r30, r28
    2b7e:	e9 5a       	subi	r30, 0xA9	; 169
    2b80:	ff 4f       	sbci	r31, 0xFF	; 255
    2b82:	89 e1       	ldi	r24, 0x19	; 25
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	91 83       	std	Z+1, r25	; 0x01
    2b88:	80 83       	st	Z, r24
    2b8a:	fe 01       	movw	r30, r28
    2b8c:	e9 5a       	subi	r30, 0xA9	; 169
    2b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b90:	80 81       	ld	r24, Z
    2b92:	91 81       	ldd	r25, Z+1	; 0x01
    2b94:	01 97       	sbiw	r24, 0x01	; 1
    2b96:	f1 f7       	brne	.-4      	; 0x2b94 <LCD_sendCommand+0x10e>
    2b98:	fe 01       	movw	r30, r28
    2b9a:	e9 5a       	subi	r30, 0xA9	; 169
    2b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9e:	91 83       	std	Z+1, r25	; 0x01
    2ba0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ba2:	de 01       	movw	r26, r28
    2ba4:	a7 5a       	subi	r26, 0xA7	; 167
    2ba6:	bf 4f       	sbci	r27, 0xFF	; 255
    2ba8:	fe 01       	movw	r30, r28
    2baa:	e7 5a       	subi	r30, 0xA7	; 167
    2bac:	ff 4f       	sbci	r31, 0xFF	; 255
    2bae:	80 81       	ld	r24, Z
    2bb0:	91 81       	ldd	r25, Z+1	; 0x01
    2bb2:	01 97       	sbiw	r24, 0x01	; 1
    2bb4:	11 96       	adiw	r26, 0x01	; 1
    2bb6:	9c 93       	st	X, r25
    2bb8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bba:	fe 01       	movw	r30, r28
    2bbc:	e7 5a       	subi	r30, 0xA7	; 167
    2bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc0:	80 81       	ld	r24, Z
    2bc2:	91 81       	ldd	r25, Z+1	; 0x01
    2bc4:	00 97       	sbiw	r24, 0x00	; 0
    2bc6:	d1 f6       	brne	.-76     	; 0x2b7c <LCD_sendCommand+0xf6>
    2bc8:	27 c0       	rjmp	.+78     	; 0x2c18 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bca:	8e 01       	movw	r16, r28
    2bcc:	07 5a       	subi	r16, 0xA7	; 167
    2bce:	1f 4f       	sbci	r17, 0xFF	; 255
    2bd0:	fe 01       	movw	r30, r28
    2bd2:	e5 5a       	subi	r30, 0xA5	; 165
    2bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd6:	60 81       	ld	r22, Z
    2bd8:	71 81       	ldd	r23, Z+1	; 0x01
    2bda:	82 81       	ldd	r24, Z+2	; 0x02
    2bdc:	93 81       	ldd	r25, Z+3	; 0x03
    2bde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2be2:	dc 01       	movw	r26, r24
    2be4:	cb 01       	movw	r24, r22
    2be6:	f8 01       	movw	r30, r16
    2be8:	91 83       	std	Z+1, r25	; 0x01
    2bea:	80 83       	st	Z, r24
    2bec:	de 01       	movw	r26, r28
    2bee:	ab 5a       	subi	r26, 0xAB	; 171
    2bf0:	bf 4f       	sbci	r27, 0xFF	; 255
    2bf2:	fe 01       	movw	r30, r28
    2bf4:	e7 5a       	subi	r30, 0xA7	; 167
    2bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf8:	80 81       	ld	r24, Z
    2bfa:	91 81       	ldd	r25, Z+1	; 0x01
    2bfc:	8d 93       	st	X+, r24
    2bfe:	9c 93       	st	X, r25
    2c00:	fe 01       	movw	r30, r28
    2c02:	eb 5a       	subi	r30, 0xAB	; 171
    2c04:	ff 4f       	sbci	r31, 0xFF	; 255
    2c06:	80 81       	ld	r24, Z
    2c08:	91 81       	ldd	r25, Z+1	; 0x01
    2c0a:	01 97       	sbiw	r24, 0x01	; 1
    2c0c:	f1 f7       	brne	.-4      	; 0x2c0a <LCD_sendCommand+0x184>
    2c0e:	fe 01       	movw	r30, r28
    2c10:	eb 5a       	subi	r30, 0xAB	; 171
    2c12:	ff 4f       	sbci	r31, 0xFF	; 255
    2c14:	91 83       	std	Z+1, r25	; 0x01
    2c16:	80 83       	st	Z, r24
	_delay_ms(1);

	// Set Enable Pin to '1'
	GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
    2c18:	80 e0       	ldi	r24, 0x00	; 0
    2c1a:	62 e0       	ldi	r22, 0x02	; 2
    2c1c:	41 e0       	ldi	r20, 0x01	; 1
    2c1e:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
    2c22:	fe 01       	movw	r30, r28
    2c24:	ef 5a       	subi	r30, 0xAF	; 175
    2c26:	ff 4f       	sbci	r31, 0xFF	; 255
    2c28:	80 e0       	ldi	r24, 0x00	; 0
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	a0 e8       	ldi	r26, 0x80	; 128
    2c2e:	bf e3       	ldi	r27, 0x3F	; 63
    2c30:	80 83       	st	Z, r24
    2c32:	91 83       	std	Z+1, r25	; 0x01
    2c34:	a2 83       	std	Z+2, r26	; 0x02
    2c36:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c38:	8e 01       	movw	r16, r28
    2c3a:	03 5b       	subi	r16, 0xB3	; 179
    2c3c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c3e:	fe 01       	movw	r30, r28
    2c40:	ef 5a       	subi	r30, 0xAF	; 175
    2c42:	ff 4f       	sbci	r31, 0xFF	; 255
    2c44:	60 81       	ld	r22, Z
    2c46:	71 81       	ldd	r23, Z+1	; 0x01
    2c48:	82 81       	ldd	r24, Z+2	; 0x02
    2c4a:	93 81       	ldd	r25, Z+3	; 0x03
    2c4c:	20 e0       	ldi	r18, 0x00	; 0
    2c4e:	30 e0       	ldi	r19, 0x00	; 0
    2c50:	4a e7       	ldi	r20, 0x7A	; 122
    2c52:	53 e4       	ldi	r21, 0x43	; 67
    2c54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c58:	dc 01       	movw	r26, r24
    2c5a:	cb 01       	movw	r24, r22
    2c5c:	f8 01       	movw	r30, r16
    2c5e:	80 83       	st	Z, r24
    2c60:	91 83       	std	Z+1, r25	; 0x01
    2c62:	a2 83       	std	Z+2, r26	; 0x02
    2c64:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c66:	fe 01       	movw	r30, r28
    2c68:	e3 5b       	subi	r30, 0xB3	; 179
    2c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6c:	60 81       	ld	r22, Z
    2c6e:	71 81       	ldd	r23, Z+1	; 0x01
    2c70:	82 81       	ldd	r24, Z+2	; 0x02
    2c72:	93 81       	ldd	r25, Z+3	; 0x03
    2c74:	20 e0       	ldi	r18, 0x00	; 0
    2c76:	30 e0       	ldi	r19, 0x00	; 0
    2c78:	40 e8       	ldi	r20, 0x80	; 128
    2c7a:	5f e3       	ldi	r21, 0x3F	; 63
    2c7c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c80:	88 23       	and	r24, r24
    2c82:	44 f4       	brge	.+16     	; 0x2c94 <LCD_sendCommand+0x20e>
		__ticks = 1;
    2c84:	fe 01       	movw	r30, r28
    2c86:	e5 5b       	subi	r30, 0xB5	; 181
    2c88:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8a:	81 e0       	ldi	r24, 0x01	; 1
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	91 83       	std	Z+1, r25	; 0x01
    2c90:	80 83       	st	Z, r24
    2c92:	64 c0       	rjmp	.+200    	; 0x2d5c <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    2c94:	fe 01       	movw	r30, r28
    2c96:	e3 5b       	subi	r30, 0xB3	; 179
    2c98:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9a:	60 81       	ld	r22, Z
    2c9c:	71 81       	ldd	r23, Z+1	; 0x01
    2c9e:	82 81       	ldd	r24, Z+2	; 0x02
    2ca0:	93 81       	ldd	r25, Z+3	; 0x03
    2ca2:	20 e0       	ldi	r18, 0x00	; 0
    2ca4:	3f ef       	ldi	r19, 0xFF	; 255
    2ca6:	4f e7       	ldi	r20, 0x7F	; 127
    2ca8:	57 e4       	ldi	r21, 0x47	; 71
    2caa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cae:	18 16       	cp	r1, r24
    2cb0:	0c f0       	brlt	.+2      	; 0x2cb4 <LCD_sendCommand+0x22e>
    2cb2:	43 c0       	rjmp	.+134    	; 0x2d3a <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cb4:	fe 01       	movw	r30, r28
    2cb6:	ef 5a       	subi	r30, 0xAF	; 175
    2cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cba:	60 81       	ld	r22, Z
    2cbc:	71 81       	ldd	r23, Z+1	; 0x01
    2cbe:	82 81       	ldd	r24, Z+2	; 0x02
    2cc0:	93 81       	ldd	r25, Z+3	; 0x03
    2cc2:	20 e0       	ldi	r18, 0x00	; 0
    2cc4:	30 e0       	ldi	r19, 0x00	; 0
    2cc6:	40 e2       	ldi	r20, 0x20	; 32
    2cc8:	51 e4       	ldi	r21, 0x41	; 65
    2cca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cce:	dc 01       	movw	r26, r24
    2cd0:	cb 01       	movw	r24, r22
    2cd2:	8e 01       	movw	r16, r28
    2cd4:	05 5b       	subi	r16, 0xB5	; 181
    2cd6:	1f 4f       	sbci	r17, 0xFF	; 255
    2cd8:	bc 01       	movw	r22, r24
    2cda:	cd 01       	movw	r24, r26
    2cdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ce0:	dc 01       	movw	r26, r24
    2ce2:	cb 01       	movw	r24, r22
    2ce4:	f8 01       	movw	r30, r16
    2ce6:	91 83       	std	Z+1, r25	; 0x01
    2ce8:	80 83       	st	Z, r24
    2cea:	1f c0       	rjmp	.+62     	; 0x2d2a <LCD_sendCommand+0x2a4>
    2cec:	fe 01       	movw	r30, r28
    2cee:	e7 5b       	subi	r30, 0xB7	; 183
    2cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf2:	89 e1       	ldi	r24, 0x19	; 25
    2cf4:	90 e0       	ldi	r25, 0x00	; 0
    2cf6:	91 83       	std	Z+1, r25	; 0x01
    2cf8:	80 83       	st	Z, r24
    2cfa:	fe 01       	movw	r30, r28
    2cfc:	e7 5b       	subi	r30, 0xB7	; 183
    2cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2d00:	80 81       	ld	r24, Z
    2d02:	91 81       	ldd	r25, Z+1	; 0x01
    2d04:	01 97       	sbiw	r24, 0x01	; 1
    2d06:	f1 f7       	brne	.-4      	; 0x2d04 <LCD_sendCommand+0x27e>
    2d08:	fe 01       	movw	r30, r28
    2d0a:	e7 5b       	subi	r30, 0xB7	; 183
    2d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0e:	91 83       	std	Z+1, r25	; 0x01
    2d10:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d12:	de 01       	movw	r26, r28
    2d14:	a5 5b       	subi	r26, 0xB5	; 181
    2d16:	bf 4f       	sbci	r27, 0xFF	; 255
    2d18:	fe 01       	movw	r30, r28
    2d1a:	e5 5b       	subi	r30, 0xB5	; 181
    2d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1e:	80 81       	ld	r24, Z
    2d20:	91 81       	ldd	r25, Z+1	; 0x01
    2d22:	01 97       	sbiw	r24, 0x01	; 1
    2d24:	11 96       	adiw	r26, 0x01	; 1
    2d26:	9c 93       	st	X, r25
    2d28:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d2a:	fe 01       	movw	r30, r28
    2d2c:	e5 5b       	subi	r30, 0xB5	; 181
    2d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d30:	80 81       	ld	r24, Z
    2d32:	91 81       	ldd	r25, Z+1	; 0x01
    2d34:	00 97       	sbiw	r24, 0x00	; 0
    2d36:	d1 f6       	brne	.-76     	; 0x2cec <LCD_sendCommand+0x266>
    2d38:	27 c0       	rjmp	.+78     	; 0x2d88 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d3a:	8e 01       	movw	r16, r28
    2d3c:	05 5b       	subi	r16, 0xB5	; 181
    2d3e:	1f 4f       	sbci	r17, 0xFF	; 255
    2d40:	fe 01       	movw	r30, r28
    2d42:	e3 5b       	subi	r30, 0xB3	; 179
    2d44:	ff 4f       	sbci	r31, 0xFF	; 255
    2d46:	60 81       	ld	r22, Z
    2d48:	71 81       	ldd	r23, Z+1	; 0x01
    2d4a:	82 81       	ldd	r24, Z+2	; 0x02
    2d4c:	93 81       	ldd	r25, Z+3	; 0x03
    2d4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d52:	dc 01       	movw	r26, r24
    2d54:	cb 01       	movw	r24, r22
    2d56:	f8 01       	movw	r30, r16
    2d58:	91 83       	std	Z+1, r25	; 0x01
    2d5a:	80 83       	st	Z, r24
    2d5c:	de 01       	movw	r26, r28
    2d5e:	a9 5b       	subi	r26, 0xB9	; 185
    2d60:	bf 4f       	sbci	r27, 0xFF	; 255
    2d62:	fe 01       	movw	r30, r28
    2d64:	e5 5b       	subi	r30, 0xB5	; 181
    2d66:	ff 4f       	sbci	r31, 0xFF	; 255
    2d68:	80 81       	ld	r24, Z
    2d6a:	91 81       	ldd	r25, Z+1	; 0x01
    2d6c:	8d 93       	st	X+, r24
    2d6e:	9c 93       	st	X, r25
    2d70:	fe 01       	movw	r30, r28
    2d72:	e9 5b       	subi	r30, 0xB9	; 185
    2d74:	ff 4f       	sbci	r31, 0xFF	; 255
    2d76:	80 81       	ld	r24, Z
    2d78:	91 81       	ldd	r25, Z+1	; 0x01
    2d7a:	01 97       	sbiw	r24, 0x01	; 1
    2d7c:	f1 f7       	brne	.-4      	; 0x2d7a <LCD_sendCommand+0x2f4>
    2d7e:	fe 01       	movw	r30, r28
    2d80:	e9 5b       	subi	r30, 0xB9	; 185
    2d82:	ff 4f       	sbci	r31, 0xFF	; 255
    2d84:	91 83       	std	Z+1, r25	; 0x01
    2d86:	80 83       	st	Z, r24
	_delay_ms(1);

	// Inserts the command in the assigned PORT to be sent to the LCD
	// uint8 BIT_MODE;
	if (LCD_BIT_MODE == 4) {
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 0), GET_BIT( command, 4 ));
    2d88:	fe 01       	movw	r30, r28
    2d8a:	ed 59       	subi	r30, 0x9D	; 157
    2d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8e:	80 81       	ld	r24, Z
    2d90:	82 95       	swap	r24
    2d92:	8f 70       	andi	r24, 0x0F	; 15
    2d94:	98 2f       	mov	r25, r24
    2d96:	91 70       	andi	r25, 0x01	; 1
    2d98:	80 e0       	ldi	r24, 0x00	; 0
    2d9a:	63 e0       	ldi	r22, 0x03	; 3
    2d9c:	49 2f       	mov	r20, r25
    2d9e:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 1), GET_BIT( command, 5 ));
    2da2:	fe 01       	movw	r30, r28
    2da4:	ed 59       	subi	r30, 0x9D	; 157
    2da6:	ff 4f       	sbci	r31, 0xFF	; 255
    2da8:	80 81       	ld	r24, Z
    2daa:	82 95       	swap	r24
    2dac:	86 95       	lsr	r24
    2dae:	87 70       	andi	r24, 0x07	; 7
    2db0:	98 2f       	mov	r25, r24
    2db2:	91 70       	andi	r25, 0x01	; 1
    2db4:	80 e0       	ldi	r24, 0x00	; 0
    2db6:	64 e0       	ldi	r22, 0x04	; 4
    2db8:	49 2f       	mov	r20, r25
    2dba:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 2), GET_BIT( command, 6 ));
    2dbe:	fe 01       	movw	r30, r28
    2dc0:	ed 59       	subi	r30, 0x9D	; 157
    2dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc4:	80 81       	ld	r24, Z
    2dc6:	82 95       	swap	r24
    2dc8:	86 95       	lsr	r24
    2dca:	86 95       	lsr	r24
    2dcc:	83 70       	andi	r24, 0x03	; 3
    2dce:	98 2f       	mov	r25, r24
    2dd0:	91 70       	andi	r25, 0x01	; 1
    2dd2:	80 e0       	ldi	r24, 0x00	; 0
    2dd4:	65 e0       	ldi	r22, 0x05	; 5
    2dd6:	49 2f       	mov	r20, r25
    2dd8:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 3), GET_BIT( command, 7 ));
    2ddc:	fe 01       	movw	r30, r28
    2dde:	ed 59       	subi	r30, 0x9D	; 157
    2de0:	ff 4f       	sbci	r31, 0xFF	; 255
    2de2:	80 81       	ld	r24, Z
    2de4:	98 2f       	mov	r25, r24
    2de6:	99 1f       	adc	r25, r25
    2de8:	99 27       	eor	r25, r25
    2dea:	99 1f       	adc	r25, r25
    2dec:	80 e0       	ldi	r24, 0x00	; 0
    2dee:	66 e0       	ldi	r22, 0x06	; 6
    2df0:	49 2f       	mov	r20, r25
    2df2:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
    2df6:	fe 01       	movw	r30, r28
    2df8:	ed 5b       	subi	r30, 0xBD	; 189
    2dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfc:	80 e0       	ldi	r24, 0x00	; 0
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	a0 e8       	ldi	r26, 0x80	; 128
    2e02:	bf e3       	ldi	r27, 0x3F	; 63
    2e04:	80 83       	st	Z, r24
    2e06:	91 83       	std	Z+1, r25	; 0x01
    2e08:	a2 83       	std	Z+2, r26	; 0x02
    2e0a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e0c:	8e 01       	movw	r16, r28
    2e0e:	01 5c       	subi	r16, 0xC1	; 193
    2e10:	1f 4f       	sbci	r17, 0xFF	; 255
    2e12:	fe 01       	movw	r30, r28
    2e14:	ed 5b       	subi	r30, 0xBD	; 189
    2e16:	ff 4f       	sbci	r31, 0xFF	; 255
    2e18:	60 81       	ld	r22, Z
    2e1a:	71 81       	ldd	r23, Z+1	; 0x01
    2e1c:	82 81       	ldd	r24, Z+2	; 0x02
    2e1e:	93 81       	ldd	r25, Z+3	; 0x03
    2e20:	20 e0       	ldi	r18, 0x00	; 0
    2e22:	30 e0       	ldi	r19, 0x00	; 0
    2e24:	4a e7       	ldi	r20, 0x7A	; 122
    2e26:	53 e4       	ldi	r21, 0x43	; 67
    2e28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e2c:	dc 01       	movw	r26, r24
    2e2e:	cb 01       	movw	r24, r22
    2e30:	f8 01       	movw	r30, r16
    2e32:	80 83       	st	Z, r24
    2e34:	91 83       	std	Z+1, r25	; 0x01
    2e36:	a2 83       	std	Z+2, r26	; 0x02
    2e38:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e3a:	fe 01       	movw	r30, r28
    2e3c:	ff 96       	adiw	r30, 0x3f	; 63
    2e3e:	60 81       	ld	r22, Z
    2e40:	71 81       	ldd	r23, Z+1	; 0x01
    2e42:	82 81       	ldd	r24, Z+2	; 0x02
    2e44:	93 81       	ldd	r25, Z+3	; 0x03
    2e46:	20 e0       	ldi	r18, 0x00	; 0
    2e48:	30 e0       	ldi	r19, 0x00	; 0
    2e4a:	40 e8       	ldi	r20, 0x80	; 128
    2e4c:	5f e3       	ldi	r21, 0x3F	; 63
    2e4e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e52:	88 23       	and	r24, r24
    2e54:	2c f4       	brge	.+10     	; 0x2e60 <LCD_sendCommand+0x3da>
		__ticks = 1;
    2e56:	81 e0       	ldi	r24, 0x01	; 1
    2e58:	90 e0       	ldi	r25, 0x00	; 0
    2e5a:	9e af       	std	Y+62, r25	; 0x3e
    2e5c:	8d af       	std	Y+61, r24	; 0x3d
    2e5e:	46 c0       	rjmp	.+140    	; 0x2eec <LCD_sendCommand+0x466>
	else if (__tmp > 65535)
    2e60:	fe 01       	movw	r30, r28
    2e62:	ff 96       	adiw	r30, 0x3f	; 63
    2e64:	60 81       	ld	r22, Z
    2e66:	71 81       	ldd	r23, Z+1	; 0x01
    2e68:	82 81       	ldd	r24, Z+2	; 0x02
    2e6a:	93 81       	ldd	r25, Z+3	; 0x03
    2e6c:	20 e0       	ldi	r18, 0x00	; 0
    2e6e:	3f ef       	ldi	r19, 0xFF	; 255
    2e70:	4f e7       	ldi	r20, 0x7F	; 127
    2e72:	57 e4       	ldi	r21, 0x47	; 71
    2e74:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e78:	18 16       	cp	r1, r24
    2e7a:	64 f5       	brge	.+88     	; 0x2ed4 <LCD_sendCommand+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e7c:	fe 01       	movw	r30, r28
    2e7e:	ed 5b       	subi	r30, 0xBD	; 189
    2e80:	ff 4f       	sbci	r31, 0xFF	; 255
    2e82:	60 81       	ld	r22, Z
    2e84:	71 81       	ldd	r23, Z+1	; 0x01
    2e86:	82 81       	ldd	r24, Z+2	; 0x02
    2e88:	93 81       	ldd	r25, Z+3	; 0x03
    2e8a:	20 e0       	ldi	r18, 0x00	; 0
    2e8c:	30 e0       	ldi	r19, 0x00	; 0
    2e8e:	40 e2       	ldi	r20, 0x20	; 32
    2e90:	51 e4       	ldi	r21, 0x41	; 65
    2e92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e96:	dc 01       	movw	r26, r24
    2e98:	cb 01       	movw	r24, r22
    2e9a:	bc 01       	movw	r22, r24
    2e9c:	cd 01       	movw	r24, r26
    2e9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ea2:	dc 01       	movw	r26, r24
    2ea4:	cb 01       	movw	r24, r22
    2ea6:	9e af       	std	Y+62, r25	; 0x3e
    2ea8:	8d af       	std	Y+61, r24	; 0x3d
    2eaa:	0f c0       	rjmp	.+30     	; 0x2eca <LCD_sendCommand+0x444>
    2eac:	89 e1       	ldi	r24, 0x19	; 25
    2eae:	90 e0       	ldi	r25, 0x00	; 0
    2eb0:	9c af       	std	Y+60, r25	; 0x3c
    2eb2:	8b af       	std	Y+59, r24	; 0x3b
    2eb4:	8b ad       	ldd	r24, Y+59	; 0x3b
    2eb6:	9c ad       	ldd	r25, Y+60	; 0x3c
    2eb8:	01 97       	sbiw	r24, 0x01	; 1
    2eba:	f1 f7       	brne	.-4      	; 0x2eb8 <LCD_sendCommand+0x432>
    2ebc:	9c af       	std	Y+60, r25	; 0x3c
    2ebe:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ec0:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ec2:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ec4:	01 97       	sbiw	r24, 0x01	; 1
    2ec6:	9e af       	std	Y+62, r25	; 0x3e
    2ec8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eca:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ecc:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ece:	00 97       	sbiw	r24, 0x00	; 0
    2ed0:	69 f7       	brne	.-38     	; 0x2eac <LCD_sendCommand+0x426>
    2ed2:	16 c0       	rjmp	.+44     	; 0x2f00 <LCD_sendCommand+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ed4:	fe 01       	movw	r30, r28
    2ed6:	ff 96       	adiw	r30, 0x3f	; 63
    2ed8:	60 81       	ld	r22, Z
    2eda:	71 81       	ldd	r23, Z+1	; 0x01
    2edc:	82 81       	ldd	r24, Z+2	; 0x02
    2ede:	93 81       	ldd	r25, Z+3	; 0x03
    2ee0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ee4:	dc 01       	movw	r26, r24
    2ee6:	cb 01       	movw	r24, r22
    2ee8:	9e af       	std	Y+62, r25	; 0x3e
    2eea:	8d af       	std	Y+61, r24	; 0x3d
    2eec:	8d ad       	ldd	r24, Y+61	; 0x3d
    2eee:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ef0:	9a af       	std	Y+58, r25	; 0x3a
    2ef2:	89 af       	std	Y+57, r24	; 0x39
    2ef4:	89 ad       	ldd	r24, Y+57	; 0x39
    2ef6:	9a ad       	ldd	r25, Y+58	; 0x3a
    2ef8:	01 97       	sbiw	r24, 0x01	; 1
    2efa:	f1 f7       	brne	.-4      	; 0x2ef8 <LCD_sendCommand+0x472>
    2efc:	9a af       	std	Y+58, r25	; 0x3a
    2efe:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(1);

		// Clear Enable Pin to '0'
		GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
    2f00:	80 e0       	ldi	r24, 0x00	; 0
    2f02:	62 e0       	ldi	r22, 0x02	; 2
    2f04:	40 e0       	ldi	r20, 0x00	; 0
    2f06:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
    2f0a:	80 e0       	ldi	r24, 0x00	; 0
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	a0 e8       	ldi	r26, 0x80	; 128
    2f10:	bf e3       	ldi	r27, 0x3F	; 63
    2f12:	8d ab       	std	Y+53, r24	; 0x35
    2f14:	9e ab       	std	Y+54, r25	; 0x36
    2f16:	af ab       	std	Y+55, r26	; 0x37
    2f18:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f1a:	6d a9       	ldd	r22, Y+53	; 0x35
    2f1c:	7e a9       	ldd	r23, Y+54	; 0x36
    2f1e:	8f a9       	ldd	r24, Y+55	; 0x37
    2f20:	98 ad       	ldd	r25, Y+56	; 0x38
    2f22:	20 e0       	ldi	r18, 0x00	; 0
    2f24:	30 e0       	ldi	r19, 0x00	; 0
    2f26:	4a e7       	ldi	r20, 0x7A	; 122
    2f28:	53 e4       	ldi	r21, 0x43	; 67
    2f2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f2e:	dc 01       	movw	r26, r24
    2f30:	cb 01       	movw	r24, r22
    2f32:	89 ab       	std	Y+49, r24	; 0x31
    2f34:	9a ab       	std	Y+50, r25	; 0x32
    2f36:	ab ab       	std	Y+51, r26	; 0x33
    2f38:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2f3a:	69 a9       	ldd	r22, Y+49	; 0x31
    2f3c:	7a a9       	ldd	r23, Y+50	; 0x32
    2f3e:	8b a9       	ldd	r24, Y+51	; 0x33
    2f40:	9c a9       	ldd	r25, Y+52	; 0x34
    2f42:	20 e0       	ldi	r18, 0x00	; 0
    2f44:	30 e0       	ldi	r19, 0x00	; 0
    2f46:	40 e8       	ldi	r20, 0x80	; 128
    2f48:	5f e3       	ldi	r21, 0x3F	; 63
    2f4a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f4e:	88 23       	and	r24, r24
    2f50:	2c f4       	brge	.+10     	; 0x2f5c <LCD_sendCommand+0x4d6>
		__ticks = 1;
    2f52:	81 e0       	ldi	r24, 0x01	; 1
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	98 ab       	std	Y+48, r25	; 0x30
    2f58:	8f a7       	std	Y+47, r24	; 0x2f
    2f5a:	3f c0       	rjmp	.+126    	; 0x2fda <LCD_sendCommand+0x554>
	else if (__tmp > 65535)
    2f5c:	69 a9       	ldd	r22, Y+49	; 0x31
    2f5e:	7a a9       	ldd	r23, Y+50	; 0x32
    2f60:	8b a9       	ldd	r24, Y+51	; 0x33
    2f62:	9c a9       	ldd	r25, Y+52	; 0x34
    2f64:	20 e0       	ldi	r18, 0x00	; 0
    2f66:	3f ef       	ldi	r19, 0xFF	; 255
    2f68:	4f e7       	ldi	r20, 0x7F	; 127
    2f6a:	57 e4       	ldi	r21, 0x47	; 71
    2f6c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f70:	18 16       	cp	r1, r24
    2f72:	4c f5       	brge	.+82     	; 0x2fc6 <LCD_sendCommand+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f74:	6d a9       	ldd	r22, Y+53	; 0x35
    2f76:	7e a9       	ldd	r23, Y+54	; 0x36
    2f78:	8f a9       	ldd	r24, Y+55	; 0x37
    2f7a:	98 ad       	ldd	r25, Y+56	; 0x38
    2f7c:	20 e0       	ldi	r18, 0x00	; 0
    2f7e:	30 e0       	ldi	r19, 0x00	; 0
    2f80:	40 e2       	ldi	r20, 0x20	; 32
    2f82:	51 e4       	ldi	r21, 0x41	; 65
    2f84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f88:	dc 01       	movw	r26, r24
    2f8a:	cb 01       	movw	r24, r22
    2f8c:	bc 01       	movw	r22, r24
    2f8e:	cd 01       	movw	r24, r26
    2f90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f94:	dc 01       	movw	r26, r24
    2f96:	cb 01       	movw	r24, r22
    2f98:	98 ab       	std	Y+48, r25	; 0x30
    2f9a:	8f a7       	std	Y+47, r24	; 0x2f
    2f9c:	0f c0       	rjmp	.+30     	; 0x2fbc <LCD_sendCommand+0x536>
    2f9e:	89 e1       	ldi	r24, 0x19	; 25
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	9e a7       	std	Y+46, r25	; 0x2e
    2fa4:	8d a7       	std	Y+45, r24	; 0x2d
    2fa6:	8d a5       	ldd	r24, Y+45	; 0x2d
    2fa8:	9e a5       	ldd	r25, Y+46	; 0x2e
    2faa:	01 97       	sbiw	r24, 0x01	; 1
    2fac:	f1 f7       	brne	.-4      	; 0x2faa <LCD_sendCommand+0x524>
    2fae:	9e a7       	std	Y+46, r25	; 0x2e
    2fb0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fb2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fb4:	98 a9       	ldd	r25, Y+48	; 0x30
    2fb6:	01 97       	sbiw	r24, 0x01	; 1
    2fb8:	98 ab       	std	Y+48, r25	; 0x30
    2fba:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fbc:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fbe:	98 a9       	ldd	r25, Y+48	; 0x30
    2fc0:	00 97       	sbiw	r24, 0x00	; 0
    2fc2:	69 f7       	brne	.-38     	; 0x2f9e <LCD_sendCommand+0x518>
    2fc4:	14 c0       	rjmp	.+40     	; 0x2fee <LCD_sendCommand+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fc6:	69 a9       	ldd	r22, Y+49	; 0x31
    2fc8:	7a a9       	ldd	r23, Y+50	; 0x32
    2fca:	8b a9       	ldd	r24, Y+51	; 0x33
    2fcc:	9c a9       	ldd	r25, Y+52	; 0x34
    2fce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd2:	dc 01       	movw	r26, r24
    2fd4:	cb 01       	movw	r24, r22
    2fd6:	98 ab       	std	Y+48, r25	; 0x30
    2fd8:	8f a7       	std	Y+47, r24	; 0x2f
    2fda:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fdc:	98 a9       	ldd	r25, Y+48	; 0x30
    2fde:	9c a7       	std	Y+44, r25	; 0x2c
    2fe0:	8b a7       	std	Y+43, r24	; 0x2b
    2fe2:	8b a5       	ldd	r24, Y+43	; 0x2b
    2fe4:	9c a5       	ldd	r25, Y+44	; 0x2c
    2fe6:	01 97       	sbiw	r24, 0x01	; 1
    2fe8:	f1 f7       	brne	.-4      	; 0x2fe6 <LCD_sendCommand+0x560>
    2fea:	9c a7       	std	Y+44, r25	; 0x2c
    2fec:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1); /* delay for processing Th = 13ns */

		// Set Enable Pin to '1'
		GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
    2fee:	80 e0       	ldi	r24, 0x00	; 0
    2ff0:	62 e0       	ldi	r22, 0x02	; 2
    2ff2:	41 e0       	ldi	r20, 0x01	; 1
    2ff4:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
    2ff8:	80 e0       	ldi	r24, 0x00	; 0
    2ffa:	90 e0       	ldi	r25, 0x00	; 0
    2ffc:	a0 e8       	ldi	r26, 0x80	; 128
    2ffe:	bf e3       	ldi	r27, 0x3F	; 63
    3000:	8f a3       	std	Y+39, r24	; 0x27
    3002:	98 a7       	std	Y+40, r25	; 0x28
    3004:	a9 a7       	std	Y+41, r26	; 0x29
    3006:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3008:	6f a1       	ldd	r22, Y+39	; 0x27
    300a:	78 a5       	ldd	r23, Y+40	; 0x28
    300c:	89 a5       	ldd	r24, Y+41	; 0x29
    300e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3010:	20 e0       	ldi	r18, 0x00	; 0
    3012:	30 e0       	ldi	r19, 0x00	; 0
    3014:	4a e7       	ldi	r20, 0x7A	; 122
    3016:	53 e4       	ldi	r21, 0x43	; 67
    3018:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    301c:	dc 01       	movw	r26, r24
    301e:	cb 01       	movw	r24, r22
    3020:	8b a3       	std	Y+35, r24	; 0x23
    3022:	9c a3       	std	Y+36, r25	; 0x24
    3024:	ad a3       	std	Y+37, r26	; 0x25
    3026:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3028:	6b a1       	ldd	r22, Y+35	; 0x23
    302a:	7c a1       	ldd	r23, Y+36	; 0x24
    302c:	8d a1       	ldd	r24, Y+37	; 0x25
    302e:	9e a1       	ldd	r25, Y+38	; 0x26
    3030:	20 e0       	ldi	r18, 0x00	; 0
    3032:	30 e0       	ldi	r19, 0x00	; 0
    3034:	40 e8       	ldi	r20, 0x80	; 128
    3036:	5f e3       	ldi	r21, 0x3F	; 63
    3038:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    303c:	88 23       	and	r24, r24
    303e:	2c f4       	brge	.+10     	; 0x304a <LCD_sendCommand+0x5c4>
		__ticks = 1;
    3040:	81 e0       	ldi	r24, 0x01	; 1
    3042:	90 e0       	ldi	r25, 0x00	; 0
    3044:	9a a3       	std	Y+34, r25	; 0x22
    3046:	89 a3       	std	Y+33, r24	; 0x21
    3048:	3f c0       	rjmp	.+126    	; 0x30c8 <LCD_sendCommand+0x642>
	else if (__tmp > 65535)
    304a:	6b a1       	ldd	r22, Y+35	; 0x23
    304c:	7c a1       	ldd	r23, Y+36	; 0x24
    304e:	8d a1       	ldd	r24, Y+37	; 0x25
    3050:	9e a1       	ldd	r25, Y+38	; 0x26
    3052:	20 e0       	ldi	r18, 0x00	; 0
    3054:	3f ef       	ldi	r19, 0xFF	; 255
    3056:	4f e7       	ldi	r20, 0x7F	; 127
    3058:	57 e4       	ldi	r21, 0x47	; 71
    305a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    305e:	18 16       	cp	r1, r24
    3060:	4c f5       	brge	.+82     	; 0x30b4 <LCD_sendCommand+0x62e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3062:	6f a1       	ldd	r22, Y+39	; 0x27
    3064:	78 a5       	ldd	r23, Y+40	; 0x28
    3066:	89 a5       	ldd	r24, Y+41	; 0x29
    3068:	9a a5       	ldd	r25, Y+42	; 0x2a
    306a:	20 e0       	ldi	r18, 0x00	; 0
    306c:	30 e0       	ldi	r19, 0x00	; 0
    306e:	40 e2       	ldi	r20, 0x20	; 32
    3070:	51 e4       	ldi	r21, 0x41	; 65
    3072:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3076:	dc 01       	movw	r26, r24
    3078:	cb 01       	movw	r24, r22
    307a:	bc 01       	movw	r22, r24
    307c:	cd 01       	movw	r24, r26
    307e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3082:	dc 01       	movw	r26, r24
    3084:	cb 01       	movw	r24, r22
    3086:	9a a3       	std	Y+34, r25	; 0x22
    3088:	89 a3       	std	Y+33, r24	; 0x21
    308a:	0f c0       	rjmp	.+30     	; 0x30aa <LCD_sendCommand+0x624>
    308c:	89 e1       	ldi	r24, 0x19	; 25
    308e:	90 e0       	ldi	r25, 0x00	; 0
    3090:	98 a3       	std	Y+32, r25	; 0x20
    3092:	8f 8f       	std	Y+31, r24	; 0x1f
    3094:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3096:	98 a1       	ldd	r25, Y+32	; 0x20
    3098:	01 97       	sbiw	r24, 0x01	; 1
    309a:	f1 f7       	brne	.-4      	; 0x3098 <LCD_sendCommand+0x612>
    309c:	98 a3       	std	Y+32, r25	; 0x20
    309e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30a0:	89 a1       	ldd	r24, Y+33	; 0x21
    30a2:	9a a1       	ldd	r25, Y+34	; 0x22
    30a4:	01 97       	sbiw	r24, 0x01	; 1
    30a6:	9a a3       	std	Y+34, r25	; 0x22
    30a8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30aa:	89 a1       	ldd	r24, Y+33	; 0x21
    30ac:	9a a1       	ldd	r25, Y+34	; 0x22
    30ae:	00 97       	sbiw	r24, 0x00	; 0
    30b0:	69 f7       	brne	.-38     	; 0x308c <LCD_sendCommand+0x606>
    30b2:	14 c0       	rjmp	.+40     	; 0x30dc <LCD_sendCommand+0x656>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30b4:	6b a1       	ldd	r22, Y+35	; 0x23
    30b6:	7c a1       	ldd	r23, Y+36	; 0x24
    30b8:	8d a1       	ldd	r24, Y+37	; 0x25
    30ba:	9e a1       	ldd	r25, Y+38	; 0x26
    30bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30c0:	dc 01       	movw	r26, r24
    30c2:	cb 01       	movw	r24, r22
    30c4:	9a a3       	std	Y+34, r25	; 0x22
    30c6:	89 a3       	std	Y+33, r24	; 0x21
    30c8:	89 a1       	ldd	r24, Y+33	; 0x21
    30ca:	9a a1       	ldd	r25, Y+34	; 0x22
    30cc:	9e 8f       	std	Y+30, r25	; 0x1e
    30ce:	8d 8f       	std	Y+29, r24	; 0x1d
    30d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30d2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    30d4:	01 97       	sbiw	r24, 0x01	; 1
    30d6:	f1 f7       	brne	.-4      	; 0x30d4 <LCD_sendCommand+0x64e>
    30d8:	9e 8f       	std	Y+30, r25	; 0x1e
    30da:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 0), GET_BIT( command, 0 ));
    30dc:	fe 01       	movw	r30, r28
    30de:	ed 59       	subi	r30, 0x9D	; 157
    30e0:	ff 4f       	sbci	r31, 0xFF	; 255
    30e2:	80 81       	ld	r24, Z
    30e4:	98 2f       	mov	r25, r24
    30e6:	91 70       	andi	r25, 0x01	; 1
    30e8:	80 e0       	ldi	r24, 0x00	; 0
    30ea:	63 e0       	ldi	r22, 0x03	; 3
    30ec:	49 2f       	mov	r20, r25
    30ee:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 1), GET_BIT( command, 1 ));
    30f2:	fe 01       	movw	r30, r28
    30f4:	ed 59       	subi	r30, 0x9D	; 157
    30f6:	ff 4f       	sbci	r31, 0xFF	; 255
    30f8:	80 81       	ld	r24, Z
    30fa:	86 95       	lsr	r24
    30fc:	98 2f       	mov	r25, r24
    30fe:	91 70       	andi	r25, 0x01	; 1
    3100:	80 e0       	ldi	r24, 0x00	; 0
    3102:	64 e0       	ldi	r22, 0x04	; 4
    3104:	49 2f       	mov	r20, r25
    3106:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 2), GET_BIT( command, 2 ));
    310a:	fe 01       	movw	r30, r28
    310c:	ed 59       	subi	r30, 0x9D	; 157
    310e:	ff 4f       	sbci	r31, 0xFF	; 255
    3110:	80 81       	ld	r24, Z
    3112:	86 95       	lsr	r24
    3114:	86 95       	lsr	r24
    3116:	98 2f       	mov	r25, r24
    3118:	91 70       	andi	r25, 0x01	; 1
    311a:	80 e0       	ldi	r24, 0x00	; 0
    311c:	65 e0       	ldi	r22, 0x05	; 5
    311e:	49 2f       	mov	r20, r25
    3120:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 3), GET_BIT( command, 3 ));
    3124:	fe 01       	movw	r30, r28
    3126:	ed 59       	subi	r30, 0x9D	; 157
    3128:	ff 4f       	sbci	r31, 0xFF	; 255
    312a:	80 81       	ld	r24, Z
    312c:	86 95       	lsr	r24
    312e:	86 95       	lsr	r24
    3130:	86 95       	lsr	r24
    3132:	98 2f       	mov	r25, r24
    3134:	91 70       	andi	r25, 0x01	; 1
    3136:	80 e0       	ldi	r24, 0x00	; 0
    3138:	66 e0       	ldi	r22, 0x06	; 6
    313a:	49 2f       	mov	r20, r25
    313c:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
    3140:	80 e0       	ldi	r24, 0x00	; 0
    3142:	90 e0       	ldi	r25, 0x00	; 0
    3144:	a0 e8       	ldi	r26, 0x80	; 128
    3146:	bf e3       	ldi	r27, 0x3F	; 63
    3148:	89 8f       	std	Y+25, r24	; 0x19
    314a:	9a 8f       	std	Y+26, r25	; 0x1a
    314c:	ab 8f       	std	Y+27, r26	; 0x1b
    314e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3150:	69 8d       	ldd	r22, Y+25	; 0x19
    3152:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3154:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3156:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3158:	20 e0       	ldi	r18, 0x00	; 0
    315a:	30 e0       	ldi	r19, 0x00	; 0
    315c:	4a e7       	ldi	r20, 0x7A	; 122
    315e:	53 e4       	ldi	r21, 0x43	; 67
    3160:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3164:	dc 01       	movw	r26, r24
    3166:	cb 01       	movw	r24, r22
    3168:	8d 8b       	std	Y+21, r24	; 0x15
    316a:	9e 8b       	std	Y+22, r25	; 0x16
    316c:	af 8b       	std	Y+23, r26	; 0x17
    316e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3170:	6d 89       	ldd	r22, Y+21	; 0x15
    3172:	7e 89       	ldd	r23, Y+22	; 0x16
    3174:	8f 89       	ldd	r24, Y+23	; 0x17
    3176:	98 8d       	ldd	r25, Y+24	; 0x18
    3178:	20 e0       	ldi	r18, 0x00	; 0
    317a:	30 e0       	ldi	r19, 0x00	; 0
    317c:	40 e8       	ldi	r20, 0x80	; 128
    317e:	5f e3       	ldi	r21, 0x3F	; 63
    3180:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3184:	88 23       	and	r24, r24
    3186:	2c f4       	brge	.+10     	; 0x3192 <LCD_sendCommand+0x70c>
		__ticks = 1;
    3188:	81 e0       	ldi	r24, 0x01	; 1
    318a:	90 e0       	ldi	r25, 0x00	; 0
    318c:	9c 8b       	std	Y+20, r25	; 0x14
    318e:	8b 8b       	std	Y+19, r24	; 0x13
    3190:	3f c0       	rjmp	.+126    	; 0x3210 <LCD_sendCommand+0x78a>
	else if (__tmp > 65535)
    3192:	6d 89       	ldd	r22, Y+21	; 0x15
    3194:	7e 89       	ldd	r23, Y+22	; 0x16
    3196:	8f 89       	ldd	r24, Y+23	; 0x17
    3198:	98 8d       	ldd	r25, Y+24	; 0x18
    319a:	20 e0       	ldi	r18, 0x00	; 0
    319c:	3f ef       	ldi	r19, 0xFF	; 255
    319e:	4f e7       	ldi	r20, 0x7F	; 127
    31a0:	57 e4       	ldi	r21, 0x47	; 71
    31a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31a6:	18 16       	cp	r1, r24
    31a8:	4c f5       	brge	.+82     	; 0x31fc <LCD_sendCommand+0x776>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31aa:	69 8d       	ldd	r22, Y+25	; 0x19
    31ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31b2:	20 e0       	ldi	r18, 0x00	; 0
    31b4:	30 e0       	ldi	r19, 0x00	; 0
    31b6:	40 e2       	ldi	r20, 0x20	; 32
    31b8:	51 e4       	ldi	r21, 0x41	; 65
    31ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31be:	dc 01       	movw	r26, r24
    31c0:	cb 01       	movw	r24, r22
    31c2:	bc 01       	movw	r22, r24
    31c4:	cd 01       	movw	r24, r26
    31c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ca:	dc 01       	movw	r26, r24
    31cc:	cb 01       	movw	r24, r22
    31ce:	9c 8b       	std	Y+20, r25	; 0x14
    31d0:	8b 8b       	std	Y+19, r24	; 0x13
    31d2:	0f c0       	rjmp	.+30     	; 0x31f2 <LCD_sendCommand+0x76c>
    31d4:	89 e1       	ldi	r24, 0x19	; 25
    31d6:	90 e0       	ldi	r25, 0x00	; 0
    31d8:	9a 8b       	std	Y+18, r25	; 0x12
    31da:	89 8b       	std	Y+17, r24	; 0x11
    31dc:	89 89       	ldd	r24, Y+17	; 0x11
    31de:	9a 89       	ldd	r25, Y+18	; 0x12
    31e0:	01 97       	sbiw	r24, 0x01	; 1
    31e2:	f1 f7       	brne	.-4      	; 0x31e0 <LCD_sendCommand+0x75a>
    31e4:	9a 8b       	std	Y+18, r25	; 0x12
    31e6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31e8:	8b 89       	ldd	r24, Y+19	; 0x13
    31ea:	9c 89       	ldd	r25, Y+20	; 0x14
    31ec:	01 97       	sbiw	r24, 0x01	; 1
    31ee:	9c 8b       	std	Y+20, r25	; 0x14
    31f0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31f2:	8b 89       	ldd	r24, Y+19	; 0x13
    31f4:	9c 89       	ldd	r25, Y+20	; 0x14
    31f6:	00 97       	sbiw	r24, 0x00	; 0
    31f8:	69 f7       	brne	.-38     	; 0x31d4 <LCD_sendCommand+0x74e>
    31fa:	14 c0       	rjmp	.+40     	; 0x3224 <LCD_sendCommand+0x79e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31fc:	6d 89       	ldd	r22, Y+21	; 0x15
    31fe:	7e 89       	ldd	r23, Y+22	; 0x16
    3200:	8f 89       	ldd	r24, Y+23	; 0x17
    3202:	98 8d       	ldd	r25, Y+24	; 0x18
    3204:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3208:	dc 01       	movw	r26, r24
    320a:	cb 01       	movw	r24, r22
    320c:	9c 8b       	std	Y+20, r25	; 0x14
    320e:	8b 8b       	std	Y+19, r24	; 0x13
    3210:	8b 89       	ldd	r24, Y+19	; 0x13
    3212:	9c 89       	ldd	r25, Y+20	; 0x14
    3214:	98 8b       	std	Y+16, r25	; 0x10
    3216:	8f 87       	std	Y+15, r24	; 0x0f
    3218:	8f 85       	ldd	r24, Y+15	; 0x0f
    321a:	98 89       	ldd	r25, Y+16	; 0x10
    321c:	01 97       	sbiw	r24, 0x01	; 1
    321e:	f1 f7       	brne	.-4      	; 0x321c <LCD_sendCommand+0x796>
    3220:	98 8b       	std	Y+16, r25	; 0x10
    3222:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1); /* delay for processing Tdsw = 100ns */

		// Clear Enable Pin to '0'
		GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
    3224:	80 e0       	ldi	r24, 0x00	; 0
    3226:	62 e0       	ldi	r22, 0x02	; 2
    3228:	40 e0       	ldi	r20, 0x00	; 0
    322a:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
    322e:	80 e0       	ldi	r24, 0x00	; 0
    3230:	90 e0       	ldi	r25, 0x00	; 0
    3232:	a0 e8       	ldi	r26, 0x80	; 128
    3234:	bf e3       	ldi	r27, 0x3F	; 63
    3236:	8b 87       	std	Y+11, r24	; 0x0b
    3238:	9c 87       	std	Y+12, r25	; 0x0c
    323a:	ad 87       	std	Y+13, r26	; 0x0d
    323c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    323e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3240:	7c 85       	ldd	r23, Y+12	; 0x0c
    3242:	8d 85       	ldd	r24, Y+13	; 0x0d
    3244:	9e 85       	ldd	r25, Y+14	; 0x0e
    3246:	20 e0       	ldi	r18, 0x00	; 0
    3248:	30 e0       	ldi	r19, 0x00	; 0
    324a:	4a e7       	ldi	r20, 0x7A	; 122
    324c:	53 e4       	ldi	r21, 0x43	; 67
    324e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3252:	dc 01       	movw	r26, r24
    3254:	cb 01       	movw	r24, r22
    3256:	8f 83       	std	Y+7, r24	; 0x07
    3258:	98 87       	std	Y+8, r25	; 0x08
    325a:	a9 87       	std	Y+9, r26	; 0x09
    325c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    325e:	6f 81       	ldd	r22, Y+7	; 0x07
    3260:	78 85       	ldd	r23, Y+8	; 0x08
    3262:	89 85       	ldd	r24, Y+9	; 0x09
    3264:	9a 85       	ldd	r25, Y+10	; 0x0a
    3266:	20 e0       	ldi	r18, 0x00	; 0
    3268:	30 e0       	ldi	r19, 0x00	; 0
    326a:	40 e8       	ldi	r20, 0x80	; 128
    326c:	5f e3       	ldi	r21, 0x3F	; 63
    326e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3272:	88 23       	and	r24, r24
    3274:	2c f4       	brge	.+10     	; 0x3280 <LCD_sendCommand+0x7fa>
		__ticks = 1;
    3276:	81 e0       	ldi	r24, 0x01	; 1
    3278:	90 e0       	ldi	r25, 0x00	; 0
    327a:	9e 83       	std	Y+6, r25	; 0x06
    327c:	8d 83       	std	Y+5, r24	; 0x05
    327e:	3f c0       	rjmp	.+126    	; 0x32fe <LCD_sendCommand+0x878>
	else if (__tmp > 65535)
    3280:	6f 81       	ldd	r22, Y+7	; 0x07
    3282:	78 85       	ldd	r23, Y+8	; 0x08
    3284:	89 85       	ldd	r24, Y+9	; 0x09
    3286:	9a 85       	ldd	r25, Y+10	; 0x0a
    3288:	20 e0       	ldi	r18, 0x00	; 0
    328a:	3f ef       	ldi	r19, 0xFF	; 255
    328c:	4f e7       	ldi	r20, 0x7F	; 127
    328e:	57 e4       	ldi	r21, 0x47	; 71
    3290:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3294:	18 16       	cp	r1, r24
    3296:	4c f5       	brge	.+82     	; 0x32ea <LCD_sendCommand+0x864>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3298:	6b 85       	ldd	r22, Y+11	; 0x0b
    329a:	7c 85       	ldd	r23, Y+12	; 0x0c
    329c:	8d 85       	ldd	r24, Y+13	; 0x0d
    329e:	9e 85       	ldd	r25, Y+14	; 0x0e
    32a0:	20 e0       	ldi	r18, 0x00	; 0
    32a2:	30 e0       	ldi	r19, 0x00	; 0
    32a4:	40 e2       	ldi	r20, 0x20	; 32
    32a6:	51 e4       	ldi	r21, 0x41	; 65
    32a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32ac:	dc 01       	movw	r26, r24
    32ae:	cb 01       	movw	r24, r22
    32b0:	bc 01       	movw	r22, r24
    32b2:	cd 01       	movw	r24, r26
    32b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32b8:	dc 01       	movw	r26, r24
    32ba:	cb 01       	movw	r24, r22
    32bc:	9e 83       	std	Y+6, r25	; 0x06
    32be:	8d 83       	std	Y+5, r24	; 0x05
    32c0:	0f c0       	rjmp	.+30     	; 0x32e0 <LCD_sendCommand+0x85a>
    32c2:	89 e1       	ldi	r24, 0x19	; 25
    32c4:	90 e0       	ldi	r25, 0x00	; 0
    32c6:	9c 83       	std	Y+4, r25	; 0x04
    32c8:	8b 83       	std	Y+3, r24	; 0x03
    32ca:	8b 81       	ldd	r24, Y+3	; 0x03
    32cc:	9c 81       	ldd	r25, Y+4	; 0x04
    32ce:	01 97       	sbiw	r24, 0x01	; 1
    32d0:	f1 f7       	brne	.-4      	; 0x32ce <LCD_sendCommand+0x848>
    32d2:	9c 83       	std	Y+4, r25	; 0x04
    32d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32d6:	8d 81       	ldd	r24, Y+5	; 0x05
    32d8:	9e 81       	ldd	r25, Y+6	; 0x06
    32da:	01 97       	sbiw	r24, 0x01	; 1
    32dc:	9e 83       	std	Y+6, r25	; 0x06
    32de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32e0:	8d 81       	ldd	r24, Y+5	; 0x05
    32e2:	9e 81       	ldd	r25, Y+6	; 0x06
    32e4:	00 97       	sbiw	r24, 0x00	; 0
    32e6:	69 f7       	brne	.-38     	; 0x32c2 <LCD_sendCommand+0x83c>
    32e8:	14 c0       	rjmp	.+40     	; 0x3312 <LCD_sendCommand+0x88c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32ea:	6f 81       	ldd	r22, Y+7	; 0x07
    32ec:	78 85       	ldd	r23, Y+8	; 0x08
    32ee:	89 85       	ldd	r24, Y+9	; 0x09
    32f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    32f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32f6:	dc 01       	movw	r26, r24
    32f8:	cb 01       	movw	r24, r22
    32fa:	9e 83       	std	Y+6, r25	; 0x06
    32fc:	8d 83       	std	Y+5, r24	; 0x05
    32fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3300:	9e 81       	ldd	r25, Y+6	; 0x06
    3302:	9a 83       	std	Y+2, r25	; 0x02
    3304:	89 83       	std	Y+1, r24	; 0x01
    3306:	89 81       	ldd	r24, Y+1	; 0x01
    3308:	9a 81       	ldd	r25, Y+2	; 0x02
    330a:	01 97       	sbiw	r24, 0x01	; 1
    330c:	f1 f7       	brne	.-4      	; 0x330a <LCD_sendCommand+0x884>
    330e:	9a 83       	std	Y+2, r25	; 0x02
    3310:	89 83       	std	Y+1, r24	; 0x01

		// Clear Enable Pin to '0'
		GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
		_delay_ms(1); /* delay for processing Th = 13ns */
	}
}
    3312:	cd 59       	subi	r28, 0x9D	; 157
    3314:	df 4f       	sbci	r29, 0xFF	; 255
    3316:	0f b6       	in	r0, 0x3f	; 63
    3318:	f8 94       	cli
    331a:	de bf       	out	0x3e, r29	; 62
    331c:	0f be       	out	0x3f, r0	; 63
    331e:	cd bf       	out	0x3d, r28	; 61
    3320:	cf 91       	pop	r28
    3322:	df 91       	pop	r29
    3324:	1f 91       	pop	r17
    3326:	0f 91       	pop	r16
    3328:	08 95       	ret

0000332a <LCD_displayCharacter>:


// Displays a character on the LCD
void LCD_displayCharacter(uint8 data) {
    332a:	0f 93       	push	r16
    332c:	1f 93       	push	r17
    332e:	df 93       	push	r29
    3330:	cf 93       	push	r28
    3332:	cd b7       	in	r28, 0x3d	; 61
    3334:	de b7       	in	r29, 0x3e	; 62
    3336:	c3 56       	subi	r28, 0x63	; 99
    3338:	d0 40       	sbci	r29, 0x00	; 0
    333a:	0f b6       	in	r0, 0x3f	; 63
    333c:	f8 94       	cli
    333e:	de bf       	out	0x3e, r29	; 62
    3340:	0f be       	out	0x3f, r0	; 63
    3342:	cd bf       	out	0x3d, r28	; 61
    3344:	fe 01       	movw	r30, r28
    3346:	ed 59       	subi	r30, 0x9D	; 157
    3348:	ff 4f       	sbci	r31, 0xFF	; 255
    334a:	80 83       	st	Z, r24
	// Set RS Pin to '1'
	GPIO_writePin(LCD_INIT_PORT, LCD_RS, LOGIC_HIGH);
    334c:	80 e0       	ldi	r24, 0x00	; 0
    334e:	61 e0       	ldi	r22, 0x01	; 1
    3350:	41 e0       	ldi	r20, 0x01	; 1
    3352:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
    3356:	fe 01       	movw	r30, r28
    3358:	e1 5a       	subi	r30, 0xA1	; 161
    335a:	ff 4f       	sbci	r31, 0xFF	; 255
    335c:	80 e0       	ldi	r24, 0x00	; 0
    335e:	90 e0       	ldi	r25, 0x00	; 0
    3360:	a0 e8       	ldi	r26, 0x80	; 128
    3362:	bf e3       	ldi	r27, 0x3F	; 63
    3364:	80 83       	st	Z, r24
    3366:	91 83       	std	Z+1, r25	; 0x01
    3368:	a2 83       	std	Z+2, r26	; 0x02
    336a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    336c:	8e 01       	movw	r16, r28
    336e:	05 5a       	subi	r16, 0xA5	; 165
    3370:	1f 4f       	sbci	r17, 0xFF	; 255
    3372:	fe 01       	movw	r30, r28
    3374:	e1 5a       	subi	r30, 0xA1	; 161
    3376:	ff 4f       	sbci	r31, 0xFF	; 255
    3378:	60 81       	ld	r22, Z
    337a:	71 81       	ldd	r23, Z+1	; 0x01
    337c:	82 81       	ldd	r24, Z+2	; 0x02
    337e:	93 81       	ldd	r25, Z+3	; 0x03
    3380:	20 e0       	ldi	r18, 0x00	; 0
    3382:	30 e0       	ldi	r19, 0x00	; 0
    3384:	4a e7       	ldi	r20, 0x7A	; 122
    3386:	53 e4       	ldi	r21, 0x43	; 67
    3388:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    338c:	dc 01       	movw	r26, r24
    338e:	cb 01       	movw	r24, r22
    3390:	f8 01       	movw	r30, r16
    3392:	80 83       	st	Z, r24
    3394:	91 83       	std	Z+1, r25	; 0x01
    3396:	a2 83       	std	Z+2, r26	; 0x02
    3398:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    339a:	fe 01       	movw	r30, r28
    339c:	e5 5a       	subi	r30, 0xA5	; 165
    339e:	ff 4f       	sbci	r31, 0xFF	; 255
    33a0:	60 81       	ld	r22, Z
    33a2:	71 81       	ldd	r23, Z+1	; 0x01
    33a4:	82 81       	ldd	r24, Z+2	; 0x02
    33a6:	93 81       	ldd	r25, Z+3	; 0x03
    33a8:	20 e0       	ldi	r18, 0x00	; 0
    33aa:	30 e0       	ldi	r19, 0x00	; 0
    33ac:	40 e8       	ldi	r20, 0x80	; 128
    33ae:	5f e3       	ldi	r21, 0x3F	; 63
    33b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33b4:	88 23       	and	r24, r24
    33b6:	44 f4       	brge	.+16     	; 0x33c8 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    33b8:	fe 01       	movw	r30, r28
    33ba:	e7 5a       	subi	r30, 0xA7	; 167
    33bc:	ff 4f       	sbci	r31, 0xFF	; 255
    33be:	81 e0       	ldi	r24, 0x01	; 1
    33c0:	90 e0       	ldi	r25, 0x00	; 0
    33c2:	91 83       	std	Z+1, r25	; 0x01
    33c4:	80 83       	st	Z, r24
    33c6:	64 c0       	rjmp	.+200    	; 0x3490 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    33c8:	fe 01       	movw	r30, r28
    33ca:	e5 5a       	subi	r30, 0xA5	; 165
    33cc:	ff 4f       	sbci	r31, 0xFF	; 255
    33ce:	60 81       	ld	r22, Z
    33d0:	71 81       	ldd	r23, Z+1	; 0x01
    33d2:	82 81       	ldd	r24, Z+2	; 0x02
    33d4:	93 81       	ldd	r25, Z+3	; 0x03
    33d6:	20 e0       	ldi	r18, 0x00	; 0
    33d8:	3f ef       	ldi	r19, 0xFF	; 255
    33da:	4f e7       	ldi	r20, 0x7F	; 127
    33dc:	57 e4       	ldi	r21, 0x47	; 71
    33de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33e2:	18 16       	cp	r1, r24
    33e4:	0c f0       	brlt	.+2      	; 0x33e8 <LCD_displayCharacter+0xbe>
    33e6:	43 c0       	rjmp	.+134    	; 0x346e <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33e8:	fe 01       	movw	r30, r28
    33ea:	e1 5a       	subi	r30, 0xA1	; 161
    33ec:	ff 4f       	sbci	r31, 0xFF	; 255
    33ee:	60 81       	ld	r22, Z
    33f0:	71 81       	ldd	r23, Z+1	; 0x01
    33f2:	82 81       	ldd	r24, Z+2	; 0x02
    33f4:	93 81       	ldd	r25, Z+3	; 0x03
    33f6:	20 e0       	ldi	r18, 0x00	; 0
    33f8:	30 e0       	ldi	r19, 0x00	; 0
    33fa:	40 e2       	ldi	r20, 0x20	; 32
    33fc:	51 e4       	ldi	r21, 0x41	; 65
    33fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3402:	dc 01       	movw	r26, r24
    3404:	cb 01       	movw	r24, r22
    3406:	8e 01       	movw	r16, r28
    3408:	07 5a       	subi	r16, 0xA7	; 167
    340a:	1f 4f       	sbci	r17, 0xFF	; 255
    340c:	bc 01       	movw	r22, r24
    340e:	cd 01       	movw	r24, r26
    3410:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3414:	dc 01       	movw	r26, r24
    3416:	cb 01       	movw	r24, r22
    3418:	f8 01       	movw	r30, r16
    341a:	91 83       	std	Z+1, r25	; 0x01
    341c:	80 83       	st	Z, r24
    341e:	1f c0       	rjmp	.+62     	; 0x345e <LCD_displayCharacter+0x134>
    3420:	fe 01       	movw	r30, r28
    3422:	e9 5a       	subi	r30, 0xA9	; 169
    3424:	ff 4f       	sbci	r31, 0xFF	; 255
    3426:	89 e1       	ldi	r24, 0x19	; 25
    3428:	90 e0       	ldi	r25, 0x00	; 0
    342a:	91 83       	std	Z+1, r25	; 0x01
    342c:	80 83       	st	Z, r24
    342e:	fe 01       	movw	r30, r28
    3430:	e9 5a       	subi	r30, 0xA9	; 169
    3432:	ff 4f       	sbci	r31, 0xFF	; 255
    3434:	80 81       	ld	r24, Z
    3436:	91 81       	ldd	r25, Z+1	; 0x01
    3438:	01 97       	sbiw	r24, 0x01	; 1
    343a:	f1 f7       	brne	.-4      	; 0x3438 <LCD_displayCharacter+0x10e>
    343c:	fe 01       	movw	r30, r28
    343e:	e9 5a       	subi	r30, 0xA9	; 169
    3440:	ff 4f       	sbci	r31, 0xFF	; 255
    3442:	91 83       	std	Z+1, r25	; 0x01
    3444:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3446:	de 01       	movw	r26, r28
    3448:	a7 5a       	subi	r26, 0xA7	; 167
    344a:	bf 4f       	sbci	r27, 0xFF	; 255
    344c:	fe 01       	movw	r30, r28
    344e:	e7 5a       	subi	r30, 0xA7	; 167
    3450:	ff 4f       	sbci	r31, 0xFF	; 255
    3452:	80 81       	ld	r24, Z
    3454:	91 81       	ldd	r25, Z+1	; 0x01
    3456:	01 97       	sbiw	r24, 0x01	; 1
    3458:	11 96       	adiw	r26, 0x01	; 1
    345a:	9c 93       	st	X, r25
    345c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    345e:	fe 01       	movw	r30, r28
    3460:	e7 5a       	subi	r30, 0xA7	; 167
    3462:	ff 4f       	sbci	r31, 0xFF	; 255
    3464:	80 81       	ld	r24, Z
    3466:	91 81       	ldd	r25, Z+1	; 0x01
    3468:	00 97       	sbiw	r24, 0x00	; 0
    346a:	d1 f6       	brne	.-76     	; 0x3420 <LCD_displayCharacter+0xf6>
    346c:	27 c0       	rjmp	.+78     	; 0x34bc <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    346e:	8e 01       	movw	r16, r28
    3470:	07 5a       	subi	r16, 0xA7	; 167
    3472:	1f 4f       	sbci	r17, 0xFF	; 255
    3474:	fe 01       	movw	r30, r28
    3476:	e5 5a       	subi	r30, 0xA5	; 165
    3478:	ff 4f       	sbci	r31, 0xFF	; 255
    347a:	60 81       	ld	r22, Z
    347c:	71 81       	ldd	r23, Z+1	; 0x01
    347e:	82 81       	ldd	r24, Z+2	; 0x02
    3480:	93 81       	ldd	r25, Z+3	; 0x03
    3482:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3486:	dc 01       	movw	r26, r24
    3488:	cb 01       	movw	r24, r22
    348a:	f8 01       	movw	r30, r16
    348c:	91 83       	std	Z+1, r25	; 0x01
    348e:	80 83       	st	Z, r24
    3490:	de 01       	movw	r26, r28
    3492:	ab 5a       	subi	r26, 0xAB	; 171
    3494:	bf 4f       	sbci	r27, 0xFF	; 255
    3496:	fe 01       	movw	r30, r28
    3498:	e7 5a       	subi	r30, 0xA7	; 167
    349a:	ff 4f       	sbci	r31, 0xFF	; 255
    349c:	80 81       	ld	r24, Z
    349e:	91 81       	ldd	r25, Z+1	; 0x01
    34a0:	8d 93       	st	X+, r24
    34a2:	9c 93       	st	X, r25
    34a4:	fe 01       	movw	r30, r28
    34a6:	eb 5a       	subi	r30, 0xAB	; 171
    34a8:	ff 4f       	sbci	r31, 0xFF	; 255
    34aa:	80 81       	ld	r24, Z
    34ac:	91 81       	ldd	r25, Z+1	; 0x01
    34ae:	01 97       	sbiw	r24, 0x01	; 1
    34b0:	f1 f7       	brne	.-4      	; 0x34ae <LCD_displayCharacter+0x184>
    34b2:	fe 01       	movw	r30, r28
    34b4:	eb 5a       	subi	r30, 0xAB	; 171
    34b6:	ff 4f       	sbci	r31, 0xFF	; 255
    34b8:	91 83       	std	Z+1, r25	; 0x01
    34ba:	80 83       	st	Z, r24
	_delay_ms(1);

	// Set Enable Pin to '1'
	GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
    34bc:	80 e0       	ldi	r24, 0x00	; 0
    34be:	62 e0       	ldi	r22, 0x02	; 2
    34c0:	41 e0       	ldi	r20, 0x01	; 1
    34c2:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
    34c6:	fe 01       	movw	r30, r28
    34c8:	ef 5a       	subi	r30, 0xAF	; 175
    34ca:	ff 4f       	sbci	r31, 0xFF	; 255
    34cc:	80 e0       	ldi	r24, 0x00	; 0
    34ce:	90 e0       	ldi	r25, 0x00	; 0
    34d0:	a0 e8       	ldi	r26, 0x80	; 128
    34d2:	bf e3       	ldi	r27, 0x3F	; 63
    34d4:	80 83       	st	Z, r24
    34d6:	91 83       	std	Z+1, r25	; 0x01
    34d8:	a2 83       	std	Z+2, r26	; 0x02
    34da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34dc:	8e 01       	movw	r16, r28
    34de:	03 5b       	subi	r16, 0xB3	; 179
    34e0:	1f 4f       	sbci	r17, 0xFF	; 255
    34e2:	fe 01       	movw	r30, r28
    34e4:	ef 5a       	subi	r30, 0xAF	; 175
    34e6:	ff 4f       	sbci	r31, 0xFF	; 255
    34e8:	60 81       	ld	r22, Z
    34ea:	71 81       	ldd	r23, Z+1	; 0x01
    34ec:	82 81       	ldd	r24, Z+2	; 0x02
    34ee:	93 81       	ldd	r25, Z+3	; 0x03
    34f0:	20 e0       	ldi	r18, 0x00	; 0
    34f2:	30 e0       	ldi	r19, 0x00	; 0
    34f4:	4a e7       	ldi	r20, 0x7A	; 122
    34f6:	53 e4       	ldi	r21, 0x43	; 67
    34f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34fc:	dc 01       	movw	r26, r24
    34fe:	cb 01       	movw	r24, r22
    3500:	f8 01       	movw	r30, r16
    3502:	80 83       	st	Z, r24
    3504:	91 83       	std	Z+1, r25	; 0x01
    3506:	a2 83       	std	Z+2, r26	; 0x02
    3508:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    350a:	fe 01       	movw	r30, r28
    350c:	e3 5b       	subi	r30, 0xB3	; 179
    350e:	ff 4f       	sbci	r31, 0xFF	; 255
    3510:	60 81       	ld	r22, Z
    3512:	71 81       	ldd	r23, Z+1	; 0x01
    3514:	82 81       	ldd	r24, Z+2	; 0x02
    3516:	93 81       	ldd	r25, Z+3	; 0x03
    3518:	20 e0       	ldi	r18, 0x00	; 0
    351a:	30 e0       	ldi	r19, 0x00	; 0
    351c:	40 e8       	ldi	r20, 0x80	; 128
    351e:	5f e3       	ldi	r21, 0x3F	; 63
    3520:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3524:	88 23       	and	r24, r24
    3526:	44 f4       	brge	.+16     	; 0x3538 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    3528:	fe 01       	movw	r30, r28
    352a:	e5 5b       	subi	r30, 0xB5	; 181
    352c:	ff 4f       	sbci	r31, 0xFF	; 255
    352e:	81 e0       	ldi	r24, 0x01	; 1
    3530:	90 e0       	ldi	r25, 0x00	; 0
    3532:	91 83       	std	Z+1, r25	; 0x01
    3534:	80 83       	st	Z, r24
    3536:	64 c0       	rjmp	.+200    	; 0x3600 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    3538:	fe 01       	movw	r30, r28
    353a:	e3 5b       	subi	r30, 0xB3	; 179
    353c:	ff 4f       	sbci	r31, 0xFF	; 255
    353e:	60 81       	ld	r22, Z
    3540:	71 81       	ldd	r23, Z+1	; 0x01
    3542:	82 81       	ldd	r24, Z+2	; 0x02
    3544:	93 81       	ldd	r25, Z+3	; 0x03
    3546:	20 e0       	ldi	r18, 0x00	; 0
    3548:	3f ef       	ldi	r19, 0xFF	; 255
    354a:	4f e7       	ldi	r20, 0x7F	; 127
    354c:	57 e4       	ldi	r21, 0x47	; 71
    354e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3552:	18 16       	cp	r1, r24
    3554:	0c f0       	brlt	.+2      	; 0x3558 <LCD_displayCharacter+0x22e>
    3556:	43 c0       	rjmp	.+134    	; 0x35de <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3558:	fe 01       	movw	r30, r28
    355a:	ef 5a       	subi	r30, 0xAF	; 175
    355c:	ff 4f       	sbci	r31, 0xFF	; 255
    355e:	60 81       	ld	r22, Z
    3560:	71 81       	ldd	r23, Z+1	; 0x01
    3562:	82 81       	ldd	r24, Z+2	; 0x02
    3564:	93 81       	ldd	r25, Z+3	; 0x03
    3566:	20 e0       	ldi	r18, 0x00	; 0
    3568:	30 e0       	ldi	r19, 0x00	; 0
    356a:	40 e2       	ldi	r20, 0x20	; 32
    356c:	51 e4       	ldi	r21, 0x41	; 65
    356e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3572:	dc 01       	movw	r26, r24
    3574:	cb 01       	movw	r24, r22
    3576:	8e 01       	movw	r16, r28
    3578:	05 5b       	subi	r16, 0xB5	; 181
    357a:	1f 4f       	sbci	r17, 0xFF	; 255
    357c:	bc 01       	movw	r22, r24
    357e:	cd 01       	movw	r24, r26
    3580:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3584:	dc 01       	movw	r26, r24
    3586:	cb 01       	movw	r24, r22
    3588:	f8 01       	movw	r30, r16
    358a:	91 83       	std	Z+1, r25	; 0x01
    358c:	80 83       	st	Z, r24
    358e:	1f c0       	rjmp	.+62     	; 0x35ce <LCD_displayCharacter+0x2a4>
    3590:	fe 01       	movw	r30, r28
    3592:	e7 5b       	subi	r30, 0xB7	; 183
    3594:	ff 4f       	sbci	r31, 0xFF	; 255
    3596:	89 e1       	ldi	r24, 0x19	; 25
    3598:	90 e0       	ldi	r25, 0x00	; 0
    359a:	91 83       	std	Z+1, r25	; 0x01
    359c:	80 83       	st	Z, r24
    359e:	fe 01       	movw	r30, r28
    35a0:	e7 5b       	subi	r30, 0xB7	; 183
    35a2:	ff 4f       	sbci	r31, 0xFF	; 255
    35a4:	80 81       	ld	r24, Z
    35a6:	91 81       	ldd	r25, Z+1	; 0x01
    35a8:	01 97       	sbiw	r24, 0x01	; 1
    35aa:	f1 f7       	brne	.-4      	; 0x35a8 <LCD_displayCharacter+0x27e>
    35ac:	fe 01       	movw	r30, r28
    35ae:	e7 5b       	subi	r30, 0xB7	; 183
    35b0:	ff 4f       	sbci	r31, 0xFF	; 255
    35b2:	91 83       	std	Z+1, r25	; 0x01
    35b4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35b6:	de 01       	movw	r26, r28
    35b8:	a5 5b       	subi	r26, 0xB5	; 181
    35ba:	bf 4f       	sbci	r27, 0xFF	; 255
    35bc:	fe 01       	movw	r30, r28
    35be:	e5 5b       	subi	r30, 0xB5	; 181
    35c0:	ff 4f       	sbci	r31, 0xFF	; 255
    35c2:	80 81       	ld	r24, Z
    35c4:	91 81       	ldd	r25, Z+1	; 0x01
    35c6:	01 97       	sbiw	r24, 0x01	; 1
    35c8:	11 96       	adiw	r26, 0x01	; 1
    35ca:	9c 93       	st	X, r25
    35cc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35ce:	fe 01       	movw	r30, r28
    35d0:	e5 5b       	subi	r30, 0xB5	; 181
    35d2:	ff 4f       	sbci	r31, 0xFF	; 255
    35d4:	80 81       	ld	r24, Z
    35d6:	91 81       	ldd	r25, Z+1	; 0x01
    35d8:	00 97       	sbiw	r24, 0x00	; 0
    35da:	d1 f6       	brne	.-76     	; 0x3590 <LCD_displayCharacter+0x266>
    35dc:	27 c0       	rjmp	.+78     	; 0x362c <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35de:	8e 01       	movw	r16, r28
    35e0:	05 5b       	subi	r16, 0xB5	; 181
    35e2:	1f 4f       	sbci	r17, 0xFF	; 255
    35e4:	fe 01       	movw	r30, r28
    35e6:	e3 5b       	subi	r30, 0xB3	; 179
    35e8:	ff 4f       	sbci	r31, 0xFF	; 255
    35ea:	60 81       	ld	r22, Z
    35ec:	71 81       	ldd	r23, Z+1	; 0x01
    35ee:	82 81       	ldd	r24, Z+2	; 0x02
    35f0:	93 81       	ldd	r25, Z+3	; 0x03
    35f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35f6:	dc 01       	movw	r26, r24
    35f8:	cb 01       	movw	r24, r22
    35fa:	f8 01       	movw	r30, r16
    35fc:	91 83       	std	Z+1, r25	; 0x01
    35fe:	80 83       	st	Z, r24
    3600:	de 01       	movw	r26, r28
    3602:	a9 5b       	subi	r26, 0xB9	; 185
    3604:	bf 4f       	sbci	r27, 0xFF	; 255
    3606:	fe 01       	movw	r30, r28
    3608:	e5 5b       	subi	r30, 0xB5	; 181
    360a:	ff 4f       	sbci	r31, 0xFF	; 255
    360c:	80 81       	ld	r24, Z
    360e:	91 81       	ldd	r25, Z+1	; 0x01
    3610:	8d 93       	st	X+, r24
    3612:	9c 93       	st	X, r25
    3614:	fe 01       	movw	r30, r28
    3616:	e9 5b       	subi	r30, 0xB9	; 185
    3618:	ff 4f       	sbci	r31, 0xFF	; 255
    361a:	80 81       	ld	r24, Z
    361c:	91 81       	ldd	r25, Z+1	; 0x01
    361e:	01 97       	sbiw	r24, 0x01	; 1
    3620:	f1 f7       	brne	.-4      	; 0x361e <LCD_displayCharacter+0x2f4>
    3622:	fe 01       	movw	r30, r28
    3624:	e9 5b       	subi	r30, 0xB9	; 185
    3626:	ff 4f       	sbci	r31, 0xFF	; 255
    3628:	91 83       	std	Z+1, r25	; 0x01
    362a:	80 83       	st	Z, r24
	_delay_ms(1);

	// Inserts the data in the assigned PORT to be sent to the LCD
	// Inserts the data in the assigned PORT to be sent to the LCD
	if (LCD_BIT_MODE == 4) {
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 0), GET_BIT( data, 4 ));
    362c:	fe 01       	movw	r30, r28
    362e:	ed 59       	subi	r30, 0x9D	; 157
    3630:	ff 4f       	sbci	r31, 0xFF	; 255
    3632:	80 81       	ld	r24, Z
    3634:	82 95       	swap	r24
    3636:	8f 70       	andi	r24, 0x0F	; 15
    3638:	98 2f       	mov	r25, r24
    363a:	91 70       	andi	r25, 0x01	; 1
    363c:	80 e0       	ldi	r24, 0x00	; 0
    363e:	63 e0       	ldi	r22, 0x03	; 3
    3640:	49 2f       	mov	r20, r25
    3642:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 1), GET_BIT( data, 5 ));
    3646:	fe 01       	movw	r30, r28
    3648:	ed 59       	subi	r30, 0x9D	; 157
    364a:	ff 4f       	sbci	r31, 0xFF	; 255
    364c:	80 81       	ld	r24, Z
    364e:	82 95       	swap	r24
    3650:	86 95       	lsr	r24
    3652:	87 70       	andi	r24, 0x07	; 7
    3654:	98 2f       	mov	r25, r24
    3656:	91 70       	andi	r25, 0x01	; 1
    3658:	80 e0       	ldi	r24, 0x00	; 0
    365a:	64 e0       	ldi	r22, 0x04	; 4
    365c:	49 2f       	mov	r20, r25
    365e:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 2), GET_BIT( data, 6 ));
    3662:	fe 01       	movw	r30, r28
    3664:	ed 59       	subi	r30, 0x9D	; 157
    3666:	ff 4f       	sbci	r31, 0xFF	; 255
    3668:	80 81       	ld	r24, Z
    366a:	82 95       	swap	r24
    366c:	86 95       	lsr	r24
    366e:	86 95       	lsr	r24
    3670:	83 70       	andi	r24, 0x03	; 3
    3672:	98 2f       	mov	r25, r24
    3674:	91 70       	andi	r25, 0x01	; 1
    3676:	80 e0       	ldi	r24, 0x00	; 0
    3678:	65 e0       	ldi	r22, 0x05	; 5
    367a:	49 2f       	mov	r20, r25
    367c:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 3), GET_BIT( data, 7 ));
    3680:	fe 01       	movw	r30, r28
    3682:	ed 59       	subi	r30, 0x9D	; 157
    3684:	ff 4f       	sbci	r31, 0xFF	; 255
    3686:	80 81       	ld	r24, Z
    3688:	98 2f       	mov	r25, r24
    368a:	99 1f       	adc	r25, r25
    368c:	99 27       	eor	r25, r25
    368e:	99 1f       	adc	r25, r25
    3690:	80 e0       	ldi	r24, 0x00	; 0
    3692:	66 e0       	ldi	r22, 0x06	; 6
    3694:	49 2f       	mov	r20, r25
    3696:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
    369a:	fe 01       	movw	r30, r28
    369c:	ed 5b       	subi	r30, 0xBD	; 189
    369e:	ff 4f       	sbci	r31, 0xFF	; 255
    36a0:	80 e0       	ldi	r24, 0x00	; 0
    36a2:	90 e0       	ldi	r25, 0x00	; 0
    36a4:	a0 e8       	ldi	r26, 0x80	; 128
    36a6:	bf e3       	ldi	r27, 0x3F	; 63
    36a8:	80 83       	st	Z, r24
    36aa:	91 83       	std	Z+1, r25	; 0x01
    36ac:	a2 83       	std	Z+2, r26	; 0x02
    36ae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36b0:	8e 01       	movw	r16, r28
    36b2:	01 5c       	subi	r16, 0xC1	; 193
    36b4:	1f 4f       	sbci	r17, 0xFF	; 255
    36b6:	fe 01       	movw	r30, r28
    36b8:	ed 5b       	subi	r30, 0xBD	; 189
    36ba:	ff 4f       	sbci	r31, 0xFF	; 255
    36bc:	60 81       	ld	r22, Z
    36be:	71 81       	ldd	r23, Z+1	; 0x01
    36c0:	82 81       	ldd	r24, Z+2	; 0x02
    36c2:	93 81       	ldd	r25, Z+3	; 0x03
    36c4:	20 e0       	ldi	r18, 0x00	; 0
    36c6:	30 e0       	ldi	r19, 0x00	; 0
    36c8:	4a e7       	ldi	r20, 0x7A	; 122
    36ca:	53 e4       	ldi	r21, 0x43	; 67
    36cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36d0:	dc 01       	movw	r26, r24
    36d2:	cb 01       	movw	r24, r22
    36d4:	f8 01       	movw	r30, r16
    36d6:	80 83       	st	Z, r24
    36d8:	91 83       	std	Z+1, r25	; 0x01
    36da:	a2 83       	std	Z+2, r26	; 0x02
    36dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    36de:	fe 01       	movw	r30, r28
    36e0:	ff 96       	adiw	r30, 0x3f	; 63
    36e2:	60 81       	ld	r22, Z
    36e4:	71 81       	ldd	r23, Z+1	; 0x01
    36e6:	82 81       	ldd	r24, Z+2	; 0x02
    36e8:	93 81       	ldd	r25, Z+3	; 0x03
    36ea:	20 e0       	ldi	r18, 0x00	; 0
    36ec:	30 e0       	ldi	r19, 0x00	; 0
    36ee:	40 e8       	ldi	r20, 0x80	; 128
    36f0:	5f e3       	ldi	r21, 0x3F	; 63
    36f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36f6:	88 23       	and	r24, r24
    36f8:	2c f4       	brge	.+10     	; 0x3704 <LCD_displayCharacter+0x3da>
		__ticks = 1;
    36fa:	81 e0       	ldi	r24, 0x01	; 1
    36fc:	90 e0       	ldi	r25, 0x00	; 0
    36fe:	9e af       	std	Y+62, r25	; 0x3e
    3700:	8d af       	std	Y+61, r24	; 0x3d
    3702:	46 c0       	rjmp	.+140    	; 0x3790 <LCD_displayCharacter+0x466>
	else if (__tmp > 65535)
    3704:	fe 01       	movw	r30, r28
    3706:	ff 96       	adiw	r30, 0x3f	; 63
    3708:	60 81       	ld	r22, Z
    370a:	71 81       	ldd	r23, Z+1	; 0x01
    370c:	82 81       	ldd	r24, Z+2	; 0x02
    370e:	93 81       	ldd	r25, Z+3	; 0x03
    3710:	20 e0       	ldi	r18, 0x00	; 0
    3712:	3f ef       	ldi	r19, 0xFF	; 255
    3714:	4f e7       	ldi	r20, 0x7F	; 127
    3716:	57 e4       	ldi	r21, 0x47	; 71
    3718:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    371c:	18 16       	cp	r1, r24
    371e:	64 f5       	brge	.+88     	; 0x3778 <LCD_displayCharacter+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3720:	fe 01       	movw	r30, r28
    3722:	ed 5b       	subi	r30, 0xBD	; 189
    3724:	ff 4f       	sbci	r31, 0xFF	; 255
    3726:	60 81       	ld	r22, Z
    3728:	71 81       	ldd	r23, Z+1	; 0x01
    372a:	82 81       	ldd	r24, Z+2	; 0x02
    372c:	93 81       	ldd	r25, Z+3	; 0x03
    372e:	20 e0       	ldi	r18, 0x00	; 0
    3730:	30 e0       	ldi	r19, 0x00	; 0
    3732:	40 e2       	ldi	r20, 0x20	; 32
    3734:	51 e4       	ldi	r21, 0x41	; 65
    3736:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    373a:	dc 01       	movw	r26, r24
    373c:	cb 01       	movw	r24, r22
    373e:	bc 01       	movw	r22, r24
    3740:	cd 01       	movw	r24, r26
    3742:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3746:	dc 01       	movw	r26, r24
    3748:	cb 01       	movw	r24, r22
    374a:	9e af       	std	Y+62, r25	; 0x3e
    374c:	8d af       	std	Y+61, r24	; 0x3d
    374e:	0f c0       	rjmp	.+30     	; 0x376e <LCD_displayCharacter+0x444>
    3750:	89 e1       	ldi	r24, 0x19	; 25
    3752:	90 e0       	ldi	r25, 0x00	; 0
    3754:	9c af       	std	Y+60, r25	; 0x3c
    3756:	8b af       	std	Y+59, r24	; 0x3b
    3758:	8b ad       	ldd	r24, Y+59	; 0x3b
    375a:	9c ad       	ldd	r25, Y+60	; 0x3c
    375c:	01 97       	sbiw	r24, 0x01	; 1
    375e:	f1 f7       	brne	.-4      	; 0x375c <LCD_displayCharacter+0x432>
    3760:	9c af       	std	Y+60, r25	; 0x3c
    3762:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3764:	8d ad       	ldd	r24, Y+61	; 0x3d
    3766:	9e ad       	ldd	r25, Y+62	; 0x3e
    3768:	01 97       	sbiw	r24, 0x01	; 1
    376a:	9e af       	std	Y+62, r25	; 0x3e
    376c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    376e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3770:	9e ad       	ldd	r25, Y+62	; 0x3e
    3772:	00 97       	sbiw	r24, 0x00	; 0
    3774:	69 f7       	brne	.-38     	; 0x3750 <LCD_displayCharacter+0x426>
    3776:	16 c0       	rjmp	.+44     	; 0x37a4 <LCD_displayCharacter+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3778:	fe 01       	movw	r30, r28
    377a:	ff 96       	adiw	r30, 0x3f	; 63
    377c:	60 81       	ld	r22, Z
    377e:	71 81       	ldd	r23, Z+1	; 0x01
    3780:	82 81       	ldd	r24, Z+2	; 0x02
    3782:	93 81       	ldd	r25, Z+3	; 0x03
    3784:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3788:	dc 01       	movw	r26, r24
    378a:	cb 01       	movw	r24, r22
    378c:	9e af       	std	Y+62, r25	; 0x3e
    378e:	8d af       	std	Y+61, r24	; 0x3d
    3790:	8d ad       	ldd	r24, Y+61	; 0x3d
    3792:	9e ad       	ldd	r25, Y+62	; 0x3e
    3794:	9a af       	std	Y+58, r25	; 0x3a
    3796:	89 af       	std	Y+57, r24	; 0x39
    3798:	89 ad       	ldd	r24, Y+57	; 0x39
    379a:	9a ad       	ldd	r25, Y+58	; 0x3a
    379c:	01 97       	sbiw	r24, 0x01	; 1
    379e:	f1 f7       	brne	.-4      	; 0x379c <LCD_displayCharacter+0x472>
    37a0:	9a af       	std	Y+58, r25	; 0x3a
    37a2:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(1);

		// Clear Enable Pin to '0'
		GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
    37a4:	80 e0       	ldi	r24, 0x00	; 0
    37a6:	62 e0       	ldi	r22, 0x02	; 2
    37a8:	40 e0       	ldi	r20, 0x00	; 0
    37aa:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
    37ae:	80 e0       	ldi	r24, 0x00	; 0
    37b0:	90 e0       	ldi	r25, 0x00	; 0
    37b2:	a0 e8       	ldi	r26, 0x80	; 128
    37b4:	bf e3       	ldi	r27, 0x3F	; 63
    37b6:	8d ab       	std	Y+53, r24	; 0x35
    37b8:	9e ab       	std	Y+54, r25	; 0x36
    37ba:	af ab       	std	Y+55, r26	; 0x37
    37bc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37be:	6d a9       	ldd	r22, Y+53	; 0x35
    37c0:	7e a9       	ldd	r23, Y+54	; 0x36
    37c2:	8f a9       	ldd	r24, Y+55	; 0x37
    37c4:	98 ad       	ldd	r25, Y+56	; 0x38
    37c6:	20 e0       	ldi	r18, 0x00	; 0
    37c8:	30 e0       	ldi	r19, 0x00	; 0
    37ca:	4a e7       	ldi	r20, 0x7A	; 122
    37cc:	53 e4       	ldi	r21, 0x43	; 67
    37ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37d2:	dc 01       	movw	r26, r24
    37d4:	cb 01       	movw	r24, r22
    37d6:	89 ab       	std	Y+49, r24	; 0x31
    37d8:	9a ab       	std	Y+50, r25	; 0x32
    37da:	ab ab       	std	Y+51, r26	; 0x33
    37dc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    37de:	69 a9       	ldd	r22, Y+49	; 0x31
    37e0:	7a a9       	ldd	r23, Y+50	; 0x32
    37e2:	8b a9       	ldd	r24, Y+51	; 0x33
    37e4:	9c a9       	ldd	r25, Y+52	; 0x34
    37e6:	20 e0       	ldi	r18, 0x00	; 0
    37e8:	30 e0       	ldi	r19, 0x00	; 0
    37ea:	40 e8       	ldi	r20, 0x80	; 128
    37ec:	5f e3       	ldi	r21, 0x3F	; 63
    37ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37f2:	88 23       	and	r24, r24
    37f4:	2c f4       	brge	.+10     	; 0x3800 <LCD_displayCharacter+0x4d6>
		__ticks = 1;
    37f6:	81 e0       	ldi	r24, 0x01	; 1
    37f8:	90 e0       	ldi	r25, 0x00	; 0
    37fa:	98 ab       	std	Y+48, r25	; 0x30
    37fc:	8f a7       	std	Y+47, r24	; 0x2f
    37fe:	3f c0       	rjmp	.+126    	; 0x387e <LCD_displayCharacter+0x554>
	else if (__tmp > 65535)
    3800:	69 a9       	ldd	r22, Y+49	; 0x31
    3802:	7a a9       	ldd	r23, Y+50	; 0x32
    3804:	8b a9       	ldd	r24, Y+51	; 0x33
    3806:	9c a9       	ldd	r25, Y+52	; 0x34
    3808:	20 e0       	ldi	r18, 0x00	; 0
    380a:	3f ef       	ldi	r19, 0xFF	; 255
    380c:	4f e7       	ldi	r20, 0x7F	; 127
    380e:	57 e4       	ldi	r21, 0x47	; 71
    3810:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3814:	18 16       	cp	r1, r24
    3816:	4c f5       	brge	.+82     	; 0x386a <LCD_displayCharacter+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3818:	6d a9       	ldd	r22, Y+53	; 0x35
    381a:	7e a9       	ldd	r23, Y+54	; 0x36
    381c:	8f a9       	ldd	r24, Y+55	; 0x37
    381e:	98 ad       	ldd	r25, Y+56	; 0x38
    3820:	20 e0       	ldi	r18, 0x00	; 0
    3822:	30 e0       	ldi	r19, 0x00	; 0
    3824:	40 e2       	ldi	r20, 0x20	; 32
    3826:	51 e4       	ldi	r21, 0x41	; 65
    3828:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    382c:	dc 01       	movw	r26, r24
    382e:	cb 01       	movw	r24, r22
    3830:	bc 01       	movw	r22, r24
    3832:	cd 01       	movw	r24, r26
    3834:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3838:	dc 01       	movw	r26, r24
    383a:	cb 01       	movw	r24, r22
    383c:	98 ab       	std	Y+48, r25	; 0x30
    383e:	8f a7       	std	Y+47, r24	; 0x2f
    3840:	0f c0       	rjmp	.+30     	; 0x3860 <LCD_displayCharacter+0x536>
    3842:	89 e1       	ldi	r24, 0x19	; 25
    3844:	90 e0       	ldi	r25, 0x00	; 0
    3846:	9e a7       	std	Y+46, r25	; 0x2e
    3848:	8d a7       	std	Y+45, r24	; 0x2d
    384a:	8d a5       	ldd	r24, Y+45	; 0x2d
    384c:	9e a5       	ldd	r25, Y+46	; 0x2e
    384e:	01 97       	sbiw	r24, 0x01	; 1
    3850:	f1 f7       	brne	.-4      	; 0x384e <LCD_displayCharacter+0x524>
    3852:	9e a7       	std	Y+46, r25	; 0x2e
    3854:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3856:	8f a5       	ldd	r24, Y+47	; 0x2f
    3858:	98 a9       	ldd	r25, Y+48	; 0x30
    385a:	01 97       	sbiw	r24, 0x01	; 1
    385c:	98 ab       	std	Y+48, r25	; 0x30
    385e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3860:	8f a5       	ldd	r24, Y+47	; 0x2f
    3862:	98 a9       	ldd	r25, Y+48	; 0x30
    3864:	00 97       	sbiw	r24, 0x00	; 0
    3866:	69 f7       	brne	.-38     	; 0x3842 <LCD_displayCharacter+0x518>
    3868:	14 c0       	rjmp	.+40     	; 0x3892 <LCD_displayCharacter+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    386a:	69 a9       	ldd	r22, Y+49	; 0x31
    386c:	7a a9       	ldd	r23, Y+50	; 0x32
    386e:	8b a9       	ldd	r24, Y+51	; 0x33
    3870:	9c a9       	ldd	r25, Y+52	; 0x34
    3872:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3876:	dc 01       	movw	r26, r24
    3878:	cb 01       	movw	r24, r22
    387a:	98 ab       	std	Y+48, r25	; 0x30
    387c:	8f a7       	std	Y+47, r24	; 0x2f
    387e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3880:	98 a9       	ldd	r25, Y+48	; 0x30
    3882:	9c a7       	std	Y+44, r25	; 0x2c
    3884:	8b a7       	std	Y+43, r24	; 0x2b
    3886:	8b a5       	ldd	r24, Y+43	; 0x2b
    3888:	9c a5       	ldd	r25, Y+44	; 0x2c
    388a:	01 97       	sbiw	r24, 0x01	; 1
    388c:	f1 f7       	brne	.-4      	; 0x388a <LCD_displayCharacter+0x560>
    388e:	9c a7       	std	Y+44, r25	; 0x2c
    3890:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1); /* delay for processing Th = 13ns */

		// Set Enable Pin to '1'
		GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
    3892:	80 e0       	ldi	r24, 0x00	; 0
    3894:	62 e0       	ldi	r22, 0x02	; 2
    3896:	41 e0       	ldi	r20, 0x01	; 1
    3898:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
    389c:	80 e0       	ldi	r24, 0x00	; 0
    389e:	90 e0       	ldi	r25, 0x00	; 0
    38a0:	a0 e8       	ldi	r26, 0x80	; 128
    38a2:	bf e3       	ldi	r27, 0x3F	; 63
    38a4:	8f a3       	std	Y+39, r24	; 0x27
    38a6:	98 a7       	std	Y+40, r25	; 0x28
    38a8:	a9 a7       	std	Y+41, r26	; 0x29
    38aa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38ac:	6f a1       	ldd	r22, Y+39	; 0x27
    38ae:	78 a5       	ldd	r23, Y+40	; 0x28
    38b0:	89 a5       	ldd	r24, Y+41	; 0x29
    38b2:	9a a5       	ldd	r25, Y+42	; 0x2a
    38b4:	20 e0       	ldi	r18, 0x00	; 0
    38b6:	30 e0       	ldi	r19, 0x00	; 0
    38b8:	4a e7       	ldi	r20, 0x7A	; 122
    38ba:	53 e4       	ldi	r21, 0x43	; 67
    38bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38c0:	dc 01       	movw	r26, r24
    38c2:	cb 01       	movw	r24, r22
    38c4:	8b a3       	std	Y+35, r24	; 0x23
    38c6:	9c a3       	std	Y+36, r25	; 0x24
    38c8:	ad a3       	std	Y+37, r26	; 0x25
    38ca:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    38cc:	6b a1       	ldd	r22, Y+35	; 0x23
    38ce:	7c a1       	ldd	r23, Y+36	; 0x24
    38d0:	8d a1       	ldd	r24, Y+37	; 0x25
    38d2:	9e a1       	ldd	r25, Y+38	; 0x26
    38d4:	20 e0       	ldi	r18, 0x00	; 0
    38d6:	30 e0       	ldi	r19, 0x00	; 0
    38d8:	40 e8       	ldi	r20, 0x80	; 128
    38da:	5f e3       	ldi	r21, 0x3F	; 63
    38dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38e0:	88 23       	and	r24, r24
    38e2:	2c f4       	brge	.+10     	; 0x38ee <LCD_displayCharacter+0x5c4>
		__ticks = 1;
    38e4:	81 e0       	ldi	r24, 0x01	; 1
    38e6:	90 e0       	ldi	r25, 0x00	; 0
    38e8:	9a a3       	std	Y+34, r25	; 0x22
    38ea:	89 a3       	std	Y+33, r24	; 0x21
    38ec:	3f c0       	rjmp	.+126    	; 0x396c <LCD_displayCharacter+0x642>
	else if (__tmp > 65535)
    38ee:	6b a1       	ldd	r22, Y+35	; 0x23
    38f0:	7c a1       	ldd	r23, Y+36	; 0x24
    38f2:	8d a1       	ldd	r24, Y+37	; 0x25
    38f4:	9e a1       	ldd	r25, Y+38	; 0x26
    38f6:	20 e0       	ldi	r18, 0x00	; 0
    38f8:	3f ef       	ldi	r19, 0xFF	; 255
    38fa:	4f e7       	ldi	r20, 0x7F	; 127
    38fc:	57 e4       	ldi	r21, 0x47	; 71
    38fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3902:	18 16       	cp	r1, r24
    3904:	4c f5       	brge	.+82     	; 0x3958 <LCD_displayCharacter+0x62e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3906:	6f a1       	ldd	r22, Y+39	; 0x27
    3908:	78 a5       	ldd	r23, Y+40	; 0x28
    390a:	89 a5       	ldd	r24, Y+41	; 0x29
    390c:	9a a5       	ldd	r25, Y+42	; 0x2a
    390e:	20 e0       	ldi	r18, 0x00	; 0
    3910:	30 e0       	ldi	r19, 0x00	; 0
    3912:	40 e2       	ldi	r20, 0x20	; 32
    3914:	51 e4       	ldi	r21, 0x41	; 65
    3916:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    391a:	dc 01       	movw	r26, r24
    391c:	cb 01       	movw	r24, r22
    391e:	bc 01       	movw	r22, r24
    3920:	cd 01       	movw	r24, r26
    3922:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3926:	dc 01       	movw	r26, r24
    3928:	cb 01       	movw	r24, r22
    392a:	9a a3       	std	Y+34, r25	; 0x22
    392c:	89 a3       	std	Y+33, r24	; 0x21
    392e:	0f c0       	rjmp	.+30     	; 0x394e <LCD_displayCharacter+0x624>
    3930:	89 e1       	ldi	r24, 0x19	; 25
    3932:	90 e0       	ldi	r25, 0x00	; 0
    3934:	98 a3       	std	Y+32, r25	; 0x20
    3936:	8f 8f       	std	Y+31, r24	; 0x1f
    3938:	8f 8d       	ldd	r24, Y+31	; 0x1f
    393a:	98 a1       	ldd	r25, Y+32	; 0x20
    393c:	01 97       	sbiw	r24, 0x01	; 1
    393e:	f1 f7       	brne	.-4      	; 0x393c <LCD_displayCharacter+0x612>
    3940:	98 a3       	std	Y+32, r25	; 0x20
    3942:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3944:	89 a1       	ldd	r24, Y+33	; 0x21
    3946:	9a a1       	ldd	r25, Y+34	; 0x22
    3948:	01 97       	sbiw	r24, 0x01	; 1
    394a:	9a a3       	std	Y+34, r25	; 0x22
    394c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    394e:	89 a1       	ldd	r24, Y+33	; 0x21
    3950:	9a a1       	ldd	r25, Y+34	; 0x22
    3952:	00 97       	sbiw	r24, 0x00	; 0
    3954:	69 f7       	brne	.-38     	; 0x3930 <LCD_displayCharacter+0x606>
    3956:	14 c0       	rjmp	.+40     	; 0x3980 <LCD_displayCharacter+0x656>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3958:	6b a1       	ldd	r22, Y+35	; 0x23
    395a:	7c a1       	ldd	r23, Y+36	; 0x24
    395c:	8d a1       	ldd	r24, Y+37	; 0x25
    395e:	9e a1       	ldd	r25, Y+38	; 0x26
    3960:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3964:	dc 01       	movw	r26, r24
    3966:	cb 01       	movw	r24, r22
    3968:	9a a3       	std	Y+34, r25	; 0x22
    396a:	89 a3       	std	Y+33, r24	; 0x21
    396c:	89 a1       	ldd	r24, Y+33	; 0x21
    396e:	9a a1       	ldd	r25, Y+34	; 0x22
    3970:	9e 8f       	std	Y+30, r25	; 0x1e
    3972:	8d 8f       	std	Y+29, r24	; 0x1d
    3974:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3976:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3978:	01 97       	sbiw	r24, 0x01	; 1
    397a:	f1 f7       	brne	.-4      	; 0x3978 <LCD_displayCharacter+0x64e>
    397c:	9e 8f       	std	Y+30, r25	; 0x1e
    397e:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 0), GET_BIT( data, 0 ));
    3980:	fe 01       	movw	r30, r28
    3982:	ed 59       	subi	r30, 0x9D	; 157
    3984:	ff 4f       	sbci	r31, 0xFF	; 255
    3986:	80 81       	ld	r24, Z
    3988:	98 2f       	mov	r25, r24
    398a:	91 70       	andi	r25, 0x01	; 1
    398c:	80 e0       	ldi	r24, 0x00	; 0
    398e:	63 e0       	ldi	r22, 0x03	; 3
    3990:	49 2f       	mov	r20, r25
    3992:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 1), GET_BIT( data, 1 ));
    3996:	fe 01       	movw	r30, r28
    3998:	ed 59       	subi	r30, 0x9D	; 157
    399a:	ff 4f       	sbci	r31, 0xFF	; 255
    399c:	80 81       	ld	r24, Z
    399e:	86 95       	lsr	r24
    39a0:	98 2f       	mov	r25, r24
    39a2:	91 70       	andi	r25, 0x01	; 1
    39a4:	80 e0       	ldi	r24, 0x00	; 0
    39a6:	64 e0       	ldi	r22, 0x04	; 4
    39a8:	49 2f       	mov	r20, r25
    39aa:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 2), GET_BIT( data, 2 ));
    39ae:	fe 01       	movw	r30, r28
    39b0:	ed 59       	subi	r30, 0x9D	; 157
    39b2:	ff 4f       	sbci	r31, 0xFF	; 255
    39b4:	80 81       	ld	r24, Z
    39b6:	86 95       	lsr	r24
    39b8:	86 95       	lsr	r24
    39ba:	98 2f       	mov	r25, r24
    39bc:	91 70       	andi	r25, 0x01	; 1
    39be:	80 e0       	ldi	r24, 0x00	; 0
    39c0:	65 e0       	ldi	r22, 0x05	; 5
    39c2:	49 2f       	mov	r20, r25
    39c4:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 3), GET_BIT( data, 3 ));
    39c8:	fe 01       	movw	r30, r28
    39ca:	ed 59       	subi	r30, 0x9D	; 157
    39cc:	ff 4f       	sbci	r31, 0xFF	; 255
    39ce:	80 81       	ld	r24, Z
    39d0:	86 95       	lsr	r24
    39d2:	86 95       	lsr	r24
    39d4:	86 95       	lsr	r24
    39d6:	98 2f       	mov	r25, r24
    39d8:	91 70       	andi	r25, 0x01	; 1
    39da:	80 e0       	ldi	r24, 0x00	; 0
    39dc:	66 e0       	ldi	r22, 0x06	; 6
    39de:	49 2f       	mov	r20, r25
    39e0:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
    39e4:	80 e0       	ldi	r24, 0x00	; 0
    39e6:	90 e0       	ldi	r25, 0x00	; 0
    39e8:	a0 e8       	ldi	r26, 0x80	; 128
    39ea:	bf e3       	ldi	r27, 0x3F	; 63
    39ec:	89 8f       	std	Y+25, r24	; 0x19
    39ee:	9a 8f       	std	Y+26, r25	; 0x1a
    39f0:	ab 8f       	std	Y+27, r26	; 0x1b
    39f2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39f4:	69 8d       	ldd	r22, Y+25	; 0x19
    39f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    39f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39fc:	20 e0       	ldi	r18, 0x00	; 0
    39fe:	30 e0       	ldi	r19, 0x00	; 0
    3a00:	4a e7       	ldi	r20, 0x7A	; 122
    3a02:	53 e4       	ldi	r21, 0x43	; 67
    3a04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a08:	dc 01       	movw	r26, r24
    3a0a:	cb 01       	movw	r24, r22
    3a0c:	8d 8b       	std	Y+21, r24	; 0x15
    3a0e:	9e 8b       	std	Y+22, r25	; 0x16
    3a10:	af 8b       	std	Y+23, r26	; 0x17
    3a12:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3a14:	6d 89       	ldd	r22, Y+21	; 0x15
    3a16:	7e 89       	ldd	r23, Y+22	; 0x16
    3a18:	8f 89       	ldd	r24, Y+23	; 0x17
    3a1a:	98 8d       	ldd	r25, Y+24	; 0x18
    3a1c:	20 e0       	ldi	r18, 0x00	; 0
    3a1e:	30 e0       	ldi	r19, 0x00	; 0
    3a20:	40 e8       	ldi	r20, 0x80	; 128
    3a22:	5f e3       	ldi	r21, 0x3F	; 63
    3a24:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a28:	88 23       	and	r24, r24
    3a2a:	2c f4       	brge	.+10     	; 0x3a36 <LCD_displayCharacter+0x70c>
		__ticks = 1;
    3a2c:	81 e0       	ldi	r24, 0x01	; 1
    3a2e:	90 e0       	ldi	r25, 0x00	; 0
    3a30:	9c 8b       	std	Y+20, r25	; 0x14
    3a32:	8b 8b       	std	Y+19, r24	; 0x13
    3a34:	3f c0       	rjmp	.+126    	; 0x3ab4 <LCD_displayCharacter+0x78a>
	else if (__tmp > 65535)
    3a36:	6d 89       	ldd	r22, Y+21	; 0x15
    3a38:	7e 89       	ldd	r23, Y+22	; 0x16
    3a3a:	8f 89       	ldd	r24, Y+23	; 0x17
    3a3c:	98 8d       	ldd	r25, Y+24	; 0x18
    3a3e:	20 e0       	ldi	r18, 0x00	; 0
    3a40:	3f ef       	ldi	r19, 0xFF	; 255
    3a42:	4f e7       	ldi	r20, 0x7F	; 127
    3a44:	57 e4       	ldi	r21, 0x47	; 71
    3a46:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a4a:	18 16       	cp	r1, r24
    3a4c:	4c f5       	brge	.+82     	; 0x3aa0 <LCD_displayCharacter+0x776>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a4e:	69 8d       	ldd	r22, Y+25	; 0x19
    3a50:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a52:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a54:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a56:	20 e0       	ldi	r18, 0x00	; 0
    3a58:	30 e0       	ldi	r19, 0x00	; 0
    3a5a:	40 e2       	ldi	r20, 0x20	; 32
    3a5c:	51 e4       	ldi	r21, 0x41	; 65
    3a5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a62:	dc 01       	movw	r26, r24
    3a64:	cb 01       	movw	r24, r22
    3a66:	bc 01       	movw	r22, r24
    3a68:	cd 01       	movw	r24, r26
    3a6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a6e:	dc 01       	movw	r26, r24
    3a70:	cb 01       	movw	r24, r22
    3a72:	9c 8b       	std	Y+20, r25	; 0x14
    3a74:	8b 8b       	std	Y+19, r24	; 0x13
    3a76:	0f c0       	rjmp	.+30     	; 0x3a96 <LCD_displayCharacter+0x76c>
    3a78:	89 e1       	ldi	r24, 0x19	; 25
    3a7a:	90 e0       	ldi	r25, 0x00	; 0
    3a7c:	9a 8b       	std	Y+18, r25	; 0x12
    3a7e:	89 8b       	std	Y+17, r24	; 0x11
    3a80:	89 89       	ldd	r24, Y+17	; 0x11
    3a82:	9a 89       	ldd	r25, Y+18	; 0x12
    3a84:	01 97       	sbiw	r24, 0x01	; 1
    3a86:	f1 f7       	brne	.-4      	; 0x3a84 <LCD_displayCharacter+0x75a>
    3a88:	9a 8b       	std	Y+18, r25	; 0x12
    3a8a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a8c:	8b 89       	ldd	r24, Y+19	; 0x13
    3a8e:	9c 89       	ldd	r25, Y+20	; 0x14
    3a90:	01 97       	sbiw	r24, 0x01	; 1
    3a92:	9c 8b       	std	Y+20, r25	; 0x14
    3a94:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a96:	8b 89       	ldd	r24, Y+19	; 0x13
    3a98:	9c 89       	ldd	r25, Y+20	; 0x14
    3a9a:	00 97       	sbiw	r24, 0x00	; 0
    3a9c:	69 f7       	brne	.-38     	; 0x3a78 <LCD_displayCharacter+0x74e>
    3a9e:	14 c0       	rjmp	.+40     	; 0x3ac8 <LCD_displayCharacter+0x79e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3aa0:	6d 89       	ldd	r22, Y+21	; 0x15
    3aa2:	7e 89       	ldd	r23, Y+22	; 0x16
    3aa4:	8f 89       	ldd	r24, Y+23	; 0x17
    3aa6:	98 8d       	ldd	r25, Y+24	; 0x18
    3aa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aac:	dc 01       	movw	r26, r24
    3aae:	cb 01       	movw	r24, r22
    3ab0:	9c 8b       	std	Y+20, r25	; 0x14
    3ab2:	8b 8b       	std	Y+19, r24	; 0x13
    3ab4:	8b 89       	ldd	r24, Y+19	; 0x13
    3ab6:	9c 89       	ldd	r25, Y+20	; 0x14
    3ab8:	98 8b       	std	Y+16, r25	; 0x10
    3aba:	8f 87       	std	Y+15, r24	; 0x0f
    3abc:	8f 85       	ldd	r24, Y+15	; 0x0f
    3abe:	98 89       	ldd	r25, Y+16	; 0x10
    3ac0:	01 97       	sbiw	r24, 0x01	; 1
    3ac2:	f1 f7       	brne	.-4      	; 0x3ac0 <LCD_displayCharacter+0x796>
    3ac4:	98 8b       	std	Y+16, r25	; 0x10
    3ac6:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1); /* delay for processing Tdsw = 100ns */

		// Clear Enable Pin to '0'
		GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
    3ac8:	80 e0       	ldi	r24, 0x00	; 0
    3aca:	62 e0       	ldi	r22, 0x02	; 2
    3acc:	40 e0       	ldi	r20, 0x00	; 0
    3ace:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>
    3ad2:	80 e0       	ldi	r24, 0x00	; 0
    3ad4:	90 e0       	ldi	r25, 0x00	; 0
    3ad6:	a0 e8       	ldi	r26, 0x80	; 128
    3ad8:	bf e3       	ldi	r27, 0x3F	; 63
    3ada:	8b 87       	std	Y+11, r24	; 0x0b
    3adc:	9c 87       	std	Y+12, r25	; 0x0c
    3ade:	ad 87       	std	Y+13, r26	; 0x0d
    3ae0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ae2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ae4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ae6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ae8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3aea:	20 e0       	ldi	r18, 0x00	; 0
    3aec:	30 e0       	ldi	r19, 0x00	; 0
    3aee:	4a e7       	ldi	r20, 0x7A	; 122
    3af0:	53 e4       	ldi	r21, 0x43	; 67
    3af2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3af6:	dc 01       	movw	r26, r24
    3af8:	cb 01       	movw	r24, r22
    3afa:	8f 83       	std	Y+7, r24	; 0x07
    3afc:	98 87       	std	Y+8, r25	; 0x08
    3afe:	a9 87       	std	Y+9, r26	; 0x09
    3b00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b02:	6f 81       	ldd	r22, Y+7	; 0x07
    3b04:	78 85       	ldd	r23, Y+8	; 0x08
    3b06:	89 85       	ldd	r24, Y+9	; 0x09
    3b08:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b0a:	20 e0       	ldi	r18, 0x00	; 0
    3b0c:	30 e0       	ldi	r19, 0x00	; 0
    3b0e:	40 e8       	ldi	r20, 0x80	; 128
    3b10:	5f e3       	ldi	r21, 0x3F	; 63
    3b12:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b16:	88 23       	and	r24, r24
    3b18:	2c f4       	brge	.+10     	; 0x3b24 <LCD_displayCharacter+0x7fa>
		__ticks = 1;
    3b1a:	81 e0       	ldi	r24, 0x01	; 1
    3b1c:	90 e0       	ldi	r25, 0x00	; 0
    3b1e:	9e 83       	std	Y+6, r25	; 0x06
    3b20:	8d 83       	std	Y+5, r24	; 0x05
    3b22:	3f c0       	rjmp	.+126    	; 0x3ba2 <LCD_displayCharacter+0x878>
	else if (__tmp > 65535)
    3b24:	6f 81       	ldd	r22, Y+7	; 0x07
    3b26:	78 85       	ldd	r23, Y+8	; 0x08
    3b28:	89 85       	ldd	r24, Y+9	; 0x09
    3b2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b2c:	20 e0       	ldi	r18, 0x00	; 0
    3b2e:	3f ef       	ldi	r19, 0xFF	; 255
    3b30:	4f e7       	ldi	r20, 0x7F	; 127
    3b32:	57 e4       	ldi	r21, 0x47	; 71
    3b34:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b38:	18 16       	cp	r1, r24
    3b3a:	4c f5       	brge	.+82     	; 0x3b8e <LCD_displayCharacter+0x864>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b40:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b42:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b44:	20 e0       	ldi	r18, 0x00	; 0
    3b46:	30 e0       	ldi	r19, 0x00	; 0
    3b48:	40 e2       	ldi	r20, 0x20	; 32
    3b4a:	51 e4       	ldi	r21, 0x41	; 65
    3b4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b50:	dc 01       	movw	r26, r24
    3b52:	cb 01       	movw	r24, r22
    3b54:	bc 01       	movw	r22, r24
    3b56:	cd 01       	movw	r24, r26
    3b58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b5c:	dc 01       	movw	r26, r24
    3b5e:	cb 01       	movw	r24, r22
    3b60:	9e 83       	std	Y+6, r25	; 0x06
    3b62:	8d 83       	std	Y+5, r24	; 0x05
    3b64:	0f c0       	rjmp	.+30     	; 0x3b84 <LCD_displayCharacter+0x85a>
    3b66:	89 e1       	ldi	r24, 0x19	; 25
    3b68:	90 e0       	ldi	r25, 0x00	; 0
    3b6a:	9c 83       	std	Y+4, r25	; 0x04
    3b6c:	8b 83       	std	Y+3, r24	; 0x03
    3b6e:	8b 81       	ldd	r24, Y+3	; 0x03
    3b70:	9c 81       	ldd	r25, Y+4	; 0x04
    3b72:	01 97       	sbiw	r24, 0x01	; 1
    3b74:	f1 f7       	brne	.-4      	; 0x3b72 <LCD_displayCharacter+0x848>
    3b76:	9c 83       	std	Y+4, r25	; 0x04
    3b78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b7a:	8d 81       	ldd	r24, Y+5	; 0x05
    3b7c:	9e 81       	ldd	r25, Y+6	; 0x06
    3b7e:	01 97       	sbiw	r24, 0x01	; 1
    3b80:	9e 83       	std	Y+6, r25	; 0x06
    3b82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b84:	8d 81       	ldd	r24, Y+5	; 0x05
    3b86:	9e 81       	ldd	r25, Y+6	; 0x06
    3b88:	00 97       	sbiw	r24, 0x00	; 0
    3b8a:	69 f7       	brne	.-38     	; 0x3b66 <LCD_displayCharacter+0x83c>
    3b8c:	14 c0       	rjmp	.+40     	; 0x3bb6 <LCD_displayCharacter+0x88c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b8e:	6f 81       	ldd	r22, Y+7	; 0x07
    3b90:	78 85       	ldd	r23, Y+8	; 0x08
    3b92:	89 85       	ldd	r24, Y+9	; 0x09
    3b94:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b9a:	dc 01       	movw	r26, r24
    3b9c:	cb 01       	movw	r24, r22
    3b9e:	9e 83       	std	Y+6, r25	; 0x06
    3ba0:	8d 83       	std	Y+5, r24	; 0x05
    3ba2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ba4:	9e 81       	ldd	r25, Y+6	; 0x06
    3ba6:	9a 83       	std	Y+2, r25	; 0x02
    3ba8:	89 83       	std	Y+1, r24	; 0x01
    3baa:	89 81       	ldd	r24, Y+1	; 0x01
    3bac:	9a 81       	ldd	r25, Y+2	; 0x02
    3bae:	01 97       	sbiw	r24, 0x01	; 1
    3bb0:	f1 f7       	brne	.-4      	; 0x3bae <LCD_displayCharacter+0x884>
    3bb2:	9a 83       	std	Y+2, r25	; 0x02
    3bb4:	89 83       	std	Y+1, r24	; 0x01

		// Clear Enable Pin to '0'
		GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
		_delay_ms(1); /* delay for processing Th = 13ns */
	}
}
    3bb6:	cd 59       	subi	r28, 0x9D	; 157
    3bb8:	df 4f       	sbci	r29, 0xFF	; 255
    3bba:	0f b6       	in	r0, 0x3f	; 63
    3bbc:	f8 94       	cli
    3bbe:	de bf       	out	0x3e, r29	; 62
    3bc0:	0f be       	out	0x3f, r0	; 63
    3bc2:	cd bf       	out	0x3d, r28	; 61
    3bc4:	cf 91       	pop	r28
    3bc6:	df 91       	pop	r29
    3bc8:	1f 91       	pop	r17
    3bca:	0f 91       	pop	r16
    3bcc:	08 95       	ret

00003bce <LCD_displayString>:


// Displays a string on the LCD
void LCD_displayString(const char *str) {
    3bce:	df 93       	push	r29
    3bd0:	cf 93       	push	r28
    3bd2:	00 d0       	rcall	.+0      	; 0x3bd4 <LCD_displayString+0x6>
    3bd4:	0f 92       	push	r0
    3bd6:	cd b7       	in	r28, 0x3d	; 61
    3bd8:	de b7       	in	r29, 0x3e	; 62
    3bda:	9b 83       	std	Y+3, r25	; 0x03
    3bdc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3bde:	19 82       	std	Y+1, r1	; 0x01
    3be0:	0e c0       	rjmp	.+28     	; 0x3bfe <LCD_displayString+0x30>
	while(str[i] != '\0') {
		LCD_displayCharacter(str[i]);
    3be2:	89 81       	ldd	r24, Y+1	; 0x01
    3be4:	28 2f       	mov	r18, r24
    3be6:	30 e0       	ldi	r19, 0x00	; 0
    3be8:	8a 81       	ldd	r24, Y+2	; 0x02
    3bea:	9b 81       	ldd	r25, Y+3	; 0x03
    3bec:	fc 01       	movw	r30, r24
    3bee:	e2 0f       	add	r30, r18
    3bf0:	f3 1f       	adc	r31, r19
    3bf2:	80 81       	ld	r24, Z
    3bf4:	0e 94 95 19 	call	0x332a	; 0x332a <LCD_displayCharacter>
		i++;
    3bf8:	89 81       	ldd	r24, Y+1	; 0x01
    3bfa:	8f 5f       	subi	r24, 0xFF	; 255
    3bfc:	89 83       	std	Y+1, r24	; 0x01


// Displays a string on the LCD
void LCD_displayString(const char *str) {
	uint8 i = 0;
	while(str[i] != '\0') {
    3bfe:	89 81       	ldd	r24, Y+1	; 0x01
    3c00:	28 2f       	mov	r18, r24
    3c02:	30 e0       	ldi	r19, 0x00	; 0
    3c04:	8a 81       	ldd	r24, Y+2	; 0x02
    3c06:	9b 81       	ldd	r25, Y+3	; 0x03
    3c08:	fc 01       	movw	r30, r24
    3c0a:	e2 0f       	add	r30, r18
    3c0c:	f3 1f       	adc	r31, r19
    3c0e:	80 81       	ld	r24, Z
    3c10:	88 23       	and	r24, r24
    3c12:	39 f7       	brne	.-50     	; 0x3be2 <LCD_displayString+0x14>
	}
	/*
	for (int i = 0 ; i < strlen(str) ; i++) {
		LCD_displayCharacters(str[i]);
	}*/
}
    3c14:	0f 90       	pop	r0
    3c16:	0f 90       	pop	r0
    3c18:	0f 90       	pop	r0
    3c1a:	cf 91       	pop	r28
    3c1c:	df 91       	pop	r29
    3c1e:	08 95       	ret

00003c20 <LCD_moveCursor>:


// Chooses where the cursor would stand on the LCD to type from it
void LCD_moveCursor(uint8 row, uint8 col) {
    3c20:	df 93       	push	r29
    3c22:	cf 93       	push	r28
    3c24:	00 d0       	rcall	.+0      	; 0x3c26 <LCD_moveCursor+0x6>
    3c26:	00 d0       	rcall	.+0      	; 0x3c28 <LCD_moveCursor+0x8>
    3c28:	0f 92       	push	r0
    3c2a:	cd b7       	in	r28, 0x3d	; 61
    3c2c:	de b7       	in	r29, 0x3e	; 62
    3c2e:	8a 83       	std	Y+2, r24	; 0x02
    3c30:	6b 83       	std	Y+3, r22	; 0x03
	uint8 LCD_MEMORY_ADDRESS;

	// Calculate the required address in the LCD DDRAM checking
	// The location of the cursor originally on which line
	switch(row) {
    3c32:	8a 81       	ldd	r24, Y+2	; 0x02
    3c34:	28 2f       	mov	r18, r24
    3c36:	30 e0       	ldi	r19, 0x00	; 0
    3c38:	3d 83       	std	Y+5, r19	; 0x05
    3c3a:	2c 83       	std	Y+4, r18	; 0x04
    3c3c:	8c 81       	ldd	r24, Y+4	; 0x04
    3c3e:	9d 81       	ldd	r25, Y+5	; 0x05
    3c40:	81 30       	cpi	r24, 0x01	; 1
    3c42:	91 05       	cpc	r25, r1
    3c44:	c1 f0       	breq	.+48     	; 0x3c76 <LCD_moveCursor+0x56>
    3c46:	2c 81       	ldd	r18, Y+4	; 0x04
    3c48:	3d 81       	ldd	r19, Y+5	; 0x05
    3c4a:	22 30       	cpi	r18, 0x02	; 2
    3c4c:	31 05       	cpc	r19, r1
    3c4e:	2c f4       	brge	.+10     	; 0x3c5a <LCD_moveCursor+0x3a>
    3c50:	8c 81       	ldd	r24, Y+4	; 0x04
    3c52:	9d 81       	ldd	r25, Y+5	; 0x05
    3c54:	00 97       	sbiw	r24, 0x00	; 0
    3c56:	61 f0       	breq	.+24     	; 0x3c70 <LCD_moveCursor+0x50>
    3c58:	19 c0       	rjmp	.+50     	; 0x3c8c <LCD_moveCursor+0x6c>
    3c5a:	2c 81       	ldd	r18, Y+4	; 0x04
    3c5c:	3d 81       	ldd	r19, Y+5	; 0x05
    3c5e:	22 30       	cpi	r18, 0x02	; 2
    3c60:	31 05       	cpc	r19, r1
    3c62:	69 f0       	breq	.+26     	; 0x3c7e <LCD_moveCursor+0x5e>
    3c64:	8c 81       	ldd	r24, Y+4	; 0x04
    3c66:	9d 81       	ldd	r25, Y+5	; 0x05
    3c68:	83 30       	cpi	r24, 0x03	; 3
    3c6a:	91 05       	cpc	r25, r1
    3c6c:	61 f0       	breq	.+24     	; 0x3c86 <LCD_moveCursor+0x66>
    3c6e:	0e c0       	rjmp	.+28     	; 0x3c8c <LCD_moveCursor+0x6c>
		case 0:
			LCD_MEMORY_ADDRESS = col;
    3c70:	8b 81       	ldd	r24, Y+3	; 0x03
    3c72:	89 83       	std	Y+1, r24	; 0x01
    3c74:	0b c0       	rjmp	.+22     	; 0x3c8c <LCD_moveCursor+0x6c>
				break;
		case 1:
			LCD_MEMORY_ADDRESS = col + 0x40;
    3c76:	8b 81       	ldd	r24, Y+3	; 0x03
    3c78:	80 5c       	subi	r24, 0xC0	; 192
    3c7a:	89 83       	std	Y+1, r24	; 0x01
    3c7c:	07 c0       	rjmp	.+14     	; 0x3c8c <LCD_moveCursor+0x6c>
				break;
		case 2:
			LCD_MEMORY_ADDRESS = col + 0x10;
    3c7e:	8b 81       	ldd	r24, Y+3	; 0x03
    3c80:	80 5f       	subi	r24, 0xF0	; 240
    3c82:	89 83       	std	Y+1, r24	; 0x01
    3c84:	03 c0       	rjmp	.+6      	; 0x3c8c <LCD_moveCursor+0x6c>
				break;
		case 3:
			LCD_MEMORY_ADDRESS = col + 0x50;
    3c86:	8b 81       	ldd	r24, Y+3	; 0x03
    3c88:	80 5b       	subi	r24, 0xB0	; 176
    3c8a:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(LCD_MEMORY_ADDRESS | LCD_CURSOR_LOCATION);
    3c8c:	89 81       	ldd	r24, Y+1	; 0x01
    3c8e:	80 68       	ori	r24, 0x80	; 128
    3c90:	0e 94 43 15 	call	0x2a86	; 0x2a86 <LCD_sendCommand>
}
    3c94:	0f 90       	pop	r0
    3c96:	0f 90       	pop	r0
    3c98:	0f 90       	pop	r0
    3c9a:	0f 90       	pop	r0
    3c9c:	0f 90       	pop	r0
    3c9e:	cf 91       	pop	r28
    3ca0:	df 91       	pop	r29
    3ca2:	08 95       	ret

00003ca4 <LCD_displayStringRowColumn>:


// Displays a string on the LCD at a chosen cursor and row
void LCD_displayStringRowColumn(uint8 row, uint8 col, const char *Str) {
    3ca4:	df 93       	push	r29
    3ca6:	cf 93       	push	r28
    3ca8:	00 d0       	rcall	.+0      	; 0x3caa <LCD_displayStringRowColumn+0x6>
    3caa:	00 d0       	rcall	.+0      	; 0x3cac <LCD_displayStringRowColumn+0x8>
    3cac:	cd b7       	in	r28, 0x3d	; 61
    3cae:	de b7       	in	r29, 0x3e	; 62
    3cb0:	89 83       	std	Y+1, r24	; 0x01
    3cb2:	6a 83       	std	Y+2, r22	; 0x02
    3cb4:	5c 83       	std	Y+4, r21	; 0x04
    3cb6:	4b 83       	std	Y+3, r20	; 0x03
	// Go to to the required LCD position
	LCD_moveCursor(row, col);
    3cb8:	89 81       	ldd	r24, Y+1	; 0x01
    3cba:	6a 81       	ldd	r22, Y+2	; 0x02
    3cbc:	0e 94 10 1e 	call	0x3c20	; 0x3c20 <LCD_moveCursor>

	// Display the string from the cursor
	LCD_displayString(Str);
    3cc0:	8b 81       	ldd	r24, Y+3	; 0x03
    3cc2:	9c 81       	ldd	r25, Y+4	; 0x04
    3cc4:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <LCD_displayString>
}
    3cc8:	0f 90       	pop	r0
    3cca:	0f 90       	pop	r0
    3ccc:	0f 90       	pop	r0
    3cce:	0f 90       	pop	r0
    3cd0:	cf 91       	pop	r28
    3cd2:	df 91       	pop	r29
    3cd4:	08 95       	ret

00003cd6 <LCD_intgerToString>:

// LCD only understands ASCII, so this converts Int to a string
void LCD_intgerToString(int data) {
    3cd6:	df 93       	push	r29
    3cd8:	cf 93       	push	r28
    3cda:	cd b7       	in	r28, 0x3d	; 61
    3cdc:	de b7       	in	r29, 0x3e	; 62
    3cde:	62 97       	sbiw	r28, 0x12	; 18
    3ce0:	0f b6       	in	r0, 0x3f	; 63
    3ce2:	f8 94       	cli
    3ce4:	de bf       	out	0x3e, r29	; 62
    3ce6:	0f be       	out	0x3f, r0	; 63
    3ce8:	cd bf       	out	0x3d, r28	; 61
    3cea:	9a 8b       	std	Y+18, r25	; 0x12
    3cec:	89 8b       	std	Y+17, r24	; 0x11
	// A string to hold the ASCII values
	char buffer[16];

	// Converts data to its ASCII
	itoa(data, buffer, 10);
    3cee:	89 89       	ldd	r24, Y+17	; 0x11
    3cf0:	9a 89       	ldd	r25, Y+18	; 0x12
    3cf2:	9e 01       	movw	r18, r28
    3cf4:	2f 5f       	subi	r18, 0xFF	; 255
    3cf6:	3f 4f       	sbci	r19, 0xFF	; 255
    3cf8:	b9 01       	movw	r22, r18
    3cfa:	4a e0       	ldi	r20, 0x0A	; 10
    3cfc:	50 e0       	ldi	r21, 0x00	; 0
    3cfe:	0e 94 a8 20 	call	0x4150	; 0x4150 <itoa>

	// Display string with the results in the buffer
	LCD_displayString(buffer);
    3d02:	ce 01       	movw	r24, r28
    3d04:	01 96       	adiw	r24, 0x01	; 1
    3d06:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <LCD_displayString>
}
    3d0a:	62 96       	adiw	r28, 0x12	; 18
    3d0c:	0f b6       	in	r0, 0x3f	; 63
    3d0e:	f8 94       	cli
    3d10:	de bf       	out	0x3e, r29	; 62
    3d12:	0f be       	out	0x3f, r0	; 63
    3d14:	cd bf       	out	0x3d, r28	; 61
    3d16:	cf 91       	pop	r28
    3d18:	df 91       	pop	r29
    3d1a:	08 95       	ret

00003d1c <LCD_clearScreen>:

// Clears the LCD from any garbage
void LCD_clearScreen(void) {
    3d1c:	df 93       	push	r29
    3d1e:	cf 93       	push	r28
    3d20:	cd b7       	in	r28, 0x3d	; 61
    3d22:	de b7       	in	r29, 0x3e	; 62
	// Clears the LCD Display
	LCD_sendCommand(LCD_CLEAR_DISPLAY);
    3d24:	81 e0       	ldi	r24, 0x01	; 1
    3d26:	0e 94 43 15 	call	0x2a86	; 0x2a86 <LCD_sendCommand>
}
    3d2a:	cf 91       	pop	r28
    3d2c:	df 91       	pop	r29
    3d2e:	08 95       	ret

00003d30 <KEYPAD_Init>:
	#endif

#endif /* STD_KEYPAD */


void KEYPAD_Init(void) {
    3d30:	df 93       	push	r29
    3d32:	cf 93       	push	r28
    3d34:	cd b7       	in	r28, 0x3d	; 61
    3d36:	de b7       	in	r29, 0x3e	; 62
		/* Setup PORT and PINS for for KEYPAD Rows*/
		GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN, PIN_INPUT);
    3d38:	81 e0       	ldi	r24, 0x01	; 1
    3d3a:	64 e0       	ldi	r22, 0x04	; 4
    3d3c:	40 e0       	ldi	r20, 0x00	; 0
    3d3e:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN+1, PIN_INPUT);
    3d42:	81 e0       	ldi	r24, 0x01	; 1
    3d44:	65 e0       	ldi	r22, 0x05	; 5
    3d46:	40 e0       	ldi	r20, 0x00	; 0
    3d48:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN+2, PIN_INPUT);
    3d4c:	81 e0       	ldi	r24, 0x01	; 1
    3d4e:	66 e0       	ldi	r22, 0x06	; 6
    3d50:	40 e0       	ldi	r20, 0x00	; 0
    3d52:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN+3, PIN_INPUT);
    3d56:	81 e0       	ldi	r24, 0x01	; 1
    3d58:	67 e0       	ldi	r22, 0x07	; 7
    3d5a:	40 e0       	ldi	r20, 0x00	; 0
    3d5c:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <GPIO_setupPinDirection>

		/* Setup PORT and PINS for for KEYPAD Columns*/
		GPIO_setupPinDirection(KEYPAD_COL_PORT, KEYPAD_FIRSTCOL_PIN, PIN_INPUT);
    3d60:	81 e0       	ldi	r24, 0x01	; 1
    3d62:	60 e0       	ldi	r22, 0x00	; 0
    3d64:	40 e0       	ldi	r20, 0x00	; 0
    3d66:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(KEYPAD_COL_PORT, KEYPAD_FIRSTCOL_PIN+1, PIN_INPUT);
    3d6a:	81 e0       	ldi	r24, 0x01	; 1
    3d6c:	61 e0       	ldi	r22, 0x01	; 1
    3d6e:	40 e0       	ldi	r20, 0x00	; 0
    3d70:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(KEYPAD_COL_PORT, KEYPAD_FIRSTCOL_PIN+2, PIN_INPUT);
    3d74:	81 e0       	ldi	r24, 0x01	; 1
    3d76:	62 e0       	ldi	r22, 0x02	; 2
    3d78:	40 e0       	ldi	r20, 0x00	; 0
    3d7a:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <GPIO_setupPinDirection>

		#if(KEYPAD_COL_NUM == 4)
			GPIO_setupPinDirection(KEYPAD_COL_PORT, KEYPAD_FIRSTCOL_PIN+3, PIN_INPUT);
		#endif
}
    3d7e:	cf 91       	pop	r28
    3d80:	df 91       	pop	r29
    3d82:	08 95       	ret

00003d84 <KEYPAD_getPressedKey>:


uint8 KEYPAD_getPressedKey(void) {
    3d84:	df 93       	push	r29
    3d86:	cf 93       	push	r28
    3d88:	00 d0       	rcall	.+0      	; 0x3d8a <KEYPAD_getPressedKey+0x6>
    3d8a:	cd b7       	in	r28, 0x3d	; 61
    3d8c:	de b7       	in	r29, 0x3e	; 62
	uint8 row, col;
	while(1) {
			for (row = 0 ; row < KEYPAD_ROW_NUM ; row++) {
    3d8e:	1a 82       	std	Y+2, r1	; 0x02
    3d90:	3a c0       	rjmp	.+116    	; 0x3e06 <KEYPAD_getPressedKey+0x82>
				// I set the pin by '1' for the row, and will iterate
				GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, PIN_OUTPUT);
    3d92:	8a 81       	ldd	r24, Y+2	; 0x02
    3d94:	98 2f       	mov	r25, r24
    3d96:	9c 5f       	subi	r25, 0xFC	; 252
    3d98:	81 e0       	ldi	r24, 0x01	; 1
    3d9a:	69 2f       	mov	r22, r25
    3d9c:	41 e0       	ldi	r20, 0x01	; 1
    3d9e:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <GPIO_setupPinDirection>

				/* Set/Clear the row output pin */
				GPIO_writePin(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, KEYPAD_BUTTON_PRESSED);
    3da2:	8a 81       	ldd	r24, Y+2	; 0x02
    3da4:	98 2f       	mov	r25, r24
    3da6:	9c 5f       	subi	r25, 0xFC	; 252
    3da8:	81 e0       	ldi	r24, 0x01	; 1
    3daa:	69 2f       	mov	r22, r25
    3dac:	40 e0       	ldi	r20, 0x00	; 0
    3dae:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <GPIO_writePin>

				for (col = 0 ; col < KEYPAD_COL_NUM ; col++) {
    3db2:	19 82       	std	Y+1, r1	; 0x01
    3db4:	1a c0       	rjmp	.+52     	; 0x3dea <KEYPAD_getPressedKey+0x66>
					/* Check if the switch is pressed in this column */
					if(GPIO_readPin(KEYPAD_COL_PORT,KEYPAD_FIRSTCOL_PIN + col) == KEYPAD_BUTTON_PRESSED) {
    3db6:	81 e0       	ldi	r24, 0x01	; 1
    3db8:	69 81       	ldd	r22, Y+1	; 0x01
    3dba:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <GPIO_readPin>
    3dbe:	88 23       	and	r24, r24
    3dc0:	89 f4       	brne	.+34     	; 0x3de4 <KEYPAD_getPressedKey+0x60>
						#if (KEYPAD_COL_NUM == 3)
							#ifdef STD_KEYPAD
								return ( (row * KEYPAD_COL_NUM) + col + 1);
    3dc2:	8a 81       	ldd	r24, Y+2	; 0x02
    3dc4:	28 2f       	mov	r18, r24
    3dc6:	30 e0       	ldi	r19, 0x00	; 0
    3dc8:	c9 01       	movw	r24, r18
    3dca:	88 0f       	add	r24, r24
    3dcc:	99 1f       	adc	r25, r25
    3dce:	82 0f       	add	r24, r18
    3dd0:	93 1f       	adc	r25, r19
    3dd2:	98 2f       	mov	r25, r24
    3dd4:	89 81       	ldd	r24, Y+1	; 0x01
    3dd6:	89 0f       	add	r24, r25
    3dd8:	8f 5f       	subi	r24, 0xFF	; 255
					}
				}
				GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, PIN_INPUT);
			}
		}
}
    3dda:	0f 90       	pop	r0
    3ddc:	0f 90       	pop	r0
    3dde:	cf 91       	pop	r28
    3de0:	df 91       	pop	r29
    3de2:	08 95       	ret
				GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, PIN_OUTPUT);

				/* Set/Clear the row output pin */
				GPIO_writePin(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, KEYPAD_BUTTON_PRESSED);

				for (col = 0 ; col < KEYPAD_COL_NUM ; col++) {
    3de4:	89 81       	ldd	r24, Y+1	; 0x01
    3de6:	8f 5f       	subi	r24, 0xFF	; 255
    3de8:	89 83       	std	Y+1, r24	; 0x01
    3dea:	89 81       	ldd	r24, Y+1	; 0x01
    3dec:	83 30       	cpi	r24, 0x03	; 3
    3dee:	18 f3       	brcs	.-58     	; 0x3db6 <KEYPAD_getPressedKey+0x32>
								return KEYPAD_4x4_adjustKeyNumber( (row * KEYPAD_COL_NUM) + col + 1);
							#endif
						#endif
					}
				}
				GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, PIN_INPUT);
    3df0:	8a 81       	ldd	r24, Y+2	; 0x02
    3df2:	98 2f       	mov	r25, r24
    3df4:	9c 5f       	subi	r25, 0xFC	; 252
    3df6:	81 e0       	ldi	r24, 0x01	; 1
    3df8:	69 2f       	mov	r22, r25
    3dfa:	40 e0       	ldi	r20, 0x00	; 0
    3dfc:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <GPIO_setupPinDirection>


uint8 KEYPAD_getPressedKey(void) {
	uint8 row, col;
	while(1) {
			for (row = 0 ; row < KEYPAD_ROW_NUM ; row++) {
    3e00:	8a 81       	ldd	r24, Y+2	; 0x02
    3e02:	8f 5f       	subi	r24, 0xFF	; 255
    3e04:	8a 83       	std	Y+2, r24	; 0x02
    3e06:	8a 81       	ldd	r24, Y+2	; 0x02
    3e08:	84 30       	cpi	r24, 0x04	; 4
    3e0a:	18 f2       	brcs	.-122    	; 0x3d92 <KEYPAD_getPressedKey+0xe>
    3e0c:	c0 cf       	rjmp	.-128    	; 0x3d8e <KEYPAD_getPressedKey+0xa>

00003e0e <EEPROM_writeByte>:
#include "avr/io.h" /* To use the IO Ports Registers */
#include <util/delay.h>



uint8 EEPROM_writeByte(uint16 u16Address, uint8 u8Data) {
    3e0e:	df 93       	push	r29
    3e10:	cf 93       	push	r28
    3e12:	00 d0       	rcall	.+0      	; 0x3e14 <EEPROM_writeByte+0x6>
    3e14:	00 d0       	rcall	.+0      	; 0x3e16 <EEPROM_writeByte+0x8>
    3e16:	0f 92       	push	r0
    3e18:	cd b7       	in	r28, 0x3d	; 61
    3e1a:	de b7       	in	r29, 0x3e	; 62
    3e1c:	9b 83       	std	Y+3, r25	; 0x03
    3e1e:	8a 83       	std	Y+2, r24	; 0x02
    3e20:	6c 83       	std	Y+4, r22	; 0x04
	I2C_start();
    3e22:	0e 94 ed 0c 	call	0x19da	; 0x19da <I2C_start>
	if (I2C_getStatus() != I2C_START) {
    3e26:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <I2C_getStatus>
    3e2a:	88 30       	cpi	r24, 0x08	; 8
    3e2c:	11 f0       	breq	.+4      	; 0x3e32 <EEPROM_writeByte+0x24>
	        return ERROR;
    3e2e:	1d 82       	std	Y+5, r1	; 0x05
    3e30:	2a c0       	rjmp	.+84     	; 0x3e86 <EEPROM_writeByte+0x78>
	 * EEPROM address is 11 bits, the 3 MSB is the device address
	 * The other bits are the word address
	 * but the device address is again shifted to another 8 bit frame:
	 * the 4 MSB is 1010, then the Device Address, then R/W
	 */
	uint8 EEPROM_ADDRESS_EQN = (uint8) (0xA0 | ( (u16Address & 0x0700) >> 7) );
    3e32:	8a 81       	ldd	r24, Y+2	; 0x02
    3e34:	9b 81       	ldd	r25, Y+3	; 0x03
    3e36:	80 70       	andi	r24, 0x00	; 0
    3e38:	97 70       	andi	r25, 0x07	; 7
    3e3a:	88 0f       	add	r24, r24
    3e3c:	89 2f       	mov	r24, r25
    3e3e:	88 1f       	adc	r24, r24
    3e40:	99 0b       	sbc	r25, r25
    3e42:	91 95       	neg	r25
    3e44:	80 6a       	ori	r24, 0xA0	; 160
    3e46:	89 83       	std	Y+1, r24	; 0x01
	// 0xA0 = 1010, 0x0700 = 0b111 0000 000
	I2C_writeByte(EEPROM_ADDRESS_EQN);
    3e48:	89 81       	ldd	r24, Y+1	; 0x01
    3e4a:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <I2C_writeByte>
	if (I2C_getStatus() != I2C_MT_SLA_W_ACK) {
    3e4e:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <I2C_getStatus>
    3e52:	88 31       	cpi	r24, 0x18	; 24
    3e54:	11 f0       	breq	.+4      	; 0x3e5a <EEPROM_writeByte+0x4c>
		return ERROR;
    3e56:	1d 82       	std	Y+5, r1	; 0x05
    3e58:	16 c0       	rjmp	.+44     	; 0x3e86 <EEPROM_writeByte+0x78>
	}

	I2C_writeByte((uint8) (u16Address));
    3e5a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e5c:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <I2C_writeByte>
	if (I2C_getStatus() != I2C_MT_DATA_ACK) {
    3e60:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <I2C_getStatus>
    3e64:	88 32       	cpi	r24, 0x28	; 40
    3e66:	11 f0       	breq	.+4      	; 0x3e6c <EEPROM_writeByte+0x5e>
		return ERROR;
    3e68:	1d 82       	std	Y+5, r1	; 0x05
    3e6a:	0d c0       	rjmp	.+26     	; 0x3e86 <EEPROM_writeByte+0x78>
	}

	I2C_writeByte(u8Data);
    3e6c:	8c 81       	ldd	r24, Y+4	; 0x04
    3e6e:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <I2C_writeByte>
	if (I2C_getStatus() != I2C_MT_DATA_ACK) {
    3e72:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <I2C_getStatus>
    3e76:	88 32       	cpi	r24, 0x28	; 40
    3e78:	11 f0       	breq	.+4      	; 0x3e7e <EEPROM_writeByte+0x70>
		return ERROR;
    3e7a:	1d 82       	std	Y+5, r1	; 0x05
    3e7c:	04 c0       	rjmp	.+8      	; 0x3e86 <EEPROM_writeByte+0x78>
	}

	I2C_stop();
    3e7e:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <I2C_stop>

	return SUCCESS;
    3e82:	81 e0       	ldi	r24, 0x01	; 1
    3e84:	8d 83       	std	Y+5, r24	; 0x05
    3e86:	8d 81       	ldd	r24, Y+5	; 0x05
}
    3e88:	0f 90       	pop	r0
    3e8a:	0f 90       	pop	r0
    3e8c:	0f 90       	pop	r0
    3e8e:	0f 90       	pop	r0
    3e90:	0f 90       	pop	r0
    3e92:	cf 91       	pop	r28
    3e94:	df 91       	pop	r29
    3e96:	08 95       	ret

00003e98 <EEPROM_readByte>:


uint8 EEPROM_readByte(uint16 u16Address, uint8 *u8Data) {
    3e98:	df 93       	push	r29
    3e9a:	cf 93       	push	r28
    3e9c:	00 d0       	rcall	.+0      	; 0x3e9e <EEPROM_readByte+0x6>
    3e9e:	00 d0       	rcall	.+0      	; 0x3ea0 <EEPROM_readByte+0x8>
    3ea0:	00 d0       	rcall	.+0      	; 0x3ea2 <EEPROM_readByte+0xa>
    3ea2:	cd b7       	in	r28, 0x3d	; 61
    3ea4:	de b7       	in	r29, 0x3e	; 62
    3ea6:	9b 83       	std	Y+3, r25	; 0x03
    3ea8:	8a 83       	std	Y+2, r24	; 0x02
    3eaa:	7d 83       	std	Y+5, r23	; 0x05
    3eac:	6c 83       	std	Y+4, r22	; 0x04
	I2C_start();
    3eae:	0e 94 ed 0c 	call	0x19da	; 0x19da <I2C_start>
	if (I2C_getStatus() != I2C_START) {
    3eb2:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <I2C_getStatus>
    3eb6:	88 30       	cpi	r24, 0x08	; 8
    3eb8:	11 f0       	breq	.+4      	; 0x3ebe <EEPROM_readByte+0x26>
			return ERROR;
    3eba:	1e 82       	std	Y+6, r1	; 0x06
    3ebc:	3e c0       	rjmp	.+124    	; 0x3f3a <EEPROM_readByte+0xa2>
	 * EEPROM address is 11 bits, the 3 MSB is the device address
	 * The other bits are the word address
	 * but the device address is again shifted to another 8 bit frame:
	 * the 4 MSB is 1010, then the Device Address, then R/W
	 */
	uint8 EEPROM_ADDRESS_EQN = (uint8) (0xA0 | ( (u16Address & 0x0700) >> 7) );
    3ebe:	8a 81       	ldd	r24, Y+2	; 0x02
    3ec0:	9b 81       	ldd	r25, Y+3	; 0x03
    3ec2:	80 70       	andi	r24, 0x00	; 0
    3ec4:	97 70       	andi	r25, 0x07	; 7
    3ec6:	88 0f       	add	r24, r24
    3ec8:	89 2f       	mov	r24, r25
    3eca:	88 1f       	adc	r24, r24
    3ecc:	99 0b       	sbc	r25, r25
    3ece:	91 95       	neg	r25
    3ed0:	80 6a       	ori	r24, 0xA0	; 160
    3ed2:	89 83       	std	Y+1, r24	; 0x01
	// 0xA0 = 1010, 0x0700 = 0b111 0000 000
	I2C_writeByte(EEPROM_ADDRESS_EQN);
    3ed4:	89 81       	ldd	r24, Y+1	; 0x01
    3ed6:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <I2C_writeByte>
	if (I2C_getStatus() != I2C_MT_SLA_W_ACK) {
    3eda:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <I2C_getStatus>
    3ede:	88 31       	cpi	r24, 0x18	; 24
    3ee0:	11 f0       	breq	.+4      	; 0x3ee6 <EEPROM_readByte+0x4e>
		return ERROR;
    3ee2:	1e 82       	std	Y+6, r1	; 0x06
    3ee4:	2a c0       	rjmp	.+84     	; 0x3f3a <EEPROM_readByte+0xa2>
	}

	I2C_writeByte((uint8) (u16Address));
    3ee6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ee8:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <I2C_writeByte>
	if (I2C_getStatus() != I2C_MT_DATA_ACK) {
    3eec:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <I2C_getStatus>
    3ef0:	88 32       	cpi	r24, 0x28	; 40
    3ef2:	11 f0       	breq	.+4      	; 0x3ef8 <EEPROM_readByte+0x60>
		return ERROR;
    3ef4:	1e 82       	std	Y+6, r1	; 0x06
    3ef6:	21 c0       	rjmp	.+66     	; 0x3f3a <EEPROM_readByte+0xa2>
	}

	I2C_start();
    3ef8:	0e 94 ed 0c 	call	0x19da	; 0x19da <I2C_start>
	if (I2C_getStatus() != I2C_REP_START) {
    3efc:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <I2C_getStatus>
    3f00:	80 31       	cpi	r24, 0x10	; 16
    3f02:	11 f0       	breq	.+4      	; 0x3f08 <EEPROM_readByte+0x70>
		return ERROR;
    3f04:	1e 82       	std	Y+6, r1	; 0x06
    3f06:	19 c0       	rjmp	.+50     	; 0x3f3a <EEPROM_readByte+0xa2>
	}

	I2C_writeByte(EEPROM_ADDRESS_EQN | 1); // For Reading
    3f08:	89 81       	ldd	r24, Y+1	; 0x01
    3f0a:	81 60       	ori	r24, 0x01	; 1
    3f0c:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <I2C_writeByte>
	if (I2C_getStatus() != I2C_MT_SLA_R_ACK) {
    3f10:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <I2C_getStatus>
    3f14:	80 34       	cpi	r24, 0x40	; 64
    3f16:	11 f0       	breq	.+4      	; 0x3f1c <EEPROM_readByte+0x84>
		return ERROR;
    3f18:	1e 82       	std	Y+6, r1	; 0x06
    3f1a:	0f c0       	rjmp	.+30     	; 0x3f3a <EEPROM_readByte+0xa2>
	}

	*u8Data = I2C_readByteWithNACK();
    3f1c:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <I2C_readByteWithNACK>
    3f20:	ec 81       	ldd	r30, Y+4	; 0x04
    3f22:	fd 81       	ldd	r31, Y+5	; 0x05
    3f24:	80 83       	st	Z, r24
	if (I2C_getStatus() != I2C_MR_DATA_NACK) {
    3f26:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <I2C_getStatus>
    3f2a:	88 35       	cpi	r24, 0x58	; 88
    3f2c:	11 f0       	breq	.+4      	; 0x3f32 <EEPROM_readByte+0x9a>
		return ERROR;
    3f2e:	1e 82       	std	Y+6, r1	; 0x06
    3f30:	04 c0       	rjmp	.+8      	; 0x3f3a <EEPROM_readByte+0xa2>
	}

	I2C_stop();
    3f32:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <I2C_stop>

	return SUCCESS;
    3f36:	81 e0       	ldi	r24, 0x01	; 1
    3f38:	8e 83       	std	Y+6, r24	; 0x06
    3f3a:	8e 81       	ldd	r24, Y+6	; 0x06
}
    3f3c:	26 96       	adiw	r28, 0x06	; 6
    3f3e:	0f b6       	in	r0, 0x3f	; 63
    3f40:	f8 94       	cli
    3f42:	de bf       	out	0x3e, r29	; 62
    3f44:	0f be       	out	0x3f, r0	; 63
    3f46:	cd bf       	out	0x3d, r28	; 61
    3f48:	cf 91       	pop	r28
    3f4a:	df 91       	pop	r29
    3f4c:	08 95       	ret

00003f4e <BUTTON_Init>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
BUTTON_Error_t BUTTON_Init(uint8 port_num, uint8 pin_num) {
    3f4e:	df 93       	push	r29
    3f50:	cf 93       	push	r28
    3f52:	00 d0       	rcall	.+0      	; 0x3f54 <BUTTON_Init+0x6>
    3f54:	0f 92       	push	r0
    3f56:	cd b7       	in	r28, 0x3d	; 61
    3f58:	de b7       	in	r29, 0x3e	; 62
    3f5a:	8a 83       	std	Y+2, r24	; 0x02
    3f5c:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t BUTTON_Driver_Checker = NULL;
    3f5e:	19 82       	std	Y+1, r1	; 0x01
	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    3f60:	8b 81       	ldd	r24, Y+3	; 0x03
    3f62:	88 30       	cpi	r24, 0x08	; 8
    3f64:	18 f0       	brcs	.+6      	; 0x3f6c <BUTTON_Init+0x1e>
		BUTTON_Driver_Checker = BUTTON_WRONG_PIN_NUMBER;
    3f66:	81 e0       	ldi	r24, 0x01	; 1
    3f68:	89 83       	std	Y+1, r24	; 0x01
    3f6a:	0c c0       	rjmp	.+24     	; 0x3f84 <BUTTON_Init+0x36>
	}
	else if((port_num >= NUM_OF_PORTS)) {
    3f6c:	8a 81       	ldd	r24, Y+2	; 0x02
    3f6e:	84 30       	cpi	r24, 0x04	; 4
    3f70:	18 f0       	brcs	.+6      	; 0x3f78 <BUTTON_Init+0x2a>
		BUTTON_Driver_Checker = BUTTON_WRONG_PORT_NUMBER;
    3f72:	82 e0       	ldi	r24, 0x02	; 2
    3f74:	89 83       	std	Y+1, r24	; 0x01
    3f76:	06 c0       	rjmp	.+12     	; 0x3f84 <BUTTON_Init+0x36>
	}
	else {
		/* Setup the pin direction as required */
		GPIO_setupPinDirection(port_num, pin_num, PIN_INPUT);
    3f78:	8a 81       	ldd	r24, Y+2	; 0x02
    3f7a:	6b 81       	ldd	r22, Y+3	; 0x03
    3f7c:	40 e0       	ldi	r20, 0x00	; 0
    3f7e:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <GPIO_setupPinDirection>
		BUTTON_Driver_Checker = BUTTON_OK;
    3f82:	19 82       	std	Y+1, r1	; 0x01
	}
	return BUTTON_Driver_Checker;
    3f84:	89 81       	ldd	r24, Y+1	; 0x01
}
    3f86:	0f 90       	pop	r0
    3f88:	0f 90       	pop	r0
    3f8a:	0f 90       	pop	r0
    3f8c:	cf 91       	pop	r28
    3f8e:	df 91       	pop	r29
    3f90:	08 95       	ret

00003f92 <BUTTON_Read>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
uint8 BUTTON_Read(uint8 port_num, uint8 pin_num) {
    3f92:	df 93       	push	r29
    3f94:	cf 93       	push	r28
    3f96:	00 d0       	rcall	.+0      	; 0x3f98 <BUTTON_Read+0x6>
    3f98:	0f 92       	push	r0
    3f9a:	cd b7       	in	r28, 0x3d	; 61
    3f9c:	de b7       	in	r29, 0x3e	; 62
    3f9e:	8a 83       	std	Y+2, r24	; 0x02
    3fa0:	6b 83       	std	Y+3, r22	; 0x03

	uint8_t BUTTON_Driver_Checker = NULL;
    3fa2:	19 82       	std	Y+1, r1	; 0x01
		if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    3fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    3fa6:	88 30       	cpi	r24, 0x08	; 8
    3fa8:	18 f0       	brcs	.+6      	; 0x3fb0 <BUTTON_Read+0x1e>
			BUTTON_Driver_Checker = BUTTON_WRONG_PIN_NUMBER;
    3faa:	81 e0       	ldi	r24, 0x01	; 1
    3fac:	89 83       	std	Y+1, r24	; 0x01
    3fae:	0b c0       	rjmp	.+22     	; 0x3fc6 <BUTTON_Read+0x34>
		}
		else if((port_num >= NUM_OF_PORTS)) {
    3fb0:	8a 81       	ldd	r24, Y+2	; 0x02
    3fb2:	84 30       	cpi	r24, 0x04	; 4
    3fb4:	18 f0       	brcs	.+6      	; 0x3fbc <BUTTON_Read+0x2a>
			BUTTON_Driver_Checker = BUTTON_WRONG_PORT_NUMBER;
    3fb6:	82 e0       	ldi	r24, 0x02	; 2
    3fb8:	89 83       	std	Y+1, r24	; 0x01
    3fba:	05 c0       	rjmp	.+10     	; 0x3fc6 <BUTTON_Read+0x34>
		}
		else {
			/* Setup the pin direction as required */
			GPIO_readPin(port_num, pin_num);
    3fbc:	8a 81       	ldd	r24, Y+2	; 0x02
    3fbe:	6b 81       	ldd	r22, Y+3	; 0x03
    3fc0:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <GPIO_readPin>
			BUTTON_Driver_Checker = BUTTON_OK;
    3fc4:	19 82       	std	Y+1, r1	; 0x01
		}
		return GPIO_readPin(port_num, pin_num);
    3fc6:	8a 81       	ldd	r24, Y+2	; 0x02
    3fc8:	6b 81       	ldd	r22, Y+3	; 0x03
    3fca:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <GPIO_readPin>
}
    3fce:	0f 90       	pop	r0
    3fd0:	0f 90       	pop	r0
    3fd2:	0f 90       	pop	r0
    3fd4:	cf 91       	pop	r28
    3fd6:	df 91       	pop	r29
    3fd8:	08 95       	ret

00003fda <main>:

/*******************************************************************************
 *                              						Application Execution                              					  *
 *******************************************************************************/

int main(void) {
    3fda:	df 93       	push	r29
    3fdc:	cf 93       	push	r28
    3fde:	cd b7       	in	r28, 0x3d	; 61
    3fe0:	de b7       	in	r29, 0x3e	; 62

	// Initializes LED Driver
	LED_Init(PORT_C, PIN_0);
    3fe2:	82 e0       	ldi	r24, 0x02	; 2
    3fe4:	60 e0       	ldi	r22, 0x00	; 0
    3fe6:	0e 94 0a 14 	call	0x2814	; 0x2814 <LED_Init>
	LED_Off(PORT_C, PIN_0);
    3fea:	82 e0       	ldi	r24, 0x02	; 2
    3fec:	60 e0       	ldi	r22, 0x00	; 0
    3fee:	0e 94 4e 14 	call	0x289c	; 0x289c <LED_Off>


	// Initializes Button Driver
	BUTTON_Init(PORT_D, PIN_2);
    3ff2:	83 e0       	ldi	r24, 0x03	; 3
    3ff4:	62 e0       	ldi	r22, 0x02	; 2
    3ff6:	0e 94 a7 1f 	call	0x3f4e	; 0x3f4e <BUTTON_Init>
	BUTTON_Read(PORT_D, PIN_2);
    3ffa:	83 e0       	ldi	r24, 0x03	; 3
    3ffc:	62 e0       	ldi	r22, 0x02	; 2
    3ffe:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <BUTTON_Read>

	// Initializes External Interrupt Driver
	EXT_INTERRUPT_Init();
    4002:	0e 94 71 11 	call	0x22e2	; 0x22e2 <EXT_INTERRUPT_Init>
    4006:	ff cf       	rjmp	.-2      	; 0x4006 <main+0x2c>

00004008 <__vector_1>:

	}
}

// The Interrupt Service Routine that will execute the Interrupt
ISR (INT0_vect) {
    4008:	1f 92       	push	r1
    400a:	0f 92       	push	r0
    400c:	0f b6       	in	r0, 0x3f	; 63
    400e:	0f 92       	push	r0
    4010:	11 24       	eor	r1, r1
    4012:	2f 93       	push	r18
    4014:	3f 93       	push	r19
    4016:	4f 93       	push	r20
    4018:	5f 93       	push	r21
    401a:	6f 93       	push	r22
    401c:	7f 93       	push	r23
    401e:	8f 93       	push	r24
    4020:	9f 93       	push	r25
    4022:	af 93       	push	r26
    4024:	bf 93       	push	r27
    4026:	ef 93       	push	r30
    4028:	ff 93       	push	r31
    402a:	df 93       	push	r29
    402c:	cf 93       	push	r28
    402e:	cd b7       	in	r28, 0x3d	; 61
    4030:	de b7       	in	r29, 0x3e	; 62
	LED_Toggle(PORT_C, PIN_0);
    4032:	82 e0       	ldi	r24, 0x02	; 2
    4034:	60 e0       	ldi	r22, 0x00	; 0
    4036:	0e 94 70 14 	call	0x28e0	; 0x28e0 <LED_Toggle>
}
    403a:	cf 91       	pop	r28
    403c:	df 91       	pop	r29
    403e:	ff 91       	pop	r31
    4040:	ef 91       	pop	r30
    4042:	bf 91       	pop	r27
    4044:	af 91       	pop	r26
    4046:	9f 91       	pop	r25
    4048:	8f 91       	pop	r24
    404a:	7f 91       	pop	r23
    404c:	6f 91       	pop	r22
    404e:	5f 91       	pop	r21
    4050:	4f 91       	pop	r20
    4052:	3f 91       	pop	r19
    4054:	2f 91       	pop	r18
    4056:	0f 90       	pop	r0
    4058:	0f be       	out	0x3f, r0	; 63
    405a:	0f 90       	pop	r0
    405c:	1f 90       	pop	r1
    405e:	18 95       	reti

00004060 <__mulsi3>:
    4060:	62 9f       	mul	r22, r18
    4062:	d0 01       	movw	r26, r0
    4064:	73 9f       	mul	r23, r19
    4066:	f0 01       	movw	r30, r0
    4068:	82 9f       	mul	r24, r18
    406a:	e0 0d       	add	r30, r0
    406c:	f1 1d       	adc	r31, r1
    406e:	64 9f       	mul	r22, r20
    4070:	e0 0d       	add	r30, r0
    4072:	f1 1d       	adc	r31, r1
    4074:	92 9f       	mul	r25, r18
    4076:	f0 0d       	add	r31, r0
    4078:	83 9f       	mul	r24, r19
    407a:	f0 0d       	add	r31, r0
    407c:	74 9f       	mul	r23, r20
    407e:	f0 0d       	add	r31, r0
    4080:	65 9f       	mul	r22, r21
    4082:	f0 0d       	add	r31, r0
    4084:	99 27       	eor	r25, r25
    4086:	72 9f       	mul	r23, r18
    4088:	b0 0d       	add	r27, r0
    408a:	e1 1d       	adc	r30, r1
    408c:	f9 1f       	adc	r31, r25
    408e:	63 9f       	mul	r22, r19
    4090:	b0 0d       	add	r27, r0
    4092:	e1 1d       	adc	r30, r1
    4094:	f9 1f       	adc	r31, r25
    4096:	bd 01       	movw	r22, r26
    4098:	cf 01       	movw	r24, r30
    409a:	11 24       	eor	r1, r1
    409c:	08 95       	ret

0000409e <__udivmodsi4>:
    409e:	a1 e2       	ldi	r26, 0x21	; 33
    40a0:	1a 2e       	mov	r1, r26
    40a2:	aa 1b       	sub	r26, r26
    40a4:	bb 1b       	sub	r27, r27
    40a6:	fd 01       	movw	r30, r26
    40a8:	0d c0       	rjmp	.+26     	; 0x40c4 <__udivmodsi4_ep>

000040aa <__udivmodsi4_loop>:
    40aa:	aa 1f       	adc	r26, r26
    40ac:	bb 1f       	adc	r27, r27
    40ae:	ee 1f       	adc	r30, r30
    40b0:	ff 1f       	adc	r31, r31
    40b2:	a2 17       	cp	r26, r18
    40b4:	b3 07       	cpc	r27, r19
    40b6:	e4 07       	cpc	r30, r20
    40b8:	f5 07       	cpc	r31, r21
    40ba:	20 f0       	brcs	.+8      	; 0x40c4 <__udivmodsi4_ep>
    40bc:	a2 1b       	sub	r26, r18
    40be:	b3 0b       	sbc	r27, r19
    40c0:	e4 0b       	sbc	r30, r20
    40c2:	f5 0b       	sbc	r31, r21

000040c4 <__udivmodsi4_ep>:
    40c4:	66 1f       	adc	r22, r22
    40c6:	77 1f       	adc	r23, r23
    40c8:	88 1f       	adc	r24, r24
    40ca:	99 1f       	adc	r25, r25
    40cc:	1a 94       	dec	r1
    40ce:	69 f7       	brne	.-38     	; 0x40aa <__udivmodsi4_loop>
    40d0:	60 95       	com	r22
    40d2:	70 95       	com	r23
    40d4:	80 95       	com	r24
    40d6:	90 95       	com	r25
    40d8:	9b 01       	movw	r18, r22
    40da:	ac 01       	movw	r20, r24
    40dc:	bd 01       	movw	r22, r26
    40de:	cf 01       	movw	r24, r30
    40e0:	08 95       	ret

000040e2 <__prologue_saves__>:
    40e2:	2f 92       	push	r2
    40e4:	3f 92       	push	r3
    40e6:	4f 92       	push	r4
    40e8:	5f 92       	push	r5
    40ea:	6f 92       	push	r6
    40ec:	7f 92       	push	r7
    40ee:	8f 92       	push	r8
    40f0:	9f 92       	push	r9
    40f2:	af 92       	push	r10
    40f4:	bf 92       	push	r11
    40f6:	cf 92       	push	r12
    40f8:	df 92       	push	r13
    40fa:	ef 92       	push	r14
    40fc:	ff 92       	push	r15
    40fe:	0f 93       	push	r16
    4100:	1f 93       	push	r17
    4102:	cf 93       	push	r28
    4104:	df 93       	push	r29
    4106:	cd b7       	in	r28, 0x3d	; 61
    4108:	de b7       	in	r29, 0x3e	; 62
    410a:	ca 1b       	sub	r28, r26
    410c:	db 0b       	sbc	r29, r27
    410e:	0f b6       	in	r0, 0x3f	; 63
    4110:	f8 94       	cli
    4112:	de bf       	out	0x3e, r29	; 62
    4114:	0f be       	out	0x3f, r0	; 63
    4116:	cd bf       	out	0x3d, r28	; 61
    4118:	09 94       	ijmp

0000411a <__epilogue_restores__>:
    411a:	2a 88       	ldd	r2, Y+18	; 0x12
    411c:	39 88       	ldd	r3, Y+17	; 0x11
    411e:	48 88       	ldd	r4, Y+16	; 0x10
    4120:	5f 84       	ldd	r5, Y+15	; 0x0f
    4122:	6e 84       	ldd	r6, Y+14	; 0x0e
    4124:	7d 84       	ldd	r7, Y+13	; 0x0d
    4126:	8c 84       	ldd	r8, Y+12	; 0x0c
    4128:	9b 84       	ldd	r9, Y+11	; 0x0b
    412a:	aa 84       	ldd	r10, Y+10	; 0x0a
    412c:	b9 84       	ldd	r11, Y+9	; 0x09
    412e:	c8 84       	ldd	r12, Y+8	; 0x08
    4130:	df 80       	ldd	r13, Y+7	; 0x07
    4132:	ee 80       	ldd	r14, Y+6	; 0x06
    4134:	fd 80       	ldd	r15, Y+5	; 0x05
    4136:	0c 81       	ldd	r16, Y+4	; 0x04
    4138:	1b 81       	ldd	r17, Y+3	; 0x03
    413a:	aa 81       	ldd	r26, Y+2	; 0x02
    413c:	b9 81       	ldd	r27, Y+1	; 0x01
    413e:	ce 0f       	add	r28, r30
    4140:	d1 1d       	adc	r29, r1
    4142:	0f b6       	in	r0, 0x3f	; 63
    4144:	f8 94       	cli
    4146:	de bf       	out	0x3e, r29	; 62
    4148:	0f be       	out	0x3f, r0	; 63
    414a:	cd bf       	out	0x3d, r28	; 61
    414c:	ed 01       	movw	r28, r26
    414e:	08 95       	ret

00004150 <itoa>:
    4150:	fb 01       	movw	r30, r22
    4152:	9f 01       	movw	r18, r30
    4154:	e8 94       	clt
    4156:	42 30       	cpi	r20, 0x02	; 2
    4158:	c4 f0       	brlt	.+48     	; 0x418a <itoa+0x3a>
    415a:	45 32       	cpi	r20, 0x25	; 37
    415c:	b4 f4       	brge	.+44     	; 0x418a <itoa+0x3a>
    415e:	4a 30       	cpi	r20, 0x0A	; 10
    4160:	29 f4       	brne	.+10     	; 0x416c <itoa+0x1c>
    4162:	97 fb       	bst	r25, 7
    4164:	1e f4       	brtc	.+6      	; 0x416c <itoa+0x1c>
    4166:	90 95       	com	r25
    4168:	81 95       	neg	r24
    416a:	9f 4f       	sbci	r25, 0xFF	; 255
    416c:	64 2f       	mov	r22, r20
    416e:	77 27       	eor	r23, r23
    4170:	0e 94 55 21 	call	0x42aa	; 0x42aa <__udivmodhi4>
    4174:	80 5d       	subi	r24, 0xD0	; 208
    4176:	8a 33       	cpi	r24, 0x3A	; 58
    4178:	0c f0       	brlt	.+2      	; 0x417c <itoa+0x2c>
    417a:	89 5d       	subi	r24, 0xD9	; 217
    417c:	81 93       	st	Z+, r24
    417e:	cb 01       	movw	r24, r22
    4180:	00 97       	sbiw	r24, 0x00	; 0
    4182:	a1 f7       	brne	.-24     	; 0x416c <itoa+0x1c>
    4184:	16 f4       	brtc	.+4      	; 0x418a <itoa+0x3a>
    4186:	5d e2       	ldi	r21, 0x2D	; 45
    4188:	51 93       	st	Z+, r21
    418a:	10 82       	st	Z, r1
    418c:	c9 01       	movw	r24, r18
    418e:	0c 94 23 21 	jmp	0x4246	; 0x4246 <strrev>

00004192 <ceil>:
    4192:	3b d0       	rcall	.+118    	; 0x420a <__fp_trunc>
    4194:	80 f0       	brcs	.+32     	; 0x41b6 <ceil+0x24>
    4196:	9f 37       	cpi	r25, 0x7F	; 127
    4198:	40 f4       	brcc	.+16     	; 0x41aa <ceil+0x18>
    419a:	91 11       	cpse	r25, r1
    419c:	0e f4       	brtc	.+2      	; 0x41a0 <ceil+0xe>
    419e:	4d c0       	rjmp	.+154    	; 0x423a <__fp_szero>
    41a0:	60 e0       	ldi	r22, 0x00	; 0
    41a2:	70 e0       	ldi	r23, 0x00	; 0
    41a4:	80 e8       	ldi	r24, 0x80	; 128
    41a6:	9f e3       	ldi	r25, 0x3F	; 63
    41a8:	08 95       	ret
    41aa:	26 f0       	brts	.+8      	; 0x41b4 <ceil+0x22>
    41ac:	1b 16       	cp	r1, r27
    41ae:	61 1d       	adc	r22, r1
    41b0:	71 1d       	adc	r23, r1
    41b2:	81 1d       	adc	r24, r1
    41b4:	01 c0       	rjmp	.+2      	; 0x41b8 <__fp_mintl>
    41b6:	1b c0       	rjmp	.+54     	; 0x41ee <__fp_mpack>

000041b8 <__fp_mintl>:
    41b8:	88 23       	and	r24, r24
    41ba:	71 f4       	brne	.+28     	; 0x41d8 <__fp_mintl+0x20>
    41bc:	77 23       	and	r23, r23
    41be:	21 f0       	breq	.+8      	; 0x41c8 <__fp_mintl+0x10>
    41c0:	98 50       	subi	r25, 0x08	; 8
    41c2:	87 2b       	or	r24, r23
    41c4:	76 2f       	mov	r23, r22
    41c6:	07 c0       	rjmp	.+14     	; 0x41d6 <__fp_mintl+0x1e>
    41c8:	66 23       	and	r22, r22
    41ca:	11 f4       	brne	.+4      	; 0x41d0 <__fp_mintl+0x18>
    41cc:	99 27       	eor	r25, r25
    41ce:	0d c0       	rjmp	.+26     	; 0x41ea <__fp_mintl+0x32>
    41d0:	90 51       	subi	r25, 0x10	; 16
    41d2:	86 2b       	or	r24, r22
    41d4:	70 e0       	ldi	r23, 0x00	; 0
    41d6:	60 e0       	ldi	r22, 0x00	; 0
    41d8:	2a f0       	brmi	.+10     	; 0x41e4 <__fp_mintl+0x2c>
    41da:	9a 95       	dec	r25
    41dc:	66 0f       	add	r22, r22
    41de:	77 1f       	adc	r23, r23
    41e0:	88 1f       	adc	r24, r24
    41e2:	da f7       	brpl	.-10     	; 0x41da <__fp_mintl+0x22>
    41e4:	88 0f       	add	r24, r24
    41e6:	96 95       	lsr	r25
    41e8:	87 95       	ror	r24
    41ea:	97 f9       	bld	r25, 7
    41ec:	08 95       	ret

000041ee <__fp_mpack>:
    41ee:	9f 3f       	cpi	r25, 0xFF	; 255
    41f0:	31 f0       	breq	.+12     	; 0x41fe <__fp_mpack_finite+0xc>

000041f2 <__fp_mpack_finite>:
    41f2:	91 50       	subi	r25, 0x01	; 1
    41f4:	20 f4       	brcc	.+8      	; 0x41fe <__fp_mpack_finite+0xc>
    41f6:	87 95       	ror	r24
    41f8:	77 95       	ror	r23
    41fa:	67 95       	ror	r22
    41fc:	b7 95       	ror	r27
    41fe:	88 0f       	add	r24, r24
    4200:	91 1d       	adc	r25, r1
    4202:	96 95       	lsr	r25
    4204:	87 95       	ror	r24
    4206:	97 f9       	bld	r25, 7
    4208:	08 95       	ret

0000420a <__fp_trunc>:
    420a:	35 d0       	rcall	.+106    	; 0x4276 <__fp_splitA>
    420c:	a0 f0       	brcs	.+40     	; 0x4236 <__fp_trunc+0x2c>
    420e:	be e7       	ldi	r27, 0x7E	; 126
    4210:	b9 17       	cp	r27, r25
    4212:	88 f4       	brcc	.+34     	; 0x4236 <__fp_trunc+0x2c>
    4214:	bb 27       	eor	r27, r27
    4216:	9f 38       	cpi	r25, 0x8F	; 143
    4218:	60 f4       	brcc	.+24     	; 0x4232 <__fp_trunc+0x28>
    421a:	16 16       	cp	r1, r22
    421c:	b1 1d       	adc	r27, r1
    421e:	67 2f       	mov	r22, r23
    4220:	78 2f       	mov	r23, r24
    4222:	88 27       	eor	r24, r24
    4224:	98 5f       	subi	r25, 0xF8	; 248
    4226:	f7 cf       	rjmp	.-18     	; 0x4216 <__fp_trunc+0xc>
    4228:	86 95       	lsr	r24
    422a:	77 95       	ror	r23
    422c:	67 95       	ror	r22
    422e:	b1 1d       	adc	r27, r1
    4230:	93 95       	inc	r25
    4232:	96 39       	cpi	r25, 0x96	; 150
    4234:	c8 f3       	brcs	.-14     	; 0x4228 <__fp_trunc+0x1e>
    4236:	08 95       	ret

00004238 <__fp_zero>:
    4238:	e8 94       	clt

0000423a <__fp_szero>:
    423a:	bb 27       	eor	r27, r27
    423c:	66 27       	eor	r22, r22
    423e:	77 27       	eor	r23, r23
    4240:	cb 01       	movw	r24, r22
    4242:	97 f9       	bld	r25, 7
    4244:	08 95       	ret

00004246 <strrev>:
    4246:	dc 01       	movw	r26, r24
    4248:	fc 01       	movw	r30, r24
    424a:	67 2f       	mov	r22, r23
    424c:	71 91       	ld	r23, Z+
    424e:	77 23       	and	r23, r23
    4250:	e1 f7       	brne	.-8      	; 0x424a <strrev+0x4>
    4252:	32 97       	sbiw	r30, 0x02	; 2
    4254:	04 c0       	rjmp	.+8      	; 0x425e <strrev+0x18>
    4256:	7c 91       	ld	r23, X
    4258:	6d 93       	st	X+, r22
    425a:	70 83       	st	Z, r23
    425c:	62 91       	ld	r22, -Z
    425e:	ae 17       	cp	r26, r30
    4260:	bf 07       	cpc	r27, r31
    4262:	c8 f3       	brcs	.-14     	; 0x4256 <strrev+0x10>
    4264:	08 95       	ret

00004266 <__fp_split3>:
    4266:	57 fd       	sbrc	r21, 7
    4268:	90 58       	subi	r25, 0x80	; 128
    426a:	44 0f       	add	r20, r20
    426c:	55 1f       	adc	r21, r21
    426e:	59 f0       	breq	.+22     	; 0x4286 <__fp_splitA+0x10>
    4270:	5f 3f       	cpi	r21, 0xFF	; 255
    4272:	71 f0       	breq	.+28     	; 0x4290 <__fp_splitA+0x1a>
    4274:	47 95       	ror	r20

00004276 <__fp_splitA>:
    4276:	88 0f       	add	r24, r24
    4278:	97 fb       	bst	r25, 7
    427a:	99 1f       	adc	r25, r25
    427c:	61 f0       	breq	.+24     	; 0x4296 <__fp_splitA+0x20>
    427e:	9f 3f       	cpi	r25, 0xFF	; 255
    4280:	79 f0       	breq	.+30     	; 0x42a0 <__fp_splitA+0x2a>
    4282:	87 95       	ror	r24
    4284:	08 95       	ret
    4286:	12 16       	cp	r1, r18
    4288:	13 06       	cpc	r1, r19
    428a:	14 06       	cpc	r1, r20
    428c:	55 1f       	adc	r21, r21
    428e:	f2 cf       	rjmp	.-28     	; 0x4274 <__fp_split3+0xe>
    4290:	46 95       	lsr	r20
    4292:	f1 df       	rcall	.-30     	; 0x4276 <__fp_splitA>
    4294:	08 c0       	rjmp	.+16     	; 0x42a6 <__fp_splitA+0x30>
    4296:	16 16       	cp	r1, r22
    4298:	17 06       	cpc	r1, r23
    429a:	18 06       	cpc	r1, r24
    429c:	99 1f       	adc	r25, r25
    429e:	f1 cf       	rjmp	.-30     	; 0x4282 <__fp_splitA+0xc>
    42a0:	86 95       	lsr	r24
    42a2:	71 05       	cpc	r23, r1
    42a4:	61 05       	cpc	r22, r1
    42a6:	08 94       	sec
    42a8:	08 95       	ret

000042aa <__udivmodhi4>:
    42aa:	aa 1b       	sub	r26, r26
    42ac:	bb 1b       	sub	r27, r27
    42ae:	51 e1       	ldi	r21, 0x11	; 17
    42b0:	07 c0       	rjmp	.+14     	; 0x42c0 <__udivmodhi4_ep>

000042b2 <__udivmodhi4_loop>:
    42b2:	aa 1f       	adc	r26, r26
    42b4:	bb 1f       	adc	r27, r27
    42b6:	a6 17       	cp	r26, r22
    42b8:	b7 07       	cpc	r27, r23
    42ba:	10 f0       	brcs	.+4      	; 0x42c0 <__udivmodhi4_ep>
    42bc:	a6 1b       	sub	r26, r22
    42be:	b7 0b       	sbc	r27, r23

000042c0 <__udivmodhi4_ep>:
    42c0:	88 1f       	adc	r24, r24
    42c2:	99 1f       	adc	r25, r25
    42c4:	5a 95       	dec	r21
    42c6:	a9 f7       	brne	.-22     	; 0x42b2 <__udivmodhi4_loop>
    42c8:	80 95       	com	r24
    42ca:	90 95       	com	r25
    42cc:	bc 01       	movw	r22, r24
    42ce:	cd 01       	movw	r24, r26
    42d0:	08 95       	ret

000042d2 <_exit>:
    42d2:	f8 94       	cli

000042d4 <__stop_program>:
    42d4:	ff cf       	rjmp	.-2      	; 0x42d4 <__stop_program>
