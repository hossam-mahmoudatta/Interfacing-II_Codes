
KEYLCD_EX2_HOSA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002492  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00002492  00002506  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002ebc  00000000  00000000  00002524  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000017fa  00000000  00000000  000053e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00006bda  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00006d1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00006e8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00008ad3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  000099be  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000a76c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000a8cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000ab59  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b327  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e9       	ldi	r30, 0x92	; 146
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 b6 11 	call	0x236c	; 0x236c <main>
      7a:	0c 94 47 12 	jmp	0x248e	; 0x248e <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 cb 11 	jmp	0x2396	; 0x2396 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a6 e7       	ldi	r26, 0x76	; 118
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 e7 11 	jmp	0x23ce	; 0x23ce <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 d7 11 	jmp	0x23ae	; 0x23ae <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 f3 11 	jmp	0x23e6	; 0x23e6 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 d7 11 	jmp	0x23ae	; 0x23ae <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 f3 11 	jmp	0x23e6	; 0x23e6 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 cb 11 	jmp	0x2396	; 0x2396 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	86 e7       	ldi	r24, 0x76	; 118
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 e7 11 	jmp	0x23ce	; 0x23ce <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 d7 11 	jmp	0x23ae	; 0x23ae <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 f3 11 	jmp	0x23e6	; 0x23e6 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 d7 11 	jmp	0x23ae	; 0x23ae <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 f3 11 	jmp	0x23e6	; 0x23e6 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 d7 11 	jmp	0x23ae	; 0x23ae <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 f3 11 	jmp	0x23e6	; 0x23e6 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 db 11 	jmp	0x23b6	; 0x23b6 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 f7 11 	jmp	0x23ee	; 0x23ee <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__pack_f+0x178>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__pack_f+0x172>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__pack_f+0x17c>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__pack_f+0x114>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__pack_f+0x76>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__pack_f+0xca>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__pack_f+0x86>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__pack_f+0x7e>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__pack_f+0x9c>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__pack_f+0x94>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__pack_f+0xbe>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__pack_f+0xee>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__pack_f+0xf6>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__pack_f+0xf6>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__pack_f+0x10e>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__pack_f+0x162>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__pack_f+0x172>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__pack_f+0x144>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__pack_f+0x154>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__pack_f+0x14c>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__pack_f+0x162>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__pack_f+0x164>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__pack_f+0x17c>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <GPIO_setupPinDirection>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
GPIO_Error_t GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction) {
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <GPIO_setupPinDirection+0x6>
     b3c:	00 d0       	rcall	.+0      	; 0xb3e <GPIO_setupPinDirection+0x8>
     b3e:	00 d0       	rcall	.+0      	; 0xb40 <GPIO_setupPinDirection+0xa>
     b40:	cd b7       	in	r28, 0x3d	; 61
     b42:	de b7       	in	r29, 0x3e	; 62
     b44:	8a 83       	std	Y+2, r24	; 0x02
     b46:	6b 83       	std	Y+3, r22	; 0x03
     b48:	4c 83       	std	Y+4, r20	; 0x04
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t GPIO_Driver_Checker = NULL;
     b4a:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
     b4c:	8b 81       	ldd	r24, Y+3	; 0x03
     b4e:	88 30       	cpi	r24, 0x08	; 8
     b50:	18 f0       	brcs	.+6      	; 0xb58 <GPIO_setupPinDirection+0x22>
		// Checks if the entered pin number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	e1 c0       	rjmp	.+450    	; 0xd1a <GPIO_setupPinDirection+0x1e4>
	}
	else if((port_num >= NUM_OF_PORTS)) {
     b58:	8a 81       	ldd	r24, Y+2	; 0x02
     b5a:	84 30       	cpi	r24, 0x04	; 4
     b5c:	18 f0       	brcs	.+6      	; 0xb64 <GPIO_setupPinDirection+0x2e>
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
     b5e:	82 e0       	ldi	r24, 0x02	; 2
     b60:	89 83       	std	Y+1, r24	; 0x01
     b62:	db c0       	rjmp	.+438    	; 0xd1a <GPIO_setupPinDirection+0x1e4>
	}
	else if((direction != PIN_INPUT) && (direction != PIN_OUTPUT)) {
     b64:	8c 81       	ldd	r24, Y+4	; 0x04
     b66:	88 23       	and	r24, r24
     b68:	31 f0       	breq	.+12     	; 0xb76 <GPIO_setupPinDirection+0x40>
     b6a:	8c 81       	ldd	r24, Y+4	; 0x04
     b6c:	81 30       	cpi	r24, 0x01	; 1
     b6e:	19 f0       	breq	.+6      	; 0xb76 <GPIO_setupPinDirection+0x40>
		// Checks if the entered direction is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
     b70:	83 e0       	ldi	r24, 0x03	; 3
     b72:	89 83       	std	Y+1, r24	; 0x01
     b74:	d2 c0       	rjmp	.+420    	; 0xd1a <GPIO_setupPinDirection+0x1e4>
	}
	else {
		// Setup the pin direction as required
		switch(port_num) {
     b76:	8a 81       	ldd	r24, Y+2	; 0x02
     b78:	28 2f       	mov	r18, r24
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	3e 83       	std	Y+6, r19	; 0x06
     b7e:	2d 83       	std	Y+5, r18	; 0x05
     b80:	8d 81       	ldd	r24, Y+5	; 0x05
     b82:	9e 81       	ldd	r25, Y+6	; 0x06
     b84:	81 30       	cpi	r24, 0x01	; 1
     b86:	91 05       	cpc	r25, r1
     b88:	09 f4       	brne	.+2      	; 0xb8c <GPIO_setupPinDirection+0x56>
     b8a:	43 c0       	rjmp	.+134    	; 0xc12 <GPIO_setupPinDirection+0xdc>
     b8c:	2d 81       	ldd	r18, Y+5	; 0x05
     b8e:	3e 81       	ldd	r19, Y+6	; 0x06
     b90:	22 30       	cpi	r18, 0x02	; 2
     b92:	31 05       	cpc	r19, r1
     b94:	2c f4       	brge	.+10     	; 0xba0 <GPIO_setupPinDirection+0x6a>
     b96:	8d 81       	ldd	r24, Y+5	; 0x05
     b98:	9e 81       	ldd	r25, Y+6	; 0x06
     b9a:	00 97       	sbiw	r24, 0x00	; 0
     b9c:	71 f0       	breq	.+28     	; 0xbba <GPIO_setupPinDirection+0x84>
     b9e:	bc c0       	rjmp	.+376    	; 0xd18 <GPIO_setupPinDirection+0x1e2>
     ba0:	2d 81       	ldd	r18, Y+5	; 0x05
     ba2:	3e 81       	ldd	r19, Y+6	; 0x06
     ba4:	22 30       	cpi	r18, 0x02	; 2
     ba6:	31 05       	cpc	r19, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <GPIO_setupPinDirection+0x76>
     baa:	5f c0       	rjmp	.+190    	; 0xc6a <GPIO_setupPinDirection+0x134>
     bac:	8d 81       	ldd	r24, Y+5	; 0x05
     bae:	9e 81       	ldd	r25, Y+6	; 0x06
     bb0:	83 30       	cpi	r24, 0x03	; 3
     bb2:	91 05       	cpc	r25, r1
     bb4:	09 f4       	brne	.+2      	; 0xbb8 <GPIO_setupPinDirection+0x82>
     bb6:	85 c0       	rjmp	.+266    	; 0xcc2 <GPIO_setupPinDirection+0x18c>
     bb8:	af c0       	rjmp	.+350    	; 0xd18 <GPIO_setupPinDirection+0x1e2>
		case PORT_A:
			if(direction == PIN_OUTPUT) {
     bba:	8c 81       	ldd	r24, Y+4	; 0x04
     bbc:	81 30       	cpi	r24, 0x01	; 1
     bbe:	a1 f4       	brne	.+40     	; 0xbe8 <GPIO_setupPinDirection+0xb2>
				SET_BIT(DDRA, pin_num);
     bc0:	aa e3       	ldi	r26, 0x3A	; 58
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	ea e3       	ldi	r30, 0x3A	; 58
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	80 81       	ld	r24, Z
     bca:	48 2f       	mov	r20, r24
     bcc:	8b 81       	ldd	r24, Y+3	; 0x03
     bce:	28 2f       	mov	r18, r24
     bd0:	30 e0       	ldi	r19, 0x00	; 0
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	02 2e       	mov	r0, r18
     bd8:	02 c0       	rjmp	.+4      	; 0xbde <GPIO_setupPinDirection+0xa8>
     bda:	88 0f       	add	r24, r24
     bdc:	99 1f       	adc	r25, r25
     bde:	0a 94       	dec	r0
     be0:	e2 f7       	brpl	.-8      	; 0xbda <GPIO_setupPinDirection+0xa4>
     be2:	84 2b       	or	r24, r20
     be4:	8c 93       	st	X, r24
     be6:	98 c0       	rjmp	.+304    	; 0xd18 <GPIO_setupPinDirection+0x1e2>
			}
			else {
				CLR_BIT(DDRA, pin_num);
     be8:	aa e3       	ldi	r26, 0x3A	; 58
     bea:	b0 e0       	ldi	r27, 0x00	; 0
     bec:	ea e3       	ldi	r30, 0x3A	; 58
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	48 2f       	mov	r20, r24
     bf4:	8b 81       	ldd	r24, Y+3	; 0x03
     bf6:	28 2f       	mov	r18, r24
     bf8:	30 e0       	ldi	r19, 0x00	; 0
     bfa:	81 e0       	ldi	r24, 0x01	; 1
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	02 2e       	mov	r0, r18
     c00:	02 c0       	rjmp	.+4      	; 0xc06 <GPIO_setupPinDirection+0xd0>
     c02:	88 0f       	add	r24, r24
     c04:	99 1f       	adc	r25, r25
     c06:	0a 94       	dec	r0
     c08:	e2 f7       	brpl	.-8      	; 0xc02 <GPIO_setupPinDirection+0xcc>
     c0a:	80 95       	com	r24
     c0c:	84 23       	and	r24, r20
     c0e:	8c 93       	st	X, r24
     c10:	83 c0       	rjmp	.+262    	; 0xd18 <GPIO_setupPinDirection+0x1e2>
			}
			break;
		case PORT_B:
			if(direction == PIN_OUTPUT) {
     c12:	8c 81       	ldd	r24, Y+4	; 0x04
     c14:	81 30       	cpi	r24, 0x01	; 1
     c16:	a1 f4       	brne	.+40     	; 0xc40 <GPIO_setupPinDirection+0x10a>
				SET_BIT(DDRB,pin_num);
     c18:	a7 e3       	ldi	r26, 0x37	; 55
     c1a:	b0 e0       	ldi	r27, 0x00	; 0
     c1c:	e7 e3       	ldi	r30, 0x37	; 55
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	80 81       	ld	r24, Z
     c22:	48 2f       	mov	r20, r24
     c24:	8b 81       	ldd	r24, Y+3	; 0x03
     c26:	28 2f       	mov	r18, r24
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	02 2e       	mov	r0, r18
     c30:	02 c0       	rjmp	.+4      	; 0xc36 <GPIO_setupPinDirection+0x100>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	0a 94       	dec	r0
     c38:	e2 f7       	brpl	.-8      	; 0xc32 <GPIO_setupPinDirection+0xfc>
     c3a:	84 2b       	or	r24, r20
     c3c:	8c 93       	st	X, r24
     c3e:	6c c0       	rjmp	.+216    	; 0xd18 <GPIO_setupPinDirection+0x1e2>
			}
			else {
				CLR_BIT(DDRB,pin_num);
     c40:	a7 e3       	ldi	r26, 0x37	; 55
     c42:	b0 e0       	ldi	r27, 0x00	; 0
     c44:	e7 e3       	ldi	r30, 0x37	; 55
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	80 81       	ld	r24, Z
     c4a:	48 2f       	mov	r20, r24
     c4c:	8b 81       	ldd	r24, Y+3	; 0x03
     c4e:	28 2f       	mov	r18, r24
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	02 2e       	mov	r0, r18
     c58:	02 c0       	rjmp	.+4      	; 0xc5e <GPIO_setupPinDirection+0x128>
     c5a:	88 0f       	add	r24, r24
     c5c:	99 1f       	adc	r25, r25
     c5e:	0a 94       	dec	r0
     c60:	e2 f7       	brpl	.-8      	; 0xc5a <GPIO_setupPinDirection+0x124>
     c62:	80 95       	com	r24
     c64:	84 23       	and	r24, r20
     c66:	8c 93       	st	X, r24
     c68:	57 c0       	rjmp	.+174    	; 0xd18 <GPIO_setupPinDirection+0x1e2>
			}
			break;
		case PORT_C:
			if(direction == PIN_OUTPUT) {
     c6a:	8c 81       	ldd	r24, Y+4	; 0x04
     c6c:	81 30       	cpi	r24, 0x01	; 1
     c6e:	a1 f4       	brne	.+40     	; 0xc98 <GPIO_setupPinDirection+0x162>
				SET_BIT(DDRC,pin_num);
     c70:	a4 e3       	ldi	r26, 0x34	; 52
     c72:	b0 e0       	ldi	r27, 0x00	; 0
     c74:	e4 e3       	ldi	r30, 0x34	; 52
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	48 2f       	mov	r20, r24
     c7c:	8b 81       	ldd	r24, Y+3	; 0x03
     c7e:	28 2f       	mov	r18, r24
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	02 2e       	mov	r0, r18
     c88:	02 c0       	rjmp	.+4      	; 0xc8e <GPIO_setupPinDirection+0x158>
     c8a:	88 0f       	add	r24, r24
     c8c:	99 1f       	adc	r25, r25
     c8e:	0a 94       	dec	r0
     c90:	e2 f7       	brpl	.-8      	; 0xc8a <GPIO_setupPinDirection+0x154>
     c92:	84 2b       	or	r24, r20
     c94:	8c 93       	st	X, r24
     c96:	40 c0       	rjmp	.+128    	; 0xd18 <GPIO_setupPinDirection+0x1e2>
			}
			else {
				CLR_BIT(DDRC,pin_num);
     c98:	a4 e3       	ldi	r26, 0x34	; 52
     c9a:	b0 e0       	ldi	r27, 0x00	; 0
     c9c:	e4 e3       	ldi	r30, 0x34	; 52
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	80 81       	ld	r24, Z
     ca2:	48 2f       	mov	r20, r24
     ca4:	8b 81       	ldd	r24, Y+3	; 0x03
     ca6:	28 2f       	mov	r18, r24
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	02 2e       	mov	r0, r18
     cb0:	02 c0       	rjmp	.+4      	; 0xcb6 <GPIO_setupPinDirection+0x180>
     cb2:	88 0f       	add	r24, r24
     cb4:	99 1f       	adc	r25, r25
     cb6:	0a 94       	dec	r0
     cb8:	e2 f7       	brpl	.-8      	; 0xcb2 <GPIO_setupPinDirection+0x17c>
     cba:	80 95       	com	r24
     cbc:	84 23       	and	r24, r20
     cbe:	8c 93       	st	X, r24
     cc0:	2b c0       	rjmp	.+86     	; 0xd18 <GPIO_setupPinDirection+0x1e2>
			}
			break;
		case PORT_D:
			if(direction == PIN_OUTPUT) {
     cc2:	8c 81       	ldd	r24, Y+4	; 0x04
     cc4:	81 30       	cpi	r24, 0x01	; 1
     cc6:	a1 f4       	brne	.+40     	; 0xcf0 <GPIO_setupPinDirection+0x1ba>
				SET_BIT(DDRD,pin_num);
     cc8:	a1 e3       	ldi	r26, 0x31	; 49
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	e1 e3       	ldi	r30, 0x31	; 49
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	48 2f       	mov	r20, r24
     cd4:	8b 81       	ldd	r24, Y+3	; 0x03
     cd6:	28 2f       	mov	r18, r24
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	02 2e       	mov	r0, r18
     ce0:	02 c0       	rjmp	.+4      	; 0xce6 <GPIO_setupPinDirection+0x1b0>
     ce2:	88 0f       	add	r24, r24
     ce4:	99 1f       	adc	r25, r25
     ce6:	0a 94       	dec	r0
     ce8:	e2 f7       	brpl	.-8      	; 0xce2 <GPIO_setupPinDirection+0x1ac>
     cea:	84 2b       	or	r24, r20
     cec:	8c 93       	st	X, r24
     cee:	14 c0       	rjmp	.+40     	; 0xd18 <GPIO_setupPinDirection+0x1e2>
			}
			else {
				CLR_BIT(DDRD,pin_num);
     cf0:	a1 e3       	ldi	r26, 0x31	; 49
     cf2:	b0 e0       	ldi	r27, 0x00	; 0
     cf4:	e1 e3       	ldi	r30, 0x31	; 49
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	80 81       	ld	r24, Z
     cfa:	48 2f       	mov	r20, r24
     cfc:	8b 81       	ldd	r24, Y+3	; 0x03
     cfe:	28 2f       	mov	r18, r24
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	02 2e       	mov	r0, r18
     d08:	02 c0       	rjmp	.+4      	; 0xd0e <GPIO_setupPinDirection+0x1d8>
     d0a:	88 0f       	add	r24, r24
     d0c:	99 1f       	adc	r25, r25
     d0e:	0a 94       	dec	r0
     d10:	e2 f7       	brpl	.-8      	; 0xd0a <GPIO_setupPinDirection+0x1d4>
     d12:	80 95       	com	r24
     d14:	84 23       	and	r24, r20
     d16:	8c 93       	st	X, r24
			}
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
     d18:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
     d1a:	89 81       	ldd	r24, Y+1	; 0x01
}
     d1c:	26 96       	adiw	r28, 0x06	; 6
     d1e:	0f b6       	in	r0, 0x3f	; 63
     d20:	f8 94       	cli
     d22:	de bf       	out	0x3e, r29	; 62
     d24:	0f be       	out	0x3f, r0	; 63
     d26:	cd bf       	out	0x3d, r28	; 61
     d28:	cf 91       	pop	r28
     d2a:	df 91       	pop	r29
     d2c:	08 95       	ret

00000d2e <GPIO_writePin>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
GPIO_Error_t GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value) {
     d2e:	df 93       	push	r29
     d30:	cf 93       	push	r28
     d32:	00 d0       	rcall	.+0      	; 0xd34 <GPIO_writePin+0x6>
     d34:	00 d0       	rcall	.+0      	; 0xd36 <GPIO_writePin+0x8>
     d36:	00 d0       	rcall	.+0      	; 0xd38 <GPIO_writePin+0xa>
     d38:	cd b7       	in	r28, 0x3d	; 61
     d3a:	de b7       	in	r29, 0x3e	; 62
     d3c:	8a 83       	std	Y+2, r24	; 0x02
     d3e:	6b 83       	std	Y+3, r22	; 0x03
     d40:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t GPIO_Driver_Checker = NULL;
     d42:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
     d44:	8b 81       	ldd	r24, Y+3	; 0x03
     d46:	88 30       	cpi	r24, 0x08	; 8
     d48:	18 f0       	brcs	.+6      	; 0xd50 <GPIO_writePin+0x22>
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	89 83       	std	Y+1, r24	; 0x01
     d4e:	e1 c0       	rjmp	.+450    	; 0xf12 <GPIO_writePin+0x1e4>
	}
	else if((port_num >= NUM_OF_PORTS)) {
     d50:	8a 81       	ldd	r24, Y+2	; 0x02
     d52:	84 30       	cpi	r24, 0x04	; 4
     d54:	18 f0       	brcs	.+6      	; 0xd5c <GPIO_writePin+0x2e>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
     d56:	82 e0       	ldi	r24, 0x02	; 2
     d58:	89 83       	std	Y+1, r24	; 0x01
     d5a:	db c0       	rjmp	.+438    	; 0xf12 <GPIO_writePin+0x1e4>
	}
	else if((value != LOGIC_HIGH) && (value != LOGIC_LOW)) {
     d5c:	8c 81       	ldd	r24, Y+4	; 0x04
     d5e:	81 30       	cpi	r24, 0x01	; 1
     d60:	31 f0       	breq	.+12     	; 0xd6e <GPIO_writePin+0x40>
     d62:	8c 81       	ldd	r24, Y+4	; 0x04
     d64:	88 23       	and	r24, r24
     d66:	19 f0       	breq	.+6      	; 0xd6e <GPIO_writePin+0x40>
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
     d68:	83 e0       	ldi	r24, 0x03	; 3
     d6a:	89 83       	std	Y+1, r24	; 0x01
     d6c:	d2 c0       	rjmp	.+420    	; 0xf12 <GPIO_writePin+0x1e4>
	}
	else {
		switch(port_num) {
     d6e:	8a 81       	ldd	r24, Y+2	; 0x02
     d70:	28 2f       	mov	r18, r24
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	3e 83       	std	Y+6, r19	; 0x06
     d76:	2d 83       	std	Y+5, r18	; 0x05
     d78:	8d 81       	ldd	r24, Y+5	; 0x05
     d7a:	9e 81       	ldd	r25, Y+6	; 0x06
     d7c:	81 30       	cpi	r24, 0x01	; 1
     d7e:	91 05       	cpc	r25, r1
     d80:	09 f4       	brne	.+2      	; 0xd84 <GPIO_writePin+0x56>
     d82:	43 c0       	rjmp	.+134    	; 0xe0a <GPIO_writePin+0xdc>
     d84:	2d 81       	ldd	r18, Y+5	; 0x05
     d86:	3e 81       	ldd	r19, Y+6	; 0x06
     d88:	22 30       	cpi	r18, 0x02	; 2
     d8a:	31 05       	cpc	r19, r1
     d8c:	2c f4       	brge	.+10     	; 0xd98 <GPIO_writePin+0x6a>
     d8e:	8d 81       	ldd	r24, Y+5	; 0x05
     d90:	9e 81       	ldd	r25, Y+6	; 0x06
     d92:	00 97       	sbiw	r24, 0x00	; 0
     d94:	71 f0       	breq	.+28     	; 0xdb2 <GPIO_writePin+0x84>
     d96:	bc c0       	rjmp	.+376    	; 0xf10 <GPIO_writePin+0x1e2>
     d98:	2d 81       	ldd	r18, Y+5	; 0x05
     d9a:	3e 81       	ldd	r19, Y+6	; 0x06
     d9c:	22 30       	cpi	r18, 0x02	; 2
     d9e:	31 05       	cpc	r19, r1
     da0:	09 f4       	brne	.+2      	; 0xda4 <GPIO_writePin+0x76>
     da2:	5f c0       	rjmp	.+190    	; 0xe62 <GPIO_writePin+0x134>
     da4:	8d 81       	ldd	r24, Y+5	; 0x05
     da6:	9e 81       	ldd	r25, Y+6	; 0x06
     da8:	83 30       	cpi	r24, 0x03	; 3
     daa:	91 05       	cpc	r25, r1
     dac:	09 f4       	brne	.+2      	; 0xdb0 <GPIO_writePin+0x82>
     dae:	85 c0       	rjmp	.+266    	; 0xeba <GPIO_writePin+0x18c>
     db0:	af c0       	rjmp	.+350    	; 0xf10 <GPIO_writePin+0x1e2>
		case PORT_A:
			if(value == LOGIC_HIGH) {
     db2:	8c 81       	ldd	r24, Y+4	; 0x04
     db4:	81 30       	cpi	r24, 0x01	; 1
     db6:	a1 f4       	brne	.+40     	; 0xde0 <GPIO_writePin+0xb2>
				SET_BIT(PORTA,pin_num);
     db8:	ab e3       	ldi	r26, 0x3B	; 59
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	eb e3       	ldi	r30, 0x3B	; 59
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	48 2f       	mov	r20, r24
     dc4:	8b 81       	ldd	r24, Y+3	; 0x03
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	02 2e       	mov	r0, r18
     dd0:	02 c0       	rjmp	.+4      	; 0xdd6 <GPIO_writePin+0xa8>
     dd2:	88 0f       	add	r24, r24
     dd4:	99 1f       	adc	r25, r25
     dd6:	0a 94       	dec	r0
     dd8:	e2 f7       	brpl	.-8      	; 0xdd2 <GPIO_writePin+0xa4>
     dda:	84 2b       	or	r24, r20
     ddc:	8c 93       	st	X, r24
     dde:	98 c0       	rjmp	.+304    	; 0xf10 <GPIO_writePin+0x1e2>
			}
			else {
				CLR_BIT(PORTA,pin_num);
     de0:	ab e3       	ldi	r26, 0x3B	; 59
     de2:	b0 e0       	ldi	r27, 0x00	; 0
     de4:	eb e3       	ldi	r30, 0x3B	; 59
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	48 2f       	mov	r20, r24
     dec:	8b 81       	ldd	r24, Y+3	; 0x03
     dee:	28 2f       	mov	r18, r24
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	02 2e       	mov	r0, r18
     df8:	02 c0       	rjmp	.+4      	; 0xdfe <GPIO_writePin+0xd0>
     dfa:	88 0f       	add	r24, r24
     dfc:	99 1f       	adc	r25, r25
     dfe:	0a 94       	dec	r0
     e00:	e2 f7       	brpl	.-8      	; 0xdfa <GPIO_writePin+0xcc>
     e02:	80 95       	com	r24
     e04:	84 23       	and	r24, r20
     e06:	8c 93       	st	X, r24
     e08:	83 c0       	rjmp	.+262    	; 0xf10 <GPIO_writePin+0x1e2>
			}
			break;
		case PORT_B:
			if(value == LOGIC_HIGH) {
     e0a:	8c 81       	ldd	r24, Y+4	; 0x04
     e0c:	81 30       	cpi	r24, 0x01	; 1
     e0e:	a1 f4       	brne	.+40     	; 0xe38 <GPIO_writePin+0x10a>
				SET_BIT(PORTB,pin_num);
     e10:	a8 e3       	ldi	r26, 0x38	; 56
     e12:	b0 e0       	ldi	r27, 0x00	; 0
     e14:	e8 e3       	ldi	r30, 0x38	; 56
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	48 2f       	mov	r20, r24
     e1c:	8b 81       	ldd	r24, Y+3	; 0x03
     e1e:	28 2f       	mov	r18, r24
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	02 2e       	mov	r0, r18
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <GPIO_writePin+0x100>
     e2a:	88 0f       	add	r24, r24
     e2c:	99 1f       	adc	r25, r25
     e2e:	0a 94       	dec	r0
     e30:	e2 f7       	brpl	.-8      	; 0xe2a <GPIO_writePin+0xfc>
     e32:	84 2b       	or	r24, r20
     e34:	8c 93       	st	X, r24
     e36:	6c c0       	rjmp	.+216    	; 0xf10 <GPIO_writePin+0x1e2>
			}
			else {
				CLR_BIT(PORTB,pin_num);
     e38:	a8 e3       	ldi	r26, 0x38	; 56
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	e8 e3       	ldi	r30, 0x38	; 56
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	48 2f       	mov	r20, r24
     e44:	8b 81       	ldd	r24, Y+3	; 0x03
     e46:	28 2f       	mov	r18, r24
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	02 2e       	mov	r0, r18
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <GPIO_writePin+0x128>
     e52:	88 0f       	add	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	0a 94       	dec	r0
     e58:	e2 f7       	brpl	.-8      	; 0xe52 <GPIO_writePin+0x124>
     e5a:	80 95       	com	r24
     e5c:	84 23       	and	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	57 c0       	rjmp	.+174    	; 0xf10 <GPIO_writePin+0x1e2>
			}
			break;
		case PORT_C:
			if(value == LOGIC_HIGH) {
     e62:	8c 81       	ldd	r24, Y+4	; 0x04
     e64:	81 30       	cpi	r24, 0x01	; 1
     e66:	a1 f4       	brne	.+40     	; 0xe90 <GPIO_writePin+0x162>
				SET_BIT(PORTC,pin_num);
     e68:	a5 e3       	ldi	r26, 0x35	; 53
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	e5 e3       	ldi	r30, 0x35	; 53
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	48 2f       	mov	r20, r24
     e74:	8b 81       	ldd	r24, Y+3	; 0x03
     e76:	28 2f       	mov	r18, r24
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	02 2e       	mov	r0, r18
     e80:	02 c0       	rjmp	.+4      	; 0xe86 <GPIO_writePin+0x158>
     e82:	88 0f       	add	r24, r24
     e84:	99 1f       	adc	r25, r25
     e86:	0a 94       	dec	r0
     e88:	e2 f7       	brpl	.-8      	; 0xe82 <GPIO_writePin+0x154>
     e8a:	84 2b       	or	r24, r20
     e8c:	8c 93       	st	X, r24
     e8e:	40 c0       	rjmp	.+128    	; 0xf10 <GPIO_writePin+0x1e2>
			}
			else {
				CLR_BIT(PORTC,pin_num);
     e90:	a5 e3       	ldi	r26, 0x35	; 53
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	e5 e3       	ldi	r30, 0x35	; 53
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	48 2f       	mov	r20, r24
     e9c:	8b 81       	ldd	r24, Y+3	; 0x03
     e9e:	28 2f       	mov	r18, r24
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	02 2e       	mov	r0, r18
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <GPIO_writePin+0x180>
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	0a 94       	dec	r0
     eb0:	e2 f7       	brpl	.-8      	; 0xeaa <GPIO_writePin+0x17c>
     eb2:	80 95       	com	r24
     eb4:	84 23       	and	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	2b c0       	rjmp	.+86     	; 0xf10 <GPIO_writePin+0x1e2>
			}
			break;
		case PORT_D:
			if(value == LOGIC_HIGH) {
     eba:	8c 81       	ldd	r24, Y+4	; 0x04
     ebc:	81 30       	cpi	r24, 0x01	; 1
     ebe:	a1 f4       	brne	.+40     	; 0xee8 <GPIO_writePin+0x1ba>
				SET_BIT(PORTD,pin_num);
     ec0:	a2 e3       	ldi	r26, 0x32	; 50
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	e2 e3       	ldi	r30, 0x32	; 50
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	48 2f       	mov	r20, r24
     ecc:	8b 81       	ldd	r24, Y+3	; 0x03
     ece:	28 2f       	mov	r18, r24
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	02 2e       	mov	r0, r18
     ed8:	02 c0       	rjmp	.+4      	; 0xede <GPIO_writePin+0x1b0>
     eda:	88 0f       	add	r24, r24
     edc:	99 1f       	adc	r25, r25
     ede:	0a 94       	dec	r0
     ee0:	e2 f7       	brpl	.-8      	; 0xeda <GPIO_writePin+0x1ac>
     ee2:	84 2b       	or	r24, r20
     ee4:	8c 93       	st	X, r24
     ee6:	14 c0       	rjmp	.+40     	; 0xf10 <GPIO_writePin+0x1e2>
			}
			else {
				CLR_BIT(PORTD,pin_num);
     ee8:	a2 e3       	ldi	r26, 0x32	; 50
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	e2 e3       	ldi	r30, 0x32	; 50
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	48 2f       	mov	r20, r24
     ef4:	8b 81       	ldd	r24, Y+3	; 0x03
     ef6:	28 2f       	mov	r18, r24
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	02 2e       	mov	r0, r18
     f00:	02 c0       	rjmp	.+4      	; 0xf06 <GPIO_writePin+0x1d8>
     f02:	88 0f       	add	r24, r24
     f04:	99 1f       	adc	r25, r25
     f06:	0a 94       	dec	r0
     f08:	e2 f7       	brpl	.-8      	; 0xf02 <GPIO_writePin+0x1d4>
     f0a:	80 95       	com	r24
     f0c:	84 23       	and	r24, r20
     f0e:	8c 93       	st	X, r24
			}
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
     f10:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
     f12:	89 81       	ldd	r24, Y+1	; 0x01
}
     f14:	26 96       	adiw	r28, 0x06	; 6
     f16:	0f b6       	in	r0, 0x3f	; 63
     f18:	f8 94       	cli
     f1a:	de bf       	out	0x3e, r29	; 62
     f1c:	0f be       	out	0x3f, r0	; 63
     f1e:	cd bf       	out	0x3d, r28	; 61
     f20:	cf 91       	pop	r28
     f22:	df 91       	pop	r29
     f24:	08 95       	ret

00000f26 <GPIO_togglePin>:
/*
 * Description :
 * Toggles a certain pin when requested.
 * If the input port number or pin number are not correct, The function will return an error.
 */
GPIO_Error_t GPIO_togglePin(uint8 port_num, uint8 pin_num) {
     f26:	df 93       	push	r29
     f28:	cf 93       	push	r28
     f2a:	00 d0       	rcall	.+0      	; 0xf2c <GPIO_togglePin+0x6>
     f2c:	00 d0       	rcall	.+0      	; 0xf2e <GPIO_togglePin+0x8>
     f2e:	0f 92       	push	r0
     f30:	cd b7       	in	r28, 0x3d	; 61
     f32:	de b7       	in	r29, 0x3e	; 62
     f34:	8a 83       	std	Y+2, r24	; 0x02
     f36:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t GPIO_Driver_Checker = NULL;
     f38:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
     f3a:	8b 81       	ldd	r24, Y+3	; 0x03
     f3c:	88 30       	cpi	r24, 0x08	; 8
     f3e:	18 f0       	brcs	.+6      	; 0xf46 <GPIO_togglePin+0x20>
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	89 83       	std	Y+1, r24	; 0x01
     f44:	75 c0       	rjmp	.+234    	; 0x1030 <GPIO_togglePin+0x10a>
	}
	else if((port_num >= NUM_OF_PORTS)) {
     f46:	8a 81       	ldd	r24, Y+2	; 0x02
     f48:	84 30       	cpi	r24, 0x04	; 4
     f4a:	18 f0       	brcs	.+6      	; 0xf52 <GPIO_togglePin+0x2c>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
     f4c:	82 e0       	ldi	r24, 0x02	; 2
     f4e:	89 83       	std	Y+1, r24	; 0x01
     f50:	6f c0       	rjmp	.+222    	; 0x1030 <GPIO_togglePin+0x10a>
	}
	else {
		switch(port_num) {
     f52:	8a 81       	ldd	r24, Y+2	; 0x02
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	3d 83       	std	Y+5, r19	; 0x05
     f5a:	2c 83       	std	Y+4, r18	; 0x04
     f5c:	8c 81       	ldd	r24, Y+4	; 0x04
     f5e:	9d 81       	ldd	r25, Y+5	; 0x05
     f60:	81 30       	cpi	r24, 0x01	; 1
     f62:	91 05       	cpc	r25, r1
     f64:	49 f1       	breq	.+82     	; 0xfb8 <GPIO_togglePin+0x92>
     f66:	2c 81       	ldd	r18, Y+4	; 0x04
     f68:	3d 81       	ldd	r19, Y+5	; 0x05
     f6a:	22 30       	cpi	r18, 0x02	; 2
     f6c:	31 05       	cpc	r19, r1
     f6e:	2c f4       	brge	.+10     	; 0xf7a <GPIO_togglePin+0x54>
     f70:	8c 81       	ldd	r24, Y+4	; 0x04
     f72:	9d 81       	ldd	r25, Y+5	; 0x05
     f74:	00 97       	sbiw	r24, 0x00	; 0
     f76:	61 f0       	breq	.+24     	; 0xf90 <GPIO_togglePin+0x6a>
     f78:	5a c0       	rjmp	.+180    	; 0x102e <GPIO_togglePin+0x108>
     f7a:	2c 81       	ldd	r18, Y+4	; 0x04
     f7c:	3d 81       	ldd	r19, Y+5	; 0x05
     f7e:	22 30       	cpi	r18, 0x02	; 2
     f80:	31 05       	cpc	r19, r1
     f82:	71 f1       	breq	.+92     	; 0xfe0 <GPIO_togglePin+0xba>
     f84:	8c 81       	ldd	r24, Y+4	; 0x04
     f86:	9d 81       	ldd	r25, Y+5	; 0x05
     f88:	83 30       	cpi	r24, 0x03	; 3
     f8a:	91 05       	cpc	r25, r1
     f8c:	e9 f1       	breq	.+122    	; 0x1008 <GPIO_togglePin+0xe2>
     f8e:	4f c0       	rjmp	.+158    	; 0x102e <GPIO_togglePin+0x108>
		case PORT_A:
			TOG_BIT(PORTA,pin_num);
     f90:	ab e3       	ldi	r26, 0x3B	; 59
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	eb e3       	ldi	r30, 0x3B	; 59
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	48 2f       	mov	r20, r24
     f9c:	8b 81       	ldd	r24, Y+3	; 0x03
     f9e:	28 2f       	mov	r18, r24
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	02 2e       	mov	r0, r18
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <GPIO_togglePin+0x88>
     faa:	88 0f       	add	r24, r24
     fac:	99 1f       	adc	r25, r25
     fae:	0a 94       	dec	r0
     fb0:	e2 f7       	brpl	.-8      	; 0xfaa <GPIO_togglePin+0x84>
     fb2:	84 27       	eor	r24, r20
     fb4:	8c 93       	st	X, r24
     fb6:	3b c0       	rjmp	.+118    	; 0x102e <GPIO_togglePin+0x108>
			break;
		case PORT_B:
			TOG_BIT(PORTB,pin_num);
     fb8:	a8 e3       	ldi	r26, 0x38	; 56
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	e8 e3       	ldi	r30, 0x38	; 56
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	48 2f       	mov	r20, r24
     fc4:	8b 81       	ldd	r24, Y+3	; 0x03
     fc6:	28 2f       	mov	r18, r24
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	02 2e       	mov	r0, r18
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <GPIO_togglePin+0xb0>
     fd2:	88 0f       	add	r24, r24
     fd4:	99 1f       	adc	r25, r25
     fd6:	0a 94       	dec	r0
     fd8:	e2 f7       	brpl	.-8      	; 0xfd2 <GPIO_togglePin+0xac>
     fda:	84 27       	eor	r24, r20
     fdc:	8c 93       	st	X, r24
     fde:	27 c0       	rjmp	.+78     	; 0x102e <GPIO_togglePin+0x108>
			break;
		case PORT_C:
			TOG_BIT(PORTC,pin_num);
     fe0:	a5 e3       	ldi	r26, 0x35	; 53
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	e5 e3       	ldi	r30, 0x35	; 53
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	48 2f       	mov	r20, r24
     fec:	8b 81       	ldd	r24, Y+3	; 0x03
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	02 2e       	mov	r0, r18
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <GPIO_togglePin+0xd8>
     ffa:	88 0f       	add	r24, r24
     ffc:	99 1f       	adc	r25, r25
     ffe:	0a 94       	dec	r0
    1000:	e2 f7       	brpl	.-8      	; 0xffa <GPIO_togglePin+0xd4>
    1002:	84 27       	eor	r24, r20
    1004:	8c 93       	st	X, r24
    1006:	13 c0       	rjmp	.+38     	; 0x102e <GPIO_togglePin+0x108>
			break;
		case PORT_D:
			TOG_BIT(PORTD,pin_num);
    1008:	a2 e3       	ldi	r26, 0x32	; 50
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	e2 e3       	ldi	r30, 0x32	; 50
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	48 2f       	mov	r20, r24
    1014:	8b 81       	ldd	r24, Y+3	; 0x03
    1016:	28 2f       	mov	r18, r24
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	02 2e       	mov	r0, r18
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <GPIO_togglePin+0x100>
    1022:	88 0f       	add	r24, r24
    1024:	99 1f       	adc	r25, r25
    1026:	0a 94       	dec	r0
    1028:	e2 f7       	brpl	.-8      	; 0x1022 <GPIO_togglePin+0xfc>
    102a:	84 27       	eor	r24, r20
    102c:	8c 93       	st	X, r24
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    102e:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    1030:	89 81       	ldd	r24, Y+1	; 0x01
}
    1032:	0f 90       	pop	r0
    1034:	0f 90       	pop	r0
    1036:	0f 90       	pop	r0
    1038:	0f 90       	pop	r0
    103a:	0f 90       	pop	r0
    103c:	cf 91       	pop	r28
    103e:	df 91       	pop	r29
    1040:	08 95       	ret

00001042 <GPIO_readPin>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return an error.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num) {
    1042:	df 93       	push	r29
    1044:	cf 93       	push	r28
    1046:	cd b7       	in	r28, 0x3d	; 61
    1048:	de b7       	in	r29, 0x3e	; 62
    104a:	27 97       	sbiw	r28, 0x07	; 7
    104c:	0f b6       	in	r0, 0x3f	; 63
    104e:	f8 94       	cli
    1050:	de bf       	out	0x3e, r29	; 62
    1052:	0f be       	out	0x3f, r0	; 63
    1054:	cd bf       	out	0x3d, r28	; 61
    1056:	8b 83       	std	Y+3, r24	; 0x03
    1058:	6c 83       	std	Y+4, r22	; 0x04
	uint8 pin_value = LOGIC_LOW;
    105a:	1a 82       	std	Y+2, r1	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t GPIO_Driver_Checker = NULL;
    105c:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    105e:	8c 81       	ldd	r24, Y+4	; 0x04
    1060:	88 30       	cpi	r24, 0x08	; 8
    1062:	28 f0       	brcs	.+10     	; 0x106e <GPIO_readPin+0x2c>
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	89 83       	std	Y+1, r24	; 0x01
		return GPIO_Driver_Checker;
    1068:	29 81       	ldd	r18, Y+1	; 0x01
    106a:	2f 83       	std	Y+7, r18	; 0x07
    106c:	8b c0       	rjmp	.+278    	; 0x1184 <GPIO_readPin+0x142>
	}
	else if((port_num >= NUM_OF_PORTS)) {
    106e:	8b 81       	ldd	r24, Y+3	; 0x03
    1070:	84 30       	cpi	r24, 0x04	; 4
    1072:	28 f0       	brcs	.+10     	; 0x107e <GPIO_readPin+0x3c>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    1074:	82 e0       	ldi	r24, 0x02	; 2
    1076:	89 83       	std	Y+1, r24	; 0x01
		return GPIO_Driver_Checker;
    1078:	39 81       	ldd	r19, Y+1	; 0x01
    107a:	3f 83       	std	Y+7, r19	; 0x07
    107c:	83 c0       	rjmp	.+262    	; 0x1184 <GPIO_readPin+0x142>
	}
	else {
		/* Read the pin value as required */
		switch(port_num) {
    107e:	8b 81       	ldd	r24, Y+3	; 0x03
    1080:	48 2f       	mov	r20, r24
    1082:	50 e0       	ldi	r21, 0x00	; 0
    1084:	5e 83       	std	Y+6, r21	; 0x06
    1086:	4d 83       	std	Y+5, r20	; 0x05
    1088:	8d 81       	ldd	r24, Y+5	; 0x05
    108a:	9e 81       	ldd	r25, Y+6	; 0x06
    108c:	81 30       	cpi	r24, 0x01	; 1
    108e:	91 05       	cpc	r25, r1
    1090:	79 f1       	breq	.+94     	; 0x10f0 <GPIO_readPin+0xae>
    1092:	2d 81       	ldd	r18, Y+5	; 0x05
    1094:	3e 81       	ldd	r19, Y+6	; 0x06
    1096:	22 30       	cpi	r18, 0x02	; 2
    1098:	31 05       	cpc	r19, r1
    109a:	34 f4       	brge	.+12     	; 0x10a8 <GPIO_readPin+0x66>
    109c:	4d 81       	ldd	r20, Y+5	; 0x05
    109e:	5e 81       	ldd	r21, Y+6	; 0x06
    10a0:	41 15       	cp	r20, r1
    10a2:	51 05       	cpc	r21, r1
    10a4:	69 f0       	breq	.+26     	; 0x10c0 <GPIO_readPin+0x7e>
    10a6:	6b c0       	rjmp	.+214    	; 0x117e <GPIO_readPin+0x13c>
    10a8:	8d 81       	ldd	r24, Y+5	; 0x05
    10aa:	9e 81       	ldd	r25, Y+6	; 0x06
    10ac:	82 30       	cpi	r24, 0x02	; 2
    10ae:	91 05       	cpc	r25, r1
    10b0:	b9 f1       	breq	.+110    	; 0x1120 <GPIO_readPin+0xde>
    10b2:	2d 81       	ldd	r18, Y+5	; 0x05
    10b4:	3e 81       	ldd	r19, Y+6	; 0x06
    10b6:	23 30       	cpi	r18, 0x03	; 3
    10b8:	31 05       	cpc	r19, r1
    10ba:	09 f4       	brne	.+2      	; 0x10be <GPIO_readPin+0x7c>
    10bc:	49 c0       	rjmp	.+146    	; 0x1150 <GPIO_readPin+0x10e>
    10be:	5f c0       	rjmp	.+190    	; 0x117e <GPIO_readPin+0x13c>
		case PORT_A:
			// Checks if the bit equals '1' or not
			if(BIT_IS_SET(PINA,pin_num)) {
    10c0:	e9 e3       	ldi	r30, 0x39	; 57
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	28 2f       	mov	r18, r24
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	8c 81       	ldd	r24, Y+4	; 0x04
    10cc:	88 2f       	mov	r24, r24
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	a9 01       	movw	r20, r18
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <GPIO_readPin+0x96>
    10d4:	55 95       	asr	r21
    10d6:	47 95       	ror	r20
    10d8:	8a 95       	dec	r24
    10da:	e2 f7       	brpl	.-8      	; 0x10d4 <GPIO_readPin+0x92>
    10dc:	ca 01       	movw	r24, r20
    10de:	81 70       	andi	r24, 0x01	; 1
    10e0:	90 70       	andi	r25, 0x00	; 0
    10e2:	88 23       	and	r24, r24
    10e4:	19 f0       	breq	.+6      	; 0x10ec <GPIO_readPin+0xaa>
				pin_value = LOGIC_HIGH;
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	8a 83       	std	Y+2, r24	; 0x02
    10ea:	49 c0       	rjmp	.+146    	; 0x117e <GPIO_readPin+0x13c>
			}
			else {
				pin_value = LOGIC_LOW;
    10ec:	1a 82       	std	Y+2, r1	; 0x02
    10ee:	47 c0       	rjmp	.+142    	; 0x117e <GPIO_readPin+0x13c>
			}
			break;
		case PORT_B:
			if(BIT_IS_SET(PINB,pin_num)) {
    10f0:	e6 e3       	ldi	r30, 0x36	; 54
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	28 2f       	mov	r18, r24
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	8c 81       	ldd	r24, Y+4	; 0x04
    10fc:	88 2f       	mov	r24, r24
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	a9 01       	movw	r20, r18
    1102:	02 c0       	rjmp	.+4      	; 0x1108 <GPIO_readPin+0xc6>
    1104:	55 95       	asr	r21
    1106:	47 95       	ror	r20
    1108:	8a 95       	dec	r24
    110a:	e2 f7       	brpl	.-8      	; 0x1104 <GPIO_readPin+0xc2>
    110c:	ca 01       	movw	r24, r20
    110e:	81 70       	andi	r24, 0x01	; 1
    1110:	90 70       	andi	r25, 0x00	; 0
    1112:	88 23       	and	r24, r24
    1114:	19 f0       	breq	.+6      	; 0x111c <GPIO_readPin+0xda>
				pin_value = LOGIC_HIGH;
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	8a 83       	std	Y+2, r24	; 0x02
    111a:	31 c0       	rjmp	.+98     	; 0x117e <GPIO_readPin+0x13c>
			}
			else {
				pin_value = LOGIC_LOW;
    111c:	1a 82       	std	Y+2, r1	; 0x02
    111e:	2f c0       	rjmp	.+94     	; 0x117e <GPIO_readPin+0x13c>
			}
			break;
		case PORT_C:
			if(BIT_IS_SET(PINC,pin_num)) {
    1120:	e3 e3       	ldi	r30, 0x33	; 51
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	28 2f       	mov	r18, r24
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	8c 81       	ldd	r24, Y+4	; 0x04
    112c:	88 2f       	mov	r24, r24
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	a9 01       	movw	r20, r18
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <GPIO_readPin+0xf6>
    1134:	55 95       	asr	r21
    1136:	47 95       	ror	r20
    1138:	8a 95       	dec	r24
    113a:	e2 f7       	brpl	.-8      	; 0x1134 <GPIO_readPin+0xf2>
    113c:	ca 01       	movw	r24, r20
    113e:	81 70       	andi	r24, 0x01	; 1
    1140:	90 70       	andi	r25, 0x00	; 0
    1142:	88 23       	and	r24, r24
    1144:	19 f0       	breq	.+6      	; 0x114c <GPIO_readPin+0x10a>
				pin_value = LOGIC_HIGH;
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	8a 83       	std	Y+2, r24	; 0x02
    114a:	19 c0       	rjmp	.+50     	; 0x117e <GPIO_readPin+0x13c>
			}
			else {
				pin_value = LOGIC_LOW;
    114c:	1a 82       	std	Y+2, r1	; 0x02
    114e:	17 c0       	rjmp	.+46     	; 0x117e <GPIO_readPin+0x13c>
			}
			break;
		case PORT_D:
			if(BIT_IS_SET(PIND,pin_num)) {
    1150:	e0 e3       	ldi	r30, 0x30	; 48
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	28 2f       	mov	r18, r24
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	8c 81       	ldd	r24, Y+4	; 0x04
    115c:	88 2f       	mov	r24, r24
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	a9 01       	movw	r20, r18
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <GPIO_readPin+0x126>
    1164:	55 95       	asr	r21
    1166:	47 95       	ror	r20
    1168:	8a 95       	dec	r24
    116a:	e2 f7       	brpl	.-8      	; 0x1164 <GPIO_readPin+0x122>
    116c:	ca 01       	movw	r24, r20
    116e:	81 70       	andi	r24, 0x01	; 1
    1170:	90 70       	andi	r25, 0x00	; 0
    1172:	88 23       	and	r24, r24
    1174:	19 f0       	breq	.+6      	; 0x117c <GPIO_readPin+0x13a>
				pin_value = LOGIC_HIGH;
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	8a 83       	std	Y+2, r24	; 0x02
    117a:	01 c0       	rjmp	.+2      	; 0x117e <GPIO_readPin+0x13c>
			}
			else {
				pin_value = LOGIC_LOW;
    117c:	1a 82       	std	Y+2, r1	; 0x02
			}
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    117e:	19 82       	std	Y+1, r1	; 0x01
	}
	return pin_value;
    1180:	5a 81       	ldd	r21, Y+2	; 0x02
    1182:	5f 83       	std	Y+7, r21	; 0x07
    1184:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1186:	27 96       	adiw	r28, 0x07	; 7
    1188:	0f b6       	in	r0, 0x3f	; 63
    118a:	f8 94       	cli
    118c:	de bf       	out	0x3e, r29	; 62
    118e:	0f be       	out	0x3f, r0	; 63
    1190:	cd bf       	out	0x3d, r28	; 61
    1192:	cf 91       	pop	r28
    1194:	df 91       	pop	r29
    1196:	08 95       	ret

00001198 <GPIO_setupPortDirection>:
 * Setup the direction of the required port all pins input/output.
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
GPIO_Error_t GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction) {
    1198:	df 93       	push	r29
    119a:	cf 93       	push	r28
    119c:	00 d0       	rcall	.+0      	; 0x119e <GPIO_setupPortDirection+0x6>
    119e:	00 d0       	rcall	.+0      	; 0x11a0 <GPIO_setupPortDirection+0x8>
    11a0:	0f 92       	push	r0
    11a2:	cd b7       	in	r28, 0x3d	; 61
    11a4:	de b7       	in	r29, 0x3e	; 62
    11a6:	8a 83       	std	Y+2, r24	; 0x02
    11a8:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	uint8_t GPIO_Driver_Checker = NULL;
    11aa:	19 82       	std	Y+1, r1	; 0x01

	if((port_num >= NUM_OF_PORTS)) {
    11ac:	8a 81       	ldd	r24, Y+2	; 0x02
    11ae:	84 30       	cpi	r24, 0x04	; 4
    11b0:	18 f0       	brcs	.+6      	; 0x11b8 <GPIO_setupPortDirection+0x20>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    11b2:	82 e0       	ldi	r24, 0x02	; 2
    11b4:	89 83       	std	Y+1, r24	; 0x01
    11b6:	3c c0       	rjmp	.+120    	; 0x1230 <GPIO_setupPortDirection+0x98>
	}
	else if((direction != PORT_INPUT) && (direction != PORT_OUTPUT)) {
    11b8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ba:	88 23       	and	r24, r24
    11bc:	31 f0       	breq	.+12     	; 0x11ca <GPIO_setupPortDirection+0x32>
    11be:	8b 81       	ldd	r24, Y+3	; 0x03
    11c0:	8f 3f       	cpi	r24, 0xFF	; 255
    11c2:	19 f0       	breq	.+6      	; 0x11ca <GPIO_setupPortDirection+0x32>
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
    11c4:	83 e0       	ldi	r24, 0x03	; 3
    11c6:	89 83       	std	Y+1, r24	; 0x01
    11c8:	33 c0       	rjmp	.+102    	; 0x1230 <GPIO_setupPortDirection+0x98>
	}
	else {
		/* Setup the port direction as required */
		switch(port_num) {
    11ca:	8a 81       	ldd	r24, Y+2	; 0x02
    11cc:	28 2f       	mov	r18, r24
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	3d 83       	std	Y+5, r19	; 0x05
    11d2:	2c 83       	std	Y+4, r18	; 0x04
    11d4:	8c 81       	ldd	r24, Y+4	; 0x04
    11d6:	9d 81       	ldd	r25, Y+5	; 0x05
    11d8:	81 30       	cpi	r24, 0x01	; 1
    11da:	91 05       	cpc	r25, r1
    11dc:	d1 f0       	breq	.+52     	; 0x1212 <GPIO_setupPortDirection+0x7a>
    11de:	2c 81       	ldd	r18, Y+4	; 0x04
    11e0:	3d 81       	ldd	r19, Y+5	; 0x05
    11e2:	22 30       	cpi	r18, 0x02	; 2
    11e4:	31 05       	cpc	r19, r1
    11e6:	2c f4       	brge	.+10     	; 0x11f2 <GPIO_setupPortDirection+0x5a>
    11e8:	8c 81       	ldd	r24, Y+4	; 0x04
    11ea:	9d 81       	ldd	r25, Y+5	; 0x05
    11ec:	00 97       	sbiw	r24, 0x00	; 0
    11ee:	61 f0       	breq	.+24     	; 0x1208 <GPIO_setupPortDirection+0x70>
    11f0:	1e c0       	rjmp	.+60     	; 0x122e <GPIO_setupPortDirection+0x96>
    11f2:	2c 81       	ldd	r18, Y+4	; 0x04
    11f4:	3d 81       	ldd	r19, Y+5	; 0x05
    11f6:	22 30       	cpi	r18, 0x02	; 2
    11f8:	31 05       	cpc	r19, r1
    11fa:	81 f0       	breq	.+32     	; 0x121c <GPIO_setupPortDirection+0x84>
    11fc:	8c 81       	ldd	r24, Y+4	; 0x04
    11fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1200:	83 30       	cpi	r24, 0x03	; 3
    1202:	91 05       	cpc	r25, r1
    1204:	81 f0       	breq	.+32     	; 0x1226 <GPIO_setupPortDirection+0x8e>
    1206:	13 c0       	rjmp	.+38     	; 0x122e <GPIO_setupPortDirection+0x96>
		case PORT_A:
			DDRA = direction;
    1208:	ea e3       	ldi	r30, 0x3A	; 58
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	8b 81       	ldd	r24, Y+3	; 0x03
    120e:	80 83       	st	Z, r24
    1210:	0e c0       	rjmp	.+28     	; 0x122e <GPIO_setupPortDirection+0x96>
			break;
		case PORT_B:
			DDRB = direction;
    1212:	e7 e3       	ldi	r30, 0x37	; 55
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	8b 81       	ldd	r24, Y+3	; 0x03
    1218:	80 83       	st	Z, r24
    121a:	09 c0       	rjmp	.+18     	; 0x122e <GPIO_setupPortDirection+0x96>
			break;
		case PORT_C:
			DDRC = direction;
    121c:	e4 e3       	ldi	r30, 0x34	; 52
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	8b 81       	ldd	r24, Y+3	; 0x03
    1222:	80 83       	st	Z, r24
    1224:	04 c0       	rjmp	.+8      	; 0x122e <GPIO_setupPortDirection+0x96>
			break;
		case PORT_D:
			DDRD = direction;
    1226:	e1 e3       	ldi	r30, 0x31	; 49
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	8b 81       	ldd	r24, Y+3	; 0x03
    122c:	80 83       	st	Z, r24
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    122e:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    1230:	89 81       	ldd	r24, Y+1	; 0x01
}
    1232:	0f 90       	pop	r0
    1234:	0f 90       	pop	r0
    1236:	0f 90       	pop	r0
    1238:	0f 90       	pop	r0
    123a:	0f 90       	pop	r0
    123c:	cf 91       	pop	r28
    123e:	df 91       	pop	r29
    1240:	08 95       	ret

00001242 <GPIO_writePort>:
 * Write the value on the required port.
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
GPIO_Error_t GPIO_writePort(uint8 port_num, uint8 value) {
    1242:	df 93       	push	r29
    1244:	cf 93       	push	r28
    1246:	00 d0       	rcall	.+0      	; 0x1248 <GPIO_writePort+0x6>
    1248:	00 d0       	rcall	.+0      	; 0x124a <GPIO_writePort+0x8>
    124a:	0f 92       	push	r0
    124c:	cd b7       	in	r28, 0x3d	; 61
    124e:	de b7       	in	r29, 0x3e	; 62
    1250:	8a 83       	std	Y+2, r24	; 0x02
    1252:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t GPIO_Driver_Checker = NULL;
    1254:	19 82       	std	Y+1, r1	; 0x01
	if((port_num >= NUM_OF_PORTS)) {
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	84 30       	cpi	r24, 0x04	; 4
    125a:	18 f0       	brcs	.+6      	; 0x1262 <GPIO_writePort+0x20>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    125c:	82 e0       	ldi	r24, 0x02	; 2
    125e:	89 83       	std	Y+1, r24	; 0x01
    1260:	33 c0       	rjmp	.+102    	; 0x12c8 <GPIO_writePort+0x86>
	}
	else {
		/* Setup the port direction as required */
		switch(port_num) {
    1262:	8a 81       	ldd	r24, Y+2	; 0x02
    1264:	28 2f       	mov	r18, r24
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	3d 83       	std	Y+5, r19	; 0x05
    126a:	2c 83       	std	Y+4, r18	; 0x04
    126c:	8c 81       	ldd	r24, Y+4	; 0x04
    126e:	9d 81       	ldd	r25, Y+5	; 0x05
    1270:	81 30       	cpi	r24, 0x01	; 1
    1272:	91 05       	cpc	r25, r1
    1274:	d1 f0       	breq	.+52     	; 0x12aa <GPIO_writePort+0x68>
    1276:	2c 81       	ldd	r18, Y+4	; 0x04
    1278:	3d 81       	ldd	r19, Y+5	; 0x05
    127a:	22 30       	cpi	r18, 0x02	; 2
    127c:	31 05       	cpc	r19, r1
    127e:	2c f4       	brge	.+10     	; 0x128a <GPIO_writePort+0x48>
    1280:	8c 81       	ldd	r24, Y+4	; 0x04
    1282:	9d 81       	ldd	r25, Y+5	; 0x05
    1284:	00 97       	sbiw	r24, 0x00	; 0
    1286:	61 f0       	breq	.+24     	; 0x12a0 <GPIO_writePort+0x5e>
    1288:	1e c0       	rjmp	.+60     	; 0x12c6 <GPIO_writePort+0x84>
    128a:	2c 81       	ldd	r18, Y+4	; 0x04
    128c:	3d 81       	ldd	r19, Y+5	; 0x05
    128e:	22 30       	cpi	r18, 0x02	; 2
    1290:	31 05       	cpc	r19, r1
    1292:	81 f0       	breq	.+32     	; 0x12b4 <GPIO_writePort+0x72>
    1294:	8c 81       	ldd	r24, Y+4	; 0x04
    1296:	9d 81       	ldd	r25, Y+5	; 0x05
    1298:	83 30       	cpi	r24, 0x03	; 3
    129a:	91 05       	cpc	r25, r1
    129c:	81 f0       	breq	.+32     	; 0x12be <GPIO_writePort+0x7c>
    129e:	13 c0       	rjmp	.+38     	; 0x12c6 <GPIO_writePort+0x84>
		case PORT_A:
			PORTA = value;
    12a0:	eb e3       	ldi	r30, 0x3B	; 59
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	8b 81       	ldd	r24, Y+3	; 0x03
    12a6:	80 83       	st	Z, r24
    12a8:	0e c0       	rjmp	.+28     	; 0x12c6 <GPIO_writePort+0x84>
			break;
		case PORT_B:
			PORTB = value;
    12aa:	e8 e3       	ldi	r30, 0x38	; 56
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	8b 81       	ldd	r24, Y+3	; 0x03
    12b0:	80 83       	st	Z, r24
    12b2:	09 c0       	rjmp	.+18     	; 0x12c6 <GPIO_writePort+0x84>
			break;
		case PORT_C:
			PORTC = value;
    12b4:	e5 e3       	ldi	r30, 0x35	; 53
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ba:	80 83       	st	Z, r24
    12bc:	04 c0       	rjmp	.+8      	; 0x12c6 <GPIO_writePort+0x84>
			break;
		case PORT_D:
			PORTD = value;
    12be:	e2 e3       	ldi	r30, 0x32	; 50
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	8b 81       	ldd	r24, Y+3	; 0x03
    12c4:	80 83       	st	Z, r24
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    12c6:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    12c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    12ca:	0f 90       	pop	r0
    12cc:	0f 90       	pop	r0
    12ce:	0f 90       	pop	r0
    12d0:	0f 90       	pop	r0
    12d2:	0f 90       	pop	r0
    12d4:	cf 91       	pop	r28
    12d6:	df 91       	pop	r29
    12d8:	08 95       	ret

000012da <GPIO_readPort>:
/*
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num) {
    12da:	df 93       	push	r29
    12dc:	cf 93       	push	r28
    12de:	00 d0       	rcall	.+0      	; 0x12e0 <GPIO_readPort+0x6>
    12e0:	00 d0       	rcall	.+0      	; 0x12e2 <GPIO_readPort+0x8>
    12e2:	0f 92       	push	r0
    12e4:	cd b7       	in	r28, 0x3d	; 61
    12e6:	de b7       	in	r29, 0x3e	; 62
    12e8:	8b 83       	std	Y+3, r24	; 0x03
	uint8 value = LOGIC_LOW;
    12ea:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t GPIO_Driver_Checker = NULL;
    12ec:	19 82       	std	Y+1, r1	; 0x01

	if((port_num >= NUM_OF_PORTS)) {
    12ee:	8b 81       	ldd	r24, Y+3	; 0x03
    12f0:	84 30       	cpi	r24, 0x04	; 4
    12f2:	18 f0       	brcs	.+6      	; 0x12fa <GPIO_readPort+0x20>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    12f4:	82 e0       	ldi	r24, 0x02	; 2
    12f6:	89 83       	std	Y+1, r24	; 0x01
    12f8:	32 c0       	rjmp	.+100    	; 0x135e <GPIO_readPort+0x84>
	}
	else {
		switch(port_num) {
    12fa:	8b 81       	ldd	r24, Y+3	; 0x03
    12fc:	28 2f       	mov	r18, r24
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	3d 83       	std	Y+5, r19	; 0x05
    1302:	2c 83       	std	Y+4, r18	; 0x04
    1304:	8c 81       	ldd	r24, Y+4	; 0x04
    1306:	9d 81       	ldd	r25, Y+5	; 0x05
    1308:	81 30       	cpi	r24, 0x01	; 1
    130a:	91 05       	cpc	r25, r1
    130c:	d1 f0       	breq	.+52     	; 0x1342 <GPIO_readPort+0x68>
    130e:	2c 81       	ldd	r18, Y+4	; 0x04
    1310:	3d 81       	ldd	r19, Y+5	; 0x05
    1312:	22 30       	cpi	r18, 0x02	; 2
    1314:	31 05       	cpc	r19, r1
    1316:	2c f4       	brge	.+10     	; 0x1322 <GPIO_readPort+0x48>
    1318:	8c 81       	ldd	r24, Y+4	; 0x04
    131a:	9d 81       	ldd	r25, Y+5	; 0x05
    131c:	00 97       	sbiw	r24, 0x00	; 0
    131e:	61 f0       	breq	.+24     	; 0x1338 <GPIO_readPort+0x5e>
    1320:	1e c0       	rjmp	.+60     	; 0x135e <GPIO_readPort+0x84>
    1322:	2c 81       	ldd	r18, Y+4	; 0x04
    1324:	3d 81       	ldd	r19, Y+5	; 0x05
    1326:	22 30       	cpi	r18, 0x02	; 2
    1328:	31 05       	cpc	r19, r1
    132a:	81 f0       	breq	.+32     	; 0x134c <GPIO_readPort+0x72>
    132c:	8c 81       	ldd	r24, Y+4	; 0x04
    132e:	9d 81       	ldd	r25, Y+5	; 0x05
    1330:	83 30       	cpi	r24, 0x03	; 3
    1332:	91 05       	cpc	r25, r1
    1334:	81 f0       	breq	.+32     	; 0x1356 <GPIO_readPort+0x7c>
    1336:	13 c0       	rjmp	.+38     	; 0x135e <GPIO_readPort+0x84>
		case PORT_A:
			// Why value equals PINA?
			value = PINA;
    1338:	e9 e3       	ldi	r30, 0x39	; 57
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	8a 83       	std	Y+2, r24	; 0x02
    1340:	0e c0       	rjmp	.+28     	; 0x135e <GPIO_readPort+0x84>
			break;
		case PORT_B:
			value = PINB;
    1342:	e6 e3       	ldi	r30, 0x36	; 54
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	8a 83       	std	Y+2, r24	; 0x02
    134a:	09 c0       	rjmp	.+18     	; 0x135e <GPIO_readPort+0x84>
			break;
		case PORT_C:
			value = PINC;
    134c:	e3 e3       	ldi	r30, 0x33	; 51
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	80 81       	ld	r24, Z
    1352:	8a 83       	std	Y+2, r24	; 0x02
    1354:	04 c0       	rjmp	.+8      	; 0x135e <GPIO_readPort+0x84>
			break;
		case PORT_D:
			value = PIND;
    1356:	e0 e3       	ldi	r30, 0x30	; 48
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	8a 83       	std	Y+2, r24	; 0x02
			break;
		}
	}
	return value;
    135e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1360:	0f 90       	pop	r0
    1362:	0f 90       	pop	r0
    1364:	0f 90       	pop	r0
    1366:	0f 90       	pop	r0
    1368:	0f 90       	pop	r0
    136a:	cf 91       	pop	r28
    136c:	df 91       	pop	r29
    136e:	08 95       	ret

00001370 <ADC_Init>:
#include "avr/io.h" /* To use the IO Ports Registers */
#include <util/delay.h>


// Initializes and enables the ADC Module to start functionality
void ADC_Init(void) {
    1370:	df 93       	push	r29
    1372:	cf 93       	push	r28
    1374:	cd b7       	in	r28, 0x3d	; 61
    1376:	de b7       	in	r29, 0x3e	; 62
	 * 7:6, REFS1:0 = 01 to choose AVCC = 5v as reference voltage
	 * 5, ADLAR   = 0 right adjusted
	 * 4:0, MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	// Sets REFS1:0 to '01'
	ADMUX = (1 << REFS0);
    1378:	e7 e2       	ldi	r30, 0x27	; 39
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 e4       	ldi	r24, 0x40	; 64
    137e:	80 83       	st	Z, r24
	 * ADIE = 0 Disable ADC Interrupt
	 * ADATE = 0 Disable Auto Trigger
	 * ADPS2:0 = 111 to choose ADC_Clock = F_CPU/128 = 16Mhz/128 = 125Khz --> ADC must operate in range 50-200Khz
	 */
	// Enables ADC
	ADCSRA = (1 << ADEN);
    1380:	e6 e2       	ldi	r30, 0x26	; 38
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 e8       	ldi	r24, 0x80	; 128
    1386:	80 83       	st	Z, r24

	// Choose Prescaler: 128
	ADCSRA = (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
    1388:	e6 e2       	ldi	r30, 0x26	; 38
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	87 e0       	ldi	r24, 0x07	; 7
    138e:	80 83       	st	Z, r24
}
    1390:	cf 91       	pop	r28
    1392:	df 91       	pop	r29
    1394:	08 95       	ret

00001396 <ADC_readChannel>:


 // Reads the content written to the selected channel of the ADC
uint16 ADC_readChannel(uint8 channel_num) {
    1396:	df 93       	push	r29
    1398:	cf 93       	push	r28
    139a:	0f 92       	push	r0
    139c:	cd b7       	in	r28, 0x3d	; 61
    139e:	de b7       	in	r29, 0x3e	; 62
    13a0:	89 83       	std	Y+1, r24	; 0x01

	// Starts conversion
	ADCSRA = (1 << ADSC);
    13a2:	e6 e2       	ldi	r30, 0x26	; 38
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 e4       	ldi	r24, 0x40	; 64
    13a8:	80 83       	st	Z, r24

	// Busy wait untill ADIF = 1
	while ( BIT_IS_CLR(ADCSRA, ADIF) );
    13aa:	e6 e2       	ldi	r30, 0x26	; 38
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 81       	ld	r24, Z
    13b0:	88 2f       	mov	r24, r24
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	80 71       	andi	r24, 0x10	; 16
    13b6:	90 70       	andi	r25, 0x00	; 0
    13b8:	00 97       	sbiw	r24, 0x00	; 0
    13ba:	b9 f3       	breq	.-18     	; 0x13aa <ADC_readChannel+0x14>

	// sET FLAG BY 1 TO CLEAR
	ADCSRA = (1 << ADIF);
    13bc:	e6 e2       	ldi	r30, 0x26	; 38
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 e1       	ldi	r24, 0x10	; 16
    13c2:	80 83       	st	Z, r24

	return ADC;
    13c4:	e4 e2       	ldi	r30, 0x24	; 36
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	91 81       	ldd	r25, Z+1	; 0x01
}
    13cc:	0f 90       	pop	r0
    13ce:	cf 91       	pop	r28
    13d0:	df 91       	pop	r29
    13d2:	08 95       	ret

000013d4 <SEGMENT_Init>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
SEGMENT_Error_t SEGMENT_Init(uint8 port_num) {
    13d4:	df 93       	push	r29
    13d6:	cf 93       	push	r28
    13d8:	00 d0       	rcall	.+0      	; 0x13da <SEGMENT_Init+0x6>
    13da:	cd b7       	in	r28, 0x3d	; 61
    13dc:	de b7       	in	r29, 0x3e	; 62
    13de:	8a 83       	std	Y+2, r24	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t SEGMENT_Driver_Checker = NULL;
    13e0:	19 82       	std	Y+1, r1	; 0x01

	if((port_num >= NUM_OF_PORTS)) {
    13e2:	8a 81       	ldd	r24, Y+2	; 0x02
    13e4:	84 30       	cpi	r24, 0x04	; 4
    13e6:	18 f0       	brcs	.+6      	; 0x13ee <SEGMENT_Init+0x1a>
		SEGMENT_Driver_Checker = SEGMENT_WRONG_PORT_NUMBER;
    13e8:	82 e0       	ldi	r24, 0x02	; 2
    13ea:	89 83       	std	Y+1, r24	; 0x01
    13ec:	15 c0       	rjmp	.+42     	; 0x1418 <SEGMENT_Init+0x44>
	}
	else {
		/* Setup the pin direction as required */
		GPIO_setupPinDirection(port_num, PIN_0, PIN_OUTPUT);
    13ee:	8a 81       	ldd	r24, Y+2	; 0x02
    13f0:	60 e0       	ldi	r22, 0x00	; 0
    13f2:	41 e0       	ldi	r20, 0x01	; 1
    13f4:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(port_num, PIN_1, PIN_OUTPUT);
    13f8:	8a 81       	ldd	r24, Y+2	; 0x02
    13fa:	61 e0       	ldi	r22, 0x01	; 1
    13fc:	41 e0       	ldi	r20, 0x01	; 1
    13fe:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(port_num, PIN_2, PIN_OUTPUT);
    1402:	8a 81       	ldd	r24, Y+2	; 0x02
    1404:	62 e0       	ldi	r22, 0x02	; 2
    1406:	41 e0       	ldi	r20, 0x01	; 1
    1408:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(port_num, PIN_3, PIN_OUTPUT);
    140c:	8a 81       	ldd	r24, Y+2	; 0x02
    140e:	63 e0       	ldi	r22, 0x03	; 3
    1410:	41 e0       	ldi	r20, 0x01	; 1
    1412:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>
		SEGMENT_Driver_Checker = SEGMENT_OK;
    1416:	19 82       	std	Y+1, r1	; 0x01
	}
	return SEGMENT_Driver_Checker;
    1418:	89 81       	ldd	r24, Y+1	; 0x01
}
    141a:	0f 90       	pop	r0
    141c:	0f 90       	pop	r0
    141e:	cf 91       	pop	r28
    1420:	df 91       	pop	r29
    1422:	08 95       	ret

00001424 <SEGMENT_DISPLAY>:

SEGMENT_Error_t SEGMENT_DISPLAY(uint8 port_num, uint8 value) {
    1424:	df 93       	push	r29
    1426:	cf 93       	push	r28
    1428:	00 d0       	rcall	.+0      	; 0x142a <SEGMENT_DISPLAY+0x6>
    142a:	00 d0       	rcall	.+0      	; 0x142c <SEGMENT_DISPLAY+0x8>
    142c:	0f 92       	push	r0
    142e:	cd b7       	in	r28, 0x3d	; 61
    1430:	de b7       	in	r29, 0x3e	; 62
    1432:	8a 83       	std	Y+2, r24	; 0x02
    1434:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t SEGMENT_Driver_Checker = NULL;
    1436:	19 82       	std	Y+1, r1	; 0x01

	if((port_num >= NUM_OF_PORTS)) {
    1438:	8a 81       	ldd	r24, Y+2	; 0x02
    143a:	84 30       	cpi	r24, 0x04	; 4
    143c:	18 f0       	brcs	.+6      	; 0x1444 <SEGMENT_DISPLAY+0x20>
		SEGMENT_Driver_Checker = SEGMENT_WRONG_PORT_NUMBER;
    143e:	82 e0       	ldi	r24, 0x02	; 2
    1440:	89 83       	std	Y+1, r24	; 0x01
    1442:	24 c1       	rjmp	.+584    	; 0x168c <SEGMENT_DISPLAY+0x268>
	}
	else if((value < 0 && value > 9)) {
		SEGMENT_Driver_Checker = SEGMENT_WRONG_VALUE;
	}
	else {
		switch(value) {
    1444:	8b 81       	ldd	r24, Y+3	; 0x03
    1446:	28 2f       	mov	r18, r24
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	3d 83       	std	Y+5, r19	; 0x05
    144c:	2c 83       	std	Y+4, r18	; 0x04
    144e:	8c 81       	ldd	r24, Y+4	; 0x04
    1450:	9d 81       	ldd	r25, Y+5	; 0x05
    1452:	84 30       	cpi	r24, 0x04	; 4
    1454:	91 05       	cpc	r25, r1
    1456:	09 f4       	brne	.+2      	; 0x145a <SEGMENT_DISPLAY+0x36>
    1458:	9b c0       	rjmp	.+310    	; 0x1590 <SEGMENT_DISPLAY+0x16c>
    145a:	2c 81       	ldd	r18, Y+4	; 0x04
    145c:	3d 81       	ldd	r19, Y+5	; 0x05
    145e:	25 30       	cpi	r18, 0x05	; 5
    1460:	31 05       	cpc	r19, r1
    1462:	ec f4       	brge	.+58     	; 0x149e <SEGMENT_DISPLAY+0x7a>
    1464:	8c 81       	ldd	r24, Y+4	; 0x04
    1466:	9d 81       	ldd	r25, Y+5	; 0x05
    1468:	81 30       	cpi	r24, 0x01	; 1
    146a:	91 05       	cpc	r25, r1
    146c:	09 f4       	brne	.+2      	; 0x1470 <SEGMENT_DISPLAY+0x4c>
    146e:	51 c0       	rjmp	.+162    	; 0x1512 <SEGMENT_DISPLAY+0xee>
    1470:	2c 81       	ldd	r18, Y+4	; 0x04
    1472:	3d 81       	ldd	r19, Y+5	; 0x05
    1474:	22 30       	cpi	r18, 0x02	; 2
    1476:	31 05       	cpc	r19, r1
    1478:	2c f4       	brge	.+10     	; 0x1484 <SEGMENT_DISPLAY+0x60>
    147a:	8c 81       	ldd	r24, Y+4	; 0x04
    147c:	9d 81       	ldd	r25, Y+5	; 0x05
    147e:	00 97       	sbiw	r24, 0x00	; 0
    1480:	99 f1       	breq	.+102    	; 0x14e8 <SEGMENT_DISPLAY+0xc4>
    1482:	03 c1       	rjmp	.+518    	; 0x168a <SEGMENT_DISPLAY+0x266>
    1484:	2c 81       	ldd	r18, Y+4	; 0x04
    1486:	3d 81       	ldd	r19, Y+5	; 0x05
    1488:	22 30       	cpi	r18, 0x02	; 2
    148a:	31 05       	cpc	r19, r1
    148c:	09 f4       	brne	.+2      	; 0x1490 <SEGMENT_DISPLAY+0x6c>
    148e:	56 c0       	rjmp	.+172    	; 0x153c <SEGMENT_DISPLAY+0x118>
    1490:	8c 81       	ldd	r24, Y+4	; 0x04
    1492:	9d 81       	ldd	r25, Y+5	; 0x05
    1494:	83 30       	cpi	r24, 0x03	; 3
    1496:	91 05       	cpc	r25, r1
    1498:	09 f4       	brne	.+2      	; 0x149c <SEGMENT_DISPLAY+0x78>
    149a:	65 c0       	rjmp	.+202    	; 0x1566 <SEGMENT_DISPLAY+0x142>
    149c:	f6 c0       	rjmp	.+492    	; 0x168a <SEGMENT_DISPLAY+0x266>
    149e:	2c 81       	ldd	r18, Y+4	; 0x04
    14a0:	3d 81       	ldd	r19, Y+5	; 0x05
    14a2:	27 30       	cpi	r18, 0x07	; 7
    14a4:	31 05       	cpc	r19, r1
    14a6:	09 f4       	brne	.+2      	; 0x14aa <SEGMENT_DISPLAY+0x86>
    14a8:	b2 c0       	rjmp	.+356    	; 0x160e <SEGMENT_DISPLAY+0x1ea>
    14aa:	8c 81       	ldd	r24, Y+4	; 0x04
    14ac:	9d 81       	ldd	r25, Y+5	; 0x05
    14ae:	88 30       	cpi	r24, 0x08	; 8
    14b0:	91 05       	cpc	r25, r1
    14b2:	6c f4       	brge	.+26     	; 0x14ce <SEGMENT_DISPLAY+0xaa>
    14b4:	2c 81       	ldd	r18, Y+4	; 0x04
    14b6:	3d 81       	ldd	r19, Y+5	; 0x05
    14b8:	25 30       	cpi	r18, 0x05	; 5
    14ba:	31 05       	cpc	r19, r1
    14bc:	09 f4       	brne	.+2      	; 0x14c0 <SEGMENT_DISPLAY+0x9c>
    14be:	7d c0       	rjmp	.+250    	; 0x15ba <SEGMENT_DISPLAY+0x196>
    14c0:	8c 81       	ldd	r24, Y+4	; 0x04
    14c2:	9d 81       	ldd	r25, Y+5	; 0x05
    14c4:	86 30       	cpi	r24, 0x06	; 6
    14c6:	91 05       	cpc	r25, r1
    14c8:	09 f4       	brne	.+2      	; 0x14cc <SEGMENT_DISPLAY+0xa8>
    14ca:	8c c0       	rjmp	.+280    	; 0x15e4 <SEGMENT_DISPLAY+0x1c0>
    14cc:	de c0       	rjmp	.+444    	; 0x168a <SEGMENT_DISPLAY+0x266>
    14ce:	2c 81       	ldd	r18, Y+4	; 0x04
    14d0:	3d 81       	ldd	r19, Y+5	; 0x05
    14d2:	28 30       	cpi	r18, 0x08	; 8
    14d4:	31 05       	cpc	r19, r1
    14d6:	09 f4       	brne	.+2      	; 0x14da <SEGMENT_DISPLAY+0xb6>
    14d8:	af c0       	rjmp	.+350    	; 0x1638 <SEGMENT_DISPLAY+0x214>
    14da:	8c 81       	ldd	r24, Y+4	; 0x04
    14dc:	9d 81       	ldd	r25, Y+5	; 0x05
    14de:	89 30       	cpi	r24, 0x09	; 9
    14e0:	91 05       	cpc	r25, r1
    14e2:	09 f4       	brne	.+2      	; 0x14e6 <SEGMENT_DISPLAY+0xc2>
    14e4:	be c0       	rjmp	.+380    	; 0x1662 <SEGMENT_DISPLAY+0x23e>
    14e6:	d1 c0       	rjmp	.+418    	; 0x168a <SEGMENT_DISPLAY+0x266>
			case 0:
				GPIO_writePin(port_num, PIN_0, LOGIC_LOW);
    14e8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ea:	60 e0       	ldi	r22, 0x00	; 0
    14ec:	40 e0       	ldi	r20, 0x00	; 0
    14ee:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
    14f2:	8a 81       	ldd	r24, Y+2	; 0x02
    14f4:	61 e0       	ldi	r22, 0x01	; 1
    14f6:	40 e0       	ldi	r20, 0x00	; 0
    14f8:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
    14fc:	8a 81       	ldd	r24, Y+2	; 0x02
    14fe:	62 e0       	ldi	r22, 0x02	; 2
    1500:	40 e0       	ldi	r20, 0x00	; 0
    1502:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    1506:	8a 81       	ldd	r24, Y+2	; 0x02
    1508:	63 e0       	ldi	r22, 0x03	; 3
    150a:	40 e0       	ldi	r20, 0x00	; 0
    150c:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_writePin>
    1510:	bc c0       	rjmp	.+376    	; 0x168a <SEGMENT_DISPLAY+0x266>
				break;
			case 1:
				GPIO_writePin(port_num, PIN_0, LOGIC_HIGH);
    1512:	8a 81       	ldd	r24, Y+2	; 0x02
    1514:	60 e0       	ldi	r22, 0x00	; 0
    1516:	41 e0       	ldi	r20, 0x01	; 1
    1518:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
    151c:	8a 81       	ldd	r24, Y+2	; 0x02
    151e:	61 e0       	ldi	r22, 0x01	; 1
    1520:	40 e0       	ldi	r20, 0x00	; 0
    1522:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
    1526:	8a 81       	ldd	r24, Y+2	; 0x02
    1528:	62 e0       	ldi	r22, 0x02	; 2
    152a:	40 e0       	ldi	r20, 0x00	; 0
    152c:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    1530:	8a 81       	ldd	r24, Y+2	; 0x02
    1532:	63 e0       	ldi	r22, 0x03	; 3
    1534:	40 e0       	ldi	r20, 0x00	; 0
    1536:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_writePin>
    153a:	a7 c0       	rjmp	.+334    	; 0x168a <SEGMENT_DISPLAY+0x266>
				break;
			case 2:
				GPIO_writePin(port_num, PIN_0, LOGIC_LOW);
    153c:	8a 81       	ldd	r24, Y+2	; 0x02
    153e:	60 e0       	ldi	r22, 0x00	; 0
    1540:	40 e0       	ldi	r20, 0x00	; 0
    1542:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_HIGH);
    1546:	8a 81       	ldd	r24, Y+2	; 0x02
    1548:	61 e0       	ldi	r22, 0x01	; 1
    154a:	41 e0       	ldi	r20, 0x01	; 1
    154c:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
    1550:	8a 81       	ldd	r24, Y+2	; 0x02
    1552:	62 e0       	ldi	r22, 0x02	; 2
    1554:	40 e0       	ldi	r20, 0x00	; 0
    1556:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    155a:	8a 81       	ldd	r24, Y+2	; 0x02
    155c:	63 e0       	ldi	r22, 0x03	; 3
    155e:	40 e0       	ldi	r20, 0x00	; 0
    1560:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_writePin>
    1564:	92 c0       	rjmp	.+292    	; 0x168a <SEGMENT_DISPLAY+0x266>
				break;
			case 3:
				GPIO_writePin(port_num, PIN_0, LOGIC_HIGH);
    1566:	8a 81       	ldd	r24, Y+2	; 0x02
    1568:	60 e0       	ldi	r22, 0x00	; 0
    156a:	41 e0       	ldi	r20, 0x01	; 1
    156c:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_HIGH);
    1570:	8a 81       	ldd	r24, Y+2	; 0x02
    1572:	61 e0       	ldi	r22, 0x01	; 1
    1574:	41 e0       	ldi	r20, 0x01	; 1
    1576:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
    157a:	8a 81       	ldd	r24, Y+2	; 0x02
    157c:	62 e0       	ldi	r22, 0x02	; 2
    157e:	40 e0       	ldi	r20, 0x00	; 0
    1580:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    1584:	8a 81       	ldd	r24, Y+2	; 0x02
    1586:	63 e0       	ldi	r22, 0x03	; 3
    1588:	40 e0       	ldi	r20, 0x00	; 0
    158a:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_writePin>
    158e:	7d c0       	rjmp	.+250    	; 0x168a <SEGMENT_DISPLAY+0x266>
				break;
			case 4:
				GPIO_writePin(port_num, PIN_0, LOGIC_LOW);
    1590:	8a 81       	ldd	r24, Y+2	; 0x02
    1592:	60 e0       	ldi	r22, 0x00	; 0
    1594:	40 e0       	ldi	r20, 0x00	; 0
    1596:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
    159a:	8a 81       	ldd	r24, Y+2	; 0x02
    159c:	61 e0       	ldi	r22, 0x01	; 1
    159e:	40 e0       	ldi	r20, 0x00	; 0
    15a0:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_HIGH);
    15a4:	8a 81       	ldd	r24, Y+2	; 0x02
    15a6:	62 e0       	ldi	r22, 0x02	; 2
    15a8:	41 e0       	ldi	r20, 0x01	; 1
    15aa:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    15ae:	8a 81       	ldd	r24, Y+2	; 0x02
    15b0:	63 e0       	ldi	r22, 0x03	; 3
    15b2:	40 e0       	ldi	r20, 0x00	; 0
    15b4:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_writePin>
    15b8:	68 c0       	rjmp	.+208    	; 0x168a <SEGMENT_DISPLAY+0x266>
				break;
			case 5:
				GPIO_writePin(port_num, PIN_0, LOGIC_HIGH);
    15ba:	8a 81       	ldd	r24, Y+2	; 0x02
    15bc:	60 e0       	ldi	r22, 0x00	; 0
    15be:	41 e0       	ldi	r20, 0x01	; 1
    15c0:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
    15c4:	8a 81       	ldd	r24, Y+2	; 0x02
    15c6:	61 e0       	ldi	r22, 0x01	; 1
    15c8:	40 e0       	ldi	r20, 0x00	; 0
    15ca:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_HIGH);
    15ce:	8a 81       	ldd	r24, Y+2	; 0x02
    15d0:	62 e0       	ldi	r22, 0x02	; 2
    15d2:	41 e0       	ldi	r20, 0x01	; 1
    15d4:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    15d8:	8a 81       	ldd	r24, Y+2	; 0x02
    15da:	63 e0       	ldi	r22, 0x03	; 3
    15dc:	40 e0       	ldi	r20, 0x00	; 0
    15de:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_writePin>
    15e2:	53 c0       	rjmp	.+166    	; 0x168a <SEGMENT_DISPLAY+0x266>
				break;
			case 6:
				GPIO_writePin(port_num, PIN_0, LOGIC_LOW);
    15e4:	8a 81       	ldd	r24, Y+2	; 0x02
    15e6:	60 e0       	ldi	r22, 0x00	; 0
    15e8:	40 e0       	ldi	r20, 0x00	; 0
    15ea:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_HIGH);
    15ee:	8a 81       	ldd	r24, Y+2	; 0x02
    15f0:	61 e0       	ldi	r22, 0x01	; 1
    15f2:	41 e0       	ldi	r20, 0x01	; 1
    15f4:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_HIGH);
    15f8:	8a 81       	ldd	r24, Y+2	; 0x02
    15fa:	62 e0       	ldi	r22, 0x02	; 2
    15fc:	41 e0       	ldi	r20, 0x01	; 1
    15fe:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    1602:	8a 81       	ldd	r24, Y+2	; 0x02
    1604:	63 e0       	ldi	r22, 0x03	; 3
    1606:	40 e0       	ldi	r20, 0x00	; 0
    1608:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_writePin>
    160c:	3e c0       	rjmp	.+124    	; 0x168a <SEGMENT_DISPLAY+0x266>
				break;
			case 7:
				GPIO_writePin(port_num, PIN_0, LOGIC_HIGH);
    160e:	8a 81       	ldd	r24, Y+2	; 0x02
    1610:	60 e0       	ldi	r22, 0x00	; 0
    1612:	41 e0       	ldi	r20, 0x01	; 1
    1614:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_HIGH);
    1618:	8a 81       	ldd	r24, Y+2	; 0x02
    161a:	61 e0       	ldi	r22, 0x01	; 1
    161c:	41 e0       	ldi	r20, 0x01	; 1
    161e:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_HIGH);
    1622:	8a 81       	ldd	r24, Y+2	; 0x02
    1624:	62 e0       	ldi	r22, 0x02	; 2
    1626:	41 e0       	ldi	r20, 0x01	; 1
    1628:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    162c:	8a 81       	ldd	r24, Y+2	; 0x02
    162e:	63 e0       	ldi	r22, 0x03	; 3
    1630:	40 e0       	ldi	r20, 0x00	; 0
    1632:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_writePin>
    1636:	29 c0       	rjmp	.+82     	; 0x168a <SEGMENT_DISPLAY+0x266>
				break;
			case 8:
				GPIO_writePin(port_num, PIN_0, LOGIC_LOW);
    1638:	8a 81       	ldd	r24, Y+2	; 0x02
    163a:	60 e0       	ldi	r22, 0x00	; 0
    163c:	40 e0       	ldi	r20, 0x00	; 0
    163e:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
    1642:	8a 81       	ldd	r24, Y+2	; 0x02
    1644:	61 e0       	ldi	r22, 0x01	; 1
    1646:	40 e0       	ldi	r20, 0x00	; 0
    1648:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
    164c:	8a 81       	ldd	r24, Y+2	; 0x02
    164e:	62 e0       	ldi	r22, 0x02	; 2
    1650:	40 e0       	ldi	r20, 0x00	; 0
    1652:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_HIGH);
    1656:	8a 81       	ldd	r24, Y+2	; 0x02
    1658:	63 e0       	ldi	r22, 0x03	; 3
    165a:	41 e0       	ldi	r20, 0x01	; 1
    165c:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_writePin>
    1660:	14 c0       	rjmp	.+40     	; 0x168a <SEGMENT_DISPLAY+0x266>
				break;
			case 9:
				GPIO_writePin(port_num, PIN_0, LOGIC_HIGH);
    1662:	8a 81       	ldd	r24, Y+2	; 0x02
    1664:	60 e0       	ldi	r22, 0x00	; 0
    1666:	41 e0       	ldi	r20, 0x01	; 1
    1668:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
    166c:	8a 81       	ldd	r24, Y+2	; 0x02
    166e:	61 e0       	ldi	r22, 0x01	; 1
    1670:	40 e0       	ldi	r20, 0x00	; 0
    1672:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
    1676:	8a 81       	ldd	r24, Y+2	; 0x02
    1678:	62 e0       	ldi	r22, 0x02	; 2
    167a:	40 e0       	ldi	r20, 0x00	; 0
    167c:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_HIGH);
    1680:	8a 81       	ldd	r24, Y+2	; 0x02
    1682:	63 e0       	ldi	r22, 0x03	; 3
    1684:	41 e0       	ldi	r20, 0x01	; 1
    1686:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_writePin>
				break;
		}
		SEGMENT_Driver_Checker = SEGMENT_OK;
    168a:	19 82       	std	Y+1, r1	; 0x01
	}
	return SEGMENT_Driver_Checker;
    168c:	89 81       	ldd	r24, Y+1	; 0x01
}
    168e:	0f 90       	pop	r0
    1690:	0f 90       	pop	r0
    1692:	0f 90       	pop	r0
    1694:	0f 90       	pop	r0
    1696:	0f 90       	pop	r0
    1698:	cf 91       	pop	r28
    169a:	df 91       	pop	r29
    169c:	08 95       	ret

0000169e <LED_Init>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
LED_Error_t LED_Init(uint8 port_num, uint8 pin_num) {
    169e:	df 93       	push	r29
    16a0:	cf 93       	push	r28
    16a2:	00 d0       	rcall	.+0      	; 0x16a4 <LED_Init+0x6>
    16a4:	0f 92       	push	r0
    16a6:	cd b7       	in	r28, 0x3d	; 61
    16a8:	de b7       	in	r29, 0x3e	; 62
    16aa:	8a 83       	std	Y+2, r24	; 0x02
    16ac:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t LED_Driver_Checker = NULL;
    16ae:	19 82       	std	Y+1, r1	; 0x01
	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    16b0:	8b 81       	ldd	r24, Y+3	; 0x03
    16b2:	88 30       	cpi	r24, 0x08	; 8
    16b4:	18 f0       	brcs	.+6      	; 0x16bc <LED_Init+0x1e>
		LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	89 83       	std	Y+1, r24	; 0x01
    16ba:	0c c0       	rjmp	.+24     	; 0x16d4 <LED_Init+0x36>
	}
	else if((port_num >= NUM_OF_PORTS)) {
    16bc:	8a 81       	ldd	r24, Y+2	; 0x02
    16be:	84 30       	cpi	r24, 0x04	; 4
    16c0:	18 f0       	brcs	.+6      	; 0x16c8 <LED_Init+0x2a>
		LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    16c2:	82 e0       	ldi	r24, 0x02	; 2
    16c4:	89 83       	std	Y+1, r24	; 0x01
    16c6:	06 c0       	rjmp	.+12     	; 0x16d4 <LED_Init+0x36>
	}
	else {
		/* Setup the pin direction as required */
		GPIO_setupPinDirection(port_num, pin_num, PIN_OUTPUT);
    16c8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ca:	6b 81       	ldd	r22, Y+3	; 0x03
    16cc:	41 e0       	ldi	r20, 0x01	; 1
    16ce:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>
		LED_Driver_Checker = LED_OK;
    16d2:	19 82       	std	Y+1, r1	; 0x01
	}
	return LED_Driver_Checker;
    16d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    16d6:	0f 90       	pop	r0
    16d8:	0f 90       	pop	r0
    16da:	0f 90       	pop	r0
    16dc:	cf 91       	pop	r28
    16de:	df 91       	pop	r29
    16e0:	08 95       	ret

000016e2 <LED_On>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
LED_Error_t LED_On(uint8 port_num, uint8 pin_num) {
    16e2:	df 93       	push	r29
    16e4:	cf 93       	push	r28
    16e6:	00 d0       	rcall	.+0      	; 0x16e8 <LED_On+0x6>
    16e8:	0f 92       	push	r0
    16ea:	cd b7       	in	r28, 0x3d	; 61
    16ec:	de b7       	in	r29, 0x3e	; 62
    16ee:	8a 83       	std	Y+2, r24	; 0x02
    16f0:	6b 83       	std	Y+3, r22	; 0x03

	uint8_t LED_Driver_Checker = NULL;
    16f2:	19 82       	std	Y+1, r1	; 0x01
		if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    16f4:	8b 81       	ldd	r24, Y+3	; 0x03
    16f6:	88 30       	cpi	r24, 0x08	; 8
    16f8:	18 f0       	brcs	.+6      	; 0x1700 <LED_On+0x1e>
			LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	89 83       	std	Y+1, r24	; 0x01
    16fe:	0c c0       	rjmp	.+24     	; 0x1718 <LED_On+0x36>
		}
		else if((port_num >= NUM_OF_PORTS)) {
    1700:	8a 81       	ldd	r24, Y+2	; 0x02
    1702:	84 30       	cpi	r24, 0x04	; 4
    1704:	18 f0       	brcs	.+6      	; 0x170c <LED_On+0x2a>
			LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    1706:	82 e0       	ldi	r24, 0x02	; 2
    1708:	89 83       	std	Y+1, r24	; 0x01
    170a:	06 c0       	rjmp	.+12     	; 0x1718 <LED_On+0x36>
		}
		else {
			/* Setup the pin direction as required */
			GPIO_writePin(port_num, pin_num, LOGIC_HIGH);
    170c:	8a 81       	ldd	r24, Y+2	; 0x02
    170e:	6b 81       	ldd	r22, Y+3	; 0x03
    1710:	41 e0       	ldi	r20, 0x01	; 1
    1712:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_writePin>
			LED_Driver_Checker = LED_OK;
    1716:	19 82       	std	Y+1, r1	; 0x01
		}
		return LED_Driver_Checker;
    1718:	89 81       	ldd	r24, Y+1	; 0x01
}
    171a:	0f 90       	pop	r0
    171c:	0f 90       	pop	r0
    171e:	0f 90       	pop	r0
    1720:	cf 91       	pop	r28
    1722:	df 91       	pop	r29
    1724:	08 95       	ret

00001726 <LED_Off>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
LED_Error_t LED_Off(uint8 port_num, uint8 pin_num) {
    1726:	df 93       	push	r29
    1728:	cf 93       	push	r28
    172a:	00 d0       	rcall	.+0      	; 0x172c <LED_Off+0x6>
    172c:	0f 92       	push	r0
    172e:	cd b7       	in	r28, 0x3d	; 61
    1730:	de b7       	in	r29, 0x3e	; 62
    1732:	8a 83       	std	Y+2, r24	; 0x02
    1734:	6b 83       	std	Y+3, r22	; 0x03

	uint8_t LED_Driver_Checker = NULL;
    1736:	19 82       	std	Y+1, r1	; 0x01
		if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    1738:	8b 81       	ldd	r24, Y+3	; 0x03
    173a:	88 30       	cpi	r24, 0x08	; 8
    173c:	18 f0       	brcs	.+6      	; 0x1744 <LED_Off+0x1e>
			LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	89 83       	std	Y+1, r24	; 0x01
    1742:	0c c0       	rjmp	.+24     	; 0x175c <LED_Off+0x36>
		}
		else if((port_num >= NUM_OF_PORTS)) {
    1744:	8a 81       	ldd	r24, Y+2	; 0x02
    1746:	84 30       	cpi	r24, 0x04	; 4
    1748:	18 f0       	brcs	.+6      	; 0x1750 <LED_Off+0x2a>
			LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    174a:	82 e0       	ldi	r24, 0x02	; 2
    174c:	89 83       	std	Y+1, r24	; 0x01
    174e:	06 c0       	rjmp	.+12     	; 0x175c <LED_Off+0x36>
		}
		else {
			/* Setup the pin direction as required */
			GPIO_writePin(port_num, pin_num, LOGIC_LOW);
    1750:	8a 81       	ldd	r24, Y+2	; 0x02
    1752:	6b 81       	ldd	r22, Y+3	; 0x03
    1754:	40 e0       	ldi	r20, 0x00	; 0
    1756:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_writePin>
			LED_Driver_Checker = LED_OK;
    175a:	19 82       	std	Y+1, r1	; 0x01
		}
		return LED_Driver_Checker;
    175c:	89 81       	ldd	r24, Y+1	; 0x01
}
    175e:	0f 90       	pop	r0
    1760:	0f 90       	pop	r0
    1762:	0f 90       	pop	r0
    1764:	cf 91       	pop	r28
    1766:	df 91       	pop	r29
    1768:	08 95       	ret

0000176a <LED_Toggle>:

LED_Error_t LED_Toggle(uint8 port_num, uint8 pin_num) {
    176a:	df 93       	push	r29
    176c:	cf 93       	push	r28
    176e:	00 d0       	rcall	.+0      	; 0x1770 <LED_Toggle+0x6>
    1770:	0f 92       	push	r0
    1772:	cd b7       	in	r28, 0x3d	; 61
    1774:	de b7       	in	r29, 0x3e	; 62
    1776:	8a 83       	std	Y+2, r24	; 0x02
    1778:	6b 83       	std	Y+3, r22	; 0x03

	uint8_t LED_Driver_Checker = NULL;
    177a:	19 82       	std	Y+1, r1	; 0x01
		if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    177c:	8b 81       	ldd	r24, Y+3	; 0x03
    177e:	88 30       	cpi	r24, 0x08	; 8
    1780:	18 f0       	brcs	.+6      	; 0x1788 <LED_Toggle+0x1e>
			LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	89 83       	std	Y+1, r24	; 0x01
    1786:	0b c0       	rjmp	.+22     	; 0x179e <LED_Toggle+0x34>
		}
		else if((port_num >= NUM_OF_PORTS)) {
    1788:	8a 81       	ldd	r24, Y+2	; 0x02
    178a:	84 30       	cpi	r24, 0x04	; 4
    178c:	18 f0       	brcs	.+6      	; 0x1794 <LED_Toggle+0x2a>
			LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    178e:	82 e0       	ldi	r24, 0x02	; 2
    1790:	89 83       	std	Y+1, r24	; 0x01
    1792:	05 c0       	rjmp	.+10     	; 0x179e <LED_Toggle+0x34>
		}
		else {
			/* Setup the pin direction as required */
			GPIO_togglePin(port_num, pin_num);
    1794:	8a 81       	ldd	r24, Y+2	; 0x02
    1796:	6b 81       	ldd	r22, Y+3	; 0x03
    1798:	0e 94 93 07 	call	0xf26	; 0xf26 <GPIO_togglePin>
			LED_Driver_Checker = LED_OK;
    179c:	19 82       	std	Y+1, r1	; 0x01
		}
		return LED_Driver_Checker;
    179e:	89 81       	ldd	r24, Y+1	; 0x01
}
    17a0:	0f 90       	pop	r0
    17a2:	0f 90       	pop	r0
    17a4:	0f 90       	pop	r0
    17a6:	cf 91       	pop	r28
    17a8:	df 91       	pop	r29
    17aa:	08 95       	ret

000017ac <LCD_Init>:
#include "avr/io.h" /* To use the IO Ports Registers */
#include <util/delay.h>


// Initializes and enables the LCD Module to start functionality
void LCD_Init(void) {
    17ac:	df 93       	push	r29
    17ae:	cf 93       	push	r28
    17b0:	cd b7       	in	r28, 0x3d	; 61
    17b2:	de b7       	in	r29, 0x3e	; 62
    17b4:	2e 97       	sbiw	r28, 0x0e	; 14
    17b6:	0f b6       	in	r0, 0x3f	; 63
    17b8:	f8 94       	cli
    17ba:	de bf       	out	0x3e, r29	; 62
    17bc:	0f be       	out	0x3f, r0	; 63
    17be:	cd bf       	out	0x3d, r28	; 61
	// Initialize RS Pin
	GPIO_setupPinDirection(LCD_INIT_PORT, LCD_RS, PIN_OUTPUT);
    17c0:	83 e0       	ldi	r24, 0x03	; 3
    17c2:	64 e0       	ldi	r22, 0x04	; 4
    17c4:	41 e0       	ldi	r20, 0x01	; 1
    17c6:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>

	// Initialize Enable Pin
	GPIO_setupPinDirection(LCD_INIT_PORT, LCD_ENABLE, PIN_OUTPUT);
    17ca:	83 e0       	ldi	r24, 0x03	; 3
    17cc:	65 e0       	ldi	r22, 0x05	; 5
    17ce:	41 e0       	ldi	r20, 0x01	; 1
    17d0:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>

	// Setup the port and pins for the data pins inside the LCD
	GPIO_setupPortDirection(LCD_DATA_PORT, PORT_OUTPUT);
    17d4:	82 e0       	ldi	r24, 0x02	; 2
    17d6:	6f ef       	ldi	r22, 0xFF	; 255
    17d8:	0e 94 cc 08 	call	0x1198	; 0x1198 <GPIO_setupPortDirection>
    17dc:	80 e0       	ldi	r24, 0x00	; 0
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	a0 ea       	ldi	r26, 0xA0	; 160
    17e2:	b1 e4       	ldi	r27, 0x41	; 65
    17e4:	8b 87       	std	Y+11, r24	; 0x0b
    17e6:	9c 87       	std	Y+12, r25	; 0x0c
    17e8:	ad 87       	std	Y+13, r26	; 0x0d
    17ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    17ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    17f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    17f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    17f4:	20 e0       	ldi	r18, 0x00	; 0
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	4a e7       	ldi	r20, 0x7A	; 122
    17fa:	53 e4       	ldi	r21, 0x43	; 67
    17fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1800:	dc 01       	movw	r26, r24
    1802:	cb 01       	movw	r24, r22
    1804:	8f 83       	std	Y+7, r24	; 0x07
    1806:	98 87       	std	Y+8, r25	; 0x08
    1808:	a9 87       	std	Y+9, r26	; 0x09
    180a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    180c:	6f 81       	ldd	r22, Y+7	; 0x07
    180e:	78 85       	ldd	r23, Y+8	; 0x08
    1810:	89 85       	ldd	r24, Y+9	; 0x09
    1812:	9a 85       	ldd	r25, Y+10	; 0x0a
    1814:	20 e0       	ldi	r18, 0x00	; 0
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	40 e8       	ldi	r20, 0x80	; 128
    181a:	5f e3       	ldi	r21, 0x3F	; 63
    181c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1820:	88 23       	and	r24, r24
    1822:	2c f4       	brge	.+10     	; 0x182e <LCD_Init+0x82>
		__ticks = 1;
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	9e 83       	std	Y+6, r25	; 0x06
    182a:	8d 83       	std	Y+5, r24	; 0x05
    182c:	3f c0       	rjmp	.+126    	; 0x18ac <LCD_Init+0x100>
	else if (__tmp > 65535)
    182e:	6f 81       	ldd	r22, Y+7	; 0x07
    1830:	78 85       	ldd	r23, Y+8	; 0x08
    1832:	89 85       	ldd	r24, Y+9	; 0x09
    1834:	9a 85       	ldd	r25, Y+10	; 0x0a
    1836:	20 e0       	ldi	r18, 0x00	; 0
    1838:	3f ef       	ldi	r19, 0xFF	; 255
    183a:	4f e7       	ldi	r20, 0x7F	; 127
    183c:	57 e4       	ldi	r21, 0x47	; 71
    183e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1842:	18 16       	cp	r1, r24
    1844:	4c f5       	brge	.+82     	; 0x1898 <LCD_Init+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1846:	6b 85       	ldd	r22, Y+11	; 0x0b
    1848:	7c 85       	ldd	r23, Y+12	; 0x0c
    184a:	8d 85       	ldd	r24, Y+13	; 0x0d
    184c:	9e 85       	ldd	r25, Y+14	; 0x0e
    184e:	20 e0       	ldi	r18, 0x00	; 0
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	40 e2       	ldi	r20, 0x20	; 32
    1854:	51 e4       	ldi	r21, 0x41	; 65
    1856:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    185a:	dc 01       	movw	r26, r24
    185c:	cb 01       	movw	r24, r22
    185e:	bc 01       	movw	r22, r24
    1860:	cd 01       	movw	r24, r26
    1862:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1866:	dc 01       	movw	r26, r24
    1868:	cb 01       	movw	r24, r22
    186a:	9e 83       	std	Y+6, r25	; 0x06
    186c:	8d 83       	std	Y+5, r24	; 0x05
    186e:	0f c0       	rjmp	.+30     	; 0x188e <LCD_Init+0xe2>
    1870:	89 e1       	ldi	r24, 0x19	; 25
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	9c 83       	std	Y+4, r25	; 0x04
    1876:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1878:	8b 81       	ldd	r24, Y+3	; 0x03
    187a:	9c 81       	ldd	r25, Y+4	; 0x04
    187c:	01 97       	sbiw	r24, 0x01	; 1
    187e:	f1 f7       	brne	.-4      	; 0x187c <LCD_Init+0xd0>
    1880:	9c 83       	std	Y+4, r25	; 0x04
    1882:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1884:	8d 81       	ldd	r24, Y+5	; 0x05
    1886:	9e 81       	ldd	r25, Y+6	; 0x06
    1888:	01 97       	sbiw	r24, 0x01	; 1
    188a:	9e 83       	std	Y+6, r25	; 0x06
    188c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    188e:	8d 81       	ldd	r24, Y+5	; 0x05
    1890:	9e 81       	ldd	r25, Y+6	; 0x06
    1892:	00 97       	sbiw	r24, 0x00	; 0
    1894:	69 f7       	brne	.-38     	; 0x1870 <LCD_Init+0xc4>
    1896:	14 c0       	rjmp	.+40     	; 0x18c0 <LCD_Init+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1898:	6f 81       	ldd	r22, Y+7	; 0x07
    189a:	78 85       	ldd	r23, Y+8	; 0x08
    189c:	89 85       	ldd	r24, Y+9	; 0x09
    189e:	9a 85       	ldd	r25, Y+10	; 0x0a
    18a0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18a4:	dc 01       	movw	r26, r24
    18a6:	cb 01       	movw	r24, r22
    18a8:	9e 83       	std	Y+6, r25	; 0x06
    18aa:	8d 83       	std	Y+5, r24	; 0x05
    18ac:	8d 81       	ldd	r24, Y+5	; 0x05
    18ae:	9e 81       	ldd	r25, Y+6	; 0x06
    18b0:	9a 83       	std	Y+2, r25	; 0x02
    18b2:	89 83       	std	Y+1, r24	; 0x01
    18b4:	89 81       	ldd	r24, Y+1	; 0x01
    18b6:	9a 81       	ldd	r25, Y+2	; 0x02
    18b8:	01 97       	sbiw	r24, 0x01	; 1
    18ba:	f1 f7       	brne	.-4      	; 0x18b8 <LCD_Init+0x10c>
    18bc:	9a 83       	std	Y+2, r25	; 0x02
    18be:	89 83       	std	Y+1, r24	; 0x01

	// LCD Power On Internal Delay is 15 mS
	_delay_ms(20);

	// Initializing Sending Commands
	LCD_sendCommand(LCD_TWO_LINE_EIGHT_BIT);
    18c0:	88 e3       	ldi	r24, 0x38	; 56
    18c2:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <LCD_sendCommand>
	LCD_sendCommand(LCD_CURSOR_OFF);
    18c6:	8c e0       	ldi	r24, 0x0C	; 12
    18c8:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_DISPLAY);
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <LCD_sendCommand>
}
    18d2:	2e 96       	adiw	r28, 0x0e	; 14
    18d4:	0f b6       	in	r0, 0x3f	; 63
    18d6:	f8 94       	cli
    18d8:	de bf       	out	0x3e, r29	; 62
    18da:	0f be       	out	0x3f, r0	; 63
    18dc:	cd bf       	out	0x3d, r28	; 61
    18de:	cf 91       	pop	r28
    18e0:	df 91       	pop	r29
    18e2:	08 95       	ret

000018e4 <LCD_sendCommand>:


// Sends a command to the LCD
void LCD_sendCommand(uint8 command) {
    18e4:	df 93       	push	r29
    18e6:	cf 93       	push	r28
    18e8:	cd b7       	in	r28, 0x3d	; 61
    18ea:	de b7       	in	r29, 0x3e	; 62
    18ec:	e9 97       	sbiw	r28, 0x39	; 57
    18ee:	0f b6       	in	r0, 0x3f	; 63
    18f0:	f8 94       	cli
    18f2:	de bf       	out	0x3e, r29	; 62
    18f4:	0f be       	out	0x3f, r0	; 63
    18f6:	cd bf       	out	0x3d, r28	; 61
    18f8:	89 af       	std	Y+57, r24	; 0x39
	// Set RS Pin to '0'
	GPIO_writePin(LCD_INIT_PORT, LCD_RS, LOGIC_LOW);
    18fa:	83 e0       	ldi	r24, 0x03	; 3
    18fc:	64 e0       	ldi	r22, 0x04	; 4
    18fe:	40 e0       	ldi	r20, 0x00	; 0
    1900:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_writePin>
    1904:	80 e0       	ldi	r24, 0x00	; 0
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	a0 e8       	ldi	r26, 0x80	; 128
    190a:	bf e3       	ldi	r27, 0x3F	; 63
    190c:	8d ab       	std	Y+53, r24	; 0x35
    190e:	9e ab       	std	Y+54, r25	; 0x36
    1910:	af ab       	std	Y+55, r26	; 0x37
    1912:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1914:	6d a9       	ldd	r22, Y+53	; 0x35
    1916:	7e a9       	ldd	r23, Y+54	; 0x36
    1918:	8f a9       	ldd	r24, Y+55	; 0x37
    191a:	98 ad       	ldd	r25, Y+56	; 0x38
    191c:	20 e0       	ldi	r18, 0x00	; 0
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	4a e7       	ldi	r20, 0x7A	; 122
    1922:	53 e4       	ldi	r21, 0x43	; 67
    1924:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1928:	dc 01       	movw	r26, r24
    192a:	cb 01       	movw	r24, r22
    192c:	89 ab       	std	Y+49, r24	; 0x31
    192e:	9a ab       	std	Y+50, r25	; 0x32
    1930:	ab ab       	std	Y+51, r26	; 0x33
    1932:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1934:	69 a9       	ldd	r22, Y+49	; 0x31
    1936:	7a a9       	ldd	r23, Y+50	; 0x32
    1938:	8b a9       	ldd	r24, Y+51	; 0x33
    193a:	9c a9       	ldd	r25, Y+52	; 0x34
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	40 e8       	ldi	r20, 0x80	; 128
    1942:	5f e3       	ldi	r21, 0x3F	; 63
    1944:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1948:	88 23       	and	r24, r24
    194a:	2c f4       	brge	.+10     	; 0x1956 <LCD_sendCommand+0x72>
		__ticks = 1;
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	98 ab       	std	Y+48, r25	; 0x30
    1952:	8f a7       	std	Y+47, r24	; 0x2f
    1954:	3f c0       	rjmp	.+126    	; 0x19d4 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1956:	69 a9       	ldd	r22, Y+49	; 0x31
    1958:	7a a9       	ldd	r23, Y+50	; 0x32
    195a:	8b a9       	ldd	r24, Y+51	; 0x33
    195c:	9c a9       	ldd	r25, Y+52	; 0x34
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	3f ef       	ldi	r19, 0xFF	; 255
    1962:	4f e7       	ldi	r20, 0x7F	; 127
    1964:	57 e4       	ldi	r21, 0x47	; 71
    1966:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    196a:	18 16       	cp	r1, r24
    196c:	4c f5       	brge	.+82     	; 0x19c0 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    196e:	6d a9       	ldd	r22, Y+53	; 0x35
    1970:	7e a9       	ldd	r23, Y+54	; 0x36
    1972:	8f a9       	ldd	r24, Y+55	; 0x37
    1974:	98 ad       	ldd	r25, Y+56	; 0x38
    1976:	20 e0       	ldi	r18, 0x00	; 0
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	40 e2       	ldi	r20, 0x20	; 32
    197c:	51 e4       	ldi	r21, 0x41	; 65
    197e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1982:	dc 01       	movw	r26, r24
    1984:	cb 01       	movw	r24, r22
    1986:	bc 01       	movw	r22, r24
    1988:	cd 01       	movw	r24, r26
    198a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    198e:	dc 01       	movw	r26, r24
    1990:	cb 01       	movw	r24, r22
    1992:	98 ab       	std	Y+48, r25	; 0x30
    1994:	8f a7       	std	Y+47, r24	; 0x2f
    1996:	0f c0       	rjmp	.+30     	; 0x19b6 <LCD_sendCommand+0xd2>
    1998:	89 e1       	ldi	r24, 0x19	; 25
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	9e a7       	std	Y+46, r25	; 0x2e
    199e:	8d a7       	std	Y+45, r24	; 0x2d
    19a0:	8d a5       	ldd	r24, Y+45	; 0x2d
    19a2:	9e a5       	ldd	r25, Y+46	; 0x2e
    19a4:	01 97       	sbiw	r24, 0x01	; 1
    19a6:	f1 f7       	brne	.-4      	; 0x19a4 <LCD_sendCommand+0xc0>
    19a8:	9e a7       	std	Y+46, r25	; 0x2e
    19aa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    19ae:	98 a9       	ldd	r25, Y+48	; 0x30
    19b0:	01 97       	sbiw	r24, 0x01	; 1
    19b2:	98 ab       	std	Y+48, r25	; 0x30
    19b4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    19b8:	98 a9       	ldd	r25, Y+48	; 0x30
    19ba:	00 97       	sbiw	r24, 0x00	; 0
    19bc:	69 f7       	brne	.-38     	; 0x1998 <LCD_sendCommand+0xb4>
    19be:	14 c0       	rjmp	.+40     	; 0x19e8 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19c0:	69 a9       	ldd	r22, Y+49	; 0x31
    19c2:	7a a9       	ldd	r23, Y+50	; 0x32
    19c4:	8b a9       	ldd	r24, Y+51	; 0x33
    19c6:	9c a9       	ldd	r25, Y+52	; 0x34
    19c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19cc:	dc 01       	movw	r26, r24
    19ce:	cb 01       	movw	r24, r22
    19d0:	98 ab       	std	Y+48, r25	; 0x30
    19d2:	8f a7       	std	Y+47, r24	; 0x2f
    19d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    19d6:	98 a9       	ldd	r25, Y+48	; 0x30
    19d8:	9c a7       	std	Y+44, r25	; 0x2c
    19da:	8b a7       	std	Y+43, r24	; 0x2b
    19dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    19de:	9c a5       	ldd	r25, Y+44	; 0x2c
    19e0:	01 97       	sbiw	r24, 0x01	; 1
    19e2:	f1 f7       	brne	.-4      	; 0x19e0 <LCD_sendCommand+0xfc>
    19e4:	9c a7       	std	Y+44, r25	; 0x2c
    19e6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	// Set Enable Pin to '1'
	GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
    19e8:	83 e0       	ldi	r24, 0x03	; 3
    19ea:	65 e0       	ldi	r22, 0x05	; 5
    19ec:	41 e0       	ldi	r20, 0x01	; 1
    19ee:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_writePin>
    19f2:	80 e0       	ldi	r24, 0x00	; 0
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	a0 e8       	ldi	r26, 0x80	; 128
    19f8:	bf e3       	ldi	r27, 0x3F	; 63
    19fa:	8f a3       	std	Y+39, r24	; 0x27
    19fc:	98 a7       	std	Y+40, r25	; 0x28
    19fe:	a9 a7       	std	Y+41, r26	; 0x29
    1a00:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a02:	6f a1       	ldd	r22, Y+39	; 0x27
    1a04:	78 a5       	ldd	r23, Y+40	; 0x28
    1a06:	89 a5       	ldd	r24, Y+41	; 0x29
    1a08:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a0a:	20 e0       	ldi	r18, 0x00	; 0
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	4a e7       	ldi	r20, 0x7A	; 122
    1a10:	53 e4       	ldi	r21, 0x43	; 67
    1a12:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a16:	dc 01       	movw	r26, r24
    1a18:	cb 01       	movw	r24, r22
    1a1a:	8b a3       	std	Y+35, r24	; 0x23
    1a1c:	9c a3       	std	Y+36, r25	; 0x24
    1a1e:	ad a3       	std	Y+37, r26	; 0x25
    1a20:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a22:	6b a1       	ldd	r22, Y+35	; 0x23
    1a24:	7c a1       	ldd	r23, Y+36	; 0x24
    1a26:	8d a1       	ldd	r24, Y+37	; 0x25
    1a28:	9e a1       	ldd	r25, Y+38	; 0x26
    1a2a:	20 e0       	ldi	r18, 0x00	; 0
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	40 e8       	ldi	r20, 0x80	; 128
    1a30:	5f e3       	ldi	r21, 0x3F	; 63
    1a32:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a36:	88 23       	and	r24, r24
    1a38:	2c f4       	brge	.+10     	; 0x1a44 <LCD_sendCommand+0x160>
		__ticks = 1;
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	9a a3       	std	Y+34, r25	; 0x22
    1a40:	89 a3       	std	Y+33, r24	; 0x21
    1a42:	3f c0       	rjmp	.+126    	; 0x1ac2 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1a44:	6b a1       	ldd	r22, Y+35	; 0x23
    1a46:	7c a1       	ldd	r23, Y+36	; 0x24
    1a48:	8d a1       	ldd	r24, Y+37	; 0x25
    1a4a:	9e a1       	ldd	r25, Y+38	; 0x26
    1a4c:	20 e0       	ldi	r18, 0x00	; 0
    1a4e:	3f ef       	ldi	r19, 0xFF	; 255
    1a50:	4f e7       	ldi	r20, 0x7F	; 127
    1a52:	57 e4       	ldi	r21, 0x47	; 71
    1a54:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a58:	18 16       	cp	r1, r24
    1a5a:	4c f5       	brge	.+82     	; 0x1aae <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a5c:	6f a1       	ldd	r22, Y+39	; 0x27
    1a5e:	78 a5       	ldd	r23, Y+40	; 0x28
    1a60:	89 a5       	ldd	r24, Y+41	; 0x29
    1a62:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a64:	20 e0       	ldi	r18, 0x00	; 0
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	40 e2       	ldi	r20, 0x20	; 32
    1a6a:	51 e4       	ldi	r21, 0x41	; 65
    1a6c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a70:	dc 01       	movw	r26, r24
    1a72:	cb 01       	movw	r24, r22
    1a74:	bc 01       	movw	r22, r24
    1a76:	cd 01       	movw	r24, r26
    1a78:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a7c:	dc 01       	movw	r26, r24
    1a7e:	cb 01       	movw	r24, r22
    1a80:	9a a3       	std	Y+34, r25	; 0x22
    1a82:	89 a3       	std	Y+33, r24	; 0x21
    1a84:	0f c0       	rjmp	.+30     	; 0x1aa4 <LCD_sendCommand+0x1c0>
    1a86:	89 e1       	ldi	r24, 0x19	; 25
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	98 a3       	std	Y+32, r25	; 0x20
    1a8c:	8f 8f       	std	Y+31, r24	; 0x1f
    1a8e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a90:	98 a1       	ldd	r25, Y+32	; 0x20
    1a92:	01 97       	sbiw	r24, 0x01	; 1
    1a94:	f1 f7       	brne	.-4      	; 0x1a92 <LCD_sendCommand+0x1ae>
    1a96:	98 a3       	std	Y+32, r25	; 0x20
    1a98:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a9a:	89 a1       	ldd	r24, Y+33	; 0x21
    1a9c:	9a a1       	ldd	r25, Y+34	; 0x22
    1a9e:	01 97       	sbiw	r24, 0x01	; 1
    1aa0:	9a a3       	std	Y+34, r25	; 0x22
    1aa2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aa4:	89 a1       	ldd	r24, Y+33	; 0x21
    1aa6:	9a a1       	ldd	r25, Y+34	; 0x22
    1aa8:	00 97       	sbiw	r24, 0x00	; 0
    1aaa:	69 f7       	brne	.-38     	; 0x1a86 <LCD_sendCommand+0x1a2>
    1aac:	14 c0       	rjmp	.+40     	; 0x1ad6 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aae:	6b a1       	ldd	r22, Y+35	; 0x23
    1ab0:	7c a1       	ldd	r23, Y+36	; 0x24
    1ab2:	8d a1       	ldd	r24, Y+37	; 0x25
    1ab4:	9e a1       	ldd	r25, Y+38	; 0x26
    1ab6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aba:	dc 01       	movw	r26, r24
    1abc:	cb 01       	movw	r24, r22
    1abe:	9a a3       	std	Y+34, r25	; 0x22
    1ac0:	89 a3       	std	Y+33, r24	; 0x21
    1ac2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ac4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ac6:	9e 8f       	std	Y+30, r25	; 0x1e
    1ac8:	8d 8f       	std	Y+29, r24	; 0x1d
    1aca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1acc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ace:	01 97       	sbiw	r24, 0x01	; 1
    1ad0:	f1 f7       	brne	.-4      	; 0x1ace <LCD_sendCommand+0x1ea>
    1ad2:	9e 8f       	std	Y+30, r25	; 0x1e
    1ad4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	// Inserts the command in the assigned PORT to be sent to the LCD
	GPIO_writePort(LCD_DATA_PORT, command);
    1ad6:	82 e0       	ldi	r24, 0x02	; 2
    1ad8:	69 ad       	ldd	r22, Y+57	; 0x39
    1ada:	0e 94 21 09 	call	0x1242	; 0x1242 <GPIO_writePort>
    1ade:	80 e0       	ldi	r24, 0x00	; 0
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	a0 e8       	ldi	r26, 0x80	; 128
    1ae4:	bf e3       	ldi	r27, 0x3F	; 63
    1ae6:	89 8f       	std	Y+25, r24	; 0x19
    1ae8:	9a 8f       	std	Y+26, r25	; 0x1a
    1aea:	ab 8f       	std	Y+27, r26	; 0x1b
    1aec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aee:	69 8d       	ldd	r22, Y+25	; 0x19
    1af0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1af2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1af4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1af6:	20 e0       	ldi	r18, 0x00	; 0
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	4a e7       	ldi	r20, 0x7A	; 122
    1afc:	53 e4       	ldi	r21, 0x43	; 67
    1afe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b02:	dc 01       	movw	r26, r24
    1b04:	cb 01       	movw	r24, r22
    1b06:	8d 8b       	std	Y+21, r24	; 0x15
    1b08:	9e 8b       	std	Y+22, r25	; 0x16
    1b0a:	af 8b       	std	Y+23, r26	; 0x17
    1b0c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b0e:	6d 89       	ldd	r22, Y+21	; 0x15
    1b10:	7e 89       	ldd	r23, Y+22	; 0x16
    1b12:	8f 89       	ldd	r24, Y+23	; 0x17
    1b14:	98 8d       	ldd	r25, Y+24	; 0x18
    1b16:	20 e0       	ldi	r18, 0x00	; 0
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	40 e8       	ldi	r20, 0x80	; 128
    1b1c:	5f e3       	ldi	r21, 0x3F	; 63
    1b1e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b22:	88 23       	and	r24, r24
    1b24:	2c f4       	brge	.+10     	; 0x1b30 <LCD_sendCommand+0x24c>
		__ticks = 1;
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	9c 8b       	std	Y+20, r25	; 0x14
    1b2c:	8b 8b       	std	Y+19, r24	; 0x13
    1b2e:	3f c0       	rjmp	.+126    	; 0x1bae <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1b30:	6d 89       	ldd	r22, Y+21	; 0x15
    1b32:	7e 89       	ldd	r23, Y+22	; 0x16
    1b34:	8f 89       	ldd	r24, Y+23	; 0x17
    1b36:	98 8d       	ldd	r25, Y+24	; 0x18
    1b38:	20 e0       	ldi	r18, 0x00	; 0
    1b3a:	3f ef       	ldi	r19, 0xFF	; 255
    1b3c:	4f e7       	ldi	r20, 0x7F	; 127
    1b3e:	57 e4       	ldi	r21, 0x47	; 71
    1b40:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b44:	18 16       	cp	r1, r24
    1b46:	4c f5       	brge	.+82     	; 0x1b9a <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b48:	69 8d       	ldd	r22, Y+25	; 0x19
    1b4a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b50:	20 e0       	ldi	r18, 0x00	; 0
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	40 e2       	ldi	r20, 0x20	; 32
    1b56:	51 e4       	ldi	r21, 0x41	; 65
    1b58:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b5c:	dc 01       	movw	r26, r24
    1b5e:	cb 01       	movw	r24, r22
    1b60:	bc 01       	movw	r22, r24
    1b62:	cd 01       	movw	r24, r26
    1b64:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b68:	dc 01       	movw	r26, r24
    1b6a:	cb 01       	movw	r24, r22
    1b6c:	9c 8b       	std	Y+20, r25	; 0x14
    1b6e:	8b 8b       	std	Y+19, r24	; 0x13
    1b70:	0f c0       	rjmp	.+30     	; 0x1b90 <LCD_sendCommand+0x2ac>
    1b72:	89 e1       	ldi	r24, 0x19	; 25
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	9a 8b       	std	Y+18, r25	; 0x12
    1b78:	89 8b       	std	Y+17, r24	; 0x11
    1b7a:	89 89       	ldd	r24, Y+17	; 0x11
    1b7c:	9a 89       	ldd	r25, Y+18	; 0x12
    1b7e:	01 97       	sbiw	r24, 0x01	; 1
    1b80:	f1 f7       	brne	.-4      	; 0x1b7e <LCD_sendCommand+0x29a>
    1b82:	9a 8b       	std	Y+18, r25	; 0x12
    1b84:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b86:	8b 89       	ldd	r24, Y+19	; 0x13
    1b88:	9c 89       	ldd	r25, Y+20	; 0x14
    1b8a:	01 97       	sbiw	r24, 0x01	; 1
    1b8c:	9c 8b       	std	Y+20, r25	; 0x14
    1b8e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b90:	8b 89       	ldd	r24, Y+19	; 0x13
    1b92:	9c 89       	ldd	r25, Y+20	; 0x14
    1b94:	00 97       	sbiw	r24, 0x00	; 0
    1b96:	69 f7       	brne	.-38     	; 0x1b72 <LCD_sendCommand+0x28e>
    1b98:	14 c0       	rjmp	.+40     	; 0x1bc2 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b9a:	6d 89       	ldd	r22, Y+21	; 0x15
    1b9c:	7e 89       	ldd	r23, Y+22	; 0x16
    1b9e:	8f 89       	ldd	r24, Y+23	; 0x17
    1ba0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ba2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ba6:	dc 01       	movw	r26, r24
    1ba8:	cb 01       	movw	r24, r22
    1baa:	9c 8b       	std	Y+20, r25	; 0x14
    1bac:	8b 8b       	std	Y+19, r24	; 0x13
    1bae:	8b 89       	ldd	r24, Y+19	; 0x13
    1bb0:	9c 89       	ldd	r25, Y+20	; 0x14
    1bb2:	98 8b       	std	Y+16, r25	; 0x10
    1bb4:	8f 87       	std	Y+15, r24	; 0x0f
    1bb6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bb8:	98 89       	ldd	r25, Y+16	; 0x10
    1bba:	01 97       	sbiw	r24, 0x01	; 1
    1bbc:	f1 f7       	brne	.-4      	; 0x1bba <LCD_sendCommand+0x2d6>
    1bbe:	98 8b       	std	Y+16, r25	; 0x10
    1bc0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	// Set Enable Pin to '0'
	GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
    1bc2:	83 e0       	ldi	r24, 0x03	; 3
    1bc4:	65 e0       	ldi	r22, 0x05	; 5
    1bc6:	40 e0       	ldi	r20, 0x00	; 0
    1bc8:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_writePin>
    1bcc:	80 e0       	ldi	r24, 0x00	; 0
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	a0 e8       	ldi	r26, 0x80	; 128
    1bd2:	bf e3       	ldi	r27, 0x3F	; 63
    1bd4:	8b 87       	std	Y+11, r24	; 0x0b
    1bd6:	9c 87       	std	Y+12, r25	; 0x0c
    1bd8:	ad 87       	std	Y+13, r26	; 0x0d
    1bda:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bdc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bde:	7c 85       	ldd	r23, Y+12	; 0x0c
    1be0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1be2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1be4:	20 e0       	ldi	r18, 0x00	; 0
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	4a e7       	ldi	r20, 0x7A	; 122
    1bea:	53 e4       	ldi	r21, 0x43	; 67
    1bec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bf0:	dc 01       	movw	r26, r24
    1bf2:	cb 01       	movw	r24, r22
    1bf4:	8f 83       	std	Y+7, r24	; 0x07
    1bf6:	98 87       	std	Y+8, r25	; 0x08
    1bf8:	a9 87       	std	Y+9, r26	; 0x09
    1bfa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bfc:	6f 81       	ldd	r22, Y+7	; 0x07
    1bfe:	78 85       	ldd	r23, Y+8	; 0x08
    1c00:	89 85       	ldd	r24, Y+9	; 0x09
    1c02:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c04:	20 e0       	ldi	r18, 0x00	; 0
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	40 e8       	ldi	r20, 0x80	; 128
    1c0a:	5f e3       	ldi	r21, 0x3F	; 63
    1c0c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c10:	88 23       	and	r24, r24
    1c12:	2c f4       	brge	.+10     	; 0x1c1e <LCD_sendCommand+0x33a>
		__ticks = 1;
    1c14:	81 e0       	ldi	r24, 0x01	; 1
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	9e 83       	std	Y+6, r25	; 0x06
    1c1a:	8d 83       	std	Y+5, r24	; 0x05
    1c1c:	3f c0       	rjmp	.+126    	; 0x1c9c <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1c1e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c20:	78 85       	ldd	r23, Y+8	; 0x08
    1c22:	89 85       	ldd	r24, Y+9	; 0x09
    1c24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c26:	20 e0       	ldi	r18, 0x00	; 0
    1c28:	3f ef       	ldi	r19, 0xFF	; 255
    1c2a:	4f e7       	ldi	r20, 0x7F	; 127
    1c2c:	57 e4       	ldi	r21, 0x47	; 71
    1c2e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c32:	18 16       	cp	r1, r24
    1c34:	4c f5       	brge	.+82     	; 0x1c88 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c36:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c38:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c3e:	20 e0       	ldi	r18, 0x00	; 0
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	40 e2       	ldi	r20, 0x20	; 32
    1c44:	51 e4       	ldi	r21, 0x41	; 65
    1c46:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c4a:	dc 01       	movw	r26, r24
    1c4c:	cb 01       	movw	r24, r22
    1c4e:	bc 01       	movw	r22, r24
    1c50:	cd 01       	movw	r24, r26
    1c52:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c56:	dc 01       	movw	r26, r24
    1c58:	cb 01       	movw	r24, r22
    1c5a:	9e 83       	std	Y+6, r25	; 0x06
    1c5c:	8d 83       	std	Y+5, r24	; 0x05
    1c5e:	0f c0       	rjmp	.+30     	; 0x1c7e <LCD_sendCommand+0x39a>
    1c60:	89 e1       	ldi	r24, 0x19	; 25
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	9c 83       	std	Y+4, r25	; 0x04
    1c66:	8b 83       	std	Y+3, r24	; 0x03
    1c68:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c6c:	01 97       	sbiw	r24, 0x01	; 1
    1c6e:	f1 f7       	brne	.-4      	; 0x1c6c <LCD_sendCommand+0x388>
    1c70:	9c 83       	std	Y+4, r25	; 0x04
    1c72:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c74:	8d 81       	ldd	r24, Y+5	; 0x05
    1c76:	9e 81       	ldd	r25, Y+6	; 0x06
    1c78:	01 97       	sbiw	r24, 0x01	; 1
    1c7a:	9e 83       	std	Y+6, r25	; 0x06
    1c7c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c80:	9e 81       	ldd	r25, Y+6	; 0x06
    1c82:	00 97       	sbiw	r24, 0x00	; 0
    1c84:	69 f7       	brne	.-38     	; 0x1c60 <LCD_sendCommand+0x37c>
    1c86:	14 c0       	rjmp	.+40     	; 0x1cb0 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c88:	6f 81       	ldd	r22, Y+7	; 0x07
    1c8a:	78 85       	ldd	r23, Y+8	; 0x08
    1c8c:	89 85       	ldd	r24, Y+9	; 0x09
    1c8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c90:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c94:	dc 01       	movw	r26, r24
    1c96:	cb 01       	movw	r24, r22
    1c98:	9e 83       	std	Y+6, r25	; 0x06
    1c9a:	8d 83       	std	Y+5, r24	; 0x05
    1c9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca0:	9a 83       	std	Y+2, r25	; 0x02
    1ca2:	89 83       	std	Y+1, r24	; 0x01
    1ca4:	89 81       	ldd	r24, Y+1	; 0x01
    1ca6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca8:	01 97       	sbiw	r24, 0x01	; 1
    1caa:	f1 f7       	brne	.-4      	; 0x1ca8 <LCD_sendCommand+0x3c4>
    1cac:	9a 83       	std	Y+2, r25	; 0x02
    1cae:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1cb0:	e9 96       	adiw	r28, 0x39	; 57
    1cb2:	0f b6       	in	r0, 0x3f	; 63
    1cb4:	f8 94       	cli
    1cb6:	de bf       	out	0x3e, r29	; 62
    1cb8:	0f be       	out	0x3f, r0	; 63
    1cba:	cd bf       	out	0x3d, r28	; 61
    1cbc:	cf 91       	pop	r28
    1cbe:	df 91       	pop	r29
    1cc0:	08 95       	ret

00001cc2 <LCD_displayCharacter>:


// Displays a character on the LCD
void LCD_displayCharacter(uint8 data) {
    1cc2:	df 93       	push	r29
    1cc4:	cf 93       	push	r28
    1cc6:	cd b7       	in	r28, 0x3d	; 61
    1cc8:	de b7       	in	r29, 0x3e	; 62
    1cca:	e9 97       	sbiw	r28, 0x39	; 57
    1ccc:	0f b6       	in	r0, 0x3f	; 63
    1cce:	f8 94       	cli
    1cd0:	de bf       	out	0x3e, r29	; 62
    1cd2:	0f be       	out	0x3f, r0	; 63
    1cd4:	cd bf       	out	0x3d, r28	; 61
    1cd6:	89 af       	std	Y+57, r24	; 0x39
	// Set RS Pin to '1'
	GPIO_writePin(LCD_INIT_PORT, LCD_RS, LOGIC_HIGH);
    1cd8:	83 e0       	ldi	r24, 0x03	; 3
    1cda:	64 e0       	ldi	r22, 0x04	; 4
    1cdc:	41 e0       	ldi	r20, 0x01	; 1
    1cde:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_writePin>
    1ce2:	80 e0       	ldi	r24, 0x00	; 0
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	a0 e8       	ldi	r26, 0x80	; 128
    1ce8:	bf e3       	ldi	r27, 0x3F	; 63
    1cea:	8d ab       	std	Y+53, r24	; 0x35
    1cec:	9e ab       	std	Y+54, r25	; 0x36
    1cee:	af ab       	std	Y+55, r26	; 0x37
    1cf0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cf2:	6d a9       	ldd	r22, Y+53	; 0x35
    1cf4:	7e a9       	ldd	r23, Y+54	; 0x36
    1cf6:	8f a9       	ldd	r24, Y+55	; 0x37
    1cf8:	98 ad       	ldd	r25, Y+56	; 0x38
    1cfa:	20 e0       	ldi	r18, 0x00	; 0
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	4a e7       	ldi	r20, 0x7A	; 122
    1d00:	53 e4       	ldi	r21, 0x43	; 67
    1d02:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d06:	dc 01       	movw	r26, r24
    1d08:	cb 01       	movw	r24, r22
    1d0a:	89 ab       	std	Y+49, r24	; 0x31
    1d0c:	9a ab       	std	Y+50, r25	; 0x32
    1d0e:	ab ab       	std	Y+51, r26	; 0x33
    1d10:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d12:	69 a9       	ldd	r22, Y+49	; 0x31
    1d14:	7a a9       	ldd	r23, Y+50	; 0x32
    1d16:	8b a9       	ldd	r24, Y+51	; 0x33
    1d18:	9c a9       	ldd	r25, Y+52	; 0x34
    1d1a:	20 e0       	ldi	r18, 0x00	; 0
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	40 e8       	ldi	r20, 0x80	; 128
    1d20:	5f e3       	ldi	r21, 0x3F	; 63
    1d22:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d26:	88 23       	and	r24, r24
    1d28:	2c f4       	brge	.+10     	; 0x1d34 <LCD_displayCharacter+0x72>
		__ticks = 1;
    1d2a:	81 e0       	ldi	r24, 0x01	; 1
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	98 ab       	std	Y+48, r25	; 0x30
    1d30:	8f a7       	std	Y+47, r24	; 0x2f
    1d32:	3f c0       	rjmp	.+126    	; 0x1db2 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1d34:	69 a9       	ldd	r22, Y+49	; 0x31
    1d36:	7a a9       	ldd	r23, Y+50	; 0x32
    1d38:	8b a9       	ldd	r24, Y+51	; 0x33
    1d3a:	9c a9       	ldd	r25, Y+52	; 0x34
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
    1d3e:	3f ef       	ldi	r19, 0xFF	; 255
    1d40:	4f e7       	ldi	r20, 0x7F	; 127
    1d42:	57 e4       	ldi	r21, 0x47	; 71
    1d44:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d48:	18 16       	cp	r1, r24
    1d4a:	4c f5       	brge	.+82     	; 0x1d9e <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d4c:	6d a9       	ldd	r22, Y+53	; 0x35
    1d4e:	7e a9       	ldd	r23, Y+54	; 0x36
    1d50:	8f a9       	ldd	r24, Y+55	; 0x37
    1d52:	98 ad       	ldd	r25, Y+56	; 0x38
    1d54:	20 e0       	ldi	r18, 0x00	; 0
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	40 e2       	ldi	r20, 0x20	; 32
    1d5a:	51 e4       	ldi	r21, 0x41	; 65
    1d5c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d60:	dc 01       	movw	r26, r24
    1d62:	cb 01       	movw	r24, r22
    1d64:	bc 01       	movw	r22, r24
    1d66:	cd 01       	movw	r24, r26
    1d68:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d6c:	dc 01       	movw	r26, r24
    1d6e:	cb 01       	movw	r24, r22
    1d70:	98 ab       	std	Y+48, r25	; 0x30
    1d72:	8f a7       	std	Y+47, r24	; 0x2f
    1d74:	0f c0       	rjmp	.+30     	; 0x1d94 <LCD_displayCharacter+0xd2>
    1d76:	89 e1       	ldi	r24, 0x19	; 25
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	9e a7       	std	Y+46, r25	; 0x2e
    1d7c:	8d a7       	std	Y+45, r24	; 0x2d
    1d7e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d80:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d82:	01 97       	sbiw	r24, 0x01	; 1
    1d84:	f1 f7       	brne	.-4      	; 0x1d82 <LCD_displayCharacter+0xc0>
    1d86:	9e a7       	std	Y+46, r25	; 0x2e
    1d88:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d8a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d8c:	98 a9       	ldd	r25, Y+48	; 0x30
    1d8e:	01 97       	sbiw	r24, 0x01	; 1
    1d90:	98 ab       	std	Y+48, r25	; 0x30
    1d92:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d94:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d96:	98 a9       	ldd	r25, Y+48	; 0x30
    1d98:	00 97       	sbiw	r24, 0x00	; 0
    1d9a:	69 f7       	brne	.-38     	; 0x1d76 <LCD_displayCharacter+0xb4>
    1d9c:	14 c0       	rjmp	.+40     	; 0x1dc6 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d9e:	69 a9       	ldd	r22, Y+49	; 0x31
    1da0:	7a a9       	ldd	r23, Y+50	; 0x32
    1da2:	8b a9       	ldd	r24, Y+51	; 0x33
    1da4:	9c a9       	ldd	r25, Y+52	; 0x34
    1da6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1daa:	dc 01       	movw	r26, r24
    1dac:	cb 01       	movw	r24, r22
    1dae:	98 ab       	std	Y+48, r25	; 0x30
    1db0:	8f a7       	std	Y+47, r24	; 0x2f
    1db2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1db4:	98 a9       	ldd	r25, Y+48	; 0x30
    1db6:	9c a7       	std	Y+44, r25	; 0x2c
    1db8:	8b a7       	std	Y+43, r24	; 0x2b
    1dba:	8b a5       	ldd	r24, Y+43	; 0x2b
    1dbc:	9c a5       	ldd	r25, Y+44	; 0x2c
    1dbe:	01 97       	sbiw	r24, 0x01	; 1
    1dc0:	f1 f7       	brne	.-4      	; 0x1dbe <LCD_displayCharacter+0xfc>
    1dc2:	9c a7       	std	Y+44, r25	; 0x2c
    1dc4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	// Set Enable Pin to '1'
	GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
    1dc6:	83 e0       	ldi	r24, 0x03	; 3
    1dc8:	65 e0       	ldi	r22, 0x05	; 5
    1dca:	41 e0       	ldi	r20, 0x01	; 1
    1dcc:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_writePin>
    1dd0:	80 e0       	ldi	r24, 0x00	; 0
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	a0 e8       	ldi	r26, 0x80	; 128
    1dd6:	bf e3       	ldi	r27, 0x3F	; 63
    1dd8:	8f a3       	std	Y+39, r24	; 0x27
    1dda:	98 a7       	std	Y+40, r25	; 0x28
    1ddc:	a9 a7       	std	Y+41, r26	; 0x29
    1dde:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1de0:	6f a1       	ldd	r22, Y+39	; 0x27
    1de2:	78 a5       	ldd	r23, Y+40	; 0x28
    1de4:	89 a5       	ldd	r24, Y+41	; 0x29
    1de6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1de8:	20 e0       	ldi	r18, 0x00	; 0
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	4a e7       	ldi	r20, 0x7A	; 122
    1dee:	53 e4       	ldi	r21, 0x43	; 67
    1df0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1df4:	dc 01       	movw	r26, r24
    1df6:	cb 01       	movw	r24, r22
    1df8:	8b a3       	std	Y+35, r24	; 0x23
    1dfa:	9c a3       	std	Y+36, r25	; 0x24
    1dfc:	ad a3       	std	Y+37, r26	; 0x25
    1dfe:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e00:	6b a1       	ldd	r22, Y+35	; 0x23
    1e02:	7c a1       	ldd	r23, Y+36	; 0x24
    1e04:	8d a1       	ldd	r24, Y+37	; 0x25
    1e06:	9e a1       	ldd	r25, Y+38	; 0x26
    1e08:	20 e0       	ldi	r18, 0x00	; 0
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	40 e8       	ldi	r20, 0x80	; 128
    1e0e:	5f e3       	ldi	r21, 0x3F	; 63
    1e10:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e14:	88 23       	and	r24, r24
    1e16:	2c f4       	brge	.+10     	; 0x1e22 <LCD_displayCharacter+0x160>
		__ticks = 1;
    1e18:	81 e0       	ldi	r24, 0x01	; 1
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	9a a3       	std	Y+34, r25	; 0x22
    1e1e:	89 a3       	std	Y+33, r24	; 0x21
    1e20:	3f c0       	rjmp	.+126    	; 0x1ea0 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1e22:	6b a1       	ldd	r22, Y+35	; 0x23
    1e24:	7c a1       	ldd	r23, Y+36	; 0x24
    1e26:	8d a1       	ldd	r24, Y+37	; 0x25
    1e28:	9e a1       	ldd	r25, Y+38	; 0x26
    1e2a:	20 e0       	ldi	r18, 0x00	; 0
    1e2c:	3f ef       	ldi	r19, 0xFF	; 255
    1e2e:	4f e7       	ldi	r20, 0x7F	; 127
    1e30:	57 e4       	ldi	r21, 0x47	; 71
    1e32:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e36:	18 16       	cp	r1, r24
    1e38:	4c f5       	brge	.+82     	; 0x1e8c <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e3a:	6f a1       	ldd	r22, Y+39	; 0x27
    1e3c:	78 a5       	ldd	r23, Y+40	; 0x28
    1e3e:	89 a5       	ldd	r24, Y+41	; 0x29
    1e40:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e42:	20 e0       	ldi	r18, 0x00	; 0
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	40 e2       	ldi	r20, 0x20	; 32
    1e48:	51 e4       	ldi	r21, 0x41	; 65
    1e4a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e4e:	dc 01       	movw	r26, r24
    1e50:	cb 01       	movw	r24, r22
    1e52:	bc 01       	movw	r22, r24
    1e54:	cd 01       	movw	r24, r26
    1e56:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e5a:	dc 01       	movw	r26, r24
    1e5c:	cb 01       	movw	r24, r22
    1e5e:	9a a3       	std	Y+34, r25	; 0x22
    1e60:	89 a3       	std	Y+33, r24	; 0x21
    1e62:	0f c0       	rjmp	.+30     	; 0x1e82 <LCD_displayCharacter+0x1c0>
    1e64:	89 e1       	ldi	r24, 0x19	; 25
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	98 a3       	std	Y+32, r25	; 0x20
    1e6a:	8f 8f       	std	Y+31, r24	; 0x1f
    1e6c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e6e:	98 a1       	ldd	r25, Y+32	; 0x20
    1e70:	01 97       	sbiw	r24, 0x01	; 1
    1e72:	f1 f7       	brne	.-4      	; 0x1e70 <LCD_displayCharacter+0x1ae>
    1e74:	98 a3       	std	Y+32, r25	; 0x20
    1e76:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e78:	89 a1       	ldd	r24, Y+33	; 0x21
    1e7a:	9a a1       	ldd	r25, Y+34	; 0x22
    1e7c:	01 97       	sbiw	r24, 0x01	; 1
    1e7e:	9a a3       	std	Y+34, r25	; 0x22
    1e80:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e82:	89 a1       	ldd	r24, Y+33	; 0x21
    1e84:	9a a1       	ldd	r25, Y+34	; 0x22
    1e86:	00 97       	sbiw	r24, 0x00	; 0
    1e88:	69 f7       	brne	.-38     	; 0x1e64 <LCD_displayCharacter+0x1a2>
    1e8a:	14 c0       	rjmp	.+40     	; 0x1eb4 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e8c:	6b a1       	ldd	r22, Y+35	; 0x23
    1e8e:	7c a1       	ldd	r23, Y+36	; 0x24
    1e90:	8d a1       	ldd	r24, Y+37	; 0x25
    1e92:	9e a1       	ldd	r25, Y+38	; 0x26
    1e94:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e98:	dc 01       	movw	r26, r24
    1e9a:	cb 01       	movw	r24, r22
    1e9c:	9a a3       	std	Y+34, r25	; 0x22
    1e9e:	89 a3       	std	Y+33, r24	; 0x21
    1ea0:	89 a1       	ldd	r24, Y+33	; 0x21
    1ea2:	9a a1       	ldd	r25, Y+34	; 0x22
    1ea4:	9e 8f       	std	Y+30, r25	; 0x1e
    1ea6:	8d 8f       	std	Y+29, r24	; 0x1d
    1ea8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1eaa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1eac:	01 97       	sbiw	r24, 0x01	; 1
    1eae:	f1 f7       	brne	.-4      	; 0x1eac <LCD_displayCharacter+0x1ea>
    1eb0:	9e 8f       	std	Y+30, r25	; 0x1e
    1eb2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	// Inserts the data in the assigned PORT to be sent to the LCD
	GPIO_writePort(LCD_DATA_PORT, data);
    1eb4:	82 e0       	ldi	r24, 0x02	; 2
    1eb6:	69 ad       	ldd	r22, Y+57	; 0x39
    1eb8:	0e 94 21 09 	call	0x1242	; 0x1242 <GPIO_writePort>
    1ebc:	80 e0       	ldi	r24, 0x00	; 0
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	a0 e8       	ldi	r26, 0x80	; 128
    1ec2:	bf e3       	ldi	r27, 0x3F	; 63
    1ec4:	89 8f       	std	Y+25, r24	; 0x19
    1ec6:	9a 8f       	std	Y+26, r25	; 0x1a
    1ec8:	ab 8f       	std	Y+27, r26	; 0x1b
    1eca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ecc:	69 8d       	ldd	r22, Y+25	; 0x19
    1ece:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ed0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ed2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	4a e7       	ldi	r20, 0x7A	; 122
    1eda:	53 e4       	ldi	r21, 0x43	; 67
    1edc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	8d 8b       	std	Y+21, r24	; 0x15
    1ee6:	9e 8b       	std	Y+22, r25	; 0x16
    1ee8:	af 8b       	std	Y+23, r26	; 0x17
    1eea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1eec:	6d 89       	ldd	r22, Y+21	; 0x15
    1eee:	7e 89       	ldd	r23, Y+22	; 0x16
    1ef0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ef2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ef4:	20 e0       	ldi	r18, 0x00	; 0
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	40 e8       	ldi	r20, 0x80	; 128
    1efa:	5f e3       	ldi	r21, 0x3F	; 63
    1efc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f00:	88 23       	and	r24, r24
    1f02:	2c f4       	brge	.+10     	; 0x1f0e <LCD_displayCharacter+0x24c>
		__ticks = 1;
    1f04:	81 e0       	ldi	r24, 0x01	; 1
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	9c 8b       	std	Y+20, r25	; 0x14
    1f0a:	8b 8b       	std	Y+19, r24	; 0x13
    1f0c:	3f c0       	rjmp	.+126    	; 0x1f8c <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1f0e:	6d 89       	ldd	r22, Y+21	; 0x15
    1f10:	7e 89       	ldd	r23, Y+22	; 0x16
    1f12:	8f 89       	ldd	r24, Y+23	; 0x17
    1f14:	98 8d       	ldd	r25, Y+24	; 0x18
    1f16:	20 e0       	ldi	r18, 0x00	; 0
    1f18:	3f ef       	ldi	r19, 0xFF	; 255
    1f1a:	4f e7       	ldi	r20, 0x7F	; 127
    1f1c:	57 e4       	ldi	r21, 0x47	; 71
    1f1e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f22:	18 16       	cp	r1, r24
    1f24:	4c f5       	brge	.+82     	; 0x1f78 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f26:	69 8d       	ldd	r22, Y+25	; 0x19
    1f28:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f2a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f2c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f2e:	20 e0       	ldi	r18, 0x00	; 0
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	40 e2       	ldi	r20, 0x20	; 32
    1f34:	51 e4       	ldi	r21, 0x41	; 65
    1f36:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f3a:	dc 01       	movw	r26, r24
    1f3c:	cb 01       	movw	r24, r22
    1f3e:	bc 01       	movw	r22, r24
    1f40:	cd 01       	movw	r24, r26
    1f42:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f46:	dc 01       	movw	r26, r24
    1f48:	cb 01       	movw	r24, r22
    1f4a:	9c 8b       	std	Y+20, r25	; 0x14
    1f4c:	8b 8b       	std	Y+19, r24	; 0x13
    1f4e:	0f c0       	rjmp	.+30     	; 0x1f6e <LCD_displayCharacter+0x2ac>
    1f50:	89 e1       	ldi	r24, 0x19	; 25
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	9a 8b       	std	Y+18, r25	; 0x12
    1f56:	89 8b       	std	Y+17, r24	; 0x11
    1f58:	89 89       	ldd	r24, Y+17	; 0x11
    1f5a:	9a 89       	ldd	r25, Y+18	; 0x12
    1f5c:	01 97       	sbiw	r24, 0x01	; 1
    1f5e:	f1 f7       	brne	.-4      	; 0x1f5c <LCD_displayCharacter+0x29a>
    1f60:	9a 8b       	std	Y+18, r25	; 0x12
    1f62:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f64:	8b 89       	ldd	r24, Y+19	; 0x13
    1f66:	9c 89       	ldd	r25, Y+20	; 0x14
    1f68:	01 97       	sbiw	r24, 0x01	; 1
    1f6a:	9c 8b       	std	Y+20, r25	; 0x14
    1f6c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f6e:	8b 89       	ldd	r24, Y+19	; 0x13
    1f70:	9c 89       	ldd	r25, Y+20	; 0x14
    1f72:	00 97       	sbiw	r24, 0x00	; 0
    1f74:	69 f7       	brne	.-38     	; 0x1f50 <LCD_displayCharacter+0x28e>
    1f76:	14 c0       	rjmp	.+40     	; 0x1fa0 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f78:	6d 89       	ldd	r22, Y+21	; 0x15
    1f7a:	7e 89       	ldd	r23, Y+22	; 0x16
    1f7c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f7e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f80:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f84:	dc 01       	movw	r26, r24
    1f86:	cb 01       	movw	r24, r22
    1f88:	9c 8b       	std	Y+20, r25	; 0x14
    1f8a:	8b 8b       	std	Y+19, r24	; 0x13
    1f8c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f8e:	9c 89       	ldd	r25, Y+20	; 0x14
    1f90:	98 8b       	std	Y+16, r25	; 0x10
    1f92:	8f 87       	std	Y+15, r24	; 0x0f
    1f94:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f96:	98 89       	ldd	r25, Y+16	; 0x10
    1f98:	01 97       	sbiw	r24, 0x01	; 1
    1f9a:	f1 f7       	brne	.-4      	; 0x1f98 <LCD_displayCharacter+0x2d6>
    1f9c:	98 8b       	std	Y+16, r25	; 0x10
    1f9e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	// Set Enable Pin to '0'
	GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
    1fa0:	83 e0       	ldi	r24, 0x03	; 3
    1fa2:	65 e0       	ldi	r22, 0x05	; 5
    1fa4:	40 e0       	ldi	r20, 0x00	; 0
    1fa6:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_writePin>
    1faa:	80 e0       	ldi	r24, 0x00	; 0
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	a0 e8       	ldi	r26, 0x80	; 128
    1fb0:	bf e3       	ldi	r27, 0x3F	; 63
    1fb2:	8b 87       	std	Y+11, r24	; 0x0b
    1fb4:	9c 87       	std	Y+12, r25	; 0x0c
    1fb6:	ad 87       	std	Y+13, r26	; 0x0d
    1fb8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fba:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fbc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fc2:	20 e0       	ldi	r18, 0x00	; 0
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	4a e7       	ldi	r20, 0x7A	; 122
    1fc8:	53 e4       	ldi	r21, 0x43	; 67
    1fca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fce:	dc 01       	movw	r26, r24
    1fd0:	cb 01       	movw	r24, r22
    1fd2:	8f 83       	std	Y+7, r24	; 0x07
    1fd4:	98 87       	std	Y+8, r25	; 0x08
    1fd6:	a9 87       	std	Y+9, r26	; 0x09
    1fd8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fda:	6f 81       	ldd	r22, Y+7	; 0x07
    1fdc:	78 85       	ldd	r23, Y+8	; 0x08
    1fde:	89 85       	ldd	r24, Y+9	; 0x09
    1fe0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fe2:	20 e0       	ldi	r18, 0x00	; 0
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	40 e8       	ldi	r20, 0x80	; 128
    1fe8:	5f e3       	ldi	r21, 0x3F	; 63
    1fea:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1fee:	88 23       	and	r24, r24
    1ff0:	2c f4       	brge	.+10     	; 0x1ffc <LCD_displayCharacter+0x33a>
		__ticks = 1;
    1ff2:	81 e0       	ldi	r24, 0x01	; 1
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	9e 83       	std	Y+6, r25	; 0x06
    1ff8:	8d 83       	std	Y+5, r24	; 0x05
    1ffa:	3f c0       	rjmp	.+126    	; 0x207a <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    1ffc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ffe:	78 85       	ldd	r23, Y+8	; 0x08
    2000:	89 85       	ldd	r24, Y+9	; 0x09
    2002:	9a 85       	ldd	r25, Y+10	; 0x0a
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	3f ef       	ldi	r19, 0xFF	; 255
    2008:	4f e7       	ldi	r20, 0x7F	; 127
    200a:	57 e4       	ldi	r21, 0x47	; 71
    200c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2010:	18 16       	cp	r1, r24
    2012:	4c f5       	brge	.+82     	; 0x2066 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2014:	6b 85       	ldd	r22, Y+11	; 0x0b
    2016:	7c 85       	ldd	r23, Y+12	; 0x0c
    2018:	8d 85       	ldd	r24, Y+13	; 0x0d
    201a:	9e 85       	ldd	r25, Y+14	; 0x0e
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	40 e2       	ldi	r20, 0x20	; 32
    2022:	51 e4       	ldi	r21, 0x41	; 65
    2024:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22
    202c:	bc 01       	movw	r22, r24
    202e:	cd 01       	movw	r24, r26
    2030:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2034:	dc 01       	movw	r26, r24
    2036:	cb 01       	movw	r24, r22
    2038:	9e 83       	std	Y+6, r25	; 0x06
    203a:	8d 83       	std	Y+5, r24	; 0x05
    203c:	0f c0       	rjmp	.+30     	; 0x205c <LCD_displayCharacter+0x39a>
    203e:	89 e1       	ldi	r24, 0x19	; 25
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	9c 83       	std	Y+4, r25	; 0x04
    2044:	8b 83       	std	Y+3, r24	; 0x03
    2046:	8b 81       	ldd	r24, Y+3	; 0x03
    2048:	9c 81       	ldd	r25, Y+4	; 0x04
    204a:	01 97       	sbiw	r24, 0x01	; 1
    204c:	f1 f7       	brne	.-4      	; 0x204a <LCD_displayCharacter+0x388>
    204e:	9c 83       	std	Y+4, r25	; 0x04
    2050:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2052:	8d 81       	ldd	r24, Y+5	; 0x05
    2054:	9e 81       	ldd	r25, Y+6	; 0x06
    2056:	01 97       	sbiw	r24, 0x01	; 1
    2058:	9e 83       	std	Y+6, r25	; 0x06
    205a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    205c:	8d 81       	ldd	r24, Y+5	; 0x05
    205e:	9e 81       	ldd	r25, Y+6	; 0x06
    2060:	00 97       	sbiw	r24, 0x00	; 0
    2062:	69 f7       	brne	.-38     	; 0x203e <LCD_displayCharacter+0x37c>
    2064:	14 c0       	rjmp	.+40     	; 0x208e <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2066:	6f 81       	ldd	r22, Y+7	; 0x07
    2068:	78 85       	ldd	r23, Y+8	; 0x08
    206a:	89 85       	ldd	r24, Y+9	; 0x09
    206c:	9a 85       	ldd	r25, Y+10	; 0x0a
    206e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2072:	dc 01       	movw	r26, r24
    2074:	cb 01       	movw	r24, r22
    2076:	9e 83       	std	Y+6, r25	; 0x06
    2078:	8d 83       	std	Y+5, r24	; 0x05
    207a:	8d 81       	ldd	r24, Y+5	; 0x05
    207c:	9e 81       	ldd	r25, Y+6	; 0x06
    207e:	9a 83       	std	Y+2, r25	; 0x02
    2080:	89 83       	std	Y+1, r24	; 0x01
    2082:	89 81       	ldd	r24, Y+1	; 0x01
    2084:	9a 81       	ldd	r25, Y+2	; 0x02
    2086:	01 97       	sbiw	r24, 0x01	; 1
    2088:	f1 f7       	brne	.-4      	; 0x2086 <LCD_displayCharacter+0x3c4>
    208a:	9a 83       	std	Y+2, r25	; 0x02
    208c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    208e:	e9 96       	adiw	r28, 0x39	; 57
    2090:	0f b6       	in	r0, 0x3f	; 63
    2092:	f8 94       	cli
    2094:	de bf       	out	0x3e, r29	; 62
    2096:	0f be       	out	0x3f, r0	; 63
    2098:	cd bf       	out	0x3d, r28	; 61
    209a:	cf 91       	pop	r28
    209c:	df 91       	pop	r29
    209e:	08 95       	ret

000020a0 <LCD_displayString>:


// Displays a string on the LCD
void LCD_displayString(const char *str) {
    20a0:	df 93       	push	r29
    20a2:	cf 93       	push	r28
    20a4:	00 d0       	rcall	.+0      	; 0x20a6 <LCD_displayString+0x6>
    20a6:	0f 92       	push	r0
    20a8:	cd b7       	in	r28, 0x3d	; 61
    20aa:	de b7       	in	r29, 0x3e	; 62
    20ac:	9b 83       	std	Y+3, r25	; 0x03
    20ae:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    20b0:	19 82       	std	Y+1, r1	; 0x01
    20b2:	0e c0       	rjmp	.+28     	; 0x20d0 <LCD_displayString+0x30>
	while(str[i] != '\0') {
		LCD_displayCharacter(str[i]);
    20b4:	89 81       	ldd	r24, Y+1	; 0x01
    20b6:	28 2f       	mov	r18, r24
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	8a 81       	ldd	r24, Y+2	; 0x02
    20bc:	9b 81       	ldd	r25, Y+3	; 0x03
    20be:	fc 01       	movw	r30, r24
    20c0:	e2 0f       	add	r30, r18
    20c2:	f3 1f       	adc	r31, r19
    20c4:	80 81       	ld	r24, Z
    20c6:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <LCD_displayCharacter>
		i++;
    20ca:	89 81       	ldd	r24, Y+1	; 0x01
    20cc:	8f 5f       	subi	r24, 0xFF	; 255
    20ce:	89 83       	std	Y+1, r24	; 0x01


// Displays a string on the LCD
void LCD_displayString(const char *str) {
	uint8 i = 0;
	while(str[i] != '\0') {
    20d0:	89 81       	ldd	r24, Y+1	; 0x01
    20d2:	28 2f       	mov	r18, r24
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	8a 81       	ldd	r24, Y+2	; 0x02
    20d8:	9b 81       	ldd	r25, Y+3	; 0x03
    20da:	fc 01       	movw	r30, r24
    20dc:	e2 0f       	add	r30, r18
    20de:	f3 1f       	adc	r31, r19
    20e0:	80 81       	ld	r24, Z
    20e2:	88 23       	and	r24, r24
    20e4:	39 f7       	brne	.-50     	; 0x20b4 <LCD_displayString+0x14>
	}
	/*
	for (int i = 0 ; i < strlen(str) ; i++) {
		LCD_displayCharacters(str[i]);
	}*/
}
    20e6:	0f 90       	pop	r0
    20e8:	0f 90       	pop	r0
    20ea:	0f 90       	pop	r0
    20ec:	cf 91       	pop	r28
    20ee:	df 91       	pop	r29
    20f0:	08 95       	ret

000020f2 <LCD_moveCursor>:


// Chooses where the cursor would stand on the LCD to type from it
void LCD_moveCursor(uint8 row, uint8 col) {
    20f2:	df 93       	push	r29
    20f4:	cf 93       	push	r28
    20f6:	00 d0       	rcall	.+0      	; 0x20f8 <LCD_moveCursor+0x6>
    20f8:	00 d0       	rcall	.+0      	; 0x20fa <LCD_moveCursor+0x8>
    20fa:	0f 92       	push	r0
    20fc:	cd b7       	in	r28, 0x3d	; 61
    20fe:	de b7       	in	r29, 0x3e	; 62
    2100:	8a 83       	std	Y+2, r24	; 0x02
    2102:	6b 83       	std	Y+3, r22	; 0x03
	uint8 LCD_MEMORY_ADDRESS;

	// Calculate the required address in the LCD DDRAM checking
	// The location of the cursor originally on which line
	switch(row) {
    2104:	8a 81       	ldd	r24, Y+2	; 0x02
    2106:	28 2f       	mov	r18, r24
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	3d 83       	std	Y+5, r19	; 0x05
    210c:	2c 83       	std	Y+4, r18	; 0x04
    210e:	8c 81       	ldd	r24, Y+4	; 0x04
    2110:	9d 81       	ldd	r25, Y+5	; 0x05
    2112:	81 30       	cpi	r24, 0x01	; 1
    2114:	91 05       	cpc	r25, r1
    2116:	c1 f0       	breq	.+48     	; 0x2148 <LCD_moveCursor+0x56>
    2118:	2c 81       	ldd	r18, Y+4	; 0x04
    211a:	3d 81       	ldd	r19, Y+5	; 0x05
    211c:	22 30       	cpi	r18, 0x02	; 2
    211e:	31 05       	cpc	r19, r1
    2120:	2c f4       	brge	.+10     	; 0x212c <LCD_moveCursor+0x3a>
    2122:	8c 81       	ldd	r24, Y+4	; 0x04
    2124:	9d 81       	ldd	r25, Y+5	; 0x05
    2126:	00 97       	sbiw	r24, 0x00	; 0
    2128:	61 f0       	breq	.+24     	; 0x2142 <LCD_moveCursor+0x50>
    212a:	19 c0       	rjmp	.+50     	; 0x215e <LCD_moveCursor+0x6c>
    212c:	2c 81       	ldd	r18, Y+4	; 0x04
    212e:	3d 81       	ldd	r19, Y+5	; 0x05
    2130:	22 30       	cpi	r18, 0x02	; 2
    2132:	31 05       	cpc	r19, r1
    2134:	69 f0       	breq	.+26     	; 0x2150 <LCD_moveCursor+0x5e>
    2136:	8c 81       	ldd	r24, Y+4	; 0x04
    2138:	9d 81       	ldd	r25, Y+5	; 0x05
    213a:	83 30       	cpi	r24, 0x03	; 3
    213c:	91 05       	cpc	r25, r1
    213e:	61 f0       	breq	.+24     	; 0x2158 <LCD_moveCursor+0x66>
    2140:	0e c0       	rjmp	.+28     	; 0x215e <LCD_moveCursor+0x6c>
		case 0:
			LCD_MEMORY_ADDRESS = col;
    2142:	8b 81       	ldd	r24, Y+3	; 0x03
    2144:	89 83       	std	Y+1, r24	; 0x01
    2146:	0b c0       	rjmp	.+22     	; 0x215e <LCD_moveCursor+0x6c>
				break;
		case 1:
			LCD_MEMORY_ADDRESS = col + 0x40;
    2148:	8b 81       	ldd	r24, Y+3	; 0x03
    214a:	80 5c       	subi	r24, 0xC0	; 192
    214c:	89 83       	std	Y+1, r24	; 0x01
    214e:	07 c0       	rjmp	.+14     	; 0x215e <LCD_moveCursor+0x6c>
				break;
		case 2:
			LCD_MEMORY_ADDRESS = col + 0x10;
    2150:	8b 81       	ldd	r24, Y+3	; 0x03
    2152:	80 5f       	subi	r24, 0xF0	; 240
    2154:	89 83       	std	Y+1, r24	; 0x01
    2156:	03 c0       	rjmp	.+6      	; 0x215e <LCD_moveCursor+0x6c>
				break;
		case 3:
			LCD_MEMORY_ADDRESS = col + 0x50;
    2158:	8b 81       	ldd	r24, Y+3	; 0x03
    215a:	80 5b       	subi	r24, 0xB0	; 176
    215c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(LCD_MEMORY_ADDRESS | LCD_CURSOR_LOCATION);
    215e:	89 81       	ldd	r24, Y+1	; 0x01
    2160:	80 68       	ori	r24, 0x80	; 128
    2162:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <LCD_sendCommand>
}
    2166:	0f 90       	pop	r0
    2168:	0f 90       	pop	r0
    216a:	0f 90       	pop	r0
    216c:	0f 90       	pop	r0
    216e:	0f 90       	pop	r0
    2170:	cf 91       	pop	r28
    2172:	df 91       	pop	r29
    2174:	08 95       	ret

00002176 <LCD_displayStringRowColumn>:


// Displays a string on the LCD at a chosen cursor and row
void LCD_displayStringRowColumn(uint8 row, uint8 col, const char *Str) {
    2176:	df 93       	push	r29
    2178:	cf 93       	push	r28
    217a:	00 d0       	rcall	.+0      	; 0x217c <LCD_displayStringRowColumn+0x6>
    217c:	00 d0       	rcall	.+0      	; 0x217e <LCD_displayStringRowColumn+0x8>
    217e:	cd b7       	in	r28, 0x3d	; 61
    2180:	de b7       	in	r29, 0x3e	; 62
    2182:	89 83       	std	Y+1, r24	; 0x01
    2184:	6a 83       	std	Y+2, r22	; 0x02
    2186:	5c 83       	std	Y+4, r21	; 0x04
    2188:	4b 83       	std	Y+3, r20	; 0x03
	// Go to to the required LCD position
	LCD_moveCursor(row, col);
    218a:	89 81       	ldd	r24, Y+1	; 0x01
    218c:	6a 81       	ldd	r22, Y+2	; 0x02
    218e:	0e 94 79 10 	call	0x20f2	; 0x20f2 <LCD_moveCursor>

	// Display the string from the cursor
	LCD_displayString(Str);
    2192:	8b 81       	ldd	r24, Y+3	; 0x03
    2194:	9c 81       	ldd	r25, Y+4	; 0x04
    2196:	0e 94 50 10 	call	0x20a0	; 0x20a0 <LCD_displayString>
}
    219a:	0f 90       	pop	r0
    219c:	0f 90       	pop	r0
    219e:	0f 90       	pop	r0
    21a0:	0f 90       	pop	r0
    21a2:	cf 91       	pop	r28
    21a4:	df 91       	pop	r29
    21a6:	08 95       	ret

000021a8 <LCD_intgerToString>:

// LCD only understands ASCII, so this converts Int to a string
void LCD_intgerToString(int data) {
    21a8:	df 93       	push	r29
    21aa:	cf 93       	push	r28
    21ac:	cd b7       	in	r28, 0x3d	; 61
    21ae:	de b7       	in	r29, 0x3e	; 62
    21b0:	62 97       	sbiw	r28, 0x12	; 18
    21b2:	0f b6       	in	r0, 0x3f	; 63
    21b4:	f8 94       	cli
    21b6:	de bf       	out	0x3e, r29	; 62
    21b8:	0f be       	out	0x3f, r0	; 63
    21ba:	cd bf       	out	0x3d, r28	; 61
    21bc:	9a 8b       	std	Y+18, r25	; 0x12
    21be:	89 8b       	std	Y+17, r24	; 0x11
	// A string to hold the ASCII values
	char buffer[16];

	// Converts data to its ASCII
	itoa(data, buffer, 10);
    21c0:	89 89       	ldd	r24, Y+17	; 0x11
    21c2:	9a 89       	ldd	r25, Y+18	; 0x12
    21c4:	9e 01       	movw	r18, r28
    21c6:	2f 5f       	subi	r18, 0xFF	; 255
    21c8:	3f 4f       	sbci	r19, 0xFF	; 255
    21ca:	b9 01       	movw	r22, r18
    21cc:	4a e0       	ldi	r20, 0x0A	; 10
    21ce:	50 e0       	ldi	r21, 0x00	; 0
    21d0:	0e 94 02 12 	call	0x2404	; 0x2404 <itoa>

	// Display string with the results in the buffer
	LCD_displayString(buffer);
    21d4:	ce 01       	movw	r24, r28
    21d6:	01 96       	adiw	r24, 0x01	; 1
    21d8:	0e 94 50 10 	call	0x20a0	; 0x20a0 <LCD_displayString>
}
    21dc:	62 96       	adiw	r28, 0x12	; 18
    21de:	0f b6       	in	r0, 0x3f	; 63
    21e0:	f8 94       	cli
    21e2:	de bf       	out	0x3e, r29	; 62
    21e4:	0f be       	out	0x3f, r0	; 63
    21e6:	cd bf       	out	0x3d, r28	; 61
    21e8:	cf 91       	pop	r28
    21ea:	df 91       	pop	r29
    21ec:	08 95       	ret

000021ee <LCD_clearScreen>:

// Clears the LCD from any garbage
void LCD_clearScreen(void) {
    21ee:	df 93       	push	r29
    21f0:	cf 93       	push	r28
    21f2:	cd b7       	in	r28, 0x3d	; 61
    21f4:	de b7       	in	r29, 0x3e	; 62
	// Clears the LCD Display
	LCD_sendCommand(LCD_CLEAR_DISPLAY);
    21f6:	81 e0       	ldi	r24, 0x01	; 1
    21f8:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <LCD_sendCommand>
}
    21fc:	cf 91       	pop	r28
    21fe:	df 91       	pop	r29
    2200:	08 95       	ret

00002202 <KEYPAD_Init>:
	#endif

#endif /* STD_KEYPAD */


void KEYPAD_Init(void) {
    2202:	df 93       	push	r29
    2204:	cf 93       	push	r28
    2206:	cd b7       	in	r28, 0x3d	; 61
    2208:	de b7       	in	r29, 0x3e	; 62
		/* Setup PORT and PINS for for KEYPAD Rows*/
		GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN, PIN_INPUT);
    220a:	81 e0       	ldi	r24, 0x01	; 1
    220c:	64 e0       	ldi	r22, 0x04	; 4
    220e:	40 e0       	ldi	r20, 0x00	; 0
    2210:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN+1, PIN_INPUT);
    2214:	81 e0       	ldi	r24, 0x01	; 1
    2216:	65 e0       	ldi	r22, 0x05	; 5
    2218:	40 e0       	ldi	r20, 0x00	; 0
    221a:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN+2, PIN_INPUT);
    221e:	81 e0       	ldi	r24, 0x01	; 1
    2220:	66 e0       	ldi	r22, 0x06	; 6
    2222:	40 e0       	ldi	r20, 0x00	; 0
    2224:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN+3, PIN_INPUT);
    2228:	81 e0       	ldi	r24, 0x01	; 1
    222a:	67 e0       	ldi	r22, 0x07	; 7
    222c:	40 e0       	ldi	r20, 0x00	; 0
    222e:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>

		/* Setup PORT and PINS for for KEYPAD Columns*/
		GPIO_setupPinDirection(KEYPAD_COL_PORT, KEYPAD_FIRSTCOL_PIN, PIN_INPUT);
    2232:	81 e0       	ldi	r24, 0x01	; 1
    2234:	60 e0       	ldi	r22, 0x00	; 0
    2236:	40 e0       	ldi	r20, 0x00	; 0
    2238:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(KEYPAD_COL_PORT, KEYPAD_FIRSTCOL_PIN+1, PIN_INPUT);
    223c:	81 e0       	ldi	r24, 0x01	; 1
    223e:	61 e0       	ldi	r22, 0x01	; 1
    2240:	40 e0       	ldi	r20, 0x00	; 0
    2242:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(KEYPAD_COL_PORT, KEYPAD_FIRSTCOL_PIN+2, PIN_INPUT);
    2246:	81 e0       	ldi	r24, 0x01	; 1
    2248:	62 e0       	ldi	r22, 0x02	; 2
    224a:	40 e0       	ldi	r20, 0x00	; 0
    224c:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>

		#if(KEYPAD_COL_NUM == 4)
			GPIO_setupPinDirection(KEYPAD_COL_PORT, KEYPAD_FIRSTCOL_PIN+3, PIN_INPUT);
		#endif
}
    2250:	cf 91       	pop	r28
    2252:	df 91       	pop	r29
    2254:	08 95       	ret

00002256 <KEYPAD_getPressedKey>:


uint8 KEYPAD_getPressedKey(void) {
    2256:	df 93       	push	r29
    2258:	cf 93       	push	r28
    225a:	00 d0       	rcall	.+0      	; 0x225c <KEYPAD_getPressedKey+0x6>
    225c:	cd b7       	in	r28, 0x3d	; 61
    225e:	de b7       	in	r29, 0x3e	; 62
	uint8 row, col;
	while(1) {
			for (row = 0 ; row < KEYPAD_ROW_NUM ; row++) {
    2260:	1a 82       	std	Y+2, r1	; 0x02
    2262:	3a c0       	rjmp	.+116    	; 0x22d8 <KEYPAD_getPressedKey+0x82>
				// I set the pin by '1' for the row, and will iterate
				GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, PIN_OUTPUT);
    2264:	8a 81       	ldd	r24, Y+2	; 0x02
    2266:	98 2f       	mov	r25, r24
    2268:	9c 5f       	subi	r25, 0xFC	; 252
    226a:	81 e0       	ldi	r24, 0x01	; 1
    226c:	69 2f       	mov	r22, r25
    226e:	41 e0       	ldi	r20, 0x01	; 1
    2270:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>

				/* Set/Clear the row output pin */
				GPIO_writePin(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, KEYPAD_BUTTON_PRESSED);
    2274:	8a 81       	ldd	r24, Y+2	; 0x02
    2276:	98 2f       	mov	r25, r24
    2278:	9c 5f       	subi	r25, 0xFC	; 252
    227a:	81 e0       	ldi	r24, 0x01	; 1
    227c:	69 2f       	mov	r22, r25
    227e:	40 e0       	ldi	r20, 0x00	; 0
    2280:	0e 94 97 06 	call	0xd2e	; 0xd2e <GPIO_writePin>

				for (col = 0 ; col < KEYPAD_COL_NUM ; col++) {
    2284:	19 82       	std	Y+1, r1	; 0x01
    2286:	1a c0       	rjmp	.+52     	; 0x22bc <KEYPAD_getPressedKey+0x66>
					/* Check if the switch is pressed in this column */
					if(GPIO_readPin(KEYPAD_COL_PORT,KEYPAD_FIRSTCOL_PIN + col) == KEYPAD_BUTTON_PRESSED) {
    2288:	81 e0       	ldi	r24, 0x01	; 1
    228a:	69 81       	ldd	r22, Y+1	; 0x01
    228c:	0e 94 21 08 	call	0x1042	; 0x1042 <GPIO_readPin>
    2290:	88 23       	and	r24, r24
    2292:	89 f4       	brne	.+34     	; 0x22b6 <KEYPAD_getPressedKey+0x60>
						#if (KEYPAD_COL_NUM == 3)
							#ifdef STD_KEYPAD
								return ( (row * KEYPAD_COL_NUM) + col + 1);
    2294:	8a 81       	ldd	r24, Y+2	; 0x02
    2296:	28 2f       	mov	r18, r24
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	c9 01       	movw	r24, r18
    229c:	88 0f       	add	r24, r24
    229e:	99 1f       	adc	r25, r25
    22a0:	82 0f       	add	r24, r18
    22a2:	93 1f       	adc	r25, r19
    22a4:	98 2f       	mov	r25, r24
    22a6:	89 81       	ldd	r24, Y+1	; 0x01
    22a8:	89 0f       	add	r24, r25
    22aa:	8f 5f       	subi	r24, 0xFF	; 255
					}
				}
				GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, PIN_INPUT);
			}
		}
}
    22ac:	0f 90       	pop	r0
    22ae:	0f 90       	pop	r0
    22b0:	cf 91       	pop	r28
    22b2:	df 91       	pop	r29
    22b4:	08 95       	ret
				GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, PIN_OUTPUT);

				/* Set/Clear the row output pin */
				GPIO_writePin(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, KEYPAD_BUTTON_PRESSED);

				for (col = 0 ; col < KEYPAD_COL_NUM ; col++) {
    22b6:	89 81       	ldd	r24, Y+1	; 0x01
    22b8:	8f 5f       	subi	r24, 0xFF	; 255
    22ba:	89 83       	std	Y+1, r24	; 0x01
    22bc:	89 81       	ldd	r24, Y+1	; 0x01
    22be:	83 30       	cpi	r24, 0x03	; 3
    22c0:	18 f3       	brcs	.-58     	; 0x2288 <KEYPAD_getPressedKey+0x32>
								return KEYPAD_4x4_adjustKeyNumber( (row * KEYPAD_COL_NUM) + col + 1);
							#endif
						#endif
					}
				}
				GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, PIN_INPUT);
    22c2:	8a 81       	ldd	r24, Y+2	; 0x02
    22c4:	98 2f       	mov	r25, r24
    22c6:	9c 5f       	subi	r25, 0xFC	; 252
    22c8:	81 e0       	ldi	r24, 0x01	; 1
    22ca:	69 2f       	mov	r22, r25
    22cc:	40 e0       	ldi	r20, 0x00	; 0
    22ce:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>


uint8 KEYPAD_getPressedKey(void) {
	uint8 row, col;
	while(1) {
			for (row = 0 ; row < KEYPAD_ROW_NUM ; row++) {
    22d2:	8a 81       	ldd	r24, Y+2	; 0x02
    22d4:	8f 5f       	subi	r24, 0xFF	; 255
    22d6:	8a 83       	std	Y+2, r24	; 0x02
    22d8:	8a 81       	ldd	r24, Y+2	; 0x02
    22da:	84 30       	cpi	r24, 0x04	; 4
    22dc:	18 f2       	brcs	.-122    	; 0x2264 <KEYPAD_getPressedKey+0xe>
    22de:	c0 cf       	rjmp	.-128    	; 0x2260 <KEYPAD_getPressedKey+0xa>

000022e0 <BUTTON_Init>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
BUTTON_Error_t BUTTON_Init(uint8 port_num, uint8 pin_num) {
    22e0:	df 93       	push	r29
    22e2:	cf 93       	push	r28
    22e4:	00 d0       	rcall	.+0      	; 0x22e6 <BUTTON_Init+0x6>
    22e6:	0f 92       	push	r0
    22e8:	cd b7       	in	r28, 0x3d	; 61
    22ea:	de b7       	in	r29, 0x3e	; 62
    22ec:	8a 83       	std	Y+2, r24	; 0x02
    22ee:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t BUTTON_Driver_Checker = NULL;
    22f0:	19 82       	std	Y+1, r1	; 0x01
	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    22f2:	8b 81       	ldd	r24, Y+3	; 0x03
    22f4:	88 30       	cpi	r24, 0x08	; 8
    22f6:	18 f0       	brcs	.+6      	; 0x22fe <BUTTON_Init+0x1e>
		BUTTON_Driver_Checker = BUTTON_WRONG_PIN_NUMBER;
    22f8:	81 e0       	ldi	r24, 0x01	; 1
    22fa:	89 83       	std	Y+1, r24	; 0x01
    22fc:	0c c0       	rjmp	.+24     	; 0x2316 <BUTTON_Init+0x36>
	}
	else if((port_num >= NUM_OF_PORTS)) {
    22fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2300:	84 30       	cpi	r24, 0x04	; 4
    2302:	18 f0       	brcs	.+6      	; 0x230a <BUTTON_Init+0x2a>
		BUTTON_Driver_Checker = BUTTON_WRONG_PORT_NUMBER;
    2304:	82 e0       	ldi	r24, 0x02	; 2
    2306:	89 83       	std	Y+1, r24	; 0x01
    2308:	06 c0       	rjmp	.+12     	; 0x2316 <BUTTON_Init+0x36>
	}
	else {
		/* Setup the pin direction as required */
		GPIO_setupPinDirection(port_num, pin_num, PIN_INPUT);
    230a:	8a 81       	ldd	r24, Y+2	; 0x02
    230c:	6b 81       	ldd	r22, Y+3	; 0x03
    230e:	40 e0       	ldi	r20, 0x00	; 0
    2310:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>
		BUTTON_Driver_Checker = BUTTON_OK;
    2314:	19 82       	std	Y+1, r1	; 0x01
	}
	return BUTTON_Driver_Checker;
    2316:	89 81       	ldd	r24, Y+1	; 0x01
}
    2318:	0f 90       	pop	r0
    231a:	0f 90       	pop	r0
    231c:	0f 90       	pop	r0
    231e:	cf 91       	pop	r28
    2320:	df 91       	pop	r29
    2322:	08 95       	ret

00002324 <BUTTON_Read>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
uint8 BUTTON_Read(uint8 port_num, uint8 pin_num) {
    2324:	df 93       	push	r29
    2326:	cf 93       	push	r28
    2328:	00 d0       	rcall	.+0      	; 0x232a <BUTTON_Read+0x6>
    232a:	0f 92       	push	r0
    232c:	cd b7       	in	r28, 0x3d	; 61
    232e:	de b7       	in	r29, 0x3e	; 62
    2330:	8a 83       	std	Y+2, r24	; 0x02
    2332:	6b 83       	std	Y+3, r22	; 0x03

	uint8_t BUTTON_Driver_Checker = NULL;
    2334:	19 82       	std	Y+1, r1	; 0x01
		if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    2336:	8b 81       	ldd	r24, Y+3	; 0x03
    2338:	88 30       	cpi	r24, 0x08	; 8
    233a:	18 f0       	brcs	.+6      	; 0x2342 <BUTTON_Read+0x1e>
			BUTTON_Driver_Checker = BUTTON_WRONG_PIN_NUMBER;
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	89 83       	std	Y+1, r24	; 0x01
    2340:	0b c0       	rjmp	.+22     	; 0x2358 <BUTTON_Read+0x34>
		}
		else if((port_num >= NUM_OF_PORTS)) {
    2342:	8a 81       	ldd	r24, Y+2	; 0x02
    2344:	84 30       	cpi	r24, 0x04	; 4
    2346:	18 f0       	brcs	.+6      	; 0x234e <BUTTON_Read+0x2a>
			BUTTON_Driver_Checker = BUTTON_WRONG_PORT_NUMBER;
    2348:	82 e0       	ldi	r24, 0x02	; 2
    234a:	89 83       	std	Y+1, r24	; 0x01
    234c:	05 c0       	rjmp	.+10     	; 0x2358 <BUTTON_Read+0x34>
		}
		else {
			/* Setup the pin direction as required */
			GPIO_readPin(port_num, pin_num);
    234e:	8a 81       	ldd	r24, Y+2	; 0x02
    2350:	6b 81       	ldd	r22, Y+3	; 0x03
    2352:	0e 94 21 08 	call	0x1042	; 0x1042 <GPIO_readPin>
			BUTTON_Driver_Checker = BUTTON_OK;
    2356:	19 82       	std	Y+1, r1	; 0x01
		}
		return GPIO_readPin(port_num, pin_num);
    2358:	8a 81       	ldd	r24, Y+2	; 0x02
    235a:	6b 81       	ldd	r22, Y+3	; 0x03
    235c:	0e 94 21 08 	call	0x1042	; 0x1042 <GPIO_readPin>
}
    2360:	0f 90       	pop	r0
    2362:	0f 90       	pop	r0
    2364:	0f 90       	pop	r0
    2366:	cf 91       	pop	r28
    2368:	df 91       	pop	r29
    236a:	08 95       	ret

0000236c <main>:
//#include "../ECUAL/BUTTON_DRIVER/BUTTON.h"
//#include "../ECUAL/SEVEN-SEGMENT_DRIVER/SEGMENT.h"
//#include "../ECUAL/KEYPAD_DRIVER/KEYPAD.h"
#include "../ECUAL/LCD_DRIVER/LCD.h"

int main(void) {
    236c:	df 93       	push	r29
    236e:	cf 93       	push	r28
    2370:	cd b7       	in	r28, 0x3d	; 61
    2372:	de b7       	in	r29, 0x3e	; 62
	// Initializes the screen
	LCD_Init();
    2374:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_Init>

	// Displays messages
	//LCD_displayString("ENG Mohd Tarek");
	LCD_displayStringRowColumn(0, 2, "kdjflksdjfslakdj");
    2378:	20 e6       	ldi	r18, 0x60	; 96
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	80 e0       	ldi	r24, 0x00	; 0
    237e:	62 e0       	ldi	r22, 0x02	; 2
    2380:	a9 01       	movw	r20, r18
    2382:	0e 94 bb 10 	call	0x2176	; 0x2176 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 6, "Hehe");
    2386:	21 e7       	ldi	r18, 0x71	; 113
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	81 e0       	ldi	r24, 0x01	; 1
    238c:	66 e0       	ldi	r22, 0x06	; 6
    238e:	a9 01       	movw	r20, r18
    2390:	0e 94 bb 10 	call	0x2176	; 0x2176 <LCD_displayStringRowColumn>
    2394:	ff cf       	rjmp	.-2      	; 0x2394 <main+0x28>

00002396 <__prologue_saves__>:
    2396:	2f 92       	push	r2
    2398:	3f 92       	push	r3
    239a:	4f 92       	push	r4
    239c:	5f 92       	push	r5
    239e:	6f 92       	push	r6
    23a0:	7f 92       	push	r7
    23a2:	8f 92       	push	r8
    23a4:	9f 92       	push	r9
    23a6:	af 92       	push	r10
    23a8:	bf 92       	push	r11
    23aa:	cf 92       	push	r12
    23ac:	df 92       	push	r13
    23ae:	ef 92       	push	r14
    23b0:	ff 92       	push	r15
    23b2:	0f 93       	push	r16
    23b4:	1f 93       	push	r17
    23b6:	cf 93       	push	r28
    23b8:	df 93       	push	r29
    23ba:	cd b7       	in	r28, 0x3d	; 61
    23bc:	de b7       	in	r29, 0x3e	; 62
    23be:	ca 1b       	sub	r28, r26
    23c0:	db 0b       	sbc	r29, r27
    23c2:	0f b6       	in	r0, 0x3f	; 63
    23c4:	f8 94       	cli
    23c6:	de bf       	out	0x3e, r29	; 62
    23c8:	0f be       	out	0x3f, r0	; 63
    23ca:	cd bf       	out	0x3d, r28	; 61
    23cc:	09 94       	ijmp

000023ce <__epilogue_restores__>:
    23ce:	2a 88       	ldd	r2, Y+18	; 0x12
    23d0:	39 88       	ldd	r3, Y+17	; 0x11
    23d2:	48 88       	ldd	r4, Y+16	; 0x10
    23d4:	5f 84       	ldd	r5, Y+15	; 0x0f
    23d6:	6e 84       	ldd	r6, Y+14	; 0x0e
    23d8:	7d 84       	ldd	r7, Y+13	; 0x0d
    23da:	8c 84       	ldd	r8, Y+12	; 0x0c
    23dc:	9b 84       	ldd	r9, Y+11	; 0x0b
    23de:	aa 84       	ldd	r10, Y+10	; 0x0a
    23e0:	b9 84       	ldd	r11, Y+9	; 0x09
    23e2:	c8 84       	ldd	r12, Y+8	; 0x08
    23e4:	df 80       	ldd	r13, Y+7	; 0x07
    23e6:	ee 80       	ldd	r14, Y+6	; 0x06
    23e8:	fd 80       	ldd	r15, Y+5	; 0x05
    23ea:	0c 81       	ldd	r16, Y+4	; 0x04
    23ec:	1b 81       	ldd	r17, Y+3	; 0x03
    23ee:	aa 81       	ldd	r26, Y+2	; 0x02
    23f0:	b9 81       	ldd	r27, Y+1	; 0x01
    23f2:	ce 0f       	add	r28, r30
    23f4:	d1 1d       	adc	r29, r1
    23f6:	0f b6       	in	r0, 0x3f	; 63
    23f8:	f8 94       	cli
    23fa:	de bf       	out	0x3e, r29	; 62
    23fc:	0f be       	out	0x3f, r0	; 63
    23fe:	cd bf       	out	0x3d, r28	; 61
    2400:	ed 01       	movw	r28, r26
    2402:	08 95       	ret

00002404 <itoa>:
    2404:	fb 01       	movw	r30, r22
    2406:	9f 01       	movw	r18, r30
    2408:	e8 94       	clt
    240a:	42 30       	cpi	r20, 0x02	; 2
    240c:	c4 f0       	brlt	.+48     	; 0x243e <itoa+0x3a>
    240e:	45 32       	cpi	r20, 0x25	; 37
    2410:	b4 f4       	brge	.+44     	; 0x243e <itoa+0x3a>
    2412:	4a 30       	cpi	r20, 0x0A	; 10
    2414:	29 f4       	brne	.+10     	; 0x2420 <itoa+0x1c>
    2416:	97 fb       	bst	r25, 7
    2418:	1e f4       	brtc	.+6      	; 0x2420 <itoa+0x1c>
    241a:	90 95       	com	r25
    241c:	81 95       	neg	r24
    241e:	9f 4f       	sbci	r25, 0xFF	; 255
    2420:	64 2f       	mov	r22, r20
    2422:	77 27       	eor	r23, r23
    2424:	0e 94 33 12 	call	0x2466	; 0x2466 <__udivmodhi4>
    2428:	80 5d       	subi	r24, 0xD0	; 208
    242a:	8a 33       	cpi	r24, 0x3A	; 58
    242c:	0c f0       	brlt	.+2      	; 0x2430 <itoa+0x2c>
    242e:	89 5d       	subi	r24, 0xD9	; 217
    2430:	81 93       	st	Z+, r24
    2432:	cb 01       	movw	r24, r22
    2434:	00 97       	sbiw	r24, 0x00	; 0
    2436:	a1 f7       	brne	.-24     	; 0x2420 <itoa+0x1c>
    2438:	16 f4       	brtc	.+4      	; 0x243e <itoa+0x3a>
    243a:	5d e2       	ldi	r21, 0x2D	; 45
    243c:	51 93       	st	Z+, r21
    243e:	10 82       	st	Z, r1
    2440:	c9 01       	movw	r24, r18
    2442:	0c 94 23 12 	jmp	0x2446	; 0x2446 <strrev>

00002446 <strrev>:
    2446:	dc 01       	movw	r26, r24
    2448:	fc 01       	movw	r30, r24
    244a:	67 2f       	mov	r22, r23
    244c:	71 91       	ld	r23, Z+
    244e:	77 23       	and	r23, r23
    2450:	e1 f7       	brne	.-8      	; 0x244a <strrev+0x4>
    2452:	32 97       	sbiw	r30, 0x02	; 2
    2454:	04 c0       	rjmp	.+8      	; 0x245e <strrev+0x18>
    2456:	7c 91       	ld	r23, X
    2458:	6d 93       	st	X+, r22
    245a:	70 83       	st	Z, r23
    245c:	62 91       	ld	r22, -Z
    245e:	ae 17       	cp	r26, r30
    2460:	bf 07       	cpc	r27, r31
    2462:	c8 f3       	brcs	.-14     	; 0x2456 <strrev+0x10>
    2464:	08 95       	ret

00002466 <__udivmodhi4>:
    2466:	aa 1b       	sub	r26, r26
    2468:	bb 1b       	sub	r27, r27
    246a:	51 e1       	ldi	r21, 0x11	; 17
    246c:	07 c0       	rjmp	.+14     	; 0x247c <__udivmodhi4_ep>

0000246e <__udivmodhi4_loop>:
    246e:	aa 1f       	adc	r26, r26
    2470:	bb 1f       	adc	r27, r27
    2472:	a6 17       	cp	r26, r22
    2474:	b7 07       	cpc	r27, r23
    2476:	10 f0       	brcs	.+4      	; 0x247c <__udivmodhi4_ep>
    2478:	a6 1b       	sub	r26, r22
    247a:	b7 0b       	sbc	r27, r23

0000247c <__udivmodhi4_ep>:
    247c:	88 1f       	adc	r24, r24
    247e:	99 1f       	adc	r25, r25
    2480:	5a 95       	dec	r21
    2482:	a9 f7       	brne	.-22     	; 0x246e <__udivmodhi4_loop>
    2484:	80 95       	com	r24
    2486:	90 95       	com	r25
    2488:	bc 01       	movw	r22, r24
    248a:	cd 01       	movw	r24, r26
    248c:	08 95       	ret

0000248e <_exit>:
    248e:	f8 94       	cli

00002490 <__stop_program>:
    2490:	ff cf       	rjmp	.-2      	; 0x2490 <__stop_program>
