
KEYLCD_EX2_HOSA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000024ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  000024ea  0000255e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002cf4  00000000  00000000  00002580  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001704  00000000  00000000  00005274  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00006978  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00006ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00006c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00008871  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000975c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000a50c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000a66c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000a8f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b0c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ee       	ldi	r30, 0xEA	; 234
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <main>
      7a:	0c 94 73 12 	jmp	0x24e6	; 0x24e6 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 f7 11 	jmp	0x23ee	; 0x23ee <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a7 e7       	ldi	r26, 0x77	; 119
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 13 12 	jmp	0x2426	; 0x2426 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 03 12 	jmp	0x2406	; 0x2406 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 1f 12 	jmp	0x243e	; 0x243e <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 03 12 	jmp	0x2406	; 0x2406 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 1f 12 	jmp	0x243e	; 0x243e <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 f7 11 	jmp	0x23ee	; 0x23ee <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	87 e7       	ldi	r24, 0x77	; 119
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 13 12 	jmp	0x2426	; 0x2426 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 03 12 	jmp	0x2406	; 0x2406 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 1f 12 	jmp	0x243e	; 0x243e <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 03 12 	jmp	0x2406	; 0x2406 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 1f 12 	jmp	0x243e	; 0x243e <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 03 12 	jmp	0x2406	; 0x2406 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 1f 12 	jmp	0x243e	; 0x243e <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 07 12 	jmp	0x240e	; 0x240e <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 23 12 	jmp	0x2446	; 0x2446 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__pack_f+0x178>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__pack_f+0x172>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__pack_f+0x17c>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__pack_f+0x114>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__pack_f+0x76>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__pack_f+0xca>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__pack_f+0x86>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__pack_f+0x7e>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__pack_f+0x9c>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__pack_f+0x94>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__pack_f+0xbe>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__pack_f+0xee>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__pack_f+0xf6>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__pack_f+0xf6>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__pack_f+0x10e>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__pack_f+0x162>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__pack_f+0x172>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__pack_f+0x144>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__pack_f+0x154>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__pack_f+0x14c>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__pack_f+0x162>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__pack_f+0x164>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__pack_f+0x17c>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <SEGMENT_Init>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
SEGMENT_Error_t SEGMENT_Init(uint8 port_num) {
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <SEGMENT_Init+0x6>
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
     b40:	8a 83       	std	Y+2, r24	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t SEGMENT_Driver_Checker = NULL;
     b42:	19 82       	std	Y+1, r1	; 0x01

	if((port_num >= NUM_OF_PORTS)) {
     b44:	8a 81       	ldd	r24, Y+2	; 0x02
     b46:	84 30       	cpi	r24, 0x04	; 4
     b48:	18 f0       	brcs	.+6      	; 0xb50 <SEGMENT_Init+0x1a>
		SEGMENT_Driver_Checker = SEGMENT_WRONG_PORT_NUMBER;
     b4a:	82 e0       	ldi	r24, 0x02	; 2
     b4c:	89 83       	std	Y+1, r24	; 0x01
     b4e:	15 c0       	rjmp	.+42     	; 0xb7a <SEGMENT_Init+0x44>
	}
	else {
		/* Setup the pin direction as required */
		GPIO_setupPinDirection(port_num, PIN_0, PIN_OUTPUT);
     b50:	8a 81       	ldd	r24, Y+2	; 0x02
     b52:	60 e0       	ldi	r22, 0x00	; 0
     b54:	41 e0       	ldi	r20, 0x01	; 1
     b56:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <GPIO_setupPinDirection>
		GPIO_setupPinDirection(port_num, PIN_1, PIN_OUTPUT);
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	61 e0       	ldi	r22, 0x01	; 1
     b5e:	41 e0       	ldi	r20, 0x01	; 1
     b60:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <GPIO_setupPinDirection>
		GPIO_setupPinDirection(port_num, PIN_2, PIN_OUTPUT);
     b64:	8a 81       	ldd	r24, Y+2	; 0x02
     b66:	62 e0       	ldi	r22, 0x02	; 2
     b68:	41 e0       	ldi	r20, 0x01	; 1
     b6a:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <GPIO_setupPinDirection>
		GPIO_setupPinDirection(port_num, PIN_3, PIN_OUTPUT);
     b6e:	8a 81       	ldd	r24, Y+2	; 0x02
     b70:	63 e0       	ldi	r22, 0x03	; 3
     b72:	41 e0       	ldi	r20, 0x01	; 1
     b74:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <GPIO_setupPinDirection>
		SEGMENT_Driver_Checker = SEGMENT_OK;
     b78:	19 82       	std	Y+1, r1	; 0x01
	}
	return SEGMENT_Driver_Checker;
     b7a:	89 81       	ldd	r24, Y+1	; 0x01
}
     b7c:	0f 90       	pop	r0
     b7e:	0f 90       	pop	r0
     b80:	cf 91       	pop	r28
     b82:	df 91       	pop	r29
     b84:	08 95       	ret

00000b86 <SEGMENT_DISPLAY>:

SEGMENT_Error_t SEGMENT_DISPLAY(uint8 port_num, uint8 value) {
     b86:	df 93       	push	r29
     b88:	cf 93       	push	r28
     b8a:	00 d0       	rcall	.+0      	; 0xb8c <SEGMENT_DISPLAY+0x6>
     b8c:	00 d0       	rcall	.+0      	; 0xb8e <SEGMENT_DISPLAY+0x8>
     b8e:	0f 92       	push	r0
     b90:	cd b7       	in	r28, 0x3d	; 61
     b92:	de b7       	in	r29, 0x3e	; 62
     b94:	8a 83       	std	Y+2, r24	; 0x02
     b96:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t SEGMENT_Driver_Checker = NULL;
     b98:	19 82       	std	Y+1, r1	; 0x01

	if((port_num >= NUM_OF_PORTS)) {
     b9a:	8a 81       	ldd	r24, Y+2	; 0x02
     b9c:	84 30       	cpi	r24, 0x04	; 4
     b9e:	18 f0       	brcs	.+6      	; 0xba6 <SEGMENT_DISPLAY+0x20>
		SEGMENT_Driver_Checker = SEGMENT_WRONG_PORT_NUMBER;
     ba0:	82 e0       	ldi	r24, 0x02	; 2
     ba2:	89 83       	std	Y+1, r24	; 0x01
     ba4:	24 c1       	rjmp	.+584    	; 0xdee <SEGMENT_DISPLAY+0x268>
	}
	else if((value < 0 && value > 9)) {
		SEGMENT_Driver_Checker = SEGMENT_WRONG_VALUE;
	}
	else {
		switch(value) {
     ba6:	8b 81       	ldd	r24, Y+3	; 0x03
     ba8:	28 2f       	mov	r18, r24
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	3d 83       	std	Y+5, r19	; 0x05
     bae:	2c 83       	std	Y+4, r18	; 0x04
     bb0:	8c 81       	ldd	r24, Y+4	; 0x04
     bb2:	9d 81       	ldd	r25, Y+5	; 0x05
     bb4:	84 30       	cpi	r24, 0x04	; 4
     bb6:	91 05       	cpc	r25, r1
     bb8:	09 f4       	brne	.+2      	; 0xbbc <SEGMENT_DISPLAY+0x36>
     bba:	9b c0       	rjmp	.+310    	; 0xcf2 <SEGMENT_DISPLAY+0x16c>
     bbc:	2c 81       	ldd	r18, Y+4	; 0x04
     bbe:	3d 81       	ldd	r19, Y+5	; 0x05
     bc0:	25 30       	cpi	r18, 0x05	; 5
     bc2:	31 05       	cpc	r19, r1
     bc4:	ec f4       	brge	.+58     	; 0xc00 <SEGMENT_DISPLAY+0x7a>
     bc6:	8c 81       	ldd	r24, Y+4	; 0x04
     bc8:	9d 81       	ldd	r25, Y+5	; 0x05
     bca:	81 30       	cpi	r24, 0x01	; 1
     bcc:	91 05       	cpc	r25, r1
     bce:	09 f4       	brne	.+2      	; 0xbd2 <SEGMENT_DISPLAY+0x4c>
     bd0:	51 c0       	rjmp	.+162    	; 0xc74 <SEGMENT_DISPLAY+0xee>
     bd2:	2c 81       	ldd	r18, Y+4	; 0x04
     bd4:	3d 81       	ldd	r19, Y+5	; 0x05
     bd6:	22 30       	cpi	r18, 0x02	; 2
     bd8:	31 05       	cpc	r19, r1
     bda:	2c f4       	brge	.+10     	; 0xbe6 <SEGMENT_DISPLAY+0x60>
     bdc:	8c 81       	ldd	r24, Y+4	; 0x04
     bde:	9d 81       	ldd	r25, Y+5	; 0x05
     be0:	00 97       	sbiw	r24, 0x00	; 0
     be2:	99 f1       	breq	.+102    	; 0xc4a <SEGMENT_DISPLAY+0xc4>
     be4:	03 c1       	rjmp	.+518    	; 0xdec <SEGMENT_DISPLAY+0x266>
     be6:	2c 81       	ldd	r18, Y+4	; 0x04
     be8:	3d 81       	ldd	r19, Y+5	; 0x05
     bea:	22 30       	cpi	r18, 0x02	; 2
     bec:	31 05       	cpc	r19, r1
     bee:	09 f4       	brne	.+2      	; 0xbf2 <SEGMENT_DISPLAY+0x6c>
     bf0:	56 c0       	rjmp	.+172    	; 0xc9e <SEGMENT_DISPLAY+0x118>
     bf2:	8c 81       	ldd	r24, Y+4	; 0x04
     bf4:	9d 81       	ldd	r25, Y+5	; 0x05
     bf6:	83 30       	cpi	r24, 0x03	; 3
     bf8:	91 05       	cpc	r25, r1
     bfa:	09 f4       	brne	.+2      	; 0xbfe <SEGMENT_DISPLAY+0x78>
     bfc:	65 c0       	rjmp	.+202    	; 0xcc8 <SEGMENT_DISPLAY+0x142>
     bfe:	f6 c0       	rjmp	.+492    	; 0xdec <SEGMENT_DISPLAY+0x266>
     c00:	2c 81       	ldd	r18, Y+4	; 0x04
     c02:	3d 81       	ldd	r19, Y+5	; 0x05
     c04:	27 30       	cpi	r18, 0x07	; 7
     c06:	31 05       	cpc	r19, r1
     c08:	09 f4       	brne	.+2      	; 0xc0c <SEGMENT_DISPLAY+0x86>
     c0a:	b2 c0       	rjmp	.+356    	; 0xd70 <SEGMENT_DISPLAY+0x1ea>
     c0c:	8c 81       	ldd	r24, Y+4	; 0x04
     c0e:	9d 81       	ldd	r25, Y+5	; 0x05
     c10:	88 30       	cpi	r24, 0x08	; 8
     c12:	91 05       	cpc	r25, r1
     c14:	6c f4       	brge	.+26     	; 0xc30 <SEGMENT_DISPLAY+0xaa>
     c16:	2c 81       	ldd	r18, Y+4	; 0x04
     c18:	3d 81       	ldd	r19, Y+5	; 0x05
     c1a:	25 30       	cpi	r18, 0x05	; 5
     c1c:	31 05       	cpc	r19, r1
     c1e:	09 f4       	brne	.+2      	; 0xc22 <SEGMENT_DISPLAY+0x9c>
     c20:	7d c0       	rjmp	.+250    	; 0xd1c <SEGMENT_DISPLAY+0x196>
     c22:	8c 81       	ldd	r24, Y+4	; 0x04
     c24:	9d 81       	ldd	r25, Y+5	; 0x05
     c26:	86 30       	cpi	r24, 0x06	; 6
     c28:	91 05       	cpc	r25, r1
     c2a:	09 f4       	brne	.+2      	; 0xc2e <SEGMENT_DISPLAY+0xa8>
     c2c:	8c c0       	rjmp	.+280    	; 0xd46 <SEGMENT_DISPLAY+0x1c0>
     c2e:	de c0       	rjmp	.+444    	; 0xdec <SEGMENT_DISPLAY+0x266>
     c30:	2c 81       	ldd	r18, Y+4	; 0x04
     c32:	3d 81       	ldd	r19, Y+5	; 0x05
     c34:	28 30       	cpi	r18, 0x08	; 8
     c36:	31 05       	cpc	r19, r1
     c38:	09 f4       	brne	.+2      	; 0xc3c <SEGMENT_DISPLAY+0xb6>
     c3a:	af c0       	rjmp	.+350    	; 0xd9a <SEGMENT_DISPLAY+0x214>
     c3c:	8c 81       	ldd	r24, Y+4	; 0x04
     c3e:	9d 81       	ldd	r25, Y+5	; 0x05
     c40:	89 30       	cpi	r24, 0x09	; 9
     c42:	91 05       	cpc	r25, r1
     c44:	09 f4       	brne	.+2      	; 0xc48 <SEGMENT_DISPLAY+0xc2>
     c46:	be c0       	rjmp	.+380    	; 0xdc4 <SEGMENT_DISPLAY+0x23e>
     c48:	d1 c0       	rjmp	.+418    	; 0xdec <SEGMENT_DISPLAY+0x266>
			case 0:
				GPIO_writePin(port_num, PIN_0, LOGIC_LOW);
     c4a:	8a 81       	ldd	r24, Y+2	; 0x02
     c4c:	60 e0       	ldi	r22, 0x00	; 0
     c4e:	40 e0       	ldi	r20, 0x00	; 0
     c50:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
     c54:	8a 81       	ldd	r24, Y+2	; 0x02
     c56:	61 e0       	ldi	r22, 0x01	; 1
     c58:	40 e0       	ldi	r20, 0x00	; 0
     c5a:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
     c5e:	8a 81       	ldd	r24, Y+2	; 0x02
     c60:	62 e0       	ldi	r22, 0x02	; 2
     c62:	40 e0       	ldi	r20, 0x00	; 0
     c64:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
     c68:	8a 81       	ldd	r24, Y+2	; 0x02
     c6a:	63 e0       	ldi	r22, 0x03	; 3
     c6c:	40 e0       	ldi	r20, 0x00	; 0
     c6e:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <GPIO_writePin>
     c72:	bc c0       	rjmp	.+376    	; 0xdec <SEGMENT_DISPLAY+0x266>
				break;
			case 1:
				GPIO_writePin(port_num, PIN_0, LOGIC_HIGH);
     c74:	8a 81       	ldd	r24, Y+2	; 0x02
     c76:	60 e0       	ldi	r22, 0x00	; 0
     c78:	41 e0       	ldi	r20, 0x01	; 1
     c7a:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
     c7e:	8a 81       	ldd	r24, Y+2	; 0x02
     c80:	61 e0       	ldi	r22, 0x01	; 1
     c82:	40 e0       	ldi	r20, 0x00	; 0
     c84:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
     c88:	8a 81       	ldd	r24, Y+2	; 0x02
     c8a:	62 e0       	ldi	r22, 0x02	; 2
     c8c:	40 e0       	ldi	r20, 0x00	; 0
     c8e:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
     c92:	8a 81       	ldd	r24, Y+2	; 0x02
     c94:	63 e0       	ldi	r22, 0x03	; 3
     c96:	40 e0       	ldi	r20, 0x00	; 0
     c98:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <GPIO_writePin>
     c9c:	a7 c0       	rjmp	.+334    	; 0xdec <SEGMENT_DISPLAY+0x266>
				break;
			case 2:
				GPIO_writePin(port_num, PIN_0, LOGIC_LOW);
     c9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ca0:	60 e0       	ldi	r22, 0x00	; 0
     ca2:	40 e0       	ldi	r20, 0x00	; 0
     ca4:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_HIGH);
     ca8:	8a 81       	ldd	r24, Y+2	; 0x02
     caa:	61 e0       	ldi	r22, 0x01	; 1
     cac:	41 e0       	ldi	r20, 0x01	; 1
     cae:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
     cb2:	8a 81       	ldd	r24, Y+2	; 0x02
     cb4:	62 e0       	ldi	r22, 0x02	; 2
     cb6:	40 e0       	ldi	r20, 0x00	; 0
     cb8:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
     cbc:	8a 81       	ldd	r24, Y+2	; 0x02
     cbe:	63 e0       	ldi	r22, 0x03	; 3
     cc0:	40 e0       	ldi	r20, 0x00	; 0
     cc2:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <GPIO_writePin>
     cc6:	92 c0       	rjmp	.+292    	; 0xdec <SEGMENT_DISPLAY+0x266>
				break;
			case 3:
				GPIO_writePin(port_num, PIN_0, LOGIC_HIGH);
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	60 e0       	ldi	r22, 0x00	; 0
     ccc:	41 e0       	ldi	r20, 0x01	; 1
     cce:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_HIGH);
     cd2:	8a 81       	ldd	r24, Y+2	; 0x02
     cd4:	61 e0       	ldi	r22, 0x01	; 1
     cd6:	41 e0       	ldi	r20, 0x01	; 1
     cd8:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
     cdc:	8a 81       	ldd	r24, Y+2	; 0x02
     cde:	62 e0       	ldi	r22, 0x02	; 2
     ce0:	40 e0       	ldi	r20, 0x00	; 0
     ce2:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
     ce6:	8a 81       	ldd	r24, Y+2	; 0x02
     ce8:	63 e0       	ldi	r22, 0x03	; 3
     cea:	40 e0       	ldi	r20, 0x00	; 0
     cec:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <GPIO_writePin>
     cf0:	7d c0       	rjmp	.+250    	; 0xdec <SEGMENT_DISPLAY+0x266>
				break;
			case 4:
				GPIO_writePin(port_num, PIN_0, LOGIC_LOW);
     cf2:	8a 81       	ldd	r24, Y+2	; 0x02
     cf4:	60 e0       	ldi	r22, 0x00	; 0
     cf6:	40 e0       	ldi	r20, 0x00	; 0
     cf8:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
     cfc:	8a 81       	ldd	r24, Y+2	; 0x02
     cfe:	61 e0       	ldi	r22, 0x01	; 1
     d00:	40 e0       	ldi	r20, 0x00	; 0
     d02:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_HIGH);
     d06:	8a 81       	ldd	r24, Y+2	; 0x02
     d08:	62 e0       	ldi	r22, 0x02	; 2
     d0a:	41 e0       	ldi	r20, 0x01	; 1
     d0c:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
     d10:	8a 81       	ldd	r24, Y+2	; 0x02
     d12:	63 e0       	ldi	r22, 0x03	; 3
     d14:	40 e0       	ldi	r20, 0x00	; 0
     d16:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <GPIO_writePin>
     d1a:	68 c0       	rjmp	.+208    	; 0xdec <SEGMENT_DISPLAY+0x266>
				break;
			case 5:
				GPIO_writePin(port_num, PIN_0, LOGIC_HIGH);
     d1c:	8a 81       	ldd	r24, Y+2	; 0x02
     d1e:	60 e0       	ldi	r22, 0x00	; 0
     d20:	41 e0       	ldi	r20, 0x01	; 1
     d22:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
     d26:	8a 81       	ldd	r24, Y+2	; 0x02
     d28:	61 e0       	ldi	r22, 0x01	; 1
     d2a:	40 e0       	ldi	r20, 0x00	; 0
     d2c:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_HIGH);
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	62 e0       	ldi	r22, 0x02	; 2
     d34:	41 e0       	ldi	r20, 0x01	; 1
     d36:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
     d3a:	8a 81       	ldd	r24, Y+2	; 0x02
     d3c:	63 e0       	ldi	r22, 0x03	; 3
     d3e:	40 e0       	ldi	r20, 0x00	; 0
     d40:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <GPIO_writePin>
     d44:	53 c0       	rjmp	.+166    	; 0xdec <SEGMENT_DISPLAY+0x266>
				break;
			case 6:
				GPIO_writePin(port_num, PIN_0, LOGIC_LOW);
     d46:	8a 81       	ldd	r24, Y+2	; 0x02
     d48:	60 e0       	ldi	r22, 0x00	; 0
     d4a:	40 e0       	ldi	r20, 0x00	; 0
     d4c:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_HIGH);
     d50:	8a 81       	ldd	r24, Y+2	; 0x02
     d52:	61 e0       	ldi	r22, 0x01	; 1
     d54:	41 e0       	ldi	r20, 0x01	; 1
     d56:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_HIGH);
     d5a:	8a 81       	ldd	r24, Y+2	; 0x02
     d5c:	62 e0       	ldi	r22, 0x02	; 2
     d5e:	41 e0       	ldi	r20, 0x01	; 1
     d60:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
     d64:	8a 81       	ldd	r24, Y+2	; 0x02
     d66:	63 e0       	ldi	r22, 0x03	; 3
     d68:	40 e0       	ldi	r20, 0x00	; 0
     d6a:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <GPIO_writePin>
     d6e:	3e c0       	rjmp	.+124    	; 0xdec <SEGMENT_DISPLAY+0x266>
				break;
			case 7:
				GPIO_writePin(port_num, PIN_0, LOGIC_HIGH);
     d70:	8a 81       	ldd	r24, Y+2	; 0x02
     d72:	60 e0       	ldi	r22, 0x00	; 0
     d74:	41 e0       	ldi	r20, 0x01	; 1
     d76:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_HIGH);
     d7a:	8a 81       	ldd	r24, Y+2	; 0x02
     d7c:	61 e0       	ldi	r22, 0x01	; 1
     d7e:	41 e0       	ldi	r20, 0x01	; 1
     d80:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_HIGH);
     d84:	8a 81       	ldd	r24, Y+2	; 0x02
     d86:	62 e0       	ldi	r22, 0x02	; 2
     d88:	41 e0       	ldi	r20, 0x01	; 1
     d8a:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
     d8e:	8a 81       	ldd	r24, Y+2	; 0x02
     d90:	63 e0       	ldi	r22, 0x03	; 3
     d92:	40 e0       	ldi	r20, 0x00	; 0
     d94:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <GPIO_writePin>
     d98:	29 c0       	rjmp	.+82     	; 0xdec <SEGMENT_DISPLAY+0x266>
				break;
			case 8:
				GPIO_writePin(port_num, PIN_0, LOGIC_LOW);
     d9a:	8a 81       	ldd	r24, Y+2	; 0x02
     d9c:	60 e0       	ldi	r22, 0x00	; 0
     d9e:	40 e0       	ldi	r20, 0x00	; 0
     da0:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
     da4:	8a 81       	ldd	r24, Y+2	; 0x02
     da6:	61 e0       	ldi	r22, 0x01	; 1
     da8:	40 e0       	ldi	r20, 0x00	; 0
     daa:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
     dae:	8a 81       	ldd	r24, Y+2	; 0x02
     db0:	62 e0       	ldi	r22, 0x02	; 2
     db2:	40 e0       	ldi	r20, 0x00	; 0
     db4:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_HIGH);
     db8:	8a 81       	ldd	r24, Y+2	; 0x02
     dba:	63 e0       	ldi	r22, 0x03	; 3
     dbc:	41 e0       	ldi	r20, 0x01	; 1
     dbe:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <GPIO_writePin>
     dc2:	14 c0       	rjmp	.+40     	; 0xdec <SEGMENT_DISPLAY+0x266>
				break;
			case 9:
				GPIO_writePin(port_num, PIN_0, LOGIC_HIGH);
     dc4:	8a 81       	ldd	r24, Y+2	; 0x02
     dc6:	60 e0       	ldi	r22, 0x00	; 0
     dc8:	41 e0       	ldi	r20, 0x01	; 1
     dca:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
     dce:	8a 81       	ldd	r24, Y+2	; 0x02
     dd0:	61 e0       	ldi	r22, 0x01	; 1
     dd2:	40 e0       	ldi	r20, 0x00	; 0
     dd4:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
     dd8:	8a 81       	ldd	r24, Y+2	; 0x02
     dda:	62 e0       	ldi	r22, 0x02	; 2
     ddc:	40 e0       	ldi	r20, 0x00	; 0
     dde:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_HIGH);
     de2:	8a 81       	ldd	r24, Y+2	; 0x02
     de4:	63 e0       	ldi	r22, 0x03	; 3
     de6:	41 e0       	ldi	r20, 0x01	; 1
     de8:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <GPIO_writePin>
				break;
		}
		SEGMENT_Driver_Checker = SEGMENT_OK;
     dec:	19 82       	std	Y+1, r1	; 0x01
	}
	return SEGMENT_Driver_Checker;
     dee:	89 81       	ldd	r24, Y+1	; 0x01
}
     df0:	0f 90       	pop	r0
     df2:	0f 90       	pop	r0
     df4:	0f 90       	pop	r0
     df6:	0f 90       	pop	r0
     df8:	0f 90       	pop	r0
     dfa:	cf 91       	pop	r28
     dfc:	df 91       	pop	r29
     dfe:	08 95       	ret

00000e00 <LED_Init>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
LED_Error_t LED_Init(uint8 port_num, uint8 pin_num) {
     e00:	df 93       	push	r29
     e02:	cf 93       	push	r28
     e04:	00 d0       	rcall	.+0      	; 0xe06 <LED_Init+0x6>
     e06:	0f 92       	push	r0
     e08:	cd b7       	in	r28, 0x3d	; 61
     e0a:	de b7       	in	r29, 0x3e	; 62
     e0c:	8a 83       	std	Y+2, r24	; 0x02
     e0e:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t LED_Driver_Checker = NULL;
     e10:	19 82       	std	Y+1, r1	; 0x01
	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
     e12:	8b 81       	ldd	r24, Y+3	; 0x03
     e14:	88 30       	cpi	r24, 0x08	; 8
     e16:	18 f0       	brcs	.+6      	; 0xe1e <LED_Init+0x1e>
		LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	89 83       	std	Y+1, r24	; 0x01
     e1c:	0c c0       	rjmp	.+24     	; 0xe36 <LED_Init+0x36>
	}
	else if((port_num >= NUM_OF_PORTS)) {
     e1e:	8a 81       	ldd	r24, Y+2	; 0x02
     e20:	84 30       	cpi	r24, 0x04	; 4
     e22:	18 f0       	brcs	.+6      	; 0xe2a <LED_Init+0x2a>
		LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
     e24:	82 e0       	ldi	r24, 0x02	; 2
     e26:	89 83       	std	Y+1, r24	; 0x01
     e28:	06 c0       	rjmp	.+12     	; 0xe36 <LED_Init+0x36>
	}
	else {
		/* Setup the pin direction as required */
		GPIO_setupPinDirection(port_num, pin_num, PIN_OUTPUT);
     e2a:	8a 81       	ldd	r24, Y+2	; 0x02
     e2c:	6b 81       	ldd	r22, Y+3	; 0x03
     e2e:	41 e0       	ldi	r20, 0x01	; 1
     e30:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <GPIO_setupPinDirection>
		LED_Driver_Checker = LED_OK;
     e34:	19 82       	std	Y+1, r1	; 0x01
	}
	return LED_Driver_Checker;
     e36:	89 81       	ldd	r24, Y+1	; 0x01
}
     e38:	0f 90       	pop	r0
     e3a:	0f 90       	pop	r0
     e3c:	0f 90       	pop	r0
     e3e:	cf 91       	pop	r28
     e40:	df 91       	pop	r29
     e42:	08 95       	ret

00000e44 <LED_On>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
LED_Error_t LED_On(uint8 port_num, uint8 pin_num) {
     e44:	df 93       	push	r29
     e46:	cf 93       	push	r28
     e48:	00 d0       	rcall	.+0      	; 0xe4a <LED_On+0x6>
     e4a:	0f 92       	push	r0
     e4c:	cd b7       	in	r28, 0x3d	; 61
     e4e:	de b7       	in	r29, 0x3e	; 62
     e50:	8a 83       	std	Y+2, r24	; 0x02
     e52:	6b 83       	std	Y+3, r22	; 0x03

	uint8_t LED_Driver_Checker = NULL;
     e54:	19 82       	std	Y+1, r1	; 0x01
		if((pin_num >= NUM_OF_PINS_PER_PORT)) {
     e56:	8b 81       	ldd	r24, Y+3	; 0x03
     e58:	88 30       	cpi	r24, 0x08	; 8
     e5a:	18 f0       	brcs	.+6      	; 0xe62 <LED_On+0x1e>
			LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	89 83       	std	Y+1, r24	; 0x01
     e60:	0c c0       	rjmp	.+24     	; 0xe7a <LED_On+0x36>
		}
		else if((port_num >= NUM_OF_PORTS)) {
     e62:	8a 81       	ldd	r24, Y+2	; 0x02
     e64:	84 30       	cpi	r24, 0x04	; 4
     e66:	18 f0       	brcs	.+6      	; 0xe6e <LED_On+0x2a>
			LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
     e68:	82 e0       	ldi	r24, 0x02	; 2
     e6a:	89 83       	std	Y+1, r24	; 0x01
     e6c:	06 c0       	rjmp	.+12     	; 0xe7a <LED_On+0x36>
		}
		else {
			/* Setup the pin direction as required */
			GPIO_writePin(port_num, pin_num, LOGIC_HIGH);
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	6b 81       	ldd	r22, Y+3	; 0x03
     e72:	41 e0       	ldi	r20, 0x01	; 1
     e74:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <GPIO_writePin>
			LED_Driver_Checker = LED_OK;
     e78:	19 82       	std	Y+1, r1	; 0x01
		}
		return LED_Driver_Checker;
     e7a:	89 81       	ldd	r24, Y+1	; 0x01
}
     e7c:	0f 90       	pop	r0
     e7e:	0f 90       	pop	r0
     e80:	0f 90       	pop	r0
     e82:	cf 91       	pop	r28
     e84:	df 91       	pop	r29
     e86:	08 95       	ret

00000e88 <LED_Off>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
LED_Error_t LED_Off(uint8 port_num, uint8 pin_num) {
     e88:	df 93       	push	r29
     e8a:	cf 93       	push	r28
     e8c:	00 d0       	rcall	.+0      	; 0xe8e <LED_Off+0x6>
     e8e:	0f 92       	push	r0
     e90:	cd b7       	in	r28, 0x3d	; 61
     e92:	de b7       	in	r29, 0x3e	; 62
     e94:	8a 83       	std	Y+2, r24	; 0x02
     e96:	6b 83       	std	Y+3, r22	; 0x03

	uint8_t LED_Driver_Checker = NULL;
     e98:	19 82       	std	Y+1, r1	; 0x01
		if((pin_num >= NUM_OF_PINS_PER_PORT)) {
     e9a:	8b 81       	ldd	r24, Y+3	; 0x03
     e9c:	88 30       	cpi	r24, 0x08	; 8
     e9e:	18 f0       	brcs	.+6      	; 0xea6 <LED_Off+0x1e>
			LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	89 83       	std	Y+1, r24	; 0x01
     ea4:	0c c0       	rjmp	.+24     	; 0xebe <LED_Off+0x36>
		}
		else if((port_num >= NUM_OF_PORTS)) {
     ea6:	8a 81       	ldd	r24, Y+2	; 0x02
     ea8:	84 30       	cpi	r24, 0x04	; 4
     eaa:	18 f0       	brcs	.+6      	; 0xeb2 <LED_Off+0x2a>
			LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
     eac:	82 e0       	ldi	r24, 0x02	; 2
     eae:	89 83       	std	Y+1, r24	; 0x01
     eb0:	06 c0       	rjmp	.+12     	; 0xebe <LED_Off+0x36>
		}
		else {
			/* Setup the pin direction as required */
			GPIO_writePin(port_num, pin_num, LOGIC_LOW);
     eb2:	8a 81       	ldd	r24, Y+2	; 0x02
     eb4:	6b 81       	ldd	r22, Y+3	; 0x03
     eb6:	40 e0       	ldi	r20, 0x00	; 0
     eb8:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <GPIO_writePin>
			LED_Driver_Checker = LED_OK;
     ebc:	19 82       	std	Y+1, r1	; 0x01
		}
		return LED_Driver_Checker;
     ebe:	89 81       	ldd	r24, Y+1	; 0x01
}
     ec0:	0f 90       	pop	r0
     ec2:	0f 90       	pop	r0
     ec4:	0f 90       	pop	r0
     ec6:	cf 91       	pop	r28
     ec8:	df 91       	pop	r29
     eca:	08 95       	ret

00000ecc <LED_Toggle>:

LED_Error_t LED_Toggle(uint8 port_num, uint8 pin_num) {
     ecc:	df 93       	push	r29
     ece:	cf 93       	push	r28
     ed0:	00 d0       	rcall	.+0      	; 0xed2 <LED_Toggle+0x6>
     ed2:	0f 92       	push	r0
     ed4:	cd b7       	in	r28, 0x3d	; 61
     ed6:	de b7       	in	r29, 0x3e	; 62
     ed8:	8a 83       	std	Y+2, r24	; 0x02
     eda:	6b 83       	std	Y+3, r22	; 0x03

	uint8_t LED_Driver_Checker = NULL;
     edc:	19 82       	std	Y+1, r1	; 0x01
		if((pin_num >= NUM_OF_PINS_PER_PORT)) {
     ede:	8b 81       	ldd	r24, Y+3	; 0x03
     ee0:	88 30       	cpi	r24, 0x08	; 8
     ee2:	18 f0       	brcs	.+6      	; 0xeea <LED_Toggle+0x1e>
			LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	89 83       	std	Y+1, r24	; 0x01
     ee8:	0b c0       	rjmp	.+22     	; 0xf00 <LED_Toggle+0x34>
		}
		else if((port_num >= NUM_OF_PORTS)) {
     eea:	8a 81       	ldd	r24, Y+2	; 0x02
     eec:	84 30       	cpi	r24, 0x04	; 4
     eee:	18 f0       	brcs	.+6      	; 0xef6 <LED_Toggle+0x2a>
			LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
     ef0:	82 e0       	ldi	r24, 0x02	; 2
     ef2:	89 83       	std	Y+1, r24	; 0x01
     ef4:	05 c0       	rjmp	.+10     	; 0xf00 <LED_Toggle+0x34>
		}
		else {
			/* Setup the pin direction as required */
			GPIO_togglePin(port_num, pin_num);
     ef6:	8a 81       	ldd	r24, Y+2	; 0x02
     ef8:	6b 81       	ldd	r22, Y+3	; 0x03
     efa:	0e 94 77 0f 	call	0x1eee	; 0x1eee <GPIO_togglePin>
			LED_Driver_Checker = LED_OK;
     efe:	19 82       	std	Y+1, r1	; 0x01
		}
		return LED_Driver_Checker;
     f00:	89 81       	ldd	r24, Y+1	; 0x01
}
     f02:	0f 90       	pop	r0
     f04:	0f 90       	pop	r0
     f06:	0f 90       	pop	r0
     f08:	cf 91       	pop	r28
     f0a:	df 91       	pop	r29
     f0c:	08 95       	ret

00000f0e <LCD_Init>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void LCD_Init(void) {
     f0e:	df 93       	push	r29
     f10:	cf 93       	push	r28
     f12:	cd b7       	in	r28, 0x3d	; 61
     f14:	de b7       	in	r29, 0x3e	; 62
     f16:	2e 97       	sbiw	r28, 0x0e	; 14
     f18:	0f b6       	in	r0, 0x3f	; 63
     f1a:	f8 94       	cli
     f1c:	de bf       	out	0x3e, r29	; 62
     f1e:	0f be       	out	0x3f, r0	; 63
     f20:	cd bf       	out	0x3d, r28	; 61
		// Initialize RS Pin
		GPIO_setupPinDirection(LCD_INIT_PORT, LCD_RS, PIN_OUTPUT);
     f22:	83 e0       	ldi	r24, 0x03	; 3
     f24:	64 e0       	ldi	r22, 0x04	; 4
     f26:	41 e0       	ldi	r20, 0x01	; 1
     f28:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <GPIO_setupPinDirection>

		// Initialize Enable Pin
		GPIO_setupPinDirection(LCD_INIT_PORT, LCD_ENABLE, PIN_OUTPUT);
     f2c:	83 e0       	ldi	r24, 0x03	; 3
     f2e:	65 e0       	ldi	r22, 0x05	; 5
     f30:	41 e0       	ldi	r20, 0x01	; 1
     f32:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <GPIO_setupPinDirection>

		// Setup the port and pins for the data pins inside the LCD
		GPIO_setupPortDirection(LCD_DATA_PORT, PORT_OUTPUT);
     f36:	82 e0       	ldi	r24, 0x02	; 2
     f38:	6f ef       	ldi	r22, 0xFF	; 255
     f3a:	0e 94 a7 10 	call	0x214e	; 0x214e <GPIO_setupPortDirection>
		GPIO_setupPinDirection(LCD_DATA_PORT, PIN_0, PIN_OUTPUT);
     f3e:	82 e0       	ldi	r24, 0x02	; 2
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	41 e0       	ldi	r20, 0x01	; 1
     f44:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <GPIO_setupPinDirection>
		GPIO_setupPinDirection(LCD_DATA_PORT, PIN_1, PIN_OUTPUT);
     f48:	82 e0       	ldi	r24, 0x02	; 2
     f4a:	61 e0       	ldi	r22, 0x01	; 1
     f4c:	41 e0       	ldi	r20, 0x01	; 1
     f4e:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <GPIO_setupPinDirection>
		GPIO_setupPinDirection(LCD_DATA_PORT, PIN_2, PIN_OUTPUT);
     f52:	82 e0       	ldi	r24, 0x02	; 2
     f54:	62 e0       	ldi	r22, 0x02	; 2
     f56:	41 e0       	ldi	r20, 0x01	; 1
     f58:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <GPIO_setupPinDirection>
		GPIO_setupPinDirection(LCD_DATA_PORT, PIN_3, PIN_OUTPUT);
     f5c:	82 e0       	ldi	r24, 0x02	; 2
     f5e:	63 e0       	ldi	r22, 0x03	; 3
     f60:	41 e0       	ldi	r20, 0x01	; 1
     f62:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <GPIO_setupPinDirection>
		GPIO_setupPinDirection(LCD_DATA_PORT, PIN_4, PIN_OUTPUT);
     f66:	82 e0       	ldi	r24, 0x02	; 2
     f68:	64 e0       	ldi	r22, 0x04	; 4
     f6a:	41 e0       	ldi	r20, 0x01	; 1
     f6c:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <GPIO_setupPinDirection>
		GPIO_setupPinDirection(LCD_DATA_PORT, PIN_5, PIN_OUTPUT);
     f70:	82 e0       	ldi	r24, 0x02	; 2
     f72:	65 e0       	ldi	r22, 0x05	; 5
     f74:	41 e0       	ldi	r20, 0x01	; 1
     f76:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <GPIO_setupPinDirection>
		GPIO_setupPinDirection(LCD_DATA_PORT, PIN_6, PIN_OUTPUT);
     f7a:	82 e0       	ldi	r24, 0x02	; 2
     f7c:	66 e0       	ldi	r22, 0x06	; 6
     f7e:	41 e0       	ldi	r20, 0x01	; 1
     f80:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <GPIO_setupPinDirection>
		GPIO_setupPinDirection(LCD_DATA_PORT, PIN_7, PIN_OUTPUT);
     f84:	82 e0       	ldi	r24, 0x02	; 2
     f86:	67 e0       	ldi	r22, 0x07	; 7
     f88:	41 e0       	ldi	r20, 0x01	; 1
     f8a:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <GPIO_setupPinDirection>
     f8e:	80 e0       	ldi	r24, 0x00	; 0
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	a8 ec       	ldi	r26, 0xC8	; 200
     f94:	b1 e4       	ldi	r27, 0x41	; 65
     f96:	8b 87       	std	Y+11, r24	; 0x0b
     f98:	9c 87       	std	Y+12, r25	; 0x0c
     f9a:	ad 87       	std	Y+13, r26	; 0x0d
     f9c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f9e:	6b 85       	ldd	r22, Y+11	; 0x0b
     fa0:	7c 85       	ldd	r23, Y+12	; 0x0c
     fa2:	8d 85       	ldd	r24, Y+13	; 0x0d
     fa4:	9e 85       	ldd	r25, Y+14	; 0x0e
     fa6:	20 e0       	ldi	r18, 0x00	; 0
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	4a e7       	ldi	r20, 0x7A	; 122
     fac:	53 e4       	ldi	r21, 0x43	; 67
     fae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fb2:	dc 01       	movw	r26, r24
     fb4:	cb 01       	movw	r24, r22
     fb6:	8f 83       	std	Y+7, r24	; 0x07
     fb8:	98 87       	std	Y+8, r25	; 0x08
     fba:	a9 87       	std	Y+9, r26	; 0x09
     fbc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fbe:	6f 81       	ldd	r22, Y+7	; 0x07
     fc0:	78 85       	ldd	r23, Y+8	; 0x08
     fc2:	89 85       	ldd	r24, Y+9	; 0x09
     fc4:	9a 85       	ldd	r25, Y+10	; 0x0a
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	40 e8       	ldi	r20, 0x80	; 128
     fcc:	5f e3       	ldi	r21, 0x3F	; 63
     fce:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     fd2:	88 23       	and	r24, r24
     fd4:	2c f4       	brge	.+10     	; 0xfe0 <LCD_Init+0xd2>
		__ticks = 1;
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	9e 83       	std	Y+6, r25	; 0x06
     fdc:	8d 83       	std	Y+5, r24	; 0x05
     fde:	3f c0       	rjmp	.+126    	; 0x105e <LCD_Init+0x150>
	else if (__tmp > 65535)
     fe0:	6f 81       	ldd	r22, Y+7	; 0x07
     fe2:	78 85       	ldd	r23, Y+8	; 0x08
     fe4:	89 85       	ldd	r24, Y+9	; 0x09
     fe6:	9a 85       	ldd	r25, Y+10	; 0x0a
     fe8:	20 e0       	ldi	r18, 0x00	; 0
     fea:	3f ef       	ldi	r19, 0xFF	; 255
     fec:	4f e7       	ldi	r20, 0x7F	; 127
     fee:	57 e4       	ldi	r21, 0x47	; 71
     ff0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     ff4:	18 16       	cp	r1, r24
     ff6:	4c f5       	brge	.+82     	; 0x104a <LCD_Init+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ff8:	6b 85       	ldd	r22, Y+11	; 0x0b
     ffa:	7c 85       	ldd	r23, Y+12	; 0x0c
     ffc:	8d 85       	ldd	r24, Y+13	; 0x0d
     ffe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1000:	20 e0       	ldi	r18, 0x00	; 0
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	40 e2       	ldi	r20, 0x20	; 32
    1006:	51 e4       	ldi	r21, 0x41	; 65
    1008:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    100c:	dc 01       	movw	r26, r24
    100e:	cb 01       	movw	r24, r22
    1010:	bc 01       	movw	r22, r24
    1012:	cd 01       	movw	r24, r26
    1014:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1018:	dc 01       	movw	r26, r24
    101a:	cb 01       	movw	r24, r22
    101c:	9e 83       	std	Y+6, r25	; 0x06
    101e:	8d 83       	std	Y+5, r24	; 0x05
    1020:	0f c0       	rjmp	.+30     	; 0x1040 <LCD_Init+0x132>
    1022:	89 e1       	ldi	r24, 0x19	; 25
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	9c 83       	std	Y+4, r25	; 0x04
    1028:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    102a:	8b 81       	ldd	r24, Y+3	; 0x03
    102c:	9c 81       	ldd	r25, Y+4	; 0x04
    102e:	01 97       	sbiw	r24, 0x01	; 1
    1030:	f1 f7       	brne	.-4      	; 0x102e <LCD_Init+0x120>
    1032:	9c 83       	std	Y+4, r25	; 0x04
    1034:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1036:	8d 81       	ldd	r24, Y+5	; 0x05
    1038:	9e 81       	ldd	r25, Y+6	; 0x06
    103a:	01 97       	sbiw	r24, 0x01	; 1
    103c:	9e 83       	std	Y+6, r25	; 0x06
    103e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1040:	8d 81       	ldd	r24, Y+5	; 0x05
    1042:	9e 81       	ldd	r25, Y+6	; 0x06
    1044:	00 97       	sbiw	r24, 0x00	; 0
    1046:	69 f7       	brne	.-38     	; 0x1022 <LCD_Init+0x114>
    1048:	14 c0       	rjmp	.+40     	; 0x1072 <LCD_Init+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    104a:	6f 81       	ldd	r22, Y+7	; 0x07
    104c:	78 85       	ldd	r23, Y+8	; 0x08
    104e:	89 85       	ldd	r24, Y+9	; 0x09
    1050:	9a 85       	ldd	r25, Y+10	; 0x0a
    1052:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1056:	dc 01       	movw	r26, r24
    1058:	cb 01       	movw	r24, r22
    105a:	9e 83       	std	Y+6, r25	; 0x06
    105c:	8d 83       	std	Y+5, r24	; 0x05
    105e:	8d 81       	ldd	r24, Y+5	; 0x05
    1060:	9e 81       	ldd	r25, Y+6	; 0x06
    1062:	9a 83       	std	Y+2, r25	; 0x02
    1064:	89 83       	std	Y+1, r24	; 0x01
    1066:	89 81       	ldd	r24, Y+1	; 0x01
    1068:	9a 81       	ldd	r25, Y+2	; 0x02
    106a:	01 97       	sbiw	r24, 0x01	; 1
    106c:	f1 f7       	brne	.-4      	; 0x106a <LCD_Init+0x15c>
    106e:	9a 83       	std	Y+2, r25	; 0x02
    1070:	89 83       	std	Y+1, r24	; 0x01

		// LCD Power On Internal Delay is 15 mS
		_delay_ms(25);

		//Initializing Sending Commands
		LCD_sendCommand(LCD_TWO_LINE_EIGHT_BIT);
    1072:	88 e3       	ldi	r24, 0x38	; 56
    1074:	0e 94 4b 08 	call	0x1096	; 0x1096 <LCD_sendCommand>
		LCD_sendCommand(LCD_CURSOR_OFF);
    1078:	8c e0       	ldi	r24, 0x0C	; 12
    107a:	0e 94 4b 08 	call	0x1096	; 0x1096 <LCD_sendCommand>
		LCD_sendCommand(LCD_CLEAR_DISPLAY);
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	0e 94 4b 08 	call	0x1096	; 0x1096 <LCD_sendCommand>
}
    1084:	2e 96       	adiw	r28, 0x0e	; 14
    1086:	0f b6       	in	r0, 0x3f	; 63
    1088:	f8 94       	cli
    108a:	de bf       	out	0x3e, r29	; 62
    108c:	0f be       	out	0x3f, r0	; 63
    108e:	cd bf       	out	0x3d, r28	; 61
    1090:	cf 91       	pop	r28
    1092:	df 91       	pop	r29
    1094:	08 95       	ret

00001096 <LCD_sendCommand>:


void LCD_sendCommand(uint8 command) {
    1096:	df 93       	push	r29
    1098:	cf 93       	push	r28
    109a:	cd b7       	in	r28, 0x3d	; 61
    109c:	de b7       	in	r29, 0x3e	; 62
    109e:	e9 97       	sbiw	r28, 0x39	; 57
    10a0:	0f b6       	in	r0, 0x3f	; 63
    10a2:	f8 94       	cli
    10a4:	de bf       	out	0x3e, r29	; 62
    10a6:	0f be       	out	0x3f, r0	; 63
    10a8:	cd bf       	out	0x3d, r28	; 61
    10aa:	89 af       	std	Y+57, r24	; 0x39
	// Set RS Pin to '0'
	GPIO_writePin(LCD_INIT_PORT, LCD_RS, LOGIC_LOW);
    10ac:	83 e0       	ldi	r24, 0x03	; 3
    10ae:	64 e0       	ldi	r22, 0x04	; 4
    10b0:	40 e0       	ldi	r20, 0x00	; 0
    10b2:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <GPIO_writePin>
    10b6:	80 e0       	ldi	r24, 0x00	; 0
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	a0 e8       	ldi	r26, 0x80	; 128
    10bc:	bf e3       	ldi	r27, 0x3F	; 63
    10be:	8d ab       	std	Y+53, r24	; 0x35
    10c0:	9e ab       	std	Y+54, r25	; 0x36
    10c2:	af ab       	std	Y+55, r26	; 0x37
    10c4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10c6:	6d a9       	ldd	r22, Y+53	; 0x35
    10c8:	7e a9       	ldd	r23, Y+54	; 0x36
    10ca:	8f a9       	ldd	r24, Y+55	; 0x37
    10cc:	98 ad       	ldd	r25, Y+56	; 0x38
    10ce:	20 e0       	ldi	r18, 0x00	; 0
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	4a e7       	ldi	r20, 0x7A	; 122
    10d4:	53 e4       	ldi	r21, 0x43	; 67
    10d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10da:	dc 01       	movw	r26, r24
    10dc:	cb 01       	movw	r24, r22
    10de:	89 ab       	std	Y+49, r24	; 0x31
    10e0:	9a ab       	std	Y+50, r25	; 0x32
    10e2:	ab ab       	std	Y+51, r26	; 0x33
    10e4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    10e6:	69 a9       	ldd	r22, Y+49	; 0x31
    10e8:	7a a9       	ldd	r23, Y+50	; 0x32
    10ea:	8b a9       	ldd	r24, Y+51	; 0x33
    10ec:	9c a9       	ldd	r25, Y+52	; 0x34
    10ee:	20 e0       	ldi	r18, 0x00	; 0
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	40 e8       	ldi	r20, 0x80	; 128
    10f4:	5f e3       	ldi	r21, 0x3F	; 63
    10f6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    10fa:	88 23       	and	r24, r24
    10fc:	2c f4       	brge	.+10     	; 0x1108 <LCD_sendCommand+0x72>
		__ticks = 1;
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	98 ab       	std	Y+48, r25	; 0x30
    1104:	8f a7       	std	Y+47, r24	; 0x2f
    1106:	3f c0       	rjmp	.+126    	; 0x1186 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1108:	69 a9       	ldd	r22, Y+49	; 0x31
    110a:	7a a9       	ldd	r23, Y+50	; 0x32
    110c:	8b a9       	ldd	r24, Y+51	; 0x33
    110e:	9c a9       	ldd	r25, Y+52	; 0x34
    1110:	20 e0       	ldi	r18, 0x00	; 0
    1112:	3f ef       	ldi	r19, 0xFF	; 255
    1114:	4f e7       	ldi	r20, 0x7F	; 127
    1116:	57 e4       	ldi	r21, 0x47	; 71
    1118:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    111c:	18 16       	cp	r1, r24
    111e:	4c f5       	brge	.+82     	; 0x1172 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1120:	6d a9       	ldd	r22, Y+53	; 0x35
    1122:	7e a9       	ldd	r23, Y+54	; 0x36
    1124:	8f a9       	ldd	r24, Y+55	; 0x37
    1126:	98 ad       	ldd	r25, Y+56	; 0x38
    1128:	20 e0       	ldi	r18, 0x00	; 0
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	40 e2       	ldi	r20, 0x20	; 32
    112e:	51 e4       	ldi	r21, 0x41	; 65
    1130:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1134:	dc 01       	movw	r26, r24
    1136:	cb 01       	movw	r24, r22
    1138:	bc 01       	movw	r22, r24
    113a:	cd 01       	movw	r24, r26
    113c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1140:	dc 01       	movw	r26, r24
    1142:	cb 01       	movw	r24, r22
    1144:	98 ab       	std	Y+48, r25	; 0x30
    1146:	8f a7       	std	Y+47, r24	; 0x2f
    1148:	0f c0       	rjmp	.+30     	; 0x1168 <LCD_sendCommand+0xd2>
    114a:	89 e1       	ldi	r24, 0x19	; 25
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	9e a7       	std	Y+46, r25	; 0x2e
    1150:	8d a7       	std	Y+45, r24	; 0x2d
    1152:	8d a5       	ldd	r24, Y+45	; 0x2d
    1154:	9e a5       	ldd	r25, Y+46	; 0x2e
    1156:	01 97       	sbiw	r24, 0x01	; 1
    1158:	f1 f7       	brne	.-4      	; 0x1156 <LCD_sendCommand+0xc0>
    115a:	9e a7       	std	Y+46, r25	; 0x2e
    115c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    115e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1160:	98 a9       	ldd	r25, Y+48	; 0x30
    1162:	01 97       	sbiw	r24, 0x01	; 1
    1164:	98 ab       	std	Y+48, r25	; 0x30
    1166:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1168:	8f a5       	ldd	r24, Y+47	; 0x2f
    116a:	98 a9       	ldd	r25, Y+48	; 0x30
    116c:	00 97       	sbiw	r24, 0x00	; 0
    116e:	69 f7       	brne	.-38     	; 0x114a <LCD_sendCommand+0xb4>
    1170:	14 c0       	rjmp	.+40     	; 0x119a <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1172:	69 a9       	ldd	r22, Y+49	; 0x31
    1174:	7a a9       	ldd	r23, Y+50	; 0x32
    1176:	8b a9       	ldd	r24, Y+51	; 0x33
    1178:	9c a9       	ldd	r25, Y+52	; 0x34
    117a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    117e:	dc 01       	movw	r26, r24
    1180:	cb 01       	movw	r24, r22
    1182:	98 ab       	std	Y+48, r25	; 0x30
    1184:	8f a7       	std	Y+47, r24	; 0x2f
    1186:	8f a5       	ldd	r24, Y+47	; 0x2f
    1188:	98 a9       	ldd	r25, Y+48	; 0x30
    118a:	9c a7       	std	Y+44, r25	; 0x2c
    118c:	8b a7       	std	Y+43, r24	; 0x2b
    118e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1190:	9c a5       	ldd	r25, Y+44	; 0x2c
    1192:	01 97       	sbiw	r24, 0x01	; 1
    1194:	f1 f7       	brne	.-4      	; 0x1192 <LCD_sendCommand+0xfc>
    1196:	9c a7       	std	Y+44, r25	; 0x2c
    1198:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	// Set Enable Pin to '1'
	GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
    119a:	83 e0       	ldi	r24, 0x03	; 3
    119c:	65 e0       	ldi	r22, 0x05	; 5
    119e:	41 e0       	ldi	r20, 0x01	; 1
    11a0:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <GPIO_writePin>
    11a4:	80 e0       	ldi	r24, 0x00	; 0
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	a0 e8       	ldi	r26, 0x80	; 128
    11aa:	bf e3       	ldi	r27, 0x3F	; 63
    11ac:	8f a3       	std	Y+39, r24	; 0x27
    11ae:	98 a7       	std	Y+40, r25	; 0x28
    11b0:	a9 a7       	std	Y+41, r26	; 0x29
    11b2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11b4:	6f a1       	ldd	r22, Y+39	; 0x27
    11b6:	78 a5       	ldd	r23, Y+40	; 0x28
    11b8:	89 a5       	ldd	r24, Y+41	; 0x29
    11ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	4a e7       	ldi	r20, 0x7A	; 122
    11c2:	53 e4       	ldi	r21, 0x43	; 67
    11c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11c8:	dc 01       	movw	r26, r24
    11ca:	cb 01       	movw	r24, r22
    11cc:	8b a3       	std	Y+35, r24	; 0x23
    11ce:	9c a3       	std	Y+36, r25	; 0x24
    11d0:	ad a3       	std	Y+37, r26	; 0x25
    11d2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    11d4:	6b a1       	ldd	r22, Y+35	; 0x23
    11d6:	7c a1       	ldd	r23, Y+36	; 0x24
    11d8:	8d a1       	ldd	r24, Y+37	; 0x25
    11da:	9e a1       	ldd	r25, Y+38	; 0x26
    11dc:	20 e0       	ldi	r18, 0x00	; 0
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	40 e8       	ldi	r20, 0x80	; 128
    11e2:	5f e3       	ldi	r21, 0x3F	; 63
    11e4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    11e8:	88 23       	and	r24, r24
    11ea:	2c f4       	brge	.+10     	; 0x11f6 <LCD_sendCommand+0x160>
		__ticks = 1;
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	9a a3       	std	Y+34, r25	; 0x22
    11f2:	89 a3       	std	Y+33, r24	; 0x21
    11f4:	3f c0       	rjmp	.+126    	; 0x1274 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    11f6:	6b a1       	ldd	r22, Y+35	; 0x23
    11f8:	7c a1       	ldd	r23, Y+36	; 0x24
    11fa:	8d a1       	ldd	r24, Y+37	; 0x25
    11fc:	9e a1       	ldd	r25, Y+38	; 0x26
    11fe:	20 e0       	ldi	r18, 0x00	; 0
    1200:	3f ef       	ldi	r19, 0xFF	; 255
    1202:	4f e7       	ldi	r20, 0x7F	; 127
    1204:	57 e4       	ldi	r21, 0x47	; 71
    1206:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    120a:	18 16       	cp	r1, r24
    120c:	4c f5       	brge	.+82     	; 0x1260 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    120e:	6f a1       	ldd	r22, Y+39	; 0x27
    1210:	78 a5       	ldd	r23, Y+40	; 0x28
    1212:	89 a5       	ldd	r24, Y+41	; 0x29
    1214:	9a a5       	ldd	r25, Y+42	; 0x2a
    1216:	20 e0       	ldi	r18, 0x00	; 0
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	40 e2       	ldi	r20, 0x20	; 32
    121c:	51 e4       	ldi	r21, 0x41	; 65
    121e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1222:	dc 01       	movw	r26, r24
    1224:	cb 01       	movw	r24, r22
    1226:	bc 01       	movw	r22, r24
    1228:	cd 01       	movw	r24, r26
    122a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    122e:	dc 01       	movw	r26, r24
    1230:	cb 01       	movw	r24, r22
    1232:	9a a3       	std	Y+34, r25	; 0x22
    1234:	89 a3       	std	Y+33, r24	; 0x21
    1236:	0f c0       	rjmp	.+30     	; 0x1256 <LCD_sendCommand+0x1c0>
    1238:	89 e1       	ldi	r24, 0x19	; 25
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	98 a3       	std	Y+32, r25	; 0x20
    123e:	8f 8f       	std	Y+31, r24	; 0x1f
    1240:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1242:	98 a1       	ldd	r25, Y+32	; 0x20
    1244:	01 97       	sbiw	r24, 0x01	; 1
    1246:	f1 f7       	brne	.-4      	; 0x1244 <LCD_sendCommand+0x1ae>
    1248:	98 a3       	std	Y+32, r25	; 0x20
    124a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    124c:	89 a1       	ldd	r24, Y+33	; 0x21
    124e:	9a a1       	ldd	r25, Y+34	; 0x22
    1250:	01 97       	sbiw	r24, 0x01	; 1
    1252:	9a a3       	std	Y+34, r25	; 0x22
    1254:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1256:	89 a1       	ldd	r24, Y+33	; 0x21
    1258:	9a a1       	ldd	r25, Y+34	; 0x22
    125a:	00 97       	sbiw	r24, 0x00	; 0
    125c:	69 f7       	brne	.-38     	; 0x1238 <LCD_sendCommand+0x1a2>
    125e:	14 c0       	rjmp	.+40     	; 0x1288 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1260:	6b a1       	ldd	r22, Y+35	; 0x23
    1262:	7c a1       	ldd	r23, Y+36	; 0x24
    1264:	8d a1       	ldd	r24, Y+37	; 0x25
    1266:	9e a1       	ldd	r25, Y+38	; 0x26
    1268:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    126c:	dc 01       	movw	r26, r24
    126e:	cb 01       	movw	r24, r22
    1270:	9a a3       	std	Y+34, r25	; 0x22
    1272:	89 a3       	std	Y+33, r24	; 0x21
    1274:	89 a1       	ldd	r24, Y+33	; 0x21
    1276:	9a a1       	ldd	r25, Y+34	; 0x22
    1278:	9e 8f       	std	Y+30, r25	; 0x1e
    127a:	8d 8f       	std	Y+29, r24	; 0x1d
    127c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    127e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1280:	01 97       	sbiw	r24, 0x01	; 1
    1282:	f1 f7       	brne	.-4      	; 0x1280 <LCD_sendCommand+0x1ea>
    1284:	9e 8f       	std	Y+30, r25	; 0x1e
    1286:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	// Send command
	GPIO_writePort(LCD_DATA_PORT, command);
    1288:	82 e0       	ldi	r24, 0x02	; 2
    128a:	69 ad       	ldd	r22, Y+57	; 0x39
    128c:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <GPIO_writePort>
    1290:	80 e0       	ldi	r24, 0x00	; 0
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	a0 e8       	ldi	r26, 0x80	; 128
    1296:	bf e3       	ldi	r27, 0x3F	; 63
    1298:	89 8f       	std	Y+25, r24	; 0x19
    129a:	9a 8f       	std	Y+26, r25	; 0x1a
    129c:	ab 8f       	std	Y+27, r26	; 0x1b
    129e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12a0:	69 8d       	ldd	r22, Y+25	; 0x19
    12a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12a8:	20 e0       	ldi	r18, 0x00	; 0
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	4a e7       	ldi	r20, 0x7A	; 122
    12ae:	53 e4       	ldi	r21, 0x43	; 67
    12b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12b4:	dc 01       	movw	r26, r24
    12b6:	cb 01       	movw	r24, r22
    12b8:	8d 8b       	std	Y+21, r24	; 0x15
    12ba:	9e 8b       	std	Y+22, r25	; 0x16
    12bc:	af 8b       	std	Y+23, r26	; 0x17
    12be:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    12c0:	6d 89       	ldd	r22, Y+21	; 0x15
    12c2:	7e 89       	ldd	r23, Y+22	; 0x16
    12c4:	8f 89       	ldd	r24, Y+23	; 0x17
    12c6:	98 8d       	ldd	r25, Y+24	; 0x18
    12c8:	20 e0       	ldi	r18, 0x00	; 0
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	40 e8       	ldi	r20, 0x80	; 128
    12ce:	5f e3       	ldi	r21, 0x3F	; 63
    12d0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    12d4:	88 23       	and	r24, r24
    12d6:	2c f4       	brge	.+10     	; 0x12e2 <LCD_sendCommand+0x24c>
		__ticks = 1;
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	9c 8b       	std	Y+20, r25	; 0x14
    12de:	8b 8b       	std	Y+19, r24	; 0x13
    12e0:	3f c0       	rjmp	.+126    	; 0x1360 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    12e2:	6d 89       	ldd	r22, Y+21	; 0x15
    12e4:	7e 89       	ldd	r23, Y+22	; 0x16
    12e6:	8f 89       	ldd	r24, Y+23	; 0x17
    12e8:	98 8d       	ldd	r25, Y+24	; 0x18
    12ea:	20 e0       	ldi	r18, 0x00	; 0
    12ec:	3f ef       	ldi	r19, 0xFF	; 255
    12ee:	4f e7       	ldi	r20, 0x7F	; 127
    12f0:	57 e4       	ldi	r21, 0x47	; 71
    12f2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    12f6:	18 16       	cp	r1, r24
    12f8:	4c f5       	brge	.+82     	; 0x134c <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12fa:	69 8d       	ldd	r22, Y+25	; 0x19
    12fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1300:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1302:	20 e0       	ldi	r18, 0x00	; 0
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	40 e2       	ldi	r20, 0x20	; 32
    1308:	51 e4       	ldi	r21, 0x41	; 65
    130a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    130e:	dc 01       	movw	r26, r24
    1310:	cb 01       	movw	r24, r22
    1312:	bc 01       	movw	r22, r24
    1314:	cd 01       	movw	r24, r26
    1316:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    131a:	dc 01       	movw	r26, r24
    131c:	cb 01       	movw	r24, r22
    131e:	9c 8b       	std	Y+20, r25	; 0x14
    1320:	8b 8b       	std	Y+19, r24	; 0x13
    1322:	0f c0       	rjmp	.+30     	; 0x1342 <LCD_sendCommand+0x2ac>
    1324:	89 e1       	ldi	r24, 0x19	; 25
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	9a 8b       	std	Y+18, r25	; 0x12
    132a:	89 8b       	std	Y+17, r24	; 0x11
    132c:	89 89       	ldd	r24, Y+17	; 0x11
    132e:	9a 89       	ldd	r25, Y+18	; 0x12
    1330:	01 97       	sbiw	r24, 0x01	; 1
    1332:	f1 f7       	brne	.-4      	; 0x1330 <LCD_sendCommand+0x29a>
    1334:	9a 8b       	std	Y+18, r25	; 0x12
    1336:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1338:	8b 89       	ldd	r24, Y+19	; 0x13
    133a:	9c 89       	ldd	r25, Y+20	; 0x14
    133c:	01 97       	sbiw	r24, 0x01	; 1
    133e:	9c 8b       	std	Y+20, r25	; 0x14
    1340:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1342:	8b 89       	ldd	r24, Y+19	; 0x13
    1344:	9c 89       	ldd	r25, Y+20	; 0x14
    1346:	00 97       	sbiw	r24, 0x00	; 0
    1348:	69 f7       	brne	.-38     	; 0x1324 <LCD_sendCommand+0x28e>
    134a:	14 c0       	rjmp	.+40     	; 0x1374 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    134c:	6d 89       	ldd	r22, Y+21	; 0x15
    134e:	7e 89       	ldd	r23, Y+22	; 0x16
    1350:	8f 89       	ldd	r24, Y+23	; 0x17
    1352:	98 8d       	ldd	r25, Y+24	; 0x18
    1354:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1358:	dc 01       	movw	r26, r24
    135a:	cb 01       	movw	r24, r22
    135c:	9c 8b       	std	Y+20, r25	; 0x14
    135e:	8b 8b       	std	Y+19, r24	; 0x13
    1360:	8b 89       	ldd	r24, Y+19	; 0x13
    1362:	9c 89       	ldd	r25, Y+20	; 0x14
    1364:	98 8b       	std	Y+16, r25	; 0x10
    1366:	8f 87       	std	Y+15, r24	; 0x0f
    1368:	8f 85       	ldd	r24, Y+15	; 0x0f
    136a:	98 89       	ldd	r25, Y+16	; 0x10
    136c:	01 97       	sbiw	r24, 0x01	; 1
    136e:	f1 f7       	brne	.-4      	; 0x136c <LCD_sendCommand+0x2d6>
    1370:	98 8b       	std	Y+16, r25	; 0x10
    1372:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	// Set Enable Pin to '0'
	GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
    1374:	83 e0       	ldi	r24, 0x03	; 3
    1376:	65 e0       	ldi	r22, 0x05	; 5
    1378:	40 e0       	ldi	r20, 0x00	; 0
    137a:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <GPIO_writePin>
    137e:	80 e0       	ldi	r24, 0x00	; 0
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	a0 e8       	ldi	r26, 0x80	; 128
    1384:	bf e3       	ldi	r27, 0x3F	; 63
    1386:	8b 87       	std	Y+11, r24	; 0x0b
    1388:	9c 87       	std	Y+12, r25	; 0x0c
    138a:	ad 87       	std	Y+13, r26	; 0x0d
    138c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    138e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1390:	7c 85       	ldd	r23, Y+12	; 0x0c
    1392:	8d 85       	ldd	r24, Y+13	; 0x0d
    1394:	9e 85       	ldd	r25, Y+14	; 0x0e
    1396:	20 e0       	ldi	r18, 0x00	; 0
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	4a e7       	ldi	r20, 0x7A	; 122
    139c:	53 e4       	ldi	r21, 0x43	; 67
    139e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13a2:	dc 01       	movw	r26, r24
    13a4:	cb 01       	movw	r24, r22
    13a6:	8f 83       	std	Y+7, r24	; 0x07
    13a8:	98 87       	std	Y+8, r25	; 0x08
    13aa:	a9 87       	std	Y+9, r26	; 0x09
    13ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13ae:	6f 81       	ldd	r22, Y+7	; 0x07
    13b0:	78 85       	ldd	r23, Y+8	; 0x08
    13b2:	89 85       	ldd	r24, Y+9	; 0x09
    13b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    13b6:	20 e0       	ldi	r18, 0x00	; 0
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	40 e8       	ldi	r20, 0x80	; 128
    13bc:	5f e3       	ldi	r21, 0x3F	; 63
    13be:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    13c2:	88 23       	and	r24, r24
    13c4:	2c f4       	brge	.+10     	; 0x13d0 <LCD_sendCommand+0x33a>
		__ticks = 1;
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	9e 83       	std	Y+6, r25	; 0x06
    13cc:	8d 83       	std	Y+5, r24	; 0x05
    13ce:	3f c0       	rjmp	.+126    	; 0x144e <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    13d0:	6f 81       	ldd	r22, Y+7	; 0x07
    13d2:	78 85       	ldd	r23, Y+8	; 0x08
    13d4:	89 85       	ldd	r24, Y+9	; 0x09
    13d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    13d8:	20 e0       	ldi	r18, 0x00	; 0
    13da:	3f ef       	ldi	r19, 0xFF	; 255
    13dc:	4f e7       	ldi	r20, 0x7F	; 127
    13de:	57 e4       	ldi	r21, 0x47	; 71
    13e0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    13e4:	18 16       	cp	r1, r24
    13e6:	4c f5       	brge	.+82     	; 0x143a <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    13ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    13ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    13ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    13f0:	20 e0       	ldi	r18, 0x00	; 0
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	40 e2       	ldi	r20, 0x20	; 32
    13f6:	51 e4       	ldi	r21, 0x41	; 65
    13f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13fc:	dc 01       	movw	r26, r24
    13fe:	cb 01       	movw	r24, r22
    1400:	bc 01       	movw	r22, r24
    1402:	cd 01       	movw	r24, r26
    1404:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1408:	dc 01       	movw	r26, r24
    140a:	cb 01       	movw	r24, r22
    140c:	9e 83       	std	Y+6, r25	; 0x06
    140e:	8d 83       	std	Y+5, r24	; 0x05
    1410:	0f c0       	rjmp	.+30     	; 0x1430 <LCD_sendCommand+0x39a>
    1412:	89 e1       	ldi	r24, 0x19	; 25
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	9c 83       	std	Y+4, r25	; 0x04
    1418:	8b 83       	std	Y+3, r24	; 0x03
    141a:	8b 81       	ldd	r24, Y+3	; 0x03
    141c:	9c 81       	ldd	r25, Y+4	; 0x04
    141e:	01 97       	sbiw	r24, 0x01	; 1
    1420:	f1 f7       	brne	.-4      	; 0x141e <LCD_sendCommand+0x388>
    1422:	9c 83       	std	Y+4, r25	; 0x04
    1424:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1426:	8d 81       	ldd	r24, Y+5	; 0x05
    1428:	9e 81       	ldd	r25, Y+6	; 0x06
    142a:	01 97       	sbiw	r24, 0x01	; 1
    142c:	9e 83       	std	Y+6, r25	; 0x06
    142e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1430:	8d 81       	ldd	r24, Y+5	; 0x05
    1432:	9e 81       	ldd	r25, Y+6	; 0x06
    1434:	00 97       	sbiw	r24, 0x00	; 0
    1436:	69 f7       	brne	.-38     	; 0x1412 <LCD_sendCommand+0x37c>
    1438:	14 c0       	rjmp	.+40     	; 0x1462 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    143a:	6f 81       	ldd	r22, Y+7	; 0x07
    143c:	78 85       	ldd	r23, Y+8	; 0x08
    143e:	89 85       	ldd	r24, Y+9	; 0x09
    1440:	9a 85       	ldd	r25, Y+10	; 0x0a
    1442:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1446:	dc 01       	movw	r26, r24
    1448:	cb 01       	movw	r24, r22
    144a:	9e 83       	std	Y+6, r25	; 0x06
    144c:	8d 83       	std	Y+5, r24	; 0x05
    144e:	8d 81       	ldd	r24, Y+5	; 0x05
    1450:	9e 81       	ldd	r25, Y+6	; 0x06
    1452:	9a 83       	std	Y+2, r25	; 0x02
    1454:	89 83       	std	Y+1, r24	; 0x01
    1456:	89 81       	ldd	r24, Y+1	; 0x01
    1458:	9a 81       	ldd	r25, Y+2	; 0x02
    145a:	01 97       	sbiw	r24, 0x01	; 1
    145c:	f1 f7       	brne	.-4      	; 0x145a <LCD_sendCommand+0x3c4>
    145e:	9a 83       	std	Y+2, r25	; 0x02
    1460:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1462:	e9 96       	adiw	r28, 0x39	; 57
    1464:	0f b6       	in	r0, 0x3f	; 63
    1466:	f8 94       	cli
    1468:	de bf       	out	0x3e, r29	; 62
    146a:	0f be       	out	0x3f, r0	; 63
    146c:	cd bf       	out	0x3d, r28	; 61
    146e:	cf 91       	pop	r28
    1470:	df 91       	pop	r29
    1472:	08 95       	ret

00001474 <LCD_displayCharacters>:


void LCD_displayCharacters(uint8 data) {
    1474:	df 93       	push	r29
    1476:	cf 93       	push	r28
    1478:	cd b7       	in	r28, 0x3d	; 61
    147a:	de b7       	in	r29, 0x3e	; 62
    147c:	e9 97       	sbiw	r28, 0x39	; 57
    147e:	0f b6       	in	r0, 0x3f	; 63
    1480:	f8 94       	cli
    1482:	de bf       	out	0x3e, r29	; 62
    1484:	0f be       	out	0x3f, r0	; 63
    1486:	cd bf       	out	0x3d, r28	; 61
    1488:	89 af       	std	Y+57, r24	; 0x39
	// Set RS Pin to '1'
	GPIO_writePin(LCD_INIT_PORT, LCD_RS, LOGIC_HIGH);
    148a:	83 e0       	ldi	r24, 0x03	; 3
    148c:	64 e0       	ldi	r22, 0x04	; 4
    148e:	41 e0       	ldi	r20, 0x01	; 1
    1490:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <GPIO_writePin>
    1494:	80 e0       	ldi	r24, 0x00	; 0
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	a0 e8       	ldi	r26, 0x80	; 128
    149a:	bf e3       	ldi	r27, 0x3F	; 63
    149c:	8d ab       	std	Y+53, r24	; 0x35
    149e:	9e ab       	std	Y+54, r25	; 0x36
    14a0:	af ab       	std	Y+55, r26	; 0x37
    14a2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14a4:	6d a9       	ldd	r22, Y+53	; 0x35
    14a6:	7e a9       	ldd	r23, Y+54	; 0x36
    14a8:	8f a9       	ldd	r24, Y+55	; 0x37
    14aa:	98 ad       	ldd	r25, Y+56	; 0x38
    14ac:	20 e0       	ldi	r18, 0x00	; 0
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	4a e7       	ldi	r20, 0x7A	; 122
    14b2:	53 e4       	ldi	r21, 0x43	; 67
    14b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14b8:	dc 01       	movw	r26, r24
    14ba:	cb 01       	movw	r24, r22
    14bc:	89 ab       	std	Y+49, r24	; 0x31
    14be:	9a ab       	std	Y+50, r25	; 0x32
    14c0:	ab ab       	std	Y+51, r26	; 0x33
    14c2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    14c4:	69 a9       	ldd	r22, Y+49	; 0x31
    14c6:	7a a9       	ldd	r23, Y+50	; 0x32
    14c8:	8b a9       	ldd	r24, Y+51	; 0x33
    14ca:	9c a9       	ldd	r25, Y+52	; 0x34
    14cc:	20 e0       	ldi	r18, 0x00	; 0
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	40 e8       	ldi	r20, 0x80	; 128
    14d2:	5f e3       	ldi	r21, 0x3F	; 63
    14d4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    14d8:	88 23       	and	r24, r24
    14da:	2c f4       	brge	.+10     	; 0x14e6 <LCD_displayCharacters+0x72>
		__ticks = 1;
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	98 ab       	std	Y+48, r25	; 0x30
    14e2:	8f a7       	std	Y+47, r24	; 0x2f
    14e4:	3f c0       	rjmp	.+126    	; 0x1564 <LCD_displayCharacters+0xf0>
	else if (__tmp > 65535)
    14e6:	69 a9       	ldd	r22, Y+49	; 0x31
    14e8:	7a a9       	ldd	r23, Y+50	; 0x32
    14ea:	8b a9       	ldd	r24, Y+51	; 0x33
    14ec:	9c a9       	ldd	r25, Y+52	; 0x34
    14ee:	20 e0       	ldi	r18, 0x00	; 0
    14f0:	3f ef       	ldi	r19, 0xFF	; 255
    14f2:	4f e7       	ldi	r20, 0x7F	; 127
    14f4:	57 e4       	ldi	r21, 0x47	; 71
    14f6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    14fa:	18 16       	cp	r1, r24
    14fc:	4c f5       	brge	.+82     	; 0x1550 <LCD_displayCharacters+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14fe:	6d a9       	ldd	r22, Y+53	; 0x35
    1500:	7e a9       	ldd	r23, Y+54	; 0x36
    1502:	8f a9       	ldd	r24, Y+55	; 0x37
    1504:	98 ad       	ldd	r25, Y+56	; 0x38
    1506:	20 e0       	ldi	r18, 0x00	; 0
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	40 e2       	ldi	r20, 0x20	; 32
    150c:	51 e4       	ldi	r21, 0x41	; 65
    150e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1512:	dc 01       	movw	r26, r24
    1514:	cb 01       	movw	r24, r22
    1516:	bc 01       	movw	r22, r24
    1518:	cd 01       	movw	r24, r26
    151a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    151e:	dc 01       	movw	r26, r24
    1520:	cb 01       	movw	r24, r22
    1522:	98 ab       	std	Y+48, r25	; 0x30
    1524:	8f a7       	std	Y+47, r24	; 0x2f
    1526:	0f c0       	rjmp	.+30     	; 0x1546 <LCD_displayCharacters+0xd2>
    1528:	89 e1       	ldi	r24, 0x19	; 25
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	9e a7       	std	Y+46, r25	; 0x2e
    152e:	8d a7       	std	Y+45, r24	; 0x2d
    1530:	8d a5       	ldd	r24, Y+45	; 0x2d
    1532:	9e a5       	ldd	r25, Y+46	; 0x2e
    1534:	01 97       	sbiw	r24, 0x01	; 1
    1536:	f1 f7       	brne	.-4      	; 0x1534 <LCD_displayCharacters+0xc0>
    1538:	9e a7       	std	Y+46, r25	; 0x2e
    153a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    153c:	8f a5       	ldd	r24, Y+47	; 0x2f
    153e:	98 a9       	ldd	r25, Y+48	; 0x30
    1540:	01 97       	sbiw	r24, 0x01	; 1
    1542:	98 ab       	std	Y+48, r25	; 0x30
    1544:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1546:	8f a5       	ldd	r24, Y+47	; 0x2f
    1548:	98 a9       	ldd	r25, Y+48	; 0x30
    154a:	00 97       	sbiw	r24, 0x00	; 0
    154c:	69 f7       	brne	.-38     	; 0x1528 <LCD_displayCharacters+0xb4>
    154e:	14 c0       	rjmp	.+40     	; 0x1578 <LCD_displayCharacters+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1550:	69 a9       	ldd	r22, Y+49	; 0x31
    1552:	7a a9       	ldd	r23, Y+50	; 0x32
    1554:	8b a9       	ldd	r24, Y+51	; 0x33
    1556:	9c a9       	ldd	r25, Y+52	; 0x34
    1558:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    155c:	dc 01       	movw	r26, r24
    155e:	cb 01       	movw	r24, r22
    1560:	98 ab       	std	Y+48, r25	; 0x30
    1562:	8f a7       	std	Y+47, r24	; 0x2f
    1564:	8f a5       	ldd	r24, Y+47	; 0x2f
    1566:	98 a9       	ldd	r25, Y+48	; 0x30
    1568:	9c a7       	std	Y+44, r25	; 0x2c
    156a:	8b a7       	std	Y+43, r24	; 0x2b
    156c:	8b a5       	ldd	r24, Y+43	; 0x2b
    156e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1570:	01 97       	sbiw	r24, 0x01	; 1
    1572:	f1 f7       	brne	.-4      	; 0x1570 <LCD_displayCharacters+0xfc>
    1574:	9c a7       	std	Y+44, r25	; 0x2c
    1576:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	// Set Enable Pin to '1'
	GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
    1578:	83 e0       	ldi	r24, 0x03	; 3
    157a:	65 e0       	ldi	r22, 0x05	; 5
    157c:	41 e0       	ldi	r20, 0x01	; 1
    157e:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <GPIO_writePin>
    1582:	80 e0       	ldi	r24, 0x00	; 0
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	a0 e8       	ldi	r26, 0x80	; 128
    1588:	bf e3       	ldi	r27, 0x3F	; 63
    158a:	8f a3       	std	Y+39, r24	; 0x27
    158c:	98 a7       	std	Y+40, r25	; 0x28
    158e:	a9 a7       	std	Y+41, r26	; 0x29
    1590:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1592:	6f a1       	ldd	r22, Y+39	; 0x27
    1594:	78 a5       	ldd	r23, Y+40	; 0x28
    1596:	89 a5       	ldd	r24, Y+41	; 0x29
    1598:	9a a5       	ldd	r25, Y+42	; 0x2a
    159a:	20 e0       	ldi	r18, 0x00	; 0
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	4a e7       	ldi	r20, 0x7A	; 122
    15a0:	53 e4       	ldi	r21, 0x43	; 67
    15a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15a6:	dc 01       	movw	r26, r24
    15a8:	cb 01       	movw	r24, r22
    15aa:	8b a3       	std	Y+35, r24	; 0x23
    15ac:	9c a3       	std	Y+36, r25	; 0x24
    15ae:	ad a3       	std	Y+37, r26	; 0x25
    15b0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    15b2:	6b a1       	ldd	r22, Y+35	; 0x23
    15b4:	7c a1       	ldd	r23, Y+36	; 0x24
    15b6:	8d a1       	ldd	r24, Y+37	; 0x25
    15b8:	9e a1       	ldd	r25, Y+38	; 0x26
    15ba:	20 e0       	ldi	r18, 0x00	; 0
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	40 e8       	ldi	r20, 0x80	; 128
    15c0:	5f e3       	ldi	r21, 0x3F	; 63
    15c2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    15c6:	88 23       	and	r24, r24
    15c8:	2c f4       	brge	.+10     	; 0x15d4 <LCD_displayCharacters+0x160>
		__ticks = 1;
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	9a a3       	std	Y+34, r25	; 0x22
    15d0:	89 a3       	std	Y+33, r24	; 0x21
    15d2:	3f c0       	rjmp	.+126    	; 0x1652 <LCD_displayCharacters+0x1de>
	else if (__tmp > 65535)
    15d4:	6b a1       	ldd	r22, Y+35	; 0x23
    15d6:	7c a1       	ldd	r23, Y+36	; 0x24
    15d8:	8d a1       	ldd	r24, Y+37	; 0x25
    15da:	9e a1       	ldd	r25, Y+38	; 0x26
    15dc:	20 e0       	ldi	r18, 0x00	; 0
    15de:	3f ef       	ldi	r19, 0xFF	; 255
    15e0:	4f e7       	ldi	r20, 0x7F	; 127
    15e2:	57 e4       	ldi	r21, 0x47	; 71
    15e4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    15e8:	18 16       	cp	r1, r24
    15ea:	4c f5       	brge	.+82     	; 0x163e <LCD_displayCharacters+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15ec:	6f a1       	ldd	r22, Y+39	; 0x27
    15ee:	78 a5       	ldd	r23, Y+40	; 0x28
    15f0:	89 a5       	ldd	r24, Y+41	; 0x29
    15f2:	9a a5       	ldd	r25, Y+42	; 0x2a
    15f4:	20 e0       	ldi	r18, 0x00	; 0
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	40 e2       	ldi	r20, 0x20	; 32
    15fa:	51 e4       	ldi	r21, 0x41	; 65
    15fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1600:	dc 01       	movw	r26, r24
    1602:	cb 01       	movw	r24, r22
    1604:	bc 01       	movw	r22, r24
    1606:	cd 01       	movw	r24, r26
    1608:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    160c:	dc 01       	movw	r26, r24
    160e:	cb 01       	movw	r24, r22
    1610:	9a a3       	std	Y+34, r25	; 0x22
    1612:	89 a3       	std	Y+33, r24	; 0x21
    1614:	0f c0       	rjmp	.+30     	; 0x1634 <LCD_displayCharacters+0x1c0>
    1616:	89 e1       	ldi	r24, 0x19	; 25
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	98 a3       	std	Y+32, r25	; 0x20
    161c:	8f 8f       	std	Y+31, r24	; 0x1f
    161e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1620:	98 a1       	ldd	r25, Y+32	; 0x20
    1622:	01 97       	sbiw	r24, 0x01	; 1
    1624:	f1 f7       	brne	.-4      	; 0x1622 <LCD_displayCharacters+0x1ae>
    1626:	98 a3       	std	Y+32, r25	; 0x20
    1628:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    162a:	89 a1       	ldd	r24, Y+33	; 0x21
    162c:	9a a1       	ldd	r25, Y+34	; 0x22
    162e:	01 97       	sbiw	r24, 0x01	; 1
    1630:	9a a3       	std	Y+34, r25	; 0x22
    1632:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1634:	89 a1       	ldd	r24, Y+33	; 0x21
    1636:	9a a1       	ldd	r25, Y+34	; 0x22
    1638:	00 97       	sbiw	r24, 0x00	; 0
    163a:	69 f7       	brne	.-38     	; 0x1616 <LCD_displayCharacters+0x1a2>
    163c:	14 c0       	rjmp	.+40     	; 0x1666 <LCD_displayCharacters+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    163e:	6b a1       	ldd	r22, Y+35	; 0x23
    1640:	7c a1       	ldd	r23, Y+36	; 0x24
    1642:	8d a1       	ldd	r24, Y+37	; 0x25
    1644:	9e a1       	ldd	r25, Y+38	; 0x26
    1646:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    164a:	dc 01       	movw	r26, r24
    164c:	cb 01       	movw	r24, r22
    164e:	9a a3       	std	Y+34, r25	; 0x22
    1650:	89 a3       	std	Y+33, r24	; 0x21
    1652:	89 a1       	ldd	r24, Y+33	; 0x21
    1654:	9a a1       	ldd	r25, Y+34	; 0x22
    1656:	9e 8f       	std	Y+30, r25	; 0x1e
    1658:	8d 8f       	std	Y+29, r24	; 0x1d
    165a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    165c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    165e:	01 97       	sbiw	r24, 0x01	; 1
    1660:	f1 f7       	brne	.-4      	; 0x165e <LCD_displayCharacters+0x1ea>
    1662:	9e 8f       	std	Y+30, r25	; 0x1e
    1664:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	// Send command
	GPIO_writePort(LCD_DATA_PORT, data);
    1666:	82 e0       	ldi	r24, 0x02	; 2
    1668:	69 ad       	ldd	r22, Y+57	; 0x39
    166a:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <GPIO_writePort>
    166e:	80 e0       	ldi	r24, 0x00	; 0
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	a0 e8       	ldi	r26, 0x80	; 128
    1674:	bf e3       	ldi	r27, 0x3F	; 63
    1676:	89 8f       	std	Y+25, r24	; 0x19
    1678:	9a 8f       	std	Y+26, r25	; 0x1a
    167a:	ab 8f       	std	Y+27, r26	; 0x1b
    167c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    167e:	69 8d       	ldd	r22, Y+25	; 0x19
    1680:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1682:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1684:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1686:	20 e0       	ldi	r18, 0x00	; 0
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	4a e7       	ldi	r20, 0x7A	; 122
    168c:	53 e4       	ldi	r21, 0x43	; 67
    168e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1692:	dc 01       	movw	r26, r24
    1694:	cb 01       	movw	r24, r22
    1696:	8d 8b       	std	Y+21, r24	; 0x15
    1698:	9e 8b       	std	Y+22, r25	; 0x16
    169a:	af 8b       	std	Y+23, r26	; 0x17
    169c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    169e:	6d 89       	ldd	r22, Y+21	; 0x15
    16a0:	7e 89       	ldd	r23, Y+22	; 0x16
    16a2:	8f 89       	ldd	r24, Y+23	; 0x17
    16a4:	98 8d       	ldd	r25, Y+24	; 0x18
    16a6:	20 e0       	ldi	r18, 0x00	; 0
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	40 e8       	ldi	r20, 0x80	; 128
    16ac:	5f e3       	ldi	r21, 0x3F	; 63
    16ae:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    16b2:	88 23       	and	r24, r24
    16b4:	2c f4       	brge	.+10     	; 0x16c0 <LCD_displayCharacters+0x24c>
		__ticks = 1;
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	9c 8b       	std	Y+20, r25	; 0x14
    16bc:	8b 8b       	std	Y+19, r24	; 0x13
    16be:	3f c0       	rjmp	.+126    	; 0x173e <LCD_displayCharacters+0x2ca>
	else if (__tmp > 65535)
    16c0:	6d 89       	ldd	r22, Y+21	; 0x15
    16c2:	7e 89       	ldd	r23, Y+22	; 0x16
    16c4:	8f 89       	ldd	r24, Y+23	; 0x17
    16c6:	98 8d       	ldd	r25, Y+24	; 0x18
    16c8:	20 e0       	ldi	r18, 0x00	; 0
    16ca:	3f ef       	ldi	r19, 0xFF	; 255
    16cc:	4f e7       	ldi	r20, 0x7F	; 127
    16ce:	57 e4       	ldi	r21, 0x47	; 71
    16d0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    16d4:	18 16       	cp	r1, r24
    16d6:	4c f5       	brge	.+82     	; 0x172a <LCD_displayCharacters+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16d8:	69 8d       	ldd	r22, Y+25	; 0x19
    16da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	40 e2       	ldi	r20, 0x20	; 32
    16e6:	51 e4       	ldi	r21, 0x41	; 65
    16e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16ec:	dc 01       	movw	r26, r24
    16ee:	cb 01       	movw	r24, r22
    16f0:	bc 01       	movw	r22, r24
    16f2:	cd 01       	movw	r24, r26
    16f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16f8:	dc 01       	movw	r26, r24
    16fa:	cb 01       	movw	r24, r22
    16fc:	9c 8b       	std	Y+20, r25	; 0x14
    16fe:	8b 8b       	std	Y+19, r24	; 0x13
    1700:	0f c0       	rjmp	.+30     	; 0x1720 <LCD_displayCharacters+0x2ac>
    1702:	89 e1       	ldi	r24, 0x19	; 25
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	9a 8b       	std	Y+18, r25	; 0x12
    1708:	89 8b       	std	Y+17, r24	; 0x11
    170a:	89 89       	ldd	r24, Y+17	; 0x11
    170c:	9a 89       	ldd	r25, Y+18	; 0x12
    170e:	01 97       	sbiw	r24, 0x01	; 1
    1710:	f1 f7       	brne	.-4      	; 0x170e <LCD_displayCharacters+0x29a>
    1712:	9a 8b       	std	Y+18, r25	; 0x12
    1714:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1716:	8b 89       	ldd	r24, Y+19	; 0x13
    1718:	9c 89       	ldd	r25, Y+20	; 0x14
    171a:	01 97       	sbiw	r24, 0x01	; 1
    171c:	9c 8b       	std	Y+20, r25	; 0x14
    171e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1720:	8b 89       	ldd	r24, Y+19	; 0x13
    1722:	9c 89       	ldd	r25, Y+20	; 0x14
    1724:	00 97       	sbiw	r24, 0x00	; 0
    1726:	69 f7       	brne	.-38     	; 0x1702 <LCD_displayCharacters+0x28e>
    1728:	14 c0       	rjmp	.+40     	; 0x1752 <LCD_displayCharacters+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    172a:	6d 89       	ldd	r22, Y+21	; 0x15
    172c:	7e 89       	ldd	r23, Y+22	; 0x16
    172e:	8f 89       	ldd	r24, Y+23	; 0x17
    1730:	98 8d       	ldd	r25, Y+24	; 0x18
    1732:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1736:	dc 01       	movw	r26, r24
    1738:	cb 01       	movw	r24, r22
    173a:	9c 8b       	std	Y+20, r25	; 0x14
    173c:	8b 8b       	std	Y+19, r24	; 0x13
    173e:	8b 89       	ldd	r24, Y+19	; 0x13
    1740:	9c 89       	ldd	r25, Y+20	; 0x14
    1742:	98 8b       	std	Y+16, r25	; 0x10
    1744:	8f 87       	std	Y+15, r24	; 0x0f
    1746:	8f 85       	ldd	r24, Y+15	; 0x0f
    1748:	98 89       	ldd	r25, Y+16	; 0x10
    174a:	01 97       	sbiw	r24, 0x01	; 1
    174c:	f1 f7       	brne	.-4      	; 0x174a <LCD_displayCharacters+0x2d6>
    174e:	98 8b       	std	Y+16, r25	; 0x10
    1750:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	// Set Enable Pin to '0'
	GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
    1752:	83 e0       	ldi	r24, 0x03	; 3
    1754:	65 e0       	ldi	r22, 0x05	; 5
    1756:	40 e0       	ldi	r20, 0x00	; 0
    1758:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <GPIO_writePin>
    175c:	80 e0       	ldi	r24, 0x00	; 0
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	a0 e8       	ldi	r26, 0x80	; 128
    1762:	bf e3       	ldi	r27, 0x3F	; 63
    1764:	8b 87       	std	Y+11, r24	; 0x0b
    1766:	9c 87       	std	Y+12, r25	; 0x0c
    1768:	ad 87       	std	Y+13, r26	; 0x0d
    176a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    176c:	6b 85       	ldd	r22, Y+11	; 0x0b
    176e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1770:	8d 85       	ldd	r24, Y+13	; 0x0d
    1772:	9e 85       	ldd	r25, Y+14	; 0x0e
    1774:	20 e0       	ldi	r18, 0x00	; 0
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	4a e7       	ldi	r20, 0x7A	; 122
    177a:	53 e4       	ldi	r21, 0x43	; 67
    177c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1780:	dc 01       	movw	r26, r24
    1782:	cb 01       	movw	r24, r22
    1784:	8f 83       	std	Y+7, r24	; 0x07
    1786:	98 87       	std	Y+8, r25	; 0x08
    1788:	a9 87       	std	Y+9, r26	; 0x09
    178a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    178c:	6f 81       	ldd	r22, Y+7	; 0x07
    178e:	78 85       	ldd	r23, Y+8	; 0x08
    1790:	89 85       	ldd	r24, Y+9	; 0x09
    1792:	9a 85       	ldd	r25, Y+10	; 0x0a
    1794:	20 e0       	ldi	r18, 0x00	; 0
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	40 e8       	ldi	r20, 0x80	; 128
    179a:	5f e3       	ldi	r21, 0x3F	; 63
    179c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    17a0:	88 23       	and	r24, r24
    17a2:	2c f4       	brge	.+10     	; 0x17ae <LCD_displayCharacters+0x33a>
		__ticks = 1;
    17a4:	81 e0       	ldi	r24, 0x01	; 1
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	9e 83       	std	Y+6, r25	; 0x06
    17aa:	8d 83       	std	Y+5, r24	; 0x05
    17ac:	3f c0       	rjmp	.+126    	; 0x182c <LCD_displayCharacters+0x3b8>
	else if (__tmp > 65535)
    17ae:	6f 81       	ldd	r22, Y+7	; 0x07
    17b0:	78 85       	ldd	r23, Y+8	; 0x08
    17b2:	89 85       	ldd	r24, Y+9	; 0x09
    17b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    17b6:	20 e0       	ldi	r18, 0x00	; 0
    17b8:	3f ef       	ldi	r19, 0xFF	; 255
    17ba:	4f e7       	ldi	r20, 0x7F	; 127
    17bc:	57 e4       	ldi	r21, 0x47	; 71
    17be:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    17c2:	18 16       	cp	r1, r24
    17c4:	4c f5       	brge	.+82     	; 0x1818 <LCD_displayCharacters+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    17c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    17ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    17cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    17ce:	20 e0       	ldi	r18, 0x00	; 0
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	40 e2       	ldi	r20, 0x20	; 32
    17d4:	51 e4       	ldi	r21, 0x41	; 65
    17d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17da:	dc 01       	movw	r26, r24
    17dc:	cb 01       	movw	r24, r22
    17de:	bc 01       	movw	r22, r24
    17e0:	cd 01       	movw	r24, r26
    17e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17e6:	dc 01       	movw	r26, r24
    17e8:	cb 01       	movw	r24, r22
    17ea:	9e 83       	std	Y+6, r25	; 0x06
    17ec:	8d 83       	std	Y+5, r24	; 0x05
    17ee:	0f c0       	rjmp	.+30     	; 0x180e <LCD_displayCharacters+0x39a>
    17f0:	89 e1       	ldi	r24, 0x19	; 25
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	9c 83       	std	Y+4, r25	; 0x04
    17f6:	8b 83       	std	Y+3, r24	; 0x03
    17f8:	8b 81       	ldd	r24, Y+3	; 0x03
    17fa:	9c 81       	ldd	r25, Y+4	; 0x04
    17fc:	01 97       	sbiw	r24, 0x01	; 1
    17fe:	f1 f7       	brne	.-4      	; 0x17fc <LCD_displayCharacters+0x388>
    1800:	9c 83       	std	Y+4, r25	; 0x04
    1802:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1804:	8d 81       	ldd	r24, Y+5	; 0x05
    1806:	9e 81       	ldd	r25, Y+6	; 0x06
    1808:	01 97       	sbiw	r24, 0x01	; 1
    180a:	9e 83       	std	Y+6, r25	; 0x06
    180c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    180e:	8d 81       	ldd	r24, Y+5	; 0x05
    1810:	9e 81       	ldd	r25, Y+6	; 0x06
    1812:	00 97       	sbiw	r24, 0x00	; 0
    1814:	69 f7       	brne	.-38     	; 0x17f0 <LCD_displayCharacters+0x37c>
    1816:	14 c0       	rjmp	.+40     	; 0x1840 <LCD_displayCharacters+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1818:	6f 81       	ldd	r22, Y+7	; 0x07
    181a:	78 85       	ldd	r23, Y+8	; 0x08
    181c:	89 85       	ldd	r24, Y+9	; 0x09
    181e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1820:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1824:	dc 01       	movw	r26, r24
    1826:	cb 01       	movw	r24, r22
    1828:	9e 83       	std	Y+6, r25	; 0x06
    182a:	8d 83       	std	Y+5, r24	; 0x05
    182c:	8d 81       	ldd	r24, Y+5	; 0x05
    182e:	9e 81       	ldd	r25, Y+6	; 0x06
    1830:	9a 83       	std	Y+2, r25	; 0x02
    1832:	89 83       	std	Y+1, r24	; 0x01
    1834:	89 81       	ldd	r24, Y+1	; 0x01
    1836:	9a 81       	ldd	r25, Y+2	; 0x02
    1838:	01 97       	sbiw	r24, 0x01	; 1
    183a:	f1 f7       	brne	.-4      	; 0x1838 <LCD_displayCharacters+0x3c4>
    183c:	9a 83       	std	Y+2, r25	; 0x02
    183e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1840:	e9 96       	adiw	r28, 0x39	; 57
    1842:	0f b6       	in	r0, 0x3f	; 63
    1844:	f8 94       	cli
    1846:	de bf       	out	0x3e, r29	; 62
    1848:	0f be       	out	0x3f, r0	; 63
    184a:	cd bf       	out	0x3d, r28	; 61
    184c:	cf 91       	pop	r28
    184e:	df 91       	pop	r29
    1850:	08 95       	ret

00001852 <LCD_displayString>:


void LCD_displayString(const char *str) {
    1852:	df 93       	push	r29
    1854:	cf 93       	push	r28
    1856:	00 d0       	rcall	.+0      	; 0x1858 <LCD_displayString+0x6>
    1858:	0f 92       	push	r0
    185a:	cd b7       	in	r28, 0x3d	; 61
    185c:	de b7       	in	r29, 0x3e	; 62
    185e:	9b 83       	std	Y+3, r25	; 0x03
    1860:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1862:	19 82       	std	Y+1, r1	; 0x01
    1864:	0e c0       	rjmp	.+28     	; 0x1882 <LCD_displayString+0x30>
	while(str[i] != '\0') {
		LCD_displayCharacters(str[i]);
    1866:	89 81       	ldd	r24, Y+1	; 0x01
    1868:	28 2f       	mov	r18, r24
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	8a 81       	ldd	r24, Y+2	; 0x02
    186e:	9b 81       	ldd	r25, Y+3	; 0x03
    1870:	fc 01       	movw	r30, r24
    1872:	e2 0f       	add	r30, r18
    1874:	f3 1f       	adc	r31, r19
    1876:	80 81       	ld	r24, Z
    1878:	0e 94 3a 0a 	call	0x1474	; 0x1474 <LCD_displayCharacters>
		i++;
    187c:	89 81       	ldd	r24, Y+1	; 0x01
    187e:	8f 5f       	subi	r24, 0xFF	; 255
    1880:	89 83       	std	Y+1, r24	; 0x01
}


void LCD_displayString(const char *str) {
	uint8 i = 0;
	while(str[i] != '\0') {
    1882:	89 81       	ldd	r24, Y+1	; 0x01
    1884:	28 2f       	mov	r18, r24
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	8a 81       	ldd	r24, Y+2	; 0x02
    188a:	9b 81       	ldd	r25, Y+3	; 0x03
    188c:	fc 01       	movw	r30, r24
    188e:	e2 0f       	add	r30, r18
    1890:	f3 1f       	adc	r31, r19
    1892:	80 81       	ld	r24, Z
    1894:	88 23       	and	r24, r24
    1896:	39 f7       	brne	.-50     	; 0x1866 <LCD_displayString+0x14>
	}
	/*
	for (int i = 0 ; i < strlen(str) ; i++) {
		LCD_displayCharacters(str[i]);
	}*/
}
    1898:	0f 90       	pop	r0
    189a:	0f 90       	pop	r0
    189c:	0f 90       	pop	r0
    189e:	cf 91       	pop	r28
    18a0:	df 91       	pop	r29
    18a2:	08 95       	ret

000018a4 <LCD_moveCursor>:


void LCD_moveCursor(uint8 row, uint8 col) {
    18a4:	df 93       	push	r29
    18a6:	cf 93       	push	r28
    18a8:	00 d0       	rcall	.+0      	; 0x18aa <LCD_moveCursor+0x6>
    18aa:	00 d0       	rcall	.+0      	; 0x18ac <LCD_moveCursor+0x8>
    18ac:	0f 92       	push	r0
    18ae:	cd b7       	in	r28, 0x3d	; 61
    18b0:	de b7       	in	r29, 0x3e	; 62
    18b2:	8a 83       	std	Y+2, r24	; 0x02
    18b4:	6b 83       	std	Y+3, r22	; 0x03

	uint8 LCD_MEMORY_ADDRESS;

	// Calculate the required address in the LCD DDRAM checking
	// The location of the cursor originally on which line
	switch(row) {
    18b6:	8a 81       	ldd	r24, Y+2	; 0x02
    18b8:	28 2f       	mov	r18, r24
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	3d 83       	std	Y+5, r19	; 0x05
    18be:	2c 83       	std	Y+4, r18	; 0x04
    18c0:	8c 81       	ldd	r24, Y+4	; 0x04
    18c2:	9d 81       	ldd	r25, Y+5	; 0x05
    18c4:	81 30       	cpi	r24, 0x01	; 1
    18c6:	91 05       	cpc	r25, r1
    18c8:	c1 f0       	breq	.+48     	; 0x18fa <LCD_moveCursor+0x56>
    18ca:	2c 81       	ldd	r18, Y+4	; 0x04
    18cc:	3d 81       	ldd	r19, Y+5	; 0x05
    18ce:	22 30       	cpi	r18, 0x02	; 2
    18d0:	31 05       	cpc	r19, r1
    18d2:	2c f4       	brge	.+10     	; 0x18de <LCD_moveCursor+0x3a>
    18d4:	8c 81       	ldd	r24, Y+4	; 0x04
    18d6:	9d 81       	ldd	r25, Y+5	; 0x05
    18d8:	00 97       	sbiw	r24, 0x00	; 0
    18da:	61 f0       	breq	.+24     	; 0x18f4 <LCD_moveCursor+0x50>
    18dc:	19 c0       	rjmp	.+50     	; 0x1910 <LCD_moveCursor+0x6c>
    18de:	2c 81       	ldd	r18, Y+4	; 0x04
    18e0:	3d 81       	ldd	r19, Y+5	; 0x05
    18e2:	22 30       	cpi	r18, 0x02	; 2
    18e4:	31 05       	cpc	r19, r1
    18e6:	69 f0       	breq	.+26     	; 0x1902 <LCD_moveCursor+0x5e>
    18e8:	8c 81       	ldd	r24, Y+4	; 0x04
    18ea:	9d 81       	ldd	r25, Y+5	; 0x05
    18ec:	83 30       	cpi	r24, 0x03	; 3
    18ee:	91 05       	cpc	r25, r1
    18f0:	61 f0       	breq	.+24     	; 0x190a <LCD_moveCursor+0x66>
    18f2:	0e c0       	rjmp	.+28     	; 0x1910 <LCD_moveCursor+0x6c>
		case 0:
			LCD_MEMORY_ADDRESS = col;
    18f4:	8b 81       	ldd	r24, Y+3	; 0x03
    18f6:	89 83       	std	Y+1, r24	; 0x01
    18f8:	0b c0       	rjmp	.+22     	; 0x1910 <LCD_moveCursor+0x6c>
				break;
		case 1:
			LCD_MEMORY_ADDRESS = col + 0x40;
    18fa:	8b 81       	ldd	r24, Y+3	; 0x03
    18fc:	80 5c       	subi	r24, 0xC0	; 192
    18fe:	89 83       	std	Y+1, r24	; 0x01
    1900:	07 c0       	rjmp	.+14     	; 0x1910 <LCD_moveCursor+0x6c>
				break;
		case 2:
			LCD_MEMORY_ADDRESS = col + 0x10;
    1902:	8b 81       	ldd	r24, Y+3	; 0x03
    1904:	80 5f       	subi	r24, 0xF0	; 240
    1906:	89 83       	std	Y+1, r24	; 0x01
    1908:	03 c0       	rjmp	.+6      	; 0x1910 <LCD_moveCursor+0x6c>
				break;
		case 3:
			LCD_MEMORY_ADDRESS = col + 0x50;
    190a:	8b 81       	ldd	r24, Y+3	; 0x03
    190c:	80 5b       	subi	r24, 0xB0	; 176
    190e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(LCD_MEMORY_ADDRESS | LCD_CURSOR_LOCATION);
    1910:	89 81       	ldd	r24, Y+1	; 0x01
    1912:	80 68       	ori	r24, 0x80	; 128
    1914:	0e 94 4b 08 	call	0x1096	; 0x1096 <LCD_sendCommand>
}
    1918:	0f 90       	pop	r0
    191a:	0f 90       	pop	r0
    191c:	0f 90       	pop	r0
    191e:	0f 90       	pop	r0
    1920:	0f 90       	pop	r0
    1922:	cf 91       	pop	r28
    1924:	df 91       	pop	r29
    1926:	08 95       	ret

00001928 <LCD_displayStringRowColumn>:


void LCD_displayStringRowColumn(uint8 row, uint8 col, const char *Str) {
    1928:	df 93       	push	r29
    192a:	cf 93       	push	r28
    192c:	00 d0       	rcall	.+0      	; 0x192e <LCD_displayStringRowColumn+0x6>
    192e:	00 d0       	rcall	.+0      	; 0x1930 <LCD_displayStringRowColumn+0x8>
    1930:	cd b7       	in	r28, 0x3d	; 61
    1932:	de b7       	in	r29, 0x3e	; 62
    1934:	89 83       	std	Y+1, r24	; 0x01
    1936:	6a 83       	std	Y+2, r22	; 0x02
    1938:	5c 83       	std	Y+4, r21	; 0x04
    193a:	4b 83       	std	Y+3, r20	; 0x03
	// Go to to the required LCD position
	LCD_moveCursor(row, col);
    193c:	89 81       	ldd	r24, Y+1	; 0x01
    193e:	6a 81       	ldd	r22, Y+2	; 0x02
    1940:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <LCD_moveCursor>

	// Display the string from the cursor
	LCD_displayString(Str);
    1944:	8b 81       	ldd	r24, Y+3	; 0x03
    1946:	9c 81       	ldd	r25, Y+4	; 0x04
    1948:	0e 94 29 0c 	call	0x1852	; 0x1852 <LCD_displayString>
}
    194c:	0f 90       	pop	r0
    194e:	0f 90       	pop	r0
    1950:	0f 90       	pop	r0
    1952:	0f 90       	pop	r0
    1954:	cf 91       	pop	r28
    1956:	df 91       	pop	r29
    1958:	08 95       	ret

0000195a <LCD_intgerToString>:

void LCD_intgerToString(int data) {
    195a:	df 93       	push	r29
    195c:	cf 93       	push	r28
    195e:	cd b7       	in	r28, 0x3d	; 61
    1960:	de b7       	in	r29, 0x3e	; 62
    1962:	62 97       	sbiw	r28, 0x12	; 18
    1964:	0f b6       	in	r0, 0x3f	; 63
    1966:	f8 94       	cli
    1968:	de bf       	out	0x3e, r29	; 62
    196a:	0f be       	out	0x3f, r0	; 63
    196c:	cd bf       	out	0x3d, r28	; 61
    196e:	9a 8b       	std	Y+18, r25	; 0x12
    1970:	89 8b       	std	Y+17, r24	; 0x11
	// A string to hold the ASCII values
	char buffer[16];

	// Converts data to its ASCII
	itoa(data, buffer, 10);
    1972:	89 89       	ldd	r24, Y+17	; 0x11
    1974:	9a 89       	ldd	r25, Y+18	; 0x12
    1976:	9e 01       	movw	r18, r28
    1978:	2f 5f       	subi	r18, 0xFF	; 255
    197a:	3f 4f       	sbci	r19, 0xFF	; 255
    197c:	b9 01       	movw	r22, r18
    197e:	4a e0       	ldi	r20, 0x0A	; 10
    1980:	50 e0       	ldi	r21, 0x00	; 0
    1982:	0e 94 2e 12 	call	0x245c	; 0x245c <itoa>

	// Display string with the results in the buffer
	LCD_displayString(buffer);
    1986:	ce 01       	movw	r24, r28
    1988:	01 96       	adiw	r24, 0x01	; 1
    198a:	0e 94 29 0c 	call	0x1852	; 0x1852 <LCD_displayString>
}
    198e:	62 96       	adiw	r28, 0x12	; 18
    1990:	0f b6       	in	r0, 0x3f	; 63
    1992:	f8 94       	cli
    1994:	de bf       	out	0x3e, r29	; 62
    1996:	0f be       	out	0x3f, r0	; 63
    1998:	cd bf       	out	0x3d, r28	; 61
    199a:	cf 91       	pop	r28
    199c:	df 91       	pop	r29
    199e:	08 95       	ret

000019a0 <LCD_clearScreen>:

void LCD_clearScreen(void) {
    19a0:	df 93       	push	r29
    19a2:	cf 93       	push	r28
    19a4:	cd b7       	in	r28, 0x3d	; 61
    19a6:	de b7       	in	r29, 0x3e	; 62
	// Clears the LCD Display
	LCD_sendCommand(LCD_CLEAR_DISPLAY);
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	0e 94 4b 08 	call	0x1096	; 0x1096 <LCD_sendCommand>
}
    19ae:	cf 91       	pop	r28
    19b0:	df 91       	pop	r29
    19b2:	08 95       	ret

000019b4 <KEYPAD_Init>:
	#endif

#endif /* STD_KEYPAD */


void KEYPAD_Init(void) {
    19b4:	df 93       	push	r29
    19b6:	cf 93       	push	r28
    19b8:	cd b7       	in	r28, 0x3d	; 61
    19ba:	de b7       	in	r29, 0x3e	; 62
		/* Setup PORT and PINS for for KEYPAD Rows*/
		GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN, PIN_INPUT);
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	64 e0       	ldi	r22, 0x04	; 4
    19c0:	40 e0       	ldi	r20, 0x00	; 0
    19c2:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <GPIO_setupPinDirection>
		GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN+1, PIN_INPUT);
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	65 e0       	ldi	r22, 0x05	; 5
    19ca:	40 e0       	ldi	r20, 0x00	; 0
    19cc:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <GPIO_setupPinDirection>
		GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN+2, PIN_INPUT);
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	66 e0       	ldi	r22, 0x06	; 6
    19d4:	40 e0       	ldi	r20, 0x00	; 0
    19d6:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <GPIO_setupPinDirection>
		GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN+3, PIN_INPUT);
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	67 e0       	ldi	r22, 0x07	; 7
    19de:	40 e0       	ldi	r20, 0x00	; 0
    19e0:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <GPIO_setupPinDirection>

		/* Setup PORT and PINS for for KEYPAD Columns*/
		GPIO_setupPinDirection(KEYPAD_COL_PORT, KEYPAD_FIRSTCOL_PIN, PIN_INPUT);
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	60 e0       	ldi	r22, 0x00	; 0
    19e8:	40 e0       	ldi	r20, 0x00	; 0
    19ea:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <GPIO_setupPinDirection>
		GPIO_setupPinDirection(KEYPAD_COL_PORT, KEYPAD_FIRSTCOL_PIN+1, PIN_INPUT);
    19ee:	81 e0       	ldi	r24, 0x01	; 1
    19f0:	61 e0       	ldi	r22, 0x01	; 1
    19f2:	40 e0       	ldi	r20, 0x00	; 0
    19f4:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <GPIO_setupPinDirection>
		GPIO_setupPinDirection(KEYPAD_COL_PORT, KEYPAD_FIRSTCOL_PIN+2, PIN_INPUT);
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	62 e0       	ldi	r22, 0x02	; 2
    19fc:	40 e0       	ldi	r20, 0x00	; 0
    19fe:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <GPIO_setupPinDirection>

		#if(KEYPAD_COL_NUM == 4)
			GPIO_setupPinDirection(KEYPAD_COL_PORT, KEYPAD_FIRSTCOL_PIN+3, PIN_INPUT);
		#endif
}
    1a02:	cf 91       	pop	r28
    1a04:	df 91       	pop	r29
    1a06:	08 95       	ret

00001a08 <KEYPAD_getPressedKey>:



uint8 KEYPAD_getPressedKey(void) {
    1a08:	df 93       	push	r29
    1a0a:	cf 93       	push	r28
    1a0c:	00 d0       	rcall	.+0      	; 0x1a0e <KEYPAD_getPressedKey+0x6>
    1a0e:	cd b7       	in	r28, 0x3d	; 61
    1a10:	de b7       	in	r29, 0x3e	; 62
	uint8 row, col;
	while(1) {
			for (row = 0 ; row < KEYPAD_ROW_NUM ; row++) {
    1a12:	1a 82       	std	Y+2, r1	; 0x02
    1a14:	3c c0       	rjmp	.+120    	; 0x1a8e <KEYPAD_getPressedKey+0x86>

				GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, PIN_OUTPUT);
    1a16:	8a 81       	ldd	r24, Y+2	; 0x02
    1a18:	98 2f       	mov	r25, r24
    1a1a:	9c 5f       	subi	r25, 0xFC	; 252
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	69 2f       	mov	r22, r25
    1a20:	41 e0       	ldi	r20, 0x01	; 1
    1a22:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <GPIO_setupPinDirection>

				/* Set/Clear the row output pin */
				GPIO_writePin(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, KEYPAD_BUTTON_PRESSED);
    1a26:	8a 81       	ldd	r24, Y+2	; 0x02
    1a28:	98 2f       	mov	r25, r24
    1a2a:	9c 5f       	subi	r25, 0xFC	; 252
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	69 2f       	mov	r22, r25
    1a30:	40 e0       	ldi	r20, 0x00	; 0
    1a32:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <GPIO_writePin>

				for (col = 0 ; col < KEYPAD_COL_NUM ; col++) {
    1a36:	19 82       	std	Y+1, r1	; 0x01
    1a38:	1c c0       	rjmp	.+56     	; 0x1a72 <KEYPAD_getPressedKey+0x6a>
					/* Check if the switch is pressed in this column */
					if(GPIO_readPin(KEYPAD_COL_PORT,KEYPAD_FIRSTCOL_PIN + col) == KEYPAD_BUTTON_PRESSED) {
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	69 81       	ldd	r22, Y+1	; 0x01
    1a3e:	0e 94 05 10 	call	0x200a	; 0x200a <GPIO_readPin>
    1a42:	88 23       	and	r24, r24
    1a44:	99 f4       	brne	.+38     	; 0x1a6c <KEYPAD_getPressedKey+0x64>
						#if (KEYPAD_COL_NUM == 3)
							#ifdef STD_KEYPAD
								return ( (row * KEYPAD_COL_NUM) + col + 1);
							#else
								return KEYPAD_4x3_adjustKeyNumber( (row * KEYPAD_COL_NUM) + col + 1);
    1a46:	8a 81       	ldd	r24, Y+2	; 0x02
    1a48:	28 2f       	mov	r18, r24
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	c9 01       	movw	r24, r18
    1a4e:	88 0f       	add	r24, r24
    1a50:	99 1f       	adc	r25, r25
    1a52:	82 0f       	add	r24, r18
    1a54:	93 1f       	adc	r25, r19
    1a56:	98 2f       	mov	r25, r24
    1a58:	89 81       	ldd	r24, Y+1	; 0x01
    1a5a:	89 0f       	add	r24, r25
    1a5c:	8f 5f       	subi	r24, 0xFF	; 255
    1a5e:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <KEYPAD_4x3_adjustKeyNumber>
					}
				}
				GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, PIN_INPUT);
			}
		}
}
    1a62:	0f 90       	pop	r0
    1a64:	0f 90       	pop	r0
    1a66:	cf 91       	pop	r28
    1a68:	df 91       	pop	r29
    1a6a:	08 95       	ret
				GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, PIN_OUTPUT);

				/* Set/Clear the row output pin */
				GPIO_writePin(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, KEYPAD_BUTTON_PRESSED);

				for (col = 0 ; col < KEYPAD_COL_NUM ; col++) {
    1a6c:	89 81       	ldd	r24, Y+1	; 0x01
    1a6e:	8f 5f       	subi	r24, 0xFF	; 255
    1a70:	89 83       	std	Y+1, r24	; 0x01
    1a72:	89 81       	ldd	r24, Y+1	; 0x01
    1a74:	83 30       	cpi	r24, 0x03	; 3
    1a76:	08 f3       	brcs	.-62     	; 0x1a3a <KEYPAD_getPressedKey+0x32>
								return KEYPAD_4x4_adjustKeyNumber( (row * KEYPAD_COL_NUM) + col + 1);
							#endif
						#endif
					}
				}
				GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, PIN_INPUT);
    1a78:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7a:	98 2f       	mov	r25, r24
    1a7c:	9c 5f       	subi	r25, 0xFC	; 252
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	69 2f       	mov	r22, r25
    1a82:	40 e0       	ldi	r20, 0x00	; 0
    1a84:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <GPIO_setupPinDirection>


uint8 KEYPAD_getPressedKey(void) {
	uint8 row, col;
	while(1) {
			for (row = 0 ; row < KEYPAD_ROW_NUM ; row++) {
    1a88:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8a:	8f 5f       	subi	r24, 0xFF	; 255
    1a8c:	8a 83       	std	Y+2, r24	; 0x02
    1a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a90:	84 30       	cpi	r24, 0x04	; 4
    1a92:	08 f2       	brcs	.-126    	; 0x1a16 <KEYPAD_getPressedKey+0xe>
    1a94:	be cf       	rjmp	.-132    	; 0x1a12 <KEYPAD_getPressedKey+0xa>

00001a96 <KEYPAD_4x3_adjustKeyNumber>:

#ifndef STANDARD_KEYPAD

	#if (KEYPAD_COL_NUM == 3)
	 // Update the keypad pressed button value with the correct one in keypad 4x3 shape
		static uint8 KEYPAD_4x3_adjustKeyNumber(uint8 button_number) {
    1a96:	df 93       	push	r29
    1a98:	cf 93       	push	r28
    1a9a:	00 d0       	rcall	.+0      	; 0x1a9c <KEYPAD_4x3_adjustKeyNumber+0x6>
    1a9c:	00 d0       	rcall	.+0      	; 0x1a9e <KEYPAD_4x3_adjustKeyNumber+0x8>
    1a9e:	cd b7       	in	r28, 0x3d	; 61
    1aa0:	de b7       	in	r29, 0x3e	; 62
    1aa2:	8a 83       	std	Y+2, r24	; 0x02
			uint8 keypad_button = 0;
    1aa4:	19 82       	std	Y+1, r1	; 0x01
			switch(button_number) {
    1aa6:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa8:	28 2f       	mov	r18, r24
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	3c 83       	std	Y+4, r19	; 0x04
    1aae:	2b 83       	std	Y+3, r18	; 0x03
    1ab0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab4:	8a 30       	cpi	r24, 0x0A	; 10
    1ab6:	91 05       	cpc	r25, r1
    1ab8:	81 f0       	breq	.+32     	; 0x1ada <KEYPAD_4x3_adjustKeyNumber+0x44>
    1aba:	2b 81       	ldd	r18, Y+3	; 0x03
    1abc:	3c 81       	ldd	r19, Y+4	; 0x04
    1abe:	2a 30       	cpi	r18, 0x0A	; 10
    1ac0:	31 05       	cpc	r19, r1
    1ac2:	9c f0       	brlt	.+38     	; 0x1aea <KEYPAD_4x3_adjustKeyNumber+0x54>
    1ac4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac8:	8b 30       	cpi	r24, 0x0B	; 11
    1aca:	91 05       	cpc	r25, r1
    1acc:	49 f0       	breq	.+18     	; 0x1ae0 <KEYPAD_4x3_adjustKeyNumber+0x4a>
    1ace:	2b 81       	ldd	r18, Y+3	; 0x03
    1ad0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ad2:	2c 30       	cpi	r18, 0x0C	; 12
    1ad4:	31 05       	cpc	r19, r1
    1ad6:	31 f0       	breq	.+12     	; 0x1ae4 <KEYPAD_4x3_adjustKeyNumber+0x4e>
    1ad8:	08 c0       	rjmp	.+16     	; 0x1aea <KEYPAD_4x3_adjustKeyNumber+0x54>
				case 10: keypad_button = '*'; // ASCII Code of *
    1ada:	8a e2       	ldi	r24, 0x2A	; 42
    1adc:	89 83       	std	Y+1, r24	; 0x01
    1ade:	07 c0       	rjmp	.+14     	; 0x1aee <KEYPAD_4x3_adjustKeyNumber+0x58>
						 break;
				case 11: keypad_button = 0;
    1ae0:	19 82       	std	Y+1, r1	; 0x01
    1ae2:	05 c0       	rjmp	.+10     	; 0x1aee <KEYPAD_4x3_adjustKeyNumber+0x58>
						 break;
				case 12: keypad_button = '#'; // ASCII Code of #
    1ae4:	83 e2       	ldi	r24, 0x23	; 35
    1ae6:	89 83       	std	Y+1, r24	; 0x01
    1ae8:	02 c0       	rjmp	.+4      	; 0x1aee <KEYPAD_4x3_adjustKeyNumber+0x58>
						 break;
				default: keypad_button = button_number;
    1aea:	8a 81       	ldd	r24, Y+2	; 0x02
    1aec:	89 83       	std	Y+1, r24	; 0x01
						break;
			}
			return keypad_button;
    1aee:	89 81       	ldd	r24, Y+1	; 0x01
		}
    1af0:	0f 90       	pop	r0
    1af2:	0f 90       	pop	r0
    1af4:	0f 90       	pop	r0
    1af6:	0f 90       	pop	r0
    1af8:	cf 91       	pop	r28
    1afa:	df 91       	pop	r29
    1afc:	08 95       	ret

00001afe <GPIO_setupPinDirection>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
GPIO_Error_t GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction) {
    1afe:	df 93       	push	r29
    1b00:	cf 93       	push	r28
    1b02:	00 d0       	rcall	.+0      	; 0x1b04 <GPIO_setupPinDirection+0x6>
    1b04:	00 d0       	rcall	.+0      	; 0x1b06 <GPIO_setupPinDirection+0x8>
    1b06:	00 d0       	rcall	.+0      	; 0x1b08 <GPIO_setupPinDirection+0xa>
    1b08:	cd b7       	in	r28, 0x3d	; 61
    1b0a:	de b7       	in	r29, 0x3e	; 62
    1b0c:	8a 83       	std	Y+2, r24	; 0x02
    1b0e:	6b 83       	std	Y+3, r22	; 0x03
    1b10:	4c 83       	std	Y+4, r20	; 0x04
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t GPIO_Driver_Checker = NULL;
    1b12:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    1b14:	8b 81       	ldd	r24, Y+3	; 0x03
    1b16:	88 30       	cpi	r24, 0x08	; 8
    1b18:	18 f0       	brcs	.+6      	; 0x1b20 <GPIO_setupPinDirection+0x22>
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	89 83       	std	Y+1, r24	; 0x01
    1b1e:	e1 c0       	rjmp	.+450    	; 0x1ce2 <GPIO_setupPinDirection+0x1e4>
	}
	else if((port_num >= NUM_OF_PORTS)) {
    1b20:	8a 81       	ldd	r24, Y+2	; 0x02
    1b22:	84 30       	cpi	r24, 0x04	; 4
    1b24:	18 f0       	brcs	.+6      	; 0x1b2c <GPIO_setupPinDirection+0x2e>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    1b26:	82 e0       	ldi	r24, 0x02	; 2
    1b28:	89 83       	std	Y+1, r24	; 0x01
    1b2a:	db c0       	rjmp	.+438    	; 0x1ce2 <GPIO_setupPinDirection+0x1e4>
	}
	else if((direction != PIN_INPUT) && (direction != PIN_OUTPUT)) {
    1b2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b2e:	88 23       	and	r24, r24
    1b30:	31 f0       	breq	.+12     	; 0x1b3e <GPIO_setupPinDirection+0x40>
    1b32:	8c 81       	ldd	r24, Y+4	; 0x04
    1b34:	81 30       	cpi	r24, 0x01	; 1
    1b36:	19 f0       	breq	.+6      	; 0x1b3e <GPIO_setupPinDirection+0x40>
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
    1b38:	83 e0       	ldi	r24, 0x03	; 3
    1b3a:	89 83       	std	Y+1, r24	; 0x01
    1b3c:	d2 c0       	rjmp	.+420    	; 0x1ce2 <GPIO_setupPinDirection+0x1e4>
	}
	else {
		/* Setup the pin direction as required */
		switch(port_num) {
    1b3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b40:	28 2f       	mov	r18, r24
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	3e 83       	std	Y+6, r19	; 0x06
    1b46:	2d 83       	std	Y+5, r18	; 0x05
    1b48:	8d 81       	ldd	r24, Y+5	; 0x05
    1b4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b4c:	81 30       	cpi	r24, 0x01	; 1
    1b4e:	91 05       	cpc	r25, r1
    1b50:	09 f4       	brne	.+2      	; 0x1b54 <GPIO_setupPinDirection+0x56>
    1b52:	43 c0       	rjmp	.+134    	; 0x1bda <GPIO_setupPinDirection+0xdc>
    1b54:	2d 81       	ldd	r18, Y+5	; 0x05
    1b56:	3e 81       	ldd	r19, Y+6	; 0x06
    1b58:	22 30       	cpi	r18, 0x02	; 2
    1b5a:	31 05       	cpc	r19, r1
    1b5c:	2c f4       	brge	.+10     	; 0x1b68 <GPIO_setupPinDirection+0x6a>
    1b5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b60:	9e 81       	ldd	r25, Y+6	; 0x06
    1b62:	00 97       	sbiw	r24, 0x00	; 0
    1b64:	71 f0       	breq	.+28     	; 0x1b82 <GPIO_setupPinDirection+0x84>
    1b66:	bc c0       	rjmp	.+376    	; 0x1ce0 <GPIO_setupPinDirection+0x1e2>
    1b68:	2d 81       	ldd	r18, Y+5	; 0x05
    1b6a:	3e 81       	ldd	r19, Y+6	; 0x06
    1b6c:	22 30       	cpi	r18, 0x02	; 2
    1b6e:	31 05       	cpc	r19, r1
    1b70:	09 f4       	brne	.+2      	; 0x1b74 <GPIO_setupPinDirection+0x76>
    1b72:	5f c0       	rjmp	.+190    	; 0x1c32 <GPIO_setupPinDirection+0x134>
    1b74:	8d 81       	ldd	r24, Y+5	; 0x05
    1b76:	9e 81       	ldd	r25, Y+6	; 0x06
    1b78:	83 30       	cpi	r24, 0x03	; 3
    1b7a:	91 05       	cpc	r25, r1
    1b7c:	09 f4       	brne	.+2      	; 0x1b80 <GPIO_setupPinDirection+0x82>
    1b7e:	85 c0       	rjmp	.+266    	; 0x1c8a <GPIO_setupPinDirection+0x18c>
    1b80:	af c0       	rjmp	.+350    	; 0x1ce0 <GPIO_setupPinDirection+0x1e2>
		case PORT_A:
			if(direction == PIN_OUTPUT) {
    1b82:	8c 81       	ldd	r24, Y+4	; 0x04
    1b84:	81 30       	cpi	r24, 0x01	; 1
    1b86:	a1 f4       	brne	.+40     	; 0x1bb0 <GPIO_setupPinDirection+0xb2>
				SET_BIT(DDRA, pin_num);
    1b88:	aa e3       	ldi	r26, 0x3A	; 58
    1b8a:	b0 e0       	ldi	r27, 0x00	; 0
    1b8c:	ea e3       	ldi	r30, 0x3A	; 58
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	80 81       	ld	r24, Z
    1b92:	48 2f       	mov	r20, r24
    1b94:	8b 81       	ldd	r24, Y+3	; 0x03
    1b96:	28 2f       	mov	r18, r24
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	02 2e       	mov	r0, r18
    1ba0:	02 c0       	rjmp	.+4      	; 0x1ba6 <GPIO_setupPinDirection+0xa8>
    1ba2:	88 0f       	add	r24, r24
    1ba4:	99 1f       	adc	r25, r25
    1ba6:	0a 94       	dec	r0
    1ba8:	e2 f7       	brpl	.-8      	; 0x1ba2 <GPIO_setupPinDirection+0xa4>
    1baa:	84 2b       	or	r24, r20
    1bac:	8c 93       	st	X, r24
    1bae:	98 c0       	rjmp	.+304    	; 0x1ce0 <GPIO_setupPinDirection+0x1e2>
			}
			else {
				CLR_BIT(DDRA, pin_num);
    1bb0:	aa e3       	ldi	r26, 0x3A	; 58
    1bb2:	b0 e0       	ldi	r27, 0x00	; 0
    1bb4:	ea e3       	ldi	r30, 0x3A	; 58
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	80 81       	ld	r24, Z
    1bba:	48 2f       	mov	r20, r24
    1bbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbe:	28 2f       	mov	r18, r24
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	02 2e       	mov	r0, r18
    1bc8:	02 c0       	rjmp	.+4      	; 0x1bce <GPIO_setupPinDirection+0xd0>
    1bca:	88 0f       	add	r24, r24
    1bcc:	99 1f       	adc	r25, r25
    1bce:	0a 94       	dec	r0
    1bd0:	e2 f7       	brpl	.-8      	; 0x1bca <GPIO_setupPinDirection+0xcc>
    1bd2:	80 95       	com	r24
    1bd4:	84 23       	and	r24, r20
    1bd6:	8c 93       	st	X, r24
    1bd8:	83 c0       	rjmp	.+262    	; 0x1ce0 <GPIO_setupPinDirection+0x1e2>
			}
			break;
		case PORT_B:
			if(direction == PIN_OUTPUT) {
    1bda:	8c 81       	ldd	r24, Y+4	; 0x04
    1bdc:	81 30       	cpi	r24, 0x01	; 1
    1bde:	a1 f4       	brne	.+40     	; 0x1c08 <GPIO_setupPinDirection+0x10a>
				SET_BIT(DDRB,pin_num);
    1be0:	a7 e3       	ldi	r26, 0x37	; 55
    1be2:	b0 e0       	ldi	r27, 0x00	; 0
    1be4:	e7 e3       	ldi	r30, 0x37	; 55
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	80 81       	ld	r24, Z
    1bea:	48 2f       	mov	r20, r24
    1bec:	8b 81       	ldd	r24, Y+3	; 0x03
    1bee:	28 2f       	mov	r18, r24
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	02 2e       	mov	r0, r18
    1bf8:	02 c0       	rjmp	.+4      	; 0x1bfe <GPIO_setupPinDirection+0x100>
    1bfa:	88 0f       	add	r24, r24
    1bfc:	99 1f       	adc	r25, r25
    1bfe:	0a 94       	dec	r0
    1c00:	e2 f7       	brpl	.-8      	; 0x1bfa <GPIO_setupPinDirection+0xfc>
    1c02:	84 2b       	or	r24, r20
    1c04:	8c 93       	st	X, r24
    1c06:	6c c0       	rjmp	.+216    	; 0x1ce0 <GPIO_setupPinDirection+0x1e2>
			}
			else {
				CLR_BIT(DDRB,pin_num);
    1c08:	a7 e3       	ldi	r26, 0x37	; 55
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	e7 e3       	ldi	r30, 0x37	; 55
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	48 2f       	mov	r20, r24
    1c14:	8b 81       	ldd	r24, Y+3	; 0x03
    1c16:	28 2f       	mov	r18, r24
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	02 2e       	mov	r0, r18
    1c20:	02 c0       	rjmp	.+4      	; 0x1c26 <GPIO_setupPinDirection+0x128>
    1c22:	88 0f       	add	r24, r24
    1c24:	99 1f       	adc	r25, r25
    1c26:	0a 94       	dec	r0
    1c28:	e2 f7       	brpl	.-8      	; 0x1c22 <GPIO_setupPinDirection+0x124>
    1c2a:	80 95       	com	r24
    1c2c:	84 23       	and	r24, r20
    1c2e:	8c 93       	st	X, r24
    1c30:	57 c0       	rjmp	.+174    	; 0x1ce0 <GPIO_setupPinDirection+0x1e2>
			}
			break;
		case PORT_C:
			if(direction == PIN_OUTPUT) {
    1c32:	8c 81       	ldd	r24, Y+4	; 0x04
    1c34:	81 30       	cpi	r24, 0x01	; 1
    1c36:	a1 f4       	brne	.+40     	; 0x1c60 <GPIO_setupPinDirection+0x162>
				SET_BIT(DDRC,pin_num);
    1c38:	a4 e3       	ldi	r26, 0x34	; 52
    1c3a:	b0 e0       	ldi	r27, 0x00	; 0
    1c3c:	e4 e3       	ldi	r30, 0x34	; 52
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	80 81       	ld	r24, Z
    1c42:	48 2f       	mov	r20, r24
    1c44:	8b 81       	ldd	r24, Y+3	; 0x03
    1c46:	28 2f       	mov	r18, r24
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	81 e0       	ldi	r24, 0x01	; 1
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	02 2e       	mov	r0, r18
    1c50:	02 c0       	rjmp	.+4      	; 0x1c56 <GPIO_setupPinDirection+0x158>
    1c52:	88 0f       	add	r24, r24
    1c54:	99 1f       	adc	r25, r25
    1c56:	0a 94       	dec	r0
    1c58:	e2 f7       	brpl	.-8      	; 0x1c52 <GPIO_setupPinDirection+0x154>
    1c5a:	84 2b       	or	r24, r20
    1c5c:	8c 93       	st	X, r24
    1c5e:	40 c0       	rjmp	.+128    	; 0x1ce0 <GPIO_setupPinDirection+0x1e2>
			}
			else {
				CLR_BIT(DDRC,pin_num);
    1c60:	a4 e3       	ldi	r26, 0x34	; 52
    1c62:	b0 e0       	ldi	r27, 0x00	; 0
    1c64:	e4 e3       	ldi	r30, 0x34	; 52
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	80 81       	ld	r24, Z
    1c6a:	48 2f       	mov	r20, r24
    1c6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6e:	28 2f       	mov	r18, r24
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	02 2e       	mov	r0, r18
    1c78:	02 c0       	rjmp	.+4      	; 0x1c7e <GPIO_setupPinDirection+0x180>
    1c7a:	88 0f       	add	r24, r24
    1c7c:	99 1f       	adc	r25, r25
    1c7e:	0a 94       	dec	r0
    1c80:	e2 f7       	brpl	.-8      	; 0x1c7a <GPIO_setupPinDirection+0x17c>
    1c82:	80 95       	com	r24
    1c84:	84 23       	and	r24, r20
    1c86:	8c 93       	st	X, r24
    1c88:	2b c0       	rjmp	.+86     	; 0x1ce0 <GPIO_setupPinDirection+0x1e2>
			}
			break;
		case PORT_D:
			if(direction == PIN_OUTPUT) {
    1c8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c8c:	81 30       	cpi	r24, 0x01	; 1
    1c8e:	a1 f4       	brne	.+40     	; 0x1cb8 <GPIO_setupPinDirection+0x1ba>
				SET_BIT(DDRD,pin_num);
    1c90:	a1 e3       	ldi	r26, 0x31	; 49
    1c92:	b0 e0       	ldi	r27, 0x00	; 0
    1c94:	e1 e3       	ldi	r30, 0x31	; 49
    1c96:	f0 e0       	ldi	r31, 0x00	; 0
    1c98:	80 81       	ld	r24, Z
    1c9a:	48 2f       	mov	r20, r24
    1c9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9e:	28 2f       	mov	r18, r24
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	02 2e       	mov	r0, r18
    1ca8:	02 c0       	rjmp	.+4      	; 0x1cae <GPIO_setupPinDirection+0x1b0>
    1caa:	88 0f       	add	r24, r24
    1cac:	99 1f       	adc	r25, r25
    1cae:	0a 94       	dec	r0
    1cb0:	e2 f7       	brpl	.-8      	; 0x1caa <GPIO_setupPinDirection+0x1ac>
    1cb2:	84 2b       	or	r24, r20
    1cb4:	8c 93       	st	X, r24
    1cb6:	14 c0       	rjmp	.+40     	; 0x1ce0 <GPIO_setupPinDirection+0x1e2>
			}
			else {
				CLR_BIT(DDRD,pin_num);
    1cb8:	a1 e3       	ldi	r26, 0x31	; 49
    1cba:	b0 e0       	ldi	r27, 0x00	; 0
    1cbc:	e1 e3       	ldi	r30, 0x31	; 49
    1cbe:	f0 e0       	ldi	r31, 0x00	; 0
    1cc0:	80 81       	ld	r24, Z
    1cc2:	48 2f       	mov	r20, r24
    1cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc6:	28 2f       	mov	r18, r24
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	02 2e       	mov	r0, r18
    1cd0:	02 c0       	rjmp	.+4      	; 0x1cd6 <GPIO_setupPinDirection+0x1d8>
    1cd2:	88 0f       	add	r24, r24
    1cd4:	99 1f       	adc	r25, r25
    1cd6:	0a 94       	dec	r0
    1cd8:	e2 f7       	brpl	.-8      	; 0x1cd2 <GPIO_setupPinDirection+0x1d4>
    1cda:	80 95       	com	r24
    1cdc:	84 23       	and	r24, r20
    1cde:	8c 93       	st	X, r24
			}
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    1ce0:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    1ce2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ce4:	26 96       	adiw	r28, 0x06	; 6
    1ce6:	0f b6       	in	r0, 0x3f	; 63
    1ce8:	f8 94       	cli
    1cea:	de bf       	out	0x3e, r29	; 62
    1cec:	0f be       	out	0x3f, r0	; 63
    1cee:	cd bf       	out	0x3d, r28	; 61
    1cf0:	cf 91       	pop	r28
    1cf2:	df 91       	pop	r29
    1cf4:	08 95       	ret

00001cf6 <GPIO_writePin>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
GPIO_Error_t GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value) {
    1cf6:	df 93       	push	r29
    1cf8:	cf 93       	push	r28
    1cfa:	00 d0       	rcall	.+0      	; 0x1cfc <GPIO_writePin+0x6>
    1cfc:	00 d0       	rcall	.+0      	; 0x1cfe <GPIO_writePin+0x8>
    1cfe:	00 d0       	rcall	.+0      	; 0x1d00 <GPIO_writePin+0xa>
    1d00:	cd b7       	in	r28, 0x3d	; 61
    1d02:	de b7       	in	r29, 0x3e	; 62
    1d04:	8a 83       	std	Y+2, r24	; 0x02
    1d06:	6b 83       	std	Y+3, r22	; 0x03
    1d08:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t GPIO_Driver_Checker = NULL;
    1d0a:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    1d0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0e:	88 30       	cpi	r24, 0x08	; 8
    1d10:	18 f0       	brcs	.+6      	; 0x1d18 <GPIO_writePin+0x22>
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
    1d12:	81 e0       	ldi	r24, 0x01	; 1
    1d14:	89 83       	std	Y+1, r24	; 0x01
    1d16:	e1 c0       	rjmp	.+450    	; 0x1eda <GPIO_writePin+0x1e4>
	}
	else if((port_num >= NUM_OF_PORTS)) {
    1d18:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1a:	84 30       	cpi	r24, 0x04	; 4
    1d1c:	18 f0       	brcs	.+6      	; 0x1d24 <GPIO_writePin+0x2e>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    1d1e:	82 e0       	ldi	r24, 0x02	; 2
    1d20:	89 83       	std	Y+1, r24	; 0x01
    1d22:	db c0       	rjmp	.+438    	; 0x1eda <GPIO_writePin+0x1e4>
	}
	else if((value != LOGIC_HIGH) && (value != LOGIC_LOW)) {
    1d24:	8c 81       	ldd	r24, Y+4	; 0x04
    1d26:	81 30       	cpi	r24, 0x01	; 1
    1d28:	31 f0       	breq	.+12     	; 0x1d36 <GPIO_writePin+0x40>
    1d2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d2c:	88 23       	and	r24, r24
    1d2e:	19 f0       	breq	.+6      	; 0x1d36 <GPIO_writePin+0x40>
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
    1d30:	83 e0       	ldi	r24, 0x03	; 3
    1d32:	89 83       	std	Y+1, r24	; 0x01
    1d34:	d2 c0       	rjmp	.+420    	; 0x1eda <GPIO_writePin+0x1e4>
	}
	else {
		switch(port_num) {
    1d36:	8a 81       	ldd	r24, Y+2	; 0x02
    1d38:	28 2f       	mov	r18, r24
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	3e 83       	std	Y+6, r19	; 0x06
    1d3e:	2d 83       	std	Y+5, r18	; 0x05
    1d40:	8d 81       	ldd	r24, Y+5	; 0x05
    1d42:	9e 81       	ldd	r25, Y+6	; 0x06
    1d44:	81 30       	cpi	r24, 0x01	; 1
    1d46:	91 05       	cpc	r25, r1
    1d48:	09 f4       	brne	.+2      	; 0x1d4c <GPIO_writePin+0x56>
    1d4a:	43 c0       	rjmp	.+134    	; 0x1dd2 <GPIO_writePin+0xdc>
    1d4c:	2d 81       	ldd	r18, Y+5	; 0x05
    1d4e:	3e 81       	ldd	r19, Y+6	; 0x06
    1d50:	22 30       	cpi	r18, 0x02	; 2
    1d52:	31 05       	cpc	r19, r1
    1d54:	2c f4       	brge	.+10     	; 0x1d60 <GPIO_writePin+0x6a>
    1d56:	8d 81       	ldd	r24, Y+5	; 0x05
    1d58:	9e 81       	ldd	r25, Y+6	; 0x06
    1d5a:	00 97       	sbiw	r24, 0x00	; 0
    1d5c:	71 f0       	breq	.+28     	; 0x1d7a <GPIO_writePin+0x84>
    1d5e:	bc c0       	rjmp	.+376    	; 0x1ed8 <GPIO_writePin+0x1e2>
    1d60:	2d 81       	ldd	r18, Y+5	; 0x05
    1d62:	3e 81       	ldd	r19, Y+6	; 0x06
    1d64:	22 30       	cpi	r18, 0x02	; 2
    1d66:	31 05       	cpc	r19, r1
    1d68:	09 f4       	brne	.+2      	; 0x1d6c <GPIO_writePin+0x76>
    1d6a:	5f c0       	rjmp	.+190    	; 0x1e2a <GPIO_writePin+0x134>
    1d6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d70:	83 30       	cpi	r24, 0x03	; 3
    1d72:	91 05       	cpc	r25, r1
    1d74:	09 f4       	brne	.+2      	; 0x1d78 <GPIO_writePin+0x82>
    1d76:	85 c0       	rjmp	.+266    	; 0x1e82 <GPIO_writePin+0x18c>
    1d78:	af c0       	rjmp	.+350    	; 0x1ed8 <GPIO_writePin+0x1e2>
		case PORT_A:
			if(value == LOGIC_HIGH) {
    1d7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d7c:	81 30       	cpi	r24, 0x01	; 1
    1d7e:	a1 f4       	brne	.+40     	; 0x1da8 <GPIO_writePin+0xb2>
				SET_BIT(PORTA,pin_num);
    1d80:	ab e3       	ldi	r26, 0x3B	; 59
    1d82:	b0 e0       	ldi	r27, 0x00	; 0
    1d84:	eb e3       	ldi	r30, 0x3B	; 59
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	80 81       	ld	r24, Z
    1d8a:	48 2f       	mov	r20, r24
    1d8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8e:	28 2f       	mov	r18, r24
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	02 2e       	mov	r0, r18
    1d98:	02 c0       	rjmp	.+4      	; 0x1d9e <GPIO_writePin+0xa8>
    1d9a:	88 0f       	add	r24, r24
    1d9c:	99 1f       	adc	r25, r25
    1d9e:	0a 94       	dec	r0
    1da0:	e2 f7       	brpl	.-8      	; 0x1d9a <GPIO_writePin+0xa4>
    1da2:	84 2b       	or	r24, r20
    1da4:	8c 93       	st	X, r24
    1da6:	98 c0       	rjmp	.+304    	; 0x1ed8 <GPIO_writePin+0x1e2>
			}
			else {
				CLR_BIT(PORTA,pin_num);
    1da8:	ab e3       	ldi	r26, 0x3B	; 59
    1daa:	b0 e0       	ldi	r27, 0x00	; 0
    1dac:	eb e3       	ldi	r30, 0x3B	; 59
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	80 81       	ld	r24, Z
    1db2:	48 2f       	mov	r20, r24
    1db4:	8b 81       	ldd	r24, Y+3	; 0x03
    1db6:	28 2f       	mov	r18, r24
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	81 e0       	ldi	r24, 0x01	; 1
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	02 2e       	mov	r0, r18
    1dc0:	02 c0       	rjmp	.+4      	; 0x1dc6 <GPIO_writePin+0xd0>
    1dc2:	88 0f       	add	r24, r24
    1dc4:	99 1f       	adc	r25, r25
    1dc6:	0a 94       	dec	r0
    1dc8:	e2 f7       	brpl	.-8      	; 0x1dc2 <GPIO_writePin+0xcc>
    1dca:	80 95       	com	r24
    1dcc:	84 23       	and	r24, r20
    1dce:	8c 93       	st	X, r24
    1dd0:	83 c0       	rjmp	.+262    	; 0x1ed8 <GPIO_writePin+0x1e2>
			}
			break;
		case PORT_B:
			if(value == LOGIC_HIGH) {
    1dd2:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd4:	81 30       	cpi	r24, 0x01	; 1
    1dd6:	a1 f4       	brne	.+40     	; 0x1e00 <GPIO_writePin+0x10a>
				SET_BIT(PORTB,pin_num);
    1dd8:	a8 e3       	ldi	r26, 0x38	; 56
    1dda:	b0 e0       	ldi	r27, 0x00	; 0
    1ddc:	e8 e3       	ldi	r30, 0x38	; 56
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	80 81       	ld	r24, Z
    1de2:	48 2f       	mov	r20, r24
    1de4:	8b 81       	ldd	r24, Y+3	; 0x03
    1de6:	28 2f       	mov	r18, r24
    1de8:	30 e0       	ldi	r19, 0x00	; 0
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	02 2e       	mov	r0, r18
    1df0:	02 c0       	rjmp	.+4      	; 0x1df6 <GPIO_writePin+0x100>
    1df2:	88 0f       	add	r24, r24
    1df4:	99 1f       	adc	r25, r25
    1df6:	0a 94       	dec	r0
    1df8:	e2 f7       	brpl	.-8      	; 0x1df2 <GPIO_writePin+0xfc>
    1dfa:	84 2b       	or	r24, r20
    1dfc:	8c 93       	st	X, r24
    1dfe:	6c c0       	rjmp	.+216    	; 0x1ed8 <GPIO_writePin+0x1e2>
			}
			else {
				CLR_BIT(PORTB,pin_num);
    1e00:	a8 e3       	ldi	r26, 0x38	; 56
    1e02:	b0 e0       	ldi	r27, 0x00	; 0
    1e04:	e8 e3       	ldi	r30, 0x38	; 56
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	80 81       	ld	r24, Z
    1e0a:	48 2f       	mov	r20, r24
    1e0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0e:	28 2f       	mov	r18, r24
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	81 e0       	ldi	r24, 0x01	; 1
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	02 2e       	mov	r0, r18
    1e18:	02 c0       	rjmp	.+4      	; 0x1e1e <GPIO_writePin+0x128>
    1e1a:	88 0f       	add	r24, r24
    1e1c:	99 1f       	adc	r25, r25
    1e1e:	0a 94       	dec	r0
    1e20:	e2 f7       	brpl	.-8      	; 0x1e1a <GPIO_writePin+0x124>
    1e22:	80 95       	com	r24
    1e24:	84 23       	and	r24, r20
    1e26:	8c 93       	st	X, r24
    1e28:	57 c0       	rjmp	.+174    	; 0x1ed8 <GPIO_writePin+0x1e2>
			}
			break;
		case PORT_C:
			if(value == LOGIC_HIGH) {
    1e2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e2c:	81 30       	cpi	r24, 0x01	; 1
    1e2e:	a1 f4       	brne	.+40     	; 0x1e58 <GPIO_writePin+0x162>
				SET_BIT(PORTC,pin_num);
    1e30:	a5 e3       	ldi	r26, 0x35	; 53
    1e32:	b0 e0       	ldi	r27, 0x00	; 0
    1e34:	e5 e3       	ldi	r30, 0x35	; 53
    1e36:	f0 e0       	ldi	r31, 0x00	; 0
    1e38:	80 81       	ld	r24, Z
    1e3a:	48 2f       	mov	r20, r24
    1e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3e:	28 2f       	mov	r18, r24
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	02 2e       	mov	r0, r18
    1e48:	02 c0       	rjmp	.+4      	; 0x1e4e <GPIO_writePin+0x158>
    1e4a:	88 0f       	add	r24, r24
    1e4c:	99 1f       	adc	r25, r25
    1e4e:	0a 94       	dec	r0
    1e50:	e2 f7       	brpl	.-8      	; 0x1e4a <GPIO_writePin+0x154>
    1e52:	84 2b       	or	r24, r20
    1e54:	8c 93       	st	X, r24
    1e56:	40 c0       	rjmp	.+128    	; 0x1ed8 <GPIO_writePin+0x1e2>
			}
			else {
				CLR_BIT(PORTC,pin_num);
    1e58:	a5 e3       	ldi	r26, 0x35	; 53
    1e5a:	b0 e0       	ldi	r27, 0x00	; 0
    1e5c:	e5 e3       	ldi	r30, 0x35	; 53
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	80 81       	ld	r24, Z
    1e62:	48 2f       	mov	r20, r24
    1e64:	8b 81       	ldd	r24, Y+3	; 0x03
    1e66:	28 2f       	mov	r18, r24
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	81 e0       	ldi	r24, 0x01	; 1
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	02 2e       	mov	r0, r18
    1e70:	02 c0       	rjmp	.+4      	; 0x1e76 <GPIO_writePin+0x180>
    1e72:	88 0f       	add	r24, r24
    1e74:	99 1f       	adc	r25, r25
    1e76:	0a 94       	dec	r0
    1e78:	e2 f7       	brpl	.-8      	; 0x1e72 <GPIO_writePin+0x17c>
    1e7a:	80 95       	com	r24
    1e7c:	84 23       	and	r24, r20
    1e7e:	8c 93       	st	X, r24
    1e80:	2b c0       	rjmp	.+86     	; 0x1ed8 <GPIO_writePin+0x1e2>
			}
			break;
		case PORT_D:
			if(value == LOGIC_HIGH) {
    1e82:	8c 81       	ldd	r24, Y+4	; 0x04
    1e84:	81 30       	cpi	r24, 0x01	; 1
    1e86:	a1 f4       	brne	.+40     	; 0x1eb0 <GPIO_writePin+0x1ba>
				SET_BIT(PORTD,pin_num);
    1e88:	a2 e3       	ldi	r26, 0x32	; 50
    1e8a:	b0 e0       	ldi	r27, 0x00	; 0
    1e8c:	e2 e3       	ldi	r30, 0x32	; 50
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	80 81       	ld	r24, Z
    1e92:	48 2f       	mov	r20, r24
    1e94:	8b 81       	ldd	r24, Y+3	; 0x03
    1e96:	28 2f       	mov	r18, r24
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	81 e0       	ldi	r24, 0x01	; 1
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	02 2e       	mov	r0, r18
    1ea0:	02 c0       	rjmp	.+4      	; 0x1ea6 <GPIO_writePin+0x1b0>
    1ea2:	88 0f       	add	r24, r24
    1ea4:	99 1f       	adc	r25, r25
    1ea6:	0a 94       	dec	r0
    1ea8:	e2 f7       	brpl	.-8      	; 0x1ea2 <GPIO_writePin+0x1ac>
    1eaa:	84 2b       	or	r24, r20
    1eac:	8c 93       	st	X, r24
    1eae:	14 c0       	rjmp	.+40     	; 0x1ed8 <GPIO_writePin+0x1e2>
			}
			else {
				CLR_BIT(PORTD,pin_num);
    1eb0:	a2 e3       	ldi	r26, 0x32	; 50
    1eb2:	b0 e0       	ldi	r27, 0x00	; 0
    1eb4:	e2 e3       	ldi	r30, 0x32	; 50
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	80 81       	ld	r24, Z
    1eba:	48 2f       	mov	r20, r24
    1ebc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ebe:	28 2f       	mov	r18, r24
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	02 2e       	mov	r0, r18
    1ec8:	02 c0       	rjmp	.+4      	; 0x1ece <GPIO_writePin+0x1d8>
    1eca:	88 0f       	add	r24, r24
    1ecc:	99 1f       	adc	r25, r25
    1ece:	0a 94       	dec	r0
    1ed0:	e2 f7       	brpl	.-8      	; 0x1eca <GPIO_writePin+0x1d4>
    1ed2:	80 95       	com	r24
    1ed4:	84 23       	and	r24, r20
    1ed6:	8c 93       	st	X, r24
			}
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    1ed8:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    1eda:	89 81       	ldd	r24, Y+1	; 0x01
}
    1edc:	26 96       	adiw	r28, 0x06	; 6
    1ede:	0f b6       	in	r0, 0x3f	; 63
    1ee0:	f8 94       	cli
    1ee2:	de bf       	out	0x3e, r29	; 62
    1ee4:	0f be       	out	0x3f, r0	; 63
    1ee6:	cd bf       	out	0x3d, r28	; 61
    1ee8:	cf 91       	pop	r28
    1eea:	df 91       	pop	r29
    1eec:	08 95       	ret

00001eee <GPIO_togglePin>:


GPIO_Error_t GPIO_togglePin(uint8 port_num, uint8 pin_num) {
    1eee:	df 93       	push	r29
    1ef0:	cf 93       	push	r28
    1ef2:	00 d0       	rcall	.+0      	; 0x1ef4 <GPIO_togglePin+0x6>
    1ef4:	00 d0       	rcall	.+0      	; 0x1ef6 <GPIO_togglePin+0x8>
    1ef6:	0f 92       	push	r0
    1ef8:	cd b7       	in	r28, 0x3d	; 61
    1efa:	de b7       	in	r29, 0x3e	; 62
    1efc:	8a 83       	std	Y+2, r24	; 0x02
    1efe:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t GPIO_Driver_Checker = NULL;
    1f00:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    1f02:	8b 81       	ldd	r24, Y+3	; 0x03
    1f04:	88 30       	cpi	r24, 0x08	; 8
    1f06:	18 f0       	brcs	.+6      	; 0x1f0e <GPIO_togglePin+0x20>
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
    1f08:	81 e0       	ldi	r24, 0x01	; 1
    1f0a:	89 83       	std	Y+1, r24	; 0x01
    1f0c:	75 c0       	rjmp	.+234    	; 0x1ff8 <GPIO_togglePin+0x10a>
	}
	else if((port_num >= NUM_OF_PORTS)) {
    1f0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f10:	84 30       	cpi	r24, 0x04	; 4
    1f12:	18 f0       	brcs	.+6      	; 0x1f1a <GPIO_togglePin+0x2c>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    1f14:	82 e0       	ldi	r24, 0x02	; 2
    1f16:	89 83       	std	Y+1, r24	; 0x01
    1f18:	6f c0       	rjmp	.+222    	; 0x1ff8 <GPIO_togglePin+0x10a>
	}
	else {
		switch(port_num) {
    1f1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1c:	28 2f       	mov	r18, r24
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	3d 83       	std	Y+5, r19	; 0x05
    1f22:	2c 83       	std	Y+4, r18	; 0x04
    1f24:	8c 81       	ldd	r24, Y+4	; 0x04
    1f26:	9d 81       	ldd	r25, Y+5	; 0x05
    1f28:	81 30       	cpi	r24, 0x01	; 1
    1f2a:	91 05       	cpc	r25, r1
    1f2c:	49 f1       	breq	.+82     	; 0x1f80 <GPIO_togglePin+0x92>
    1f2e:	2c 81       	ldd	r18, Y+4	; 0x04
    1f30:	3d 81       	ldd	r19, Y+5	; 0x05
    1f32:	22 30       	cpi	r18, 0x02	; 2
    1f34:	31 05       	cpc	r19, r1
    1f36:	2c f4       	brge	.+10     	; 0x1f42 <GPIO_togglePin+0x54>
    1f38:	8c 81       	ldd	r24, Y+4	; 0x04
    1f3a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f3c:	00 97       	sbiw	r24, 0x00	; 0
    1f3e:	61 f0       	breq	.+24     	; 0x1f58 <GPIO_togglePin+0x6a>
    1f40:	5a c0       	rjmp	.+180    	; 0x1ff6 <GPIO_togglePin+0x108>
    1f42:	2c 81       	ldd	r18, Y+4	; 0x04
    1f44:	3d 81       	ldd	r19, Y+5	; 0x05
    1f46:	22 30       	cpi	r18, 0x02	; 2
    1f48:	31 05       	cpc	r19, r1
    1f4a:	71 f1       	breq	.+92     	; 0x1fa8 <GPIO_togglePin+0xba>
    1f4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f4e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f50:	83 30       	cpi	r24, 0x03	; 3
    1f52:	91 05       	cpc	r25, r1
    1f54:	e9 f1       	breq	.+122    	; 0x1fd0 <GPIO_togglePin+0xe2>
    1f56:	4f c0       	rjmp	.+158    	; 0x1ff6 <GPIO_togglePin+0x108>
		case PORT_A:
			TOG_BIT(PORTA,pin_num);
    1f58:	ab e3       	ldi	r26, 0x3B	; 59
    1f5a:	b0 e0       	ldi	r27, 0x00	; 0
    1f5c:	eb e3       	ldi	r30, 0x3B	; 59
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	80 81       	ld	r24, Z
    1f62:	48 2f       	mov	r20, r24
    1f64:	8b 81       	ldd	r24, Y+3	; 0x03
    1f66:	28 2f       	mov	r18, r24
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	02 2e       	mov	r0, r18
    1f70:	02 c0       	rjmp	.+4      	; 0x1f76 <GPIO_togglePin+0x88>
    1f72:	88 0f       	add	r24, r24
    1f74:	99 1f       	adc	r25, r25
    1f76:	0a 94       	dec	r0
    1f78:	e2 f7       	brpl	.-8      	; 0x1f72 <GPIO_togglePin+0x84>
    1f7a:	84 27       	eor	r24, r20
    1f7c:	8c 93       	st	X, r24
    1f7e:	3b c0       	rjmp	.+118    	; 0x1ff6 <GPIO_togglePin+0x108>
			break;
		case PORT_B:
			TOG_BIT(PORTB,pin_num);
    1f80:	a8 e3       	ldi	r26, 0x38	; 56
    1f82:	b0 e0       	ldi	r27, 0x00	; 0
    1f84:	e8 e3       	ldi	r30, 0x38	; 56
    1f86:	f0 e0       	ldi	r31, 0x00	; 0
    1f88:	80 81       	ld	r24, Z
    1f8a:	48 2f       	mov	r20, r24
    1f8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8e:	28 2f       	mov	r18, r24
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	02 2e       	mov	r0, r18
    1f98:	02 c0       	rjmp	.+4      	; 0x1f9e <GPIO_togglePin+0xb0>
    1f9a:	88 0f       	add	r24, r24
    1f9c:	99 1f       	adc	r25, r25
    1f9e:	0a 94       	dec	r0
    1fa0:	e2 f7       	brpl	.-8      	; 0x1f9a <GPIO_togglePin+0xac>
    1fa2:	84 27       	eor	r24, r20
    1fa4:	8c 93       	st	X, r24
    1fa6:	27 c0       	rjmp	.+78     	; 0x1ff6 <GPIO_togglePin+0x108>
			break;
		case PORT_C:
			TOG_BIT(PORTC,pin_num);
    1fa8:	a5 e3       	ldi	r26, 0x35	; 53
    1faa:	b0 e0       	ldi	r27, 0x00	; 0
    1fac:	e5 e3       	ldi	r30, 0x35	; 53
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	80 81       	ld	r24, Z
    1fb2:	48 2f       	mov	r20, r24
    1fb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb6:	28 2f       	mov	r18, r24
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	81 e0       	ldi	r24, 0x01	; 1
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	02 2e       	mov	r0, r18
    1fc0:	02 c0       	rjmp	.+4      	; 0x1fc6 <GPIO_togglePin+0xd8>
    1fc2:	88 0f       	add	r24, r24
    1fc4:	99 1f       	adc	r25, r25
    1fc6:	0a 94       	dec	r0
    1fc8:	e2 f7       	brpl	.-8      	; 0x1fc2 <GPIO_togglePin+0xd4>
    1fca:	84 27       	eor	r24, r20
    1fcc:	8c 93       	st	X, r24
    1fce:	13 c0       	rjmp	.+38     	; 0x1ff6 <GPIO_togglePin+0x108>
			break;
		case PORT_D:
			TOG_BIT(PORTD,pin_num);
    1fd0:	a2 e3       	ldi	r26, 0x32	; 50
    1fd2:	b0 e0       	ldi	r27, 0x00	; 0
    1fd4:	e2 e3       	ldi	r30, 0x32	; 50
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	80 81       	ld	r24, Z
    1fda:	48 2f       	mov	r20, r24
    1fdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fde:	28 2f       	mov	r18, r24
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	81 e0       	ldi	r24, 0x01	; 1
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	02 2e       	mov	r0, r18
    1fe8:	02 c0       	rjmp	.+4      	; 0x1fee <GPIO_togglePin+0x100>
    1fea:	88 0f       	add	r24, r24
    1fec:	99 1f       	adc	r25, r25
    1fee:	0a 94       	dec	r0
    1ff0:	e2 f7       	brpl	.-8      	; 0x1fea <GPIO_togglePin+0xfc>
    1ff2:	84 27       	eor	r24, r20
    1ff4:	8c 93       	st	X, r24
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    1ff6:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    1ff8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ffa:	0f 90       	pop	r0
    1ffc:	0f 90       	pop	r0
    1ffe:	0f 90       	pop	r0
    2000:	0f 90       	pop	r0
    2002:	0f 90       	pop	r0
    2004:	cf 91       	pop	r28
    2006:	df 91       	pop	r29
    2008:	08 95       	ret

0000200a <GPIO_readPin>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num) {
    200a:	df 93       	push	r29
    200c:	cf 93       	push	r28
    200e:	00 d0       	rcall	.+0      	; 0x2010 <GPIO_readPin+0x6>
    2010:	00 d0       	rcall	.+0      	; 0x2012 <GPIO_readPin+0x8>
    2012:	00 d0       	rcall	.+0      	; 0x2014 <GPIO_readPin+0xa>
    2014:	cd b7       	in	r28, 0x3d	; 61
    2016:	de b7       	in	r29, 0x3e	; 62
    2018:	8b 83       	std	Y+3, r24	; 0x03
    201a:	6c 83       	std	Y+4, r22	; 0x04
	uint8 pin_value = LOGIC_LOW;
    201c:	1a 82       	std	Y+2, r1	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t GPIO_Driver_Checker = NULL;
    201e:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    2020:	8c 81       	ldd	r24, Y+4	; 0x04
    2022:	88 30       	cpi	r24, 0x08	; 8
    2024:	18 f0       	brcs	.+6      	; 0x202c <GPIO_readPin+0x22>
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
    2026:	81 e0       	ldi	r24, 0x01	; 1
    2028:	89 83       	std	Y+1, r24	; 0x01
    202a:	87 c0       	rjmp	.+270    	; 0x213a <GPIO_readPin+0x130>
	}
	else if((port_num >= NUM_OF_PORTS)) {
    202c:	8b 81       	ldd	r24, Y+3	; 0x03
    202e:	84 30       	cpi	r24, 0x04	; 4
    2030:	18 f0       	brcs	.+6      	; 0x2038 <GPIO_readPin+0x2e>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    2032:	82 e0       	ldi	r24, 0x02	; 2
    2034:	89 83       	std	Y+1, r24	; 0x01
    2036:	81 c0       	rjmp	.+258    	; 0x213a <GPIO_readPin+0x130>
	}
	else {
		/* Read the pin value as required */
		switch(port_num) {
    2038:	8b 81       	ldd	r24, Y+3	; 0x03
    203a:	28 2f       	mov	r18, r24
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	3e 83       	std	Y+6, r19	; 0x06
    2040:	2d 83       	std	Y+5, r18	; 0x05
    2042:	4d 81       	ldd	r20, Y+5	; 0x05
    2044:	5e 81       	ldd	r21, Y+6	; 0x06
    2046:	41 30       	cpi	r20, 0x01	; 1
    2048:	51 05       	cpc	r21, r1
    204a:	79 f1       	breq	.+94     	; 0x20aa <GPIO_readPin+0xa0>
    204c:	8d 81       	ldd	r24, Y+5	; 0x05
    204e:	9e 81       	ldd	r25, Y+6	; 0x06
    2050:	82 30       	cpi	r24, 0x02	; 2
    2052:	91 05       	cpc	r25, r1
    2054:	34 f4       	brge	.+12     	; 0x2062 <GPIO_readPin+0x58>
    2056:	2d 81       	ldd	r18, Y+5	; 0x05
    2058:	3e 81       	ldd	r19, Y+6	; 0x06
    205a:	21 15       	cp	r18, r1
    205c:	31 05       	cpc	r19, r1
    205e:	69 f0       	breq	.+26     	; 0x207a <GPIO_readPin+0x70>
    2060:	6b c0       	rjmp	.+214    	; 0x2138 <GPIO_readPin+0x12e>
    2062:	4d 81       	ldd	r20, Y+5	; 0x05
    2064:	5e 81       	ldd	r21, Y+6	; 0x06
    2066:	42 30       	cpi	r20, 0x02	; 2
    2068:	51 05       	cpc	r21, r1
    206a:	b9 f1       	breq	.+110    	; 0x20da <GPIO_readPin+0xd0>
    206c:	8d 81       	ldd	r24, Y+5	; 0x05
    206e:	9e 81       	ldd	r25, Y+6	; 0x06
    2070:	83 30       	cpi	r24, 0x03	; 3
    2072:	91 05       	cpc	r25, r1
    2074:	09 f4       	brne	.+2      	; 0x2078 <GPIO_readPin+0x6e>
    2076:	49 c0       	rjmp	.+146    	; 0x210a <GPIO_readPin+0x100>
    2078:	5f c0       	rjmp	.+190    	; 0x2138 <GPIO_readPin+0x12e>
		case PORT_A:
			if(BIT_IS_SET(PINA,pin_num)) {
    207a:	e9 e3       	ldi	r30, 0x39	; 57
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	80 81       	ld	r24, Z
    2080:	28 2f       	mov	r18, r24
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	8c 81       	ldd	r24, Y+4	; 0x04
    2086:	88 2f       	mov	r24, r24
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	a9 01       	movw	r20, r18
    208c:	02 c0       	rjmp	.+4      	; 0x2092 <GPIO_readPin+0x88>
    208e:	55 95       	asr	r21
    2090:	47 95       	ror	r20
    2092:	8a 95       	dec	r24
    2094:	e2 f7       	brpl	.-8      	; 0x208e <GPIO_readPin+0x84>
    2096:	ca 01       	movw	r24, r20
    2098:	81 70       	andi	r24, 0x01	; 1
    209a:	90 70       	andi	r25, 0x00	; 0
    209c:	88 23       	and	r24, r24
    209e:	19 f0       	breq	.+6      	; 0x20a6 <GPIO_readPin+0x9c>
				pin_value = LOGIC_HIGH;
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	8a 83       	std	Y+2, r24	; 0x02
    20a4:	49 c0       	rjmp	.+146    	; 0x2138 <GPIO_readPin+0x12e>
			}
			else {
				pin_value = LOGIC_LOW;
    20a6:	1a 82       	std	Y+2, r1	; 0x02
    20a8:	47 c0       	rjmp	.+142    	; 0x2138 <GPIO_readPin+0x12e>
			}
			break;
		case PORT_B:
			if(BIT_IS_SET(PINB,pin_num)) {
    20aa:	e6 e3       	ldi	r30, 0x36	; 54
    20ac:	f0 e0       	ldi	r31, 0x00	; 0
    20ae:	80 81       	ld	r24, Z
    20b0:	28 2f       	mov	r18, r24
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	8c 81       	ldd	r24, Y+4	; 0x04
    20b6:	88 2f       	mov	r24, r24
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	a9 01       	movw	r20, r18
    20bc:	02 c0       	rjmp	.+4      	; 0x20c2 <GPIO_readPin+0xb8>
    20be:	55 95       	asr	r21
    20c0:	47 95       	ror	r20
    20c2:	8a 95       	dec	r24
    20c4:	e2 f7       	brpl	.-8      	; 0x20be <GPIO_readPin+0xb4>
    20c6:	ca 01       	movw	r24, r20
    20c8:	81 70       	andi	r24, 0x01	; 1
    20ca:	90 70       	andi	r25, 0x00	; 0
    20cc:	88 23       	and	r24, r24
    20ce:	19 f0       	breq	.+6      	; 0x20d6 <GPIO_readPin+0xcc>
				pin_value = LOGIC_HIGH;
    20d0:	81 e0       	ldi	r24, 0x01	; 1
    20d2:	8a 83       	std	Y+2, r24	; 0x02
    20d4:	31 c0       	rjmp	.+98     	; 0x2138 <GPIO_readPin+0x12e>
			}
			else {
				pin_value = LOGIC_LOW;
    20d6:	1a 82       	std	Y+2, r1	; 0x02
    20d8:	2f c0       	rjmp	.+94     	; 0x2138 <GPIO_readPin+0x12e>
			}
			break;
		case PORT_C:
			if(BIT_IS_SET(PINC,pin_num)) {
    20da:	e3 e3       	ldi	r30, 0x33	; 51
    20dc:	f0 e0       	ldi	r31, 0x00	; 0
    20de:	80 81       	ld	r24, Z
    20e0:	28 2f       	mov	r18, r24
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	8c 81       	ldd	r24, Y+4	; 0x04
    20e6:	88 2f       	mov	r24, r24
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	a9 01       	movw	r20, r18
    20ec:	02 c0       	rjmp	.+4      	; 0x20f2 <GPIO_readPin+0xe8>
    20ee:	55 95       	asr	r21
    20f0:	47 95       	ror	r20
    20f2:	8a 95       	dec	r24
    20f4:	e2 f7       	brpl	.-8      	; 0x20ee <GPIO_readPin+0xe4>
    20f6:	ca 01       	movw	r24, r20
    20f8:	81 70       	andi	r24, 0x01	; 1
    20fa:	90 70       	andi	r25, 0x00	; 0
    20fc:	88 23       	and	r24, r24
    20fe:	19 f0       	breq	.+6      	; 0x2106 <GPIO_readPin+0xfc>
				pin_value = LOGIC_HIGH;
    2100:	81 e0       	ldi	r24, 0x01	; 1
    2102:	8a 83       	std	Y+2, r24	; 0x02
    2104:	19 c0       	rjmp	.+50     	; 0x2138 <GPIO_readPin+0x12e>
			}
			else {
				pin_value = LOGIC_LOW;
    2106:	1a 82       	std	Y+2, r1	; 0x02
    2108:	17 c0       	rjmp	.+46     	; 0x2138 <GPIO_readPin+0x12e>
			}
			break;
		case PORT_D:
			if(BIT_IS_SET(PIND,pin_num)) {
    210a:	e0 e3       	ldi	r30, 0x30	; 48
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	80 81       	ld	r24, Z
    2110:	28 2f       	mov	r18, r24
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	8c 81       	ldd	r24, Y+4	; 0x04
    2116:	88 2f       	mov	r24, r24
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	a9 01       	movw	r20, r18
    211c:	02 c0       	rjmp	.+4      	; 0x2122 <GPIO_readPin+0x118>
    211e:	55 95       	asr	r21
    2120:	47 95       	ror	r20
    2122:	8a 95       	dec	r24
    2124:	e2 f7       	brpl	.-8      	; 0x211e <GPIO_readPin+0x114>
    2126:	ca 01       	movw	r24, r20
    2128:	81 70       	andi	r24, 0x01	; 1
    212a:	90 70       	andi	r25, 0x00	; 0
    212c:	88 23       	and	r24, r24
    212e:	19 f0       	breq	.+6      	; 0x2136 <GPIO_readPin+0x12c>
				pin_value = LOGIC_HIGH;
    2130:	81 e0       	ldi	r24, 0x01	; 1
    2132:	8a 83       	std	Y+2, r24	; 0x02
    2134:	01 c0       	rjmp	.+2      	; 0x2138 <GPIO_readPin+0x12e>
			}
			else {
				pin_value = LOGIC_LOW;
    2136:	1a 82       	std	Y+2, r1	; 0x02
			}
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    2138:	19 82       	std	Y+1, r1	; 0x01
	}
	return pin_value;
    213a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    213c:	26 96       	adiw	r28, 0x06	; 6
    213e:	0f b6       	in	r0, 0x3f	; 63
    2140:	f8 94       	cli
    2142:	de bf       	out	0x3e, r29	; 62
    2144:	0f be       	out	0x3f, r0	; 63
    2146:	cd bf       	out	0x3d, r28	; 61
    2148:	cf 91       	pop	r28
    214a:	df 91       	pop	r29
    214c:	08 95       	ret

0000214e <GPIO_setupPortDirection>:
 * Setup the direction of the required port all pins input/output.
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
GPIO_Error_t GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction) {
    214e:	df 93       	push	r29
    2150:	cf 93       	push	r28
    2152:	00 d0       	rcall	.+0      	; 0x2154 <GPIO_setupPortDirection+0x6>
    2154:	00 d0       	rcall	.+0      	; 0x2156 <GPIO_setupPortDirection+0x8>
    2156:	0f 92       	push	r0
    2158:	cd b7       	in	r28, 0x3d	; 61
    215a:	de b7       	in	r29, 0x3e	; 62
    215c:	8a 83       	std	Y+2, r24	; 0x02
    215e:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	uint8_t GPIO_Driver_Checker = NULL;
    2160:	19 82       	std	Y+1, r1	; 0x01

	if((port_num >= NUM_OF_PORTS)) {
    2162:	8a 81       	ldd	r24, Y+2	; 0x02
    2164:	84 30       	cpi	r24, 0x04	; 4
    2166:	18 f0       	brcs	.+6      	; 0x216e <GPIO_setupPortDirection+0x20>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    2168:	82 e0       	ldi	r24, 0x02	; 2
    216a:	89 83       	std	Y+1, r24	; 0x01
    216c:	3c c0       	rjmp	.+120    	; 0x21e6 <GPIO_setupPortDirection+0x98>
	}
	else if((direction != PIN_INPUT) && (direction != PIN_OUTPUT)) {
    216e:	8b 81       	ldd	r24, Y+3	; 0x03
    2170:	88 23       	and	r24, r24
    2172:	31 f0       	breq	.+12     	; 0x2180 <GPIO_setupPortDirection+0x32>
    2174:	8b 81       	ldd	r24, Y+3	; 0x03
    2176:	81 30       	cpi	r24, 0x01	; 1
    2178:	19 f0       	breq	.+6      	; 0x2180 <GPIO_setupPortDirection+0x32>
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
    217a:	83 e0       	ldi	r24, 0x03	; 3
    217c:	89 83       	std	Y+1, r24	; 0x01
    217e:	33 c0       	rjmp	.+102    	; 0x21e6 <GPIO_setupPortDirection+0x98>
	}
	else {
		/* Setup the port direction as required */
		switch(port_num) {
    2180:	8a 81       	ldd	r24, Y+2	; 0x02
    2182:	28 2f       	mov	r18, r24
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	3d 83       	std	Y+5, r19	; 0x05
    2188:	2c 83       	std	Y+4, r18	; 0x04
    218a:	8c 81       	ldd	r24, Y+4	; 0x04
    218c:	9d 81       	ldd	r25, Y+5	; 0x05
    218e:	81 30       	cpi	r24, 0x01	; 1
    2190:	91 05       	cpc	r25, r1
    2192:	d1 f0       	breq	.+52     	; 0x21c8 <GPIO_setupPortDirection+0x7a>
    2194:	2c 81       	ldd	r18, Y+4	; 0x04
    2196:	3d 81       	ldd	r19, Y+5	; 0x05
    2198:	22 30       	cpi	r18, 0x02	; 2
    219a:	31 05       	cpc	r19, r1
    219c:	2c f4       	brge	.+10     	; 0x21a8 <GPIO_setupPortDirection+0x5a>
    219e:	8c 81       	ldd	r24, Y+4	; 0x04
    21a0:	9d 81       	ldd	r25, Y+5	; 0x05
    21a2:	00 97       	sbiw	r24, 0x00	; 0
    21a4:	61 f0       	breq	.+24     	; 0x21be <GPIO_setupPortDirection+0x70>
    21a6:	1e c0       	rjmp	.+60     	; 0x21e4 <GPIO_setupPortDirection+0x96>
    21a8:	2c 81       	ldd	r18, Y+4	; 0x04
    21aa:	3d 81       	ldd	r19, Y+5	; 0x05
    21ac:	22 30       	cpi	r18, 0x02	; 2
    21ae:	31 05       	cpc	r19, r1
    21b0:	81 f0       	breq	.+32     	; 0x21d2 <GPIO_setupPortDirection+0x84>
    21b2:	8c 81       	ldd	r24, Y+4	; 0x04
    21b4:	9d 81       	ldd	r25, Y+5	; 0x05
    21b6:	83 30       	cpi	r24, 0x03	; 3
    21b8:	91 05       	cpc	r25, r1
    21ba:	81 f0       	breq	.+32     	; 0x21dc <GPIO_setupPortDirection+0x8e>
    21bc:	13 c0       	rjmp	.+38     	; 0x21e4 <GPIO_setupPortDirection+0x96>
		case PORT_A:
			DDRA = direction;
    21be:	ea e3       	ldi	r30, 0x3A	; 58
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	8b 81       	ldd	r24, Y+3	; 0x03
    21c4:	80 83       	st	Z, r24
    21c6:	0e c0       	rjmp	.+28     	; 0x21e4 <GPIO_setupPortDirection+0x96>
			break;
		case PORT_B:
			DDRB = direction;
    21c8:	e7 e3       	ldi	r30, 0x37	; 55
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	8b 81       	ldd	r24, Y+3	; 0x03
    21ce:	80 83       	st	Z, r24
    21d0:	09 c0       	rjmp	.+18     	; 0x21e4 <GPIO_setupPortDirection+0x96>
			break;
		case PORT_C:
			DDRC = direction;
    21d2:	e4 e3       	ldi	r30, 0x34	; 52
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	8b 81       	ldd	r24, Y+3	; 0x03
    21d8:	80 83       	st	Z, r24
    21da:	04 c0       	rjmp	.+8      	; 0x21e4 <GPIO_setupPortDirection+0x96>
			break;
		case PORT_D:
			DDRD = direction;
    21dc:	e1 e3       	ldi	r30, 0x31	; 49
    21de:	f0 e0       	ldi	r31, 0x00	; 0
    21e0:	8b 81       	ldd	r24, Y+3	; 0x03
    21e2:	80 83       	st	Z, r24
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    21e4:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    21e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    21e8:	0f 90       	pop	r0
    21ea:	0f 90       	pop	r0
    21ec:	0f 90       	pop	r0
    21ee:	0f 90       	pop	r0
    21f0:	0f 90       	pop	r0
    21f2:	cf 91       	pop	r28
    21f4:	df 91       	pop	r29
    21f6:	08 95       	ret

000021f8 <GPIO_writePort>:
 * Write the value on the required port.
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
GPIO_Error_t GPIO_writePort(uint8 port_num, uint8 value) {
    21f8:	df 93       	push	r29
    21fa:	cf 93       	push	r28
    21fc:	00 d0       	rcall	.+0      	; 0x21fe <GPIO_writePort+0x6>
    21fe:	00 d0       	rcall	.+0      	; 0x2200 <GPIO_writePort+0x8>
    2200:	0f 92       	push	r0
    2202:	cd b7       	in	r28, 0x3d	; 61
    2204:	de b7       	in	r29, 0x3e	; 62
    2206:	8a 83       	std	Y+2, r24	; 0x02
    2208:	6b 83       	std	Y+3, r22	; 0x03

	uint8_t GPIO_Driver_Checker = NULL;
    220a:	19 82       	std	Y+1, r1	; 0x01
	if((port_num >= NUM_OF_PORTS)) {
    220c:	8a 81       	ldd	r24, Y+2	; 0x02
    220e:	84 30       	cpi	r24, 0x04	; 4
    2210:	18 f0       	brcs	.+6      	; 0x2218 <GPIO_writePort+0x20>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    2212:	82 e0       	ldi	r24, 0x02	; 2
    2214:	89 83       	std	Y+1, r24	; 0x01
    2216:	3c c0       	rjmp	.+120    	; 0x2290 <GPIO_writePort+0x98>
	}
	else if((value != LOGIC_HIGH) && (value != LOGIC_LOW)) {
    2218:	8b 81       	ldd	r24, Y+3	; 0x03
    221a:	81 30       	cpi	r24, 0x01	; 1
    221c:	31 f0       	breq	.+12     	; 0x222a <GPIO_writePort+0x32>
    221e:	8b 81       	ldd	r24, Y+3	; 0x03
    2220:	88 23       	and	r24, r24
    2222:	19 f0       	breq	.+6      	; 0x222a <GPIO_writePort+0x32>
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
    2224:	83 e0       	ldi	r24, 0x03	; 3
    2226:	89 83       	std	Y+1, r24	; 0x01
    2228:	33 c0       	rjmp	.+102    	; 0x2290 <GPIO_writePort+0x98>
	}
	else {
		/* Setup the port direction as required */
		switch(port_num) {
    222a:	8a 81       	ldd	r24, Y+2	; 0x02
    222c:	28 2f       	mov	r18, r24
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	3d 83       	std	Y+5, r19	; 0x05
    2232:	2c 83       	std	Y+4, r18	; 0x04
    2234:	8c 81       	ldd	r24, Y+4	; 0x04
    2236:	9d 81       	ldd	r25, Y+5	; 0x05
    2238:	81 30       	cpi	r24, 0x01	; 1
    223a:	91 05       	cpc	r25, r1
    223c:	d1 f0       	breq	.+52     	; 0x2272 <GPIO_writePort+0x7a>
    223e:	2c 81       	ldd	r18, Y+4	; 0x04
    2240:	3d 81       	ldd	r19, Y+5	; 0x05
    2242:	22 30       	cpi	r18, 0x02	; 2
    2244:	31 05       	cpc	r19, r1
    2246:	2c f4       	brge	.+10     	; 0x2252 <GPIO_writePort+0x5a>
    2248:	8c 81       	ldd	r24, Y+4	; 0x04
    224a:	9d 81       	ldd	r25, Y+5	; 0x05
    224c:	00 97       	sbiw	r24, 0x00	; 0
    224e:	61 f0       	breq	.+24     	; 0x2268 <GPIO_writePort+0x70>
    2250:	1e c0       	rjmp	.+60     	; 0x228e <GPIO_writePort+0x96>
    2252:	2c 81       	ldd	r18, Y+4	; 0x04
    2254:	3d 81       	ldd	r19, Y+5	; 0x05
    2256:	22 30       	cpi	r18, 0x02	; 2
    2258:	31 05       	cpc	r19, r1
    225a:	81 f0       	breq	.+32     	; 0x227c <GPIO_writePort+0x84>
    225c:	8c 81       	ldd	r24, Y+4	; 0x04
    225e:	9d 81       	ldd	r25, Y+5	; 0x05
    2260:	83 30       	cpi	r24, 0x03	; 3
    2262:	91 05       	cpc	r25, r1
    2264:	81 f0       	breq	.+32     	; 0x2286 <GPIO_writePort+0x8e>
    2266:	13 c0       	rjmp	.+38     	; 0x228e <GPIO_writePort+0x96>
		case PORT_A:
			PORTA = value;
    2268:	eb e3       	ldi	r30, 0x3B	; 59
    226a:	f0 e0       	ldi	r31, 0x00	; 0
    226c:	8b 81       	ldd	r24, Y+3	; 0x03
    226e:	80 83       	st	Z, r24
    2270:	0e c0       	rjmp	.+28     	; 0x228e <GPIO_writePort+0x96>
			break;
		case PORT_B:
			PORTB = value;
    2272:	e8 e3       	ldi	r30, 0x38	; 56
    2274:	f0 e0       	ldi	r31, 0x00	; 0
    2276:	8b 81       	ldd	r24, Y+3	; 0x03
    2278:	80 83       	st	Z, r24
    227a:	09 c0       	rjmp	.+18     	; 0x228e <GPIO_writePort+0x96>
			break;
		case PORT_C:
			PORTC = value;
    227c:	e5 e3       	ldi	r30, 0x35	; 53
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	8b 81       	ldd	r24, Y+3	; 0x03
    2282:	80 83       	st	Z, r24
    2284:	04 c0       	rjmp	.+8      	; 0x228e <GPIO_writePort+0x96>
			break;
		case PORT_D:
			PORTD = value;
    2286:	e2 e3       	ldi	r30, 0x32	; 50
    2288:	f0 e0       	ldi	r31, 0x00	; 0
    228a:	8b 81       	ldd	r24, Y+3	; 0x03
    228c:	80 83       	st	Z, r24
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    228e:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    2290:	89 81       	ldd	r24, Y+1	; 0x01
}
    2292:	0f 90       	pop	r0
    2294:	0f 90       	pop	r0
    2296:	0f 90       	pop	r0
    2298:	0f 90       	pop	r0
    229a:	0f 90       	pop	r0
    229c:	cf 91       	pop	r28
    229e:	df 91       	pop	r29
    22a0:	08 95       	ret

000022a2 <GPIO_readPort>:
/*
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num) {
    22a2:	df 93       	push	r29
    22a4:	cf 93       	push	r28
    22a6:	00 d0       	rcall	.+0      	; 0x22a8 <GPIO_readPort+0x6>
    22a8:	00 d0       	rcall	.+0      	; 0x22aa <GPIO_readPort+0x8>
    22aa:	0f 92       	push	r0
    22ac:	cd b7       	in	r28, 0x3d	; 61
    22ae:	de b7       	in	r29, 0x3e	; 62
    22b0:	8b 83       	std	Y+3, r24	; 0x03
	uint8 value = LOGIC_LOW;
    22b2:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t GPIO_Driver_Checker = NULL;
    22b4:	19 82       	std	Y+1, r1	; 0x01

	if((port_num >= NUM_OF_PORTS)) {
    22b6:	8b 81       	ldd	r24, Y+3	; 0x03
    22b8:	84 30       	cpi	r24, 0x04	; 4
    22ba:	18 f0       	brcs	.+6      	; 0x22c2 <GPIO_readPort+0x20>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    22bc:	82 e0       	ldi	r24, 0x02	; 2
    22be:	89 83       	std	Y+1, r24	; 0x01
    22c0:	32 c0       	rjmp	.+100    	; 0x2326 <GPIO_readPort+0x84>
	}
	else {
		switch(port_num) {
    22c2:	8b 81       	ldd	r24, Y+3	; 0x03
    22c4:	28 2f       	mov	r18, r24
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	3d 83       	std	Y+5, r19	; 0x05
    22ca:	2c 83       	std	Y+4, r18	; 0x04
    22cc:	8c 81       	ldd	r24, Y+4	; 0x04
    22ce:	9d 81       	ldd	r25, Y+5	; 0x05
    22d0:	81 30       	cpi	r24, 0x01	; 1
    22d2:	91 05       	cpc	r25, r1
    22d4:	d1 f0       	breq	.+52     	; 0x230a <GPIO_readPort+0x68>
    22d6:	2c 81       	ldd	r18, Y+4	; 0x04
    22d8:	3d 81       	ldd	r19, Y+5	; 0x05
    22da:	22 30       	cpi	r18, 0x02	; 2
    22dc:	31 05       	cpc	r19, r1
    22de:	2c f4       	brge	.+10     	; 0x22ea <GPIO_readPort+0x48>
    22e0:	8c 81       	ldd	r24, Y+4	; 0x04
    22e2:	9d 81       	ldd	r25, Y+5	; 0x05
    22e4:	00 97       	sbiw	r24, 0x00	; 0
    22e6:	61 f0       	breq	.+24     	; 0x2300 <GPIO_readPort+0x5e>
    22e8:	1e c0       	rjmp	.+60     	; 0x2326 <GPIO_readPort+0x84>
    22ea:	2c 81       	ldd	r18, Y+4	; 0x04
    22ec:	3d 81       	ldd	r19, Y+5	; 0x05
    22ee:	22 30       	cpi	r18, 0x02	; 2
    22f0:	31 05       	cpc	r19, r1
    22f2:	81 f0       	breq	.+32     	; 0x2314 <GPIO_readPort+0x72>
    22f4:	8c 81       	ldd	r24, Y+4	; 0x04
    22f6:	9d 81       	ldd	r25, Y+5	; 0x05
    22f8:	83 30       	cpi	r24, 0x03	; 3
    22fa:	91 05       	cpc	r25, r1
    22fc:	81 f0       	breq	.+32     	; 0x231e <GPIO_readPort+0x7c>
    22fe:	13 c0       	rjmp	.+38     	; 0x2326 <GPIO_readPort+0x84>
		case PORT_A:
			value = PINA;
    2300:	e9 e3       	ldi	r30, 0x39	; 57
    2302:	f0 e0       	ldi	r31, 0x00	; 0
    2304:	80 81       	ld	r24, Z
    2306:	8a 83       	std	Y+2, r24	; 0x02
    2308:	0e c0       	rjmp	.+28     	; 0x2326 <GPIO_readPort+0x84>
			break;
		case PORT_B:
			value = PINB;
    230a:	e6 e3       	ldi	r30, 0x36	; 54
    230c:	f0 e0       	ldi	r31, 0x00	; 0
    230e:	80 81       	ld	r24, Z
    2310:	8a 83       	std	Y+2, r24	; 0x02
    2312:	09 c0       	rjmp	.+18     	; 0x2326 <GPIO_readPort+0x84>
			break;
		case PORT_C:
			value = PINC;
    2314:	e3 e3       	ldi	r30, 0x33	; 51
    2316:	f0 e0       	ldi	r31, 0x00	; 0
    2318:	80 81       	ld	r24, Z
    231a:	8a 83       	std	Y+2, r24	; 0x02
    231c:	04 c0       	rjmp	.+8      	; 0x2326 <GPIO_readPort+0x84>
			break;
		case PORT_D:
			value = PIND;
    231e:	e0 e3       	ldi	r30, 0x30	; 48
    2320:	f0 e0       	ldi	r31, 0x00	; 0
    2322:	80 81       	ld	r24, Z
    2324:	8a 83       	std	Y+2, r24	; 0x02
			break;
		}
	}
	return value;
    2326:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2328:	0f 90       	pop	r0
    232a:	0f 90       	pop	r0
    232c:	0f 90       	pop	r0
    232e:	0f 90       	pop	r0
    2330:	0f 90       	pop	r0
    2332:	cf 91       	pop	r28
    2334:	df 91       	pop	r29
    2336:	08 95       	ret

00002338 <BUTTON_Init>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
BUTTON_Error_t BUTTON_Init(uint8 port_num, uint8 pin_num) {
    2338:	df 93       	push	r29
    233a:	cf 93       	push	r28
    233c:	00 d0       	rcall	.+0      	; 0x233e <BUTTON_Init+0x6>
    233e:	0f 92       	push	r0
    2340:	cd b7       	in	r28, 0x3d	; 61
    2342:	de b7       	in	r29, 0x3e	; 62
    2344:	8a 83       	std	Y+2, r24	; 0x02
    2346:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t BUTTON_Driver_Checker = NULL;
    2348:	19 82       	std	Y+1, r1	; 0x01
	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    234a:	8b 81       	ldd	r24, Y+3	; 0x03
    234c:	88 30       	cpi	r24, 0x08	; 8
    234e:	18 f0       	brcs	.+6      	; 0x2356 <BUTTON_Init+0x1e>
		BUTTON_Driver_Checker = BUTTON_WRONG_PIN_NUMBER;
    2350:	81 e0       	ldi	r24, 0x01	; 1
    2352:	89 83       	std	Y+1, r24	; 0x01
    2354:	0c c0       	rjmp	.+24     	; 0x236e <BUTTON_Init+0x36>
	}
	else if((port_num >= NUM_OF_PORTS)) {
    2356:	8a 81       	ldd	r24, Y+2	; 0x02
    2358:	84 30       	cpi	r24, 0x04	; 4
    235a:	18 f0       	brcs	.+6      	; 0x2362 <BUTTON_Init+0x2a>
		BUTTON_Driver_Checker = BUTTON_WRONG_PORT_NUMBER;
    235c:	82 e0       	ldi	r24, 0x02	; 2
    235e:	89 83       	std	Y+1, r24	; 0x01
    2360:	06 c0       	rjmp	.+12     	; 0x236e <BUTTON_Init+0x36>
	}
	else {
		/* Setup the pin direction as required */
		GPIO_setupPinDirection(port_num, pin_num, PIN_INPUT);
    2362:	8a 81       	ldd	r24, Y+2	; 0x02
    2364:	6b 81       	ldd	r22, Y+3	; 0x03
    2366:	40 e0       	ldi	r20, 0x00	; 0
    2368:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <GPIO_setupPinDirection>
		BUTTON_Driver_Checker = BUTTON_OK;
    236c:	19 82       	std	Y+1, r1	; 0x01
	}
	return BUTTON_Driver_Checker;
    236e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2370:	0f 90       	pop	r0
    2372:	0f 90       	pop	r0
    2374:	0f 90       	pop	r0
    2376:	cf 91       	pop	r28
    2378:	df 91       	pop	r29
    237a:	08 95       	ret

0000237c <BUTTON_Read>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
uint8 BUTTON_Read(uint8 port_num, uint8 pin_num) {
    237c:	df 93       	push	r29
    237e:	cf 93       	push	r28
    2380:	00 d0       	rcall	.+0      	; 0x2382 <BUTTON_Read+0x6>
    2382:	0f 92       	push	r0
    2384:	cd b7       	in	r28, 0x3d	; 61
    2386:	de b7       	in	r29, 0x3e	; 62
    2388:	8a 83       	std	Y+2, r24	; 0x02
    238a:	6b 83       	std	Y+3, r22	; 0x03

	uint8_t BUTTON_Driver_Checker = NULL;
    238c:	19 82       	std	Y+1, r1	; 0x01
		if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    238e:	8b 81       	ldd	r24, Y+3	; 0x03
    2390:	88 30       	cpi	r24, 0x08	; 8
    2392:	18 f0       	brcs	.+6      	; 0x239a <BUTTON_Read+0x1e>
			BUTTON_Driver_Checker = BUTTON_WRONG_PIN_NUMBER;
    2394:	81 e0       	ldi	r24, 0x01	; 1
    2396:	89 83       	std	Y+1, r24	; 0x01
    2398:	0b c0       	rjmp	.+22     	; 0x23b0 <BUTTON_Read+0x34>
		}
		else if((port_num >= NUM_OF_PORTS)) {
    239a:	8a 81       	ldd	r24, Y+2	; 0x02
    239c:	84 30       	cpi	r24, 0x04	; 4
    239e:	18 f0       	brcs	.+6      	; 0x23a6 <BUTTON_Read+0x2a>
			BUTTON_Driver_Checker = BUTTON_WRONG_PORT_NUMBER;
    23a0:	82 e0       	ldi	r24, 0x02	; 2
    23a2:	89 83       	std	Y+1, r24	; 0x01
    23a4:	05 c0       	rjmp	.+10     	; 0x23b0 <BUTTON_Read+0x34>
		}
		else {
			/* Setup the pin direction as required */
			GPIO_readPin(port_num, pin_num);
    23a6:	8a 81       	ldd	r24, Y+2	; 0x02
    23a8:	6b 81       	ldd	r22, Y+3	; 0x03
    23aa:	0e 94 05 10 	call	0x200a	; 0x200a <GPIO_readPin>
			BUTTON_Driver_Checker = BUTTON_OK;
    23ae:	19 82       	std	Y+1, r1	; 0x01
		}
		return GPIO_readPin(port_num, pin_num);
    23b0:	8a 81       	ldd	r24, Y+2	; 0x02
    23b2:	6b 81       	ldd	r22, Y+3	; 0x03
    23b4:	0e 94 05 10 	call	0x200a	; 0x200a <GPIO_readPin>
}
    23b8:	0f 90       	pop	r0
    23ba:	0f 90       	pop	r0
    23bc:	0f 90       	pop	r0
    23be:	cf 91       	pop	r28
    23c0:	df 91       	pop	r29
    23c2:	08 95       	ret

000023c4 <main>:
//#include "../MCAL/BUTTON_DRIVER/BUTTON.h"
//#include "../MCAL/SEVEN-SEGMENT_DRIVER/SEGMENT.h"
//#include "../MCAL/KEYPAD_DRIVER/KEYPAD.h"
#include "../MCAL/LCD_DRIVER/LCD.h"

int main(void) {
    23c4:	df 93       	push	r29
    23c6:	cf 93       	push	r28
    23c8:	cd b7       	in	r28, 0x3d	; 61
    23ca:	de b7       	in	r29, 0x3e	; 62
	// Initializes the screen
	LCD_Init();
    23cc:	0e 94 87 07 	call	0xf0e	; 0xf0e <LCD_Init>
	// Displays messages
	LCD_displayStringRowColumn(0, 2, "Hossam is good");
    23d0:	20 e6       	ldi	r18, 0x60	; 96
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	80 e0       	ldi	r24, 0x00	; 0
    23d6:	62 e0       	ldi	r22, 0x02	; 2
    23d8:	a9 01       	movw	r20, r18
    23da:	0e 94 94 0c 	call	0x1928	; 0x1928 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 2, "and bad");
    23de:	2f e6       	ldi	r18, 0x6F	; 111
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	81 e0       	ldi	r24, 0x01	; 1
    23e4:	62 e0       	ldi	r22, 0x02	; 2
    23e6:	a9 01       	movw	r20, r18
    23e8:	0e 94 94 0c 	call	0x1928	; 0x1928 <LCD_displayStringRowColumn>
    23ec:	ff cf       	rjmp	.-2      	; 0x23ec <main+0x28>

000023ee <__prologue_saves__>:
    23ee:	2f 92       	push	r2
    23f0:	3f 92       	push	r3
    23f2:	4f 92       	push	r4
    23f4:	5f 92       	push	r5
    23f6:	6f 92       	push	r6
    23f8:	7f 92       	push	r7
    23fa:	8f 92       	push	r8
    23fc:	9f 92       	push	r9
    23fe:	af 92       	push	r10
    2400:	bf 92       	push	r11
    2402:	cf 92       	push	r12
    2404:	df 92       	push	r13
    2406:	ef 92       	push	r14
    2408:	ff 92       	push	r15
    240a:	0f 93       	push	r16
    240c:	1f 93       	push	r17
    240e:	cf 93       	push	r28
    2410:	df 93       	push	r29
    2412:	cd b7       	in	r28, 0x3d	; 61
    2414:	de b7       	in	r29, 0x3e	; 62
    2416:	ca 1b       	sub	r28, r26
    2418:	db 0b       	sbc	r29, r27
    241a:	0f b6       	in	r0, 0x3f	; 63
    241c:	f8 94       	cli
    241e:	de bf       	out	0x3e, r29	; 62
    2420:	0f be       	out	0x3f, r0	; 63
    2422:	cd bf       	out	0x3d, r28	; 61
    2424:	09 94       	ijmp

00002426 <__epilogue_restores__>:
    2426:	2a 88       	ldd	r2, Y+18	; 0x12
    2428:	39 88       	ldd	r3, Y+17	; 0x11
    242a:	48 88       	ldd	r4, Y+16	; 0x10
    242c:	5f 84       	ldd	r5, Y+15	; 0x0f
    242e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2430:	7d 84       	ldd	r7, Y+13	; 0x0d
    2432:	8c 84       	ldd	r8, Y+12	; 0x0c
    2434:	9b 84       	ldd	r9, Y+11	; 0x0b
    2436:	aa 84       	ldd	r10, Y+10	; 0x0a
    2438:	b9 84       	ldd	r11, Y+9	; 0x09
    243a:	c8 84       	ldd	r12, Y+8	; 0x08
    243c:	df 80       	ldd	r13, Y+7	; 0x07
    243e:	ee 80       	ldd	r14, Y+6	; 0x06
    2440:	fd 80       	ldd	r15, Y+5	; 0x05
    2442:	0c 81       	ldd	r16, Y+4	; 0x04
    2444:	1b 81       	ldd	r17, Y+3	; 0x03
    2446:	aa 81       	ldd	r26, Y+2	; 0x02
    2448:	b9 81       	ldd	r27, Y+1	; 0x01
    244a:	ce 0f       	add	r28, r30
    244c:	d1 1d       	adc	r29, r1
    244e:	0f b6       	in	r0, 0x3f	; 63
    2450:	f8 94       	cli
    2452:	de bf       	out	0x3e, r29	; 62
    2454:	0f be       	out	0x3f, r0	; 63
    2456:	cd bf       	out	0x3d, r28	; 61
    2458:	ed 01       	movw	r28, r26
    245a:	08 95       	ret

0000245c <itoa>:
    245c:	fb 01       	movw	r30, r22
    245e:	9f 01       	movw	r18, r30
    2460:	e8 94       	clt
    2462:	42 30       	cpi	r20, 0x02	; 2
    2464:	c4 f0       	brlt	.+48     	; 0x2496 <itoa+0x3a>
    2466:	45 32       	cpi	r20, 0x25	; 37
    2468:	b4 f4       	brge	.+44     	; 0x2496 <itoa+0x3a>
    246a:	4a 30       	cpi	r20, 0x0A	; 10
    246c:	29 f4       	brne	.+10     	; 0x2478 <itoa+0x1c>
    246e:	97 fb       	bst	r25, 7
    2470:	1e f4       	brtc	.+6      	; 0x2478 <itoa+0x1c>
    2472:	90 95       	com	r25
    2474:	81 95       	neg	r24
    2476:	9f 4f       	sbci	r25, 0xFF	; 255
    2478:	64 2f       	mov	r22, r20
    247a:	77 27       	eor	r23, r23
    247c:	0e 94 5f 12 	call	0x24be	; 0x24be <__udivmodhi4>
    2480:	80 5d       	subi	r24, 0xD0	; 208
    2482:	8a 33       	cpi	r24, 0x3A	; 58
    2484:	0c f0       	brlt	.+2      	; 0x2488 <itoa+0x2c>
    2486:	89 5d       	subi	r24, 0xD9	; 217
    2488:	81 93       	st	Z+, r24
    248a:	cb 01       	movw	r24, r22
    248c:	00 97       	sbiw	r24, 0x00	; 0
    248e:	a1 f7       	brne	.-24     	; 0x2478 <itoa+0x1c>
    2490:	16 f4       	brtc	.+4      	; 0x2496 <itoa+0x3a>
    2492:	5d e2       	ldi	r21, 0x2D	; 45
    2494:	51 93       	st	Z+, r21
    2496:	10 82       	st	Z, r1
    2498:	c9 01       	movw	r24, r18
    249a:	0c 94 4f 12 	jmp	0x249e	; 0x249e <strrev>

0000249e <strrev>:
    249e:	dc 01       	movw	r26, r24
    24a0:	fc 01       	movw	r30, r24
    24a2:	67 2f       	mov	r22, r23
    24a4:	71 91       	ld	r23, Z+
    24a6:	77 23       	and	r23, r23
    24a8:	e1 f7       	brne	.-8      	; 0x24a2 <strrev+0x4>
    24aa:	32 97       	sbiw	r30, 0x02	; 2
    24ac:	04 c0       	rjmp	.+8      	; 0x24b6 <strrev+0x18>
    24ae:	7c 91       	ld	r23, X
    24b0:	6d 93       	st	X+, r22
    24b2:	70 83       	st	Z, r23
    24b4:	62 91       	ld	r22, -Z
    24b6:	ae 17       	cp	r26, r30
    24b8:	bf 07       	cpc	r27, r31
    24ba:	c8 f3       	brcs	.-14     	; 0x24ae <strrev+0x10>
    24bc:	08 95       	ret

000024be <__udivmodhi4>:
    24be:	aa 1b       	sub	r26, r26
    24c0:	bb 1b       	sub	r27, r27
    24c2:	51 e1       	ldi	r21, 0x11	; 17
    24c4:	07 c0       	rjmp	.+14     	; 0x24d4 <__udivmodhi4_ep>

000024c6 <__udivmodhi4_loop>:
    24c6:	aa 1f       	adc	r26, r26
    24c8:	bb 1f       	adc	r27, r27
    24ca:	a6 17       	cp	r26, r22
    24cc:	b7 07       	cpc	r27, r23
    24ce:	10 f0       	brcs	.+4      	; 0x24d4 <__udivmodhi4_ep>
    24d0:	a6 1b       	sub	r26, r22
    24d2:	b7 0b       	sbc	r27, r23

000024d4 <__udivmodhi4_ep>:
    24d4:	88 1f       	adc	r24, r24
    24d6:	99 1f       	adc	r25, r25
    24d8:	5a 95       	dec	r21
    24da:	a9 f7       	brne	.-22     	; 0x24c6 <__udivmodhi4_loop>
    24dc:	80 95       	com	r24
    24de:	90 95       	com	r25
    24e0:	bc 01       	movw	r22, r24
    24e2:	cd 01       	movw	r24, r26
    24e4:	08 95       	ret

000024e6 <_exit>:
    24e6:	f8 94       	cli

000024e8 <__stop_program>:
    24e8:	ff cf       	rjmp	.-2      	; 0x24e8 <__stop_program>
