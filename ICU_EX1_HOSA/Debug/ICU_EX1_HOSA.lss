
ICU_EX1_HOSA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000032fe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000116  00800060  000032fe  00003372  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00003a8c  00000000  00000000  00003488  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001a7c  00000000  00000000  00006f14  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  00008990  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f2  00000000  00000000  00008b30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240b  00000000  00000000  00008d22  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001386  00000000  00000000  0000b12d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d6  00000000  00000000  0000c4b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000d68c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  0000d84c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096e  00000000  00000000  0000db42  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000e4b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ef       	ldi	r30, 0xFE	; 254
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 b9 18 	call	0x3172	; 0x3172 <main>
      7a:	0c 94 7d 19 	jmp	0x32fa	; 0x32fa <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 01 19 	jmp	0x3202	; 0x3202 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ad e6       	ldi	r26, 0x6D	; 109
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 1d 19 	jmp	0x323a	; 0x323a <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 0d 19 	jmp	0x321a	; 0x321a <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 29 19 	jmp	0x3252	; 0x3252 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 0d 19 	jmp	0x321a	; 0x321a <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 29 19 	jmp	0x3252	; 0x3252 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 01 19 	jmp	0x3202	; 0x3202 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	8d e6       	ldi	r24, 0x6D	; 109
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 1d 19 	jmp	0x323a	; 0x323a <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 09 19 	jmp	0x3212	; 0x3212 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6d e6       	ldi	r22, 0x6D	; 109
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 25 19 	jmp	0x324a	; 0x324a <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 0d 19 	jmp	0x321a	; 0x321a <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 29 19 	jmp	0x3252	; 0x3252 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 0d 19 	jmp	0x321a	; 0x321a <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 29 19 	jmp	0x3252	; 0x3252 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 0d 19 	jmp	0x321a	; 0x321a <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__ltsf2+0x56>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__ltsf2+0x56>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__ltsf2+0x58>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 29 19 	jmp	0x3252	; 0x3252 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 11 19 	jmp	0x3222	; 0x3222 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 2d 19 	jmp	0x325a	; 0x325a <__epilogue_restores__+0x20>

00000942 <__floatunsisf>:
     942:	a8 e0       	ldi	r26, 0x08	; 8
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 09 19 	jmp	0x3212	; 0x3212 <__prologue_saves__+0x10>
     94e:	7b 01       	movw	r14, r22
     950:	8c 01       	movw	r16, r24
     952:	61 15       	cp	r22, r1
     954:	71 05       	cpc	r23, r1
     956:	81 05       	cpc	r24, r1
     958:	91 05       	cpc	r25, r1
     95a:	19 f4       	brne	.+6      	; 0x962 <__floatunsisf+0x20>
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	60 c0       	rjmp	.+192    	; 0xa22 <__floatunsisf+0xe0>
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	8e e1       	ldi	r24, 0x1E	; 30
     968:	c8 2e       	mov	r12, r24
     96a:	d1 2c       	mov	r13, r1
     96c:	dc 82       	std	Y+4, r13	; 0x04
     96e:	cb 82       	std	Y+3, r12	; 0x03
     970:	ed 82       	std	Y+5, r14	; 0x05
     972:	fe 82       	std	Y+6, r15	; 0x06
     974:	0f 83       	std	Y+7, r16	; 0x07
     976:	18 87       	std	Y+8, r17	; 0x08
     978:	c8 01       	movw	r24, r16
     97a:	b7 01       	movw	r22, r14
     97c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__clzsi2>
     980:	fc 01       	movw	r30, r24
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	f7 ff       	sbrs	r31, 7
     986:	3b c0       	rjmp	.+118    	; 0x9fe <__floatunsisf+0xbc>
     988:	22 27       	eor	r18, r18
     98a:	33 27       	eor	r19, r19
     98c:	2e 1b       	sub	r18, r30
     98e:	3f 0b       	sbc	r19, r31
     990:	57 01       	movw	r10, r14
     992:	68 01       	movw	r12, r16
     994:	02 2e       	mov	r0, r18
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatunsisf+0x5e>
     998:	d6 94       	lsr	r13
     99a:	c7 94       	ror	r12
     99c:	b7 94       	ror	r11
     99e:	a7 94       	ror	r10
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatunsisf+0x56>
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0x7c>
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	aa 1f       	adc	r26, r26
     9bc:	bb 1f       	adc	r27, r27
     9be:	2a 95       	dec	r18
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0x74>
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	a1 09       	sbc	r26, r1
     9c6:	b1 09       	sbc	r27, r1
     9c8:	8e 21       	and	r24, r14
     9ca:	9f 21       	and	r25, r15
     9cc:	a0 23       	and	r26, r16
     9ce:	b1 23       	and	r27, r17
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	a1 05       	cpc	r26, r1
     9d4:	b1 05       	cpc	r27, r1
     9d6:	21 f0       	breq	.+8      	; 0x9e0 <__floatunsisf+0x9e>
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	4a 29       	or	r20, r10
     9e2:	5b 29       	or	r21, r11
     9e4:	6c 29       	or	r22, r12
     9e6:	7d 29       	or	r23, r13
     9e8:	4d 83       	std	Y+5, r20	; 0x05
     9ea:	5e 83       	std	Y+6, r21	; 0x06
     9ec:	6f 83       	std	Y+7, r22	; 0x07
     9ee:	78 87       	std	Y+8, r23	; 0x08
     9f0:	8e e1       	ldi	r24, 0x1E	; 30
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	8e 1b       	sub	r24, r30
     9f6:	9f 0b       	sbc	r25, r31
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	12 c0       	rjmp	.+36     	; 0xa22 <__floatunsisf+0xe0>
     9fe:	30 97       	sbiw	r30, 0x00	; 0
     a00:	81 f0       	breq	.+32     	; 0xa22 <__floatunsisf+0xe0>
     a02:	0e 2e       	mov	r0, r30
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__floatunsisf+0xcc>
     a06:	ee 0c       	add	r14, r14
     a08:	ff 1c       	adc	r15, r15
     a0a:	00 1f       	adc	r16, r16
     a0c:	11 1f       	adc	r17, r17
     a0e:	0a 94       	dec	r0
     a10:	d2 f7       	brpl	.-12     	; 0xa06 <__floatunsisf+0xc4>
     a12:	ed 82       	std	Y+5, r14	; 0x05
     a14:	fe 82       	std	Y+6, r15	; 0x06
     a16:	0f 83       	std	Y+7, r16	; 0x07
     a18:	18 87       	std	Y+8, r17	; 0x08
     a1a:	ce 1a       	sub	r12, r30
     a1c:	df 0a       	sbc	r13, r31
     a1e:	dc 82       	std	Y+4, r13	; 0x04
     a20:	cb 82       	std	Y+3, r12	; 0x03
     a22:	1a 82       	std	Y+2, r1	; 0x02
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     a2c:	28 96       	adiw	r28, 0x08	; 8
     a2e:	ea e0       	ldi	r30, 0x0A	; 10
     a30:	0c 94 25 19 	jmp	0x324a	; 0x324a <__epilogue_restores__+0x10>

00000a34 <__clzsi2>:
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	7b 01       	movw	r14, r22
     a3e:	8c 01       	movw	r16, r24
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	e8 16       	cp	r14, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	f8 06       	cpc	r15, r24
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	08 07       	cpc	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	18 07       	cpc	r17, r24
     a50:	88 f4       	brcc	.+34     	; 0xa74 <__clzsi2+0x40>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	e8 16       	cp	r14, r24
     a56:	f1 04       	cpc	r15, r1
     a58:	01 05       	cpc	r16, r1
     a5a:	11 05       	cpc	r17, r1
     a5c:	31 f0       	breq	.+12     	; 0xa6a <__clzsi2+0x36>
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x36>
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	17 c0       	rjmp	.+46     	; 0xa98 <__clzsi2+0x64>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	12 c0       	rjmp	.+36     	; 0xa98 <__clzsi2+0x64>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	e8 16       	cp	r14, r24
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	f8 06       	cpc	r15, r24
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 07       	cpc	r16, r24
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	18 07       	cpc	r17, r24
     a84:	28 f0       	brcs	.+10     	; 0xa90 <__clzsi2+0x5c>
     a86:	88 e1       	ldi	r24, 0x18	; 24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__clzsi2+0x64>
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	20 e2       	ldi	r18, 0x20	; 32
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	28 1b       	sub	r18, r24
     aa2:	39 0b       	sbc	r19, r25
     aa4:	4a 0b       	sbc	r20, r26
     aa6:	5b 0b       	sbc	r21, r27
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__clzsi2+0x7e>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	8a 95       	dec	r24
     ab4:	d2 f7       	brpl	.-12     	; 0xaaa <__clzsi2+0x76>
     ab6:	f7 01       	movw	r30, r14
     ab8:	eb 58       	subi	r30, 0x8B	; 139
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	80 81       	ld	r24, Z
     abe:	28 1b       	sub	r18, r24
     ac0:	31 09       	sbc	r19, r1
     ac2:	41 09       	sbc	r20, r1
     ac4:	51 09       	sbc	r21, r1
     ac6:	c9 01       	movw	r24, r18
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <__pack_f>:
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	fc 01       	movw	r30, r24
     ade:	e4 80       	ldd	r14, Z+4	; 0x04
     ae0:	f5 80       	ldd	r15, Z+5	; 0x05
     ae2:	06 81       	ldd	r16, Z+6	; 0x06
     ae4:	17 81       	ldd	r17, Z+7	; 0x07
     ae6:	d1 80       	ldd	r13, Z+1	; 0x01
     ae8:	80 81       	ld	r24, Z
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	48 f4       	brcc	.+18     	; 0xb00 <__pack_f+0x2e>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e1       	ldi	r26, 0x10	; 16
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	e8 2a       	or	r14, r24
     af8:	f9 2a       	or	r15, r25
     afa:	0a 2b       	or	r16, r26
     afc:	1b 2b       	or	r17, r27
     afe:	a5 c0       	rjmp	.+330    	; 0xc4a <__pack_f+0x178>
     b00:	84 30       	cpi	r24, 0x04	; 4
     b02:	09 f4       	brne	.+2      	; 0xb06 <__pack_f+0x34>
     b04:	9f c0       	rjmp	.+318    	; 0xc44 <__pack_f+0x172>
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	21 f4       	brne	.+8      	; 0xb12 <__pack_f+0x40>
     b0a:	ee 24       	eor	r14, r14
     b0c:	ff 24       	eor	r15, r15
     b0e:	87 01       	movw	r16, r14
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <__pack_f+0x4a>
     b12:	e1 14       	cp	r14, r1
     b14:	f1 04       	cpc	r15, r1
     b16:	01 05       	cpc	r16, r1
     b18:	11 05       	cpc	r17, r1
     b1a:	19 f4       	brne	.+6      	; 0xb22 <__pack_f+0x50>
     b1c:	e0 e0       	ldi	r30, 0x00	; 0
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	96 c0       	rjmp	.+300    	; 0xc4e <__pack_f+0x17c>
     b22:	62 81       	ldd	r22, Z+2	; 0x02
     b24:	73 81       	ldd	r23, Z+3	; 0x03
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	62 38       	cpi	r22, 0x82	; 130
     b2a:	79 07       	cpc	r23, r25
     b2c:	0c f0       	brlt	.+2      	; 0xb30 <__pack_f+0x5e>
     b2e:	5b c0       	rjmp	.+182    	; 0xbe6 <__pack_f+0x114>
     b30:	22 e8       	ldi	r18, 0x82	; 130
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	26 1b       	sub	r18, r22
     b36:	37 0b       	sbc	r19, r23
     b38:	2a 31       	cpi	r18, 0x1A	; 26
     b3a:	31 05       	cpc	r19, r1
     b3c:	2c f0       	brlt	.+10     	; 0xb48 <__pack_f+0x76>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	2a c0       	rjmp	.+84     	; 0xb9c <__pack_f+0xca>
     b48:	b8 01       	movw	r22, r16
     b4a:	a7 01       	movw	r20, r14
     b4c:	02 2e       	mov	r0, r18
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <__pack_f+0x86>
     b50:	76 95       	lsr	r23
     b52:	67 95       	ror	r22
     b54:	57 95       	ror	r21
     b56:	47 95       	ror	r20
     b58:	0a 94       	dec	r0
     b5a:	d2 f7       	brpl	.-12     	; 0xb50 <__pack_f+0x7e>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x9c>
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	aa 1f       	adc	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	2a 95       	dec	r18
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__pack_f+0x94>
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	a1 09       	sbc	r26, r1
     b76:	b1 09       	sbc	r27, r1
     b78:	8e 21       	and	r24, r14
     b7a:	9f 21       	and	r25, r15
     b7c:	a0 23       	and	r26, r16
     b7e:	b1 23       	and	r27, r17
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	a1 05       	cpc	r26, r1
     b84:	b1 05       	cpc	r27, r1
     b86:	21 f0       	breq	.+8      	; 0xb90 <__pack_f+0xbe>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	9a 01       	movw	r18, r20
     b92:	ab 01       	movw	r20, r22
     b94:	28 2b       	or	r18, r24
     b96:	39 2b       	or	r19, r25
     b98:	4a 2b       	or	r20, r26
     b9a:	5b 2b       	or	r21, r27
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	8f 77       	andi	r24, 0x7F	; 127
     ba2:	90 70       	andi	r25, 0x00	; 0
     ba4:	a0 70       	andi	r26, 0x00	; 0
     ba6:	b0 70       	andi	r27, 0x00	; 0
     ba8:	80 34       	cpi	r24, 0x40	; 64
     baa:	91 05       	cpc	r25, r1
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <__pack_f+0xee>
     bb2:	27 ff       	sbrs	r18, 7
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <__pack_f+0xf6>
     bb6:	20 5c       	subi	r18, 0xC0	; 192
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	4f 4f       	sbci	r20, 0xFF	; 255
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0xf6>
     bc0:	21 5c       	subi	r18, 0xC1	; 193
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	4f 4f       	sbci	r20, 0xFF	; 255
     bc6:	5f 4f       	sbci	r21, 0xFF	; 255
     bc8:	e0 e0       	ldi	r30, 0x00	; 0
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	20 30       	cpi	r18, 0x00	; 0
     bce:	a0 e0       	ldi	r26, 0x00	; 0
     bd0:	3a 07       	cpc	r19, r26
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	4a 07       	cpc	r20, r26
     bd6:	a0 e4       	ldi	r26, 0x40	; 64
     bd8:	5a 07       	cpc	r21, r26
     bda:	10 f0       	brcs	.+4      	; 0xbe0 <__pack_f+0x10e>
     bdc:	e1 e0       	ldi	r30, 0x01	; 1
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	79 01       	movw	r14, r18
     be2:	8a 01       	movw	r16, r20
     be4:	27 c0       	rjmp	.+78     	; 0xc34 <__pack_f+0x162>
     be6:	60 38       	cpi	r22, 0x80	; 128
     be8:	71 05       	cpc	r23, r1
     bea:	64 f5       	brge	.+88     	; 0xc44 <__pack_f+0x172>
     bec:	fb 01       	movw	r30, r22
     bee:	e1 58       	subi	r30, 0x81	; 129
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	d8 01       	movw	r26, r16
     bf4:	c7 01       	movw	r24, r14
     bf6:	8f 77       	andi	r24, 0x7F	; 127
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	a0 70       	andi	r26, 0x00	; 0
     bfc:	b0 70       	andi	r27, 0x00	; 0
     bfe:	80 34       	cpi	r24, 0x40	; 64
     c00:	91 05       	cpc	r25, r1
     c02:	a1 05       	cpc	r26, r1
     c04:	b1 05       	cpc	r27, r1
     c06:	39 f4       	brne	.+14     	; 0xc16 <__pack_f+0x144>
     c08:	e7 fe       	sbrs	r14, 7
     c0a:	0d c0       	rjmp	.+26     	; 0xc26 <__pack_f+0x154>
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <__pack_f+0x14c>
     c16:	8f e3       	ldi	r24, 0x3F	; 63
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e8 0e       	add	r14, r24
     c20:	f9 1e       	adc	r15, r25
     c22:	0a 1f       	adc	r16, r26
     c24:	1b 1f       	adc	r17, r27
     c26:	17 ff       	sbrs	r17, 7
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <__pack_f+0x162>
     c2a:	16 95       	lsr	r17
     c2c:	07 95       	ror	r16
     c2e:	f7 94       	ror	r15
     c30:	e7 94       	ror	r14
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	87 e0       	ldi	r24, 0x07	; 7
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d1 f7       	brne	.-12     	; 0xc36 <__pack_f+0x164>
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <__pack_f+0x17c>
     c44:	ee 24       	eor	r14, r14
     c46:	ff 24       	eor	r15, r15
     c48:	87 01       	movw	r16, r14
     c4a:	ef ef       	ldi	r30, 0xFF	; 255
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	6e 2f       	mov	r22, r30
     c50:	67 95       	ror	r22
     c52:	66 27       	eor	r22, r22
     c54:	67 95       	ror	r22
     c56:	90 2f       	mov	r25, r16
     c58:	9f 77       	andi	r25, 0x7F	; 127
     c5a:	d7 94       	ror	r13
     c5c:	dd 24       	eor	r13, r13
     c5e:	d7 94       	ror	r13
     c60:	8e 2f       	mov	r24, r30
     c62:	86 95       	lsr	r24
     c64:	49 2f       	mov	r20, r25
     c66:	46 2b       	or	r20, r22
     c68:	58 2f       	mov	r21, r24
     c6a:	5d 29       	or	r21, r13
     c6c:	b7 01       	movw	r22, r14
     c6e:	ca 01       	movw	r24, r20
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	08 95       	ret

00000c7c <__unpack_f>:
     c7c:	fc 01       	movw	r30, r24
     c7e:	db 01       	movw	r26, r22
     c80:	40 81       	ld	r20, Z
     c82:	51 81       	ldd	r21, Z+1	; 0x01
     c84:	22 81       	ldd	r18, Z+2	; 0x02
     c86:	62 2f       	mov	r22, r18
     c88:	6f 77       	andi	r22, 0x7F	; 127
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	22 1f       	adc	r18, r18
     c8e:	22 27       	eor	r18, r18
     c90:	22 1f       	adc	r18, r18
     c92:	93 81       	ldd	r25, Z+3	; 0x03
     c94:	89 2f       	mov	r24, r25
     c96:	88 0f       	add	r24, r24
     c98:	82 2b       	or	r24, r18
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	99 1f       	adc	r25, r25
     ca0:	99 27       	eor	r25, r25
     ca2:	99 1f       	adc	r25, r25
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	9c 93       	st	X, r25
     ca8:	11 97       	sbiw	r26, 0x01	; 1
     caa:	21 15       	cp	r18, r1
     cac:	31 05       	cpc	r19, r1
     cae:	a9 f5       	brne	.+106    	; 0xd1a <__unpack_f+0x9e>
     cb0:	41 15       	cp	r20, r1
     cb2:	51 05       	cpc	r21, r1
     cb4:	61 05       	cpc	r22, r1
     cb6:	71 05       	cpc	r23, r1
     cb8:	11 f4       	brne	.+4      	; 0xcbe <__unpack_f+0x42>
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	37 c0       	rjmp	.+110    	; 0xd2c <__unpack_f+0xb0>
     cbe:	82 e8       	ldi	r24, 0x82	; 130
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	13 96       	adiw	r26, 0x03	; 3
     cc4:	9c 93       	st	X, r25
     cc6:	8e 93       	st	-X, r24
     cc8:	12 97       	sbiw	r26, 0x02	; 2
     cca:	9a 01       	movw	r18, r20
     ccc:	ab 01       	movw	r20, r22
     cce:	67 e0       	ldi	r22, 0x07	; 7
     cd0:	22 0f       	add	r18, r18
     cd2:	33 1f       	adc	r19, r19
     cd4:	44 1f       	adc	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	6a 95       	dec	r22
     cda:	d1 f7       	brne	.-12     	; 0xcd0 <__unpack_f+0x54>
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	8c 93       	st	X, r24
     ce0:	0d c0       	rjmp	.+26     	; 0xcfc <__unpack_f+0x80>
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	44 1f       	adc	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	8d 91       	ld	r24, X+
     cee:	9c 91       	ld	r25, X
     cf0:	13 97       	sbiw	r26, 0x03	; 3
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	9c 93       	st	X, r25
     cf8:	8e 93       	st	-X, r24
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	20 30       	cpi	r18, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	38 07       	cpc	r19, r24
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	48 07       	cpc	r20, r24
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	58 07       	cpc	r21, r24
     d0a:	58 f3       	brcs	.-42     	; 0xce2 <__unpack_f+0x66>
     d0c:	14 96       	adiw	r26, 0x04	; 4
     d0e:	2d 93       	st	X+, r18
     d10:	3d 93       	st	X+, r19
     d12:	4d 93       	st	X+, r20
     d14:	5c 93       	st	X, r21
     d16:	17 97       	sbiw	r26, 0x07	; 7
     d18:	08 95       	ret
     d1a:	2f 3f       	cpi	r18, 0xFF	; 255
     d1c:	31 05       	cpc	r19, r1
     d1e:	79 f4       	brne	.+30     	; 0xd3e <__unpack_f+0xc2>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	19 f4       	brne	.+6      	; 0xd30 <__unpack_f+0xb4>
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	8c 93       	st	X, r24
     d2e:	08 95       	ret
     d30:	64 ff       	sbrs	r22, 4
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <__unpack_f+0xbe>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	8c 93       	st	X, r24
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <__unpack_f+0xe2>
     d3a:	1c 92       	st	X, r1
     d3c:	10 c0       	rjmp	.+32     	; 0xd5e <__unpack_f+0xe2>
     d3e:	2f 57       	subi	r18, 0x7F	; 127
     d40:	30 40       	sbci	r19, 0x00	; 0
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	3c 93       	st	X, r19
     d46:	2e 93       	st	-X, r18
     d48:	12 97       	sbiw	r26, 0x02	; 2
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	8c 93       	st	X, r24
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	66 1f       	adc	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	8a 95       	dec	r24
     d5a:	d1 f7       	brne	.-12     	; 0xd50 <__unpack_f+0xd4>
     d5c:	70 64       	ori	r23, 0x40	; 64
     d5e:	14 96       	adiw	r26, 0x04	; 4
     d60:	4d 93       	st	X+, r20
     d62:	5d 93       	st	X+, r21
     d64:	6d 93       	st	X+, r22
     d66:	7c 93       	st	X, r23
     d68:	17 97       	sbiw	r26, 0x07	; 7
     d6a:	08 95       	ret

00000d6c <__fpcmp_parts_f>:
     d6c:	1f 93       	push	r17
     d6e:	dc 01       	movw	r26, r24
     d70:	fb 01       	movw	r30, r22
     d72:	9c 91       	ld	r25, X
     d74:	92 30       	cpi	r25, 0x02	; 2
     d76:	08 f4       	brcc	.+2      	; 0xd7a <__fpcmp_parts_f+0xe>
     d78:	47 c0       	rjmp	.+142    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d7a:	80 81       	ld	r24, Z
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <__fpcmp_parts_f+0x16>
     d80:	43 c0       	rjmp	.+134    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d82:	94 30       	cpi	r25, 0x04	; 4
     d84:	51 f4       	brne	.+20     	; 0xd9a <__fpcmp_parts_f+0x2e>
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	1c 91       	ld	r17, X
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	99 f5       	brne	.+102    	; 0xdf4 <__fpcmp_parts_f+0x88>
     d8e:	81 81       	ldd	r24, Z+1	; 0x01
     d90:	68 2f       	mov	r22, r24
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	61 1b       	sub	r22, r17
     d96:	71 09       	sbc	r23, r1
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <__fpcmp_parts_f+0xac>
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	21 f0       	breq	.+8      	; 0xda6 <__fpcmp_parts_f+0x3a>
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	31 f4       	brne	.+12     	; 0xdae <__fpcmp_parts_f+0x42>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	b9 f1       	breq	.+110    	; 0xe14 <__fpcmp_parts_f+0xa8>
     da6:	81 81       	ldd	r24, Z+1	; 0x01
     da8:	88 23       	and	r24, r24
     daa:	89 f1       	breq	.+98     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dac:	2d c0       	rjmp	.+90     	; 0xe08 <__fpcmp_parts_f+0x9c>
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	1c 91       	ld	r17, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	f1 f0       	breq	.+60     	; 0xdf4 <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	18 17       	cp	r17, r24
     dbc:	d9 f4       	brne	.+54     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	2d 91       	ld	r18, X+
     dc2:	3c 91       	ld	r19, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	82 17       	cp	r24, r18
     dcc:	93 07       	cpc	r25, r19
     dce:	94 f0       	brlt	.+36     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	bc f0       	brlt	.+46     	; 0xe04 <__fpcmp_parts_f+0x98>
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	8d 91       	ld	r24, X+
     dda:	9d 91       	ld	r25, X+
     ddc:	0d 90       	ld	r0, X+
     dde:	bc 91       	ld	r27, X
     de0:	a0 2d       	mov	r26, r0
     de2:	24 81       	ldd	r18, Z+4	; 0x04
     de4:	35 81       	ldd	r19, Z+5	; 0x05
     de6:	46 81       	ldd	r20, Z+6	; 0x06
     de8:	57 81       	ldd	r21, Z+7	; 0x07
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	4a 07       	cpc	r20, r26
     df0:	5b 07       	cpc	r21, r27
     df2:	18 f4       	brcc	.+6      	; 0xdfa <__fpcmp_parts_f+0x8e>
     df4:	11 23       	and	r17, r17
     df6:	41 f0       	breq	.+16     	; 0xe08 <__fpcmp_parts_f+0x9c>
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	a4 07       	cpc	r26, r20
     e00:	b5 07       	cpc	r27, r21
     e02:	40 f4       	brcc	.+16     	; 0xe14 <__fpcmp_parts_f+0xa8>
     e04:	11 23       	and	r17, r17
     e06:	19 f0       	breq	.+6      	; 0xe0e <__fpcmp_parts_f+0xa2>
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <__fpcmp_parts_f+0xac>
     e0e:	6f ef       	ldi	r22, 0xFF	; 255
     e10:	7f ef       	ldi	r23, 0xFF	; 255
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <__fpcmp_parts_f+0xac>
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	cb 01       	movw	r24, r22
     e1a:	1f 91       	pop	r17
     e1c:	08 95       	ret

00000e1e <ICU_Init>:
#include <util/delay.h>
//#include <avr/interrupt.h>


// Initializes and enables the ADC Module to start functionality
void ICU_Init(void) {
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
	 * 2 – FOC1B: Force Output Compare for Compare unit B
	 * 1:0 – WGM11:0: Waveform Generation Mode
	 */

	// Clears COM1A1:0 to '00', I want normal mode
	CLR_BIT(TCCR1A, COM1A1);
     e26:	af e4       	ldi	r26, 0x4F	; 79
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	ef e4       	ldi	r30, 0x4F	; 79
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	8f 77       	andi	r24, 0x7F	; 127
     e32:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, COM1A0);
     e34:	af e4       	ldi	r26, 0x4F	; 79
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	ef e4       	ldi	r30, 0x4F	; 79
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
     e3e:	8f 7b       	andi	r24, 0xBF	; 191
     e40:	8c 93       	st	X, r24

	// Clears COM1B1:0 to '00', I want normal mode
	CLR_BIT(TCCR1A, COM1B1);
     e42:	af e4       	ldi	r26, 0x4F	; 79
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	ef e4       	ldi	r30, 0x4F	; 79
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	8f 7d       	andi	r24, 0xDF	; 223
     e4e:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, COM1B0);
     e50:	af e4       	ldi	r26, 0x4F	; 79
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	ef e4       	ldi	r30, 0x4F	; 79
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	8f 7e       	andi	r24, 0xEF	; 239
     e5c:	8c 93       	st	X, r24

	// Sets FOC1A to '1', I'm in normal mode
	SET_BIT(TCCR1A, FOC1A);
     e5e:	af e4       	ldi	r26, 0x4F	; 79
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	ef e4       	ldi	r30, 0x4F	; 79
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	88 60       	ori	r24, 0x08	; 8
     e6a:	8c 93       	st	X, r24

	// Sets FOC1A to '1', I'm in normal mode
	SET_BIT(TCCR1A, FOC1B);
     e6c:	af e4       	ldi	r26, 0x4F	; 79
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	ef e4       	ldi	r30, 0x4F	; 79
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	84 60       	ori	r24, 0x04	; 4
     e78:	8c 93       	st	X, r24

	// Clears COM1B1:0 to '00', I want normal mode
	CLR_BIT(TCCR1A, WGM11);
     e7a:	af e4       	ldi	r26, 0x4F	; 79
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	ef e4       	ldi	r30, 0x4F	; 79
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	8d 7f       	andi	r24, 0xFD	; 253
     e86:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, WGM10);
     e88:	af e4       	ldi	r26, 0x4F	; 79
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	ef e4       	ldi	r30, 0x4F	; 79
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	8e 7f       	andi	r24, 0xFE	; 254
     e94:	8c 93       	st	X, r24
	 * Bit 4:3 – WGM13:2: Waveform Generation Mode
	 * Bit 2:0 – CS12:0: Clock Select
	 */

	// Clears ICNC1 to '0', I DONT want the noise canceling
	CLR_BIT(TCCR1B, ICNC1);
     e96:	ae e4       	ldi	r26, 0x4E	; 78
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	ee e4       	ldi	r30, 0x4E	; 78
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	8f 77       	andi	r24, 0x7F	; 127
     ea2:	8c 93       	st	X, r24

	// Sets ICES1 to '1', I want the rising edge
	SET_BIT(TCCR1B, ICES1);
     ea4:	ae e4       	ldi	r26, 0x4E	; 78
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	ee e4       	ldi	r30, 0x4E	; 78
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	80 64       	ori	r24, 0x40	; 64
     eb0:	8c 93       	st	X, r24

	// Sets CS12:0 to '001', nO PRESCALING
	CLR_BIT(TCCR1B, CS12);
     eb2:	ae e4       	ldi	r26, 0x4E	; 78
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	ee e4       	ldi	r30, 0x4E	; 78
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	8b 7f       	andi	r24, 0xFB	; 251
     ebe:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, CS11);
     ec0:	ae e4       	ldi	r26, 0x4E	; 78
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	ee e4       	ldi	r30, 0x4E	; 78
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	8d 7f       	andi	r24, 0xFD	; 253
     ecc:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, CS10);
     ece:	ae e4       	ldi	r26, 0x4E	; 78
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	ee e4       	ldi	r30, 0x4E	; 78
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	81 60       	ori	r24, 0x01	; 1
     eda:	8c 93       	st	X, r24

	// Clears TCNT1 to '0', Initialize to '0'
	TCNT1 = 0;
     edc:	ec e4       	ldi	r30, 0x4C	; 76
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	11 82       	std	Z+1, r1	; 0x01
     ee2:	10 82       	st	Z, r1

	// Clears ICR1 to '0', Initialize to '0'
	ICR1 = 0;
     ee4:	e6 e4       	ldi	r30, 0x46	; 70
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	11 82       	std	Z+1, r1	; 0x01
     eea:	10 82       	st	Z, r1
	 */

	// TIMSK1 |= (1 << TICIE1);
	// SREG |= (1 << 7);

}
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <GPIO_setupPinDirection>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
GPIO_Error_t GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction) {
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <GPIO_setupPinDirection+0x6>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <GPIO_setupPinDirection+0x8>
     efa:	00 d0       	rcall	.+0      	; 0xefc <GPIO_setupPinDirection+0xa>
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	8a 83       	std	Y+2, r24	; 0x02
     f02:	6b 83       	std	Y+3, r22	; 0x03
     f04:	4c 83       	std	Y+4, r20	; 0x04
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t GPIO_Driver_Checker = NULL;
     f06:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
     f08:	8b 81       	ldd	r24, Y+3	; 0x03
     f0a:	88 30       	cpi	r24, 0x08	; 8
     f0c:	18 f0       	brcs	.+6      	; 0xf14 <GPIO_setupPinDirection+0x22>
		// Checks if the entered pin number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	89 83       	std	Y+1, r24	; 0x01
     f12:	e1 c0       	rjmp	.+450    	; 0x10d6 <GPIO_setupPinDirection+0x1e4>
	}
	else if((port_num >= NUM_OF_PORTS)) {
     f14:	8a 81       	ldd	r24, Y+2	; 0x02
     f16:	84 30       	cpi	r24, 0x04	; 4
     f18:	18 f0       	brcs	.+6      	; 0xf20 <GPIO_setupPinDirection+0x2e>
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
     f1a:	82 e0       	ldi	r24, 0x02	; 2
     f1c:	89 83       	std	Y+1, r24	; 0x01
     f1e:	db c0       	rjmp	.+438    	; 0x10d6 <GPIO_setupPinDirection+0x1e4>
	}
	else if((direction != PIN_INPUT) && (direction != PIN_OUTPUT)) {
     f20:	8c 81       	ldd	r24, Y+4	; 0x04
     f22:	88 23       	and	r24, r24
     f24:	31 f0       	breq	.+12     	; 0xf32 <GPIO_setupPinDirection+0x40>
     f26:	8c 81       	ldd	r24, Y+4	; 0x04
     f28:	81 30       	cpi	r24, 0x01	; 1
     f2a:	19 f0       	breq	.+6      	; 0xf32 <GPIO_setupPinDirection+0x40>
		// Checks if the entered direction is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
     f2c:	83 e0       	ldi	r24, 0x03	; 3
     f2e:	89 83       	std	Y+1, r24	; 0x01
     f30:	d2 c0       	rjmp	.+420    	; 0x10d6 <GPIO_setupPinDirection+0x1e4>
	}
	else {
		// Setup the pin direction as required
		switch(port_num) {
     f32:	8a 81       	ldd	r24, Y+2	; 0x02
     f34:	28 2f       	mov	r18, r24
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	3e 83       	std	Y+6, r19	; 0x06
     f3a:	2d 83       	std	Y+5, r18	; 0x05
     f3c:	8d 81       	ldd	r24, Y+5	; 0x05
     f3e:	9e 81       	ldd	r25, Y+6	; 0x06
     f40:	81 30       	cpi	r24, 0x01	; 1
     f42:	91 05       	cpc	r25, r1
     f44:	09 f4       	brne	.+2      	; 0xf48 <GPIO_setupPinDirection+0x56>
     f46:	43 c0       	rjmp	.+134    	; 0xfce <GPIO_setupPinDirection+0xdc>
     f48:	2d 81       	ldd	r18, Y+5	; 0x05
     f4a:	3e 81       	ldd	r19, Y+6	; 0x06
     f4c:	22 30       	cpi	r18, 0x02	; 2
     f4e:	31 05       	cpc	r19, r1
     f50:	2c f4       	brge	.+10     	; 0xf5c <GPIO_setupPinDirection+0x6a>
     f52:	8d 81       	ldd	r24, Y+5	; 0x05
     f54:	9e 81       	ldd	r25, Y+6	; 0x06
     f56:	00 97       	sbiw	r24, 0x00	; 0
     f58:	71 f0       	breq	.+28     	; 0xf76 <GPIO_setupPinDirection+0x84>
     f5a:	bc c0       	rjmp	.+376    	; 0x10d4 <GPIO_setupPinDirection+0x1e2>
     f5c:	2d 81       	ldd	r18, Y+5	; 0x05
     f5e:	3e 81       	ldd	r19, Y+6	; 0x06
     f60:	22 30       	cpi	r18, 0x02	; 2
     f62:	31 05       	cpc	r19, r1
     f64:	09 f4       	brne	.+2      	; 0xf68 <GPIO_setupPinDirection+0x76>
     f66:	5f c0       	rjmp	.+190    	; 0x1026 <GPIO_setupPinDirection+0x134>
     f68:	8d 81       	ldd	r24, Y+5	; 0x05
     f6a:	9e 81       	ldd	r25, Y+6	; 0x06
     f6c:	83 30       	cpi	r24, 0x03	; 3
     f6e:	91 05       	cpc	r25, r1
     f70:	09 f4       	brne	.+2      	; 0xf74 <GPIO_setupPinDirection+0x82>
     f72:	85 c0       	rjmp	.+266    	; 0x107e <GPIO_setupPinDirection+0x18c>
     f74:	af c0       	rjmp	.+350    	; 0x10d4 <GPIO_setupPinDirection+0x1e2>
		case PORT_A:
			if(direction == PIN_OUTPUT) {
     f76:	8c 81       	ldd	r24, Y+4	; 0x04
     f78:	81 30       	cpi	r24, 0x01	; 1
     f7a:	a1 f4       	brne	.+40     	; 0xfa4 <GPIO_setupPinDirection+0xb2>
				SET_BIT(DDRA, pin_num);
     f7c:	aa e3       	ldi	r26, 0x3A	; 58
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	ea e3       	ldi	r30, 0x3A	; 58
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	48 2f       	mov	r20, r24
     f88:	8b 81       	ldd	r24, Y+3	; 0x03
     f8a:	28 2f       	mov	r18, r24
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	02 2e       	mov	r0, r18
     f94:	02 c0       	rjmp	.+4      	; 0xf9a <GPIO_setupPinDirection+0xa8>
     f96:	88 0f       	add	r24, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	0a 94       	dec	r0
     f9c:	e2 f7       	brpl	.-8      	; 0xf96 <GPIO_setupPinDirection+0xa4>
     f9e:	84 2b       	or	r24, r20
     fa0:	8c 93       	st	X, r24
     fa2:	98 c0       	rjmp	.+304    	; 0x10d4 <GPIO_setupPinDirection+0x1e2>
			}
			else {
				CLR_BIT(DDRA, pin_num);
     fa4:	aa e3       	ldi	r26, 0x3A	; 58
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	ea e3       	ldi	r30, 0x3A	; 58
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	48 2f       	mov	r20, r24
     fb0:	8b 81       	ldd	r24, Y+3	; 0x03
     fb2:	28 2f       	mov	r18, r24
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	02 2e       	mov	r0, r18
     fbc:	02 c0       	rjmp	.+4      	; 0xfc2 <GPIO_setupPinDirection+0xd0>
     fbe:	88 0f       	add	r24, r24
     fc0:	99 1f       	adc	r25, r25
     fc2:	0a 94       	dec	r0
     fc4:	e2 f7       	brpl	.-8      	; 0xfbe <GPIO_setupPinDirection+0xcc>
     fc6:	80 95       	com	r24
     fc8:	84 23       	and	r24, r20
     fca:	8c 93       	st	X, r24
     fcc:	83 c0       	rjmp	.+262    	; 0x10d4 <GPIO_setupPinDirection+0x1e2>
			}
			break;
		case PORT_B:
			if(direction == PIN_OUTPUT) {
     fce:	8c 81       	ldd	r24, Y+4	; 0x04
     fd0:	81 30       	cpi	r24, 0x01	; 1
     fd2:	a1 f4       	brne	.+40     	; 0xffc <GPIO_setupPinDirection+0x10a>
				SET_BIT(DDRB,pin_num);
     fd4:	a7 e3       	ldi	r26, 0x37	; 55
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	e7 e3       	ldi	r30, 0x37	; 55
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	48 2f       	mov	r20, r24
     fe0:	8b 81       	ldd	r24, Y+3	; 0x03
     fe2:	28 2f       	mov	r18, r24
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	02 2e       	mov	r0, r18
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <GPIO_setupPinDirection+0x100>
     fee:	88 0f       	add	r24, r24
     ff0:	99 1f       	adc	r25, r25
     ff2:	0a 94       	dec	r0
     ff4:	e2 f7       	brpl	.-8      	; 0xfee <GPIO_setupPinDirection+0xfc>
     ff6:	84 2b       	or	r24, r20
     ff8:	8c 93       	st	X, r24
     ffa:	6c c0       	rjmp	.+216    	; 0x10d4 <GPIO_setupPinDirection+0x1e2>
			}
			else {
				CLR_BIT(DDRB,pin_num);
     ffc:	a7 e3       	ldi	r26, 0x37	; 55
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	e7 e3       	ldi	r30, 0x37	; 55
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	48 2f       	mov	r20, r24
    1008:	8b 81       	ldd	r24, Y+3	; 0x03
    100a:	28 2f       	mov	r18, r24
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	02 2e       	mov	r0, r18
    1014:	02 c0       	rjmp	.+4      	; 0x101a <GPIO_setupPinDirection+0x128>
    1016:	88 0f       	add	r24, r24
    1018:	99 1f       	adc	r25, r25
    101a:	0a 94       	dec	r0
    101c:	e2 f7       	brpl	.-8      	; 0x1016 <GPIO_setupPinDirection+0x124>
    101e:	80 95       	com	r24
    1020:	84 23       	and	r24, r20
    1022:	8c 93       	st	X, r24
    1024:	57 c0       	rjmp	.+174    	; 0x10d4 <GPIO_setupPinDirection+0x1e2>
			}
			break;
		case PORT_C:
			if(direction == PIN_OUTPUT) {
    1026:	8c 81       	ldd	r24, Y+4	; 0x04
    1028:	81 30       	cpi	r24, 0x01	; 1
    102a:	a1 f4       	brne	.+40     	; 0x1054 <GPIO_setupPinDirection+0x162>
				SET_BIT(DDRC,pin_num);
    102c:	a4 e3       	ldi	r26, 0x34	; 52
    102e:	b0 e0       	ldi	r27, 0x00	; 0
    1030:	e4 e3       	ldi	r30, 0x34	; 52
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
    1036:	48 2f       	mov	r20, r24
    1038:	8b 81       	ldd	r24, Y+3	; 0x03
    103a:	28 2f       	mov	r18, r24
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	02 2e       	mov	r0, r18
    1044:	02 c0       	rjmp	.+4      	; 0x104a <GPIO_setupPinDirection+0x158>
    1046:	88 0f       	add	r24, r24
    1048:	99 1f       	adc	r25, r25
    104a:	0a 94       	dec	r0
    104c:	e2 f7       	brpl	.-8      	; 0x1046 <GPIO_setupPinDirection+0x154>
    104e:	84 2b       	or	r24, r20
    1050:	8c 93       	st	X, r24
    1052:	40 c0       	rjmp	.+128    	; 0x10d4 <GPIO_setupPinDirection+0x1e2>
			}
			else {
				CLR_BIT(DDRC,pin_num);
    1054:	a4 e3       	ldi	r26, 0x34	; 52
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	e4 e3       	ldi	r30, 0x34	; 52
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	48 2f       	mov	r20, r24
    1060:	8b 81       	ldd	r24, Y+3	; 0x03
    1062:	28 2f       	mov	r18, r24
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	02 2e       	mov	r0, r18
    106c:	02 c0       	rjmp	.+4      	; 0x1072 <GPIO_setupPinDirection+0x180>
    106e:	88 0f       	add	r24, r24
    1070:	99 1f       	adc	r25, r25
    1072:	0a 94       	dec	r0
    1074:	e2 f7       	brpl	.-8      	; 0x106e <GPIO_setupPinDirection+0x17c>
    1076:	80 95       	com	r24
    1078:	84 23       	and	r24, r20
    107a:	8c 93       	st	X, r24
    107c:	2b c0       	rjmp	.+86     	; 0x10d4 <GPIO_setupPinDirection+0x1e2>
			}
			break;
		case PORT_D:
			if(direction == PIN_OUTPUT) {
    107e:	8c 81       	ldd	r24, Y+4	; 0x04
    1080:	81 30       	cpi	r24, 0x01	; 1
    1082:	a1 f4       	brne	.+40     	; 0x10ac <GPIO_setupPinDirection+0x1ba>
				SET_BIT(DDRD,pin_num);
    1084:	a1 e3       	ldi	r26, 0x31	; 49
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	e1 e3       	ldi	r30, 0x31	; 49
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	48 2f       	mov	r20, r24
    1090:	8b 81       	ldd	r24, Y+3	; 0x03
    1092:	28 2f       	mov	r18, r24
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	02 2e       	mov	r0, r18
    109c:	02 c0       	rjmp	.+4      	; 0x10a2 <GPIO_setupPinDirection+0x1b0>
    109e:	88 0f       	add	r24, r24
    10a0:	99 1f       	adc	r25, r25
    10a2:	0a 94       	dec	r0
    10a4:	e2 f7       	brpl	.-8      	; 0x109e <GPIO_setupPinDirection+0x1ac>
    10a6:	84 2b       	or	r24, r20
    10a8:	8c 93       	st	X, r24
    10aa:	14 c0       	rjmp	.+40     	; 0x10d4 <GPIO_setupPinDirection+0x1e2>
			}
			else {
				CLR_BIT(DDRD,pin_num);
    10ac:	a1 e3       	ldi	r26, 0x31	; 49
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	e1 e3       	ldi	r30, 0x31	; 49
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	48 2f       	mov	r20, r24
    10b8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ba:	28 2f       	mov	r18, r24
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	02 2e       	mov	r0, r18
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <GPIO_setupPinDirection+0x1d8>
    10c6:	88 0f       	add	r24, r24
    10c8:	99 1f       	adc	r25, r25
    10ca:	0a 94       	dec	r0
    10cc:	e2 f7       	brpl	.-8      	; 0x10c6 <GPIO_setupPinDirection+0x1d4>
    10ce:	80 95       	com	r24
    10d0:	84 23       	and	r24, r20
    10d2:	8c 93       	st	X, r24
			}
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    10d4:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    10d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    10d8:	26 96       	adiw	r28, 0x06	; 6
    10da:	0f b6       	in	r0, 0x3f	; 63
    10dc:	f8 94       	cli
    10de:	de bf       	out	0x3e, r29	; 62
    10e0:	0f be       	out	0x3f, r0	; 63
    10e2:	cd bf       	out	0x3d, r28	; 61
    10e4:	cf 91       	pop	r28
    10e6:	df 91       	pop	r29
    10e8:	08 95       	ret

000010ea <GPIO_writePin>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
GPIO_Error_t GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value) {
    10ea:	df 93       	push	r29
    10ec:	cf 93       	push	r28
    10ee:	00 d0       	rcall	.+0      	; 0x10f0 <GPIO_writePin+0x6>
    10f0:	00 d0       	rcall	.+0      	; 0x10f2 <GPIO_writePin+0x8>
    10f2:	00 d0       	rcall	.+0      	; 0x10f4 <GPIO_writePin+0xa>
    10f4:	cd b7       	in	r28, 0x3d	; 61
    10f6:	de b7       	in	r29, 0x3e	; 62
    10f8:	8a 83       	std	Y+2, r24	; 0x02
    10fa:	6b 83       	std	Y+3, r22	; 0x03
    10fc:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t GPIO_Driver_Checker = NULL;
    10fe:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    1100:	8b 81       	ldd	r24, Y+3	; 0x03
    1102:	88 30       	cpi	r24, 0x08	; 8
    1104:	18 f0       	brcs	.+6      	; 0x110c <GPIO_writePin+0x22>
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	89 83       	std	Y+1, r24	; 0x01
    110a:	e1 c0       	rjmp	.+450    	; 0x12ce <GPIO_writePin+0x1e4>
	}
	else if((port_num >= NUM_OF_PORTS)) {
    110c:	8a 81       	ldd	r24, Y+2	; 0x02
    110e:	84 30       	cpi	r24, 0x04	; 4
    1110:	18 f0       	brcs	.+6      	; 0x1118 <GPIO_writePin+0x2e>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    1112:	82 e0       	ldi	r24, 0x02	; 2
    1114:	89 83       	std	Y+1, r24	; 0x01
    1116:	db c0       	rjmp	.+438    	; 0x12ce <GPIO_writePin+0x1e4>
	}
	else if((value != LOGIC_HIGH) && (value != LOGIC_LOW)) {
    1118:	8c 81       	ldd	r24, Y+4	; 0x04
    111a:	81 30       	cpi	r24, 0x01	; 1
    111c:	31 f0       	breq	.+12     	; 0x112a <GPIO_writePin+0x40>
    111e:	8c 81       	ldd	r24, Y+4	; 0x04
    1120:	88 23       	and	r24, r24
    1122:	19 f0       	breq	.+6      	; 0x112a <GPIO_writePin+0x40>
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
    1124:	83 e0       	ldi	r24, 0x03	; 3
    1126:	89 83       	std	Y+1, r24	; 0x01
    1128:	d2 c0       	rjmp	.+420    	; 0x12ce <GPIO_writePin+0x1e4>
	}
	else {
		switch(port_num) {
    112a:	8a 81       	ldd	r24, Y+2	; 0x02
    112c:	28 2f       	mov	r18, r24
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	3e 83       	std	Y+6, r19	; 0x06
    1132:	2d 83       	std	Y+5, r18	; 0x05
    1134:	8d 81       	ldd	r24, Y+5	; 0x05
    1136:	9e 81       	ldd	r25, Y+6	; 0x06
    1138:	81 30       	cpi	r24, 0x01	; 1
    113a:	91 05       	cpc	r25, r1
    113c:	09 f4       	brne	.+2      	; 0x1140 <GPIO_writePin+0x56>
    113e:	43 c0       	rjmp	.+134    	; 0x11c6 <GPIO_writePin+0xdc>
    1140:	2d 81       	ldd	r18, Y+5	; 0x05
    1142:	3e 81       	ldd	r19, Y+6	; 0x06
    1144:	22 30       	cpi	r18, 0x02	; 2
    1146:	31 05       	cpc	r19, r1
    1148:	2c f4       	brge	.+10     	; 0x1154 <GPIO_writePin+0x6a>
    114a:	8d 81       	ldd	r24, Y+5	; 0x05
    114c:	9e 81       	ldd	r25, Y+6	; 0x06
    114e:	00 97       	sbiw	r24, 0x00	; 0
    1150:	71 f0       	breq	.+28     	; 0x116e <GPIO_writePin+0x84>
    1152:	bc c0       	rjmp	.+376    	; 0x12cc <GPIO_writePin+0x1e2>
    1154:	2d 81       	ldd	r18, Y+5	; 0x05
    1156:	3e 81       	ldd	r19, Y+6	; 0x06
    1158:	22 30       	cpi	r18, 0x02	; 2
    115a:	31 05       	cpc	r19, r1
    115c:	09 f4       	brne	.+2      	; 0x1160 <GPIO_writePin+0x76>
    115e:	5f c0       	rjmp	.+190    	; 0x121e <GPIO_writePin+0x134>
    1160:	8d 81       	ldd	r24, Y+5	; 0x05
    1162:	9e 81       	ldd	r25, Y+6	; 0x06
    1164:	83 30       	cpi	r24, 0x03	; 3
    1166:	91 05       	cpc	r25, r1
    1168:	09 f4       	brne	.+2      	; 0x116c <GPIO_writePin+0x82>
    116a:	85 c0       	rjmp	.+266    	; 0x1276 <GPIO_writePin+0x18c>
    116c:	af c0       	rjmp	.+350    	; 0x12cc <GPIO_writePin+0x1e2>
		case PORT_A:
			if(value == LOGIC_HIGH) {
    116e:	8c 81       	ldd	r24, Y+4	; 0x04
    1170:	81 30       	cpi	r24, 0x01	; 1
    1172:	a1 f4       	brne	.+40     	; 0x119c <GPIO_writePin+0xb2>
				SET_BIT(PORTA,pin_num);
    1174:	ab e3       	ldi	r26, 0x3B	; 59
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	eb e3       	ldi	r30, 0x3B	; 59
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	48 2f       	mov	r20, r24
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	28 2f       	mov	r18, r24
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	02 2e       	mov	r0, r18
    118c:	02 c0       	rjmp	.+4      	; 0x1192 <GPIO_writePin+0xa8>
    118e:	88 0f       	add	r24, r24
    1190:	99 1f       	adc	r25, r25
    1192:	0a 94       	dec	r0
    1194:	e2 f7       	brpl	.-8      	; 0x118e <GPIO_writePin+0xa4>
    1196:	84 2b       	or	r24, r20
    1198:	8c 93       	st	X, r24
    119a:	98 c0       	rjmp	.+304    	; 0x12cc <GPIO_writePin+0x1e2>
			}
			else {
				CLR_BIT(PORTA,pin_num);
    119c:	ab e3       	ldi	r26, 0x3B	; 59
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	eb e3       	ldi	r30, 0x3B	; 59
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	48 2f       	mov	r20, r24
    11a8:	8b 81       	ldd	r24, Y+3	; 0x03
    11aa:	28 2f       	mov	r18, r24
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	02 2e       	mov	r0, r18
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <GPIO_writePin+0xd0>
    11b6:	88 0f       	add	r24, r24
    11b8:	99 1f       	adc	r25, r25
    11ba:	0a 94       	dec	r0
    11bc:	e2 f7       	brpl	.-8      	; 0x11b6 <GPIO_writePin+0xcc>
    11be:	80 95       	com	r24
    11c0:	84 23       	and	r24, r20
    11c2:	8c 93       	st	X, r24
    11c4:	83 c0       	rjmp	.+262    	; 0x12cc <GPIO_writePin+0x1e2>
			}
			break;
		case PORT_B:
			if(value == LOGIC_HIGH) {
    11c6:	8c 81       	ldd	r24, Y+4	; 0x04
    11c8:	81 30       	cpi	r24, 0x01	; 1
    11ca:	a1 f4       	brne	.+40     	; 0x11f4 <GPIO_writePin+0x10a>
				SET_BIT(PORTB,pin_num);
    11cc:	a8 e3       	ldi	r26, 0x38	; 56
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	e8 e3       	ldi	r30, 0x38	; 56
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	48 2f       	mov	r20, r24
    11d8:	8b 81       	ldd	r24, Y+3	; 0x03
    11da:	28 2f       	mov	r18, r24
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	02 2e       	mov	r0, r18
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <GPIO_writePin+0x100>
    11e6:	88 0f       	add	r24, r24
    11e8:	99 1f       	adc	r25, r25
    11ea:	0a 94       	dec	r0
    11ec:	e2 f7       	brpl	.-8      	; 0x11e6 <GPIO_writePin+0xfc>
    11ee:	84 2b       	or	r24, r20
    11f0:	8c 93       	st	X, r24
    11f2:	6c c0       	rjmp	.+216    	; 0x12cc <GPIO_writePin+0x1e2>
			}
			else {
				CLR_BIT(PORTB,pin_num);
    11f4:	a8 e3       	ldi	r26, 0x38	; 56
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	e8 e3       	ldi	r30, 0x38	; 56
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	48 2f       	mov	r20, r24
    1200:	8b 81       	ldd	r24, Y+3	; 0x03
    1202:	28 2f       	mov	r18, r24
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	02 2e       	mov	r0, r18
    120c:	02 c0       	rjmp	.+4      	; 0x1212 <GPIO_writePin+0x128>
    120e:	88 0f       	add	r24, r24
    1210:	99 1f       	adc	r25, r25
    1212:	0a 94       	dec	r0
    1214:	e2 f7       	brpl	.-8      	; 0x120e <GPIO_writePin+0x124>
    1216:	80 95       	com	r24
    1218:	84 23       	and	r24, r20
    121a:	8c 93       	st	X, r24
    121c:	57 c0       	rjmp	.+174    	; 0x12cc <GPIO_writePin+0x1e2>
			}
			break;
		case PORT_C:
			if(value == LOGIC_HIGH) {
    121e:	8c 81       	ldd	r24, Y+4	; 0x04
    1220:	81 30       	cpi	r24, 0x01	; 1
    1222:	a1 f4       	brne	.+40     	; 0x124c <GPIO_writePin+0x162>
				SET_BIT(PORTC,pin_num);
    1224:	a5 e3       	ldi	r26, 0x35	; 53
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	e5 e3       	ldi	r30, 0x35	; 53
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	48 2f       	mov	r20, r24
    1230:	8b 81       	ldd	r24, Y+3	; 0x03
    1232:	28 2f       	mov	r18, r24
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	02 2e       	mov	r0, r18
    123c:	02 c0       	rjmp	.+4      	; 0x1242 <GPIO_writePin+0x158>
    123e:	88 0f       	add	r24, r24
    1240:	99 1f       	adc	r25, r25
    1242:	0a 94       	dec	r0
    1244:	e2 f7       	brpl	.-8      	; 0x123e <GPIO_writePin+0x154>
    1246:	84 2b       	or	r24, r20
    1248:	8c 93       	st	X, r24
    124a:	40 c0       	rjmp	.+128    	; 0x12cc <GPIO_writePin+0x1e2>
			}
			else {
				CLR_BIT(PORTC,pin_num);
    124c:	a5 e3       	ldi	r26, 0x35	; 53
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	e5 e3       	ldi	r30, 0x35	; 53
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	48 2f       	mov	r20, r24
    1258:	8b 81       	ldd	r24, Y+3	; 0x03
    125a:	28 2f       	mov	r18, r24
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	02 2e       	mov	r0, r18
    1264:	02 c0       	rjmp	.+4      	; 0x126a <GPIO_writePin+0x180>
    1266:	88 0f       	add	r24, r24
    1268:	99 1f       	adc	r25, r25
    126a:	0a 94       	dec	r0
    126c:	e2 f7       	brpl	.-8      	; 0x1266 <GPIO_writePin+0x17c>
    126e:	80 95       	com	r24
    1270:	84 23       	and	r24, r20
    1272:	8c 93       	st	X, r24
    1274:	2b c0       	rjmp	.+86     	; 0x12cc <GPIO_writePin+0x1e2>
			}
			break;
		case PORT_D:
			if(value == LOGIC_HIGH) {
    1276:	8c 81       	ldd	r24, Y+4	; 0x04
    1278:	81 30       	cpi	r24, 0x01	; 1
    127a:	a1 f4       	brne	.+40     	; 0x12a4 <GPIO_writePin+0x1ba>
				SET_BIT(PORTD,pin_num);
    127c:	a2 e3       	ldi	r26, 0x32	; 50
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	e2 e3       	ldi	r30, 0x32	; 50
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	48 2f       	mov	r20, r24
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	28 2f       	mov	r18, r24
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	02 2e       	mov	r0, r18
    1294:	02 c0       	rjmp	.+4      	; 0x129a <GPIO_writePin+0x1b0>
    1296:	88 0f       	add	r24, r24
    1298:	99 1f       	adc	r25, r25
    129a:	0a 94       	dec	r0
    129c:	e2 f7       	brpl	.-8      	; 0x1296 <GPIO_writePin+0x1ac>
    129e:	84 2b       	or	r24, r20
    12a0:	8c 93       	st	X, r24
    12a2:	14 c0       	rjmp	.+40     	; 0x12cc <GPIO_writePin+0x1e2>
			}
			else {
				CLR_BIT(PORTD,pin_num);
    12a4:	a2 e3       	ldi	r26, 0x32	; 50
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	e2 e3       	ldi	r30, 0x32	; 50
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	48 2f       	mov	r20, r24
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	28 2f       	mov	r18, r24
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	02 2e       	mov	r0, r18
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <GPIO_writePin+0x1d8>
    12be:	88 0f       	add	r24, r24
    12c0:	99 1f       	adc	r25, r25
    12c2:	0a 94       	dec	r0
    12c4:	e2 f7       	brpl	.-8      	; 0x12be <GPIO_writePin+0x1d4>
    12c6:	80 95       	com	r24
    12c8:	84 23       	and	r24, r20
    12ca:	8c 93       	st	X, r24
			}
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    12cc:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    12ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    12d0:	26 96       	adiw	r28, 0x06	; 6
    12d2:	0f b6       	in	r0, 0x3f	; 63
    12d4:	f8 94       	cli
    12d6:	de bf       	out	0x3e, r29	; 62
    12d8:	0f be       	out	0x3f, r0	; 63
    12da:	cd bf       	out	0x3d, r28	; 61
    12dc:	cf 91       	pop	r28
    12de:	df 91       	pop	r29
    12e0:	08 95       	ret

000012e2 <GPIO_togglePin>:
/*
 * Description :
 * Toggles a certain pin when requested.
 * If the input port number or pin number are not correct, The function will return an error.
 */
GPIO_Error_t GPIO_togglePin(uint8 port_num, uint8 pin_num) {
    12e2:	df 93       	push	r29
    12e4:	cf 93       	push	r28
    12e6:	00 d0       	rcall	.+0      	; 0x12e8 <GPIO_togglePin+0x6>
    12e8:	00 d0       	rcall	.+0      	; 0x12ea <GPIO_togglePin+0x8>
    12ea:	0f 92       	push	r0
    12ec:	cd b7       	in	r28, 0x3d	; 61
    12ee:	de b7       	in	r29, 0x3e	; 62
    12f0:	8a 83       	std	Y+2, r24	; 0x02
    12f2:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t GPIO_Driver_Checker = NULL;
    12f4:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    12f6:	8b 81       	ldd	r24, Y+3	; 0x03
    12f8:	88 30       	cpi	r24, 0x08	; 8
    12fa:	18 f0       	brcs	.+6      	; 0x1302 <GPIO_togglePin+0x20>
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	89 83       	std	Y+1, r24	; 0x01
    1300:	75 c0       	rjmp	.+234    	; 0x13ec <GPIO_togglePin+0x10a>
	}
	else if((port_num >= NUM_OF_PORTS)) {
    1302:	8a 81       	ldd	r24, Y+2	; 0x02
    1304:	84 30       	cpi	r24, 0x04	; 4
    1306:	18 f0       	brcs	.+6      	; 0x130e <GPIO_togglePin+0x2c>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    1308:	82 e0       	ldi	r24, 0x02	; 2
    130a:	89 83       	std	Y+1, r24	; 0x01
    130c:	6f c0       	rjmp	.+222    	; 0x13ec <GPIO_togglePin+0x10a>
	}
	else {
		switch(port_num) {
    130e:	8a 81       	ldd	r24, Y+2	; 0x02
    1310:	28 2f       	mov	r18, r24
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	3d 83       	std	Y+5, r19	; 0x05
    1316:	2c 83       	std	Y+4, r18	; 0x04
    1318:	8c 81       	ldd	r24, Y+4	; 0x04
    131a:	9d 81       	ldd	r25, Y+5	; 0x05
    131c:	81 30       	cpi	r24, 0x01	; 1
    131e:	91 05       	cpc	r25, r1
    1320:	49 f1       	breq	.+82     	; 0x1374 <GPIO_togglePin+0x92>
    1322:	2c 81       	ldd	r18, Y+4	; 0x04
    1324:	3d 81       	ldd	r19, Y+5	; 0x05
    1326:	22 30       	cpi	r18, 0x02	; 2
    1328:	31 05       	cpc	r19, r1
    132a:	2c f4       	brge	.+10     	; 0x1336 <GPIO_togglePin+0x54>
    132c:	8c 81       	ldd	r24, Y+4	; 0x04
    132e:	9d 81       	ldd	r25, Y+5	; 0x05
    1330:	00 97       	sbiw	r24, 0x00	; 0
    1332:	61 f0       	breq	.+24     	; 0x134c <GPIO_togglePin+0x6a>
    1334:	5a c0       	rjmp	.+180    	; 0x13ea <GPIO_togglePin+0x108>
    1336:	2c 81       	ldd	r18, Y+4	; 0x04
    1338:	3d 81       	ldd	r19, Y+5	; 0x05
    133a:	22 30       	cpi	r18, 0x02	; 2
    133c:	31 05       	cpc	r19, r1
    133e:	71 f1       	breq	.+92     	; 0x139c <GPIO_togglePin+0xba>
    1340:	8c 81       	ldd	r24, Y+4	; 0x04
    1342:	9d 81       	ldd	r25, Y+5	; 0x05
    1344:	83 30       	cpi	r24, 0x03	; 3
    1346:	91 05       	cpc	r25, r1
    1348:	e9 f1       	breq	.+122    	; 0x13c4 <GPIO_togglePin+0xe2>
    134a:	4f c0       	rjmp	.+158    	; 0x13ea <GPIO_togglePin+0x108>
		case PORT_A:
			TOG_BIT(PORTA,pin_num);
    134c:	ab e3       	ldi	r26, 0x3B	; 59
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	eb e3       	ldi	r30, 0x3B	; 59
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	48 2f       	mov	r20, r24
    1358:	8b 81       	ldd	r24, Y+3	; 0x03
    135a:	28 2f       	mov	r18, r24
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	02 2e       	mov	r0, r18
    1364:	02 c0       	rjmp	.+4      	; 0x136a <GPIO_togglePin+0x88>
    1366:	88 0f       	add	r24, r24
    1368:	99 1f       	adc	r25, r25
    136a:	0a 94       	dec	r0
    136c:	e2 f7       	brpl	.-8      	; 0x1366 <GPIO_togglePin+0x84>
    136e:	84 27       	eor	r24, r20
    1370:	8c 93       	st	X, r24
    1372:	3b c0       	rjmp	.+118    	; 0x13ea <GPIO_togglePin+0x108>
			break;
		case PORT_B:
			TOG_BIT(PORTB,pin_num);
    1374:	a8 e3       	ldi	r26, 0x38	; 56
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	e8 e3       	ldi	r30, 0x38	; 56
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	48 2f       	mov	r20, r24
    1380:	8b 81       	ldd	r24, Y+3	; 0x03
    1382:	28 2f       	mov	r18, r24
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	02 2e       	mov	r0, r18
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <GPIO_togglePin+0xb0>
    138e:	88 0f       	add	r24, r24
    1390:	99 1f       	adc	r25, r25
    1392:	0a 94       	dec	r0
    1394:	e2 f7       	brpl	.-8      	; 0x138e <GPIO_togglePin+0xac>
    1396:	84 27       	eor	r24, r20
    1398:	8c 93       	st	X, r24
    139a:	27 c0       	rjmp	.+78     	; 0x13ea <GPIO_togglePin+0x108>
			break;
		case PORT_C:
			TOG_BIT(PORTC,pin_num);
    139c:	a5 e3       	ldi	r26, 0x35	; 53
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	e5 e3       	ldi	r30, 0x35	; 53
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	48 2f       	mov	r20, r24
    13a8:	8b 81       	ldd	r24, Y+3	; 0x03
    13aa:	28 2f       	mov	r18, r24
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	02 2e       	mov	r0, r18
    13b4:	02 c0       	rjmp	.+4      	; 0x13ba <GPIO_togglePin+0xd8>
    13b6:	88 0f       	add	r24, r24
    13b8:	99 1f       	adc	r25, r25
    13ba:	0a 94       	dec	r0
    13bc:	e2 f7       	brpl	.-8      	; 0x13b6 <GPIO_togglePin+0xd4>
    13be:	84 27       	eor	r24, r20
    13c0:	8c 93       	st	X, r24
    13c2:	13 c0       	rjmp	.+38     	; 0x13ea <GPIO_togglePin+0x108>
			break;
		case PORT_D:
			TOG_BIT(PORTD,pin_num);
    13c4:	a2 e3       	ldi	r26, 0x32	; 50
    13c6:	b0 e0       	ldi	r27, 0x00	; 0
    13c8:	e2 e3       	ldi	r30, 0x32	; 50
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	48 2f       	mov	r20, r24
    13d0:	8b 81       	ldd	r24, Y+3	; 0x03
    13d2:	28 2f       	mov	r18, r24
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	02 2e       	mov	r0, r18
    13dc:	02 c0       	rjmp	.+4      	; 0x13e2 <GPIO_togglePin+0x100>
    13de:	88 0f       	add	r24, r24
    13e0:	99 1f       	adc	r25, r25
    13e2:	0a 94       	dec	r0
    13e4:	e2 f7       	brpl	.-8      	; 0x13de <GPIO_togglePin+0xfc>
    13e6:	84 27       	eor	r24, r20
    13e8:	8c 93       	st	X, r24
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    13ea:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    13ec:	89 81       	ldd	r24, Y+1	; 0x01
}
    13ee:	0f 90       	pop	r0
    13f0:	0f 90       	pop	r0
    13f2:	0f 90       	pop	r0
    13f4:	0f 90       	pop	r0
    13f6:	0f 90       	pop	r0
    13f8:	cf 91       	pop	r28
    13fa:	df 91       	pop	r29
    13fc:	08 95       	ret

000013fe <GPIO_readPin>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return an error.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num) {
    13fe:	df 93       	push	r29
    1400:	cf 93       	push	r28
    1402:	cd b7       	in	r28, 0x3d	; 61
    1404:	de b7       	in	r29, 0x3e	; 62
    1406:	27 97       	sbiw	r28, 0x07	; 7
    1408:	0f b6       	in	r0, 0x3f	; 63
    140a:	f8 94       	cli
    140c:	de bf       	out	0x3e, r29	; 62
    140e:	0f be       	out	0x3f, r0	; 63
    1410:	cd bf       	out	0x3d, r28	; 61
    1412:	8b 83       	std	Y+3, r24	; 0x03
    1414:	6c 83       	std	Y+4, r22	; 0x04
	uint8 pin_value = LOGIC_LOW;
    1416:	1a 82       	std	Y+2, r1	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t GPIO_Driver_Checker = NULL;
    1418:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    141a:	8c 81       	ldd	r24, Y+4	; 0x04
    141c:	88 30       	cpi	r24, 0x08	; 8
    141e:	28 f0       	brcs	.+10     	; 0x142a <GPIO_readPin+0x2c>
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	89 83       	std	Y+1, r24	; 0x01
		return GPIO_Driver_Checker;
    1424:	29 81       	ldd	r18, Y+1	; 0x01
    1426:	2f 83       	std	Y+7, r18	; 0x07
    1428:	8b c0       	rjmp	.+278    	; 0x1540 <GPIO_readPin+0x142>
	}
	else if((port_num >= NUM_OF_PORTS)) {
    142a:	8b 81       	ldd	r24, Y+3	; 0x03
    142c:	84 30       	cpi	r24, 0x04	; 4
    142e:	28 f0       	brcs	.+10     	; 0x143a <GPIO_readPin+0x3c>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    1430:	82 e0       	ldi	r24, 0x02	; 2
    1432:	89 83       	std	Y+1, r24	; 0x01
		return GPIO_Driver_Checker;
    1434:	39 81       	ldd	r19, Y+1	; 0x01
    1436:	3f 83       	std	Y+7, r19	; 0x07
    1438:	83 c0       	rjmp	.+262    	; 0x1540 <GPIO_readPin+0x142>
	}
	else {
		/* Read the pin value as required */
		switch(port_num) {
    143a:	8b 81       	ldd	r24, Y+3	; 0x03
    143c:	48 2f       	mov	r20, r24
    143e:	50 e0       	ldi	r21, 0x00	; 0
    1440:	5e 83       	std	Y+6, r21	; 0x06
    1442:	4d 83       	std	Y+5, r20	; 0x05
    1444:	8d 81       	ldd	r24, Y+5	; 0x05
    1446:	9e 81       	ldd	r25, Y+6	; 0x06
    1448:	81 30       	cpi	r24, 0x01	; 1
    144a:	91 05       	cpc	r25, r1
    144c:	79 f1       	breq	.+94     	; 0x14ac <GPIO_readPin+0xae>
    144e:	2d 81       	ldd	r18, Y+5	; 0x05
    1450:	3e 81       	ldd	r19, Y+6	; 0x06
    1452:	22 30       	cpi	r18, 0x02	; 2
    1454:	31 05       	cpc	r19, r1
    1456:	34 f4       	brge	.+12     	; 0x1464 <GPIO_readPin+0x66>
    1458:	4d 81       	ldd	r20, Y+5	; 0x05
    145a:	5e 81       	ldd	r21, Y+6	; 0x06
    145c:	41 15       	cp	r20, r1
    145e:	51 05       	cpc	r21, r1
    1460:	69 f0       	breq	.+26     	; 0x147c <GPIO_readPin+0x7e>
    1462:	6b c0       	rjmp	.+214    	; 0x153a <GPIO_readPin+0x13c>
    1464:	8d 81       	ldd	r24, Y+5	; 0x05
    1466:	9e 81       	ldd	r25, Y+6	; 0x06
    1468:	82 30       	cpi	r24, 0x02	; 2
    146a:	91 05       	cpc	r25, r1
    146c:	b9 f1       	breq	.+110    	; 0x14dc <GPIO_readPin+0xde>
    146e:	2d 81       	ldd	r18, Y+5	; 0x05
    1470:	3e 81       	ldd	r19, Y+6	; 0x06
    1472:	23 30       	cpi	r18, 0x03	; 3
    1474:	31 05       	cpc	r19, r1
    1476:	09 f4       	brne	.+2      	; 0x147a <GPIO_readPin+0x7c>
    1478:	49 c0       	rjmp	.+146    	; 0x150c <GPIO_readPin+0x10e>
    147a:	5f c0       	rjmp	.+190    	; 0x153a <GPIO_readPin+0x13c>
		case PORT_A:
			// Checks if the bit equals '1' or not
			if(BIT_IS_SET(PINA,pin_num)) {
    147c:	e9 e3       	ldi	r30, 0x39	; 57
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	28 2f       	mov	r18, r24
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	8c 81       	ldd	r24, Y+4	; 0x04
    1488:	88 2f       	mov	r24, r24
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	a9 01       	movw	r20, r18
    148e:	02 c0       	rjmp	.+4      	; 0x1494 <GPIO_readPin+0x96>
    1490:	55 95       	asr	r21
    1492:	47 95       	ror	r20
    1494:	8a 95       	dec	r24
    1496:	e2 f7       	brpl	.-8      	; 0x1490 <GPIO_readPin+0x92>
    1498:	ca 01       	movw	r24, r20
    149a:	81 70       	andi	r24, 0x01	; 1
    149c:	90 70       	andi	r25, 0x00	; 0
    149e:	88 23       	and	r24, r24
    14a0:	19 f0       	breq	.+6      	; 0x14a8 <GPIO_readPin+0xaa>
				pin_value = LOGIC_HIGH;
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	8a 83       	std	Y+2, r24	; 0x02
    14a6:	49 c0       	rjmp	.+146    	; 0x153a <GPIO_readPin+0x13c>
			}
			else {
				pin_value = LOGIC_LOW;
    14a8:	1a 82       	std	Y+2, r1	; 0x02
    14aa:	47 c0       	rjmp	.+142    	; 0x153a <GPIO_readPin+0x13c>
			}
			break;
		case PORT_B:
			if(BIT_IS_SET(PINB,pin_num)) {
    14ac:	e6 e3       	ldi	r30, 0x36	; 54
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	28 2f       	mov	r18, r24
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	8c 81       	ldd	r24, Y+4	; 0x04
    14b8:	88 2f       	mov	r24, r24
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	a9 01       	movw	r20, r18
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <GPIO_readPin+0xc6>
    14c0:	55 95       	asr	r21
    14c2:	47 95       	ror	r20
    14c4:	8a 95       	dec	r24
    14c6:	e2 f7       	brpl	.-8      	; 0x14c0 <GPIO_readPin+0xc2>
    14c8:	ca 01       	movw	r24, r20
    14ca:	81 70       	andi	r24, 0x01	; 1
    14cc:	90 70       	andi	r25, 0x00	; 0
    14ce:	88 23       	and	r24, r24
    14d0:	19 f0       	breq	.+6      	; 0x14d8 <GPIO_readPin+0xda>
				pin_value = LOGIC_HIGH;
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	8a 83       	std	Y+2, r24	; 0x02
    14d6:	31 c0       	rjmp	.+98     	; 0x153a <GPIO_readPin+0x13c>
			}
			else {
				pin_value = LOGIC_LOW;
    14d8:	1a 82       	std	Y+2, r1	; 0x02
    14da:	2f c0       	rjmp	.+94     	; 0x153a <GPIO_readPin+0x13c>
			}
			break;
		case PORT_C:
			if(BIT_IS_SET(PINC,pin_num)) {
    14dc:	e3 e3       	ldi	r30, 0x33	; 51
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	28 2f       	mov	r18, r24
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	8c 81       	ldd	r24, Y+4	; 0x04
    14e8:	88 2f       	mov	r24, r24
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	a9 01       	movw	r20, r18
    14ee:	02 c0       	rjmp	.+4      	; 0x14f4 <GPIO_readPin+0xf6>
    14f0:	55 95       	asr	r21
    14f2:	47 95       	ror	r20
    14f4:	8a 95       	dec	r24
    14f6:	e2 f7       	brpl	.-8      	; 0x14f0 <GPIO_readPin+0xf2>
    14f8:	ca 01       	movw	r24, r20
    14fa:	81 70       	andi	r24, 0x01	; 1
    14fc:	90 70       	andi	r25, 0x00	; 0
    14fe:	88 23       	and	r24, r24
    1500:	19 f0       	breq	.+6      	; 0x1508 <GPIO_readPin+0x10a>
				pin_value = LOGIC_HIGH;
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	8a 83       	std	Y+2, r24	; 0x02
    1506:	19 c0       	rjmp	.+50     	; 0x153a <GPIO_readPin+0x13c>
			}
			else {
				pin_value = LOGIC_LOW;
    1508:	1a 82       	std	Y+2, r1	; 0x02
    150a:	17 c0       	rjmp	.+46     	; 0x153a <GPIO_readPin+0x13c>
			}
			break;
		case PORT_D:
			if(BIT_IS_SET(PIND,pin_num)) {
    150c:	e0 e3       	ldi	r30, 0x30	; 48
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	28 2f       	mov	r18, r24
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	8c 81       	ldd	r24, Y+4	; 0x04
    1518:	88 2f       	mov	r24, r24
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	a9 01       	movw	r20, r18
    151e:	02 c0       	rjmp	.+4      	; 0x1524 <GPIO_readPin+0x126>
    1520:	55 95       	asr	r21
    1522:	47 95       	ror	r20
    1524:	8a 95       	dec	r24
    1526:	e2 f7       	brpl	.-8      	; 0x1520 <GPIO_readPin+0x122>
    1528:	ca 01       	movw	r24, r20
    152a:	81 70       	andi	r24, 0x01	; 1
    152c:	90 70       	andi	r25, 0x00	; 0
    152e:	88 23       	and	r24, r24
    1530:	19 f0       	breq	.+6      	; 0x1538 <GPIO_readPin+0x13a>
				pin_value = LOGIC_HIGH;
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	8a 83       	std	Y+2, r24	; 0x02
    1536:	01 c0       	rjmp	.+2      	; 0x153a <GPIO_readPin+0x13c>
			}
			else {
				pin_value = LOGIC_LOW;
    1538:	1a 82       	std	Y+2, r1	; 0x02
			}
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    153a:	19 82       	std	Y+1, r1	; 0x01
	}
	return pin_value;
    153c:	5a 81       	ldd	r21, Y+2	; 0x02
    153e:	5f 83       	std	Y+7, r21	; 0x07
    1540:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1542:	27 96       	adiw	r28, 0x07	; 7
    1544:	0f b6       	in	r0, 0x3f	; 63
    1546:	f8 94       	cli
    1548:	de bf       	out	0x3e, r29	; 62
    154a:	0f be       	out	0x3f, r0	; 63
    154c:	cd bf       	out	0x3d, r28	; 61
    154e:	cf 91       	pop	r28
    1550:	df 91       	pop	r29
    1552:	08 95       	ret

00001554 <GPIO_setupPortDirection>:
 * Setup the direction of the required port all pins input/output.
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
GPIO_Error_t GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction) {
    1554:	df 93       	push	r29
    1556:	cf 93       	push	r28
    1558:	00 d0       	rcall	.+0      	; 0x155a <GPIO_setupPortDirection+0x6>
    155a:	00 d0       	rcall	.+0      	; 0x155c <GPIO_setupPortDirection+0x8>
    155c:	0f 92       	push	r0
    155e:	cd b7       	in	r28, 0x3d	; 61
    1560:	de b7       	in	r29, 0x3e	; 62
    1562:	8a 83       	std	Y+2, r24	; 0x02
    1564:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	uint8_t GPIO_Driver_Checker = NULL;
    1566:	19 82       	std	Y+1, r1	; 0x01

	if((port_num >= NUM_OF_PORTS)) {
    1568:	8a 81       	ldd	r24, Y+2	; 0x02
    156a:	84 30       	cpi	r24, 0x04	; 4
    156c:	18 f0       	brcs	.+6      	; 0x1574 <GPIO_setupPortDirection+0x20>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    156e:	82 e0       	ldi	r24, 0x02	; 2
    1570:	89 83       	std	Y+1, r24	; 0x01
    1572:	3c c0       	rjmp	.+120    	; 0x15ec <GPIO_setupPortDirection+0x98>
	}
	else if((direction != PORT_INPUT) && (direction != PORT_OUTPUT)) {
    1574:	8b 81       	ldd	r24, Y+3	; 0x03
    1576:	88 23       	and	r24, r24
    1578:	31 f0       	breq	.+12     	; 0x1586 <GPIO_setupPortDirection+0x32>
    157a:	8b 81       	ldd	r24, Y+3	; 0x03
    157c:	8f 3f       	cpi	r24, 0xFF	; 255
    157e:	19 f0       	breq	.+6      	; 0x1586 <GPIO_setupPortDirection+0x32>
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
    1580:	83 e0       	ldi	r24, 0x03	; 3
    1582:	89 83       	std	Y+1, r24	; 0x01
    1584:	33 c0       	rjmp	.+102    	; 0x15ec <GPIO_setupPortDirection+0x98>
	}
	else {
		/* Setup the port direction as required */
		switch(port_num) {
    1586:	8a 81       	ldd	r24, Y+2	; 0x02
    1588:	28 2f       	mov	r18, r24
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	3d 83       	std	Y+5, r19	; 0x05
    158e:	2c 83       	std	Y+4, r18	; 0x04
    1590:	8c 81       	ldd	r24, Y+4	; 0x04
    1592:	9d 81       	ldd	r25, Y+5	; 0x05
    1594:	81 30       	cpi	r24, 0x01	; 1
    1596:	91 05       	cpc	r25, r1
    1598:	d1 f0       	breq	.+52     	; 0x15ce <GPIO_setupPortDirection+0x7a>
    159a:	2c 81       	ldd	r18, Y+4	; 0x04
    159c:	3d 81       	ldd	r19, Y+5	; 0x05
    159e:	22 30       	cpi	r18, 0x02	; 2
    15a0:	31 05       	cpc	r19, r1
    15a2:	2c f4       	brge	.+10     	; 0x15ae <GPIO_setupPortDirection+0x5a>
    15a4:	8c 81       	ldd	r24, Y+4	; 0x04
    15a6:	9d 81       	ldd	r25, Y+5	; 0x05
    15a8:	00 97       	sbiw	r24, 0x00	; 0
    15aa:	61 f0       	breq	.+24     	; 0x15c4 <GPIO_setupPortDirection+0x70>
    15ac:	1e c0       	rjmp	.+60     	; 0x15ea <GPIO_setupPortDirection+0x96>
    15ae:	2c 81       	ldd	r18, Y+4	; 0x04
    15b0:	3d 81       	ldd	r19, Y+5	; 0x05
    15b2:	22 30       	cpi	r18, 0x02	; 2
    15b4:	31 05       	cpc	r19, r1
    15b6:	81 f0       	breq	.+32     	; 0x15d8 <GPIO_setupPortDirection+0x84>
    15b8:	8c 81       	ldd	r24, Y+4	; 0x04
    15ba:	9d 81       	ldd	r25, Y+5	; 0x05
    15bc:	83 30       	cpi	r24, 0x03	; 3
    15be:	91 05       	cpc	r25, r1
    15c0:	81 f0       	breq	.+32     	; 0x15e2 <GPIO_setupPortDirection+0x8e>
    15c2:	13 c0       	rjmp	.+38     	; 0x15ea <GPIO_setupPortDirection+0x96>
		case PORT_A:
			DDRA = direction;
    15c4:	ea e3       	ldi	r30, 0x3A	; 58
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ca:	80 83       	st	Z, r24
    15cc:	0e c0       	rjmp	.+28     	; 0x15ea <GPIO_setupPortDirection+0x96>
			break;
		case PORT_B:
			DDRB = direction;
    15ce:	e7 e3       	ldi	r30, 0x37	; 55
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	8b 81       	ldd	r24, Y+3	; 0x03
    15d4:	80 83       	st	Z, r24
    15d6:	09 c0       	rjmp	.+18     	; 0x15ea <GPIO_setupPortDirection+0x96>
			break;
		case PORT_C:
			DDRC = direction;
    15d8:	e4 e3       	ldi	r30, 0x34	; 52
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	8b 81       	ldd	r24, Y+3	; 0x03
    15de:	80 83       	st	Z, r24
    15e0:	04 c0       	rjmp	.+8      	; 0x15ea <GPIO_setupPortDirection+0x96>
			break;
		case PORT_D:
			DDRD = direction;
    15e2:	e1 e3       	ldi	r30, 0x31	; 49
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	8b 81       	ldd	r24, Y+3	; 0x03
    15e8:	80 83       	st	Z, r24
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    15ea:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    15ec:	89 81       	ldd	r24, Y+1	; 0x01
}
    15ee:	0f 90       	pop	r0
    15f0:	0f 90       	pop	r0
    15f2:	0f 90       	pop	r0
    15f4:	0f 90       	pop	r0
    15f6:	0f 90       	pop	r0
    15f8:	cf 91       	pop	r28
    15fa:	df 91       	pop	r29
    15fc:	08 95       	ret

000015fe <GPIO_writePort>:
 * Write the value on the required port.
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
GPIO_Error_t GPIO_writePort(uint8 port_num, uint8 value) {
    15fe:	df 93       	push	r29
    1600:	cf 93       	push	r28
    1602:	00 d0       	rcall	.+0      	; 0x1604 <GPIO_writePort+0x6>
    1604:	00 d0       	rcall	.+0      	; 0x1606 <GPIO_writePort+0x8>
    1606:	0f 92       	push	r0
    1608:	cd b7       	in	r28, 0x3d	; 61
    160a:	de b7       	in	r29, 0x3e	; 62
    160c:	8a 83       	std	Y+2, r24	; 0x02
    160e:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t GPIO_Driver_Checker = NULL;
    1610:	19 82       	std	Y+1, r1	; 0x01
	if((port_num >= NUM_OF_PORTS)) {
    1612:	8a 81       	ldd	r24, Y+2	; 0x02
    1614:	84 30       	cpi	r24, 0x04	; 4
    1616:	18 f0       	brcs	.+6      	; 0x161e <GPIO_writePort+0x20>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    1618:	82 e0       	ldi	r24, 0x02	; 2
    161a:	89 83       	std	Y+1, r24	; 0x01
    161c:	33 c0       	rjmp	.+102    	; 0x1684 <GPIO_writePort+0x86>
	}
	else {
		/* Setup the port direction as required */
		switch(port_num) {
    161e:	8a 81       	ldd	r24, Y+2	; 0x02
    1620:	28 2f       	mov	r18, r24
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	3d 83       	std	Y+5, r19	; 0x05
    1626:	2c 83       	std	Y+4, r18	; 0x04
    1628:	8c 81       	ldd	r24, Y+4	; 0x04
    162a:	9d 81       	ldd	r25, Y+5	; 0x05
    162c:	81 30       	cpi	r24, 0x01	; 1
    162e:	91 05       	cpc	r25, r1
    1630:	d1 f0       	breq	.+52     	; 0x1666 <GPIO_writePort+0x68>
    1632:	2c 81       	ldd	r18, Y+4	; 0x04
    1634:	3d 81       	ldd	r19, Y+5	; 0x05
    1636:	22 30       	cpi	r18, 0x02	; 2
    1638:	31 05       	cpc	r19, r1
    163a:	2c f4       	brge	.+10     	; 0x1646 <GPIO_writePort+0x48>
    163c:	8c 81       	ldd	r24, Y+4	; 0x04
    163e:	9d 81       	ldd	r25, Y+5	; 0x05
    1640:	00 97       	sbiw	r24, 0x00	; 0
    1642:	61 f0       	breq	.+24     	; 0x165c <GPIO_writePort+0x5e>
    1644:	1e c0       	rjmp	.+60     	; 0x1682 <GPIO_writePort+0x84>
    1646:	2c 81       	ldd	r18, Y+4	; 0x04
    1648:	3d 81       	ldd	r19, Y+5	; 0x05
    164a:	22 30       	cpi	r18, 0x02	; 2
    164c:	31 05       	cpc	r19, r1
    164e:	81 f0       	breq	.+32     	; 0x1670 <GPIO_writePort+0x72>
    1650:	8c 81       	ldd	r24, Y+4	; 0x04
    1652:	9d 81       	ldd	r25, Y+5	; 0x05
    1654:	83 30       	cpi	r24, 0x03	; 3
    1656:	91 05       	cpc	r25, r1
    1658:	81 f0       	breq	.+32     	; 0x167a <GPIO_writePort+0x7c>
    165a:	13 c0       	rjmp	.+38     	; 0x1682 <GPIO_writePort+0x84>
		case PORT_A:
			PORTA = value;
    165c:	eb e3       	ldi	r30, 0x3B	; 59
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	8b 81       	ldd	r24, Y+3	; 0x03
    1662:	80 83       	st	Z, r24
    1664:	0e c0       	rjmp	.+28     	; 0x1682 <GPIO_writePort+0x84>
			break;
		case PORT_B:
			PORTB = value;
    1666:	e8 e3       	ldi	r30, 0x38	; 56
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	8b 81       	ldd	r24, Y+3	; 0x03
    166c:	80 83       	st	Z, r24
    166e:	09 c0       	rjmp	.+18     	; 0x1682 <GPIO_writePort+0x84>
			break;
		case PORT_C:
			PORTC = value;
    1670:	e5 e3       	ldi	r30, 0x35	; 53
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	8b 81       	ldd	r24, Y+3	; 0x03
    1676:	80 83       	st	Z, r24
    1678:	04 c0       	rjmp	.+8      	; 0x1682 <GPIO_writePort+0x84>
			break;
		case PORT_D:
			PORTD = value;
    167a:	e2 e3       	ldi	r30, 0x32	; 50
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	8b 81       	ldd	r24, Y+3	; 0x03
    1680:	80 83       	st	Z, r24
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    1682:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    1684:	89 81       	ldd	r24, Y+1	; 0x01
}
    1686:	0f 90       	pop	r0
    1688:	0f 90       	pop	r0
    168a:	0f 90       	pop	r0
    168c:	0f 90       	pop	r0
    168e:	0f 90       	pop	r0
    1690:	cf 91       	pop	r28
    1692:	df 91       	pop	r29
    1694:	08 95       	ret

00001696 <GPIO_readPort>:
/*
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num) {
    1696:	df 93       	push	r29
    1698:	cf 93       	push	r28
    169a:	00 d0       	rcall	.+0      	; 0x169c <GPIO_readPort+0x6>
    169c:	00 d0       	rcall	.+0      	; 0x169e <GPIO_readPort+0x8>
    169e:	0f 92       	push	r0
    16a0:	cd b7       	in	r28, 0x3d	; 61
    16a2:	de b7       	in	r29, 0x3e	; 62
    16a4:	8b 83       	std	Y+3, r24	; 0x03
	uint8 value = LOGIC_LOW;
    16a6:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t GPIO_Driver_Checker = NULL;
    16a8:	19 82       	std	Y+1, r1	; 0x01

	if((port_num >= NUM_OF_PORTS)) {
    16aa:	8b 81       	ldd	r24, Y+3	; 0x03
    16ac:	84 30       	cpi	r24, 0x04	; 4
    16ae:	18 f0       	brcs	.+6      	; 0x16b6 <GPIO_readPort+0x20>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    16b0:	82 e0       	ldi	r24, 0x02	; 2
    16b2:	89 83       	std	Y+1, r24	; 0x01
    16b4:	32 c0       	rjmp	.+100    	; 0x171a <GPIO_readPort+0x84>
	}
	else {
		switch(port_num) {
    16b6:	8b 81       	ldd	r24, Y+3	; 0x03
    16b8:	28 2f       	mov	r18, r24
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	3d 83       	std	Y+5, r19	; 0x05
    16be:	2c 83       	std	Y+4, r18	; 0x04
    16c0:	8c 81       	ldd	r24, Y+4	; 0x04
    16c2:	9d 81       	ldd	r25, Y+5	; 0x05
    16c4:	81 30       	cpi	r24, 0x01	; 1
    16c6:	91 05       	cpc	r25, r1
    16c8:	d1 f0       	breq	.+52     	; 0x16fe <GPIO_readPort+0x68>
    16ca:	2c 81       	ldd	r18, Y+4	; 0x04
    16cc:	3d 81       	ldd	r19, Y+5	; 0x05
    16ce:	22 30       	cpi	r18, 0x02	; 2
    16d0:	31 05       	cpc	r19, r1
    16d2:	2c f4       	brge	.+10     	; 0x16de <GPIO_readPort+0x48>
    16d4:	8c 81       	ldd	r24, Y+4	; 0x04
    16d6:	9d 81       	ldd	r25, Y+5	; 0x05
    16d8:	00 97       	sbiw	r24, 0x00	; 0
    16da:	61 f0       	breq	.+24     	; 0x16f4 <GPIO_readPort+0x5e>
    16dc:	1e c0       	rjmp	.+60     	; 0x171a <GPIO_readPort+0x84>
    16de:	2c 81       	ldd	r18, Y+4	; 0x04
    16e0:	3d 81       	ldd	r19, Y+5	; 0x05
    16e2:	22 30       	cpi	r18, 0x02	; 2
    16e4:	31 05       	cpc	r19, r1
    16e6:	81 f0       	breq	.+32     	; 0x1708 <GPIO_readPort+0x72>
    16e8:	8c 81       	ldd	r24, Y+4	; 0x04
    16ea:	9d 81       	ldd	r25, Y+5	; 0x05
    16ec:	83 30       	cpi	r24, 0x03	; 3
    16ee:	91 05       	cpc	r25, r1
    16f0:	81 f0       	breq	.+32     	; 0x1712 <GPIO_readPort+0x7c>
    16f2:	13 c0       	rjmp	.+38     	; 0x171a <GPIO_readPort+0x84>
		case PORT_A:
			// Why value equals PINA?
			value = PINA;
    16f4:	e9 e3       	ldi	r30, 0x39	; 57
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	80 81       	ld	r24, Z
    16fa:	8a 83       	std	Y+2, r24	; 0x02
    16fc:	0e c0       	rjmp	.+28     	; 0x171a <GPIO_readPort+0x84>
			break;
		case PORT_B:
			value = PINB;
    16fe:	e6 e3       	ldi	r30, 0x36	; 54
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	8a 83       	std	Y+2, r24	; 0x02
    1706:	09 c0       	rjmp	.+18     	; 0x171a <GPIO_readPort+0x84>
			break;
		case PORT_C:
			value = PINC;
    1708:	e3 e3       	ldi	r30, 0x33	; 51
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	8a 83       	std	Y+2, r24	; 0x02
    1710:	04 c0       	rjmp	.+8      	; 0x171a <GPIO_readPort+0x84>
			break;
		case PORT_D:
			value = PIND;
    1712:	e0 e3       	ldi	r30, 0x30	; 48
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	80 81       	ld	r24, Z
    1718:	8a 83       	std	Y+2, r24	; 0x02
			break;
		}
	}
	return value;
    171a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    171c:	0f 90       	pop	r0
    171e:	0f 90       	pop	r0
    1720:	0f 90       	pop	r0
    1722:	0f 90       	pop	r0
    1724:	0f 90       	pop	r0
    1726:	cf 91       	pop	r28
    1728:	df 91       	pop	r29
    172a:	08 95       	ret

0000172c <ADC_Init>:
#include "avr/io.h" /* To use the IO Ports Registers */
#include <util/delay.h>


// Initializes and enables the ADC Module to start functionality
void ADC_Init(void) {
    172c:	df 93       	push	r29
    172e:	cf 93       	push	r28
    1730:	cd b7       	in	r28, 0x3d	; 61
    1732:	de b7       	in	r29, 0x3e	; 62
	 * 7:6, REFS1:0 = 01 to choose AVCC = 5v as reference voltage
	 * 5, ADLAR   = 0 right adjusted
	 * 4:0, MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	// Sets REFS1:0 to '01'
	ADMUX = (1 << REFS0);
    1734:	e7 e2       	ldi	r30, 0x27	; 39
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 e4       	ldi	r24, 0x40	; 64
    173a:	80 83       	st	Z, r24
	 * ADIE = 0 Disable ADC Interrupt
	 * ADATE = 0 Disable Auto Trigger
	 * ADPS2:0 = 111 to choose ADC_Clock = F_CPU/128 = 16Mhz/128 = 125Khz --> ADC must operate in range 50-200Khz
	 */
	// Enables ADC
	ADCSRA = (1 << ADEN);
    173c:	e6 e2       	ldi	r30, 0x26	; 38
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	80 e8       	ldi	r24, 0x80	; 128
    1742:	80 83       	st	Z, r24

	// Choose Prescaler: 128
	ADCSRA = (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
    1744:	e6 e2       	ldi	r30, 0x26	; 38
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	87 e0       	ldi	r24, 0x07	; 7
    174a:	80 83       	st	Z, r24
}
    174c:	cf 91       	pop	r28
    174e:	df 91       	pop	r29
    1750:	08 95       	ret

00001752 <ADC_readChannel>:


// Reads the content written to the selected channel of the ADC
uint16 ADC_readChannel(uint8 channel_num) {
    1752:	df 93       	push	r29
    1754:	cf 93       	push	r28
    1756:	0f 92       	push	r0
    1758:	cd b7       	in	r28, 0x3d	; 61
    175a:	de b7       	in	r29, 0x3e	; 62
    175c:	89 83       	std	Y+1, r24	; 0x01

	// Insert Channel Number in ADMUX Procedure

	// Clears first 5 bits to zero
	ADMUX &= 0xE0; // 0b1110 0000
    175e:	a7 e2       	ldi	r26, 0x27	; 39
    1760:	b0 e0       	ldi	r27, 0x00	; 0
    1762:	e7 e2       	ldi	r30, 0x27	; 39
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	80 81       	ld	r24, Z
    1768:	80 7e       	andi	r24, 0xE0	; 224
    176a:	8c 93       	st	X, r24

	// Mask the Channel No. Input with max channel No.
	channel_num &= 0x07; // 0b0000 0111
    176c:	89 81       	ldd	r24, Y+1	; 0x01
    176e:	87 70       	andi	r24, 0x07	; 7
    1770:	89 83       	std	Y+1, r24	; 0x01

	// Insert Channel no. into ADMUX Register
	ADMUX |= channel_num;
    1772:	a7 e2       	ldi	r26, 0x27	; 39
    1774:	b0 e0       	ldi	r27, 0x00	; 0
    1776:	e7 e2       	ldi	r30, 0x27	; 39
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	90 81       	ld	r25, Z
    177c:	89 81       	ldd	r24, Y+1	; 0x01
    177e:	89 2b       	or	r24, r25
    1780:	8c 93       	st	X, r24

	// Starts ADC Conversion
	ADCSRA = (1 << ADSC);
    1782:	e6 e2       	ldi	r30, 0x26	; 38
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 e4       	ldi	r24, 0x40	; 64
    1788:	80 83       	st	Z, r24

	// Busy wait (Polling) untill ADIF = 1
	while ( BIT_IS_CLR(ADCSRA, ADIF) );
    178a:	e6 e2       	ldi	r30, 0x26	; 38
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	80 81       	ld	r24, Z
    1790:	88 2f       	mov	r24, r24
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	80 71       	andi	r24, 0x10	; 16
    1796:	90 70       	andi	r25, 0x00	; 0
    1798:	00 97       	sbiw	r24, 0x00	; 0
    179a:	b9 f3       	breq	.-18     	; 0x178a <ADC_readChannel+0x38>

	// sET FLAG BY 1 TO CLEAR
	ADCSRA = (1 << ADIF);
    179c:	e6 e2       	ldi	r30, 0x26	; 38
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	80 e1       	ldi	r24, 0x10	; 16
    17a2:	80 83       	st	Z, r24

	// Read Data
	return ADC;
    17a4:	e4 e2       	ldi	r30, 0x24	; 36
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	91 81       	ldd	r25, Z+1	; 0x01
}
    17ac:	0f 90       	pop	r0
    17ae:	cf 91       	pop	r28
    17b0:	df 91       	pop	r29
    17b2:	08 95       	ret

000017b4 <SEGMENT_Init>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
SEGMENT_Error_t SEGMENT_Init(uint8 port_num) {
    17b4:	df 93       	push	r29
    17b6:	cf 93       	push	r28
    17b8:	00 d0       	rcall	.+0      	; 0x17ba <SEGMENT_Init+0x6>
    17ba:	cd b7       	in	r28, 0x3d	; 61
    17bc:	de b7       	in	r29, 0x3e	; 62
    17be:	8a 83       	std	Y+2, r24	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t SEGMENT_Driver_Checker = NULL;
    17c0:	19 82       	std	Y+1, r1	; 0x01

	if((port_num >= NUM_OF_PORTS)) {
    17c2:	8a 81       	ldd	r24, Y+2	; 0x02
    17c4:	84 30       	cpi	r24, 0x04	; 4
    17c6:	18 f0       	brcs	.+6      	; 0x17ce <SEGMENT_Init+0x1a>
		SEGMENT_Driver_Checker = SEGMENT_WRONG_PORT_NUMBER;
    17c8:	82 e0       	ldi	r24, 0x02	; 2
    17ca:	89 83       	std	Y+1, r24	; 0x01
    17cc:	15 c0       	rjmp	.+42     	; 0x17f8 <SEGMENT_Init+0x44>
	}
	else {
		/* Setup the pin direction as required */
		GPIO_setupPinDirection(port_num, PIN_0, PIN_OUTPUT);
    17ce:	8a 81       	ldd	r24, Y+2	; 0x02
    17d0:	60 e0       	ldi	r22, 0x00	; 0
    17d2:	41 e0       	ldi	r20, 0x01	; 1
    17d4:	0e 94 79 07 	call	0xef2	; 0xef2 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(port_num, PIN_1, PIN_OUTPUT);
    17d8:	8a 81       	ldd	r24, Y+2	; 0x02
    17da:	61 e0       	ldi	r22, 0x01	; 1
    17dc:	41 e0       	ldi	r20, 0x01	; 1
    17de:	0e 94 79 07 	call	0xef2	; 0xef2 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(port_num, PIN_2, PIN_OUTPUT);
    17e2:	8a 81       	ldd	r24, Y+2	; 0x02
    17e4:	62 e0       	ldi	r22, 0x02	; 2
    17e6:	41 e0       	ldi	r20, 0x01	; 1
    17e8:	0e 94 79 07 	call	0xef2	; 0xef2 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(port_num, PIN_3, PIN_OUTPUT);
    17ec:	8a 81       	ldd	r24, Y+2	; 0x02
    17ee:	63 e0       	ldi	r22, 0x03	; 3
    17f0:	41 e0       	ldi	r20, 0x01	; 1
    17f2:	0e 94 79 07 	call	0xef2	; 0xef2 <GPIO_setupPinDirection>
		SEGMENT_Driver_Checker = SEGMENT_OK;
    17f6:	19 82       	std	Y+1, r1	; 0x01
	}
	return SEGMENT_Driver_Checker;
    17f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    17fa:	0f 90       	pop	r0
    17fc:	0f 90       	pop	r0
    17fe:	cf 91       	pop	r28
    1800:	df 91       	pop	r29
    1802:	08 95       	ret

00001804 <SEGMENT_DISPLAY>:

SEGMENT_Error_t SEGMENT_DISPLAY(uint8 port_num, uint8 value) {
    1804:	df 93       	push	r29
    1806:	cf 93       	push	r28
    1808:	00 d0       	rcall	.+0      	; 0x180a <SEGMENT_DISPLAY+0x6>
    180a:	00 d0       	rcall	.+0      	; 0x180c <SEGMENT_DISPLAY+0x8>
    180c:	0f 92       	push	r0
    180e:	cd b7       	in	r28, 0x3d	; 61
    1810:	de b7       	in	r29, 0x3e	; 62
    1812:	8a 83       	std	Y+2, r24	; 0x02
    1814:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t SEGMENT_Driver_Checker = NULL;
    1816:	19 82       	std	Y+1, r1	; 0x01

	if((port_num >= NUM_OF_PORTS)) {
    1818:	8a 81       	ldd	r24, Y+2	; 0x02
    181a:	84 30       	cpi	r24, 0x04	; 4
    181c:	18 f0       	brcs	.+6      	; 0x1824 <SEGMENT_DISPLAY+0x20>
		SEGMENT_Driver_Checker = SEGMENT_WRONG_PORT_NUMBER;
    181e:	82 e0       	ldi	r24, 0x02	; 2
    1820:	89 83       	std	Y+1, r24	; 0x01
    1822:	24 c1       	rjmp	.+584    	; 0x1a6c <SEGMENT_DISPLAY+0x268>
	}
	else if((value < 0 && value > 9)) {
		SEGMENT_Driver_Checker = SEGMENT_WRONG_VALUE;
	}
	else {
		switch(value) {
    1824:	8b 81       	ldd	r24, Y+3	; 0x03
    1826:	28 2f       	mov	r18, r24
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	3d 83       	std	Y+5, r19	; 0x05
    182c:	2c 83       	std	Y+4, r18	; 0x04
    182e:	8c 81       	ldd	r24, Y+4	; 0x04
    1830:	9d 81       	ldd	r25, Y+5	; 0x05
    1832:	84 30       	cpi	r24, 0x04	; 4
    1834:	91 05       	cpc	r25, r1
    1836:	09 f4       	brne	.+2      	; 0x183a <SEGMENT_DISPLAY+0x36>
    1838:	9b c0       	rjmp	.+310    	; 0x1970 <SEGMENT_DISPLAY+0x16c>
    183a:	2c 81       	ldd	r18, Y+4	; 0x04
    183c:	3d 81       	ldd	r19, Y+5	; 0x05
    183e:	25 30       	cpi	r18, 0x05	; 5
    1840:	31 05       	cpc	r19, r1
    1842:	ec f4       	brge	.+58     	; 0x187e <SEGMENT_DISPLAY+0x7a>
    1844:	8c 81       	ldd	r24, Y+4	; 0x04
    1846:	9d 81       	ldd	r25, Y+5	; 0x05
    1848:	81 30       	cpi	r24, 0x01	; 1
    184a:	91 05       	cpc	r25, r1
    184c:	09 f4       	brne	.+2      	; 0x1850 <SEGMENT_DISPLAY+0x4c>
    184e:	51 c0       	rjmp	.+162    	; 0x18f2 <SEGMENT_DISPLAY+0xee>
    1850:	2c 81       	ldd	r18, Y+4	; 0x04
    1852:	3d 81       	ldd	r19, Y+5	; 0x05
    1854:	22 30       	cpi	r18, 0x02	; 2
    1856:	31 05       	cpc	r19, r1
    1858:	2c f4       	brge	.+10     	; 0x1864 <SEGMENT_DISPLAY+0x60>
    185a:	8c 81       	ldd	r24, Y+4	; 0x04
    185c:	9d 81       	ldd	r25, Y+5	; 0x05
    185e:	00 97       	sbiw	r24, 0x00	; 0
    1860:	99 f1       	breq	.+102    	; 0x18c8 <SEGMENT_DISPLAY+0xc4>
    1862:	03 c1       	rjmp	.+518    	; 0x1a6a <SEGMENT_DISPLAY+0x266>
    1864:	2c 81       	ldd	r18, Y+4	; 0x04
    1866:	3d 81       	ldd	r19, Y+5	; 0x05
    1868:	22 30       	cpi	r18, 0x02	; 2
    186a:	31 05       	cpc	r19, r1
    186c:	09 f4       	brne	.+2      	; 0x1870 <SEGMENT_DISPLAY+0x6c>
    186e:	56 c0       	rjmp	.+172    	; 0x191c <SEGMENT_DISPLAY+0x118>
    1870:	8c 81       	ldd	r24, Y+4	; 0x04
    1872:	9d 81       	ldd	r25, Y+5	; 0x05
    1874:	83 30       	cpi	r24, 0x03	; 3
    1876:	91 05       	cpc	r25, r1
    1878:	09 f4       	brne	.+2      	; 0x187c <SEGMENT_DISPLAY+0x78>
    187a:	65 c0       	rjmp	.+202    	; 0x1946 <SEGMENT_DISPLAY+0x142>
    187c:	f6 c0       	rjmp	.+492    	; 0x1a6a <SEGMENT_DISPLAY+0x266>
    187e:	2c 81       	ldd	r18, Y+4	; 0x04
    1880:	3d 81       	ldd	r19, Y+5	; 0x05
    1882:	27 30       	cpi	r18, 0x07	; 7
    1884:	31 05       	cpc	r19, r1
    1886:	09 f4       	brne	.+2      	; 0x188a <SEGMENT_DISPLAY+0x86>
    1888:	b2 c0       	rjmp	.+356    	; 0x19ee <SEGMENT_DISPLAY+0x1ea>
    188a:	8c 81       	ldd	r24, Y+4	; 0x04
    188c:	9d 81       	ldd	r25, Y+5	; 0x05
    188e:	88 30       	cpi	r24, 0x08	; 8
    1890:	91 05       	cpc	r25, r1
    1892:	6c f4       	brge	.+26     	; 0x18ae <SEGMENT_DISPLAY+0xaa>
    1894:	2c 81       	ldd	r18, Y+4	; 0x04
    1896:	3d 81       	ldd	r19, Y+5	; 0x05
    1898:	25 30       	cpi	r18, 0x05	; 5
    189a:	31 05       	cpc	r19, r1
    189c:	09 f4       	brne	.+2      	; 0x18a0 <SEGMENT_DISPLAY+0x9c>
    189e:	7d c0       	rjmp	.+250    	; 0x199a <SEGMENT_DISPLAY+0x196>
    18a0:	8c 81       	ldd	r24, Y+4	; 0x04
    18a2:	9d 81       	ldd	r25, Y+5	; 0x05
    18a4:	86 30       	cpi	r24, 0x06	; 6
    18a6:	91 05       	cpc	r25, r1
    18a8:	09 f4       	brne	.+2      	; 0x18ac <SEGMENT_DISPLAY+0xa8>
    18aa:	8c c0       	rjmp	.+280    	; 0x19c4 <SEGMENT_DISPLAY+0x1c0>
    18ac:	de c0       	rjmp	.+444    	; 0x1a6a <SEGMENT_DISPLAY+0x266>
    18ae:	2c 81       	ldd	r18, Y+4	; 0x04
    18b0:	3d 81       	ldd	r19, Y+5	; 0x05
    18b2:	28 30       	cpi	r18, 0x08	; 8
    18b4:	31 05       	cpc	r19, r1
    18b6:	09 f4       	brne	.+2      	; 0x18ba <SEGMENT_DISPLAY+0xb6>
    18b8:	af c0       	rjmp	.+350    	; 0x1a18 <SEGMENT_DISPLAY+0x214>
    18ba:	8c 81       	ldd	r24, Y+4	; 0x04
    18bc:	9d 81       	ldd	r25, Y+5	; 0x05
    18be:	89 30       	cpi	r24, 0x09	; 9
    18c0:	91 05       	cpc	r25, r1
    18c2:	09 f4       	brne	.+2      	; 0x18c6 <SEGMENT_DISPLAY+0xc2>
    18c4:	be c0       	rjmp	.+380    	; 0x1a42 <SEGMENT_DISPLAY+0x23e>
    18c6:	d1 c0       	rjmp	.+418    	; 0x1a6a <SEGMENT_DISPLAY+0x266>
			case 0:
				GPIO_writePin(port_num, PIN_0, LOGIC_LOW);
    18c8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ca:	60 e0       	ldi	r22, 0x00	; 0
    18cc:	40 e0       	ldi	r20, 0x00	; 0
    18ce:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
    18d2:	8a 81       	ldd	r24, Y+2	; 0x02
    18d4:	61 e0       	ldi	r22, 0x01	; 1
    18d6:	40 e0       	ldi	r20, 0x00	; 0
    18d8:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
    18dc:	8a 81       	ldd	r24, Y+2	; 0x02
    18de:	62 e0       	ldi	r22, 0x02	; 2
    18e0:	40 e0       	ldi	r20, 0x00	; 0
    18e2:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    18e6:	8a 81       	ldd	r24, Y+2	; 0x02
    18e8:	63 e0       	ldi	r22, 0x03	; 3
    18ea:	40 e0       	ldi	r20, 0x00	; 0
    18ec:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
    18f0:	bc c0       	rjmp	.+376    	; 0x1a6a <SEGMENT_DISPLAY+0x266>
				break;
			case 1:
				GPIO_writePin(port_num, PIN_0, LOGIC_HIGH);
    18f2:	8a 81       	ldd	r24, Y+2	; 0x02
    18f4:	60 e0       	ldi	r22, 0x00	; 0
    18f6:	41 e0       	ldi	r20, 0x01	; 1
    18f8:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
    18fc:	8a 81       	ldd	r24, Y+2	; 0x02
    18fe:	61 e0       	ldi	r22, 0x01	; 1
    1900:	40 e0       	ldi	r20, 0x00	; 0
    1902:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
    1906:	8a 81       	ldd	r24, Y+2	; 0x02
    1908:	62 e0       	ldi	r22, 0x02	; 2
    190a:	40 e0       	ldi	r20, 0x00	; 0
    190c:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    1910:	8a 81       	ldd	r24, Y+2	; 0x02
    1912:	63 e0       	ldi	r22, 0x03	; 3
    1914:	40 e0       	ldi	r20, 0x00	; 0
    1916:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
    191a:	a7 c0       	rjmp	.+334    	; 0x1a6a <SEGMENT_DISPLAY+0x266>
				break;
			case 2:
				GPIO_writePin(port_num, PIN_0, LOGIC_LOW);
    191c:	8a 81       	ldd	r24, Y+2	; 0x02
    191e:	60 e0       	ldi	r22, 0x00	; 0
    1920:	40 e0       	ldi	r20, 0x00	; 0
    1922:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_HIGH);
    1926:	8a 81       	ldd	r24, Y+2	; 0x02
    1928:	61 e0       	ldi	r22, 0x01	; 1
    192a:	41 e0       	ldi	r20, 0x01	; 1
    192c:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
    1930:	8a 81       	ldd	r24, Y+2	; 0x02
    1932:	62 e0       	ldi	r22, 0x02	; 2
    1934:	40 e0       	ldi	r20, 0x00	; 0
    1936:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    193a:	8a 81       	ldd	r24, Y+2	; 0x02
    193c:	63 e0       	ldi	r22, 0x03	; 3
    193e:	40 e0       	ldi	r20, 0x00	; 0
    1940:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
    1944:	92 c0       	rjmp	.+292    	; 0x1a6a <SEGMENT_DISPLAY+0x266>
				break;
			case 3:
				GPIO_writePin(port_num, PIN_0, LOGIC_HIGH);
    1946:	8a 81       	ldd	r24, Y+2	; 0x02
    1948:	60 e0       	ldi	r22, 0x00	; 0
    194a:	41 e0       	ldi	r20, 0x01	; 1
    194c:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_HIGH);
    1950:	8a 81       	ldd	r24, Y+2	; 0x02
    1952:	61 e0       	ldi	r22, 0x01	; 1
    1954:	41 e0       	ldi	r20, 0x01	; 1
    1956:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
    195a:	8a 81       	ldd	r24, Y+2	; 0x02
    195c:	62 e0       	ldi	r22, 0x02	; 2
    195e:	40 e0       	ldi	r20, 0x00	; 0
    1960:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    1964:	8a 81       	ldd	r24, Y+2	; 0x02
    1966:	63 e0       	ldi	r22, 0x03	; 3
    1968:	40 e0       	ldi	r20, 0x00	; 0
    196a:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
    196e:	7d c0       	rjmp	.+250    	; 0x1a6a <SEGMENT_DISPLAY+0x266>
				break;
			case 4:
				GPIO_writePin(port_num, PIN_0, LOGIC_LOW);
    1970:	8a 81       	ldd	r24, Y+2	; 0x02
    1972:	60 e0       	ldi	r22, 0x00	; 0
    1974:	40 e0       	ldi	r20, 0x00	; 0
    1976:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
    197a:	8a 81       	ldd	r24, Y+2	; 0x02
    197c:	61 e0       	ldi	r22, 0x01	; 1
    197e:	40 e0       	ldi	r20, 0x00	; 0
    1980:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_HIGH);
    1984:	8a 81       	ldd	r24, Y+2	; 0x02
    1986:	62 e0       	ldi	r22, 0x02	; 2
    1988:	41 e0       	ldi	r20, 0x01	; 1
    198a:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    198e:	8a 81       	ldd	r24, Y+2	; 0x02
    1990:	63 e0       	ldi	r22, 0x03	; 3
    1992:	40 e0       	ldi	r20, 0x00	; 0
    1994:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
    1998:	68 c0       	rjmp	.+208    	; 0x1a6a <SEGMENT_DISPLAY+0x266>
				break;
			case 5:
				GPIO_writePin(port_num, PIN_0, LOGIC_HIGH);
    199a:	8a 81       	ldd	r24, Y+2	; 0x02
    199c:	60 e0       	ldi	r22, 0x00	; 0
    199e:	41 e0       	ldi	r20, 0x01	; 1
    19a0:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
    19a4:	8a 81       	ldd	r24, Y+2	; 0x02
    19a6:	61 e0       	ldi	r22, 0x01	; 1
    19a8:	40 e0       	ldi	r20, 0x00	; 0
    19aa:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_HIGH);
    19ae:	8a 81       	ldd	r24, Y+2	; 0x02
    19b0:	62 e0       	ldi	r22, 0x02	; 2
    19b2:	41 e0       	ldi	r20, 0x01	; 1
    19b4:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    19b8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ba:	63 e0       	ldi	r22, 0x03	; 3
    19bc:	40 e0       	ldi	r20, 0x00	; 0
    19be:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
    19c2:	53 c0       	rjmp	.+166    	; 0x1a6a <SEGMENT_DISPLAY+0x266>
				break;
			case 6:
				GPIO_writePin(port_num, PIN_0, LOGIC_LOW);
    19c4:	8a 81       	ldd	r24, Y+2	; 0x02
    19c6:	60 e0       	ldi	r22, 0x00	; 0
    19c8:	40 e0       	ldi	r20, 0x00	; 0
    19ca:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_HIGH);
    19ce:	8a 81       	ldd	r24, Y+2	; 0x02
    19d0:	61 e0       	ldi	r22, 0x01	; 1
    19d2:	41 e0       	ldi	r20, 0x01	; 1
    19d4:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_HIGH);
    19d8:	8a 81       	ldd	r24, Y+2	; 0x02
    19da:	62 e0       	ldi	r22, 0x02	; 2
    19dc:	41 e0       	ldi	r20, 0x01	; 1
    19de:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    19e2:	8a 81       	ldd	r24, Y+2	; 0x02
    19e4:	63 e0       	ldi	r22, 0x03	; 3
    19e6:	40 e0       	ldi	r20, 0x00	; 0
    19e8:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
    19ec:	3e c0       	rjmp	.+124    	; 0x1a6a <SEGMENT_DISPLAY+0x266>
				break;
			case 7:
				GPIO_writePin(port_num, PIN_0, LOGIC_HIGH);
    19ee:	8a 81       	ldd	r24, Y+2	; 0x02
    19f0:	60 e0       	ldi	r22, 0x00	; 0
    19f2:	41 e0       	ldi	r20, 0x01	; 1
    19f4:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_HIGH);
    19f8:	8a 81       	ldd	r24, Y+2	; 0x02
    19fa:	61 e0       	ldi	r22, 0x01	; 1
    19fc:	41 e0       	ldi	r20, 0x01	; 1
    19fe:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_HIGH);
    1a02:	8a 81       	ldd	r24, Y+2	; 0x02
    1a04:	62 e0       	ldi	r22, 0x02	; 2
    1a06:	41 e0       	ldi	r20, 0x01	; 1
    1a08:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    1a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0e:	63 e0       	ldi	r22, 0x03	; 3
    1a10:	40 e0       	ldi	r20, 0x00	; 0
    1a12:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
    1a16:	29 c0       	rjmp	.+82     	; 0x1a6a <SEGMENT_DISPLAY+0x266>
				break;
			case 8:
				GPIO_writePin(port_num, PIN_0, LOGIC_LOW);
    1a18:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1a:	60 e0       	ldi	r22, 0x00	; 0
    1a1c:	40 e0       	ldi	r20, 0x00	; 0
    1a1e:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
    1a22:	8a 81       	ldd	r24, Y+2	; 0x02
    1a24:	61 e0       	ldi	r22, 0x01	; 1
    1a26:	40 e0       	ldi	r20, 0x00	; 0
    1a28:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
    1a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2e:	62 e0       	ldi	r22, 0x02	; 2
    1a30:	40 e0       	ldi	r20, 0x00	; 0
    1a32:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_HIGH);
    1a36:	8a 81       	ldd	r24, Y+2	; 0x02
    1a38:	63 e0       	ldi	r22, 0x03	; 3
    1a3a:	41 e0       	ldi	r20, 0x01	; 1
    1a3c:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
    1a40:	14 c0       	rjmp	.+40     	; 0x1a6a <SEGMENT_DISPLAY+0x266>
				break;
			case 9:
				GPIO_writePin(port_num, PIN_0, LOGIC_HIGH);
    1a42:	8a 81       	ldd	r24, Y+2	; 0x02
    1a44:	60 e0       	ldi	r22, 0x00	; 0
    1a46:	41 e0       	ldi	r20, 0x01	; 1
    1a48:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
    1a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4e:	61 e0       	ldi	r22, 0x01	; 1
    1a50:	40 e0       	ldi	r20, 0x00	; 0
    1a52:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
    1a56:	8a 81       	ldd	r24, Y+2	; 0x02
    1a58:	62 e0       	ldi	r22, 0x02	; 2
    1a5a:	40 e0       	ldi	r20, 0x00	; 0
    1a5c:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_HIGH);
    1a60:	8a 81       	ldd	r24, Y+2	; 0x02
    1a62:	63 e0       	ldi	r22, 0x03	; 3
    1a64:	41 e0       	ldi	r20, 0x01	; 1
    1a66:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
				break;
		}
		SEGMENT_Driver_Checker = SEGMENT_OK;
    1a6a:	19 82       	std	Y+1, r1	; 0x01
	}
	return SEGMENT_Driver_Checker;
    1a6c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a6e:	0f 90       	pop	r0
    1a70:	0f 90       	pop	r0
    1a72:	0f 90       	pop	r0
    1a74:	0f 90       	pop	r0
    1a76:	0f 90       	pop	r0
    1a78:	cf 91       	pop	r28
    1a7a:	df 91       	pop	r29
    1a7c:	08 95       	ret

00001a7e <LM35_getTemperature>:
#include "avr/io.h" /* To use the IO Ports Registers */
#include <util/delay.h>


// Initializes and enables the ADC Module to start functionality
uint8 LM35_getTemperature(void) {
    1a7e:	df 93       	push	r29
    1a80:	cf 93       	push	r28
    1a82:	00 d0       	rcall	.+0      	; 0x1a84 <LM35_getTemperature+0x6>
    1a84:	cd b7       	in	r28, 0x3d	; 61
    1a86:	de b7       	in	r29, 0x3e	; 62
	uint8 temperature = 0;
    1a88:	1a 82       	std	Y+2, r1	; 0x02
	uint8 ADC_Value = 0;
    1a8a:	19 82       	std	Y+1, r1	; 0x01
	ADC_Value = ADC_readChannel(LM35_CH_ID);
    1a8c:	82 e0       	ldi	r24, 0x02	; 2
    1a8e:	0e 94 a9 0b 	call	0x1752	; 0x1752 <ADC_readChannel>
    1a92:	89 83       	std	Y+1, r24	; 0x01

	temperature = (uint8) ( ( (uint32)ADC_Value * LM35_MAX_TEMP * ADC_REFERENCE_VOLT_VALUE) / (ADC_MAX_VALUE * LM35_MAX_VOLT) );
    1a94:	89 81       	ldd	r24, Y+1	; 0x01
    1a96:	88 2f       	mov	r24, r24
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	a0 e0       	ldi	r26, 0x00	; 0
    1a9c:	b0 e0       	ldi	r27, 0x00	; 0
    1a9e:	2e ee       	ldi	r18, 0xEE	; 238
    1aa0:	32 e0       	ldi	r19, 0x02	; 2
    1aa2:	40 e0       	ldi	r20, 0x00	; 0
    1aa4:	50 e0       	ldi	r21, 0x00	; 0
    1aa6:	bc 01       	movw	r22, r24
    1aa8:	cd 01       	movw	r24, r26
    1aaa:	0e 94 e2 18 	call	0x31c4	; 0x31c4 <__mulsi3>
    1aae:	dc 01       	movw	r26, r24
    1ab0:	cb 01       	movw	r24, r22
    1ab2:	bc 01       	movw	r22, r24
    1ab4:	cd 01       	movw	r24, r26
    1ab6:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    1aba:	dc 01       	movw	r26, r24
    1abc:	cb 01       	movw	r24, r22
    1abe:	bc 01       	movw	r22, r24
    1ac0:	cd 01       	movw	r24, r26
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	30 ed       	ldi	r19, 0xD0	; 208
    1ac6:	4f eb       	ldi	r20, 0xBF	; 191
    1ac8:	54 e4       	ldi	r21, 0x44	; 68
    1aca:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1ace:	dc 01       	movw	r26, r24
    1ad0:	cb 01       	movw	r24, r22
    1ad2:	bc 01       	movw	r22, r24
    1ad4:	cd 01       	movw	r24, r26
    1ad6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ada:	dc 01       	movw	r26, r24
    1adc:	cb 01       	movw	r24, r22
    1ade:	8a 83       	std	Y+2, r24	; 0x02

	return temperature;
    1ae0:	8a 81       	ldd	r24, Y+2	; 0x02

}
    1ae2:	0f 90       	pop	r0
    1ae4:	0f 90       	pop	r0
    1ae6:	cf 91       	pop	r28
    1ae8:	df 91       	pop	r29
    1aea:	08 95       	ret

00001aec <LED_Init>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
LED_Error_t LED_Init(uint8 port_num, uint8 pin_num) {
    1aec:	df 93       	push	r29
    1aee:	cf 93       	push	r28
    1af0:	00 d0       	rcall	.+0      	; 0x1af2 <LED_Init+0x6>
    1af2:	0f 92       	push	r0
    1af4:	cd b7       	in	r28, 0x3d	; 61
    1af6:	de b7       	in	r29, 0x3e	; 62
    1af8:	8a 83       	std	Y+2, r24	; 0x02
    1afa:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t LED_Driver_Checker = NULL;
    1afc:	19 82       	std	Y+1, r1	; 0x01
	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    1afe:	8b 81       	ldd	r24, Y+3	; 0x03
    1b00:	88 30       	cpi	r24, 0x08	; 8
    1b02:	18 f0       	brcs	.+6      	; 0x1b0a <LED_Init+0x1e>
		LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	89 83       	std	Y+1, r24	; 0x01
    1b08:	0c c0       	rjmp	.+24     	; 0x1b22 <LED_Init+0x36>
	}
	else if((port_num >= NUM_OF_PORTS)) {
    1b0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0c:	84 30       	cpi	r24, 0x04	; 4
    1b0e:	18 f0       	brcs	.+6      	; 0x1b16 <LED_Init+0x2a>
		LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    1b10:	82 e0       	ldi	r24, 0x02	; 2
    1b12:	89 83       	std	Y+1, r24	; 0x01
    1b14:	06 c0       	rjmp	.+12     	; 0x1b22 <LED_Init+0x36>
	}
	else {
		/* Setup the pin direction as required */
		GPIO_setupPinDirection(port_num, pin_num, PIN_OUTPUT);
    1b16:	8a 81       	ldd	r24, Y+2	; 0x02
    1b18:	6b 81       	ldd	r22, Y+3	; 0x03
    1b1a:	41 e0       	ldi	r20, 0x01	; 1
    1b1c:	0e 94 79 07 	call	0xef2	; 0xef2 <GPIO_setupPinDirection>
		LED_Driver_Checker = LED_OK;
    1b20:	19 82       	std	Y+1, r1	; 0x01
	}
	return LED_Driver_Checker;
    1b22:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b24:	0f 90       	pop	r0
    1b26:	0f 90       	pop	r0
    1b28:	0f 90       	pop	r0
    1b2a:	cf 91       	pop	r28
    1b2c:	df 91       	pop	r29
    1b2e:	08 95       	ret

00001b30 <LED_On>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
LED_Error_t LED_On(uint8 port_num, uint8 pin_num) {
    1b30:	df 93       	push	r29
    1b32:	cf 93       	push	r28
    1b34:	00 d0       	rcall	.+0      	; 0x1b36 <LED_On+0x6>
    1b36:	0f 92       	push	r0
    1b38:	cd b7       	in	r28, 0x3d	; 61
    1b3a:	de b7       	in	r29, 0x3e	; 62
    1b3c:	8a 83       	std	Y+2, r24	; 0x02
    1b3e:	6b 83       	std	Y+3, r22	; 0x03

	uint8_t LED_Driver_Checker = NULL;
    1b40:	19 82       	std	Y+1, r1	; 0x01
		if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    1b42:	8b 81       	ldd	r24, Y+3	; 0x03
    1b44:	88 30       	cpi	r24, 0x08	; 8
    1b46:	18 f0       	brcs	.+6      	; 0x1b4e <LED_On+0x1e>
			LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    1b48:	81 e0       	ldi	r24, 0x01	; 1
    1b4a:	89 83       	std	Y+1, r24	; 0x01
    1b4c:	0c c0       	rjmp	.+24     	; 0x1b66 <LED_On+0x36>
		}
		else if((port_num >= NUM_OF_PORTS)) {
    1b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b50:	84 30       	cpi	r24, 0x04	; 4
    1b52:	18 f0       	brcs	.+6      	; 0x1b5a <LED_On+0x2a>
			LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    1b54:	82 e0       	ldi	r24, 0x02	; 2
    1b56:	89 83       	std	Y+1, r24	; 0x01
    1b58:	06 c0       	rjmp	.+12     	; 0x1b66 <LED_On+0x36>
		}
		else {
			/* Setup the pin direction as required */
			GPIO_writePin(port_num, pin_num, LOGIC_HIGH);
    1b5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5c:	6b 81       	ldd	r22, Y+3	; 0x03
    1b5e:	41 e0       	ldi	r20, 0x01	; 1
    1b60:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
			LED_Driver_Checker = LED_OK;
    1b64:	19 82       	std	Y+1, r1	; 0x01
		}
		return LED_Driver_Checker;
    1b66:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b68:	0f 90       	pop	r0
    1b6a:	0f 90       	pop	r0
    1b6c:	0f 90       	pop	r0
    1b6e:	cf 91       	pop	r28
    1b70:	df 91       	pop	r29
    1b72:	08 95       	ret

00001b74 <LED_Off>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
LED_Error_t LED_Off(uint8 port_num, uint8 pin_num) {
    1b74:	df 93       	push	r29
    1b76:	cf 93       	push	r28
    1b78:	00 d0       	rcall	.+0      	; 0x1b7a <LED_Off+0x6>
    1b7a:	0f 92       	push	r0
    1b7c:	cd b7       	in	r28, 0x3d	; 61
    1b7e:	de b7       	in	r29, 0x3e	; 62
    1b80:	8a 83       	std	Y+2, r24	; 0x02
    1b82:	6b 83       	std	Y+3, r22	; 0x03

	uint8_t LED_Driver_Checker = NULL;
    1b84:	19 82       	std	Y+1, r1	; 0x01
		if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    1b86:	8b 81       	ldd	r24, Y+3	; 0x03
    1b88:	88 30       	cpi	r24, 0x08	; 8
    1b8a:	18 f0       	brcs	.+6      	; 0x1b92 <LED_Off+0x1e>
			LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	89 83       	std	Y+1, r24	; 0x01
    1b90:	0c c0       	rjmp	.+24     	; 0x1baa <LED_Off+0x36>
		}
		else if((port_num >= NUM_OF_PORTS)) {
    1b92:	8a 81       	ldd	r24, Y+2	; 0x02
    1b94:	84 30       	cpi	r24, 0x04	; 4
    1b96:	18 f0       	brcs	.+6      	; 0x1b9e <LED_Off+0x2a>
			LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    1b98:	82 e0       	ldi	r24, 0x02	; 2
    1b9a:	89 83       	std	Y+1, r24	; 0x01
    1b9c:	06 c0       	rjmp	.+12     	; 0x1baa <LED_Off+0x36>
		}
		else {
			/* Setup the pin direction as required */
			GPIO_writePin(port_num, pin_num, LOGIC_LOW);
    1b9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba0:	6b 81       	ldd	r22, Y+3	; 0x03
    1ba2:	40 e0       	ldi	r20, 0x00	; 0
    1ba4:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
			LED_Driver_Checker = LED_OK;
    1ba8:	19 82       	std	Y+1, r1	; 0x01
		}
		return LED_Driver_Checker;
    1baa:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bac:	0f 90       	pop	r0
    1bae:	0f 90       	pop	r0
    1bb0:	0f 90       	pop	r0
    1bb2:	cf 91       	pop	r28
    1bb4:	df 91       	pop	r29
    1bb6:	08 95       	ret

00001bb8 <LED_Toggle>:

LED_Error_t LED_Toggle(uint8 port_num, uint8 pin_num) {
    1bb8:	df 93       	push	r29
    1bba:	cf 93       	push	r28
    1bbc:	00 d0       	rcall	.+0      	; 0x1bbe <LED_Toggle+0x6>
    1bbe:	0f 92       	push	r0
    1bc0:	cd b7       	in	r28, 0x3d	; 61
    1bc2:	de b7       	in	r29, 0x3e	; 62
    1bc4:	8a 83       	std	Y+2, r24	; 0x02
    1bc6:	6b 83       	std	Y+3, r22	; 0x03

	uint8_t LED_Driver_Checker = NULL;
    1bc8:	19 82       	std	Y+1, r1	; 0x01
		if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    1bca:	8b 81       	ldd	r24, Y+3	; 0x03
    1bcc:	88 30       	cpi	r24, 0x08	; 8
    1bce:	18 f0       	brcs	.+6      	; 0x1bd6 <LED_Toggle+0x1e>
			LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	89 83       	std	Y+1, r24	; 0x01
    1bd4:	0b c0       	rjmp	.+22     	; 0x1bec <LED_Toggle+0x34>
		}
		else if((port_num >= NUM_OF_PORTS)) {
    1bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd8:	84 30       	cpi	r24, 0x04	; 4
    1bda:	18 f0       	brcs	.+6      	; 0x1be2 <LED_Toggle+0x2a>
			LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    1bdc:	82 e0       	ldi	r24, 0x02	; 2
    1bde:	89 83       	std	Y+1, r24	; 0x01
    1be0:	05 c0       	rjmp	.+10     	; 0x1bec <LED_Toggle+0x34>
		}
		else {
			/* Setup the pin direction as required */
			GPIO_togglePin(port_num, pin_num);
    1be2:	8a 81       	ldd	r24, Y+2	; 0x02
    1be4:	6b 81       	ldd	r22, Y+3	; 0x03
    1be6:	0e 94 71 09 	call	0x12e2	; 0x12e2 <GPIO_togglePin>
			LED_Driver_Checker = LED_OK;
    1bea:	19 82       	std	Y+1, r1	; 0x01
		}
		return LED_Driver_Checker;
    1bec:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bee:	0f 90       	pop	r0
    1bf0:	0f 90       	pop	r0
    1bf2:	0f 90       	pop	r0
    1bf4:	cf 91       	pop	r28
    1bf6:	df 91       	pop	r29
    1bf8:	08 95       	ret

00001bfa <LCD_Init>:
#include "avr/io.h" /* To use the IO Ports Registers */
#include <util/delay.h>


// Initializes and enables the LCD Module to start functionality
void LCD_Init(void) {
    1bfa:	df 93       	push	r29
    1bfc:	cf 93       	push	r28
    1bfe:	cd b7       	in	r28, 0x3d	; 61
    1c00:	de b7       	in	r29, 0x3e	; 62
    1c02:	2e 97       	sbiw	r28, 0x0e	; 14
    1c04:	0f b6       	in	r0, 0x3f	; 63
    1c06:	f8 94       	cli
    1c08:	de bf       	out	0x3e, r29	; 62
    1c0a:	0f be       	out	0x3f, r0	; 63
    1c0c:	cd bf       	out	0x3d, r28	; 61
	// Initialize RS Pin
	GPIO_setupPinDirection(LCD_INIT_PORT, LCD_RS, PIN_OUTPUT);
    1c0e:	80 e0       	ldi	r24, 0x00	; 0
    1c10:	61 e0       	ldi	r22, 0x01	; 1
    1c12:	41 e0       	ldi	r20, 0x01	; 1
    1c14:	0e 94 79 07 	call	0xef2	; 0xef2 <GPIO_setupPinDirection>

	// Initialize Enable Pin
	GPIO_setupPinDirection(LCD_INIT_PORT, LCD_ENABLE, PIN_OUTPUT);
    1c18:	80 e0       	ldi	r24, 0x00	; 0
    1c1a:	62 e0       	ldi	r22, 0x02	; 2
    1c1c:	41 e0       	ldi	r20, 0x01	; 1
    1c1e:	0e 94 79 07 	call	0xef2	; 0xef2 <GPIO_setupPinDirection>
    1c22:	80 e0       	ldi	r24, 0x00	; 0
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	a0 ea       	ldi	r26, 0xA0	; 160
    1c28:	b1 e4       	ldi	r27, 0x41	; 65
    1c2a:	8b 87       	std	Y+11, r24	; 0x0b
    1c2c:	9c 87       	std	Y+12, r25	; 0x0c
    1c2e:	ad 87       	std	Y+13, r26	; 0x0d
    1c30:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c32:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c34:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c36:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c38:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c3a:	20 e0       	ldi	r18, 0x00	; 0
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	4a e7       	ldi	r20, 0x7A	; 122
    1c40:	53 e4       	ldi	r21, 0x43	; 67
    1c42:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c46:	dc 01       	movw	r26, r24
    1c48:	cb 01       	movw	r24, r22
    1c4a:	8f 83       	std	Y+7, r24	; 0x07
    1c4c:	98 87       	std	Y+8, r25	; 0x08
    1c4e:	a9 87       	std	Y+9, r26	; 0x09
    1c50:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c52:	6f 81       	ldd	r22, Y+7	; 0x07
    1c54:	78 85       	ldd	r23, Y+8	; 0x08
    1c56:	89 85       	ldd	r24, Y+9	; 0x09
    1c58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c5a:	20 e0       	ldi	r18, 0x00	; 0
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	40 e8       	ldi	r20, 0x80	; 128
    1c60:	5f e3       	ldi	r21, 0x3F	; 63
    1c62:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c66:	88 23       	and	r24, r24
    1c68:	2c f4       	brge	.+10     	; 0x1c74 <LCD_Init+0x7a>
		__ticks = 1;
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	9e 83       	std	Y+6, r25	; 0x06
    1c70:	8d 83       	std	Y+5, r24	; 0x05
    1c72:	3f c0       	rjmp	.+126    	; 0x1cf2 <LCD_Init+0xf8>
	else if (__tmp > 65535)
    1c74:	6f 81       	ldd	r22, Y+7	; 0x07
    1c76:	78 85       	ldd	r23, Y+8	; 0x08
    1c78:	89 85       	ldd	r24, Y+9	; 0x09
    1c7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c7c:	20 e0       	ldi	r18, 0x00	; 0
    1c7e:	3f ef       	ldi	r19, 0xFF	; 255
    1c80:	4f e7       	ldi	r20, 0x7F	; 127
    1c82:	57 e4       	ldi	r21, 0x47	; 71
    1c84:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c88:	18 16       	cp	r1, r24
    1c8a:	4c f5       	brge	.+82     	; 0x1cde <LCD_Init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c90:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c92:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	40 e2       	ldi	r20, 0x20	; 32
    1c9a:	51 e4       	ldi	r21, 0x41	; 65
    1c9c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ca0:	dc 01       	movw	r26, r24
    1ca2:	cb 01       	movw	r24, r22
    1ca4:	bc 01       	movw	r22, r24
    1ca6:	cd 01       	movw	r24, r26
    1ca8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cac:	dc 01       	movw	r26, r24
    1cae:	cb 01       	movw	r24, r22
    1cb0:	9e 83       	std	Y+6, r25	; 0x06
    1cb2:	8d 83       	std	Y+5, r24	; 0x05
    1cb4:	0f c0       	rjmp	.+30     	; 0x1cd4 <LCD_Init+0xda>
    1cb6:	89 e1       	ldi	r24, 0x19	; 25
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	9c 83       	std	Y+4, r25	; 0x04
    1cbc:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc2:	01 97       	sbiw	r24, 0x01	; 1
    1cc4:	f1 f7       	brne	.-4      	; 0x1cc2 <LCD_Init+0xc8>
    1cc6:	9c 83       	std	Y+4, r25	; 0x04
    1cc8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cca:	8d 81       	ldd	r24, Y+5	; 0x05
    1ccc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cce:	01 97       	sbiw	r24, 0x01	; 1
    1cd0:	9e 83       	std	Y+6, r25	; 0x06
    1cd2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cd4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd6:	9e 81       	ldd	r25, Y+6	; 0x06
    1cd8:	00 97       	sbiw	r24, 0x00	; 0
    1cda:	69 f7       	brne	.-38     	; 0x1cb6 <LCD_Init+0xbc>
    1cdc:	14 c0       	rjmp	.+40     	; 0x1d06 <LCD_Init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cde:	6f 81       	ldd	r22, Y+7	; 0x07
    1ce0:	78 85       	ldd	r23, Y+8	; 0x08
    1ce2:	89 85       	ldd	r24, Y+9	; 0x09
    1ce4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ce6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cea:	dc 01       	movw	r26, r24
    1cec:	cb 01       	movw	r24, r22
    1cee:	9e 83       	std	Y+6, r25	; 0x06
    1cf0:	8d 83       	std	Y+5, r24	; 0x05
    1cf2:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf4:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf6:	9a 83       	std	Y+2, r25	; 0x02
    1cf8:	89 83       	std	Y+1, r24	; 0x01
    1cfa:	89 81       	ldd	r24, Y+1	; 0x01
    1cfc:	9a 81       	ldd	r25, Y+2	; 0x02
    1cfe:	01 97       	sbiw	r24, 0x01	; 1
    1d00:	f1 f7       	brne	.-4      	; 0x1cfe <LCD_Init+0x104>
    1d02:	9a 83       	std	Y+2, r25	; 0x02
    1d04:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);

	// Initializing Sending Commands
	// Checks which BIT Mode, 4 or 8 line bit
	if (LCD_BIT_MODE == 4) {
		GPIO_setupPinDirection(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 0), PIN_OUTPUT);
    1d06:	80 e0       	ldi	r24, 0x00	; 0
    1d08:	63 e0       	ldi	r22, 0x03	; 3
    1d0a:	41 e0       	ldi	r20, 0x01	; 1
    1d0c:	0e 94 79 07 	call	0xef2	; 0xef2 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 1), PIN_OUTPUT);
    1d10:	80 e0       	ldi	r24, 0x00	; 0
    1d12:	64 e0       	ldi	r22, 0x04	; 4
    1d14:	41 e0       	ldi	r20, 0x01	; 1
    1d16:	0e 94 79 07 	call	0xef2	; 0xef2 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 2), PIN_OUTPUT);
    1d1a:	80 e0       	ldi	r24, 0x00	; 0
    1d1c:	65 e0       	ldi	r22, 0x05	; 5
    1d1e:	41 e0       	ldi	r20, 0x01	; 1
    1d20:	0e 94 79 07 	call	0xef2	; 0xef2 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 3), PIN_OUTPUT);
    1d24:	80 e0       	ldi	r24, 0x00	; 0
    1d26:	66 e0       	ldi	r22, 0x06	; 6
    1d28:	41 e0       	ldi	r20, 0x01	; 1
    1d2a:	0e 94 79 07 	call	0xef2	; 0xef2 <GPIO_setupPinDirection>

		LCD_sendCommand(LCD_TWO_LINE_FOUR_BIT_INIT1);
    1d2e:	83 e3       	ldi	r24, 0x33	; 51
    1d30:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <LCD_sendCommand>
		LCD_sendCommand(LCD_TWO_LINE_FOUR_BIT_INIT2);
    1d34:	82 e3       	ldi	r24, 0x32	; 50
    1d36:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <LCD_sendCommand>
		LCD_sendCommand(LCD_TWO_LINE_FOUR_BIT);
    1d3a:	88 e2       	ldi	r24, 0x28	; 40
    1d3c:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <LCD_sendCommand>

		LCD_sendCommand(LCD_TWO_LINE_EIGHT_BIT);
	}

	// Makes the cursor off
	LCD_sendCommand(LCD_CURSOR_OFF);
    1d40:	8c e0       	ldi	r24, 0x0C	; 12
    1d42:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <LCD_sendCommand>
	// Clears Display
	LCD_sendCommand(LCD_CLEAR_DISPLAY);
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <LCD_sendCommand>
}
    1d4c:	2e 96       	adiw	r28, 0x0e	; 14
    1d4e:	0f b6       	in	r0, 0x3f	; 63
    1d50:	f8 94       	cli
    1d52:	de bf       	out	0x3e, r29	; 62
    1d54:	0f be       	out	0x3f, r0	; 63
    1d56:	cd bf       	out	0x3d, r28	; 61
    1d58:	cf 91       	pop	r28
    1d5a:	df 91       	pop	r29
    1d5c:	08 95       	ret

00001d5e <LCD_sendCommand>:


// Sends a command to the LCD
void LCD_sendCommand(uint8 command) {
    1d5e:	0f 93       	push	r16
    1d60:	1f 93       	push	r17
    1d62:	df 93       	push	r29
    1d64:	cf 93       	push	r28
    1d66:	cd b7       	in	r28, 0x3d	; 61
    1d68:	de b7       	in	r29, 0x3e	; 62
    1d6a:	c3 56       	subi	r28, 0x63	; 99
    1d6c:	d0 40       	sbci	r29, 0x00	; 0
    1d6e:	0f b6       	in	r0, 0x3f	; 63
    1d70:	f8 94       	cli
    1d72:	de bf       	out	0x3e, r29	; 62
    1d74:	0f be       	out	0x3f, r0	; 63
    1d76:	cd bf       	out	0x3d, r28	; 61
    1d78:	fe 01       	movw	r30, r28
    1d7a:	ed 59       	subi	r30, 0x9D	; 157
    1d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7e:	80 83       	st	Z, r24
	// Set RS Pin to '0'
	GPIO_writePin(LCD_INIT_PORT, LCD_RS, LOGIC_LOW);
    1d80:	80 e0       	ldi	r24, 0x00	; 0
    1d82:	61 e0       	ldi	r22, 0x01	; 1
    1d84:	40 e0       	ldi	r20, 0x00	; 0
    1d86:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
    1d8a:	fe 01       	movw	r30, r28
    1d8c:	e1 5a       	subi	r30, 0xA1	; 161
    1d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d90:	80 e0       	ldi	r24, 0x00	; 0
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	a0 e8       	ldi	r26, 0x80	; 128
    1d96:	bf e3       	ldi	r27, 0x3F	; 63
    1d98:	80 83       	st	Z, r24
    1d9a:	91 83       	std	Z+1, r25	; 0x01
    1d9c:	a2 83       	std	Z+2, r26	; 0x02
    1d9e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1da0:	8e 01       	movw	r16, r28
    1da2:	05 5a       	subi	r16, 0xA5	; 165
    1da4:	1f 4f       	sbci	r17, 0xFF	; 255
    1da6:	fe 01       	movw	r30, r28
    1da8:	e1 5a       	subi	r30, 0xA1	; 161
    1daa:	ff 4f       	sbci	r31, 0xFF	; 255
    1dac:	60 81       	ld	r22, Z
    1dae:	71 81       	ldd	r23, Z+1	; 0x01
    1db0:	82 81       	ldd	r24, Z+2	; 0x02
    1db2:	93 81       	ldd	r25, Z+3	; 0x03
    1db4:	20 e0       	ldi	r18, 0x00	; 0
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	4a e7       	ldi	r20, 0x7A	; 122
    1dba:	53 e4       	ldi	r21, 0x43	; 67
    1dbc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dc0:	dc 01       	movw	r26, r24
    1dc2:	cb 01       	movw	r24, r22
    1dc4:	f8 01       	movw	r30, r16
    1dc6:	80 83       	st	Z, r24
    1dc8:	91 83       	std	Z+1, r25	; 0x01
    1dca:	a2 83       	std	Z+2, r26	; 0x02
    1dcc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1dce:	fe 01       	movw	r30, r28
    1dd0:	e5 5a       	subi	r30, 0xA5	; 165
    1dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd4:	60 81       	ld	r22, Z
    1dd6:	71 81       	ldd	r23, Z+1	; 0x01
    1dd8:	82 81       	ldd	r24, Z+2	; 0x02
    1dda:	93 81       	ldd	r25, Z+3	; 0x03
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	40 e8       	ldi	r20, 0x80	; 128
    1de2:	5f e3       	ldi	r21, 0x3F	; 63
    1de4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1de8:	88 23       	and	r24, r24
    1dea:	44 f4       	brge	.+16     	; 0x1dfc <LCD_sendCommand+0x9e>
		__ticks = 1;
    1dec:	fe 01       	movw	r30, r28
    1dee:	e7 5a       	subi	r30, 0xA7	; 167
    1df0:	ff 4f       	sbci	r31, 0xFF	; 255
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	91 83       	std	Z+1, r25	; 0x01
    1df8:	80 83       	st	Z, r24
    1dfa:	64 c0       	rjmp	.+200    	; 0x1ec4 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1dfc:	fe 01       	movw	r30, r28
    1dfe:	e5 5a       	subi	r30, 0xA5	; 165
    1e00:	ff 4f       	sbci	r31, 0xFF	; 255
    1e02:	60 81       	ld	r22, Z
    1e04:	71 81       	ldd	r23, Z+1	; 0x01
    1e06:	82 81       	ldd	r24, Z+2	; 0x02
    1e08:	93 81       	ldd	r25, Z+3	; 0x03
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	3f ef       	ldi	r19, 0xFF	; 255
    1e0e:	4f e7       	ldi	r20, 0x7F	; 127
    1e10:	57 e4       	ldi	r21, 0x47	; 71
    1e12:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e16:	18 16       	cp	r1, r24
    1e18:	0c f0       	brlt	.+2      	; 0x1e1c <LCD_sendCommand+0xbe>
    1e1a:	43 c0       	rjmp	.+134    	; 0x1ea2 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e1c:	fe 01       	movw	r30, r28
    1e1e:	e1 5a       	subi	r30, 0xA1	; 161
    1e20:	ff 4f       	sbci	r31, 0xFF	; 255
    1e22:	60 81       	ld	r22, Z
    1e24:	71 81       	ldd	r23, Z+1	; 0x01
    1e26:	82 81       	ldd	r24, Z+2	; 0x02
    1e28:	93 81       	ldd	r25, Z+3	; 0x03
    1e2a:	20 e0       	ldi	r18, 0x00	; 0
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	40 e2       	ldi	r20, 0x20	; 32
    1e30:	51 e4       	ldi	r21, 0x41	; 65
    1e32:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e36:	dc 01       	movw	r26, r24
    1e38:	cb 01       	movw	r24, r22
    1e3a:	8e 01       	movw	r16, r28
    1e3c:	07 5a       	subi	r16, 0xA7	; 167
    1e3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e40:	bc 01       	movw	r22, r24
    1e42:	cd 01       	movw	r24, r26
    1e44:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e48:	dc 01       	movw	r26, r24
    1e4a:	cb 01       	movw	r24, r22
    1e4c:	f8 01       	movw	r30, r16
    1e4e:	91 83       	std	Z+1, r25	; 0x01
    1e50:	80 83       	st	Z, r24
    1e52:	1f c0       	rjmp	.+62     	; 0x1e92 <LCD_sendCommand+0x134>
    1e54:	fe 01       	movw	r30, r28
    1e56:	e9 5a       	subi	r30, 0xA9	; 169
    1e58:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5a:	89 e1       	ldi	r24, 0x19	; 25
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	91 83       	std	Z+1, r25	; 0x01
    1e60:	80 83       	st	Z, r24
    1e62:	fe 01       	movw	r30, r28
    1e64:	e9 5a       	subi	r30, 0xA9	; 169
    1e66:	ff 4f       	sbci	r31, 0xFF	; 255
    1e68:	80 81       	ld	r24, Z
    1e6a:	91 81       	ldd	r25, Z+1	; 0x01
    1e6c:	01 97       	sbiw	r24, 0x01	; 1
    1e6e:	f1 f7       	brne	.-4      	; 0x1e6c <LCD_sendCommand+0x10e>
    1e70:	fe 01       	movw	r30, r28
    1e72:	e9 5a       	subi	r30, 0xA9	; 169
    1e74:	ff 4f       	sbci	r31, 0xFF	; 255
    1e76:	91 83       	std	Z+1, r25	; 0x01
    1e78:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e7a:	de 01       	movw	r26, r28
    1e7c:	a7 5a       	subi	r26, 0xA7	; 167
    1e7e:	bf 4f       	sbci	r27, 0xFF	; 255
    1e80:	fe 01       	movw	r30, r28
    1e82:	e7 5a       	subi	r30, 0xA7	; 167
    1e84:	ff 4f       	sbci	r31, 0xFF	; 255
    1e86:	80 81       	ld	r24, Z
    1e88:	91 81       	ldd	r25, Z+1	; 0x01
    1e8a:	01 97       	sbiw	r24, 0x01	; 1
    1e8c:	11 96       	adiw	r26, 0x01	; 1
    1e8e:	9c 93       	st	X, r25
    1e90:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e92:	fe 01       	movw	r30, r28
    1e94:	e7 5a       	subi	r30, 0xA7	; 167
    1e96:	ff 4f       	sbci	r31, 0xFF	; 255
    1e98:	80 81       	ld	r24, Z
    1e9a:	91 81       	ldd	r25, Z+1	; 0x01
    1e9c:	00 97       	sbiw	r24, 0x00	; 0
    1e9e:	d1 f6       	brne	.-76     	; 0x1e54 <LCD_sendCommand+0xf6>
    1ea0:	27 c0       	rjmp	.+78     	; 0x1ef0 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ea2:	8e 01       	movw	r16, r28
    1ea4:	07 5a       	subi	r16, 0xA7	; 167
    1ea6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ea8:	fe 01       	movw	r30, r28
    1eaa:	e5 5a       	subi	r30, 0xA5	; 165
    1eac:	ff 4f       	sbci	r31, 0xFF	; 255
    1eae:	60 81       	ld	r22, Z
    1eb0:	71 81       	ldd	r23, Z+1	; 0x01
    1eb2:	82 81       	ldd	r24, Z+2	; 0x02
    1eb4:	93 81       	ldd	r25, Z+3	; 0x03
    1eb6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1eba:	dc 01       	movw	r26, r24
    1ebc:	cb 01       	movw	r24, r22
    1ebe:	f8 01       	movw	r30, r16
    1ec0:	91 83       	std	Z+1, r25	; 0x01
    1ec2:	80 83       	st	Z, r24
    1ec4:	de 01       	movw	r26, r28
    1ec6:	ab 5a       	subi	r26, 0xAB	; 171
    1ec8:	bf 4f       	sbci	r27, 0xFF	; 255
    1eca:	fe 01       	movw	r30, r28
    1ecc:	e7 5a       	subi	r30, 0xA7	; 167
    1ece:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed0:	80 81       	ld	r24, Z
    1ed2:	91 81       	ldd	r25, Z+1	; 0x01
    1ed4:	8d 93       	st	X+, r24
    1ed6:	9c 93       	st	X, r25
    1ed8:	fe 01       	movw	r30, r28
    1eda:	eb 5a       	subi	r30, 0xAB	; 171
    1edc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ede:	80 81       	ld	r24, Z
    1ee0:	91 81       	ldd	r25, Z+1	; 0x01
    1ee2:	01 97       	sbiw	r24, 0x01	; 1
    1ee4:	f1 f7       	brne	.-4      	; 0x1ee2 <LCD_sendCommand+0x184>
    1ee6:	fe 01       	movw	r30, r28
    1ee8:	eb 5a       	subi	r30, 0xAB	; 171
    1eea:	ff 4f       	sbci	r31, 0xFF	; 255
    1eec:	91 83       	std	Z+1, r25	; 0x01
    1eee:	80 83       	st	Z, r24
	_delay_ms(1);

	// Set Enable Pin to '1'
	GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
    1ef0:	80 e0       	ldi	r24, 0x00	; 0
    1ef2:	62 e0       	ldi	r22, 0x02	; 2
    1ef4:	41 e0       	ldi	r20, 0x01	; 1
    1ef6:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
    1efa:	fe 01       	movw	r30, r28
    1efc:	ef 5a       	subi	r30, 0xAF	; 175
    1efe:	ff 4f       	sbci	r31, 0xFF	; 255
    1f00:	80 e0       	ldi	r24, 0x00	; 0
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	a0 e8       	ldi	r26, 0x80	; 128
    1f06:	bf e3       	ldi	r27, 0x3F	; 63
    1f08:	80 83       	st	Z, r24
    1f0a:	91 83       	std	Z+1, r25	; 0x01
    1f0c:	a2 83       	std	Z+2, r26	; 0x02
    1f0e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f10:	8e 01       	movw	r16, r28
    1f12:	03 5b       	subi	r16, 0xB3	; 179
    1f14:	1f 4f       	sbci	r17, 0xFF	; 255
    1f16:	fe 01       	movw	r30, r28
    1f18:	ef 5a       	subi	r30, 0xAF	; 175
    1f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1c:	60 81       	ld	r22, Z
    1f1e:	71 81       	ldd	r23, Z+1	; 0x01
    1f20:	82 81       	ldd	r24, Z+2	; 0x02
    1f22:	93 81       	ldd	r25, Z+3	; 0x03
    1f24:	20 e0       	ldi	r18, 0x00	; 0
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	4a e7       	ldi	r20, 0x7A	; 122
    1f2a:	53 e4       	ldi	r21, 0x43	; 67
    1f2c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f30:	dc 01       	movw	r26, r24
    1f32:	cb 01       	movw	r24, r22
    1f34:	f8 01       	movw	r30, r16
    1f36:	80 83       	st	Z, r24
    1f38:	91 83       	std	Z+1, r25	; 0x01
    1f3a:	a2 83       	std	Z+2, r26	; 0x02
    1f3c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f3e:	fe 01       	movw	r30, r28
    1f40:	e3 5b       	subi	r30, 0xB3	; 179
    1f42:	ff 4f       	sbci	r31, 0xFF	; 255
    1f44:	60 81       	ld	r22, Z
    1f46:	71 81       	ldd	r23, Z+1	; 0x01
    1f48:	82 81       	ldd	r24, Z+2	; 0x02
    1f4a:	93 81       	ldd	r25, Z+3	; 0x03
    1f4c:	20 e0       	ldi	r18, 0x00	; 0
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	40 e8       	ldi	r20, 0x80	; 128
    1f52:	5f e3       	ldi	r21, 0x3F	; 63
    1f54:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f58:	88 23       	and	r24, r24
    1f5a:	44 f4       	brge	.+16     	; 0x1f6c <LCD_sendCommand+0x20e>
		__ticks = 1;
    1f5c:	fe 01       	movw	r30, r28
    1f5e:	e5 5b       	subi	r30, 0xB5	; 181
    1f60:	ff 4f       	sbci	r31, 0xFF	; 255
    1f62:	81 e0       	ldi	r24, 0x01	; 1
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	91 83       	std	Z+1, r25	; 0x01
    1f68:	80 83       	st	Z, r24
    1f6a:	64 c0       	rjmp	.+200    	; 0x2034 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1f6c:	fe 01       	movw	r30, r28
    1f6e:	e3 5b       	subi	r30, 0xB3	; 179
    1f70:	ff 4f       	sbci	r31, 0xFF	; 255
    1f72:	60 81       	ld	r22, Z
    1f74:	71 81       	ldd	r23, Z+1	; 0x01
    1f76:	82 81       	ldd	r24, Z+2	; 0x02
    1f78:	93 81       	ldd	r25, Z+3	; 0x03
    1f7a:	20 e0       	ldi	r18, 0x00	; 0
    1f7c:	3f ef       	ldi	r19, 0xFF	; 255
    1f7e:	4f e7       	ldi	r20, 0x7F	; 127
    1f80:	57 e4       	ldi	r21, 0x47	; 71
    1f82:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f86:	18 16       	cp	r1, r24
    1f88:	0c f0       	brlt	.+2      	; 0x1f8c <LCD_sendCommand+0x22e>
    1f8a:	43 c0       	rjmp	.+134    	; 0x2012 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f8c:	fe 01       	movw	r30, r28
    1f8e:	ef 5a       	subi	r30, 0xAF	; 175
    1f90:	ff 4f       	sbci	r31, 0xFF	; 255
    1f92:	60 81       	ld	r22, Z
    1f94:	71 81       	ldd	r23, Z+1	; 0x01
    1f96:	82 81       	ldd	r24, Z+2	; 0x02
    1f98:	93 81       	ldd	r25, Z+3	; 0x03
    1f9a:	20 e0       	ldi	r18, 0x00	; 0
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	40 e2       	ldi	r20, 0x20	; 32
    1fa0:	51 e4       	ldi	r21, 0x41	; 65
    1fa2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fa6:	dc 01       	movw	r26, r24
    1fa8:	cb 01       	movw	r24, r22
    1faa:	8e 01       	movw	r16, r28
    1fac:	05 5b       	subi	r16, 0xB5	; 181
    1fae:	1f 4f       	sbci	r17, 0xFF	; 255
    1fb0:	bc 01       	movw	r22, r24
    1fb2:	cd 01       	movw	r24, r26
    1fb4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	f8 01       	movw	r30, r16
    1fbe:	91 83       	std	Z+1, r25	; 0x01
    1fc0:	80 83       	st	Z, r24
    1fc2:	1f c0       	rjmp	.+62     	; 0x2002 <LCD_sendCommand+0x2a4>
    1fc4:	fe 01       	movw	r30, r28
    1fc6:	e7 5b       	subi	r30, 0xB7	; 183
    1fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fca:	89 e1       	ldi	r24, 0x19	; 25
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	91 83       	std	Z+1, r25	; 0x01
    1fd0:	80 83       	st	Z, r24
    1fd2:	fe 01       	movw	r30, r28
    1fd4:	e7 5b       	subi	r30, 0xB7	; 183
    1fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd8:	80 81       	ld	r24, Z
    1fda:	91 81       	ldd	r25, Z+1	; 0x01
    1fdc:	01 97       	sbiw	r24, 0x01	; 1
    1fde:	f1 f7       	brne	.-4      	; 0x1fdc <LCD_sendCommand+0x27e>
    1fe0:	fe 01       	movw	r30, r28
    1fe2:	e7 5b       	subi	r30, 0xB7	; 183
    1fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe6:	91 83       	std	Z+1, r25	; 0x01
    1fe8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fea:	de 01       	movw	r26, r28
    1fec:	a5 5b       	subi	r26, 0xB5	; 181
    1fee:	bf 4f       	sbci	r27, 0xFF	; 255
    1ff0:	fe 01       	movw	r30, r28
    1ff2:	e5 5b       	subi	r30, 0xB5	; 181
    1ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff6:	80 81       	ld	r24, Z
    1ff8:	91 81       	ldd	r25, Z+1	; 0x01
    1ffa:	01 97       	sbiw	r24, 0x01	; 1
    1ffc:	11 96       	adiw	r26, 0x01	; 1
    1ffe:	9c 93       	st	X, r25
    2000:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2002:	fe 01       	movw	r30, r28
    2004:	e5 5b       	subi	r30, 0xB5	; 181
    2006:	ff 4f       	sbci	r31, 0xFF	; 255
    2008:	80 81       	ld	r24, Z
    200a:	91 81       	ldd	r25, Z+1	; 0x01
    200c:	00 97       	sbiw	r24, 0x00	; 0
    200e:	d1 f6       	brne	.-76     	; 0x1fc4 <LCD_sendCommand+0x266>
    2010:	27 c0       	rjmp	.+78     	; 0x2060 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2012:	8e 01       	movw	r16, r28
    2014:	05 5b       	subi	r16, 0xB5	; 181
    2016:	1f 4f       	sbci	r17, 0xFF	; 255
    2018:	fe 01       	movw	r30, r28
    201a:	e3 5b       	subi	r30, 0xB3	; 179
    201c:	ff 4f       	sbci	r31, 0xFF	; 255
    201e:	60 81       	ld	r22, Z
    2020:	71 81       	ldd	r23, Z+1	; 0x01
    2022:	82 81       	ldd	r24, Z+2	; 0x02
    2024:	93 81       	ldd	r25, Z+3	; 0x03
    2026:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    202a:	dc 01       	movw	r26, r24
    202c:	cb 01       	movw	r24, r22
    202e:	f8 01       	movw	r30, r16
    2030:	91 83       	std	Z+1, r25	; 0x01
    2032:	80 83       	st	Z, r24
    2034:	de 01       	movw	r26, r28
    2036:	a9 5b       	subi	r26, 0xB9	; 185
    2038:	bf 4f       	sbci	r27, 0xFF	; 255
    203a:	fe 01       	movw	r30, r28
    203c:	e5 5b       	subi	r30, 0xB5	; 181
    203e:	ff 4f       	sbci	r31, 0xFF	; 255
    2040:	80 81       	ld	r24, Z
    2042:	91 81       	ldd	r25, Z+1	; 0x01
    2044:	8d 93       	st	X+, r24
    2046:	9c 93       	st	X, r25
    2048:	fe 01       	movw	r30, r28
    204a:	e9 5b       	subi	r30, 0xB9	; 185
    204c:	ff 4f       	sbci	r31, 0xFF	; 255
    204e:	80 81       	ld	r24, Z
    2050:	91 81       	ldd	r25, Z+1	; 0x01
    2052:	01 97       	sbiw	r24, 0x01	; 1
    2054:	f1 f7       	brne	.-4      	; 0x2052 <LCD_sendCommand+0x2f4>
    2056:	fe 01       	movw	r30, r28
    2058:	e9 5b       	subi	r30, 0xB9	; 185
    205a:	ff 4f       	sbci	r31, 0xFF	; 255
    205c:	91 83       	std	Z+1, r25	; 0x01
    205e:	80 83       	st	Z, r24
	_delay_ms(1);

	// Inserts the command in the assigned PORT to be sent to the LCD
	// uint8 BIT_MODE;
	if (LCD_BIT_MODE == 4) {
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 0), GET_BIT( command, 4 ));
    2060:	fe 01       	movw	r30, r28
    2062:	ed 59       	subi	r30, 0x9D	; 157
    2064:	ff 4f       	sbci	r31, 0xFF	; 255
    2066:	80 81       	ld	r24, Z
    2068:	82 95       	swap	r24
    206a:	8f 70       	andi	r24, 0x0F	; 15
    206c:	98 2f       	mov	r25, r24
    206e:	91 70       	andi	r25, 0x01	; 1
    2070:	80 e0       	ldi	r24, 0x00	; 0
    2072:	63 e0       	ldi	r22, 0x03	; 3
    2074:	49 2f       	mov	r20, r25
    2076:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 1), GET_BIT( command, 5 ));
    207a:	fe 01       	movw	r30, r28
    207c:	ed 59       	subi	r30, 0x9D	; 157
    207e:	ff 4f       	sbci	r31, 0xFF	; 255
    2080:	80 81       	ld	r24, Z
    2082:	82 95       	swap	r24
    2084:	86 95       	lsr	r24
    2086:	87 70       	andi	r24, 0x07	; 7
    2088:	98 2f       	mov	r25, r24
    208a:	91 70       	andi	r25, 0x01	; 1
    208c:	80 e0       	ldi	r24, 0x00	; 0
    208e:	64 e0       	ldi	r22, 0x04	; 4
    2090:	49 2f       	mov	r20, r25
    2092:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 2), GET_BIT( command, 6 ));
    2096:	fe 01       	movw	r30, r28
    2098:	ed 59       	subi	r30, 0x9D	; 157
    209a:	ff 4f       	sbci	r31, 0xFF	; 255
    209c:	80 81       	ld	r24, Z
    209e:	82 95       	swap	r24
    20a0:	86 95       	lsr	r24
    20a2:	86 95       	lsr	r24
    20a4:	83 70       	andi	r24, 0x03	; 3
    20a6:	98 2f       	mov	r25, r24
    20a8:	91 70       	andi	r25, 0x01	; 1
    20aa:	80 e0       	ldi	r24, 0x00	; 0
    20ac:	65 e0       	ldi	r22, 0x05	; 5
    20ae:	49 2f       	mov	r20, r25
    20b0:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 3), GET_BIT( command, 7 ));
    20b4:	fe 01       	movw	r30, r28
    20b6:	ed 59       	subi	r30, 0x9D	; 157
    20b8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ba:	80 81       	ld	r24, Z
    20bc:	98 2f       	mov	r25, r24
    20be:	99 1f       	adc	r25, r25
    20c0:	99 27       	eor	r25, r25
    20c2:	99 1f       	adc	r25, r25
    20c4:	80 e0       	ldi	r24, 0x00	; 0
    20c6:	66 e0       	ldi	r22, 0x06	; 6
    20c8:	49 2f       	mov	r20, r25
    20ca:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
    20ce:	fe 01       	movw	r30, r28
    20d0:	ed 5b       	subi	r30, 0xBD	; 189
    20d2:	ff 4f       	sbci	r31, 0xFF	; 255
    20d4:	80 e0       	ldi	r24, 0x00	; 0
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	a0 e8       	ldi	r26, 0x80	; 128
    20da:	bf e3       	ldi	r27, 0x3F	; 63
    20dc:	80 83       	st	Z, r24
    20de:	91 83       	std	Z+1, r25	; 0x01
    20e0:	a2 83       	std	Z+2, r26	; 0x02
    20e2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20e4:	8e 01       	movw	r16, r28
    20e6:	01 5c       	subi	r16, 0xC1	; 193
    20e8:	1f 4f       	sbci	r17, 0xFF	; 255
    20ea:	fe 01       	movw	r30, r28
    20ec:	ed 5b       	subi	r30, 0xBD	; 189
    20ee:	ff 4f       	sbci	r31, 0xFF	; 255
    20f0:	60 81       	ld	r22, Z
    20f2:	71 81       	ldd	r23, Z+1	; 0x01
    20f4:	82 81       	ldd	r24, Z+2	; 0x02
    20f6:	93 81       	ldd	r25, Z+3	; 0x03
    20f8:	20 e0       	ldi	r18, 0x00	; 0
    20fa:	30 e0       	ldi	r19, 0x00	; 0
    20fc:	4a e7       	ldi	r20, 0x7A	; 122
    20fe:	53 e4       	ldi	r21, 0x43	; 67
    2100:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2104:	dc 01       	movw	r26, r24
    2106:	cb 01       	movw	r24, r22
    2108:	f8 01       	movw	r30, r16
    210a:	80 83       	st	Z, r24
    210c:	91 83       	std	Z+1, r25	; 0x01
    210e:	a2 83       	std	Z+2, r26	; 0x02
    2110:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2112:	fe 01       	movw	r30, r28
    2114:	ff 96       	adiw	r30, 0x3f	; 63
    2116:	60 81       	ld	r22, Z
    2118:	71 81       	ldd	r23, Z+1	; 0x01
    211a:	82 81       	ldd	r24, Z+2	; 0x02
    211c:	93 81       	ldd	r25, Z+3	; 0x03
    211e:	20 e0       	ldi	r18, 0x00	; 0
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	40 e8       	ldi	r20, 0x80	; 128
    2124:	5f e3       	ldi	r21, 0x3F	; 63
    2126:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    212a:	88 23       	and	r24, r24
    212c:	2c f4       	brge	.+10     	; 0x2138 <LCD_sendCommand+0x3da>
		__ticks = 1;
    212e:	81 e0       	ldi	r24, 0x01	; 1
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	9e af       	std	Y+62, r25	; 0x3e
    2134:	8d af       	std	Y+61, r24	; 0x3d
    2136:	46 c0       	rjmp	.+140    	; 0x21c4 <LCD_sendCommand+0x466>
	else if (__tmp > 65535)
    2138:	fe 01       	movw	r30, r28
    213a:	ff 96       	adiw	r30, 0x3f	; 63
    213c:	60 81       	ld	r22, Z
    213e:	71 81       	ldd	r23, Z+1	; 0x01
    2140:	82 81       	ldd	r24, Z+2	; 0x02
    2142:	93 81       	ldd	r25, Z+3	; 0x03
    2144:	20 e0       	ldi	r18, 0x00	; 0
    2146:	3f ef       	ldi	r19, 0xFF	; 255
    2148:	4f e7       	ldi	r20, 0x7F	; 127
    214a:	57 e4       	ldi	r21, 0x47	; 71
    214c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2150:	18 16       	cp	r1, r24
    2152:	64 f5       	brge	.+88     	; 0x21ac <LCD_sendCommand+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2154:	fe 01       	movw	r30, r28
    2156:	ed 5b       	subi	r30, 0xBD	; 189
    2158:	ff 4f       	sbci	r31, 0xFF	; 255
    215a:	60 81       	ld	r22, Z
    215c:	71 81       	ldd	r23, Z+1	; 0x01
    215e:	82 81       	ldd	r24, Z+2	; 0x02
    2160:	93 81       	ldd	r25, Z+3	; 0x03
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	40 e2       	ldi	r20, 0x20	; 32
    2168:	51 e4       	ldi	r21, 0x41	; 65
    216a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    216e:	dc 01       	movw	r26, r24
    2170:	cb 01       	movw	r24, r22
    2172:	bc 01       	movw	r22, r24
    2174:	cd 01       	movw	r24, r26
    2176:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    217a:	dc 01       	movw	r26, r24
    217c:	cb 01       	movw	r24, r22
    217e:	9e af       	std	Y+62, r25	; 0x3e
    2180:	8d af       	std	Y+61, r24	; 0x3d
    2182:	0f c0       	rjmp	.+30     	; 0x21a2 <LCD_sendCommand+0x444>
    2184:	89 e1       	ldi	r24, 0x19	; 25
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	9c af       	std	Y+60, r25	; 0x3c
    218a:	8b af       	std	Y+59, r24	; 0x3b
    218c:	8b ad       	ldd	r24, Y+59	; 0x3b
    218e:	9c ad       	ldd	r25, Y+60	; 0x3c
    2190:	01 97       	sbiw	r24, 0x01	; 1
    2192:	f1 f7       	brne	.-4      	; 0x2190 <LCD_sendCommand+0x432>
    2194:	9c af       	std	Y+60, r25	; 0x3c
    2196:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2198:	8d ad       	ldd	r24, Y+61	; 0x3d
    219a:	9e ad       	ldd	r25, Y+62	; 0x3e
    219c:	01 97       	sbiw	r24, 0x01	; 1
    219e:	9e af       	std	Y+62, r25	; 0x3e
    21a0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21a2:	8d ad       	ldd	r24, Y+61	; 0x3d
    21a4:	9e ad       	ldd	r25, Y+62	; 0x3e
    21a6:	00 97       	sbiw	r24, 0x00	; 0
    21a8:	69 f7       	brne	.-38     	; 0x2184 <LCD_sendCommand+0x426>
    21aa:	16 c0       	rjmp	.+44     	; 0x21d8 <LCD_sendCommand+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ac:	fe 01       	movw	r30, r28
    21ae:	ff 96       	adiw	r30, 0x3f	; 63
    21b0:	60 81       	ld	r22, Z
    21b2:	71 81       	ldd	r23, Z+1	; 0x01
    21b4:	82 81       	ldd	r24, Z+2	; 0x02
    21b6:	93 81       	ldd	r25, Z+3	; 0x03
    21b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21bc:	dc 01       	movw	r26, r24
    21be:	cb 01       	movw	r24, r22
    21c0:	9e af       	std	Y+62, r25	; 0x3e
    21c2:	8d af       	std	Y+61, r24	; 0x3d
    21c4:	8d ad       	ldd	r24, Y+61	; 0x3d
    21c6:	9e ad       	ldd	r25, Y+62	; 0x3e
    21c8:	9a af       	std	Y+58, r25	; 0x3a
    21ca:	89 af       	std	Y+57, r24	; 0x39
    21cc:	89 ad       	ldd	r24, Y+57	; 0x39
    21ce:	9a ad       	ldd	r25, Y+58	; 0x3a
    21d0:	01 97       	sbiw	r24, 0x01	; 1
    21d2:	f1 f7       	brne	.-4      	; 0x21d0 <LCD_sendCommand+0x472>
    21d4:	9a af       	std	Y+58, r25	; 0x3a
    21d6:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(1);

		// Clear Enable Pin to '0'
		GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
    21d8:	80 e0       	ldi	r24, 0x00	; 0
    21da:	62 e0       	ldi	r22, 0x02	; 2
    21dc:	40 e0       	ldi	r20, 0x00	; 0
    21de:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
    21e2:	80 e0       	ldi	r24, 0x00	; 0
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	a0 e8       	ldi	r26, 0x80	; 128
    21e8:	bf e3       	ldi	r27, 0x3F	; 63
    21ea:	8d ab       	std	Y+53, r24	; 0x35
    21ec:	9e ab       	std	Y+54, r25	; 0x36
    21ee:	af ab       	std	Y+55, r26	; 0x37
    21f0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21f2:	6d a9       	ldd	r22, Y+53	; 0x35
    21f4:	7e a9       	ldd	r23, Y+54	; 0x36
    21f6:	8f a9       	ldd	r24, Y+55	; 0x37
    21f8:	98 ad       	ldd	r25, Y+56	; 0x38
    21fa:	20 e0       	ldi	r18, 0x00	; 0
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	4a e7       	ldi	r20, 0x7A	; 122
    2200:	53 e4       	ldi	r21, 0x43	; 67
    2202:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2206:	dc 01       	movw	r26, r24
    2208:	cb 01       	movw	r24, r22
    220a:	89 ab       	std	Y+49, r24	; 0x31
    220c:	9a ab       	std	Y+50, r25	; 0x32
    220e:	ab ab       	std	Y+51, r26	; 0x33
    2210:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2212:	69 a9       	ldd	r22, Y+49	; 0x31
    2214:	7a a9       	ldd	r23, Y+50	; 0x32
    2216:	8b a9       	ldd	r24, Y+51	; 0x33
    2218:	9c a9       	ldd	r25, Y+52	; 0x34
    221a:	20 e0       	ldi	r18, 0x00	; 0
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	40 e8       	ldi	r20, 0x80	; 128
    2220:	5f e3       	ldi	r21, 0x3F	; 63
    2222:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2226:	88 23       	and	r24, r24
    2228:	2c f4       	brge	.+10     	; 0x2234 <LCD_sendCommand+0x4d6>
		__ticks = 1;
    222a:	81 e0       	ldi	r24, 0x01	; 1
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	98 ab       	std	Y+48, r25	; 0x30
    2230:	8f a7       	std	Y+47, r24	; 0x2f
    2232:	3f c0       	rjmp	.+126    	; 0x22b2 <LCD_sendCommand+0x554>
	else if (__tmp > 65535)
    2234:	69 a9       	ldd	r22, Y+49	; 0x31
    2236:	7a a9       	ldd	r23, Y+50	; 0x32
    2238:	8b a9       	ldd	r24, Y+51	; 0x33
    223a:	9c a9       	ldd	r25, Y+52	; 0x34
    223c:	20 e0       	ldi	r18, 0x00	; 0
    223e:	3f ef       	ldi	r19, 0xFF	; 255
    2240:	4f e7       	ldi	r20, 0x7F	; 127
    2242:	57 e4       	ldi	r21, 0x47	; 71
    2244:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2248:	18 16       	cp	r1, r24
    224a:	4c f5       	brge	.+82     	; 0x229e <LCD_sendCommand+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    224c:	6d a9       	ldd	r22, Y+53	; 0x35
    224e:	7e a9       	ldd	r23, Y+54	; 0x36
    2250:	8f a9       	ldd	r24, Y+55	; 0x37
    2252:	98 ad       	ldd	r25, Y+56	; 0x38
    2254:	20 e0       	ldi	r18, 0x00	; 0
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	40 e2       	ldi	r20, 0x20	; 32
    225a:	51 e4       	ldi	r21, 0x41	; 65
    225c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2260:	dc 01       	movw	r26, r24
    2262:	cb 01       	movw	r24, r22
    2264:	bc 01       	movw	r22, r24
    2266:	cd 01       	movw	r24, r26
    2268:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    226c:	dc 01       	movw	r26, r24
    226e:	cb 01       	movw	r24, r22
    2270:	98 ab       	std	Y+48, r25	; 0x30
    2272:	8f a7       	std	Y+47, r24	; 0x2f
    2274:	0f c0       	rjmp	.+30     	; 0x2294 <LCD_sendCommand+0x536>
    2276:	89 e1       	ldi	r24, 0x19	; 25
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	9e a7       	std	Y+46, r25	; 0x2e
    227c:	8d a7       	std	Y+45, r24	; 0x2d
    227e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2280:	9e a5       	ldd	r25, Y+46	; 0x2e
    2282:	01 97       	sbiw	r24, 0x01	; 1
    2284:	f1 f7       	brne	.-4      	; 0x2282 <LCD_sendCommand+0x524>
    2286:	9e a7       	std	Y+46, r25	; 0x2e
    2288:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    228a:	8f a5       	ldd	r24, Y+47	; 0x2f
    228c:	98 a9       	ldd	r25, Y+48	; 0x30
    228e:	01 97       	sbiw	r24, 0x01	; 1
    2290:	98 ab       	std	Y+48, r25	; 0x30
    2292:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2294:	8f a5       	ldd	r24, Y+47	; 0x2f
    2296:	98 a9       	ldd	r25, Y+48	; 0x30
    2298:	00 97       	sbiw	r24, 0x00	; 0
    229a:	69 f7       	brne	.-38     	; 0x2276 <LCD_sendCommand+0x518>
    229c:	14 c0       	rjmp	.+40     	; 0x22c6 <LCD_sendCommand+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    229e:	69 a9       	ldd	r22, Y+49	; 0x31
    22a0:	7a a9       	ldd	r23, Y+50	; 0x32
    22a2:	8b a9       	ldd	r24, Y+51	; 0x33
    22a4:	9c a9       	ldd	r25, Y+52	; 0x34
    22a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22aa:	dc 01       	movw	r26, r24
    22ac:	cb 01       	movw	r24, r22
    22ae:	98 ab       	std	Y+48, r25	; 0x30
    22b0:	8f a7       	std	Y+47, r24	; 0x2f
    22b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    22b4:	98 a9       	ldd	r25, Y+48	; 0x30
    22b6:	9c a7       	std	Y+44, r25	; 0x2c
    22b8:	8b a7       	std	Y+43, r24	; 0x2b
    22ba:	8b a5       	ldd	r24, Y+43	; 0x2b
    22bc:	9c a5       	ldd	r25, Y+44	; 0x2c
    22be:	01 97       	sbiw	r24, 0x01	; 1
    22c0:	f1 f7       	brne	.-4      	; 0x22be <LCD_sendCommand+0x560>
    22c2:	9c a7       	std	Y+44, r25	; 0x2c
    22c4:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1); /* delay for processing Th = 13ns */

		// Set Enable Pin to '1'
		GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
    22c6:	80 e0       	ldi	r24, 0x00	; 0
    22c8:	62 e0       	ldi	r22, 0x02	; 2
    22ca:	41 e0       	ldi	r20, 0x01	; 1
    22cc:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
    22d0:	80 e0       	ldi	r24, 0x00	; 0
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	a0 e8       	ldi	r26, 0x80	; 128
    22d6:	bf e3       	ldi	r27, 0x3F	; 63
    22d8:	8f a3       	std	Y+39, r24	; 0x27
    22da:	98 a7       	std	Y+40, r25	; 0x28
    22dc:	a9 a7       	std	Y+41, r26	; 0x29
    22de:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22e0:	6f a1       	ldd	r22, Y+39	; 0x27
    22e2:	78 a5       	ldd	r23, Y+40	; 0x28
    22e4:	89 a5       	ldd	r24, Y+41	; 0x29
    22e6:	9a a5       	ldd	r25, Y+42	; 0x2a
    22e8:	20 e0       	ldi	r18, 0x00	; 0
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	4a e7       	ldi	r20, 0x7A	; 122
    22ee:	53 e4       	ldi	r21, 0x43	; 67
    22f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22f4:	dc 01       	movw	r26, r24
    22f6:	cb 01       	movw	r24, r22
    22f8:	8b a3       	std	Y+35, r24	; 0x23
    22fa:	9c a3       	std	Y+36, r25	; 0x24
    22fc:	ad a3       	std	Y+37, r26	; 0x25
    22fe:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2300:	6b a1       	ldd	r22, Y+35	; 0x23
    2302:	7c a1       	ldd	r23, Y+36	; 0x24
    2304:	8d a1       	ldd	r24, Y+37	; 0x25
    2306:	9e a1       	ldd	r25, Y+38	; 0x26
    2308:	20 e0       	ldi	r18, 0x00	; 0
    230a:	30 e0       	ldi	r19, 0x00	; 0
    230c:	40 e8       	ldi	r20, 0x80	; 128
    230e:	5f e3       	ldi	r21, 0x3F	; 63
    2310:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2314:	88 23       	and	r24, r24
    2316:	2c f4       	brge	.+10     	; 0x2322 <LCD_sendCommand+0x5c4>
		__ticks = 1;
    2318:	81 e0       	ldi	r24, 0x01	; 1
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	9a a3       	std	Y+34, r25	; 0x22
    231e:	89 a3       	std	Y+33, r24	; 0x21
    2320:	3f c0       	rjmp	.+126    	; 0x23a0 <LCD_sendCommand+0x642>
	else if (__tmp > 65535)
    2322:	6b a1       	ldd	r22, Y+35	; 0x23
    2324:	7c a1       	ldd	r23, Y+36	; 0x24
    2326:	8d a1       	ldd	r24, Y+37	; 0x25
    2328:	9e a1       	ldd	r25, Y+38	; 0x26
    232a:	20 e0       	ldi	r18, 0x00	; 0
    232c:	3f ef       	ldi	r19, 0xFF	; 255
    232e:	4f e7       	ldi	r20, 0x7F	; 127
    2330:	57 e4       	ldi	r21, 0x47	; 71
    2332:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2336:	18 16       	cp	r1, r24
    2338:	4c f5       	brge	.+82     	; 0x238c <LCD_sendCommand+0x62e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    233a:	6f a1       	ldd	r22, Y+39	; 0x27
    233c:	78 a5       	ldd	r23, Y+40	; 0x28
    233e:	89 a5       	ldd	r24, Y+41	; 0x29
    2340:	9a a5       	ldd	r25, Y+42	; 0x2a
    2342:	20 e0       	ldi	r18, 0x00	; 0
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	40 e2       	ldi	r20, 0x20	; 32
    2348:	51 e4       	ldi	r21, 0x41	; 65
    234a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    234e:	dc 01       	movw	r26, r24
    2350:	cb 01       	movw	r24, r22
    2352:	bc 01       	movw	r22, r24
    2354:	cd 01       	movw	r24, r26
    2356:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    235a:	dc 01       	movw	r26, r24
    235c:	cb 01       	movw	r24, r22
    235e:	9a a3       	std	Y+34, r25	; 0x22
    2360:	89 a3       	std	Y+33, r24	; 0x21
    2362:	0f c0       	rjmp	.+30     	; 0x2382 <LCD_sendCommand+0x624>
    2364:	89 e1       	ldi	r24, 0x19	; 25
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	98 a3       	std	Y+32, r25	; 0x20
    236a:	8f 8f       	std	Y+31, r24	; 0x1f
    236c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    236e:	98 a1       	ldd	r25, Y+32	; 0x20
    2370:	01 97       	sbiw	r24, 0x01	; 1
    2372:	f1 f7       	brne	.-4      	; 0x2370 <LCD_sendCommand+0x612>
    2374:	98 a3       	std	Y+32, r25	; 0x20
    2376:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2378:	89 a1       	ldd	r24, Y+33	; 0x21
    237a:	9a a1       	ldd	r25, Y+34	; 0x22
    237c:	01 97       	sbiw	r24, 0x01	; 1
    237e:	9a a3       	std	Y+34, r25	; 0x22
    2380:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2382:	89 a1       	ldd	r24, Y+33	; 0x21
    2384:	9a a1       	ldd	r25, Y+34	; 0x22
    2386:	00 97       	sbiw	r24, 0x00	; 0
    2388:	69 f7       	brne	.-38     	; 0x2364 <LCD_sendCommand+0x606>
    238a:	14 c0       	rjmp	.+40     	; 0x23b4 <LCD_sendCommand+0x656>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    238c:	6b a1       	ldd	r22, Y+35	; 0x23
    238e:	7c a1       	ldd	r23, Y+36	; 0x24
    2390:	8d a1       	ldd	r24, Y+37	; 0x25
    2392:	9e a1       	ldd	r25, Y+38	; 0x26
    2394:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2398:	dc 01       	movw	r26, r24
    239a:	cb 01       	movw	r24, r22
    239c:	9a a3       	std	Y+34, r25	; 0x22
    239e:	89 a3       	std	Y+33, r24	; 0x21
    23a0:	89 a1       	ldd	r24, Y+33	; 0x21
    23a2:	9a a1       	ldd	r25, Y+34	; 0x22
    23a4:	9e 8f       	std	Y+30, r25	; 0x1e
    23a6:	8d 8f       	std	Y+29, r24	; 0x1d
    23a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23aa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23ac:	01 97       	sbiw	r24, 0x01	; 1
    23ae:	f1 f7       	brne	.-4      	; 0x23ac <LCD_sendCommand+0x64e>
    23b0:	9e 8f       	std	Y+30, r25	; 0x1e
    23b2:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 0), GET_BIT( command, 0 ));
    23b4:	fe 01       	movw	r30, r28
    23b6:	ed 59       	subi	r30, 0x9D	; 157
    23b8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ba:	80 81       	ld	r24, Z
    23bc:	98 2f       	mov	r25, r24
    23be:	91 70       	andi	r25, 0x01	; 1
    23c0:	80 e0       	ldi	r24, 0x00	; 0
    23c2:	63 e0       	ldi	r22, 0x03	; 3
    23c4:	49 2f       	mov	r20, r25
    23c6:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 1), GET_BIT( command, 1 ));
    23ca:	fe 01       	movw	r30, r28
    23cc:	ed 59       	subi	r30, 0x9D	; 157
    23ce:	ff 4f       	sbci	r31, 0xFF	; 255
    23d0:	80 81       	ld	r24, Z
    23d2:	86 95       	lsr	r24
    23d4:	98 2f       	mov	r25, r24
    23d6:	91 70       	andi	r25, 0x01	; 1
    23d8:	80 e0       	ldi	r24, 0x00	; 0
    23da:	64 e0       	ldi	r22, 0x04	; 4
    23dc:	49 2f       	mov	r20, r25
    23de:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 2), GET_BIT( command, 2 ));
    23e2:	fe 01       	movw	r30, r28
    23e4:	ed 59       	subi	r30, 0x9D	; 157
    23e6:	ff 4f       	sbci	r31, 0xFF	; 255
    23e8:	80 81       	ld	r24, Z
    23ea:	86 95       	lsr	r24
    23ec:	86 95       	lsr	r24
    23ee:	98 2f       	mov	r25, r24
    23f0:	91 70       	andi	r25, 0x01	; 1
    23f2:	80 e0       	ldi	r24, 0x00	; 0
    23f4:	65 e0       	ldi	r22, 0x05	; 5
    23f6:	49 2f       	mov	r20, r25
    23f8:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 3), GET_BIT( command, 3 ));
    23fc:	fe 01       	movw	r30, r28
    23fe:	ed 59       	subi	r30, 0x9D	; 157
    2400:	ff 4f       	sbci	r31, 0xFF	; 255
    2402:	80 81       	ld	r24, Z
    2404:	86 95       	lsr	r24
    2406:	86 95       	lsr	r24
    2408:	86 95       	lsr	r24
    240a:	98 2f       	mov	r25, r24
    240c:	91 70       	andi	r25, 0x01	; 1
    240e:	80 e0       	ldi	r24, 0x00	; 0
    2410:	66 e0       	ldi	r22, 0x06	; 6
    2412:	49 2f       	mov	r20, r25
    2414:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
    2418:	80 e0       	ldi	r24, 0x00	; 0
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	a0 e8       	ldi	r26, 0x80	; 128
    241e:	bf e3       	ldi	r27, 0x3F	; 63
    2420:	89 8f       	std	Y+25, r24	; 0x19
    2422:	9a 8f       	std	Y+26, r25	; 0x1a
    2424:	ab 8f       	std	Y+27, r26	; 0x1b
    2426:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2428:	69 8d       	ldd	r22, Y+25	; 0x19
    242a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    242c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    242e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2430:	20 e0       	ldi	r18, 0x00	; 0
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	4a e7       	ldi	r20, 0x7A	; 122
    2436:	53 e4       	ldi	r21, 0x43	; 67
    2438:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    243c:	dc 01       	movw	r26, r24
    243e:	cb 01       	movw	r24, r22
    2440:	8d 8b       	std	Y+21, r24	; 0x15
    2442:	9e 8b       	std	Y+22, r25	; 0x16
    2444:	af 8b       	std	Y+23, r26	; 0x17
    2446:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2448:	6d 89       	ldd	r22, Y+21	; 0x15
    244a:	7e 89       	ldd	r23, Y+22	; 0x16
    244c:	8f 89       	ldd	r24, Y+23	; 0x17
    244e:	98 8d       	ldd	r25, Y+24	; 0x18
    2450:	20 e0       	ldi	r18, 0x00	; 0
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	40 e8       	ldi	r20, 0x80	; 128
    2456:	5f e3       	ldi	r21, 0x3F	; 63
    2458:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    245c:	88 23       	and	r24, r24
    245e:	2c f4       	brge	.+10     	; 0x246a <LCD_sendCommand+0x70c>
		__ticks = 1;
    2460:	81 e0       	ldi	r24, 0x01	; 1
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	9c 8b       	std	Y+20, r25	; 0x14
    2466:	8b 8b       	std	Y+19, r24	; 0x13
    2468:	3f c0       	rjmp	.+126    	; 0x24e8 <LCD_sendCommand+0x78a>
	else if (__tmp > 65535)
    246a:	6d 89       	ldd	r22, Y+21	; 0x15
    246c:	7e 89       	ldd	r23, Y+22	; 0x16
    246e:	8f 89       	ldd	r24, Y+23	; 0x17
    2470:	98 8d       	ldd	r25, Y+24	; 0x18
    2472:	20 e0       	ldi	r18, 0x00	; 0
    2474:	3f ef       	ldi	r19, 0xFF	; 255
    2476:	4f e7       	ldi	r20, 0x7F	; 127
    2478:	57 e4       	ldi	r21, 0x47	; 71
    247a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    247e:	18 16       	cp	r1, r24
    2480:	4c f5       	brge	.+82     	; 0x24d4 <LCD_sendCommand+0x776>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2482:	69 8d       	ldd	r22, Y+25	; 0x19
    2484:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2486:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2488:	9c 8d       	ldd	r25, Y+28	; 0x1c
    248a:	20 e0       	ldi	r18, 0x00	; 0
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	40 e2       	ldi	r20, 0x20	; 32
    2490:	51 e4       	ldi	r21, 0x41	; 65
    2492:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2496:	dc 01       	movw	r26, r24
    2498:	cb 01       	movw	r24, r22
    249a:	bc 01       	movw	r22, r24
    249c:	cd 01       	movw	r24, r26
    249e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24a2:	dc 01       	movw	r26, r24
    24a4:	cb 01       	movw	r24, r22
    24a6:	9c 8b       	std	Y+20, r25	; 0x14
    24a8:	8b 8b       	std	Y+19, r24	; 0x13
    24aa:	0f c0       	rjmp	.+30     	; 0x24ca <LCD_sendCommand+0x76c>
    24ac:	89 e1       	ldi	r24, 0x19	; 25
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	9a 8b       	std	Y+18, r25	; 0x12
    24b2:	89 8b       	std	Y+17, r24	; 0x11
    24b4:	89 89       	ldd	r24, Y+17	; 0x11
    24b6:	9a 89       	ldd	r25, Y+18	; 0x12
    24b8:	01 97       	sbiw	r24, 0x01	; 1
    24ba:	f1 f7       	brne	.-4      	; 0x24b8 <LCD_sendCommand+0x75a>
    24bc:	9a 8b       	std	Y+18, r25	; 0x12
    24be:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24c0:	8b 89       	ldd	r24, Y+19	; 0x13
    24c2:	9c 89       	ldd	r25, Y+20	; 0x14
    24c4:	01 97       	sbiw	r24, 0x01	; 1
    24c6:	9c 8b       	std	Y+20, r25	; 0x14
    24c8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ca:	8b 89       	ldd	r24, Y+19	; 0x13
    24cc:	9c 89       	ldd	r25, Y+20	; 0x14
    24ce:	00 97       	sbiw	r24, 0x00	; 0
    24d0:	69 f7       	brne	.-38     	; 0x24ac <LCD_sendCommand+0x74e>
    24d2:	14 c0       	rjmp	.+40     	; 0x24fc <LCD_sendCommand+0x79e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24d4:	6d 89       	ldd	r22, Y+21	; 0x15
    24d6:	7e 89       	ldd	r23, Y+22	; 0x16
    24d8:	8f 89       	ldd	r24, Y+23	; 0x17
    24da:	98 8d       	ldd	r25, Y+24	; 0x18
    24dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24e0:	dc 01       	movw	r26, r24
    24e2:	cb 01       	movw	r24, r22
    24e4:	9c 8b       	std	Y+20, r25	; 0x14
    24e6:	8b 8b       	std	Y+19, r24	; 0x13
    24e8:	8b 89       	ldd	r24, Y+19	; 0x13
    24ea:	9c 89       	ldd	r25, Y+20	; 0x14
    24ec:	98 8b       	std	Y+16, r25	; 0x10
    24ee:	8f 87       	std	Y+15, r24	; 0x0f
    24f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    24f2:	98 89       	ldd	r25, Y+16	; 0x10
    24f4:	01 97       	sbiw	r24, 0x01	; 1
    24f6:	f1 f7       	brne	.-4      	; 0x24f4 <LCD_sendCommand+0x796>
    24f8:	98 8b       	std	Y+16, r25	; 0x10
    24fa:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1); /* delay for processing Tdsw = 100ns */

		// Clear Enable Pin to '0'
		GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
    24fc:	80 e0       	ldi	r24, 0x00	; 0
    24fe:	62 e0       	ldi	r22, 0x02	; 2
    2500:	40 e0       	ldi	r20, 0x00	; 0
    2502:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
    2506:	80 e0       	ldi	r24, 0x00	; 0
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	a0 e8       	ldi	r26, 0x80	; 128
    250c:	bf e3       	ldi	r27, 0x3F	; 63
    250e:	8b 87       	std	Y+11, r24	; 0x0b
    2510:	9c 87       	std	Y+12, r25	; 0x0c
    2512:	ad 87       	std	Y+13, r26	; 0x0d
    2514:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2516:	6b 85       	ldd	r22, Y+11	; 0x0b
    2518:	7c 85       	ldd	r23, Y+12	; 0x0c
    251a:	8d 85       	ldd	r24, Y+13	; 0x0d
    251c:	9e 85       	ldd	r25, Y+14	; 0x0e
    251e:	20 e0       	ldi	r18, 0x00	; 0
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	4a e7       	ldi	r20, 0x7A	; 122
    2524:	53 e4       	ldi	r21, 0x43	; 67
    2526:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    252a:	dc 01       	movw	r26, r24
    252c:	cb 01       	movw	r24, r22
    252e:	8f 83       	std	Y+7, r24	; 0x07
    2530:	98 87       	std	Y+8, r25	; 0x08
    2532:	a9 87       	std	Y+9, r26	; 0x09
    2534:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2536:	6f 81       	ldd	r22, Y+7	; 0x07
    2538:	78 85       	ldd	r23, Y+8	; 0x08
    253a:	89 85       	ldd	r24, Y+9	; 0x09
    253c:	9a 85       	ldd	r25, Y+10	; 0x0a
    253e:	20 e0       	ldi	r18, 0x00	; 0
    2540:	30 e0       	ldi	r19, 0x00	; 0
    2542:	40 e8       	ldi	r20, 0x80	; 128
    2544:	5f e3       	ldi	r21, 0x3F	; 63
    2546:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    254a:	88 23       	and	r24, r24
    254c:	2c f4       	brge	.+10     	; 0x2558 <LCD_sendCommand+0x7fa>
		__ticks = 1;
    254e:	81 e0       	ldi	r24, 0x01	; 1
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	9e 83       	std	Y+6, r25	; 0x06
    2554:	8d 83       	std	Y+5, r24	; 0x05
    2556:	3f c0       	rjmp	.+126    	; 0x25d6 <LCD_sendCommand+0x878>
	else if (__tmp > 65535)
    2558:	6f 81       	ldd	r22, Y+7	; 0x07
    255a:	78 85       	ldd	r23, Y+8	; 0x08
    255c:	89 85       	ldd	r24, Y+9	; 0x09
    255e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2560:	20 e0       	ldi	r18, 0x00	; 0
    2562:	3f ef       	ldi	r19, 0xFF	; 255
    2564:	4f e7       	ldi	r20, 0x7F	; 127
    2566:	57 e4       	ldi	r21, 0x47	; 71
    2568:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    256c:	18 16       	cp	r1, r24
    256e:	4c f5       	brge	.+82     	; 0x25c2 <LCD_sendCommand+0x864>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2570:	6b 85       	ldd	r22, Y+11	; 0x0b
    2572:	7c 85       	ldd	r23, Y+12	; 0x0c
    2574:	8d 85       	ldd	r24, Y+13	; 0x0d
    2576:	9e 85       	ldd	r25, Y+14	; 0x0e
    2578:	20 e0       	ldi	r18, 0x00	; 0
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	40 e2       	ldi	r20, 0x20	; 32
    257e:	51 e4       	ldi	r21, 0x41	; 65
    2580:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2584:	dc 01       	movw	r26, r24
    2586:	cb 01       	movw	r24, r22
    2588:	bc 01       	movw	r22, r24
    258a:	cd 01       	movw	r24, r26
    258c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2590:	dc 01       	movw	r26, r24
    2592:	cb 01       	movw	r24, r22
    2594:	9e 83       	std	Y+6, r25	; 0x06
    2596:	8d 83       	std	Y+5, r24	; 0x05
    2598:	0f c0       	rjmp	.+30     	; 0x25b8 <LCD_sendCommand+0x85a>
    259a:	89 e1       	ldi	r24, 0x19	; 25
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	9c 83       	std	Y+4, r25	; 0x04
    25a0:	8b 83       	std	Y+3, r24	; 0x03
    25a2:	8b 81       	ldd	r24, Y+3	; 0x03
    25a4:	9c 81       	ldd	r25, Y+4	; 0x04
    25a6:	01 97       	sbiw	r24, 0x01	; 1
    25a8:	f1 f7       	brne	.-4      	; 0x25a6 <LCD_sendCommand+0x848>
    25aa:	9c 83       	std	Y+4, r25	; 0x04
    25ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ae:	8d 81       	ldd	r24, Y+5	; 0x05
    25b0:	9e 81       	ldd	r25, Y+6	; 0x06
    25b2:	01 97       	sbiw	r24, 0x01	; 1
    25b4:	9e 83       	std	Y+6, r25	; 0x06
    25b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25b8:	8d 81       	ldd	r24, Y+5	; 0x05
    25ba:	9e 81       	ldd	r25, Y+6	; 0x06
    25bc:	00 97       	sbiw	r24, 0x00	; 0
    25be:	69 f7       	brne	.-38     	; 0x259a <LCD_sendCommand+0x83c>
    25c0:	14 c0       	rjmp	.+40     	; 0x25ea <LCD_sendCommand+0x88c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25c2:	6f 81       	ldd	r22, Y+7	; 0x07
    25c4:	78 85       	ldd	r23, Y+8	; 0x08
    25c6:	89 85       	ldd	r24, Y+9	; 0x09
    25c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25ce:	dc 01       	movw	r26, r24
    25d0:	cb 01       	movw	r24, r22
    25d2:	9e 83       	std	Y+6, r25	; 0x06
    25d4:	8d 83       	std	Y+5, r24	; 0x05
    25d6:	8d 81       	ldd	r24, Y+5	; 0x05
    25d8:	9e 81       	ldd	r25, Y+6	; 0x06
    25da:	9a 83       	std	Y+2, r25	; 0x02
    25dc:	89 83       	std	Y+1, r24	; 0x01
    25de:	89 81       	ldd	r24, Y+1	; 0x01
    25e0:	9a 81       	ldd	r25, Y+2	; 0x02
    25e2:	01 97       	sbiw	r24, 0x01	; 1
    25e4:	f1 f7       	brne	.-4      	; 0x25e2 <LCD_sendCommand+0x884>
    25e6:	9a 83       	std	Y+2, r25	; 0x02
    25e8:	89 83       	std	Y+1, r24	; 0x01

		// Clear Enable Pin to '0'
		GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
		_delay_ms(1); /* delay for processing Th = 13ns */
	}
}
    25ea:	cd 59       	subi	r28, 0x9D	; 157
    25ec:	df 4f       	sbci	r29, 0xFF	; 255
    25ee:	0f b6       	in	r0, 0x3f	; 63
    25f0:	f8 94       	cli
    25f2:	de bf       	out	0x3e, r29	; 62
    25f4:	0f be       	out	0x3f, r0	; 63
    25f6:	cd bf       	out	0x3d, r28	; 61
    25f8:	cf 91       	pop	r28
    25fa:	df 91       	pop	r29
    25fc:	1f 91       	pop	r17
    25fe:	0f 91       	pop	r16
    2600:	08 95       	ret

00002602 <LCD_displayCharacter>:


// Displays a character on the LCD
void LCD_displayCharacter(uint8 data) {
    2602:	0f 93       	push	r16
    2604:	1f 93       	push	r17
    2606:	df 93       	push	r29
    2608:	cf 93       	push	r28
    260a:	cd b7       	in	r28, 0x3d	; 61
    260c:	de b7       	in	r29, 0x3e	; 62
    260e:	c3 56       	subi	r28, 0x63	; 99
    2610:	d0 40       	sbci	r29, 0x00	; 0
    2612:	0f b6       	in	r0, 0x3f	; 63
    2614:	f8 94       	cli
    2616:	de bf       	out	0x3e, r29	; 62
    2618:	0f be       	out	0x3f, r0	; 63
    261a:	cd bf       	out	0x3d, r28	; 61
    261c:	fe 01       	movw	r30, r28
    261e:	ed 59       	subi	r30, 0x9D	; 157
    2620:	ff 4f       	sbci	r31, 0xFF	; 255
    2622:	80 83       	st	Z, r24
	// Set RS Pin to '1'
	GPIO_writePin(LCD_INIT_PORT, LCD_RS, LOGIC_HIGH);
    2624:	80 e0       	ldi	r24, 0x00	; 0
    2626:	61 e0       	ldi	r22, 0x01	; 1
    2628:	41 e0       	ldi	r20, 0x01	; 1
    262a:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
    262e:	fe 01       	movw	r30, r28
    2630:	e1 5a       	subi	r30, 0xA1	; 161
    2632:	ff 4f       	sbci	r31, 0xFF	; 255
    2634:	80 e0       	ldi	r24, 0x00	; 0
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	a0 e8       	ldi	r26, 0x80	; 128
    263a:	bf e3       	ldi	r27, 0x3F	; 63
    263c:	80 83       	st	Z, r24
    263e:	91 83       	std	Z+1, r25	; 0x01
    2640:	a2 83       	std	Z+2, r26	; 0x02
    2642:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2644:	8e 01       	movw	r16, r28
    2646:	05 5a       	subi	r16, 0xA5	; 165
    2648:	1f 4f       	sbci	r17, 0xFF	; 255
    264a:	fe 01       	movw	r30, r28
    264c:	e1 5a       	subi	r30, 0xA1	; 161
    264e:	ff 4f       	sbci	r31, 0xFF	; 255
    2650:	60 81       	ld	r22, Z
    2652:	71 81       	ldd	r23, Z+1	; 0x01
    2654:	82 81       	ldd	r24, Z+2	; 0x02
    2656:	93 81       	ldd	r25, Z+3	; 0x03
    2658:	20 e0       	ldi	r18, 0x00	; 0
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	4a e7       	ldi	r20, 0x7A	; 122
    265e:	53 e4       	ldi	r21, 0x43	; 67
    2660:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2664:	dc 01       	movw	r26, r24
    2666:	cb 01       	movw	r24, r22
    2668:	f8 01       	movw	r30, r16
    266a:	80 83       	st	Z, r24
    266c:	91 83       	std	Z+1, r25	; 0x01
    266e:	a2 83       	std	Z+2, r26	; 0x02
    2670:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2672:	fe 01       	movw	r30, r28
    2674:	e5 5a       	subi	r30, 0xA5	; 165
    2676:	ff 4f       	sbci	r31, 0xFF	; 255
    2678:	60 81       	ld	r22, Z
    267a:	71 81       	ldd	r23, Z+1	; 0x01
    267c:	82 81       	ldd	r24, Z+2	; 0x02
    267e:	93 81       	ldd	r25, Z+3	; 0x03
    2680:	20 e0       	ldi	r18, 0x00	; 0
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	40 e8       	ldi	r20, 0x80	; 128
    2686:	5f e3       	ldi	r21, 0x3F	; 63
    2688:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    268c:	88 23       	and	r24, r24
    268e:	44 f4       	brge	.+16     	; 0x26a0 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    2690:	fe 01       	movw	r30, r28
    2692:	e7 5a       	subi	r30, 0xA7	; 167
    2694:	ff 4f       	sbci	r31, 0xFF	; 255
    2696:	81 e0       	ldi	r24, 0x01	; 1
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	91 83       	std	Z+1, r25	; 0x01
    269c:	80 83       	st	Z, r24
    269e:	64 c0       	rjmp	.+200    	; 0x2768 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    26a0:	fe 01       	movw	r30, r28
    26a2:	e5 5a       	subi	r30, 0xA5	; 165
    26a4:	ff 4f       	sbci	r31, 0xFF	; 255
    26a6:	60 81       	ld	r22, Z
    26a8:	71 81       	ldd	r23, Z+1	; 0x01
    26aa:	82 81       	ldd	r24, Z+2	; 0x02
    26ac:	93 81       	ldd	r25, Z+3	; 0x03
    26ae:	20 e0       	ldi	r18, 0x00	; 0
    26b0:	3f ef       	ldi	r19, 0xFF	; 255
    26b2:	4f e7       	ldi	r20, 0x7F	; 127
    26b4:	57 e4       	ldi	r21, 0x47	; 71
    26b6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    26ba:	18 16       	cp	r1, r24
    26bc:	0c f0       	brlt	.+2      	; 0x26c0 <LCD_displayCharacter+0xbe>
    26be:	43 c0       	rjmp	.+134    	; 0x2746 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26c0:	fe 01       	movw	r30, r28
    26c2:	e1 5a       	subi	r30, 0xA1	; 161
    26c4:	ff 4f       	sbci	r31, 0xFF	; 255
    26c6:	60 81       	ld	r22, Z
    26c8:	71 81       	ldd	r23, Z+1	; 0x01
    26ca:	82 81       	ldd	r24, Z+2	; 0x02
    26cc:	93 81       	ldd	r25, Z+3	; 0x03
    26ce:	20 e0       	ldi	r18, 0x00	; 0
    26d0:	30 e0       	ldi	r19, 0x00	; 0
    26d2:	40 e2       	ldi	r20, 0x20	; 32
    26d4:	51 e4       	ldi	r21, 0x41	; 65
    26d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26da:	dc 01       	movw	r26, r24
    26dc:	cb 01       	movw	r24, r22
    26de:	8e 01       	movw	r16, r28
    26e0:	07 5a       	subi	r16, 0xA7	; 167
    26e2:	1f 4f       	sbci	r17, 0xFF	; 255
    26e4:	bc 01       	movw	r22, r24
    26e6:	cd 01       	movw	r24, r26
    26e8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26ec:	dc 01       	movw	r26, r24
    26ee:	cb 01       	movw	r24, r22
    26f0:	f8 01       	movw	r30, r16
    26f2:	91 83       	std	Z+1, r25	; 0x01
    26f4:	80 83       	st	Z, r24
    26f6:	1f c0       	rjmp	.+62     	; 0x2736 <LCD_displayCharacter+0x134>
    26f8:	fe 01       	movw	r30, r28
    26fa:	e9 5a       	subi	r30, 0xA9	; 169
    26fc:	ff 4f       	sbci	r31, 0xFF	; 255
    26fe:	89 e1       	ldi	r24, 0x19	; 25
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	91 83       	std	Z+1, r25	; 0x01
    2704:	80 83       	st	Z, r24
    2706:	fe 01       	movw	r30, r28
    2708:	e9 5a       	subi	r30, 0xA9	; 169
    270a:	ff 4f       	sbci	r31, 0xFF	; 255
    270c:	80 81       	ld	r24, Z
    270e:	91 81       	ldd	r25, Z+1	; 0x01
    2710:	01 97       	sbiw	r24, 0x01	; 1
    2712:	f1 f7       	brne	.-4      	; 0x2710 <LCD_displayCharacter+0x10e>
    2714:	fe 01       	movw	r30, r28
    2716:	e9 5a       	subi	r30, 0xA9	; 169
    2718:	ff 4f       	sbci	r31, 0xFF	; 255
    271a:	91 83       	std	Z+1, r25	; 0x01
    271c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    271e:	de 01       	movw	r26, r28
    2720:	a7 5a       	subi	r26, 0xA7	; 167
    2722:	bf 4f       	sbci	r27, 0xFF	; 255
    2724:	fe 01       	movw	r30, r28
    2726:	e7 5a       	subi	r30, 0xA7	; 167
    2728:	ff 4f       	sbci	r31, 0xFF	; 255
    272a:	80 81       	ld	r24, Z
    272c:	91 81       	ldd	r25, Z+1	; 0x01
    272e:	01 97       	sbiw	r24, 0x01	; 1
    2730:	11 96       	adiw	r26, 0x01	; 1
    2732:	9c 93       	st	X, r25
    2734:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2736:	fe 01       	movw	r30, r28
    2738:	e7 5a       	subi	r30, 0xA7	; 167
    273a:	ff 4f       	sbci	r31, 0xFF	; 255
    273c:	80 81       	ld	r24, Z
    273e:	91 81       	ldd	r25, Z+1	; 0x01
    2740:	00 97       	sbiw	r24, 0x00	; 0
    2742:	d1 f6       	brne	.-76     	; 0x26f8 <LCD_displayCharacter+0xf6>
    2744:	27 c0       	rjmp	.+78     	; 0x2794 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2746:	8e 01       	movw	r16, r28
    2748:	07 5a       	subi	r16, 0xA7	; 167
    274a:	1f 4f       	sbci	r17, 0xFF	; 255
    274c:	fe 01       	movw	r30, r28
    274e:	e5 5a       	subi	r30, 0xA5	; 165
    2750:	ff 4f       	sbci	r31, 0xFF	; 255
    2752:	60 81       	ld	r22, Z
    2754:	71 81       	ldd	r23, Z+1	; 0x01
    2756:	82 81       	ldd	r24, Z+2	; 0x02
    2758:	93 81       	ldd	r25, Z+3	; 0x03
    275a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    275e:	dc 01       	movw	r26, r24
    2760:	cb 01       	movw	r24, r22
    2762:	f8 01       	movw	r30, r16
    2764:	91 83       	std	Z+1, r25	; 0x01
    2766:	80 83       	st	Z, r24
    2768:	de 01       	movw	r26, r28
    276a:	ab 5a       	subi	r26, 0xAB	; 171
    276c:	bf 4f       	sbci	r27, 0xFF	; 255
    276e:	fe 01       	movw	r30, r28
    2770:	e7 5a       	subi	r30, 0xA7	; 167
    2772:	ff 4f       	sbci	r31, 0xFF	; 255
    2774:	80 81       	ld	r24, Z
    2776:	91 81       	ldd	r25, Z+1	; 0x01
    2778:	8d 93       	st	X+, r24
    277a:	9c 93       	st	X, r25
    277c:	fe 01       	movw	r30, r28
    277e:	eb 5a       	subi	r30, 0xAB	; 171
    2780:	ff 4f       	sbci	r31, 0xFF	; 255
    2782:	80 81       	ld	r24, Z
    2784:	91 81       	ldd	r25, Z+1	; 0x01
    2786:	01 97       	sbiw	r24, 0x01	; 1
    2788:	f1 f7       	brne	.-4      	; 0x2786 <LCD_displayCharacter+0x184>
    278a:	fe 01       	movw	r30, r28
    278c:	eb 5a       	subi	r30, 0xAB	; 171
    278e:	ff 4f       	sbci	r31, 0xFF	; 255
    2790:	91 83       	std	Z+1, r25	; 0x01
    2792:	80 83       	st	Z, r24
	_delay_ms(1);

	// Set Enable Pin to '1'
	GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
    2794:	80 e0       	ldi	r24, 0x00	; 0
    2796:	62 e0       	ldi	r22, 0x02	; 2
    2798:	41 e0       	ldi	r20, 0x01	; 1
    279a:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
    279e:	fe 01       	movw	r30, r28
    27a0:	ef 5a       	subi	r30, 0xAF	; 175
    27a2:	ff 4f       	sbci	r31, 0xFF	; 255
    27a4:	80 e0       	ldi	r24, 0x00	; 0
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	a0 e8       	ldi	r26, 0x80	; 128
    27aa:	bf e3       	ldi	r27, 0x3F	; 63
    27ac:	80 83       	st	Z, r24
    27ae:	91 83       	std	Z+1, r25	; 0x01
    27b0:	a2 83       	std	Z+2, r26	; 0x02
    27b2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27b4:	8e 01       	movw	r16, r28
    27b6:	03 5b       	subi	r16, 0xB3	; 179
    27b8:	1f 4f       	sbci	r17, 0xFF	; 255
    27ba:	fe 01       	movw	r30, r28
    27bc:	ef 5a       	subi	r30, 0xAF	; 175
    27be:	ff 4f       	sbci	r31, 0xFF	; 255
    27c0:	60 81       	ld	r22, Z
    27c2:	71 81       	ldd	r23, Z+1	; 0x01
    27c4:	82 81       	ldd	r24, Z+2	; 0x02
    27c6:	93 81       	ldd	r25, Z+3	; 0x03
    27c8:	20 e0       	ldi	r18, 0x00	; 0
    27ca:	30 e0       	ldi	r19, 0x00	; 0
    27cc:	4a e7       	ldi	r20, 0x7A	; 122
    27ce:	53 e4       	ldi	r21, 0x43	; 67
    27d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27d4:	dc 01       	movw	r26, r24
    27d6:	cb 01       	movw	r24, r22
    27d8:	f8 01       	movw	r30, r16
    27da:	80 83       	st	Z, r24
    27dc:	91 83       	std	Z+1, r25	; 0x01
    27de:	a2 83       	std	Z+2, r26	; 0x02
    27e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27e2:	fe 01       	movw	r30, r28
    27e4:	e3 5b       	subi	r30, 0xB3	; 179
    27e6:	ff 4f       	sbci	r31, 0xFF	; 255
    27e8:	60 81       	ld	r22, Z
    27ea:	71 81       	ldd	r23, Z+1	; 0x01
    27ec:	82 81       	ldd	r24, Z+2	; 0x02
    27ee:	93 81       	ldd	r25, Z+3	; 0x03
    27f0:	20 e0       	ldi	r18, 0x00	; 0
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	40 e8       	ldi	r20, 0x80	; 128
    27f6:	5f e3       	ldi	r21, 0x3F	; 63
    27f8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    27fc:	88 23       	and	r24, r24
    27fe:	44 f4       	brge	.+16     	; 0x2810 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2800:	fe 01       	movw	r30, r28
    2802:	e5 5b       	subi	r30, 0xB5	; 181
    2804:	ff 4f       	sbci	r31, 0xFF	; 255
    2806:	81 e0       	ldi	r24, 0x01	; 1
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	91 83       	std	Z+1, r25	; 0x01
    280c:	80 83       	st	Z, r24
    280e:	64 c0       	rjmp	.+200    	; 0x28d8 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2810:	fe 01       	movw	r30, r28
    2812:	e3 5b       	subi	r30, 0xB3	; 179
    2814:	ff 4f       	sbci	r31, 0xFF	; 255
    2816:	60 81       	ld	r22, Z
    2818:	71 81       	ldd	r23, Z+1	; 0x01
    281a:	82 81       	ldd	r24, Z+2	; 0x02
    281c:	93 81       	ldd	r25, Z+3	; 0x03
    281e:	20 e0       	ldi	r18, 0x00	; 0
    2820:	3f ef       	ldi	r19, 0xFF	; 255
    2822:	4f e7       	ldi	r20, 0x7F	; 127
    2824:	57 e4       	ldi	r21, 0x47	; 71
    2826:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    282a:	18 16       	cp	r1, r24
    282c:	0c f0       	brlt	.+2      	; 0x2830 <LCD_displayCharacter+0x22e>
    282e:	43 c0       	rjmp	.+134    	; 0x28b6 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2830:	fe 01       	movw	r30, r28
    2832:	ef 5a       	subi	r30, 0xAF	; 175
    2834:	ff 4f       	sbci	r31, 0xFF	; 255
    2836:	60 81       	ld	r22, Z
    2838:	71 81       	ldd	r23, Z+1	; 0x01
    283a:	82 81       	ldd	r24, Z+2	; 0x02
    283c:	93 81       	ldd	r25, Z+3	; 0x03
    283e:	20 e0       	ldi	r18, 0x00	; 0
    2840:	30 e0       	ldi	r19, 0x00	; 0
    2842:	40 e2       	ldi	r20, 0x20	; 32
    2844:	51 e4       	ldi	r21, 0x41	; 65
    2846:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    284a:	dc 01       	movw	r26, r24
    284c:	cb 01       	movw	r24, r22
    284e:	8e 01       	movw	r16, r28
    2850:	05 5b       	subi	r16, 0xB5	; 181
    2852:	1f 4f       	sbci	r17, 0xFF	; 255
    2854:	bc 01       	movw	r22, r24
    2856:	cd 01       	movw	r24, r26
    2858:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    285c:	dc 01       	movw	r26, r24
    285e:	cb 01       	movw	r24, r22
    2860:	f8 01       	movw	r30, r16
    2862:	91 83       	std	Z+1, r25	; 0x01
    2864:	80 83       	st	Z, r24
    2866:	1f c0       	rjmp	.+62     	; 0x28a6 <LCD_displayCharacter+0x2a4>
    2868:	fe 01       	movw	r30, r28
    286a:	e7 5b       	subi	r30, 0xB7	; 183
    286c:	ff 4f       	sbci	r31, 0xFF	; 255
    286e:	89 e1       	ldi	r24, 0x19	; 25
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	91 83       	std	Z+1, r25	; 0x01
    2874:	80 83       	st	Z, r24
    2876:	fe 01       	movw	r30, r28
    2878:	e7 5b       	subi	r30, 0xB7	; 183
    287a:	ff 4f       	sbci	r31, 0xFF	; 255
    287c:	80 81       	ld	r24, Z
    287e:	91 81       	ldd	r25, Z+1	; 0x01
    2880:	01 97       	sbiw	r24, 0x01	; 1
    2882:	f1 f7       	brne	.-4      	; 0x2880 <LCD_displayCharacter+0x27e>
    2884:	fe 01       	movw	r30, r28
    2886:	e7 5b       	subi	r30, 0xB7	; 183
    2888:	ff 4f       	sbci	r31, 0xFF	; 255
    288a:	91 83       	std	Z+1, r25	; 0x01
    288c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    288e:	de 01       	movw	r26, r28
    2890:	a5 5b       	subi	r26, 0xB5	; 181
    2892:	bf 4f       	sbci	r27, 0xFF	; 255
    2894:	fe 01       	movw	r30, r28
    2896:	e5 5b       	subi	r30, 0xB5	; 181
    2898:	ff 4f       	sbci	r31, 0xFF	; 255
    289a:	80 81       	ld	r24, Z
    289c:	91 81       	ldd	r25, Z+1	; 0x01
    289e:	01 97       	sbiw	r24, 0x01	; 1
    28a0:	11 96       	adiw	r26, 0x01	; 1
    28a2:	9c 93       	st	X, r25
    28a4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28a6:	fe 01       	movw	r30, r28
    28a8:	e5 5b       	subi	r30, 0xB5	; 181
    28aa:	ff 4f       	sbci	r31, 0xFF	; 255
    28ac:	80 81       	ld	r24, Z
    28ae:	91 81       	ldd	r25, Z+1	; 0x01
    28b0:	00 97       	sbiw	r24, 0x00	; 0
    28b2:	d1 f6       	brne	.-76     	; 0x2868 <LCD_displayCharacter+0x266>
    28b4:	27 c0       	rjmp	.+78     	; 0x2904 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28b6:	8e 01       	movw	r16, r28
    28b8:	05 5b       	subi	r16, 0xB5	; 181
    28ba:	1f 4f       	sbci	r17, 0xFF	; 255
    28bc:	fe 01       	movw	r30, r28
    28be:	e3 5b       	subi	r30, 0xB3	; 179
    28c0:	ff 4f       	sbci	r31, 0xFF	; 255
    28c2:	60 81       	ld	r22, Z
    28c4:	71 81       	ldd	r23, Z+1	; 0x01
    28c6:	82 81       	ldd	r24, Z+2	; 0x02
    28c8:	93 81       	ldd	r25, Z+3	; 0x03
    28ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28ce:	dc 01       	movw	r26, r24
    28d0:	cb 01       	movw	r24, r22
    28d2:	f8 01       	movw	r30, r16
    28d4:	91 83       	std	Z+1, r25	; 0x01
    28d6:	80 83       	st	Z, r24
    28d8:	de 01       	movw	r26, r28
    28da:	a9 5b       	subi	r26, 0xB9	; 185
    28dc:	bf 4f       	sbci	r27, 0xFF	; 255
    28de:	fe 01       	movw	r30, r28
    28e0:	e5 5b       	subi	r30, 0xB5	; 181
    28e2:	ff 4f       	sbci	r31, 0xFF	; 255
    28e4:	80 81       	ld	r24, Z
    28e6:	91 81       	ldd	r25, Z+1	; 0x01
    28e8:	8d 93       	st	X+, r24
    28ea:	9c 93       	st	X, r25
    28ec:	fe 01       	movw	r30, r28
    28ee:	e9 5b       	subi	r30, 0xB9	; 185
    28f0:	ff 4f       	sbci	r31, 0xFF	; 255
    28f2:	80 81       	ld	r24, Z
    28f4:	91 81       	ldd	r25, Z+1	; 0x01
    28f6:	01 97       	sbiw	r24, 0x01	; 1
    28f8:	f1 f7       	brne	.-4      	; 0x28f6 <LCD_displayCharacter+0x2f4>
    28fa:	fe 01       	movw	r30, r28
    28fc:	e9 5b       	subi	r30, 0xB9	; 185
    28fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2900:	91 83       	std	Z+1, r25	; 0x01
    2902:	80 83       	st	Z, r24
	_delay_ms(1);

	// Inserts the data in the assigned PORT to be sent to the LCD
	// Inserts the data in the assigned PORT to be sent to the LCD
	if (LCD_BIT_MODE == 4) {
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 0), GET_BIT( data, 4 ));
    2904:	fe 01       	movw	r30, r28
    2906:	ed 59       	subi	r30, 0x9D	; 157
    2908:	ff 4f       	sbci	r31, 0xFF	; 255
    290a:	80 81       	ld	r24, Z
    290c:	82 95       	swap	r24
    290e:	8f 70       	andi	r24, 0x0F	; 15
    2910:	98 2f       	mov	r25, r24
    2912:	91 70       	andi	r25, 0x01	; 1
    2914:	80 e0       	ldi	r24, 0x00	; 0
    2916:	63 e0       	ldi	r22, 0x03	; 3
    2918:	49 2f       	mov	r20, r25
    291a:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 1), GET_BIT( data, 5 ));
    291e:	fe 01       	movw	r30, r28
    2920:	ed 59       	subi	r30, 0x9D	; 157
    2922:	ff 4f       	sbci	r31, 0xFF	; 255
    2924:	80 81       	ld	r24, Z
    2926:	82 95       	swap	r24
    2928:	86 95       	lsr	r24
    292a:	87 70       	andi	r24, 0x07	; 7
    292c:	98 2f       	mov	r25, r24
    292e:	91 70       	andi	r25, 0x01	; 1
    2930:	80 e0       	ldi	r24, 0x00	; 0
    2932:	64 e0       	ldi	r22, 0x04	; 4
    2934:	49 2f       	mov	r20, r25
    2936:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 2), GET_BIT( data, 6 ));
    293a:	fe 01       	movw	r30, r28
    293c:	ed 59       	subi	r30, 0x9D	; 157
    293e:	ff 4f       	sbci	r31, 0xFF	; 255
    2940:	80 81       	ld	r24, Z
    2942:	82 95       	swap	r24
    2944:	86 95       	lsr	r24
    2946:	86 95       	lsr	r24
    2948:	83 70       	andi	r24, 0x03	; 3
    294a:	98 2f       	mov	r25, r24
    294c:	91 70       	andi	r25, 0x01	; 1
    294e:	80 e0       	ldi	r24, 0x00	; 0
    2950:	65 e0       	ldi	r22, 0x05	; 5
    2952:	49 2f       	mov	r20, r25
    2954:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 3), GET_BIT( data, 7 ));
    2958:	fe 01       	movw	r30, r28
    295a:	ed 59       	subi	r30, 0x9D	; 157
    295c:	ff 4f       	sbci	r31, 0xFF	; 255
    295e:	80 81       	ld	r24, Z
    2960:	98 2f       	mov	r25, r24
    2962:	99 1f       	adc	r25, r25
    2964:	99 27       	eor	r25, r25
    2966:	99 1f       	adc	r25, r25
    2968:	80 e0       	ldi	r24, 0x00	; 0
    296a:	66 e0       	ldi	r22, 0x06	; 6
    296c:	49 2f       	mov	r20, r25
    296e:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
    2972:	fe 01       	movw	r30, r28
    2974:	ed 5b       	subi	r30, 0xBD	; 189
    2976:	ff 4f       	sbci	r31, 0xFF	; 255
    2978:	80 e0       	ldi	r24, 0x00	; 0
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	a0 e8       	ldi	r26, 0x80	; 128
    297e:	bf e3       	ldi	r27, 0x3F	; 63
    2980:	80 83       	st	Z, r24
    2982:	91 83       	std	Z+1, r25	; 0x01
    2984:	a2 83       	std	Z+2, r26	; 0x02
    2986:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2988:	8e 01       	movw	r16, r28
    298a:	01 5c       	subi	r16, 0xC1	; 193
    298c:	1f 4f       	sbci	r17, 0xFF	; 255
    298e:	fe 01       	movw	r30, r28
    2990:	ed 5b       	subi	r30, 0xBD	; 189
    2992:	ff 4f       	sbci	r31, 0xFF	; 255
    2994:	60 81       	ld	r22, Z
    2996:	71 81       	ldd	r23, Z+1	; 0x01
    2998:	82 81       	ldd	r24, Z+2	; 0x02
    299a:	93 81       	ldd	r25, Z+3	; 0x03
    299c:	20 e0       	ldi	r18, 0x00	; 0
    299e:	30 e0       	ldi	r19, 0x00	; 0
    29a0:	4a e7       	ldi	r20, 0x7A	; 122
    29a2:	53 e4       	ldi	r21, 0x43	; 67
    29a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29a8:	dc 01       	movw	r26, r24
    29aa:	cb 01       	movw	r24, r22
    29ac:	f8 01       	movw	r30, r16
    29ae:	80 83       	st	Z, r24
    29b0:	91 83       	std	Z+1, r25	; 0x01
    29b2:	a2 83       	std	Z+2, r26	; 0x02
    29b4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29b6:	fe 01       	movw	r30, r28
    29b8:	ff 96       	adiw	r30, 0x3f	; 63
    29ba:	60 81       	ld	r22, Z
    29bc:	71 81       	ldd	r23, Z+1	; 0x01
    29be:	82 81       	ldd	r24, Z+2	; 0x02
    29c0:	93 81       	ldd	r25, Z+3	; 0x03
    29c2:	20 e0       	ldi	r18, 0x00	; 0
    29c4:	30 e0       	ldi	r19, 0x00	; 0
    29c6:	40 e8       	ldi	r20, 0x80	; 128
    29c8:	5f e3       	ldi	r21, 0x3F	; 63
    29ca:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    29ce:	88 23       	and	r24, r24
    29d0:	2c f4       	brge	.+10     	; 0x29dc <LCD_displayCharacter+0x3da>
		__ticks = 1;
    29d2:	81 e0       	ldi	r24, 0x01	; 1
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	9e af       	std	Y+62, r25	; 0x3e
    29d8:	8d af       	std	Y+61, r24	; 0x3d
    29da:	46 c0       	rjmp	.+140    	; 0x2a68 <LCD_displayCharacter+0x466>
	else if (__tmp > 65535)
    29dc:	fe 01       	movw	r30, r28
    29de:	ff 96       	adiw	r30, 0x3f	; 63
    29e0:	60 81       	ld	r22, Z
    29e2:	71 81       	ldd	r23, Z+1	; 0x01
    29e4:	82 81       	ldd	r24, Z+2	; 0x02
    29e6:	93 81       	ldd	r25, Z+3	; 0x03
    29e8:	20 e0       	ldi	r18, 0x00	; 0
    29ea:	3f ef       	ldi	r19, 0xFF	; 255
    29ec:	4f e7       	ldi	r20, 0x7F	; 127
    29ee:	57 e4       	ldi	r21, 0x47	; 71
    29f0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    29f4:	18 16       	cp	r1, r24
    29f6:	64 f5       	brge	.+88     	; 0x2a50 <LCD_displayCharacter+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29f8:	fe 01       	movw	r30, r28
    29fa:	ed 5b       	subi	r30, 0xBD	; 189
    29fc:	ff 4f       	sbci	r31, 0xFF	; 255
    29fe:	60 81       	ld	r22, Z
    2a00:	71 81       	ldd	r23, Z+1	; 0x01
    2a02:	82 81       	ldd	r24, Z+2	; 0x02
    2a04:	93 81       	ldd	r25, Z+3	; 0x03
    2a06:	20 e0       	ldi	r18, 0x00	; 0
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	40 e2       	ldi	r20, 0x20	; 32
    2a0c:	51 e4       	ldi	r21, 0x41	; 65
    2a0e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a12:	dc 01       	movw	r26, r24
    2a14:	cb 01       	movw	r24, r22
    2a16:	bc 01       	movw	r22, r24
    2a18:	cd 01       	movw	r24, r26
    2a1a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a1e:	dc 01       	movw	r26, r24
    2a20:	cb 01       	movw	r24, r22
    2a22:	9e af       	std	Y+62, r25	; 0x3e
    2a24:	8d af       	std	Y+61, r24	; 0x3d
    2a26:	0f c0       	rjmp	.+30     	; 0x2a46 <LCD_displayCharacter+0x444>
    2a28:	89 e1       	ldi	r24, 0x19	; 25
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	9c af       	std	Y+60, r25	; 0x3c
    2a2e:	8b af       	std	Y+59, r24	; 0x3b
    2a30:	8b ad       	ldd	r24, Y+59	; 0x3b
    2a32:	9c ad       	ldd	r25, Y+60	; 0x3c
    2a34:	01 97       	sbiw	r24, 0x01	; 1
    2a36:	f1 f7       	brne	.-4      	; 0x2a34 <LCD_displayCharacter+0x432>
    2a38:	9c af       	std	Y+60, r25	; 0x3c
    2a3a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a3c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a3e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a40:	01 97       	sbiw	r24, 0x01	; 1
    2a42:	9e af       	std	Y+62, r25	; 0x3e
    2a44:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a46:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a48:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a4a:	00 97       	sbiw	r24, 0x00	; 0
    2a4c:	69 f7       	brne	.-38     	; 0x2a28 <LCD_displayCharacter+0x426>
    2a4e:	16 c0       	rjmp	.+44     	; 0x2a7c <LCD_displayCharacter+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a50:	fe 01       	movw	r30, r28
    2a52:	ff 96       	adiw	r30, 0x3f	; 63
    2a54:	60 81       	ld	r22, Z
    2a56:	71 81       	ldd	r23, Z+1	; 0x01
    2a58:	82 81       	ldd	r24, Z+2	; 0x02
    2a5a:	93 81       	ldd	r25, Z+3	; 0x03
    2a5c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a60:	dc 01       	movw	r26, r24
    2a62:	cb 01       	movw	r24, r22
    2a64:	9e af       	std	Y+62, r25	; 0x3e
    2a66:	8d af       	std	Y+61, r24	; 0x3d
    2a68:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a6a:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a6c:	9a af       	std	Y+58, r25	; 0x3a
    2a6e:	89 af       	std	Y+57, r24	; 0x39
    2a70:	89 ad       	ldd	r24, Y+57	; 0x39
    2a72:	9a ad       	ldd	r25, Y+58	; 0x3a
    2a74:	01 97       	sbiw	r24, 0x01	; 1
    2a76:	f1 f7       	brne	.-4      	; 0x2a74 <LCD_displayCharacter+0x472>
    2a78:	9a af       	std	Y+58, r25	; 0x3a
    2a7a:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(1);

		// Clear Enable Pin to '0'
		GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
    2a7c:	80 e0       	ldi	r24, 0x00	; 0
    2a7e:	62 e0       	ldi	r22, 0x02	; 2
    2a80:	40 e0       	ldi	r20, 0x00	; 0
    2a82:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
    2a86:	80 e0       	ldi	r24, 0x00	; 0
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	a0 e8       	ldi	r26, 0x80	; 128
    2a8c:	bf e3       	ldi	r27, 0x3F	; 63
    2a8e:	8d ab       	std	Y+53, r24	; 0x35
    2a90:	9e ab       	std	Y+54, r25	; 0x36
    2a92:	af ab       	std	Y+55, r26	; 0x37
    2a94:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a96:	6d a9       	ldd	r22, Y+53	; 0x35
    2a98:	7e a9       	ldd	r23, Y+54	; 0x36
    2a9a:	8f a9       	ldd	r24, Y+55	; 0x37
    2a9c:	98 ad       	ldd	r25, Y+56	; 0x38
    2a9e:	20 e0       	ldi	r18, 0x00	; 0
    2aa0:	30 e0       	ldi	r19, 0x00	; 0
    2aa2:	4a e7       	ldi	r20, 0x7A	; 122
    2aa4:	53 e4       	ldi	r21, 0x43	; 67
    2aa6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2aaa:	dc 01       	movw	r26, r24
    2aac:	cb 01       	movw	r24, r22
    2aae:	89 ab       	std	Y+49, r24	; 0x31
    2ab0:	9a ab       	std	Y+50, r25	; 0x32
    2ab2:	ab ab       	std	Y+51, r26	; 0x33
    2ab4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2ab6:	69 a9       	ldd	r22, Y+49	; 0x31
    2ab8:	7a a9       	ldd	r23, Y+50	; 0x32
    2aba:	8b a9       	ldd	r24, Y+51	; 0x33
    2abc:	9c a9       	ldd	r25, Y+52	; 0x34
    2abe:	20 e0       	ldi	r18, 0x00	; 0
    2ac0:	30 e0       	ldi	r19, 0x00	; 0
    2ac2:	40 e8       	ldi	r20, 0x80	; 128
    2ac4:	5f e3       	ldi	r21, 0x3F	; 63
    2ac6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2aca:	88 23       	and	r24, r24
    2acc:	2c f4       	brge	.+10     	; 0x2ad8 <LCD_displayCharacter+0x4d6>
		__ticks = 1;
    2ace:	81 e0       	ldi	r24, 0x01	; 1
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	98 ab       	std	Y+48, r25	; 0x30
    2ad4:	8f a7       	std	Y+47, r24	; 0x2f
    2ad6:	3f c0       	rjmp	.+126    	; 0x2b56 <LCD_displayCharacter+0x554>
	else if (__tmp > 65535)
    2ad8:	69 a9       	ldd	r22, Y+49	; 0x31
    2ada:	7a a9       	ldd	r23, Y+50	; 0x32
    2adc:	8b a9       	ldd	r24, Y+51	; 0x33
    2ade:	9c a9       	ldd	r25, Y+52	; 0x34
    2ae0:	20 e0       	ldi	r18, 0x00	; 0
    2ae2:	3f ef       	ldi	r19, 0xFF	; 255
    2ae4:	4f e7       	ldi	r20, 0x7F	; 127
    2ae6:	57 e4       	ldi	r21, 0x47	; 71
    2ae8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2aec:	18 16       	cp	r1, r24
    2aee:	4c f5       	brge	.+82     	; 0x2b42 <LCD_displayCharacter+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2af0:	6d a9       	ldd	r22, Y+53	; 0x35
    2af2:	7e a9       	ldd	r23, Y+54	; 0x36
    2af4:	8f a9       	ldd	r24, Y+55	; 0x37
    2af6:	98 ad       	ldd	r25, Y+56	; 0x38
    2af8:	20 e0       	ldi	r18, 0x00	; 0
    2afa:	30 e0       	ldi	r19, 0x00	; 0
    2afc:	40 e2       	ldi	r20, 0x20	; 32
    2afe:	51 e4       	ldi	r21, 0x41	; 65
    2b00:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b04:	dc 01       	movw	r26, r24
    2b06:	cb 01       	movw	r24, r22
    2b08:	bc 01       	movw	r22, r24
    2b0a:	cd 01       	movw	r24, r26
    2b0c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b10:	dc 01       	movw	r26, r24
    2b12:	cb 01       	movw	r24, r22
    2b14:	98 ab       	std	Y+48, r25	; 0x30
    2b16:	8f a7       	std	Y+47, r24	; 0x2f
    2b18:	0f c0       	rjmp	.+30     	; 0x2b38 <LCD_displayCharacter+0x536>
    2b1a:	89 e1       	ldi	r24, 0x19	; 25
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	9e a7       	std	Y+46, r25	; 0x2e
    2b20:	8d a7       	std	Y+45, r24	; 0x2d
    2b22:	8d a5       	ldd	r24, Y+45	; 0x2d
    2b24:	9e a5       	ldd	r25, Y+46	; 0x2e
    2b26:	01 97       	sbiw	r24, 0x01	; 1
    2b28:	f1 f7       	brne	.-4      	; 0x2b26 <LCD_displayCharacter+0x524>
    2b2a:	9e a7       	std	Y+46, r25	; 0x2e
    2b2c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b2e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b30:	98 a9       	ldd	r25, Y+48	; 0x30
    2b32:	01 97       	sbiw	r24, 0x01	; 1
    2b34:	98 ab       	std	Y+48, r25	; 0x30
    2b36:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b38:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b3a:	98 a9       	ldd	r25, Y+48	; 0x30
    2b3c:	00 97       	sbiw	r24, 0x00	; 0
    2b3e:	69 f7       	brne	.-38     	; 0x2b1a <LCD_displayCharacter+0x518>
    2b40:	14 c0       	rjmp	.+40     	; 0x2b6a <LCD_displayCharacter+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b42:	69 a9       	ldd	r22, Y+49	; 0x31
    2b44:	7a a9       	ldd	r23, Y+50	; 0x32
    2b46:	8b a9       	ldd	r24, Y+51	; 0x33
    2b48:	9c a9       	ldd	r25, Y+52	; 0x34
    2b4a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b4e:	dc 01       	movw	r26, r24
    2b50:	cb 01       	movw	r24, r22
    2b52:	98 ab       	std	Y+48, r25	; 0x30
    2b54:	8f a7       	std	Y+47, r24	; 0x2f
    2b56:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b58:	98 a9       	ldd	r25, Y+48	; 0x30
    2b5a:	9c a7       	std	Y+44, r25	; 0x2c
    2b5c:	8b a7       	std	Y+43, r24	; 0x2b
    2b5e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b60:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b62:	01 97       	sbiw	r24, 0x01	; 1
    2b64:	f1 f7       	brne	.-4      	; 0x2b62 <LCD_displayCharacter+0x560>
    2b66:	9c a7       	std	Y+44, r25	; 0x2c
    2b68:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1); /* delay for processing Th = 13ns */

		// Set Enable Pin to '1'
		GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
    2b6a:	80 e0       	ldi	r24, 0x00	; 0
    2b6c:	62 e0       	ldi	r22, 0x02	; 2
    2b6e:	41 e0       	ldi	r20, 0x01	; 1
    2b70:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
    2b74:	80 e0       	ldi	r24, 0x00	; 0
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	a0 e8       	ldi	r26, 0x80	; 128
    2b7a:	bf e3       	ldi	r27, 0x3F	; 63
    2b7c:	8f a3       	std	Y+39, r24	; 0x27
    2b7e:	98 a7       	std	Y+40, r25	; 0x28
    2b80:	a9 a7       	std	Y+41, r26	; 0x29
    2b82:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b84:	6f a1       	ldd	r22, Y+39	; 0x27
    2b86:	78 a5       	ldd	r23, Y+40	; 0x28
    2b88:	89 a5       	ldd	r24, Y+41	; 0x29
    2b8a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b8c:	20 e0       	ldi	r18, 0x00	; 0
    2b8e:	30 e0       	ldi	r19, 0x00	; 0
    2b90:	4a e7       	ldi	r20, 0x7A	; 122
    2b92:	53 e4       	ldi	r21, 0x43	; 67
    2b94:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b98:	dc 01       	movw	r26, r24
    2b9a:	cb 01       	movw	r24, r22
    2b9c:	8b a3       	std	Y+35, r24	; 0x23
    2b9e:	9c a3       	std	Y+36, r25	; 0x24
    2ba0:	ad a3       	std	Y+37, r26	; 0x25
    2ba2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2ba4:	6b a1       	ldd	r22, Y+35	; 0x23
    2ba6:	7c a1       	ldd	r23, Y+36	; 0x24
    2ba8:	8d a1       	ldd	r24, Y+37	; 0x25
    2baa:	9e a1       	ldd	r25, Y+38	; 0x26
    2bac:	20 e0       	ldi	r18, 0x00	; 0
    2bae:	30 e0       	ldi	r19, 0x00	; 0
    2bb0:	40 e8       	ldi	r20, 0x80	; 128
    2bb2:	5f e3       	ldi	r21, 0x3F	; 63
    2bb4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2bb8:	88 23       	and	r24, r24
    2bba:	2c f4       	brge	.+10     	; 0x2bc6 <LCD_displayCharacter+0x5c4>
		__ticks = 1;
    2bbc:	81 e0       	ldi	r24, 0x01	; 1
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	9a a3       	std	Y+34, r25	; 0x22
    2bc2:	89 a3       	std	Y+33, r24	; 0x21
    2bc4:	3f c0       	rjmp	.+126    	; 0x2c44 <LCD_displayCharacter+0x642>
	else if (__tmp > 65535)
    2bc6:	6b a1       	ldd	r22, Y+35	; 0x23
    2bc8:	7c a1       	ldd	r23, Y+36	; 0x24
    2bca:	8d a1       	ldd	r24, Y+37	; 0x25
    2bcc:	9e a1       	ldd	r25, Y+38	; 0x26
    2bce:	20 e0       	ldi	r18, 0x00	; 0
    2bd0:	3f ef       	ldi	r19, 0xFF	; 255
    2bd2:	4f e7       	ldi	r20, 0x7F	; 127
    2bd4:	57 e4       	ldi	r21, 0x47	; 71
    2bd6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2bda:	18 16       	cp	r1, r24
    2bdc:	4c f5       	brge	.+82     	; 0x2c30 <LCD_displayCharacter+0x62e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bde:	6f a1       	ldd	r22, Y+39	; 0x27
    2be0:	78 a5       	ldd	r23, Y+40	; 0x28
    2be2:	89 a5       	ldd	r24, Y+41	; 0x29
    2be4:	9a a5       	ldd	r25, Y+42	; 0x2a
    2be6:	20 e0       	ldi	r18, 0x00	; 0
    2be8:	30 e0       	ldi	r19, 0x00	; 0
    2bea:	40 e2       	ldi	r20, 0x20	; 32
    2bec:	51 e4       	ldi	r21, 0x41	; 65
    2bee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bf2:	dc 01       	movw	r26, r24
    2bf4:	cb 01       	movw	r24, r22
    2bf6:	bc 01       	movw	r22, r24
    2bf8:	cd 01       	movw	r24, r26
    2bfa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bfe:	dc 01       	movw	r26, r24
    2c00:	cb 01       	movw	r24, r22
    2c02:	9a a3       	std	Y+34, r25	; 0x22
    2c04:	89 a3       	std	Y+33, r24	; 0x21
    2c06:	0f c0       	rjmp	.+30     	; 0x2c26 <LCD_displayCharacter+0x624>
    2c08:	89 e1       	ldi	r24, 0x19	; 25
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	98 a3       	std	Y+32, r25	; 0x20
    2c0e:	8f 8f       	std	Y+31, r24	; 0x1f
    2c10:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c12:	98 a1       	ldd	r25, Y+32	; 0x20
    2c14:	01 97       	sbiw	r24, 0x01	; 1
    2c16:	f1 f7       	brne	.-4      	; 0x2c14 <LCD_displayCharacter+0x612>
    2c18:	98 a3       	std	Y+32, r25	; 0x20
    2c1a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c1c:	89 a1       	ldd	r24, Y+33	; 0x21
    2c1e:	9a a1       	ldd	r25, Y+34	; 0x22
    2c20:	01 97       	sbiw	r24, 0x01	; 1
    2c22:	9a a3       	std	Y+34, r25	; 0x22
    2c24:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c26:	89 a1       	ldd	r24, Y+33	; 0x21
    2c28:	9a a1       	ldd	r25, Y+34	; 0x22
    2c2a:	00 97       	sbiw	r24, 0x00	; 0
    2c2c:	69 f7       	brne	.-38     	; 0x2c08 <LCD_displayCharacter+0x606>
    2c2e:	14 c0       	rjmp	.+40     	; 0x2c58 <LCD_displayCharacter+0x656>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c30:	6b a1       	ldd	r22, Y+35	; 0x23
    2c32:	7c a1       	ldd	r23, Y+36	; 0x24
    2c34:	8d a1       	ldd	r24, Y+37	; 0x25
    2c36:	9e a1       	ldd	r25, Y+38	; 0x26
    2c38:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c3c:	dc 01       	movw	r26, r24
    2c3e:	cb 01       	movw	r24, r22
    2c40:	9a a3       	std	Y+34, r25	; 0x22
    2c42:	89 a3       	std	Y+33, r24	; 0x21
    2c44:	89 a1       	ldd	r24, Y+33	; 0x21
    2c46:	9a a1       	ldd	r25, Y+34	; 0x22
    2c48:	9e 8f       	std	Y+30, r25	; 0x1e
    2c4a:	8d 8f       	std	Y+29, r24	; 0x1d
    2c4c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c4e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c50:	01 97       	sbiw	r24, 0x01	; 1
    2c52:	f1 f7       	brne	.-4      	; 0x2c50 <LCD_displayCharacter+0x64e>
    2c54:	9e 8f       	std	Y+30, r25	; 0x1e
    2c56:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 0), GET_BIT( data, 0 ));
    2c58:	fe 01       	movw	r30, r28
    2c5a:	ed 59       	subi	r30, 0x9D	; 157
    2c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5e:	80 81       	ld	r24, Z
    2c60:	98 2f       	mov	r25, r24
    2c62:	91 70       	andi	r25, 0x01	; 1
    2c64:	80 e0       	ldi	r24, 0x00	; 0
    2c66:	63 e0       	ldi	r22, 0x03	; 3
    2c68:	49 2f       	mov	r20, r25
    2c6a:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 1), GET_BIT( data, 1 ));
    2c6e:	fe 01       	movw	r30, r28
    2c70:	ed 59       	subi	r30, 0x9D	; 157
    2c72:	ff 4f       	sbci	r31, 0xFF	; 255
    2c74:	80 81       	ld	r24, Z
    2c76:	86 95       	lsr	r24
    2c78:	98 2f       	mov	r25, r24
    2c7a:	91 70       	andi	r25, 0x01	; 1
    2c7c:	80 e0       	ldi	r24, 0x00	; 0
    2c7e:	64 e0       	ldi	r22, 0x04	; 4
    2c80:	49 2f       	mov	r20, r25
    2c82:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 2), GET_BIT( data, 2 ));
    2c86:	fe 01       	movw	r30, r28
    2c88:	ed 59       	subi	r30, 0x9D	; 157
    2c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8c:	80 81       	ld	r24, Z
    2c8e:	86 95       	lsr	r24
    2c90:	86 95       	lsr	r24
    2c92:	98 2f       	mov	r25, r24
    2c94:	91 70       	andi	r25, 0x01	; 1
    2c96:	80 e0       	ldi	r24, 0x00	; 0
    2c98:	65 e0       	ldi	r22, 0x05	; 5
    2c9a:	49 2f       	mov	r20, r25
    2c9c:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 3), GET_BIT( data, 3 ));
    2ca0:	fe 01       	movw	r30, r28
    2ca2:	ed 59       	subi	r30, 0x9D	; 157
    2ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca6:	80 81       	ld	r24, Z
    2ca8:	86 95       	lsr	r24
    2caa:	86 95       	lsr	r24
    2cac:	86 95       	lsr	r24
    2cae:	98 2f       	mov	r25, r24
    2cb0:	91 70       	andi	r25, 0x01	; 1
    2cb2:	80 e0       	ldi	r24, 0x00	; 0
    2cb4:	66 e0       	ldi	r22, 0x06	; 6
    2cb6:	49 2f       	mov	r20, r25
    2cb8:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
    2cbc:	80 e0       	ldi	r24, 0x00	; 0
    2cbe:	90 e0       	ldi	r25, 0x00	; 0
    2cc0:	a0 e8       	ldi	r26, 0x80	; 128
    2cc2:	bf e3       	ldi	r27, 0x3F	; 63
    2cc4:	89 8f       	std	Y+25, r24	; 0x19
    2cc6:	9a 8f       	std	Y+26, r25	; 0x1a
    2cc8:	ab 8f       	std	Y+27, r26	; 0x1b
    2cca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ccc:	69 8d       	ldd	r22, Y+25	; 0x19
    2cce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cd0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cd2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cd4:	20 e0       	ldi	r18, 0x00	; 0
    2cd6:	30 e0       	ldi	r19, 0x00	; 0
    2cd8:	4a e7       	ldi	r20, 0x7A	; 122
    2cda:	53 e4       	ldi	r21, 0x43	; 67
    2cdc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ce0:	dc 01       	movw	r26, r24
    2ce2:	cb 01       	movw	r24, r22
    2ce4:	8d 8b       	std	Y+21, r24	; 0x15
    2ce6:	9e 8b       	std	Y+22, r25	; 0x16
    2ce8:	af 8b       	std	Y+23, r26	; 0x17
    2cea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2cec:	6d 89       	ldd	r22, Y+21	; 0x15
    2cee:	7e 89       	ldd	r23, Y+22	; 0x16
    2cf0:	8f 89       	ldd	r24, Y+23	; 0x17
    2cf2:	98 8d       	ldd	r25, Y+24	; 0x18
    2cf4:	20 e0       	ldi	r18, 0x00	; 0
    2cf6:	30 e0       	ldi	r19, 0x00	; 0
    2cf8:	40 e8       	ldi	r20, 0x80	; 128
    2cfa:	5f e3       	ldi	r21, 0x3F	; 63
    2cfc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2d00:	88 23       	and	r24, r24
    2d02:	2c f4       	brge	.+10     	; 0x2d0e <LCD_displayCharacter+0x70c>
		__ticks = 1;
    2d04:	81 e0       	ldi	r24, 0x01	; 1
    2d06:	90 e0       	ldi	r25, 0x00	; 0
    2d08:	9c 8b       	std	Y+20, r25	; 0x14
    2d0a:	8b 8b       	std	Y+19, r24	; 0x13
    2d0c:	3f c0       	rjmp	.+126    	; 0x2d8c <LCD_displayCharacter+0x78a>
	else if (__tmp > 65535)
    2d0e:	6d 89       	ldd	r22, Y+21	; 0x15
    2d10:	7e 89       	ldd	r23, Y+22	; 0x16
    2d12:	8f 89       	ldd	r24, Y+23	; 0x17
    2d14:	98 8d       	ldd	r25, Y+24	; 0x18
    2d16:	20 e0       	ldi	r18, 0x00	; 0
    2d18:	3f ef       	ldi	r19, 0xFF	; 255
    2d1a:	4f e7       	ldi	r20, 0x7F	; 127
    2d1c:	57 e4       	ldi	r21, 0x47	; 71
    2d1e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2d22:	18 16       	cp	r1, r24
    2d24:	4c f5       	brge	.+82     	; 0x2d78 <LCD_displayCharacter+0x776>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d26:	69 8d       	ldd	r22, Y+25	; 0x19
    2d28:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d2a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d2c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d2e:	20 e0       	ldi	r18, 0x00	; 0
    2d30:	30 e0       	ldi	r19, 0x00	; 0
    2d32:	40 e2       	ldi	r20, 0x20	; 32
    2d34:	51 e4       	ldi	r21, 0x41	; 65
    2d36:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d3a:	dc 01       	movw	r26, r24
    2d3c:	cb 01       	movw	r24, r22
    2d3e:	bc 01       	movw	r22, r24
    2d40:	cd 01       	movw	r24, r26
    2d42:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d46:	dc 01       	movw	r26, r24
    2d48:	cb 01       	movw	r24, r22
    2d4a:	9c 8b       	std	Y+20, r25	; 0x14
    2d4c:	8b 8b       	std	Y+19, r24	; 0x13
    2d4e:	0f c0       	rjmp	.+30     	; 0x2d6e <LCD_displayCharacter+0x76c>
    2d50:	89 e1       	ldi	r24, 0x19	; 25
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	9a 8b       	std	Y+18, r25	; 0x12
    2d56:	89 8b       	std	Y+17, r24	; 0x11
    2d58:	89 89       	ldd	r24, Y+17	; 0x11
    2d5a:	9a 89       	ldd	r25, Y+18	; 0x12
    2d5c:	01 97       	sbiw	r24, 0x01	; 1
    2d5e:	f1 f7       	brne	.-4      	; 0x2d5c <LCD_displayCharacter+0x75a>
    2d60:	9a 8b       	std	Y+18, r25	; 0x12
    2d62:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d64:	8b 89       	ldd	r24, Y+19	; 0x13
    2d66:	9c 89       	ldd	r25, Y+20	; 0x14
    2d68:	01 97       	sbiw	r24, 0x01	; 1
    2d6a:	9c 8b       	std	Y+20, r25	; 0x14
    2d6c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d6e:	8b 89       	ldd	r24, Y+19	; 0x13
    2d70:	9c 89       	ldd	r25, Y+20	; 0x14
    2d72:	00 97       	sbiw	r24, 0x00	; 0
    2d74:	69 f7       	brne	.-38     	; 0x2d50 <LCD_displayCharacter+0x74e>
    2d76:	14 c0       	rjmp	.+40     	; 0x2da0 <LCD_displayCharacter+0x79e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d78:	6d 89       	ldd	r22, Y+21	; 0x15
    2d7a:	7e 89       	ldd	r23, Y+22	; 0x16
    2d7c:	8f 89       	ldd	r24, Y+23	; 0x17
    2d7e:	98 8d       	ldd	r25, Y+24	; 0x18
    2d80:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d84:	dc 01       	movw	r26, r24
    2d86:	cb 01       	movw	r24, r22
    2d88:	9c 8b       	std	Y+20, r25	; 0x14
    2d8a:	8b 8b       	std	Y+19, r24	; 0x13
    2d8c:	8b 89       	ldd	r24, Y+19	; 0x13
    2d8e:	9c 89       	ldd	r25, Y+20	; 0x14
    2d90:	98 8b       	std	Y+16, r25	; 0x10
    2d92:	8f 87       	std	Y+15, r24	; 0x0f
    2d94:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d96:	98 89       	ldd	r25, Y+16	; 0x10
    2d98:	01 97       	sbiw	r24, 0x01	; 1
    2d9a:	f1 f7       	brne	.-4      	; 0x2d98 <LCD_displayCharacter+0x796>
    2d9c:	98 8b       	std	Y+16, r25	; 0x10
    2d9e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1); /* delay for processing Tdsw = 100ns */

		// Clear Enable Pin to '0'
		GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
    2da0:	80 e0       	ldi	r24, 0x00	; 0
    2da2:	62 e0       	ldi	r22, 0x02	; 2
    2da4:	40 e0       	ldi	r20, 0x00	; 0
    2da6:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>
    2daa:	80 e0       	ldi	r24, 0x00	; 0
    2dac:	90 e0       	ldi	r25, 0x00	; 0
    2dae:	a0 e8       	ldi	r26, 0x80	; 128
    2db0:	bf e3       	ldi	r27, 0x3F	; 63
    2db2:	8b 87       	std	Y+11, r24	; 0x0b
    2db4:	9c 87       	std	Y+12, r25	; 0x0c
    2db6:	ad 87       	std	Y+13, r26	; 0x0d
    2db8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dba:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dbc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dc2:	20 e0       	ldi	r18, 0x00	; 0
    2dc4:	30 e0       	ldi	r19, 0x00	; 0
    2dc6:	4a e7       	ldi	r20, 0x7A	; 122
    2dc8:	53 e4       	ldi	r21, 0x43	; 67
    2dca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2dce:	dc 01       	movw	r26, r24
    2dd0:	cb 01       	movw	r24, r22
    2dd2:	8f 83       	std	Y+7, r24	; 0x07
    2dd4:	98 87       	std	Y+8, r25	; 0x08
    2dd6:	a9 87       	std	Y+9, r26	; 0x09
    2dd8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2dda:	6f 81       	ldd	r22, Y+7	; 0x07
    2ddc:	78 85       	ldd	r23, Y+8	; 0x08
    2dde:	89 85       	ldd	r24, Y+9	; 0x09
    2de0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2de2:	20 e0       	ldi	r18, 0x00	; 0
    2de4:	30 e0       	ldi	r19, 0x00	; 0
    2de6:	40 e8       	ldi	r20, 0x80	; 128
    2de8:	5f e3       	ldi	r21, 0x3F	; 63
    2dea:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2dee:	88 23       	and	r24, r24
    2df0:	2c f4       	brge	.+10     	; 0x2dfc <LCD_displayCharacter+0x7fa>
		__ticks = 1;
    2df2:	81 e0       	ldi	r24, 0x01	; 1
    2df4:	90 e0       	ldi	r25, 0x00	; 0
    2df6:	9e 83       	std	Y+6, r25	; 0x06
    2df8:	8d 83       	std	Y+5, r24	; 0x05
    2dfa:	3f c0       	rjmp	.+126    	; 0x2e7a <LCD_displayCharacter+0x878>
	else if (__tmp > 65535)
    2dfc:	6f 81       	ldd	r22, Y+7	; 0x07
    2dfe:	78 85       	ldd	r23, Y+8	; 0x08
    2e00:	89 85       	ldd	r24, Y+9	; 0x09
    2e02:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e04:	20 e0       	ldi	r18, 0x00	; 0
    2e06:	3f ef       	ldi	r19, 0xFF	; 255
    2e08:	4f e7       	ldi	r20, 0x7F	; 127
    2e0a:	57 e4       	ldi	r21, 0x47	; 71
    2e0c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2e10:	18 16       	cp	r1, r24
    2e12:	4c f5       	brge	.+82     	; 0x2e66 <LCD_displayCharacter+0x864>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e14:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e16:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e18:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e1c:	20 e0       	ldi	r18, 0x00	; 0
    2e1e:	30 e0       	ldi	r19, 0x00	; 0
    2e20:	40 e2       	ldi	r20, 0x20	; 32
    2e22:	51 e4       	ldi	r21, 0x41	; 65
    2e24:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e28:	dc 01       	movw	r26, r24
    2e2a:	cb 01       	movw	r24, r22
    2e2c:	bc 01       	movw	r22, r24
    2e2e:	cd 01       	movw	r24, r26
    2e30:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e34:	dc 01       	movw	r26, r24
    2e36:	cb 01       	movw	r24, r22
    2e38:	9e 83       	std	Y+6, r25	; 0x06
    2e3a:	8d 83       	std	Y+5, r24	; 0x05
    2e3c:	0f c0       	rjmp	.+30     	; 0x2e5c <LCD_displayCharacter+0x85a>
    2e3e:	89 e1       	ldi	r24, 0x19	; 25
    2e40:	90 e0       	ldi	r25, 0x00	; 0
    2e42:	9c 83       	std	Y+4, r25	; 0x04
    2e44:	8b 83       	std	Y+3, r24	; 0x03
    2e46:	8b 81       	ldd	r24, Y+3	; 0x03
    2e48:	9c 81       	ldd	r25, Y+4	; 0x04
    2e4a:	01 97       	sbiw	r24, 0x01	; 1
    2e4c:	f1 f7       	brne	.-4      	; 0x2e4a <LCD_displayCharacter+0x848>
    2e4e:	9c 83       	std	Y+4, r25	; 0x04
    2e50:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e52:	8d 81       	ldd	r24, Y+5	; 0x05
    2e54:	9e 81       	ldd	r25, Y+6	; 0x06
    2e56:	01 97       	sbiw	r24, 0x01	; 1
    2e58:	9e 83       	std	Y+6, r25	; 0x06
    2e5a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e5c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e5e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e60:	00 97       	sbiw	r24, 0x00	; 0
    2e62:	69 f7       	brne	.-38     	; 0x2e3e <LCD_displayCharacter+0x83c>
    2e64:	14 c0       	rjmp	.+40     	; 0x2e8e <LCD_displayCharacter+0x88c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e66:	6f 81       	ldd	r22, Y+7	; 0x07
    2e68:	78 85       	ldd	r23, Y+8	; 0x08
    2e6a:	89 85       	ldd	r24, Y+9	; 0x09
    2e6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e6e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e72:	dc 01       	movw	r26, r24
    2e74:	cb 01       	movw	r24, r22
    2e76:	9e 83       	std	Y+6, r25	; 0x06
    2e78:	8d 83       	std	Y+5, r24	; 0x05
    2e7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e7c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e7e:	9a 83       	std	Y+2, r25	; 0x02
    2e80:	89 83       	std	Y+1, r24	; 0x01
    2e82:	89 81       	ldd	r24, Y+1	; 0x01
    2e84:	9a 81       	ldd	r25, Y+2	; 0x02
    2e86:	01 97       	sbiw	r24, 0x01	; 1
    2e88:	f1 f7       	brne	.-4      	; 0x2e86 <LCD_displayCharacter+0x884>
    2e8a:	9a 83       	std	Y+2, r25	; 0x02
    2e8c:	89 83       	std	Y+1, r24	; 0x01

		// Clear Enable Pin to '0'
		GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
		_delay_ms(1); /* delay for processing Th = 13ns */
	}
}
    2e8e:	cd 59       	subi	r28, 0x9D	; 157
    2e90:	df 4f       	sbci	r29, 0xFF	; 255
    2e92:	0f b6       	in	r0, 0x3f	; 63
    2e94:	f8 94       	cli
    2e96:	de bf       	out	0x3e, r29	; 62
    2e98:	0f be       	out	0x3f, r0	; 63
    2e9a:	cd bf       	out	0x3d, r28	; 61
    2e9c:	cf 91       	pop	r28
    2e9e:	df 91       	pop	r29
    2ea0:	1f 91       	pop	r17
    2ea2:	0f 91       	pop	r16
    2ea4:	08 95       	ret

00002ea6 <LCD_displayString>:


// Displays a string on the LCD
void LCD_displayString(const char *str) {
    2ea6:	df 93       	push	r29
    2ea8:	cf 93       	push	r28
    2eaa:	00 d0       	rcall	.+0      	; 0x2eac <LCD_displayString+0x6>
    2eac:	0f 92       	push	r0
    2eae:	cd b7       	in	r28, 0x3d	; 61
    2eb0:	de b7       	in	r29, 0x3e	; 62
    2eb2:	9b 83       	std	Y+3, r25	; 0x03
    2eb4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2eb6:	19 82       	std	Y+1, r1	; 0x01
    2eb8:	0e c0       	rjmp	.+28     	; 0x2ed6 <LCD_displayString+0x30>
	while(str[i] != '\0') {
		LCD_displayCharacter(str[i]);
    2eba:	89 81       	ldd	r24, Y+1	; 0x01
    2ebc:	28 2f       	mov	r18, r24
    2ebe:	30 e0       	ldi	r19, 0x00	; 0
    2ec0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ec2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ec4:	fc 01       	movw	r30, r24
    2ec6:	e2 0f       	add	r30, r18
    2ec8:	f3 1f       	adc	r31, r19
    2eca:	80 81       	ld	r24, Z
    2ecc:	0e 94 01 13 	call	0x2602	; 0x2602 <LCD_displayCharacter>
		i++;
    2ed0:	89 81       	ldd	r24, Y+1	; 0x01
    2ed2:	8f 5f       	subi	r24, 0xFF	; 255
    2ed4:	89 83       	std	Y+1, r24	; 0x01


// Displays a string on the LCD
void LCD_displayString(const char *str) {
	uint8 i = 0;
	while(str[i] != '\0') {
    2ed6:	89 81       	ldd	r24, Y+1	; 0x01
    2ed8:	28 2f       	mov	r18, r24
    2eda:	30 e0       	ldi	r19, 0x00	; 0
    2edc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ede:	9b 81       	ldd	r25, Y+3	; 0x03
    2ee0:	fc 01       	movw	r30, r24
    2ee2:	e2 0f       	add	r30, r18
    2ee4:	f3 1f       	adc	r31, r19
    2ee6:	80 81       	ld	r24, Z
    2ee8:	88 23       	and	r24, r24
    2eea:	39 f7       	brne	.-50     	; 0x2eba <LCD_displayString+0x14>
	}
	/*
	for (int i = 0 ; i < strlen(str) ; i++) {
		LCD_displayCharacters(str[i]);
	}*/
}
    2eec:	0f 90       	pop	r0
    2eee:	0f 90       	pop	r0
    2ef0:	0f 90       	pop	r0
    2ef2:	cf 91       	pop	r28
    2ef4:	df 91       	pop	r29
    2ef6:	08 95       	ret

00002ef8 <LCD_moveCursor>:


// Chooses where the cursor would stand on the LCD to type from it
void LCD_moveCursor(uint8 row, uint8 col) {
    2ef8:	df 93       	push	r29
    2efa:	cf 93       	push	r28
    2efc:	00 d0       	rcall	.+0      	; 0x2efe <LCD_moveCursor+0x6>
    2efe:	00 d0       	rcall	.+0      	; 0x2f00 <LCD_moveCursor+0x8>
    2f00:	0f 92       	push	r0
    2f02:	cd b7       	in	r28, 0x3d	; 61
    2f04:	de b7       	in	r29, 0x3e	; 62
    2f06:	8a 83       	std	Y+2, r24	; 0x02
    2f08:	6b 83       	std	Y+3, r22	; 0x03
	uint8 LCD_MEMORY_ADDRESS;

	// Calculate the required address in the LCD DDRAM checking
	// The location of the cursor originally on which line
	switch(row) {
    2f0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f0c:	28 2f       	mov	r18, r24
    2f0e:	30 e0       	ldi	r19, 0x00	; 0
    2f10:	3d 83       	std	Y+5, r19	; 0x05
    2f12:	2c 83       	std	Y+4, r18	; 0x04
    2f14:	8c 81       	ldd	r24, Y+4	; 0x04
    2f16:	9d 81       	ldd	r25, Y+5	; 0x05
    2f18:	81 30       	cpi	r24, 0x01	; 1
    2f1a:	91 05       	cpc	r25, r1
    2f1c:	c1 f0       	breq	.+48     	; 0x2f4e <LCD_moveCursor+0x56>
    2f1e:	2c 81       	ldd	r18, Y+4	; 0x04
    2f20:	3d 81       	ldd	r19, Y+5	; 0x05
    2f22:	22 30       	cpi	r18, 0x02	; 2
    2f24:	31 05       	cpc	r19, r1
    2f26:	2c f4       	brge	.+10     	; 0x2f32 <LCD_moveCursor+0x3a>
    2f28:	8c 81       	ldd	r24, Y+4	; 0x04
    2f2a:	9d 81       	ldd	r25, Y+5	; 0x05
    2f2c:	00 97       	sbiw	r24, 0x00	; 0
    2f2e:	61 f0       	breq	.+24     	; 0x2f48 <LCD_moveCursor+0x50>
    2f30:	19 c0       	rjmp	.+50     	; 0x2f64 <LCD_moveCursor+0x6c>
    2f32:	2c 81       	ldd	r18, Y+4	; 0x04
    2f34:	3d 81       	ldd	r19, Y+5	; 0x05
    2f36:	22 30       	cpi	r18, 0x02	; 2
    2f38:	31 05       	cpc	r19, r1
    2f3a:	69 f0       	breq	.+26     	; 0x2f56 <LCD_moveCursor+0x5e>
    2f3c:	8c 81       	ldd	r24, Y+4	; 0x04
    2f3e:	9d 81       	ldd	r25, Y+5	; 0x05
    2f40:	83 30       	cpi	r24, 0x03	; 3
    2f42:	91 05       	cpc	r25, r1
    2f44:	61 f0       	breq	.+24     	; 0x2f5e <LCD_moveCursor+0x66>
    2f46:	0e c0       	rjmp	.+28     	; 0x2f64 <LCD_moveCursor+0x6c>
		case 0:
			LCD_MEMORY_ADDRESS = col;
    2f48:	8b 81       	ldd	r24, Y+3	; 0x03
    2f4a:	89 83       	std	Y+1, r24	; 0x01
    2f4c:	0b c0       	rjmp	.+22     	; 0x2f64 <LCD_moveCursor+0x6c>
				break;
		case 1:
			LCD_MEMORY_ADDRESS = col + 0x40;
    2f4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f50:	80 5c       	subi	r24, 0xC0	; 192
    2f52:	89 83       	std	Y+1, r24	; 0x01
    2f54:	07 c0       	rjmp	.+14     	; 0x2f64 <LCD_moveCursor+0x6c>
				break;
		case 2:
			LCD_MEMORY_ADDRESS = col + 0x10;
    2f56:	8b 81       	ldd	r24, Y+3	; 0x03
    2f58:	80 5f       	subi	r24, 0xF0	; 240
    2f5a:	89 83       	std	Y+1, r24	; 0x01
    2f5c:	03 c0       	rjmp	.+6      	; 0x2f64 <LCD_moveCursor+0x6c>
				break;
		case 3:
			LCD_MEMORY_ADDRESS = col + 0x50;
    2f5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f60:	80 5b       	subi	r24, 0xB0	; 176
    2f62:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(LCD_MEMORY_ADDRESS | LCD_CURSOR_LOCATION);
    2f64:	89 81       	ldd	r24, Y+1	; 0x01
    2f66:	80 68       	ori	r24, 0x80	; 128
    2f68:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <LCD_sendCommand>
}
    2f6c:	0f 90       	pop	r0
    2f6e:	0f 90       	pop	r0
    2f70:	0f 90       	pop	r0
    2f72:	0f 90       	pop	r0
    2f74:	0f 90       	pop	r0
    2f76:	cf 91       	pop	r28
    2f78:	df 91       	pop	r29
    2f7a:	08 95       	ret

00002f7c <LCD_displayStringRowColumn>:


// Displays a string on the LCD at a chosen cursor and row
void LCD_displayStringRowColumn(uint8 row, uint8 col, const char *Str) {
    2f7c:	df 93       	push	r29
    2f7e:	cf 93       	push	r28
    2f80:	00 d0       	rcall	.+0      	; 0x2f82 <LCD_displayStringRowColumn+0x6>
    2f82:	00 d0       	rcall	.+0      	; 0x2f84 <LCD_displayStringRowColumn+0x8>
    2f84:	cd b7       	in	r28, 0x3d	; 61
    2f86:	de b7       	in	r29, 0x3e	; 62
    2f88:	89 83       	std	Y+1, r24	; 0x01
    2f8a:	6a 83       	std	Y+2, r22	; 0x02
    2f8c:	5c 83       	std	Y+4, r21	; 0x04
    2f8e:	4b 83       	std	Y+3, r20	; 0x03
	// Go to to the required LCD position
	LCD_moveCursor(row, col);
    2f90:	89 81       	ldd	r24, Y+1	; 0x01
    2f92:	6a 81       	ldd	r22, Y+2	; 0x02
    2f94:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <LCD_moveCursor>

	// Display the string from the cursor
	LCD_displayString(Str);
    2f98:	8b 81       	ldd	r24, Y+3	; 0x03
    2f9a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f9c:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <LCD_displayString>
}
    2fa0:	0f 90       	pop	r0
    2fa2:	0f 90       	pop	r0
    2fa4:	0f 90       	pop	r0
    2fa6:	0f 90       	pop	r0
    2fa8:	cf 91       	pop	r28
    2faa:	df 91       	pop	r29
    2fac:	08 95       	ret

00002fae <LCD_intgerToString>:

// LCD only understands ASCII, so this converts Int to a string
void LCD_intgerToString(int data) {
    2fae:	df 93       	push	r29
    2fb0:	cf 93       	push	r28
    2fb2:	cd b7       	in	r28, 0x3d	; 61
    2fb4:	de b7       	in	r29, 0x3e	; 62
    2fb6:	62 97       	sbiw	r28, 0x12	; 18
    2fb8:	0f b6       	in	r0, 0x3f	; 63
    2fba:	f8 94       	cli
    2fbc:	de bf       	out	0x3e, r29	; 62
    2fbe:	0f be       	out	0x3f, r0	; 63
    2fc0:	cd bf       	out	0x3d, r28	; 61
    2fc2:	9a 8b       	std	Y+18, r25	; 0x12
    2fc4:	89 8b       	std	Y+17, r24	; 0x11
	// A string to hold the ASCII values
	char buffer[16];

	// Converts data to its ASCII
	itoa(data, buffer, 10);
    2fc6:	89 89       	ldd	r24, Y+17	; 0x11
    2fc8:	9a 89       	ldd	r25, Y+18	; 0x12
    2fca:	9e 01       	movw	r18, r28
    2fcc:	2f 5f       	subi	r18, 0xFF	; 255
    2fce:	3f 4f       	sbci	r19, 0xFF	; 255
    2fd0:	b9 01       	movw	r22, r18
    2fd2:	4a e0       	ldi	r20, 0x0A	; 10
    2fd4:	50 e0       	ldi	r21, 0x00	; 0
    2fd6:	0e 94 38 19 	call	0x3270	; 0x3270 <itoa>

	// Display string with the results in the buffer
	LCD_displayString(buffer);
    2fda:	ce 01       	movw	r24, r28
    2fdc:	01 96       	adiw	r24, 0x01	; 1
    2fde:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <LCD_displayString>
}
    2fe2:	62 96       	adiw	r28, 0x12	; 18
    2fe4:	0f b6       	in	r0, 0x3f	; 63
    2fe6:	f8 94       	cli
    2fe8:	de bf       	out	0x3e, r29	; 62
    2fea:	0f be       	out	0x3f, r0	; 63
    2fec:	cd bf       	out	0x3d, r28	; 61
    2fee:	cf 91       	pop	r28
    2ff0:	df 91       	pop	r29
    2ff2:	08 95       	ret

00002ff4 <LCD_clearScreen>:

// Clears the LCD from any garbage
void LCD_clearScreen(void) {
    2ff4:	df 93       	push	r29
    2ff6:	cf 93       	push	r28
    2ff8:	cd b7       	in	r28, 0x3d	; 61
    2ffa:	de b7       	in	r29, 0x3e	; 62
	// Clears the LCD Display
	LCD_sendCommand(LCD_CLEAR_DISPLAY);
    2ffc:	81 e0       	ldi	r24, 0x01	; 1
    2ffe:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <LCD_sendCommand>
}
    3002:	cf 91       	pop	r28
    3004:	df 91       	pop	r29
    3006:	08 95       	ret

00003008 <KEYPAD_Init>:
	#endif

#endif /* STD_KEYPAD */


void KEYPAD_Init(void) {
    3008:	df 93       	push	r29
    300a:	cf 93       	push	r28
    300c:	cd b7       	in	r28, 0x3d	; 61
    300e:	de b7       	in	r29, 0x3e	; 62
		/* Setup PORT and PINS for for KEYPAD Rows*/
		GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN, PIN_INPUT);
    3010:	81 e0       	ldi	r24, 0x01	; 1
    3012:	64 e0       	ldi	r22, 0x04	; 4
    3014:	40 e0       	ldi	r20, 0x00	; 0
    3016:	0e 94 79 07 	call	0xef2	; 0xef2 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN+1, PIN_INPUT);
    301a:	81 e0       	ldi	r24, 0x01	; 1
    301c:	65 e0       	ldi	r22, 0x05	; 5
    301e:	40 e0       	ldi	r20, 0x00	; 0
    3020:	0e 94 79 07 	call	0xef2	; 0xef2 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN+2, PIN_INPUT);
    3024:	81 e0       	ldi	r24, 0x01	; 1
    3026:	66 e0       	ldi	r22, 0x06	; 6
    3028:	40 e0       	ldi	r20, 0x00	; 0
    302a:	0e 94 79 07 	call	0xef2	; 0xef2 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN+3, PIN_INPUT);
    302e:	81 e0       	ldi	r24, 0x01	; 1
    3030:	67 e0       	ldi	r22, 0x07	; 7
    3032:	40 e0       	ldi	r20, 0x00	; 0
    3034:	0e 94 79 07 	call	0xef2	; 0xef2 <GPIO_setupPinDirection>

		/* Setup PORT and PINS for for KEYPAD Columns*/
		GPIO_setupPinDirection(KEYPAD_COL_PORT, KEYPAD_FIRSTCOL_PIN, PIN_INPUT);
    3038:	81 e0       	ldi	r24, 0x01	; 1
    303a:	60 e0       	ldi	r22, 0x00	; 0
    303c:	40 e0       	ldi	r20, 0x00	; 0
    303e:	0e 94 79 07 	call	0xef2	; 0xef2 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(KEYPAD_COL_PORT, KEYPAD_FIRSTCOL_PIN+1, PIN_INPUT);
    3042:	81 e0       	ldi	r24, 0x01	; 1
    3044:	61 e0       	ldi	r22, 0x01	; 1
    3046:	40 e0       	ldi	r20, 0x00	; 0
    3048:	0e 94 79 07 	call	0xef2	; 0xef2 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(KEYPAD_COL_PORT, KEYPAD_FIRSTCOL_PIN+2, PIN_INPUT);
    304c:	81 e0       	ldi	r24, 0x01	; 1
    304e:	62 e0       	ldi	r22, 0x02	; 2
    3050:	40 e0       	ldi	r20, 0x00	; 0
    3052:	0e 94 79 07 	call	0xef2	; 0xef2 <GPIO_setupPinDirection>

		#if(KEYPAD_COL_NUM == 4)
			GPIO_setupPinDirection(KEYPAD_COL_PORT, KEYPAD_FIRSTCOL_PIN+3, PIN_INPUT);
		#endif
}
    3056:	cf 91       	pop	r28
    3058:	df 91       	pop	r29
    305a:	08 95       	ret

0000305c <KEYPAD_getPressedKey>:


uint8 KEYPAD_getPressedKey(void) {
    305c:	df 93       	push	r29
    305e:	cf 93       	push	r28
    3060:	00 d0       	rcall	.+0      	; 0x3062 <KEYPAD_getPressedKey+0x6>
    3062:	cd b7       	in	r28, 0x3d	; 61
    3064:	de b7       	in	r29, 0x3e	; 62
	uint8 row, col;
	while(1) {
			for (row = 0 ; row < KEYPAD_ROW_NUM ; row++) {
    3066:	1a 82       	std	Y+2, r1	; 0x02
    3068:	3a c0       	rjmp	.+116    	; 0x30de <KEYPAD_getPressedKey+0x82>
				// I set the pin by '1' for the row, and will iterate
				GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, PIN_OUTPUT);
    306a:	8a 81       	ldd	r24, Y+2	; 0x02
    306c:	98 2f       	mov	r25, r24
    306e:	9c 5f       	subi	r25, 0xFC	; 252
    3070:	81 e0       	ldi	r24, 0x01	; 1
    3072:	69 2f       	mov	r22, r25
    3074:	41 e0       	ldi	r20, 0x01	; 1
    3076:	0e 94 79 07 	call	0xef2	; 0xef2 <GPIO_setupPinDirection>

				/* Set/Clear the row output pin */
				GPIO_writePin(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, KEYPAD_BUTTON_PRESSED);
    307a:	8a 81       	ldd	r24, Y+2	; 0x02
    307c:	98 2f       	mov	r25, r24
    307e:	9c 5f       	subi	r25, 0xFC	; 252
    3080:	81 e0       	ldi	r24, 0x01	; 1
    3082:	69 2f       	mov	r22, r25
    3084:	40 e0       	ldi	r20, 0x00	; 0
    3086:	0e 94 75 08 	call	0x10ea	; 0x10ea <GPIO_writePin>

				for (col = 0 ; col < KEYPAD_COL_NUM ; col++) {
    308a:	19 82       	std	Y+1, r1	; 0x01
    308c:	1a c0       	rjmp	.+52     	; 0x30c2 <KEYPAD_getPressedKey+0x66>
					/* Check if the switch is pressed in this column */
					if(GPIO_readPin(KEYPAD_COL_PORT,KEYPAD_FIRSTCOL_PIN + col) == KEYPAD_BUTTON_PRESSED) {
    308e:	81 e0       	ldi	r24, 0x01	; 1
    3090:	69 81       	ldd	r22, Y+1	; 0x01
    3092:	0e 94 ff 09 	call	0x13fe	; 0x13fe <GPIO_readPin>
    3096:	88 23       	and	r24, r24
    3098:	89 f4       	brne	.+34     	; 0x30bc <KEYPAD_getPressedKey+0x60>
						#if (KEYPAD_COL_NUM == 3)
							#ifdef STD_KEYPAD
								return ( (row * KEYPAD_COL_NUM) + col + 1);
    309a:	8a 81       	ldd	r24, Y+2	; 0x02
    309c:	28 2f       	mov	r18, r24
    309e:	30 e0       	ldi	r19, 0x00	; 0
    30a0:	c9 01       	movw	r24, r18
    30a2:	88 0f       	add	r24, r24
    30a4:	99 1f       	adc	r25, r25
    30a6:	82 0f       	add	r24, r18
    30a8:	93 1f       	adc	r25, r19
    30aa:	98 2f       	mov	r25, r24
    30ac:	89 81       	ldd	r24, Y+1	; 0x01
    30ae:	89 0f       	add	r24, r25
    30b0:	8f 5f       	subi	r24, 0xFF	; 255
					}
				}
				GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, PIN_INPUT);
			}
		}
}
    30b2:	0f 90       	pop	r0
    30b4:	0f 90       	pop	r0
    30b6:	cf 91       	pop	r28
    30b8:	df 91       	pop	r29
    30ba:	08 95       	ret
				GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, PIN_OUTPUT);

				/* Set/Clear the row output pin */
				GPIO_writePin(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, KEYPAD_BUTTON_PRESSED);

				for (col = 0 ; col < KEYPAD_COL_NUM ; col++) {
    30bc:	89 81       	ldd	r24, Y+1	; 0x01
    30be:	8f 5f       	subi	r24, 0xFF	; 255
    30c0:	89 83       	std	Y+1, r24	; 0x01
    30c2:	89 81       	ldd	r24, Y+1	; 0x01
    30c4:	83 30       	cpi	r24, 0x03	; 3
    30c6:	18 f3       	brcs	.-58     	; 0x308e <KEYPAD_getPressedKey+0x32>
								return KEYPAD_4x4_adjustKeyNumber( (row * KEYPAD_COL_NUM) + col + 1);
							#endif
						#endif
					}
				}
				GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, PIN_INPUT);
    30c8:	8a 81       	ldd	r24, Y+2	; 0x02
    30ca:	98 2f       	mov	r25, r24
    30cc:	9c 5f       	subi	r25, 0xFC	; 252
    30ce:	81 e0       	ldi	r24, 0x01	; 1
    30d0:	69 2f       	mov	r22, r25
    30d2:	40 e0       	ldi	r20, 0x00	; 0
    30d4:	0e 94 79 07 	call	0xef2	; 0xef2 <GPIO_setupPinDirection>


uint8 KEYPAD_getPressedKey(void) {
	uint8 row, col;
	while(1) {
			for (row = 0 ; row < KEYPAD_ROW_NUM ; row++) {
    30d8:	8a 81       	ldd	r24, Y+2	; 0x02
    30da:	8f 5f       	subi	r24, 0xFF	; 255
    30dc:	8a 83       	std	Y+2, r24	; 0x02
    30de:	8a 81       	ldd	r24, Y+2	; 0x02
    30e0:	84 30       	cpi	r24, 0x04	; 4
    30e2:	18 f2       	brcs	.-122    	; 0x306a <KEYPAD_getPressedKey+0xe>
    30e4:	c0 cf       	rjmp	.-128    	; 0x3066 <KEYPAD_getPressedKey+0xa>

000030e6 <BUTTON_Init>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
BUTTON_Error_t BUTTON_Init(uint8 port_num, uint8 pin_num) {
    30e6:	df 93       	push	r29
    30e8:	cf 93       	push	r28
    30ea:	00 d0       	rcall	.+0      	; 0x30ec <BUTTON_Init+0x6>
    30ec:	0f 92       	push	r0
    30ee:	cd b7       	in	r28, 0x3d	; 61
    30f0:	de b7       	in	r29, 0x3e	; 62
    30f2:	8a 83       	std	Y+2, r24	; 0x02
    30f4:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t BUTTON_Driver_Checker = NULL;
    30f6:	19 82       	std	Y+1, r1	; 0x01
	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    30f8:	8b 81       	ldd	r24, Y+3	; 0x03
    30fa:	88 30       	cpi	r24, 0x08	; 8
    30fc:	18 f0       	brcs	.+6      	; 0x3104 <BUTTON_Init+0x1e>
		BUTTON_Driver_Checker = BUTTON_WRONG_PIN_NUMBER;
    30fe:	81 e0       	ldi	r24, 0x01	; 1
    3100:	89 83       	std	Y+1, r24	; 0x01
    3102:	0c c0       	rjmp	.+24     	; 0x311c <BUTTON_Init+0x36>
	}
	else if((port_num >= NUM_OF_PORTS)) {
    3104:	8a 81       	ldd	r24, Y+2	; 0x02
    3106:	84 30       	cpi	r24, 0x04	; 4
    3108:	18 f0       	brcs	.+6      	; 0x3110 <BUTTON_Init+0x2a>
		BUTTON_Driver_Checker = BUTTON_WRONG_PORT_NUMBER;
    310a:	82 e0       	ldi	r24, 0x02	; 2
    310c:	89 83       	std	Y+1, r24	; 0x01
    310e:	06 c0       	rjmp	.+12     	; 0x311c <BUTTON_Init+0x36>
	}
	else {
		/* Setup the pin direction as required */
		GPIO_setupPinDirection(port_num, pin_num, PIN_INPUT);
    3110:	8a 81       	ldd	r24, Y+2	; 0x02
    3112:	6b 81       	ldd	r22, Y+3	; 0x03
    3114:	40 e0       	ldi	r20, 0x00	; 0
    3116:	0e 94 79 07 	call	0xef2	; 0xef2 <GPIO_setupPinDirection>
		BUTTON_Driver_Checker = BUTTON_OK;
    311a:	19 82       	std	Y+1, r1	; 0x01
	}
	return BUTTON_Driver_Checker;
    311c:	89 81       	ldd	r24, Y+1	; 0x01
}
    311e:	0f 90       	pop	r0
    3120:	0f 90       	pop	r0
    3122:	0f 90       	pop	r0
    3124:	cf 91       	pop	r28
    3126:	df 91       	pop	r29
    3128:	08 95       	ret

0000312a <BUTTON_Read>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
uint8 BUTTON_Read(uint8 port_num, uint8 pin_num) {
    312a:	df 93       	push	r29
    312c:	cf 93       	push	r28
    312e:	00 d0       	rcall	.+0      	; 0x3130 <BUTTON_Read+0x6>
    3130:	0f 92       	push	r0
    3132:	cd b7       	in	r28, 0x3d	; 61
    3134:	de b7       	in	r29, 0x3e	; 62
    3136:	8a 83       	std	Y+2, r24	; 0x02
    3138:	6b 83       	std	Y+3, r22	; 0x03

	uint8_t BUTTON_Driver_Checker = NULL;
    313a:	19 82       	std	Y+1, r1	; 0x01
		if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    313c:	8b 81       	ldd	r24, Y+3	; 0x03
    313e:	88 30       	cpi	r24, 0x08	; 8
    3140:	18 f0       	brcs	.+6      	; 0x3148 <BUTTON_Read+0x1e>
			BUTTON_Driver_Checker = BUTTON_WRONG_PIN_NUMBER;
    3142:	81 e0       	ldi	r24, 0x01	; 1
    3144:	89 83       	std	Y+1, r24	; 0x01
    3146:	0b c0       	rjmp	.+22     	; 0x315e <BUTTON_Read+0x34>
		}
		else if((port_num >= NUM_OF_PORTS)) {
    3148:	8a 81       	ldd	r24, Y+2	; 0x02
    314a:	84 30       	cpi	r24, 0x04	; 4
    314c:	18 f0       	brcs	.+6      	; 0x3154 <BUTTON_Read+0x2a>
			BUTTON_Driver_Checker = BUTTON_WRONG_PORT_NUMBER;
    314e:	82 e0       	ldi	r24, 0x02	; 2
    3150:	89 83       	std	Y+1, r24	; 0x01
    3152:	05 c0       	rjmp	.+10     	; 0x315e <BUTTON_Read+0x34>
		}
		else {
			/* Setup the pin direction as required */
			GPIO_readPin(port_num, pin_num);
    3154:	8a 81       	ldd	r24, Y+2	; 0x02
    3156:	6b 81       	ldd	r22, Y+3	; 0x03
    3158:	0e 94 ff 09 	call	0x13fe	; 0x13fe <GPIO_readPin>
			BUTTON_Driver_Checker = BUTTON_OK;
    315c:	19 82       	std	Y+1, r1	; 0x01
		}
		return GPIO_readPin(port_num, pin_num);
    315e:	8a 81       	ldd	r24, Y+2	; 0x02
    3160:	6b 81       	ldd	r22, Y+3	; 0x03
    3162:	0e 94 ff 09 	call	0x13fe	; 0x13fe <GPIO_readPin>
}
    3166:	0f 90       	pop	r0
    3168:	0f 90       	pop	r0
    316a:	0f 90       	pop	r0
    316c:	cf 91       	pop	r28
    316e:	df 91       	pop	r29
    3170:	08 95       	ret

00003172 <main>:
//#include "../ECUAL/SEVEN-SEGMENT_DRIVER/SEGMENT.h"
//#include "../ECUAL/KEYPAD_DRIVER/KEYPAD.h"
#include "../ECUAL/LCD_DRIVER/LCD.h"
#include "../MCAL/ADC_DRIVER/ADC.h"

int main(void) {
    3172:	df 93       	push	r29
    3174:	cf 93       	push	r28
    3176:	00 d0       	rcall	.+0      	; 0x3178 <main+0x6>
    3178:	cd b7       	in	r28, 0x3d	; 61
    317a:	de b7       	in	r29, 0x3e	; 62
	// Initializes the screen
	LCD_Init();
    317c:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <LCD_Init>
	uint16 RESULT_VALUE;

	// Initializes the ADC Module
	ADC_Init();
    3180:	0e 94 96 0b 	call	0x172c	; 0x172c <ADC_Init>

	// Displays messages
	LCD_displayString("ADC Value = ");
    3184:	80 e6       	ldi	r24, 0x60	; 96
    3186:	90 e0       	ldi	r25, 0x00	; 0
    3188:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <LCD_displayString>

	while (1) {
		RESULT_VALUE = ADC_readChannel(0);
    318c:	80 e0       	ldi	r24, 0x00	; 0
    318e:	0e 94 a9 0b 	call	0x1752	; 0x1752 <ADC_readChannel>
    3192:	9a 83       	std	Y+2, r25	; 0x02
    3194:	89 83       	std	Y+1, r24	; 0x01
		LCD_moveCursor(0, 12);
    3196:	80 e0       	ldi	r24, 0x00	; 0
    3198:	6c e0       	ldi	r22, 0x0C	; 12
    319a:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <LCD_moveCursor>

		if (RESULT_VALUE >= 1000) {
    319e:	89 81       	ldd	r24, Y+1	; 0x01
    31a0:	9a 81       	ldd	r25, Y+2	; 0x02
    31a2:	23 e0       	ldi	r18, 0x03	; 3
    31a4:	88 3e       	cpi	r24, 0xE8	; 232
    31a6:	92 07       	cpc	r25, r18
    31a8:	28 f0       	brcs	.+10     	; 0x31b4 <main+0x42>
			LCD_intgerToString(RESULT_VALUE);
    31aa:	89 81       	ldd	r24, Y+1	; 0x01
    31ac:	9a 81       	ldd	r25, Y+2	; 0x02
    31ae:	0e 94 d7 17 	call	0x2fae	; 0x2fae <LCD_intgerToString>
    31b2:	ec cf       	rjmp	.-40     	; 0x318c <main+0x1a>
		}
		else {
			LCD_intgerToString(RESULT_VALUE);
    31b4:	89 81       	ldd	r24, Y+1	; 0x01
    31b6:	9a 81       	ldd	r25, Y+2	; 0x02
    31b8:	0e 94 d7 17 	call	0x2fae	; 0x2fae <LCD_intgerToString>
			LCD_displayCharacter(' ');
    31bc:	80 e2       	ldi	r24, 0x20	; 32
    31be:	0e 94 01 13 	call	0x2602	; 0x2602 <LCD_displayCharacter>
    31c2:	e4 cf       	rjmp	.-56     	; 0x318c <main+0x1a>

000031c4 <__mulsi3>:
    31c4:	62 9f       	mul	r22, r18
    31c6:	d0 01       	movw	r26, r0
    31c8:	73 9f       	mul	r23, r19
    31ca:	f0 01       	movw	r30, r0
    31cc:	82 9f       	mul	r24, r18
    31ce:	e0 0d       	add	r30, r0
    31d0:	f1 1d       	adc	r31, r1
    31d2:	64 9f       	mul	r22, r20
    31d4:	e0 0d       	add	r30, r0
    31d6:	f1 1d       	adc	r31, r1
    31d8:	92 9f       	mul	r25, r18
    31da:	f0 0d       	add	r31, r0
    31dc:	83 9f       	mul	r24, r19
    31de:	f0 0d       	add	r31, r0
    31e0:	74 9f       	mul	r23, r20
    31e2:	f0 0d       	add	r31, r0
    31e4:	65 9f       	mul	r22, r21
    31e6:	f0 0d       	add	r31, r0
    31e8:	99 27       	eor	r25, r25
    31ea:	72 9f       	mul	r23, r18
    31ec:	b0 0d       	add	r27, r0
    31ee:	e1 1d       	adc	r30, r1
    31f0:	f9 1f       	adc	r31, r25
    31f2:	63 9f       	mul	r22, r19
    31f4:	b0 0d       	add	r27, r0
    31f6:	e1 1d       	adc	r30, r1
    31f8:	f9 1f       	adc	r31, r25
    31fa:	bd 01       	movw	r22, r26
    31fc:	cf 01       	movw	r24, r30
    31fe:	11 24       	eor	r1, r1
    3200:	08 95       	ret

00003202 <__prologue_saves__>:
    3202:	2f 92       	push	r2
    3204:	3f 92       	push	r3
    3206:	4f 92       	push	r4
    3208:	5f 92       	push	r5
    320a:	6f 92       	push	r6
    320c:	7f 92       	push	r7
    320e:	8f 92       	push	r8
    3210:	9f 92       	push	r9
    3212:	af 92       	push	r10
    3214:	bf 92       	push	r11
    3216:	cf 92       	push	r12
    3218:	df 92       	push	r13
    321a:	ef 92       	push	r14
    321c:	ff 92       	push	r15
    321e:	0f 93       	push	r16
    3220:	1f 93       	push	r17
    3222:	cf 93       	push	r28
    3224:	df 93       	push	r29
    3226:	cd b7       	in	r28, 0x3d	; 61
    3228:	de b7       	in	r29, 0x3e	; 62
    322a:	ca 1b       	sub	r28, r26
    322c:	db 0b       	sbc	r29, r27
    322e:	0f b6       	in	r0, 0x3f	; 63
    3230:	f8 94       	cli
    3232:	de bf       	out	0x3e, r29	; 62
    3234:	0f be       	out	0x3f, r0	; 63
    3236:	cd bf       	out	0x3d, r28	; 61
    3238:	09 94       	ijmp

0000323a <__epilogue_restores__>:
    323a:	2a 88       	ldd	r2, Y+18	; 0x12
    323c:	39 88       	ldd	r3, Y+17	; 0x11
    323e:	48 88       	ldd	r4, Y+16	; 0x10
    3240:	5f 84       	ldd	r5, Y+15	; 0x0f
    3242:	6e 84       	ldd	r6, Y+14	; 0x0e
    3244:	7d 84       	ldd	r7, Y+13	; 0x0d
    3246:	8c 84       	ldd	r8, Y+12	; 0x0c
    3248:	9b 84       	ldd	r9, Y+11	; 0x0b
    324a:	aa 84       	ldd	r10, Y+10	; 0x0a
    324c:	b9 84       	ldd	r11, Y+9	; 0x09
    324e:	c8 84       	ldd	r12, Y+8	; 0x08
    3250:	df 80       	ldd	r13, Y+7	; 0x07
    3252:	ee 80       	ldd	r14, Y+6	; 0x06
    3254:	fd 80       	ldd	r15, Y+5	; 0x05
    3256:	0c 81       	ldd	r16, Y+4	; 0x04
    3258:	1b 81       	ldd	r17, Y+3	; 0x03
    325a:	aa 81       	ldd	r26, Y+2	; 0x02
    325c:	b9 81       	ldd	r27, Y+1	; 0x01
    325e:	ce 0f       	add	r28, r30
    3260:	d1 1d       	adc	r29, r1
    3262:	0f b6       	in	r0, 0x3f	; 63
    3264:	f8 94       	cli
    3266:	de bf       	out	0x3e, r29	; 62
    3268:	0f be       	out	0x3f, r0	; 63
    326a:	cd bf       	out	0x3d, r28	; 61
    326c:	ed 01       	movw	r28, r26
    326e:	08 95       	ret

00003270 <itoa>:
    3270:	fb 01       	movw	r30, r22
    3272:	9f 01       	movw	r18, r30
    3274:	e8 94       	clt
    3276:	42 30       	cpi	r20, 0x02	; 2
    3278:	c4 f0       	brlt	.+48     	; 0x32aa <itoa+0x3a>
    327a:	45 32       	cpi	r20, 0x25	; 37
    327c:	b4 f4       	brge	.+44     	; 0x32aa <itoa+0x3a>
    327e:	4a 30       	cpi	r20, 0x0A	; 10
    3280:	29 f4       	brne	.+10     	; 0x328c <itoa+0x1c>
    3282:	97 fb       	bst	r25, 7
    3284:	1e f4       	brtc	.+6      	; 0x328c <itoa+0x1c>
    3286:	90 95       	com	r25
    3288:	81 95       	neg	r24
    328a:	9f 4f       	sbci	r25, 0xFF	; 255
    328c:	64 2f       	mov	r22, r20
    328e:	77 27       	eor	r23, r23
    3290:	0e 94 69 19 	call	0x32d2	; 0x32d2 <__udivmodhi4>
    3294:	80 5d       	subi	r24, 0xD0	; 208
    3296:	8a 33       	cpi	r24, 0x3A	; 58
    3298:	0c f0       	brlt	.+2      	; 0x329c <itoa+0x2c>
    329a:	89 5d       	subi	r24, 0xD9	; 217
    329c:	81 93       	st	Z+, r24
    329e:	cb 01       	movw	r24, r22
    32a0:	00 97       	sbiw	r24, 0x00	; 0
    32a2:	a1 f7       	brne	.-24     	; 0x328c <itoa+0x1c>
    32a4:	16 f4       	brtc	.+4      	; 0x32aa <itoa+0x3a>
    32a6:	5d e2       	ldi	r21, 0x2D	; 45
    32a8:	51 93       	st	Z+, r21
    32aa:	10 82       	st	Z, r1
    32ac:	c9 01       	movw	r24, r18
    32ae:	0c 94 59 19 	jmp	0x32b2	; 0x32b2 <strrev>

000032b2 <strrev>:
    32b2:	dc 01       	movw	r26, r24
    32b4:	fc 01       	movw	r30, r24
    32b6:	67 2f       	mov	r22, r23
    32b8:	71 91       	ld	r23, Z+
    32ba:	77 23       	and	r23, r23
    32bc:	e1 f7       	brne	.-8      	; 0x32b6 <strrev+0x4>
    32be:	32 97       	sbiw	r30, 0x02	; 2
    32c0:	04 c0       	rjmp	.+8      	; 0x32ca <strrev+0x18>
    32c2:	7c 91       	ld	r23, X
    32c4:	6d 93       	st	X+, r22
    32c6:	70 83       	st	Z, r23
    32c8:	62 91       	ld	r22, -Z
    32ca:	ae 17       	cp	r26, r30
    32cc:	bf 07       	cpc	r27, r31
    32ce:	c8 f3       	brcs	.-14     	; 0x32c2 <strrev+0x10>
    32d0:	08 95       	ret

000032d2 <__udivmodhi4>:
    32d2:	aa 1b       	sub	r26, r26
    32d4:	bb 1b       	sub	r27, r27
    32d6:	51 e1       	ldi	r21, 0x11	; 17
    32d8:	07 c0       	rjmp	.+14     	; 0x32e8 <__udivmodhi4_ep>

000032da <__udivmodhi4_loop>:
    32da:	aa 1f       	adc	r26, r26
    32dc:	bb 1f       	adc	r27, r27
    32de:	a6 17       	cp	r26, r22
    32e0:	b7 07       	cpc	r27, r23
    32e2:	10 f0       	brcs	.+4      	; 0x32e8 <__udivmodhi4_ep>
    32e4:	a6 1b       	sub	r26, r22
    32e6:	b7 0b       	sbc	r27, r23

000032e8 <__udivmodhi4_ep>:
    32e8:	88 1f       	adc	r24, r24
    32ea:	99 1f       	adc	r25, r25
    32ec:	5a 95       	dec	r21
    32ee:	a9 f7       	brne	.-22     	; 0x32da <__udivmodhi4_loop>
    32f0:	80 95       	com	r24
    32f2:	90 95       	com	r25
    32f4:	bc 01       	movw	r22, r24
    32f6:	cd 01       	movw	r24, r26
    32f8:	08 95       	ret

000032fa <_exit>:
    32fa:	f8 94       	cli

000032fc <__stop_program>:
    32fc:	ff cf       	rjmp	.-2      	; 0x32fc <__stop_program>
