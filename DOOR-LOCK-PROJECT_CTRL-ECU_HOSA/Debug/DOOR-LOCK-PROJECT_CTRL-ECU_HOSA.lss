
DOOR-LOCK-PROJECT_CTRL-ECU_HOSA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003cbe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00003cbe  00003d52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800168  00800168  00003e5a  2**0
                  ALLOC
  3 .stab         00005c40  00000000  00000000  00003e5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002f85  00000000  00000000  00009a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000ca21  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000cbe1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000cdf5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000f407  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  000108d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  00011be0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  00011dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  000120c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00012ae1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 0f 1d 	jmp	0x3a1e	; 0x3a1e <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ae 36       	cpi	r26, 0x6E	; 110
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ee eb       	ldi	r30, 0xBE	; 190
      78:	fc e3       	ldi	r31, 0x3C	; 60
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <main>
      8a:	0c 94 5d 1e 	jmp	0x3cba	; 0x3cba <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 65 1d 	jmp	0x3aca	; 0x3aca <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 81 1d 	jmp	0x3b02	; 0x3b02 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 71 1d 	jmp	0x3ae2	; 0x3ae2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8d 1d 	jmp	0x3b1a	; 0x3b1a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 71 1d 	jmp	0x3ae2	; 0x3ae2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8d 1d 	jmp	0x3b1a	; 0x3b1a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 65 1d 	jmp	0x3aca	; 0x3aca <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 81 1d 	jmp	0x3b02	; 0x3b02 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 6d 1d 	jmp	0x3ada	; 0x3ada <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 89 1d 	jmp	0x3b12	; 0x3b12 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 71 1d 	jmp	0x3ae2	; 0x3ae2 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 8d 1d 	jmp	0x3b1a	; 0x3b1a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 71 1d 	jmp	0x3ae2	; 0x3ae2 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 8d 1d 	jmp	0x3b1a	; 0x3b1a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 71 1d 	jmp	0x3ae2	; 0x3ae2 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 8d 1d 	jmp	0x3b1a	; 0x3b1a <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 6e 1d 	jmp	0x3adc	; 0x3adc <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 8a 1d 	jmp	0x3b14	; 0x3b14 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 75 1d 	jmp	0x3aea	; 0x3aea <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 91 1d 	jmp	0x3b22	; 0x3b22 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 6d 1d 	jmp	0x3ada	; 0x3ada <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 89 1d 	jmp	0x3b12	; 0x3b12 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e8 59       	subi	r30, 0x98	; 152
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <USART_Init>:


// Initializes and enables the USART Module to start functionality
//void USART_Init(uint32 baudRate)

void USART_Init(const USART_ConfigType *USART_ConfigPtr) {
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	00 d0       	rcall	.+0      	; 0xef0 <USART_Init+0x6>
     ef0:	00 d0       	rcall	.+0      	; 0xef2 <USART_Init+0x8>
     ef2:	cd b7       	in	r28, 0x3d	; 61
     ef4:	de b7       	in	r29, 0x3e	; 62
     ef6:	9c 83       	std	Y+4, r25	; 0x04
     ef8:	8b 83       	std	Y+3, r24	; 0x03
	CLR_BIT(UCSRC, UCSZ2);
	SET_BIT(UCSRC, UCSZ1);
	SET_BIT(UCSRC, UCSZ0);
*/

	UCSRA |= (1 << U2X);
     efa:	ab e2       	ldi	r26, 0x2B	; 43
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	eb e2       	ldi	r30, 0x2B	; 43
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	82 60       	ori	r24, 0x02	; 2
     f06:	8c 93       	st	X, r24
	UCSRB |= (1 << TXEN) | (1 << RXEN);
     f08:	aa e2       	ldi	r26, 0x2A	; 42
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	ea e2       	ldi	r30, 0x2A	; 42
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	88 61       	ori	r24, 0x18	; 24
     f14:	8c 93       	st	X, r24
	UCSRC |= (1 << URSEL) | (1 << UMSEL) | (1 << UCSZ1) | (1 << UCSZ0);
     f16:	a0 e4       	ldi	r26, 0x40	; 64
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	e0 e4       	ldi	r30, 0x40	; 64
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	86 6c       	ori	r24, 0xC6	; 198
     f22:	8c 93       	st	X, r24

	// UBBRH = 0;
	// UBBRL = 207;
	// (0000) (1100 1111) 12 bits, (0000) is for UBBRH, (1100 1111) if for UBBRL

	uint16 UBBR_Value = 0;
     f24:	1a 82       	std	Y+2, r1	; 0x02
     f26:	19 82       	std	Y+1, r1	; 0x01
	UBBR_Value = (uint16) ( ( (F_CPU) / (8 * (USART_ConfigPtr->baudRate) * 8UL) ) - 1 );
     f28:	eb 81       	ldd	r30, Y+3	; 0x03
     f2a:	fc 81       	ldd	r31, Y+4	; 0x04
     f2c:	83 81       	ldd	r24, Z+3	; 0x03
     f2e:	94 81       	ldd	r25, Z+4	; 0x04
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	88 0f       	add	r24, r24
     f36:	99 1f       	adc	r25, r25
     f38:	88 0f       	add	r24, r24
     f3a:	99 1f       	adc	r25, r25
     f3c:	cc 01       	movw	r24, r24
     f3e:	a0 e0       	ldi	r26, 0x00	; 0
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	88 0f       	add	r24, r24
     f44:	99 1f       	adc	r25, r25
     f46:	aa 1f       	adc	r26, r26
     f48:	bb 1f       	adc	r27, r27
     f4a:	88 0f       	add	r24, r24
     f4c:	99 1f       	adc	r25, r25
     f4e:	aa 1f       	adc	r26, r26
     f50:	bb 1f       	adc	r27, r27
     f52:	88 0f       	add	r24, r24
     f54:	99 1f       	adc	r25, r25
     f56:	aa 1f       	adc	r26, r26
     f58:	bb 1f       	adc	r27, r27
     f5a:	9c 01       	movw	r18, r24
     f5c:	ad 01       	movw	r20, r26
     f5e:	80 e0       	ldi	r24, 0x00	; 0
     f60:	92 e1       	ldi	r25, 0x12	; 18
     f62:	aa e7       	ldi	r26, 0x7A	; 122
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	bc 01       	movw	r22, r24
     f68:	cd 01       	movw	r24, r26
     f6a:	0e 94 43 1d 	call	0x3a86	; 0x3a86 <__udivmodsi4>
     f6e:	da 01       	movw	r26, r20
     f70:	c9 01       	movw	r24, r18
     f72:	01 97       	sbiw	r24, 0x01	; 1
     f74:	9a 83       	std	Y+2, r25	; 0x02
     f76:	89 83       	std	Y+1, r24	; 0x01
	UBRRH = UBBR_Value >> 8;
     f78:	e0 e4       	ldi	r30, 0x40	; 64
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	89 81       	ldd	r24, Y+1	; 0x01
     f7e:	9a 81       	ldd	r25, Y+2	; 0x02
     f80:	89 2f       	mov	r24, r25
     f82:	99 27       	eor	r25, r25
     f84:	80 83       	st	Z, r24
	// Because I want the 4 Zeroes in it

	UBRRL = UBBR_Value;
     f86:	e9 e2       	ldi	r30, 0x29	; 41
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	89 81       	ldd	r24, Y+1	; 0x01
     f8c:	80 83       	st	Z, r24
	// Because I want the actual value

}
     f8e:	0f 90       	pop	r0
     f90:	0f 90       	pop	r0
     f92:	0f 90       	pop	r0
     f94:	0f 90       	pop	r0
     f96:	cf 91       	pop	r28
     f98:	df 91       	pop	r29
     f9a:	08 95       	ret

00000f9c <USART_sendByte>:


// Responsible for the USART to send a byte
void USART_sendByte(const uint8 data) {
     f9c:	df 93       	push	r29
     f9e:	cf 93       	push	r28
     fa0:	0f 92       	push	r0
     fa2:	cd b7       	in	r28, 0x3d	; 61
     fa4:	de b7       	in	r29, 0x3e	; 62
     fa6:	89 83       	std	Y+1, r24	; 0x01
	  *  Bit 5 – UDRE: USART Data Register Empty
	  *
	  *  UDRE flag is set when the TX Buffer (UDR) is empty and ready
	  *  for transmitting a new byte waiting untill this flag is set to '1'
	  */
	while(BIT_IS_CLR(UCSRA,UDRE)) {
     fa8:	eb e2       	ldi	r30, 0x2B	; 43
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	88 2f       	mov	r24, r24
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	80 72       	andi	r24, 0x20	; 32
     fb4:	90 70       	andi	r25, 0x00	; 0
     fb6:	00 97       	sbiw	r24, 0x00	; 0
     fb8:	b9 f3       	breq	.-18     	; 0xfa8 <USART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
     fba:	ec e2       	ldi	r30, 0x2C	; 44
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	89 81       	ldd	r24, Y+1	; 0x01
     fc0:	80 83       	st	Z, r24

	} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	// This is waiting for the flag to be set to '0' to know that I received data
	*******************************************************************/
}
     fc2:	0f 90       	pop	r0
     fc4:	cf 91       	pop	r28
     fc6:	df 91       	pop	r29
     fc8:	08 95       	ret

00000fca <USART_receiveByte>:


// Responsible for the USART to receive a byte
uint8 USART_receiveByte(void) {
     fca:	df 93       	push	r29
     fcc:	cf 93       	push	r28
     fce:	cd b7       	in	r28, 0x3d	; 61
     fd0:	de b7       	in	r29, 0x3e	; 62
	/* UCSRA - USART Control and Status Register A
	  *  Bit 7 – RXC: USART Receive Complete, when it receives data, the flag = 0
	  */

	while ( BIT_IS_CLR(UCSRA, RXC) );
     fd2:	eb e2       	ldi	r30, 0x2B	; 43
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	88 23       	and	r24, r24
     fda:	dc f7       	brge	.-10     	; 0xfd2 <USART_receiveByte+0x8>
	// This is waiting for the flag to be set to '0' to know that I received data

	// When reading
	return UDR;
     fdc:	ec e2       	ldi	r30, 0x2C	; 44
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
}
     fe2:	cf 91       	pop	r28
     fe4:	df 91       	pop	r29
     fe6:	08 95       	ret

00000fe8 <USART_sendString>:


// Responsible for the USART to send an array of bytes, a string
void USART_sendString(const uint8 *str) {
     fe8:	df 93       	push	r29
     fea:	cf 93       	push	r28
     fec:	00 d0       	rcall	.+0      	; 0xfee <USART_sendString+0x6>
     fee:	0f 92       	push	r0
     ff0:	cd b7       	in	r28, 0x3d	; 61
     ff2:	de b7       	in	r29, 0x3e	; 62
     ff4:	9b 83       	std	Y+3, r25	; 0x03
     ff6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     ff8:	19 82       	std	Y+1, r1	; 0x01
     ffa:	0e c0       	rjmp	.+28     	; 0x1018 <USART_sendString+0x30>
	while (str[i] != '\0') {
		USART_sendByte(str[i]);
     ffc:	89 81       	ldd	r24, Y+1	; 0x01
     ffe:	28 2f       	mov	r18, r24
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	9b 81       	ldd	r25, Y+3	; 0x03
    1006:	fc 01       	movw	r30, r24
    1008:	e2 0f       	add	r30, r18
    100a:	f3 1f       	adc	r31, r19
    100c:	80 81       	ld	r24, Z
    100e:	0e 94 ce 07 	call	0xf9c	; 0xf9c <USART_sendByte>
		i++;
    1012:	89 81       	ldd	r24, Y+1	; 0x01
    1014:	8f 5f       	subi	r24, 0xFF	; 255
    1016:	89 83       	std	Y+1, r24	; 0x01


// Responsible for the USART to send an array of bytes, a string
void USART_sendString(const uint8 *str) {
	uint8 i = 0;
	while (str[i] != '\0') {
    1018:	89 81       	ldd	r24, Y+1	; 0x01
    101a:	28 2f       	mov	r18, r24
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	8a 81       	ldd	r24, Y+2	; 0x02
    1020:	9b 81       	ldd	r25, Y+3	; 0x03
    1022:	fc 01       	movw	r30, r24
    1024:	e2 0f       	add	r30, r18
    1026:	f3 1f       	adc	r31, r19
    1028:	80 81       	ld	r24, Z
    102a:	88 23       	and	r24, r24
    102c:	39 f7       	brne	.-50     	; 0xffc <USART_sendString+0x14>
		USART_sendByte(str[i]);
		i++;
	}
}
    102e:	0f 90       	pop	r0
    1030:	0f 90       	pop	r0
    1032:	0f 90       	pop	r0
    1034:	cf 91       	pop	r28
    1036:	df 91       	pop	r29
    1038:	08 95       	ret

0000103a <USART_receiveString>:


// Responsible for the USART to receive an array of bytes, a string
void USART_receiveString(uint8 *str) {
    103a:	0f 93       	push	r16
    103c:	1f 93       	push	r17
    103e:	df 93       	push	r29
    1040:	cf 93       	push	r28
    1042:	00 d0       	rcall	.+0      	; 0x1044 <USART_receiveString+0xa>
    1044:	0f 92       	push	r0
    1046:	cd b7       	in	r28, 0x3d	; 61
    1048:	de b7       	in	r29, 0x3e	; 62
    104a:	9b 83       	std	Y+3, r25	; 0x03
    104c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    104e:	19 82       	std	Y+1, r1	; 0x01
	str[i] = USART_receiveByte();
    1050:	89 81       	ldd	r24, Y+1	; 0x01
    1052:	28 2f       	mov	r18, r24
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	8a 81       	ldd	r24, Y+2	; 0x02
    1058:	9b 81       	ldd	r25, Y+3	; 0x03
    105a:	8c 01       	movw	r16, r24
    105c:	02 0f       	add	r16, r18
    105e:	13 1f       	adc	r17, r19
    1060:	0e 94 e5 07 	call	0xfca	; 0xfca <USART_receiveByte>
    1064:	f8 01       	movw	r30, r16
    1066:	80 83       	st	Z, r24
    1068:	0f c0       	rjmp	.+30     	; 0x1088 <USART_receiveString+0x4e>

	while (str[i] != '#') {
		i++;
    106a:	89 81       	ldd	r24, Y+1	; 0x01
    106c:	8f 5f       	subi	r24, 0xFF	; 255
    106e:	89 83       	std	Y+1, r24	; 0x01
		str[i] = USART_receiveByte();
    1070:	89 81       	ldd	r24, Y+1	; 0x01
    1072:	28 2f       	mov	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	8a 81       	ldd	r24, Y+2	; 0x02
    1078:	9b 81       	ldd	r25, Y+3	; 0x03
    107a:	8c 01       	movw	r16, r24
    107c:	02 0f       	add	r16, r18
    107e:	13 1f       	adc	r17, r19
    1080:	0e 94 e5 07 	call	0xfca	; 0xfca <USART_receiveByte>
    1084:	f8 01       	movw	r30, r16
    1086:	80 83       	st	Z, r24
// Responsible for the USART to receive an array of bytes, a string
void USART_receiveString(uint8 *str) {
	uint8 i = 0;
	str[i] = USART_receiveByte();

	while (str[i] != '#') {
    1088:	89 81       	ldd	r24, Y+1	; 0x01
    108a:	28 2f       	mov	r18, r24
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	8a 81       	ldd	r24, Y+2	; 0x02
    1090:	9b 81       	ldd	r25, Y+3	; 0x03
    1092:	fc 01       	movw	r30, r24
    1094:	e2 0f       	add	r30, r18
    1096:	f3 1f       	adc	r31, r19
    1098:	80 81       	ld	r24, Z
    109a:	83 32       	cpi	r24, 0x23	; 35
    109c:	31 f7       	brne	.-52     	; 0x106a <USART_receiveString+0x30>
		i++;
		str[i] = USART_receiveByte();
	}
	str[i] = '\0'; // replacing the '#' with '\0'
    109e:	89 81       	ldd	r24, Y+1	; 0x01
    10a0:	28 2f       	mov	r18, r24
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	8a 81       	ldd	r24, Y+2	; 0x02
    10a6:	9b 81       	ldd	r25, Y+3	; 0x03
    10a8:	fc 01       	movw	r30, r24
    10aa:	e2 0f       	add	r30, r18
    10ac:	f3 1f       	adc	r31, r19
    10ae:	10 82       	st	Z, r1
}
    10b0:	0f 90       	pop	r0
    10b2:	0f 90       	pop	r0
    10b4:	0f 90       	pop	r0
    10b6:	cf 91       	pop	r28
    10b8:	df 91       	pop	r29
    10ba:	1f 91       	pop	r17
    10bc:	0f 91       	pop	r16
    10be:	08 95       	ret

000010c0 <Timer0_Init>:

/*******************************************************************************
 *                              					Module Implementation                           					  	  *
 *******************************************************************************/

void Timer0_Init(const Timer_ConfigType* TIMER0_ConfigPtr) {
    10c0:	df 93       	push	r29
    10c2:	cf 93       	push	r28
    10c4:	00 d0       	rcall	.+0      	; 0x10c6 <Timer0_Init+0x6>
    10c6:	00 d0       	rcall	.+0      	; 0x10c8 <Timer0_Init+0x8>
    10c8:	00 d0       	rcall	.+0      	; 0x10ca <Timer0_Init+0xa>
    10ca:	cd b7       	in	r28, 0x3d	; 61
    10cc:	de b7       	in	r29, 0x3e	; 62
    10ce:	9a 83       	std	Y+2, r25	; 0x02
    10d0:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 = 0x00;
    10d2:	e3 e5       	ldi	r30, 0x53	; 83
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	10 82       	st	Z, r1
	TCNT0 = 0x00;
    10d8:	e2 e5       	ldi	r30, 0x52	; 82
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	10 82       	st	Z, r1

	switch (TIMER0_ConfigPtr -> prescaler) {
    10de:	e9 81       	ldd	r30, Y+1	; 0x01
    10e0:	fa 81       	ldd	r31, Y+2	; 0x02
    10e2:	24 81       	ldd	r18, Z+4	; 0x04
    10e4:	35 81       	ldd	r19, Z+5	; 0x05
    10e6:	3e 83       	std	Y+6, r19	; 0x06
    10e8:	2d 83       	std	Y+5, r18	; 0x05
    10ea:	8d 81       	ldd	r24, Y+5	; 0x05
    10ec:	9e 81       	ldd	r25, Y+6	; 0x06
    10ee:	80 34       	cpi	r24, 0x40	; 64
    10f0:	91 05       	cpc	r25, r1
    10f2:	61 f1       	breq	.+88     	; 0x114c <Timer0_Init+0x8c>
    10f4:	2d 81       	ldd	r18, Y+5	; 0x05
    10f6:	3e 81       	ldd	r19, Y+6	; 0x06
    10f8:	21 34       	cpi	r18, 0x41	; 65
    10fa:	31 05       	cpc	r19, r1
    10fc:	58 f4       	brcc	.+22     	; 0x1114 <Timer0_Init+0x54>
    10fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1100:	9e 81       	ldd	r25, Y+6	; 0x06
    1102:	81 30       	cpi	r24, 0x01	; 1
    1104:	91 05       	cpc	r25, r1
    1106:	91 f1       	breq	.+100    	; 0x116c <Timer0_Init+0xac>
    1108:	2d 81       	ldd	r18, Y+5	; 0x05
    110a:	3e 81       	ldd	r19, Y+6	; 0x06
    110c:	28 30       	cpi	r18, 0x08	; 8
    110e:	31 05       	cpc	r19, r1
    1110:	29 f1       	breq	.+74     	; 0x115c <Timer0_Init+0x9c>
    1112:	34 c0       	rjmp	.+104    	; 0x117c <Timer0_Init+0xbc>
    1114:	8d 81       	ldd	r24, Y+5	; 0x05
    1116:	9e 81       	ldd	r25, Y+6	; 0x06
    1118:	21 e0       	ldi	r18, 0x01	; 1
    111a:	80 30       	cpi	r24, 0x00	; 0
    111c:	92 07       	cpc	r25, r18
    111e:	71 f0       	breq	.+28     	; 0x113c <Timer0_Init+0x7c>
    1120:	8d 81       	ldd	r24, Y+5	; 0x05
    1122:	9e 81       	ldd	r25, Y+6	; 0x06
    1124:	24 e0       	ldi	r18, 0x04	; 4
    1126:	80 30       	cpi	r24, 0x00	; 0
    1128:	92 07       	cpc	r25, r18
    112a:	41 f5       	brne	.+80     	; 0x117c <Timer0_Init+0xbc>
		case	TIMER_PRESCALER_1024:
			TCCR0 |= (1 << CS00) | (1 << CS02);
    112c:	a3 e5       	ldi	r26, 0x53	; 83
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	e3 e5       	ldi	r30, 0x53	; 83
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	85 60       	ori	r24, 0x05	; 5
    1138:	8c 93       	st	X, r24
    113a:	27 c0       	rjmp	.+78     	; 0x118a <Timer0_Init+0xca>
		break;
		case	TIMER_PRESCALER_256:
			TCCR0 |= (1 << CS02);
    113c:	a3 e5       	ldi	r26, 0x53	; 83
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	e3 e5       	ldi	r30, 0x53	; 83
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	84 60       	ori	r24, 0x04	; 4
    1148:	8c 93       	st	X, r24
    114a:	1f c0       	rjmp	.+62     	; 0x118a <Timer0_Init+0xca>
		break;
		case	TIMER_PRESCALER_64:
			TCCR0 |= (1 << CS00) | (1 << CS01);
    114c:	a3 e5       	ldi	r26, 0x53	; 83
    114e:	b0 e0       	ldi	r27, 0x00	; 0
    1150:	e3 e5       	ldi	r30, 0x53	; 83
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	83 60       	ori	r24, 0x03	; 3
    1158:	8c 93       	st	X, r24
    115a:	17 c0       	rjmp	.+46     	; 0x118a <Timer0_Init+0xca>
		break;
		case	TIMER_PRESCALER_8:
			TCCR0 |= (1 << CS01);
    115c:	a3 e5       	ldi	r26, 0x53	; 83
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	e3 e5       	ldi	r30, 0x53	; 83
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	82 60       	ori	r24, 0x02	; 2
    1168:	8c 93       	st	X, r24
    116a:	0f c0       	rjmp	.+30     	; 0x118a <Timer0_Init+0xca>
		break;
		case	TIMER_PRESCALER_1:
			TCCR0 |= (1 << CS00);
    116c:	a3 e5       	ldi	r26, 0x53	; 83
    116e:	b0 e0       	ldi	r27, 0x00	; 0
    1170:	e3 e5       	ldi	r30, 0x53	; 83
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	80 81       	ld	r24, Z
    1176:	81 60       	ori	r24, 0x01	; 1
    1178:	8c 93       	st	X, r24
    117a:	07 c0       	rjmp	.+14     	; 0x118a <Timer0_Init+0xca>
		break;
		default:
			TCCR0 |= (1 << CS00) | (1 << CS02);
    117c:	a3 e5       	ldi	r26, 0x53	; 83
    117e:	b0 e0       	ldi	r27, 0x00	; 0
    1180:	e3 e5       	ldi	r30, 0x53	; 83
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	80 81       	ld	r24, Z
    1186:	85 60       	ori	r24, 0x05	; 5
    1188:	8c 93       	st	X, r24
		break;
	}

	switch (TIMER0_ConfigPtr -> mode) {
    118a:	e9 81       	ldd	r30, Y+1	; 0x01
    118c:	fa 81       	ldd	r31, Y+2	; 0x02
    118e:	86 81       	ldd	r24, Z+6	; 0x06
    1190:	28 2f       	mov	r18, r24
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	3c 83       	std	Y+4, r19	; 0x04
    1196:	2b 83       	std	Y+3, r18	; 0x03
    1198:	8b 81       	ldd	r24, Y+3	; 0x03
    119a:	9c 81       	ldd	r25, Y+4	; 0x04
    119c:	81 30       	cpi	r24, 0x01	; 1
    119e:	91 05       	cpc	r25, r1
    11a0:	c1 f0       	breq	.+48     	; 0x11d2 <Timer0_Init+0x112>
    11a2:	2b 81       	ldd	r18, Y+3	; 0x03
    11a4:	3c 81       	ldd	r19, Y+4	; 0x04
    11a6:	22 30       	cpi	r18, 0x02	; 2
    11a8:	31 05       	cpc	r19, r1
    11aa:	11 f1       	breq	.+68     	; 0x11f0 <Timer0_Init+0x130>
    11ac:	8b 81       	ldd	r24, Y+3	; 0x03
    11ae:	9c 81       	ldd	r25, Y+4	; 0x04
    11b0:	00 97       	sbiw	r24, 0x00	; 0
    11b2:	69 f5       	brne	.+90     	; 0x120e <Timer0_Init+0x14e>
		case	TIMER_NORMAL_MODE:
			TCCR0 |= (1 << FOC0);
    11b4:	a3 e5       	ldi	r26, 0x53	; 83
    11b6:	b0 e0       	ldi	r27, 0x00	; 0
    11b8:	e3 e5       	ldi	r30, 0x53	; 83
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	80 68       	ori	r24, 0x80	; 128
    11c0:	8c 93       	st	X, r24
			#if (INTERRUPT_MODE == INTERRUPT_ENABLE)
				SET_BIT(TIMSK, TOIE0);
				SET_BIT(SREG, 7); // Bit 7 – i bit: Global Interrupt Enable
			#elif (INTERRUPT_MODE == INTERRUPT_DISABLE)
				CLR_BIT(TIMSK, TOIE0);
    11c2:	a9 e5       	ldi	r26, 0x59	; 89
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	e9 e5       	ldi	r30, 0x59	; 89
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	8e 7f       	andi	r24, 0xFE	; 254
    11ce:	8c 93       	st	X, r24
    11d0:	2c c0       	rjmp	.+88     	; 0x122a <Timer0_Init+0x16a>
			#endif
		break;
		case	TIMER_COMPARE_MODE:
			TCCR0 |= (1 << FOC0) | (1 << WGM01);
    11d2:	a3 e5       	ldi	r26, 0x53	; 83
    11d4:	b0 e0       	ldi	r27, 0x00	; 0
    11d6:	e3 e5       	ldi	r30, 0x53	; 83
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	88 68       	ori	r24, 0x88	; 136
    11de:	8c 93       	st	X, r24
			#if (INTERRUPT_MODE == INTERRUPT_ENABLE)
				SET_BIT(TIMSK, OCIE0);
				SET_BIT(SREG, 7); // Bit 7 – i bit: Global Interrupt Enable
			#elif (INTERRUPT_MODE == INTERRUPT_DISABLE)
				CLR_BIT(TIMSK, OCIE0);
    11e0:	a9 e5       	ldi	r26, 0x59	; 89
    11e2:	b0 e0       	ldi	r27, 0x00	; 0
    11e4:	e9 e5       	ldi	r30, 0x59	; 89
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	8d 7f       	andi	r24, 0xFD	; 253
    11ec:	8c 93       	st	X, r24
    11ee:	1d c0       	rjmp	.+58     	; 0x122a <Timer0_Init+0x16a>
			#elif (CTC_MODE == CTC_SET)
				TCCR0 |= (1 << COM00) | (1 << COM01);
			#endif
		break;
		case	TIMER_FASTPWM_MODE:
			TCCR0 |= (1 << WGM00) | (1 << WGM01);
    11f0:	a3 e5       	ldi	r26, 0x53	; 83
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	e3 e5       	ldi	r30, 0x53	; 83
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	88 64       	ori	r24, 0x48	; 72
    11fc:	8c 93       	st	X, r24

			#if (FASTPWM_MODE == FASTPWM_NOINVERT)
				TCCR0 |= (1 << COM01);
    11fe:	a3 e5       	ldi	r26, 0x53	; 83
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	e3 e5       	ldi	r30, 0x53	; 83
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	80 62       	ori	r24, 0x20	; 32
    120a:	8c 93       	st	X, r24
    120c:	0e c0       	rjmp	.+28     	; 0x122a <Timer0_Init+0x16a>
			#elif (FASTPWM_MODE == FASTPWM_INVERT)
				TCCR0 |= (1 << COM00) | (1 << COM01);
			#endif
		break;
		default:
			TCCR0 |= (1 << FOC0);
    120e:	a3 e5       	ldi	r26, 0x53	; 83
    1210:	b0 e0       	ldi	r27, 0x00	; 0
    1212:	e3 e5       	ldi	r30, 0x53	; 83
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	80 68       	ori	r24, 0x80	; 128
    121a:	8c 93       	st	X, r24
			#if (INTERRUPT_MODE == INTERRUPT_ENABLE)
				SET_BIT(TIMSK, TOIE0);
				SET_BIT(SREG, 7); // Bit 7 – i bit: Global Interrupt Enable
			#elif (INTERRUPT_MODE == INTERRUPT_DISABLE)
				CLR_BIT(TIMSK, TOIE0);
    121c:	a9 e5       	ldi	r26, 0x59	; 89
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	e9 e5       	ldi	r30, 0x59	; 89
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	8e 7f       	andi	r24, 0xFE	; 254
    1228:	8c 93       	st	X, r24
			#endif
		break;
	}
}
    122a:	26 96       	adiw	r28, 0x06	; 6
    122c:	0f b6       	in	r0, 0x3f	; 63
    122e:	f8 94       	cli
    1230:	de bf       	out	0x3e, r29	; 62
    1232:	0f be       	out	0x3f, r0	; 63
    1234:	cd bf       	out	0x3d, r28	; 61
    1236:	cf 91       	pop	r28
    1238:	df 91       	pop	r29
    123a:	08 95       	ret

0000123c <Timer0_deInit>:


void Timer0_deInit(void) {
    123c:	df 93       	push	r29
    123e:	cf 93       	push	r28
    1240:	cd b7       	in	r28, 0x3d	; 61
    1242:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0x00;
    1244:	e3 e5       	ldi	r30, 0x53	; 83
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	10 82       	st	Z, r1
	TCNT0 = 0x00;
    124a:	e2 e5       	ldi	r30, 0x52	; 82
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	10 82       	st	Z, r1
	OCR0   = 0x00;
    1250:	ec e5       	ldi	r30, 0x5C	; 92
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	10 82       	st	Z, r1
}
    1256:	cf 91       	pop	r28
    1258:	df 91       	pop	r29
    125a:	08 95       	ret

0000125c <Timer1_Init>:

void Timer1_Init(const Timer_ConfigType* TIMER1_ConfigPtr) {
    125c:	df 93       	push	r29
    125e:	cf 93       	push	r28
    1260:	00 d0       	rcall	.+0      	; 0x1262 <Timer1_Init+0x6>
    1262:	00 d0       	rcall	.+0      	; 0x1264 <Timer1_Init+0x8>
    1264:	00 d0       	rcall	.+0      	; 0x1266 <Timer1_Init+0xa>
    1266:	cd b7       	in	r28, 0x3d	; 61
    1268:	de b7       	in	r29, 0x3e	; 62
    126a:	9a 83       	std	Y+2, r25	; 0x02
    126c:	89 83       	std	Y+1, r24	; 0x01
	TCCR1A = 0x00;
    126e:	ef e4       	ldi	r30, 0x4F	; 79
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	10 82       	st	Z, r1
	TCCR1B = 0x00;
    1274:	ee e4       	ldi	r30, 0x4E	; 78
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	10 82       	st	Z, r1
	TCNT1 = 0x00;
    127a:	ec e4       	ldi	r30, 0x4C	; 76
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	11 82       	std	Z+1, r1	; 0x01
    1280:	10 82       	st	Z, r1

	switch (TIMER1_ConfigPtr -> prescaler) {
    1282:	e9 81       	ldd	r30, Y+1	; 0x01
    1284:	fa 81       	ldd	r31, Y+2	; 0x02
    1286:	24 81       	ldd	r18, Z+4	; 0x04
    1288:	35 81       	ldd	r19, Z+5	; 0x05
    128a:	3e 83       	std	Y+6, r19	; 0x06
    128c:	2d 83       	std	Y+5, r18	; 0x05
    128e:	8d 81       	ldd	r24, Y+5	; 0x05
    1290:	9e 81       	ldd	r25, Y+6	; 0x06
    1292:	80 34       	cpi	r24, 0x40	; 64
    1294:	91 05       	cpc	r25, r1
    1296:	61 f1       	breq	.+88     	; 0x12f0 <Timer1_Init+0x94>
    1298:	2d 81       	ldd	r18, Y+5	; 0x05
    129a:	3e 81       	ldd	r19, Y+6	; 0x06
    129c:	21 34       	cpi	r18, 0x41	; 65
    129e:	31 05       	cpc	r19, r1
    12a0:	58 f4       	brcc	.+22     	; 0x12b8 <Timer1_Init+0x5c>
    12a2:	8d 81       	ldd	r24, Y+5	; 0x05
    12a4:	9e 81       	ldd	r25, Y+6	; 0x06
    12a6:	81 30       	cpi	r24, 0x01	; 1
    12a8:	91 05       	cpc	r25, r1
    12aa:	91 f1       	breq	.+100    	; 0x1310 <Timer1_Init+0xb4>
    12ac:	2d 81       	ldd	r18, Y+5	; 0x05
    12ae:	3e 81       	ldd	r19, Y+6	; 0x06
    12b0:	28 30       	cpi	r18, 0x08	; 8
    12b2:	31 05       	cpc	r19, r1
    12b4:	29 f1       	breq	.+74     	; 0x1300 <Timer1_Init+0xa4>
    12b6:	34 c0       	rjmp	.+104    	; 0x1320 <Timer1_Init+0xc4>
    12b8:	8d 81       	ldd	r24, Y+5	; 0x05
    12ba:	9e 81       	ldd	r25, Y+6	; 0x06
    12bc:	21 e0       	ldi	r18, 0x01	; 1
    12be:	80 30       	cpi	r24, 0x00	; 0
    12c0:	92 07       	cpc	r25, r18
    12c2:	71 f0       	breq	.+28     	; 0x12e0 <Timer1_Init+0x84>
    12c4:	8d 81       	ldd	r24, Y+5	; 0x05
    12c6:	9e 81       	ldd	r25, Y+6	; 0x06
    12c8:	24 e0       	ldi	r18, 0x04	; 4
    12ca:	80 30       	cpi	r24, 0x00	; 0
    12cc:	92 07       	cpc	r25, r18
    12ce:	41 f5       	brne	.+80     	; 0x1320 <Timer1_Init+0xc4>
		case	TIMER_PRESCALER_1024:
			TCCR1B |= (1 << CS10) | (1 << CS12);
    12d0:	ae e4       	ldi	r26, 0x4E	; 78
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	ee e4       	ldi	r30, 0x4E	; 78
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	85 60       	ori	r24, 0x05	; 5
    12dc:	8c 93       	st	X, r24
    12de:	27 c0       	rjmp	.+78     	; 0x132e <Timer1_Init+0xd2>
		break;
		case	TIMER_PRESCALER_256:
			TCCR1B |= (1 << CS12);
    12e0:	ae e4       	ldi	r26, 0x4E	; 78
    12e2:	b0 e0       	ldi	r27, 0x00	; 0
    12e4:	ee e4       	ldi	r30, 0x4E	; 78
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	84 60       	ori	r24, 0x04	; 4
    12ec:	8c 93       	st	X, r24
    12ee:	1f c0       	rjmp	.+62     	; 0x132e <Timer1_Init+0xd2>
		break;
		case	TIMER_PRESCALER_64:
			TCCR1B |= (1 << CS10) | (1 << CS11);
    12f0:	ae e4       	ldi	r26, 0x4E	; 78
    12f2:	b0 e0       	ldi	r27, 0x00	; 0
    12f4:	ee e4       	ldi	r30, 0x4E	; 78
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	83 60       	ori	r24, 0x03	; 3
    12fc:	8c 93       	st	X, r24
    12fe:	17 c0       	rjmp	.+46     	; 0x132e <Timer1_Init+0xd2>
		break;
		case	TIMER_PRESCALER_8:
			TCCR1B |= (1 << CS11);
    1300:	ae e4       	ldi	r26, 0x4E	; 78
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	ee e4       	ldi	r30, 0x4E	; 78
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	82 60       	ori	r24, 0x02	; 2
    130c:	8c 93       	st	X, r24
    130e:	0f c0       	rjmp	.+30     	; 0x132e <Timer1_Init+0xd2>
		break;
		case	TIMER_PRESCALER_1:
			TCCR1B |= (1 << CS10);
    1310:	ae e4       	ldi	r26, 0x4E	; 78
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	ee e4       	ldi	r30, 0x4E	; 78
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	81 60       	ori	r24, 0x01	; 1
    131c:	8c 93       	st	X, r24
    131e:	07 c0       	rjmp	.+14     	; 0x132e <Timer1_Init+0xd2>
		break;
		default:
			TCCR1B |= (1 << CS10) | (1 << CS12);
    1320:	ae e4       	ldi	r26, 0x4E	; 78
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	ee e4       	ldi	r30, 0x4E	; 78
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	85 60       	ori	r24, 0x05	; 5
    132c:	8c 93       	st	X, r24
		break;
	}

	switch (TIMER1_ConfigPtr -> mode) {
    132e:	e9 81       	ldd	r30, Y+1	; 0x01
    1330:	fa 81       	ldd	r31, Y+2	; 0x02
    1332:	86 81       	ldd	r24, Z+6	; 0x06
    1334:	28 2f       	mov	r18, r24
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	3c 83       	std	Y+4, r19	; 0x04
    133a:	2b 83       	std	Y+3, r18	; 0x03
    133c:	8b 81       	ldd	r24, Y+3	; 0x03
    133e:	9c 81       	ldd	r25, Y+4	; 0x04
    1340:	81 30       	cpi	r24, 0x01	; 1
    1342:	91 05       	cpc	r25, r1
    1344:	89 f0       	breq	.+34     	; 0x1368 <Timer1_Init+0x10c>
    1346:	2b 81       	ldd	r18, Y+3	; 0x03
    1348:	3c 81       	ldd	r19, Y+4	; 0x04
    134a:	22 30       	cpi	r18, 0x02	; 2
    134c:	31 05       	cpc	r19, r1
    134e:	a1 f0       	breq	.+40     	; 0x1378 <Timer1_Init+0x11c>
    1350:	8b 81       	ldd	r24, Y+3	; 0x03
    1352:	9c 81       	ldd	r25, Y+4	; 0x04
    1354:	00 97       	sbiw	r24, 0x00	; 0
    1356:	31 f5       	brne	.+76     	; 0x13a4 <Timer1_Init+0x148>
		case	TIMER_NORMAL_MODE:
			TCCR1A |= (1 << FOC1A) | (1 << FOC1B);
    1358:	af e4       	ldi	r26, 0x4F	; 79
    135a:	b0 e0       	ldi	r27, 0x00	; 0
    135c:	ef e4       	ldi	r30, 0x4F	; 79
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	8c 60       	ori	r24, 0x0C	; 12
    1364:	8c 93       	st	X, r24
    1366:	25 c0       	rjmp	.+74     	; 0x13b2 <Timer1_Init+0x156>
		break;
		case	TIMER_COMPARE_MODE:
			TCCR1A |= (1 << FOC1A) | (1 << FOC1B) | (1 << WGM12);
    1368:	af e4       	ldi	r26, 0x4F	; 79
    136a:	b0 e0       	ldi	r27, 0x00	; 0
    136c:	ef e4       	ldi	r30, 0x4F	; 79
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	8c 60       	ori	r24, 0x0C	; 12
    1374:	8c 93       	st	X, r24
    1376:	1d c0       	rjmp	.+58     	; 0x13b2 <Timer1_Init+0x156>
			#elif (CTC_MODE == CTC_SET)
				TCCR1A |= (1 << COM1A0) | (1 << COM1B0) | (1 << COM1A1) | (1 << COM1B1);
			#endif
		break;
		case	TIMER_FASTPWM_MODE:
			TCCR1A |= (1 << WGM10) | (1 << WGM11);
    1378:	af e4       	ldi	r26, 0x4F	; 79
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	ef e4       	ldi	r30, 0x4F	; 79
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	83 60       	ori	r24, 0x03	; 3
    1384:	8c 93       	st	X, r24
			TCCR1B |= (1 << WGM12) | (1 << WGM13);
    1386:	ae e4       	ldi	r26, 0x4E	; 78
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	ee e4       	ldi	r30, 0x4E	; 78
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	88 61       	ori	r24, 0x18	; 24
    1392:	8c 93       	st	X, r24
			#if (FASTPWM_MODE == FASTPWM_NOINVERT)
				TCCR1A |= (1 << COM1A1) | (1 << COM1B1);
    1394:	af e4       	ldi	r26, 0x4F	; 79
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	ef e4       	ldi	r30, 0x4F	; 79
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	80 6a       	ori	r24, 0xA0	; 160
    13a0:	8c 93       	st	X, r24
    13a2:	07 c0       	rjmp	.+14     	; 0x13b2 <Timer1_Init+0x156>
			#elif (FASTPWM_MODE == FASTPWM_INVERT)
				TCCR1A |= (1 << COM1A0) | (1 << COM1B0) | (1 << COM1A1) | (1 << COM1B1);
			#endif
		break;
		default:
			TCCR1A |= (1 << FOC1A) | (1 << FOC1B);
    13a4:	af e4       	ldi	r26, 0x4F	; 79
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	ef e4       	ldi	r30, 0x4F	; 79
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	8c 60       	ori	r24, 0x0C	; 12
    13b0:	8c 93       	st	X, r24
		break;
	}
}
    13b2:	26 96       	adiw	r28, 0x06	; 6
    13b4:	0f b6       	in	r0, 0x3f	; 63
    13b6:	f8 94       	cli
    13b8:	de bf       	out	0x3e, r29	; 62
    13ba:	0f be       	out	0x3f, r0	; 63
    13bc:	cd bf       	out	0x3d, r28	; 61
    13be:	cf 91       	pop	r28
    13c0:	df 91       	pop	r29
    13c2:	08 95       	ret

000013c4 <Timer1_deInit>:

void Timer1_deInit(void) {
    13c4:	df 93       	push	r29
    13c6:	cf 93       	push	r28
    13c8:	cd b7       	in	r28, 0x3d	; 61
    13ca:	de b7       	in	r29, 0x3e	; 62
	TCCR1A	= 0x00;
    13cc:	ef e4       	ldi	r30, 0x4F	; 79
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	10 82       	st	Z, r1
	TCCR1B	= 0x00;
    13d2:	ee e4       	ldi	r30, 0x4E	; 78
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	10 82       	st	Z, r1
	TCNT1		= 0x00;
    13d8:	ec e4       	ldi	r30, 0x4C	; 76
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	11 82       	std	Z+1, r1	; 0x01
    13de:	10 82       	st	Z, r1
	OCR1A  	= 0x00;
    13e0:	ea e4       	ldi	r30, 0x4A	; 74
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	11 82       	std	Z+1, r1	; 0x01
    13e6:	10 82       	st	Z, r1
	OCR1B   	= 0x00;
    13e8:	e8 e4       	ldi	r30, 0x48	; 72
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	11 82       	std	Z+1, r1	; 0x01
    13ee:	10 82       	st	Z, r1
}
    13f0:	cf 91       	pop	r28
    13f2:	df 91       	pop	r29
    13f4:	08 95       	ret

000013f6 <Timer2_Init>:


void Timer2_Init(const Timer_ConfigType* TIMER2_ConfigPtr) {
    13f6:	df 93       	push	r29
    13f8:	cf 93       	push	r28
    13fa:	00 d0       	rcall	.+0      	; 0x13fc <Timer2_Init+0x6>
    13fc:	00 d0       	rcall	.+0      	; 0x13fe <Timer2_Init+0x8>
    13fe:	00 d0       	rcall	.+0      	; 0x1400 <Timer2_Init+0xa>
    1400:	cd b7       	in	r28, 0x3d	; 61
    1402:	de b7       	in	r29, 0x3e	; 62
    1404:	9a 83       	std	Y+2, r25	; 0x02
    1406:	89 83       	std	Y+1, r24	; 0x01
	TCCR2 = 0x00;
    1408:	e5 e4       	ldi	r30, 0x45	; 69
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	10 82       	st	Z, r1
	TCNT2 = 0x00;
    140e:	e4 e4       	ldi	r30, 0x44	; 68
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	10 82       	st	Z, r1

	switch (TIMER2_ConfigPtr -> prescaler) {
    1414:	e9 81       	ldd	r30, Y+1	; 0x01
    1416:	fa 81       	ldd	r31, Y+2	; 0x02
    1418:	24 81       	ldd	r18, Z+4	; 0x04
    141a:	35 81       	ldd	r19, Z+5	; 0x05
    141c:	3e 83       	std	Y+6, r19	; 0x06
    141e:	2d 83       	std	Y+5, r18	; 0x05
    1420:	8d 81       	ldd	r24, Y+5	; 0x05
    1422:	9e 81       	ldd	r25, Y+6	; 0x06
    1424:	80 34       	cpi	r24, 0x40	; 64
    1426:	91 05       	cpc	r25, r1
    1428:	61 f1       	breq	.+88     	; 0x1482 <Timer2_Init+0x8c>
    142a:	2d 81       	ldd	r18, Y+5	; 0x05
    142c:	3e 81       	ldd	r19, Y+6	; 0x06
    142e:	21 34       	cpi	r18, 0x41	; 65
    1430:	31 05       	cpc	r19, r1
    1432:	58 f4       	brcc	.+22     	; 0x144a <Timer2_Init+0x54>
    1434:	8d 81       	ldd	r24, Y+5	; 0x05
    1436:	9e 81       	ldd	r25, Y+6	; 0x06
    1438:	81 30       	cpi	r24, 0x01	; 1
    143a:	91 05       	cpc	r25, r1
    143c:	91 f1       	breq	.+100    	; 0x14a2 <Timer2_Init+0xac>
    143e:	2d 81       	ldd	r18, Y+5	; 0x05
    1440:	3e 81       	ldd	r19, Y+6	; 0x06
    1442:	28 30       	cpi	r18, 0x08	; 8
    1444:	31 05       	cpc	r19, r1
    1446:	29 f1       	breq	.+74     	; 0x1492 <Timer2_Init+0x9c>
    1448:	34 c0       	rjmp	.+104    	; 0x14b2 <Timer2_Init+0xbc>
    144a:	8d 81       	ldd	r24, Y+5	; 0x05
    144c:	9e 81       	ldd	r25, Y+6	; 0x06
    144e:	21 e0       	ldi	r18, 0x01	; 1
    1450:	80 30       	cpi	r24, 0x00	; 0
    1452:	92 07       	cpc	r25, r18
    1454:	71 f0       	breq	.+28     	; 0x1472 <Timer2_Init+0x7c>
    1456:	8d 81       	ldd	r24, Y+5	; 0x05
    1458:	9e 81       	ldd	r25, Y+6	; 0x06
    145a:	24 e0       	ldi	r18, 0x04	; 4
    145c:	80 30       	cpi	r24, 0x00	; 0
    145e:	92 07       	cpc	r25, r18
    1460:	41 f5       	brne	.+80     	; 0x14b2 <Timer2_Init+0xbc>
		case	TIMER_PRESCALER_1024:
			TCCR2 |= (1 << CS20) | (1 << CS22);
    1462:	a5 e4       	ldi	r26, 0x45	; 69
    1464:	b0 e0       	ldi	r27, 0x00	; 0
    1466:	e5 e4       	ldi	r30, 0x45	; 69
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	85 60       	ori	r24, 0x05	; 5
    146e:	8c 93       	st	X, r24
    1470:	27 c0       	rjmp	.+78     	; 0x14c0 <Timer2_Init+0xca>
		break;
		case	TIMER_PRESCALER_256:
			TCCR2 |= (1 << CS22);
    1472:	a5 e4       	ldi	r26, 0x45	; 69
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	e5 e4       	ldi	r30, 0x45	; 69
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	84 60       	ori	r24, 0x04	; 4
    147e:	8c 93       	st	X, r24
    1480:	1f c0       	rjmp	.+62     	; 0x14c0 <Timer2_Init+0xca>
		break;
		case	TIMER_PRESCALER_64:
			TCCR2 |= (1 << CS20) | (1 << CS21);
    1482:	a5 e4       	ldi	r26, 0x45	; 69
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	e5 e4       	ldi	r30, 0x45	; 69
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	83 60       	ori	r24, 0x03	; 3
    148e:	8c 93       	st	X, r24
    1490:	17 c0       	rjmp	.+46     	; 0x14c0 <Timer2_Init+0xca>
		break;
		case	TIMER_PRESCALER_8:
			TCCR2 |= (1 << CS21);
    1492:	a5 e4       	ldi	r26, 0x45	; 69
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	e5 e4       	ldi	r30, 0x45	; 69
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	82 60       	ori	r24, 0x02	; 2
    149e:	8c 93       	st	X, r24
    14a0:	0f c0       	rjmp	.+30     	; 0x14c0 <Timer2_Init+0xca>
		break;
		case	TIMER_PRESCALER_1:
			TCCR2 |= (1 << CS20);
    14a2:	a5 e4       	ldi	r26, 0x45	; 69
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	e5 e4       	ldi	r30, 0x45	; 69
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	81 60       	ori	r24, 0x01	; 1
    14ae:	8c 93       	st	X, r24
    14b0:	07 c0       	rjmp	.+14     	; 0x14c0 <Timer2_Init+0xca>
		break;
		default:
			TCCR2 |= (1 << CS20) | (1 << CS22);
    14b2:	a5 e4       	ldi	r26, 0x45	; 69
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	e5 e4       	ldi	r30, 0x45	; 69
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	85 60       	ori	r24, 0x05	; 5
    14be:	8c 93       	st	X, r24
		break;
	}

	switch (TIMER2_ConfigPtr -> mode) {
    14c0:	e9 81       	ldd	r30, Y+1	; 0x01
    14c2:	fa 81       	ldd	r31, Y+2	; 0x02
    14c4:	86 81       	ldd	r24, Z+6	; 0x06
    14c6:	28 2f       	mov	r18, r24
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	3c 83       	std	Y+4, r19	; 0x04
    14cc:	2b 83       	std	Y+3, r18	; 0x03
    14ce:	8b 81       	ldd	r24, Y+3	; 0x03
    14d0:	9c 81       	ldd	r25, Y+4	; 0x04
    14d2:	81 30       	cpi	r24, 0x01	; 1
    14d4:	91 05       	cpc	r25, r1
    14d6:	c1 f0       	breq	.+48     	; 0x1508 <Timer2_Init+0x112>
    14d8:	2b 81       	ldd	r18, Y+3	; 0x03
    14da:	3c 81       	ldd	r19, Y+4	; 0x04
    14dc:	22 30       	cpi	r18, 0x02	; 2
    14de:	31 05       	cpc	r19, r1
    14e0:	11 f1       	breq	.+68     	; 0x1526 <Timer2_Init+0x130>
    14e2:	8b 81       	ldd	r24, Y+3	; 0x03
    14e4:	9c 81       	ldd	r25, Y+4	; 0x04
    14e6:	00 97       	sbiw	r24, 0x00	; 0
    14e8:	69 f5       	brne	.+90     	; 0x1544 <Timer2_Init+0x14e>
		case	TIMER_NORMAL_MODE:
			TCCR2 |= (1 << FOC2);
    14ea:	a5 e4       	ldi	r26, 0x45	; 69
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	e5 e4       	ldi	r30, 0x45	; 69
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	80 68       	ori	r24, 0x80	; 128
    14f6:	8c 93       	st	X, r24
			#if (INTERRUPT_MODE == INTERRUPT_ENABLE)
				SET_BIT(TIMSK, TOIE2);
				SET_BIT(SREG, 7); // Bit 7 – i bit: Global Interrupt Enable
			#elif (INTERRUPT_MODE == INTERRUPT_DISABLE)
				CLR_BIT(TIMSK, TOIE2);
    14f8:	a9 e5       	ldi	r26, 0x59	; 89
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	e9 e5       	ldi	r30, 0x59	; 89
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	8f 7b       	andi	r24, 0xBF	; 191
    1504:	8c 93       	st	X, r24
    1506:	2c c0       	rjmp	.+88     	; 0x1560 <Timer2_Init+0x16a>
			#endif
		break;
		case	TIMER_COMPARE_MODE:
			TCCR2 |= (1 << FOC2) | (1 << WGM21);
    1508:	a5 e4       	ldi	r26, 0x45	; 69
    150a:	b0 e0       	ldi	r27, 0x00	; 0
    150c:	e5 e4       	ldi	r30, 0x45	; 69
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	88 68       	ori	r24, 0x88	; 136
    1514:	8c 93       	st	X, r24
			#if (INTERRUPT_MODE == INTERRUPT_ENABLE)
				SET_BIT(TIMSK, OCIE2);
				SET_BIT(SREG, 7); // Bit 7 – i bit: Global Interrupt Enable
			#elif (INTERRUPT_MODE == INTERRUPT_DISABLE)
				CLR_BIT(TIMSK, OCIE2);
    1516:	a9 e5       	ldi	r26, 0x59	; 89
    1518:	b0 e0       	ldi	r27, 0x00	; 0
    151a:	e9 e5       	ldi	r30, 0x59	; 89
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 81       	ld	r24, Z
    1520:	8f 77       	andi	r24, 0x7F	; 127
    1522:	8c 93       	st	X, r24
    1524:	1d c0       	rjmp	.+58     	; 0x1560 <Timer2_Init+0x16a>
			#elif (CTC_MODE == CTC_SET)
				TCCR2 |= (1 << COM20) | (1 << COM21);
			#endif
		break;
		case	TIMER_FASTPWM_MODE:
			TCCR2 |= (1 << WGM20) | (1 << WGM21);
    1526:	a5 e4       	ldi	r26, 0x45	; 69
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	e5 e4       	ldi	r30, 0x45	; 69
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	88 64       	ori	r24, 0x48	; 72
    1532:	8c 93       	st	X, r24
			#if (FASTPWM_MODE == FASTPWM_NOINVERT)
				TCCR2 |= (1 << COM21);
    1534:	a5 e4       	ldi	r26, 0x45	; 69
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	e5 e4       	ldi	r30, 0x45	; 69
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	80 62       	ori	r24, 0x20	; 32
    1540:	8c 93       	st	X, r24
    1542:	0e c0       	rjmp	.+28     	; 0x1560 <Timer2_Init+0x16a>
			#elif (FASTPWM_MODE == FASTPWM_INVERT)
				TCCR2 |= (1 << COM20) | (1 << COM21);
			#endif
		break;
		default:
			TCCR2 |= (1 << FOC2);
    1544:	a5 e4       	ldi	r26, 0x45	; 69
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	e5 e4       	ldi	r30, 0x45	; 69
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	80 68       	ori	r24, 0x80	; 128
    1550:	8c 93       	st	X, r24
			#if (INTERRUPT_MODE == INTERRUPT_ENABLE)
				SET_BIT(TIMSK, TOIE2);
				SET_BIT(SREG, 7); // Bit 7 – i bit: Global Interrupt Enable
			#elif (INTERRUPT_MODE == INTERRUPT_DISABLE)
				CLR_BIT(TIMSK, TOIE2);
    1552:	a9 e5       	ldi	r26, 0x59	; 89
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	e9 e5       	ldi	r30, 0x59	; 89
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	8f 7b       	andi	r24, 0xBF	; 191
    155e:	8c 93       	st	X, r24
			#endif
		break;
	}
}
    1560:	26 96       	adiw	r28, 0x06	; 6
    1562:	0f b6       	in	r0, 0x3f	; 63
    1564:	f8 94       	cli
    1566:	de bf       	out	0x3e, r29	; 62
    1568:	0f be       	out	0x3f, r0	; 63
    156a:	cd bf       	out	0x3d, r28	; 61
    156c:	cf 91       	pop	r28
    156e:	df 91       	pop	r29
    1570:	08 95       	ret

00001572 <Timer2_deInit>:

void Timer2_deInit(void) {
    1572:	df 93       	push	r29
    1574:	cf 93       	push	r28
    1576:	cd b7       	in	r28, 0x3d	; 61
    1578:	de b7       	in	r29, 0x3e	; 62
	TCCR2 = 0x00;
    157a:	e5 e4       	ldi	r30, 0x45	; 69
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	10 82       	st	Z, r1
	TCNT2 = 0x00;
    1580:	e4 e4       	ldi	r30, 0x44	; 68
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	10 82       	st	Z, r1
	OCR2   = 0x00;
    1586:	e3 e4       	ldi	r30, 0x43	; 67
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	10 82       	st	Z, r1
}
    158c:	cf 91       	pop	r28
    158e:	df 91       	pop	r29
    1590:	08 95       	ret

00001592 <Timer0_normalDelaySec>:


void Timer0_normalDelaySec(float32 timeDelay) {
    1592:	df 93       	push	r29
    1594:	cf 93       	push	r28
    1596:	cd b7       	in	r28, 0x3d	; 61
    1598:	de b7       	in	r29, 0x3e	; 62
    159a:	61 97       	sbiw	r28, 0x11	; 17
    159c:	0f b6       	in	r0, 0x3f	; 63
    159e:	f8 94       	cli
    15a0:	de bf       	out	0x3e, r29	; 62
    15a2:	0f be       	out	0x3f, r0	; 63
    15a4:	cd bf       	out	0x3d, r28	; 61
    15a6:	6e 87       	std	Y+14, r22	; 0x0e
    15a8:	7f 87       	std	Y+15, r23	; 0x0f
    15aa:	88 8b       	std	Y+16, r24	; 0x10
    15ac:	99 8b       	std	Y+17, r25	; 0x11
	// Compares overflow counter with overflow amount in a loop
	// Executes a busy wait function
	// Then clears the TIFR by setting it
	// Iterates Overflow Counter

	float32 	tickTime 					= 0;
    15ae:	80 e0       	ldi	r24, 0x00	; 0
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	a0 e0       	ldi	r26, 0x00	; 0
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	8a 87       	std	Y+10, r24	; 0x0a
    15b8:	9b 87       	std	Y+11, r25	; 0x0b
    15ba:	ac 87       	std	Y+12, r26	; 0x0c
    15bc:	bd 87       	std	Y+13, r27	; 0x0d
	float32 	maxDelayTime 		= 0;
    15be:	80 e0       	ldi	r24, 0x00	; 0
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	a0 e0       	ldi	r26, 0x00	; 0
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	8e 83       	std	Y+6, r24	; 0x06
    15c8:	9f 83       	std	Y+7, r25	; 0x07
    15ca:	a8 87       	std	Y+8, r26	; 0x08
    15cc:	b9 87       	std	Y+9, r27	; 0x09
	float32 	overflowAmount 	= 0;
    15ce:	80 e0       	ldi	r24, 0x00	; 0
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	a0 e0       	ldi	r26, 0x00	; 0
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	8a 83       	std	Y+2, r24	; 0x02
    15d8:	9b 83       	std	Y+3, r25	; 0x03
    15da:	ac 83       	std	Y+4, r26	; 0x04
    15dc:	bd 83       	std	Y+5, r27	; 0x05
	uint8 		overFlowCounter 	= 0;
    15de:	19 82       	std	Y+1, r1	; 0x01

	tickTime = PRESCALER_VALUE / (float)F_CPU;
    15e0:	8d eb       	ldi	r24, 0xBD	; 189
    15e2:	97 e3       	ldi	r25, 0x37	; 55
    15e4:	a6 e8       	ldi	r26, 0x86	; 134
    15e6:	b5 e3       	ldi	r27, 0x35	; 53
    15e8:	8a 87       	std	Y+10, r24	; 0x0a
    15ea:	9b 87       	std	Y+11, r25	; 0x0b
    15ec:	ac 87       	std	Y+12, r26	; 0x0c
    15ee:	bd 87       	std	Y+13, r27	; 0x0d
	maxDelayTime = tickTime * 256; 		// 2^n = 256
    15f0:	6a 85       	ldd	r22, Y+10	; 0x0a
    15f2:	7b 85       	ldd	r23, Y+11	; 0x0b
    15f4:	8c 85       	ldd	r24, Y+12	; 0x0c
    15f6:	9d 85       	ldd	r25, Y+13	; 0x0d
    15f8:	20 e0       	ldi	r18, 0x00	; 0
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	40 e8       	ldi	r20, 0x80	; 128
    15fe:	53 e4       	ldi	r21, 0x43	; 67
    1600:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1604:	dc 01       	movw	r26, r24
    1606:	cb 01       	movw	r24, r22
    1608:	8e 83       	std	Y+6, r24	; 0x06
    160a:	9f 83       	std	Y+7, r25	; 0x07
    160c:	a8 87       	std	Y+8, r26	; 0x08
    160e:	b9 87       	std	Y+9, r27	; 0x09
	overflowAmount = ceil((timeDelay) / (maxDelayTime));
    1610:	6e 85       	ldd	r22, Y+14	; 0x0e
    1612:	7f 85       	ldd	r23, Y+15	; 0x0f
    1614:	88 89       	ldd	r24, Y+16	; 0x10
    1616:	99 89       	ldd	r25, Y+17	; 0x11
    1618:	2e 81       	ldd	r18, Y+6	; 0x06
    161a:	3f 81       	ldd	r19, Y+7	; 0x07
    161c:	48 85       	ldd	r20, Y+8	; 0x08
    161e:	59 85       	ldd	r21, Y+9	; 0x09
    1620:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1624:	dc 01       	movw	r26, r24
    1626:	cb 01       	movw	r24, r22
    1628:	bc 01       	movw	r22, r24
    162a:	cd 01       	movw	r24, r26
    162c:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <ceil>
    1630:	dc 01       	movw	r26, r24
    1632:	cb 01       	movw	r24, r22
    1634:	8a 83       	std	Y+2, r24	; 0x02
    1636:	9b 83       	std	Y+3, r25	; 0x03
    1638:	ac 83       	std	Y+4, r26	; 0x04
    163a:	bd 83       	std	Y+5, r27	; 0x05
    163c:	13 c0       	rjmp	.+38     	; 0x1664 <Timer0_normalDelaySec+0xd2>

	// Using the Timer Overflow Flag TOV
	//Timer0_Init();
	while (overFlowCounter < overflowAmount) {
		while (BIT_IS_CLR(TIFR, TOV0)) {
    163e:	e8 e5       	ldi	r30, 0x58	; 88
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	80 81       	ld	r24, Z
    1644:	88 2f       	mov	r24, r24
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	81 70       	andi	r24, 0x01	; 1
    164a:	90 70       	andi	r25, 0x00	; 0
    164c:	00 97       	sbiw	r24, 0x00	; 0
    164e:	b9 f3       	breq	.-18     	; 0x163e <Timer0_normalDelaySec+0xac>
			// This function is a Busy Wait
		}
		overFlowCounter++;
    1650:	89 81       	ldd	r24, Y+1	; 0x01
    1652:	8f 5f       	subi	r24, 0xFF	; 255
    1654:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(TIFR, TOV0);
    1656:	a8 e5       	ldi	r26, 0x58	; 88
    1658:	b0 e0       	ldi	r27, 0x00	; 0
    165a:	e8 e5       	ldi	r30, 0x58	; 88
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	81 60       	ori	r24, 0x01	; 1
    1662:	8c 93       	st	X, r24
	maxDelayTime = tickTime * 256; 		// 2^n = 256
	overflowAmount = ceil((timeDelay) / (maxDelayTime));

	// Using the Timer Overflow Flag TOV
	//Timer0_Init();
	while (overFlowCounter < overflowAmount) {
    1664:	89 81       	ldd	r24, Y+1	; 0x01
    1666:	88 2f       	mov	r24, r24
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	aa 27       	eor	r26, r26
    166c:	97 fd       	sbrc	r25, 7
    166e:	a0 95       	com	r26
    1670:	ba 2f       	mov	r27, r26
    1672:	bc 01       	movw	r22, r24
    1674:	cd 01       	movw	r24, r26
    1676:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    167a:	dc 01       	movw	r26, r24
    167c:	cb 01       	movw	r24, r22
    167e:	bc 01       	movw	r22, r24
    1680:	cd 01       	movw	r24, r26
    1682:	2a 81       	ldd	r18, Y+2	; 0x02
    1684:	3b 81       	ldd	r19, Y+3	; 0x03
    1686:	4c 81       	ldd	r20, Y+4	; 0x04
    1688:	5d 81       	ldd	r21, Y+5	; 0x05
    168a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    168e:	88 23       	and	r24, r24
    1690:	b4 f2       	brlt	.-84     	; 0x163e <Timer0_normalDelaySec+0xac>
			// This function is a Busy Wait
		}
		overFlowCounter++;
		SET_BIT(TIFR, TOV0);
	}
	overFlowCounter = 0;
    1692:	19 82       	std	Y+1, r1	; 0x01
//		CLR_BIT(TIFR, OCF0);
//		overFlowCounter++;
//	}
//	overFlowCounter = 0;
//	TCNT0 = 0x00;
}
    1694:	61 96       	adiw	r28, 0x11	; 17
    1696:	0f b6       	in	r0, 0x3f	; 63
    1698:	f8 94       	cli
    169a:	de bf       	out	0x3e, r29	; 62
    169c:	0f be       	out	0x3f, r0	; 63
    169e:	cd bf       	out	0x3d, r28	; 61
    16a0:	cf 91       	pop	r28
    16a2:	df 91       	pop	r29
    16a4:	08 95       	ret

000016a6 <Timer1_normalDelaySec>:



void Timer1_normalDelaySec(float32 timeDelay) {
    16a6:	df 93       	push	r29
    16a8:	cf 93       	push	r28
    16aa:	cd b7       	in	r28, 0x3d	; 61
    16ac:	de b7       	in	r29, 0x3e	; 62
    16ae:	61 97       	sbiw	r28, 0x11	; 17
    16b0:	0f b6       	in	r0, 0x3f	; 63
    16b2:	f8 94       	cli
    16b4:	de bf       	out	0x3e, r29	; 62
    16b6:	0f be       	out	0x3f, r0	; 63
    16b8:	cd bf       	out	0x3d, r28	; 61
    16ba:	6e 87       	std	Y+14, r22	; 0x0e
    16bc:	7f 87       	std	Y+15, r23	; 0x0f
    16be:	88 8b       	std	Y+16, r24	; 0x10
    16c0:	99 8b       	std	Y+17, r25	; 0x11
	// Compares overflow counter with overflow amount in a loop
	// Executes a busy wait function
	// Then clears the TIFR by setting it
	// Iterates Overflow Counter

	float32 	tickTime 					= 0;
    16c2:	80 e0       	ldi	r24, 0x00	; 0
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	a0 e0       	ldi	r26, 0x00	; 0
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	8a 87       	std	Y+10, r24	; 0x0a
    16cc:	9b 87       	std	Y+11, r25	; 0x0b
    16ce:	ac 87       	std	Y+12, r26	; 0x0c
    16d0:	bd 87       	std	Y+13, r27	; 0x0d
	float32 	maxDelayTime 		= 0;
    16d2:	80 e0       	ldi	r24, 0x00	; 0
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	a0 e0       	ldi	r26, 0x00	; 0
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	8e 83       	std	Y+6, r24	; 0x06
    16dc:	9f 83       	std	Y+7, r25	; 0x07
    16de:	a8 87       	std	Y+8, r26	; 0x08
    16e0:	b9 87       	std	Y+9, r27	; 0x09
	float32 	overflowAmount 	= 0;
    16e2:	80 e0       	ldi	r24, 0x00	; 0
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	a0 e0       	ldi	r26, 0x00	; 0
    16e8:	b0 e0       	ldi	r27, 0x00	; 0
    16ea:	8a 83       	std	Y+2, r24	; 0x02
    16ec:	9b 83       	std	Y+3, r25	; 0x03
    16ee:	ac 83       	std	Y+4, r26	; 0x04
    16f0:	bd 83       	std	Y+5, r27	; 0x05
	uint8 		overFlowCounter 	= 0;
    16f2:	19 82       	std	Y+1, r1	; 0x01

	tickTime = PRESCALER_VALUE / (float)F_CPU;
    16f4:	8d eb       	ldi	r24, 0xBD	; 189
    16f6:	97 e3       	ldi	r25, 0x37	; 55
    16f8:	a6 e8       	ldi	r26, 0x86	; 134
    16fa:	b5 e3       	ldi	r27, 0x35	; 53
    16fc:	8a 87       	std	Y+10, r24	; 0x0a
    16fe:	9b 87       	std	Y+11, r25	; 0x0b
    1700:	ac 87       	std	Y+12, r26	; 0x0c
    1702:	bd 87       	std	Y+13, r27	; 0x0d
	maxDelayTime = tickTime * 256; 		// 2^n = 256
    1704:	6a 85       	ldd	r22, Y+10	; 0x0a
    1706:	7b 85       	ldd	r23, Y+11	; 0x0b
    1708:	8c 85       	ldd	r24, Y+12	; 0x0c
    170a:	9d 85       	ldd	r25, Y+13	; 0x0d
    170c:	20 e0       	ldi	r18, 0x00	; 0
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	40 e8       	ldi	r20, 0x80	; 128
    1712:	53 e4       	ldi	r21, 0x43	; 67
    1714:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1718:	dc 01       	movw	r26, r24
    171a:	cb 01       	movw	r24, r22
    171c:	8e 83       	std	Y+6, r24	; 0x06
    171e:	9f 83       	std	Y+7, r25	; 0x07
    1720:	a8 87       	std	Y+8, r26	; 0x08
    1722:	b9 87       	std	Y+9, r27	; 0x09
	overflowAmount = ceil((timeDelay) / (maxDelayTime));
    1724:	6e 85       	ldd	r22, Y+14	; 0x0e
    1726:	7f 85       	ldd	r23, Y+15	; 0x0f
    1728:	88 89       	ldd	r24, Y+16	; 0x10
    172a:	99 89       	ldd	r25, Y+17	; 0x11
    172c:	2e 81       	ldd	r18, Y+6	; 0x06
    172e:	3f 81       	ldd	r19, Y+7	; 0x07
    1730:	48 85       	ldd	r20, Y+8	; 0x08
    1732:	59 85       	ldd	r21, Y+9	; 0x09
    1734:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1738:	dc 01       	movw	r26, r24
    173a:	cb 01       	movw	r24, r22
    173c:	bc 01       	movw	r22, r24
    173e:	cd 01       	movw	r24, r26
    1740:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <ceil>
    1744:	dc 01       	movw	r26, r24
    1746:	cb 01       	movw	r24, r22
    1748:	8a 83       	std	Y+2, r24	; 0x02
    174a:	9b 83       	std	Y+3, r25	; 0x03
    174c:	ac 83       	std	Y+4, r26	; 0x04
    174e:	bd 83       	std	Y+5, r27	; 0x05
    1750:	13 c0       	rjmp	.+38     	; 0x1778 <Timer1_normalDelaySec+0xd2>

	// Using the Timer Overflow Flag TOV
	//Timer1_Init();
	while (overFlowCounter < overflowAmount) {
		while (BIT_IS_CLR(TIFR, TOV1)) {
    1752:	e8 e5       	ldi	r30, 0x58	; 88
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	80 81       	ld	r24, Z
    1758:	88 2f       	mov	r24, r24
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	84 70       	andi	r24, 0x04	; 4
    175e:	90 70       	andi	r25, 0x00	; 0
    1760:	00 97       	sbiw	r24, 0x00	; 0
    1762:	b9 f3       	breq	.-18     	; 0x1752 <Timer1_normalDelaySec+0xac>
			// This function is a Busy Wait
		}
		overFlowCounter++;
    1764:	89 81       	ldd	r24, Y+1	; 0x01
    1766:	8f 5f       	subi	r24, 0xFF	; 255
    1768:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(TIFR, TOV1);
    176a:	a8 e5       	ldi	r26, 0x58	; 88
    176c:	b0 e0       	ldi	r27, 0x00	; 0
    176e:	e8 e5       	ldi	r30, 0x58	; 88
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	80 81       	ld	r24, Z
    1774:	84 60       	ori	r24, 0x04	; 4
    1776:	8c 93       	st	X, r24
	maxDelayTime = tickTime * 256; 		// 2^n = 256
	overflowAmount = ceil((timeDelay) / (maxDelayTime));

	// Using the Timer Overflow Flag TOV
	//Timer1_Init();
	while (overFlowCounter < overflowAmount) {
    1778:	89 81       	ldd	r24, Y+1	; 0x01
    177a:	88 2f       	mov	r24, r24
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	aa 27       	eor	r26, r26
    1780:	97 fd       	sbrc	r25, 7
    1782:	a0 95       	com	r26
    1784:	ba 2f       	mov	r27, r26
    1786:	bc 01       	movw	r22, r24
    1788:	cd 01       	movw	r24, r26
    178a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    178e:	dc 01       	movw	r26, r24
    1790:	cb 01       	movw	r24, r22
    1792:	bc 01       	movw	r22, r24
    1794:	cd 01       	movw	r24, r26
    1796:	2a 81       	ldd	r18, Y+2	; 0x02
    1798:	3b 81       	ldd	r19, Y+3	; 0x03
    179a:	4c 81       	ldd	r20, Y+4	; 0x04
    179c:	5d 81       	ldd	r21, Y+5	; 0x05
    179e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17a2:	88 23       	and	r24, r24
    17a4:	b4 f2       	brlt	.-84     	; 0x1752 <Timer1_normalDelaySec+0xac>
			// This function is a Busy Wait
		}
		overFlowCounter++;
		SET_BIT(TIFR, TOV1);
	}
	overFlowCounter = 0;
    17a6:	19 82       	std	Y+1, r1	; 0x01
	//Timer1_Init();
	//TCCR0 = 0;
}
    17a8:	61 96       	adiw	r28, 0x11	; 17
    17aa:	0f b6       	in	r0, 0x3f	; 63
    17ac:	f8 94       	cli
    17ae:	de bf       	out	0x3e, r29	; 62
    17b0:	0f be       	out	0x3f, r0	; 63
    17b2:	cd bf       	out	0x3d, r28	; 61
    17b4:	cf 91       	pop	r28
    17b6:	df 91       	pop	r29
    17b8:	08 95       	ret

000017ba <Timer_setCTCMode_normalFreq>:





void Timer_setCTCMode_normalFreq(float freqKHZ, uint8 port_num, uint8 pin_num) {
    17ba:	0f 93       	push	r16
    17bc:	1f 93       	push	r17
    17be:	df 93       	push	r29
    17c0:	cf 93       	push	r28
    17c2:	00 d0       	rcall	.+0      	; 0x17c4 <Timer_setCTCMode_normalFreq+0xa>
    17c4:	00 d0       	rcall	.+0      	; 0x17c6 <Timer_setCTCMode_normalFreq+0xc>
    17c6:	00 d0       	rcall	.+0      	; 0x17c8 <Timer_setCTCMode_normalFreq+0xe>
    17c8:	cd b7       	in	r28, 0x3d	; 61
    17ca:	de b7       	in	r29, 0x3e	; 62
    17cc:	69 83       	std	Y+1, r22	; 0x01
    17ce:	7a 83       	std	Y+2, r23	; 0x02
    17d0:	8b 83       	std	Y+3, r24	; 0x03
    17d2:	9c 83       	std	Y+4, r25	; 0x04
    17d4:	4d 83       	std	Y+5, r20	; 0x05
    17d6:	2e 83       	std	Y+6, r18	; 0x06
	// Focn = F_CPU / (2N*(1 + OCRn))
	// For i.e: Focn = 2 KHz, what are my knowns?
	// Focn, FCPU, N,,, so i will calculate the OCRn
	// Thus solving my problem.

	GPIO_setupPinDirection(port_num, pin_num, PIN_OUTPUT);
    17d8:	8d 81       	ldd	r24, Y+5	; 0x05
    17da:	6e 81       	ldd	r22, Y+6	; 0x06
    17dc:	41 e0       	ldi	r20, 0x01	; 1
    17de:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <GPIO_setupPinDirection>
	GPIO_writePin(port_num, pin_num, LOGIC_LOW);
    17e2:	8d 81       	ldd	r24, Y+5	; 0x05
    17e4:	6e 81       	ldd	r22, Y+6	; 0x06
    17e6:	40 e0       	ldi	r20, 0x00	; 0
    17e8:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <GPIO_writePin>

	// Using the Timer CTC Mode
	TCNT0 	= 0;
    17ec:	e2 e5       	ldi	r30, 0x52	; 82
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	10 82       	st	Z, r1
	OCR0 		= 0;
    17f2:	ec e5       	ldi	r30, 0x5C	; 92
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	10 82       	st	Z, r1
	OCR0 		= ceil( (float32)F_CPU / (2 * PRESCALER_VALUE * freqKHZ * 1000) ) - 1;
    17f8:	0c e5       	ldi	r16, 0x5C	; 92
    17fa:	10 e0       	ldi	r17, 0x00	; 0
    17fc:	69 81       	ldd	r22, Y+1	; 0x01
    17fe:	7a 81       	ldd	r23, Y+2	; 0x02
    1800:	8b 81       	ldd	r24, Y+3	; 0x03
    1802:	9c 81       	ldd	r25, Y+4	; 0x04
    1804:	20 e0       	ldi	r18, 0x00	; 0
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	40 e8       	ldi	r20, 0x80	; 128
    180a:	51 e4       	ldi	r21, 0x41	; 65
    180c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1810:	dc 01       	movw	r26, r24
    1812:	cb 01       	movw	r24, r22
    1814:	bc 01       	movw	r22, r24
    1816:	cd 01       	movw	r24, r26
    1818:	20 e0       	ldi	r18, 0x00	; 0
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	4a e7       	ldi	r20, 0x7A	; 122
    181e:	54 e4       	ldi	r21, 0x44	; 68
    1820:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1824:	dc 01       	movw	r26, r24
    1826:	cb 01       	movw	r24, r22
    1828:	9c 01       	movw	r18, r24
    182a:	ad 01       	movw	r20, r26
    182c:	60 e0       	ldi	r22, 0x00	; 0
    182e:	74 e2       	ldi	r23, 0x24	; 36
    1830:	84 ef       	ldi	r24, 0xF4	; 244
    1832:	9a e4       	ldi	r25, 0x4A	; 74
    1834:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1838:	dc 01       	movw	r26, r24
    183a:	cb 01       	movw	r24, r22
    183c:	bc 01       	movw	r22, r24
    183e:	cd 01       	movw	r24, r26
    1840:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <ceil>
    1844:	dc 01       	movw	r26, r24
    1846:	cb 01       	movw	r24, r22
    1848:	bc 01       	movw	r22, r24
    184a:	cd 01       	movw	r24, r26
    184c:	20 e0       	ldi	r18, 0x00	; 0
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	40 e8       	ldi	r20, 0x80	; 128
    1852:	5f e3       	ldi	r21, 0x3F	; 63
    1854:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1858:	dc 01       	movw	r26, r24
    185a:	cb 01       	movw	r24, r22
    185c:	bc 01       	movw	r22, r24
    185e:	cd 01       	movw	r24, r26
    1860:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1864:	dc 01       	movw	r26, r24
    1866:	cb 01       	movw	r24, r22
    1868:	f8 01       	movw	r30, r16
    186a:	80 83       	st	Z, r24

	if (BIT_IS_SET(TIFR, OCF0)) {
    186c:	e8 e5       	ldi	r30, 0x58	; 88
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	80 81       	ld	r24, Z
    1872:	88 2f       	mov	r24, r24
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	82 70       	andi	r24, 0x02	; 2
    1878:	90 70       	andi	r25, 0x00	; 0
    187a:	00 97       	sbiw	r24, 0x00	; 0
    187c:	59 f0       	breq	.+22     	; 0x1894 <Timer_setCTCMode_normalFreq+0xda>
		GPIO_togglePin(port_num, pin_num);
    187e:	8d 81       	ldd	r24, Y+5	; 0x05
    1880:	6e 81       	ldd	r22, Y+6	; 0x06
    1882:	0e 94 94 10 	call	0x2128	; 0x2128 <GPIO_togglePin>
		SET_BIT(TIFR, OCF0);
    1886:	a8 e5       	ldi	r26, 0x58	; 88
    1888:	b0 e0       	ldi	r27, 0x00	; 0
    188a:	e8 e5       	ldi	r30, 0x58	; 88
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	80 81       	ld	r24, Z
    1890:	82 60       	ori	r24, 0x02	; 2
    1892:	8c 93       	st	X, r24
	}


}
    1894:	26 96       	adiw	r28, 0x06	; 6
    1896:	0f b6       	in	r0, 0x3f	; 63
    1898:	f8 94       	cli
    189a:	de bf       	out	0x3e, r29	; 62
    189c:	0f be       	out	0x3f, r0	; 63
    189e:	cd bf       	out	0x3d, r28	; 61
    18a0:	cf 91       	pop	r28
    18a2:	df 91       	pop	r29
    18a4:	1f 91       	pop	r17
    18a6:	0f 91       	pop	r16
    18a8:	08 95       	ret

000018aa <Timer_setCTCMode_interruptFreq>:


uint8 Timer_setCTCMode_interruptFreq(float freqKHZ) {
    18aa:	0f 93       	push	r16
    18ac:	1f 93       	push	r17
    18ae:	df 93       	push	r29
    18b0:	cf 93       	push	r28
    18b2:	00 d0       	rcall	.+0      	; 0x18b4 <Timer_setCTCMode_interruptFreq+0xa>
    18b4:	00 d0       	rcall	.+0      	; 0x18b6 <Timer_setCTCMode_interruptFreq+0xc>
    18b6:	cd b7       	in	r28, 0x3d	; 61
    18b8:	de b7       	in	r29, 0x3e	; 62
    18ba:	69 83       	std	Y+1, r22	; 0x01
    18bc:	7a 83       	std	Y+2, r23	; 0x02
    18be:	8b 83       	std	Y+3, r24	; 0x03
    18c0:	9c 83       	std	Y+4, r25	; 0x04
	// Focn, FCPU, N,,, so i will calculate the OCRn
	// Thus solving my problem.

	// Using the Timer CTC Mode
	//Timer0_Init();
	TCNT0 	= 0;
    18c2:	e2 e5       	ldi	r30, 0x52	; 82
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	10 82       	st	Z, r1
	OCR0 		= 0;
    18c8:	ec e5       	ldi	r30, 0x5C	; 92
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	10 82       	st	Z, r1
	OCR0 		= ceil( (float32)F_CPU / (2 * PRESCALER_VALUE * freqKHZ * 1000) ) - 1;
    18ce:	0c e5       	ldi	r16, 0x5C	; 92
    18d0:	10 e0       	ldi	r17, 0x00	; 0
    18d2:	69 81       	ldd	r22, Y+1	; 0x01
    18d4:	7a 81       	ldd	r23, Y+2	; 0x02
    18d6:	8b 81       	ldd	r24, Y+3	; 0x03
    18d8:	9c 81       	ldd	r25, Y+4	; 0x04
    18da:	20 e0       	ldi	r18, 0x00	; 0
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	40 e8       	ldi	r20, 0x80	; 128
    18e0:	51 e4       	ldi	r21, 0x41	; 65
    18e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18e6:	dc 01       	movw	r26, r24
    18e8:	cb 01       	movw	r24, r22
    18ea:	bc 01       	movw	r22, r24
    18ec:	cd 01       	movw	r24, r26
    18ee:	20 e0       	ldi	r18, 0x00	; 0
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	4a e7       	ldi	r20, 0x7A	; 122
    18f4:	54 e4       	ldi	r21, 0x44	; 68
    18f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18fa:	dc 01       	movw	r26, r24
    18fc:	cb 01       	movw	r24, r22
    18fe:	9c 01       	movw	r18, r24
    1900:	ad 01       	movw	r20, r26
    1902:	60 e0       	ldi	r22, 0x00	; 0
    1904:	74 e2       	ldi	r23, 0x24	; 36
    1906:	84 ef       	ldi	r24, 0xF4	; 244
    1908:	9a e4       	ldi	r25, 0x4A	; 74
    190a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    190e:	dc 01       	movw	r26, r24
    1910:	cb 01       	movw	r24, r22
    1912:	bc 01       	movw	r22, r24
    1914:	cd 01       	movw	r24, r26
    1916:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <ceil>
    191a:	dc 01       	movw	r26, r24
    191c:	cb 01       	movw	r24, r22
    191e:	bc 01       	movw	r22, r24
    1920:	cd 01       	movw	r24, r26
    1922:	20 e0       	ldi	r18, 0x00	; 0
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	40 e8       	ldi	r20, 0x80	; 128
    1928:	5f e3       	ldi	r21, 0x3F	; 63
    192a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    192e:	dc 01       	movw	r26, r24
    1930:	cb 01       	movw	r24, r22
    1932:	bc 01       	movw	r22, r24
    1934:	cd 01       	movw	r24, r26
    1936:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    193a:	dc 01       	movw	r26, r24
    193c:	cb 01       	movw	r24, r22
    193e:	f8 01       	movw	r30, r16
    1940:	80 83       	st	Z, r24

	return OCR0;
    1942:	ec e5       	ldi	r30, 0x5C	; 92
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	80 81       	ld	r24, Z
}
    1948:	0f 90       	pop	r0
    194a:	0f 90       	pop	r0
    194c:	0f 90       	pop	r0
    194e:	0f 90       	pop	r0
    1950:	cf 91       	pop	r28
    1952:	df 91       	pop	r29
    1954:	1f 91       	pop	r17
    1956:	0f 91       	pop	r16
    1958:	08 95       	ret

0000195a <SPI_initMaster>:
#include "avr/io.h" /* To use the IO Ports Registers */
#include <util/delay.h>


// Initializes and enables the Master mode for the SPI Module to start functionality
void SPI_initMaster(void) {
    195a:	df 93       	push	r29
    195c:	cf 93       	push	r28
    195e:	cd b7       	in	r28, 0x3d	; 61
    1960:	de b7       	in	r29, 0x3e	; 62
	 *	SS (PB4)   	--> 	Output
	 *	MOSI (PB5) --> 	Output
	 *	MISO (PB6) --> 	Input
	 *	SCK (PB7) 	--> 	Output
	 */
	GPIO_setupPinDirection(PORT_B, SS, PIN_OUTPUT);
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	64 e0       	ldi	r22, 0x04	; 4
    1966:	41 e0       	ldi	r20, 0x01	; 1
    1968:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORT_B, MOSI, PIN_OUTPUT);
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	65 e0       	ldi	r22, 0x05	; 5
    1970:	41 e0       	ldi	r20, 0x01	; 1
    1972:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORT_B, MISO, PIN_INPUT);
    1976:	81 e0       	ldi	r24, 0x01	; 1
    1978:	66 e0       	ldi	r22, 0x06	; 6
    197a:	40 e0       	ldi	r20, 0x00	; 0
    197c:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORT_B, SCK, PIN_OUTPUT);
    1980:	81 e0       	ldi	r24, 0x01	; 1
    1982:	67 e0       	ldi	r22, 0x07	; 7
    1984:	41 e0       	ldi	r20, 0x01	; 1
    1986:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <GPIO_setupPinDirection>
	  *  Bit 3 – CPOL: Clock Polarity
	  *  Bit 2 – CPHA: Clock Phase
	  *  Bits 1, 0 – SPR1, SPR0: SPI Clock Rate Select 1 and 0
	  */

	SET_BIT(SPCR, SPE); // Enabling the SPI Module
    198a:	ad e2       	ldi	r26, 0x2D	; 45
    198c:	b0 e0       	ldi	r27, 0x00	; 0
    198e:	ed e2       	ldi	r30, 0x2D	; 45
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	80 64       	ori	r24, 0x40	; 64
    1996:	8c 93       	st	X, r24
	SET_BIT(SPCR, MSTR); // Enabling the Master / Slave Mode; I will choose Master
    1998:	ad e2       	ldi	r26, 0x2D	; 45
    199a:	b0 e0       	ldi	r27, 0x00	; 0
    199c:	ed e2       	ldi	r30, 0x2D	; 45
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	80 81       	ld	r24, Z
    19a2:	80 61       	ori	r24, 0x10	; 16
    19a4:	8c 93       	st	X, r24
	CLR_BIT(SPCR, SPR1); // Choosing the SCK rate, Fosc / 4
    19a6:	ad e2       	ldi	r26, 0x2D	; 45
    19a8:	b0 e0       	ldi	r27, 0x00	; 0
    19aa:	ed e2       	ldi	r30, 0x2D	; 45
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	80 81       	ld	r24, Z
    19b0:	8d 7f       	andi	r24, 0xFD	; 253
    19b2:	8c 93       	st	X, r24
	CLR_BIT(SPCR, SPR0); // So SPR1, SPR0 = '00'
    19b4:	ad e2       	ldi	r26, 0x2D	; 45
    19b6:	b0 e0       	ldi	r27, 0x00	; 0
    19b8:	ed e2       	ldi	r30, 0x2D	; 45
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	80 81       	ld	r24, Z
    19be:	8e 7f       	andi	r24, 0xFE	; 254
    19c0:	8c 93       	st	X, r24
	  *  Bit 7 – SPIF: SPI Interrupt Flag
	  *  Bit 6 – WCOL: Write COLlision Flag
	  *  Bit 5..1 – Res: Reserved Bits
	  *  Bit 0 – SPI2X: Double SPI Speed Bit
	  */
	CLR_BIT(SPSR, SPI2X); // Make SPI2X = '0' to support the Fosc / 4
    19c2:	ae e2       	ldi	r26, 0x2E	; 46
    19c4:	b0 e0       	ldi	r27, 0x00	; 0
    19c6:	ee e2       	ldi	r30, 0x2E	; 46
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	80 81       	ld	r24, Z
    19cc:	8e 7f       	andi	r24, 0xFE	; 254
    19ce:	8c 93       	st	X, r24

}
    19d0:	cf 91       	pop	r28
    19d2:	df 91       	pop	r29
    19d4:	08 95       	ret

000019d6 <SPI_initSlave>:


// Initializes and enables the Slave mode for the SPI Module to start functionality
void SPI_initSlave(void) {
    19d6:	df 93       	push	r29
    19d8:	cf 93       	push	r28
    19da:	cd b7       	in	r28, 0x3d	; 61
    19dc:	de b7       	in	r29, 0x3e	; 62
	 *	SS (PB4)   	--> 	Input
	 *	MOSI (PB5) --> 	Input
	 *	MISO (PB6) --> 	Output
	 *	SCK (PB7) 	--> 	Input
	 */
	GPIO_setupPinDirection(PORT_B, SS, PIN_INPUT);
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	64 e0       	ldi	r22, 0x04	; 4
    19e2:	40 e0       	ldi	r20, 0x00	; 0
    19e4:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORT_B, MOSI, PIN_INPUT);
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	65 e0       	ldi	r22, 0x05	; 5
    19ec:	40 e0       	ldi	r20, 0x00	; 0
    19ee:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORT_B, MISO, PIN_OUTPUT);
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	66 e0       	ldi	r22, 0x06	; 6
    19f6:	41 e0       	ldi	r20, 0x01	; 1
    19f8:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORT_B, SCK, PIN_INPUT);
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	67 e0       	ldi	r22, 0x07	; 7
    1a00:	40 e0       	ldi	r20, 0x00	; 0
    1a02:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <GPIO_setupPinDirection>
	  *  Bit 4 – MSTR: Master/Slave Select
	  *  Bit 3 – CPOL: Clock Polarity
	  *  Bit 2 – CPHA: Clock Phase
	  *  Bits 1, 0 – SPR1, SPR0: SPI Clock Rate Select 1 and 0
	  */
	SET_BIT(SPCR, SPE); // Enabling the SPI Module
    1a06:	ad e2       	ldi	r26, 0x2D	; 45
    1a08:	b0 e0       	ldi	r27, 0x00	; 0
    1a0a:	ed e2       	ldi	r30, 0x2D	; 45
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	80 81       	ld	r24, Z
    1a10:	80 64       	ori	r24, 0x40	; 64
    1a12:	8c 93       	st	X, r24
	CLR_BIT(SPCR, MSTR); // Enabling the Master / Slave Mode; I will choose Master
    1a14:	ad e2       	ldi	r26, 0x2D	; 45
    1a16:	b0 e0       	ldi	r27, 0x00	; 0
    1a18:	ed e2       	ldi	r30, 0x2D	; 45
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	80 81       	ld	r24, Z
    1a1e:	8f 7e       	andi	r24, 0xEF	; 239
    1a20:	8c 93       	st	X, r24
	CLR_BIT(SPCR, SPR1); // Choosing the SCK rate, Fosc / 4
    1a22:	ad e2       	ldi	r26, 0x2D	; 45
    1a24:	b0 e0       	ldi	r27, 0x00	; 0
    1a26:	ed e2       	ldi	r30, 0x2D	; 45
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	8d 7f       	andi	r24, 0xFD	; 253
    1a2e:	8c 93       	st	X, r24
	CLR_BIT(SPCR, SPR0); // So SPR1, SPR0 = '00'
    1a30:	ad e2       	ldi	r26, 0x2D	; 45
    1a32:	b0 e0       	ldi	r27, 0x00	; 0
    1a34:	ed e2       	ldi	r30, 0x2D	; 45
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	80 81       	ld	r24, Z
    1a3a:	8e 7f       	andi	r24, 0xFE	; 254
    1a3c:	8c 93       	st	X, r24
	  *  Bit 7 – SPIF: SPI Interrupt Flag
	  *  Bit 6 – WCOL: Write COLlision Flag
	  *  Bit 5..1 – Res: Reserved Bits
	  *  Bit 0 – SPI2X: Double SPI Speed Bit
	  */
	CLR_BIT(SPSR, SPI2X); // Make SPI2X = '0' to support the Fosc / 4
    1a3e:	ae e2       	ldi	r26, 0x2E	; 46
    1a40:	b0 e0       	ldi	r27, 0x00	; 0
    1a42:	ee e2       	ldi	r30, 0x2E	; 46
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	80 81       	ld	r24, Z
    1a48:	8e 7f       	andi	r24, 0xFE	; 254
    1a4a:	8c 93       	st	X, r24

}
    1a4c:	cf 91       	pop	r28
    1a4e:	df 91       	pop	r29
    1a50:	08 95       	ret

00001a52 <SPI_sendReceiveByte>:


// Responsible for the SPI to send & receive a byte
uint8 SPI_sendReceiveByte(uint8 data) {
    1a52:	df 93       	push	r29
    1a54:	cf 93       	push	r28
    1a56:	0f 92       	push	r0
    1a58:	cd b7       	in	r28, 0x3d	; 61
    1a5a:	de b7       	in	r29, 0x3e	; 62
    1a5c:	89 83       	std	Y+1, r24	; 0x01

	SPDR = data;
    1a5e:	ef e2       	ldi	r30, 0x2F	; 47
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	89 81       	ldd	r24, Y+1	; 0x01
    1a64:	80 83       	st	Z, r24

	while(BIT_IS_CLR(SPSR, SPIF)) {
    1a66:	ee e2       	ldi	r30, 0x2E	; 46
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	80 81       	ld	r24, Z
    1a6c:	88 23       	and	r24, r24
    1a6e:	dc f7       	brge	.-10     	; 0x1a66 <SPI_sendReceiveByte+0x14>
		 * flag is set, Master will set SS to low to generate clock on SCK pin
		 */
	}

	// after SPIF is set, then I return the data
	return SPDR;
    1a70:	ef e2       	ldi	r30, 0x2F	; 47
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 81       	ld	r24, Z
}
    1a76:	0f 90       	pop	r0
    1a78:	cf 91       	pop	r28
    1a7a:	df 91       	pop	r29
    1a7c:	08 95       	ret

00001a7e <SPI_sendString>:

void SPI_sendString(const uint8 *str) {
    1a7e:	df 93       	push	r29
    1a80:	cf 93       	push	r28
    1a82:	00 d0       	rcall	.+0      	; 0x1a84 <SPI_sendString+0x6>
    1a84:	00 d0       	rcall	.+0      	; 0x1a86 <SPI_sendString+0x8>
    1a86:	cd b7       	in	r28, 0x3d	; 61
    1a88:	de b7       	in	r29, 0x3e	; 62
    1a8a:	9c 83       	std	Y+4, r25	; 0x04
    1a8c:	8b 83       	std	Y+3, r24	; 0x03
	uint8 i = 0;
    1a8e:	1a 82       	std	Y+2, r1	; 0x02
	uint8 receivedData = 0;
    1a90:	19 82       	std	Y+1, r1	; 0x01
    1a92:	0f c0       	rjmp	.+30     	; 0x1ab2 <SPI_sendString+0x34>

	while (str[i] != '\0') {
		// receivedData contains the data from the other device
		receivedData = SPI_sendReceiveByte(str[i]);
    1a94:	8a 81       	ldd	r24, Y+2	; 0x02
    1a96:	28 2f       	mov	r18, r24
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a9e:	fc 01       	movw	r30, r24
    1aa0:	e2 0f       	add	r30, r18
    1aa2:	f3 1f       	adc	r31, r19
    1aa4:	80 81       	ld	r24, Z
    1aa6:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <SPI_sendReceiveByte>
    1aaa:	89 83       	std	Y+1, r24	; 0x01
		i++;
    1aac:	8a 81       	ldd	r24, Y+2	; 0x02
    1aae:	8f 5f       	subi	r24, 0xFF	; 255
    1ab0:	8a 83       	std	Y+2, r24	; 0x02

void SPI_sendString(const uint8 *str) {
	uint8 i = 0;
	uint8 receivedData = 0;

	while (str[i] != '\0') {
    1ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab4:	28 2f       	mov	r18, r24
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aba:	9c 81       	ldd	r25, Y+4	; 0x04
    1abc:	fc 01       	movw	r30, r24
    1abe:	e2 0f       	add	r30, r18
    1ac0:	f3 1f       	adc	r31, r19
    1ac2:	80 81       	ld	r24, Z
    1ac4:	88 23       	and	r24, r24
    1ac6:	31 f7       	brne	.-52     	; 0x1a94 <SPI_sendString+0x16>
		// receivedData contains the data from the other device
		receivedData = SPI_sendReceiveByte(str[i]);
		i++;
	}

}
    1ac8:	0f 90       	pop	r0
    1aca:	0f 90       	pop	r0
    1acc:	0f 90       	pop	r0
    1ace:	0f 90       	pop	r0
    1ad0:	cf 91       	pop	r28
    1ad2:	df 91       	pop	r29
    1ad4:	08 95       	ret

00001ad6 <SPI_receiveString>:


void SPI_receiveString(uint8 *str) {
    1ad6:	0f 93       	push	r16
    1ad8:	1f 93       	push	r17
    1ada:	df 93       	push	r29
    1adc:	cf 93       	push	r28
    1ade:	00 d0       	rcall	.+0      	; 0x1ae0 <SPI_receiveString+0xa>
    1ae0:	0f 92       	push	r0
    1ae2:	cd b7       	in	r28, 0x3d	; 61
    1ae4:	de b7       	in	r29, 0x3e	; 62
    1ae6:	9b 83       	std	Y+3, r25	; 0x03
    1ae8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1aea:	19 82       	std	Y+1, r1	; 0x01
	// Receives and stores the first byte
	str[i] = SPI_sendReceiveByte(SPI_DEF_DATA_VAL);
    1aec:	89 81       	ldd	r24, Y+1	; 0x01
    1aee:	28 2f       	mov	r18, r24
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	8a 81       	ldd	r24, Y+2	; 0x02
    1af4:	9b 81       	ldd	r25, Y+3	; 0x03
    1af6:	8c 01       	movw	r16, r24
    1af8:	02 0f       	add	r16, r18
    1afa:	13 1f       	adc	r17, r19
    1afc:	8f ef       	ldi	r24, 0xFF	; 255
    1afe:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <SPI_sendReceiveByte>
    1b02:	f8 01       	movw	r30, r16
    1b04:	80 83       	st	Z, r24
    1b06:	10 c0       	rjmp	.+32     	; 0x1b28 <SPI_receiveString+0x52>


	while (str[i] != '#') {
		i++; // why the incrementer above?
    1b08:	89 81       	ldd	r24, Y+1	; 0x01
    1b0a:	8f 5f       	subi	r24, 0xFF	; 255
    1b0c:	89 83       	std	Y+1, r24	; 0x01
		str[i] = SPI_sendReceiveByte(SPI_DEF_DATA_VAL);
    1b0e:	89 81       	ldd	r24, Y+1	; 0x01
    1b10:	28 2f       	mov	r18, r24
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	8a 81       	ldd	r24, Y+2	; 0x02
    1b16:	9b 81       	ldd	r25, Y+3	; 0x03
    1b18:	8c 01       	movw	r16, r24
    1b1a:	02 0f       	add	r16, r18
    1b1c:	13 1f       	adc	r17, r19
    1b1e:	8f ef       	ldi	r24, 0xFF	; 255
    1b20:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <SPI_sendReceiveByte>
    1b24:	f8 01       	movw	r30, r16
    1b26:	80 83       	st	Z, r24
	uint8 i = 0;
	// Receives and stores the first byte
	str[i] = SPI_sendReceiveByte(SPI_DEF_DATA_VAL);


	while (str[i] != '#') {
    1b28:	89 81       	ldd	r24, Y+1	; 0x01
    1b2a:	28 2f       	mov	r18, r24
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b30:	9b 81       	ldd	r25, Y+3	; 0x03
    1b32:	fc 01       	movw	r30, r24
    1b34:	e2 0f       	add	r30, r18
    1b36:	f3 1f       	adc	r31, r19
    1b38:	80 81       	ld	r24, Z
    1b3a:	83 32       	cpi	r24, 0x23	; 35
    1b3c:	29 f7       	brne	.-54     	; 0x1b08 <SPI_receiveString+0x32>
		i++; // why the incrementer above?
		str[i] = SPI_sendReceiveByte(SPI_DEF_DATA_VAL);
	}

	str[i] = '\0'; // replacing the '#' with '\0'
    1b3e:	89 81       	ldd	r24, Y+1	; 0x01
    1b40:	28 2f       	mov	r18, r24
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	8a 81       	ldd	r24, Y+2	; 0x02
    1b46:	9b 81       	ldd	r25, Y+3	; 0x03
    1b48:	fc 01       	movw	r30, r24
    1b4a:	e2 0f       	add	r30, r18
    1b4c:	f3 1f       	adc	r31, r19
    1b4e:	10 82       	st	Z, r1

}
    1b50:	0f 90       	pop	r0
    1b52:	0f 90       	pop	r0
    1b54:	0f 90       	pop	r0
    1b56:	cf 91       	pop	r28
    1b58:	df 91       	pop	r29
    1b5a:	1f 91       	pop	r17
    1b5c:	0f 91       	pop	r16
    1b5e:	08 95       	ret

00001b60 <ICU_Init>:
#include <util/delay.h>
//#include <avr/interrupt.h>


// Initializes and enables the ADC Module to start functionality
void ICU_Init(void) {
    1b60:	df 93       	push	r29
    1b62:	cf 93       	push	r28
    1b64:	cd b7       	in	r28, 0x3d	; 61
    1b66:	de b7       	in	r29, 0x3e	; 62
	 * 2 – FOC1B: Force Output Compare for Compare unit B
	 * 1:0 – WGM11:0: Waveform Generation Mode
	 */

	// Clears COM1A1:0 to '00', I want normal mode
	CLR_BIT(TCCR1A, COM1A1);
    1b68:	af e4       	ldi	r26, 0x4F	; 79
    1b6a:	b0 e0       	ldi	r27, 0x00	; 0
    1b6c:	ef e4       	ldi	r30, 0x4F	; 79
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	80 81       	ld	r24, Z
    1b72:	8f 77       	andi	r24, 0x7F	; 127
    1b74:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, COM1A0);
    1b76:	af e4       	ldi	r26, 0x4F	; 79
    1b78:	b0 e0       	ldi	r27, 0x00	; 0
    1b7a:	ef e4       	ldi	r30, 0x4F	; 79
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	80 81       	ld	r24, Z
    1b80:	8f 7b       	andi	r24, 0xBF	; 191
    1b82:	8c 93       	st	X, r24

	// Clears COM1B1:0 to '00', I want normal mode
	CLR_BIT(TCCR1A, COM1B1);
    1b84:	af e4       	ldi	r26, 0x4F	; 79
    1b86:	b0 e0       	ldi	r27, 0x00	; 0
    1b88:	ef e4       	ldi	r30, 0x4F	; 79
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	80 81       	ld	r24, Z
    1b8e:	8f 7d       	andi	r24, 0xDF	; 223
    1b90:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, COM1B0);
    1b92:	af e4       	ldi	r26, 0x4F	; 79
    1b94:	b0 e0       	ldi	r27, 0x00	; 0
    1b96:	ef e4       	ldi	r30, 0x4F	; 79
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	80 81       	ld	r24, Z
    1b9c:	8f 7e       	andi	r24, 0xEF	; 239
    1b9e:	8c 93       	st	X, r24

	// Sets FOC1A to '1', I'm in normal mode
	SET_BIT(TCCR1A, FOC1A);
    1ba0:	af e4       	ldi	r26, 0x4F	; 79
    1ba2:	b0 e0       	ldi	r27, 0x00	; 0
    1ba4:	ef e4       	ldi	r30, 0x4F	; 79
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	80 81       	ld	r24, Z
    1baa:	88 60       	ori	r24, 0x08	; 8
    1bac:	8c 93       	st	X, r24

	// Sets FOC1A to '1', I'm in normal mode
	SET_BIT(TCCR1A, FOC1B);
    1bae:	af e4       	ldi	r26, 0x4F	; 79
    1bb0:	b0 e0       	ldi	r27, 0x00	; 0
    1bb2:	ef e4       	ldi	r30, 0x4F	; 79
    1bb4:	f0 e0       	ldi	r31, 0x00	; 0
    1bb6:	80 81       	ld	r24, Z
    1bb8:	84 60       	ori	r24, 0x04	; 4
    1bba:	8c 93       	st	X, r24

	// Clears COM1B1:0 to '00', I want normal mode
	CLR_BIT(TCCR1A, WGM11);
    1bbc:	af e4       	ldi	r26, 0x4F	; 79
    1bbe:	b0 e0       	ldi	r27, 0x00	; 0
    1bc0:	ef e4       	ldi	r30, 0x4F	; 79
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	80 81       	ld	r24, Z
    1bc6:	8d 7f       	andi	r24, 0xFD	; 253
    1bc8:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, WGM10);
    1bca:	af e4       	ldi	r26, 0x4F	; 79
    1bcc:	b0 e0       	ldi	r27, 0x00	; 0
    1bce:	ef e4       	ldi	r30, 0x4F	; 79
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	80 81       	ld	r24, Z
    1bd4:	8e 7f       	andi	r24, 0xFE	; 254
    1bd6:	8c 93       	st	X, r24
	 * Bit 4:3 – WGM13:2: Waveform Generation Mode
	 * Bit 2:0 – CS12:0: Clock Select
	 */

	// Clears ICNC1 to '0', I DONT want the noise canceling
	CLR_BIT(TCCR1B, ICNC1);
    1bd8:	ae e4       	ldi	r26, 0x4E	; 78
    1bda:	b0 e0       	ldi	r27, 0x00	; 0
    1bdc:	ee e4       	ldi	r30, 0x4E	; 78
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	80 81       	ld	r24, Z
    1be2:	8f 77       	andi	r24, 0x7F	; 127
    1be4:	8c 93       	st	X, r24

	// Sets ICES1 to '1', I want the rising edge
	SET_BIT(TCCR1B, ICES1);
    1be6:	ae e4       	ldi	r26, 0x4E	; 78
    1be8:	b0 e0       	ldi	r27, 0x00	; 0
    1bea:	ee e4       	ldi	r30, 0x4E	; 78
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	80 81       	ld	r24, Z
    1bf0:	80 64       	ori	r24, 0x40	; 64
    1bf2:	8c 93       	st	X, r24

	// Sets CS12:0 to '001', nO PRESCALING
	CLR_BIT(TCCR1B, CS12);
    1bf4:	ae e4       	ldi	r26, 0x4E	; 78
    1bf6:	b0 e0       	ldi	r27, 0x00	; 0
    1bf8:	ee e4       	ldi	r30, 0x4E	; 78
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	80 81       	ld	r24, Z
    1bfe:	8b 7f       	andi	r24, 0xFB	; 251
    1c00:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, CS11);
    1c02:	ae e4       	ldi	r26, 0x4E	; 78
    1c04:	b0 e0       	ldi	r27, 0x00	; 0
    1c06:	ee e4       	ldi	r30, 0x4E	; 78
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	80 81       	ld	r24, Z
    1c0c:	8d 7f       	andi	r24, 0xFD	; 253
    1c0e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, CS10);
    1c10:	ae e4       	ldi	r26, 0x4E	; 78
    1c12:	b0 e0       	ldi	r27, 0x00	; 0
    1c14:	ee e4       	ldi	r30, 0x4E	; 78
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	80 81       	ld	r24, Z
    1c1a:	81 60       	ori	r24, 0x01	; 1
    1c1c:	8c 93       	st	X, r24

	// Clears TCNT1 to '0', Initialize to '0'
	TCNT1 = 0;
    1c1e:	ec e4       	ldi	r30, 0x4C	; 76
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	11 82       	std	Z+1, r1	; 0x01
    1c24:	10 82       	st	Z, r1

	// Clears ICR1 to '0', Initialize to '0'
	ICR1 = 0;
    1c26:	e6 e4       	ldi	r30, 0x46	; 70
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	11 82       	std	Z+1, r1	; 0x01
    1c2c:	10 82       	st	Z, r1
	 */

	// TIMSK1 |= (1 << TICIE1);
	// SREG |= (1 << 7);

}
    1c2e:	cf 91       	pop	r28
    1c30:	df 91       	pop	r29
    1c32:	08 95       	ret

00001c34 <I2C_init>:
/*******************************************************************************
 *                              					Module Implementation                              					  *
 *******************************************************************************/

// Initializes and enables the Master mode for the TWI Module to start functionality
void I2C_init(const I2C_ConfigType *I2C_ConfigPtr) {
    1c34:	df 93       	push	r29
    1c36:	cf 93       	push	r28
    1c38:	00 d0       	rcall	.+0      	; 0x1c3a <I2C_init+0x6>
    1c3a:	cd b7       	in	r28, 0x3d	; 61
    1c3c:	de b7       	in	r29, 0x3e	; 62
    1c3e:	9a 83       	std	Y+2, r25	; 0x02
    1c40:	89 83       	std	Y+1, r24	; 0x01
	 * In the previous equation, I have two unknowns, the TWBR & TWPS
	 * Its the prescaler bits.. so what to choose?
	 * I know that the SCL is 400 KHz, & F_CPU is 8 MHz
	 * I can control TWPS & let it, TWPS = 0, so TWBR = 2
	 */
	TWSR = 0x00;
    1c42:	e1 e2       	ldi	r30, 0x21	; 33
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	10 82       	st	Z, r1
	TWBR = 0x02;
    1c48:	e0 e2       	ldi	r30, 0x20	; 32
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	82 e0       	ldi	r24, 0x02	; 2
    1c4e:	80 83       	st	Z, r24
	TWAR = I2C_SLAVE_ADDR; // Slave Address
    1c50:	e2 e2       	ldi	r30, 0x22	; 34
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	82 e0       	ldi	r24, 0x02	; 2
    1c56:	80 83       	st	Z, r24
	TWCR = (1 << TWEN); // Enabling the I2C Module
    1c58:	e6 e5       	ldi	r30, 0x56	; 86
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	84 e0       	ldi	r24, 0x04	; 4
    1c5e:	80 83       	st	Z, r24

}
    1c60:	0f 90       	pop	r0
    1c62:	0f 90       	pop	r0
    1c64:	cf 91       	pop	r28
    1c66:	df 91       	pop	r29
    1c68:	08 95       	ret

00001c6a <I2C_start>:

// Responsible for the SPI to send an array of bytes, a string
void I2C_start(void) {
    1c6a:	df 93       	push	r29
    1c6c:	cf 93       	push	r28
    1c6e:	cd b7       	in	r28, 0x3d	; 61
    1c70:	de b7       	in	r29, 0x3e	; 62
	// Again enabling the I2C Module, Set the Start Condition, Clearing the TWINT Flag
	/* But why I'm not using the normal set bit technique?
	 * Because I don't want to keep old data, & I want the information always set by me
	 */
	TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWSTA);
    1c72:	e6 e5       	ldi	r30, 0x56	; 86
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	84 ea       	ldi	r24, 0xA4	; 164
    1c78:	80 83       	st	Z, r24

	while(BIT_IS_CLR(TWCR, TWINT)) {
    1c7a:	e6 e5       	ldi	r30, 0x56	; 86
    1c7c:	f0 e0       	ldi	r31, 0x00	; 0
    1c7e:	80 81       	ld	r24, Z
    1c80:	88 23       	and	r24, r24
    1c82:	dc f7       	brge	.-10     	; 0x1c7a <I2C_start+0x10>
		// Busy Wait for TWINT set in TWCR Register
		// to ensure that start bit is send successfully
	}
}
    1c84:	cf 91       	pop	r28
    1c86:	df 91       	pop	r29
    1c88:	08 95       	ret

00001c8a <I2C_stop>:

// Responsible for the SPI to receive an array of bytes, a string
void I2C_stop(void) {
    1c8a:	df 93       	push	r29
    1c8c:	cf 93       	push	r28
    1c8e:	cd b7       	in	r28, 0x3d	; 61
    1c90:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWSTO);
    1c92:	e6 e5       	ldi	r30, 0x56	; 86
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	84 e9       	ldi	r24, 0x94	; 148
    1c98:	80 83       	st	Z, r24
}
    1c9a:	cf 91       	pop	r28
    1c9c:	df 91       	pop	r29
    1c9e:	08 95       	ret

00001ca0 <I2C_writeByte>:

// Responsible for the SPI to receive an array of bytes, a string
void I2C_writeByte(uint8 data) {
    1ca0:	df 93       	push	r29
    1ca2:	cf 93       	push	r28
    1ca4:	0f 92       	push	r0
    1ca6:	cd b7       	in	r28, 0x3d	; 61
    1ca8:	de b7       	in	r29, 0x3e	; 62
    1caa:	89 83       	std	Y+1, r24	; 0x01
	TWCR = (1 << TWEN) | (1 << TWINT);
    1cac:	e6 e5       	ldi	r30, 0x56	; 86
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	84 e8       	ldi	r24, 0x84	; 132
    1cb2:	80 83       	st	Z, r24
	TWDR = data;
    1cb4:	e3 e2       	ldi	r30, 0x23	; 35
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	89 81       	ldd	r24, Y+1	; 0x01
    1cba:	80 83       	st	Z, r24

	while(BIT_IS_CLR(TWCR, TWINT)) {
    1cbc:	e6 e5       	ldi	r30, 0x56	; 86
    1cbe:	f0 e0       	ldi	r31, 0x00	; 0
    1cc0:	80 81       	ld	r24, Z
    1cc2:	88 23       	and	r24, r24
    1cc4:	dc f7       	brge	.-10     	; 0x1cbc <I2C_writeByte+0x1c>
		// Busy Wait for TWINT set in TWCR Register
		// to ensure that data is sent successfully
	}
}
    1cc6:	0f 90       	pop	r0
    1cc8:	cf 91       	pop	r28
    1cca:	df 91       	pop	r29
    1ccc:	08 95       	ret

00001cce <I2C_readByteWithACK>:

// Responsible for the SPI to receive an array of bytes, a string
uint8 I2C_readByteWithACK(void) {
    1cce:	df 93       	push	r29
    1cd0:	cf 93       	push	r28
    1cd2:	cd b7       	in	r28, 0x3d	; 61
    1cd4:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWEA);
    1cd6:	e6 e5       	ldi	r30, 0x56	; 86
    1cd8:	f0 e0       	ldi	r31, 0x00	; 0
    1cda:	84 ec       	ldi	r24, 0xC4	; 196
    1cdc:	80 83       	st	Z, r24

	while(BIT_IS_CLR(TWCR, TWINT)) {
    1cde:	e6 e5       	ldi	r30, 0x56	; 86
    1ce0:	f0 e0       	ldi	r31, 0x00	; 0
    1ce2:	80 81       	ld	r24, Z
    1ce4:	88 23       	and	r24, r24
    1ce6:	dc f7       	brge	.-10     	; 0x1cde <I2C_readByteWithACK+0x10>
		// Busy Wait for TWINT set in TWCR Register
		// to ensure that data is sent successfully
	}
	return TWDR;
    1ce8:	e3 e2       	ldi	r30, 0x23	; 35
    1cea:	f0 e0       	ldi	r31, 0x00	; 0
    1cec:	80 81       	ld	r24, Z
}
    1cee:	cf 91       	pop	r28
    1cf0:	df 91       	pop	r29
    1cf2:	08 95       	ret

00001cf4 <I2C_readByteWithNACK>:

// Responsible for the SPI to receive an array of bytes, a string
uint8 I2C_readByteWithNACK(void) {
    1cf4:	df 93       	push	r29
    1cf6:	cf 93       	push	r28
    1cf8:	cd b7       	in	r28, 0x3d	; 61
    1cfa:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWEN) | (1 << TWINT);
    1cfc:	e6 e5       	ldi	r30, 0x56	; 86
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	84 e8       	ldi	r24, 0x84	; 132
    1d02:	80 83       	st	Z, r24

	while(BIT_IS_CLR(TWCR, TWINT)) {
    1d04:	e6 e5       	ldi	r30, 0x56	; 86
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	80 81       	ld	r24, Z
    1d0a:	88 23       	and	r24, r24
    1d0c:	dc f7       	brge	.-10     	; 0x1d04 <I2C_readByteWithNACK+0x10>
		// Busy Wait for TWINT set in TWCR Register
		// to ensure that data is sent successfully
	}
	return TWDR;
    1d0e:	e3 e2       	ldi	r30, 0x23	; 35
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	80 81       	ld	r24, Z
}
    1d14:	cf 91       	pop	r28
    1d16:	df 91       	pop	r29
    1d18:	08 95       	ret

00001d1a <I2C_getStatus>:

// Responsible for the SPI to receive an array of bytes, a string
uint8 I2C_getStatus(void) {
    1d1a:	df 93       	push	r29
    1d1c:	cf 93       	push	r28
    1d1e:	0f 92       	push	r0
    1d20:	cd b7       	in	r28, 0x3d	; 61
    1d22:	de b7       	in	r29, 0x3e	; 62
	uint8 I2CStatus;
	I2CStatus = TWSR & I2C_INITIALSTATUS;
    1d24:	e1 e2       	ldi	r30, 0x21	; 33
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	80 81       	ld	r24, Z
    1d2a:	88 7f       	andi	r24, 0xF8	; 248
    1d2c:	89 83       	std	Y+1, r24	; 0x01
	return I2CStatus;
    1d2e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d30:	0f 90       	pop	r0
    1d32:	cf 91       	pop	r28
    1d34:	df 91       	pop	r29
    1d36:	08 95       	ret

00001d38 <GPIO_setupPinDirection>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
GPIO_Error_t GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction) {
    1d38:	df 93       	push	r29
    1d3a:	cf 93       	push	r28
    1d3c:	00 d0       	rcall	.+0      	; 0x1d3e <GPIO_setupPinDirection+0x6>
    1d3e:	00 d0       	rcall	.+0      	; 0x1d40 <GPIO_setupPinDirection+0x8>
    1d40:	00 d0       	rcall	.+0      	; 0x1d42 <GPIO_setupPinDirection+0xa>
    1d42:	cd b7       	in	r28, 0x3d	; 61
    1d44:	de b7       	in	r29, 0x3e	; 62
    1d46:	8a 83       	std	Y+2, r24	; 0x02
    1d48:	6b 83       	std	Y+3, r22	; 0x03
    1d4a:	4c 83       	std	Y+4, r20	; 0x04
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t GPIO_Driver_Checker = NULL;
    1d4c:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    1d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d50:	88 30       	cpi	r24, 0x08	; 8
    1d52:	18 f0       	brcs	.+6      	; 0x1d5a <GPIO_setupPinDirection+0x22>
		// Checks if the entered pin number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	89 83       	std	Y+1, r24	; 0x01
    1d58:	e1 c0       	rjmp	.+450    	; 0x1f1c <GPIO_setupPinDirection+0x1e4>
	}
	else if((port_num >= NUM_OF_PORTS)) {
    1d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5c:	84 30       	cpi	r24, 0x04	; 4
    1d5e:	18 f0       	brcs	.+6      	; 0x1d66 <GPIO_setupPinDirection+0x2e>
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    1d60:	82 e0       	ldi	r24, 0x02	; 2
    1d62:	89 83       	std	Y+1, r24	; 0x01
    1d64:	db c0       	rjmp	.+438    	; 0x1f1c <GPIO_setupPinDirection+0x1e4>
	}
	else if((direction != PIN_INPUT) && (direction != PIN_OUTPUT)) {
    1d66:	8c 81       	ldd	r24, Y+4	; 0x04
    1d68:	88 23       	and	r24, r24
    1d6a:	31 f0       	breq	.+12     	; 0x1d78 <GPIO_setupPinDirection+0x40>
    1d6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d6e:	81 30       	cpi	r24, 0x01	; 1
    1d70:	19 f0       	breq	.+6      	; 0x1d78 <GPIO_setupPinDirection+0x40>
		// Checks if the entered direction is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
    1d72:	83 e0       	ldi	r24, 0x03	; 3
    1d74:	89 83       	std	Y+1, r24	; 0x01
    1d76:	d2 c0       	rjmp	.+420    	; 0x1f1c <GPIO_setupPinDirection+0x1e4>
	}
	else {
		// Setup the pin direction as required
		switch(port_num) {
    1d78:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7a:	28 2f       	mov	r18, r24
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	3e 83       	std	Y+6, r19	; 0x06
    1d80:	2d 83       	std	Y+5, r18	; 0x05
    1d82:	8d 81       	ldd	r24, Y+5	; 0x05
    1d84:	9e 81       	ldd	r25, Y+6	; 0x06
    1d86:	81 30       	cpi	r24, 0x01	; 1
    1d88:	91 05       	cpc	r25, r1
    1d8a:	09 f4       	brne	.+2      	; 0x1d8e <GPIO_setupPinDirection+0x56>
    1d8c:	43 c0       	rjmp	.+134    	; 0x1e14 <GPIO_setupPinDirection+0xdc>
    1d8e:	2d 81       	ldd	r18, Y+5	; 0x05
    1d90:	3e 81       	ldd	r19, Y+6	; 0x06
    1d92:	22 30       	cpi	r18, 0x02	; 2
    1d94:	31 05       	cpc	r19, r1
    1d96:	2c f4       	brge	.+10     	; 0x1da2 <GPIO_setupPinDirection+0x6a>
    1d98:	8d 81       	ldd	r24, Y+5	; 0x05
    1d9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d9c:	00 97       	sbiw	r24, 0x00	; 0
    1d9e:	71 f0       	breq	.+28     	; 0x1dbc <GPIO_setupPinDirection+0x84>
    1da0:	bc c0       	rjmp	.+376    	; 0x1f1a <GPIO_setupPinDirection+0x1e2>
    1da2:	2d 81       	ldd	r18, Y+5	; 0x05
    1da4:	3e 81       	ldd	r19, Y+6	; 0x06
    1da6:	22 30       	cpi	r18, 0x02	; 2
    1da8:	31 05       	cpc	r19, r1
    1daa:	09 f4       	brne	.+2      	; 0x1dae <GPIO_setupPinDirection+0x76>
    1dac:	5f c0       	rjmp	.+190    	; 0x1e6c <GPIO_setupPinDirection+0x134>
    1dae:	8d 81       	ldd	r24, Y+5	; 0x05
    1db0:	9e 81       	ldd	r25, Y+6	; 0x06
    1db2:	83 30       	cpi	r24, 0x03	; 3
    1db4:	91 05       	cpc	r25, r1
    1db6:	09 f4       	brne	.+2      	; 0x1dba <GPIO_setupPinDirection+0x82>
    1db8:	85 c0       	rjmp	.+266    	; 0x1ec4 <GPIO_setupPinDirection+0x18c>
    1dba:	af c0       	rjmp	.+350    	; 0x1f1a <GPIO_setupPinDirection+0x1e2>
		case PORT_A:
			if(direction == PIN_OUTPUT) {
    1dbc:	8c 81       	ldd	r24, Y+4	; 0x04
    1dbe:	81 30       	cpi	r24, 0x01	; 1
    1dc0:	a1 f4       	brne	.+40     	; 0x1dea <GPIO_setupPinDirection+0xb2>
				SET_BIT(DDRA, pin_num);
    1dc2:	aa e3       	ldi	r26, 0x3A	; 58
    1dc4:	b0 e0       	ldi	r27, 0x00	; 0
    1dc6:	ea e3       	ldi	r30, 0x3A	; 58
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	80 81       	ld	r24, Z
    1dcc:	48 2f       	mov	r20, r24
    1dce:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd0:	28 2f       	mov	r18, r24
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	81 e0       	ldi	r24, 0x01	; 1
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	02 2e       	mov	r0, r18
    1dda:	02 c0       	rjmp	.+4      	; 0x1de0 <GPIO_setupPinDirection+0xa8>
    1ddc:	88 0f       	add	r24, r24
    1dde:	99 1f       	adc	r25, r25
    1de0:	0a 94       	dec	r0
    1de2:	e2 f7       	brpl	.-8      	; 0x1ddc <GPIO_setupPinDirection+0xa4>
    1de4:	84 2b       	or	r24, r20
    1de6:	8c 93       	st	X, r24
    1de8:	98 c0       	rjmp	.+304    	; 0x1f1a <GPIO_setupPinDirection+0x1e2>
			}
			else {
				CLR_BIT(DDRA, pin_num);
    1dea:	aa e3       	ldi	r26, 0x3A	; 58
    1dec:	b0 e0       	ldi	r27, 0x00	; 0
    1dee:	ea e3       	ldi	r30, 0x3A	; 58
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	80 81       	ld	r24, Z
    1df4:	48 2f       	mov	r20, r24
    1df6:	8b 81       	ldd	r24, Y+3	; 0x03
    1df8:	28 2f       	mov	r18, r24
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	81 e0       	ldi	r24, 0x01	; 1
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	02 2e       	mov	r0, r18
    1e02:	02 c0       	rjmp	.+4      	; 0x1e08 <GPIO_setupPinDirection+0xd0>
    1e04:	88 0f       	add	r24, r24
    1e06:	99 1f       	adc	r25, r25
    1e08:	0a 94       	dec	r0
    1e0a:	e2 f7       	brpl	.-8      	; 0x1e04 <GPIO_setupPinDirection+0xcc>
    1e0c:	80 95       	com	r24
    1e0e:	84 23       	and	r24, r20
    1e10:	8c 93       	st	X, r24
    1e12:	83 c0       	rjmp	.+262    	; 0x1f1a <GPIO_setupPinDirection+0x1e2>
			}
			break;
		case PORT_B:
			if(direction == PIN_OUTPUT) {
    1e14:	8c 81       	ldd	r24, Y+4	; 0x04
    1e16:	81 30       	cpi	r24, 0x01	; 1
    1e18:	a1 f4       	brne	.+40     	; 0x1e42 <GPIO_setupPinDirection+0x10a>
				SET_BIT(DDRB,pin_num);
    1e1a:	a7 e3       	ldi	r26, 0x37	; 55
    1e1c:	b0 e0       	ldi	r27, 0x00	; 0
    1e1e:	e7 e3       	ldi	r30, 0x37	; 55
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	80 81       	ld	r24, Z
    1e24:	48 2f       	mov	r20, r24
    1e26:	8b 81       	ldd	r24, Y+3	; 0x03
    1e28:	28 2f       	mov	r18, r24
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	02 2e       	mov	r0, r18
    1e32:	02 c0       	rjmp	.+4      	; 0x1e38 <GPIO_setupPinDirection+0x100>
    1e34:	88 0f       	add	r24, r24
    1e36:	99 1f       	adc	r25, r25
    1e38:	0a 94       	dec	r0
    1e3a:	e2 f7       	brpl	.-8      	; 0x1e34 <GPIO_setupPinDirection+0xfc>
    1e3c:	84 2b       	or	r24, r20
    1e3e:	8c 93       	st	X, r24
    1e40:	6c c0       	rjmp	.+216    	; 0x1f1a <GPIO_setupPinDirection+0x1e2>
			}
			else {
				CLR_BIT(DDRB,pin_num);
    1e42:	a7 e3       	ldi	r26, 0x37	; 55
    1e44:	b0 e0       	ldi	r27, 0x00	; 0
    1e46:	e7 e3       	ldi	r30, 0x37	; 55
    1e48:	f0 e0       	ldi	r31, 0x00	; 0
    1e4a:	80 81       	ld	r24, Z
    1e4c:	48 2f       	mov	r20, r24
    1e4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e50:	28 2f       	mov	r18, r24
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	81 e0       	ldi	r24, 0x01	; 1
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	02 2e       	mov	r0, r18
    1e5a:	02 c0       	rjmp	.+4      	; 0x1e60 <GPIO_setupPinDirection+0x128>
    1e5c:	88 0f       	add	r24, r24
    1e5e:	99 1f       	adc	r25, r25
    1e60:	0a 94       	dec	r0
    1e62:	e2 f7       	brpl	.-8      	; 0x1e5c <GPIO_setupPinDirection+0x124>
    1e64:	80 95       	com	r24
    1e66:	84 23       	and	r24, r20
    1e68:	8c 93       	st	X, r24
    1e6a:	57 c0       	rjmp	.+174    	; 0x1f1a <GPIO_setupPinDirection+0x1e2>
			}
			break;
		case PORT_C:
			if(direction == PIN_OUTPUT) {
    1e6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e6e:	81 30       	cpi	r24, 0x01	; 1
    1e70:	a1 f4       	brne	.+40     	; 0x1e9a <GPIO_setupPinDirection+0x162>
				SET_BIT(DDRC,pin_num);
    1e72:	a4 e3       	ldi	r26, 0x34	; 52
    1e74:	b0 e0       	ldi	r27, 0x00	; 0
    1e76:	e4 e3       	ldi	r30, 0x34	; 52
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	80 81       	ld	r24, Z
    1e7c:	48 2f       	mov	r20, r24
    1e7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e80:	28 2f       	mov	r18, r24
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	02 2e       	mov	r0, r18
    1e8a:	02 c0       	rjmp	.+4      	; 0x1e90 <GPIO_setupPinDirection+0x158>
    1e8c:	88 0f       	add	r24, r24
    1e8e:	99 1f       	adc	r25, r25
    1e90:	0a 94       	dec	r0
    1e92:	e2 f7       	brpl	.-8      	; 0x1e8c <GPIO_setupPinDirection+0x154>
    1e94:	84 2b       	or	r24, r20
    1e96:	8c 93       	st	X, r24
    1e98:	40 c0       	rjmp	.+128    	; 0x1f1a <GPIO_setupPinDirection+0x1e2>
			}
			else {
				CLR_BIT(DDRC,pin_num);
    1e9a:	a4 e3       	ldi	r26, 0x34	; 52
    1e9c:	b0 e0       	ldi	r27, 0x00	; 0
    1e9e:	e4 e3       	ldi	r30, 0x34	; 52
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	80 81       	ld	r24, Z
    1ea4:	48 2f       	mov	r20, r24
    1ea6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea8:	28 2f       	mov	r18, r24
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	02 2e       	mov	r0, r18
    1eb2:	02 c0       	rjmp	.+4      	; 0x1eb8 <GPIO_setupPinDirection+0x180>
    1eb4:	88 0f       	add	r24, r24
    1eb6:	99 1f       	adc	r25, r25
    1eb8:	0a 94       	dec	r0
    1eba:	e2 f7       	brpl	.-8      	; 0x1eb4 <GPIO_setupPinDirection+0x17c>
    1ebc:	80 95       	com	r24
    1ebe:	84 23       	and	r24, r20
    1ec0:	8c 93       	st	X, r24
    1ec2:	2b c0       	rjmp	.+86     	; 0x1f1a <GPIO_setupPinDirection+0x1e2>
			}
			break;
		case PORT_D:
			if(direction == PIN_OUTPUT) {
    1ec4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ec6:	81 30       	cpi	r24, 0x01	; 1
    1ec8:	a1 f4       	brne	.+40     	; 0x1ef2 <GPIO_setupPinDirection+0x1ba>
				SET_BIT(DDRD,pin_num);
    1eca:	a1 e3       	ldi	r26, 0x31	; 49
    1ecc:	b0 e0       	ldi	r27, 0x00	; 0
    1ece:	e1 e3       	ldi	r30, 0x31	; 49
    1ed0:	f0 e0       	ldi	r31, 0x00	; 0
    1ed2:	80 81       	ld	r24, Z
    1ed4:	48 2f       	mov	r20, r24
    1ed6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed8:	28 2f       	mov	r18, r24
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	02 2e       	mov	r0, r18
    1ee2:	02 c0       	rjmp	.+4      	; 0x1ee8 <GPIO_setupPinDirection+0x1b0>
    1ee4:	88 0f       	add	r24, r24
    1ee6:	99 1f       	adc	r25, r25
    1ee8:	0a 94       	dec	r0
    1eea:	e2 f7       	brpl	.-8      	; 0x1ee4 <GPIO_setupPinDirection+0x1ac>
    1eec:	84 2b       	or	r24, r20
    1eee:	8c 93       	st	X, r24
    1ef0:	14 c0       	rjmp	.+40     	; 0x1f1a <GPIO_setupPinDirection+0x1e2>
			}
			else {
				CLR_BIT(DDRD,pin_num);
    1ef2:	a1 e3       	ldi	r26, 0x31	; 49
    1ef4:	b0 e0       	ldi	r27, 0x00	; 0
    1ef6:	e1 e3       	ldi	r30, 0x31	; 49
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	80 81       	ld	r24, Z
    1efc:	48 2f       	mov	r20, r24
    1efe:	8b 81       	ldd	r24, Y+3	; 0x03
    1f00:	28 2f       	mov	r18, r24
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	81 e0       	ldi	r24, 0x01	; 1
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	02 2e       	mov	r0, r18
    1f0a:	02 c0       	rjmp	.+4      	; 0x1f10 <GPIO_setupPinDirection+0x1d8>
    1f0c:	88 0f       	add	r24, r24
    1f0e:	99 1f       	adc	r25, r25
    1f10:	0a 94       	dec	r0
    1f12:	e2 f7       	brpl	.-8      	; 0x1f0c <GPIO_setupPinDirection+0x1d4>
    1f14:	80 95       	com	r24
    1f16:	84 23       	and	r24, r20
    1f18:	8c 93       	st	X, r24
			}
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    1f1a:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    1f1c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f1e:	26 96       	adiw	r28, 0x06	; 6
    1f20:	0f b6       	in	r0, 0x3f	; 63
    1f22:	f8 94       	cli
    1f24:	de bf       	out	0x3e, r29	; 62
    1f26:	0f be       	out	0x3f, r0	; 63
    1f28:	cd bf       	out	0x3d, r28	; 61
    1f2a:	cf 91       	pop	r28
    1f2c:	df 91       	pop	r29
    1f2e:	08 95       	ret

00001f30 <GPIO_writePin>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
GPIO_Error_t GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value) {
    1f30:	df 93       	push	r29
    1f32:	cf 93       	push	r28
    1f34:	00 d0       	rcall	.+0      	; 0x1f36 <GPIO_writePin+0x6>
    1f36:	00 d0       	rcall	.+0      	; 0x1f38 <GPIO_writePin+0x8>
    1f38:	00 d0       	rcall	.+0      	; 0x1f3a <GPIO_writePin+0xa>
    1f3a:	cd b7       	in	r28, 0x3d	; 61
    1f3c:	de b7       	in	r29, 0x3e	; 62
    1f3e:	8a 83       	std	Y+2, r24	; 0x02
    1f40:	6b 83       	std	Y+3, r22	; 0x03
    1f42:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t GPIO_Driver_Checker = NULL;
    1f44:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    1f46:	8b 81       	ldd	r24, Y+3	; 0x03
    1f48:	88 30       	cpi	r24, 0x08	; 8
    1f4a:	18 f0       	brcs	.+6      	; 0x1f52 <GPIO_writePin+0x22>
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
    1f4c:	81 e0       	ldi	r24, 0x01	; 1
    1f4e:	89 83       	std	Y+1, r24	; 0x01
    1f50:	e1 c0       	rjmp	.+450    	; 0x2114 <GPIO_writePin+0x1e4>
	}
	else if((port_num >= NUM_OF_PORTS)) {
    1f52:	8a 81       	ldd	r24, Y+2	; 0x02
    1f54:	84 30       	cpi	r24, 0x04	; 4
    1f56:	18 f0       	brcs	.+6      	; 0x1f5e <GPIO_writePin+0x2e>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    1f58:	82 e0       	ldi	r24, 0x02	; 2
    1f5a:	89 83       	std	Y+1, r24	; 0x01
    1f5c:	db c0       	rjmp	.+438    	; 0x2114 <GPIO_writePin+0x1e4>
	}
	else if((value != LOGIC_HIGH) && (value != LOGIC_LOW)) {
    1f5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f60:	81 30       	cpi	r24, 0x01	; 1
    1f62:	31 f0       	breq	.+12     	; 0x1f70 <GPIO_writePin+0x40>
    1f64:	8c 81       	ldd	r24, Y+4	; 0x04
    1f66:	88 23       	and	r24, r24
    1f68:	19 f0       	breq	.+6      	; 0x1f70 <GPIO_writePin+0x40>
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
    1f6a:	83 e0       	ldi	r24, 0x03	; 3
    1f6c:	89 83       	std	Y+1, r24	; 0x01
    1f6e:	d2 c0       	rjmp	.+420    	; 0x2114 <GPIO_writePin+0x1e4>
	}
	else {
		switch(port_num) {
    1f70:	8a 81       	ldd	r24, Y+2	; 0x02
    1f72:	28 2f       	mov	r18, r24
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	3e 83       	std	Y+6, r19	; 0x06
    1f78:	2d 83       	std	Y+5, r18	; 0x05
    1f7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f7e:	81 30       	cpi	r24, 0x01	; 1
    1f80:	91 05       	cpc	r25, r1
    1f82:	09 f4       	brne	.+2      	; 0x1f86 <GPIO_writePin+0x56>
    1f84:	43 c0       	rjmp	.+134    	; 0x200c <GPIO_writePin+0xdc>
    1f86:	2d 81       	ldd	r18, Y+5	; 0x05
    1f88:	3e 81       	ldd	r19, Y+6	; 0x06
    1f8a:	22 30       	cpi	r18, 0x02	; 2
    1f8c:	31 05       	cpc	r19, r1
    1f8e:	2c f4       	brge	.+10     	; 0x1f9a <GPIO_writePin+0x6a>
    1f90:	8d 81       	ldd	r24, Y+5	; 0x05
    1f92:	9e 81       	ldd	r25, Y+6	; 0x06
    1f94:	00 97       	sbiw	r24, 0x00	; 0
    1f96:	71 f0       	breq	.+28     	; 0x1fb4 <GPIO_writePin+0x84>
    1f98:	bc c0       	rjmp	.+376    	; 0x2112 <GPIO_writePin+0x1e2>
    1f9a:	2d 81       	ldd	r18, Y+5	; 0x05
    1f9c:	3e 81       	ldd	r19, Y+6	; 0x06
    1f9e:	22 30       	cpi	r18, 0x02	; 2
    1fa0:	31 05       	cpc	r19, r1
    1fa2:	09 f4       	brne	.+2      	; 0x1fa6 <GPIO_writePin+0x76>
    1fa4:	5f c0       	rjmp	.+190    	; 0x2064 <GPIO_writePin+0x134>
    1fa6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fa8:	9e 81       	ldd	r25, Y+6	; 0x06
    1faa:	83 30       	cpi	r24, 0x03	; 3
    1fac:	91 05       	cpc	r25, r1
    1fae:	09 f4       	brne	.+2      	; 0x1fb2 <GPIO_writePin+0x82>
    1fb0:	85 c0       	rjmp	.+266    	; 0x20bc <GPIO_writePin+0x18c>
    1fb2:	af c0       	rjmp	.+350    	; 0x2112 <GPIO_writePin+0x1e2>
		case PORT_A:
			if(value == LOGIC_HIGH) {
    1fb4:	8c 81       	ldd	r24, Y+4	; 0x04
    1fb6:	81 30       	cpi	r24, 0x01	; 1
    1fb8:	a1 f4       	brne	.+40     	; 0x1fe2 <GPIO_writePin+0xb2>
				SET_BIT(PORTA,pin_num);
    1fba:	ab e3       	ldi	r26, 0x3B	; 59
    1fbc:	b0 e0       	ldi	r27, 0x00	; 0
    1fbe:	eb e3       	ldi	r30, 0x3B	; 59
    1fc0:	f0 e0       	ldi	r31, 0x00	; 0
    1fc2:	80 81       	ld	r24, Z
    1fc4:	48 2f       	mov	r20, r24
    1fc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc8:	28 2f       	mov	r18, r24
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	81 e0       	ldi	r24, 0x01	; 1
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	02 2e       	mov	r0, r18
    1fd2:	02 c0       	rjmp	.+4      	; 0x1fd8 <GPIO_writePin+0xa8>
    1fd4:	88 0f       	add	r24, r24
    1fd6:	99 1f       	adc	r25, r25
    1fd8:	0a 94       	dec	r0
    1fda:	e2 f7       	brpl	.-8      	; 0x1fd4 <GPIO_writePin+0xa4>
    1fdc:	84 2b       	or	r24, r20
    1fde:	8c 93       	st	X, r24
    1fe0:	98 c0       	rjmp	.+304    	; 0x2112 <GPIO_writePin+0x1e2>
			}
			else {
				CLR_BIT(PORTA,pin_num);
    1fe2:	ab e3       	ldi	r26, 0x3B	; 59
    1fe4:	b0 e0       	ldi	r27, 0x00	; 0
    1fe6:	eb e3       	ldi	r30, 0x3B	; 59
    1fe8:	f0 e0       	ldi	r31, 0x00	; 0
    1fea:	80 81       	ld	r24, Z
    1fec:	48 2f       	mov	r20, r24
    1fee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff0:	28 2f       	mov	r18, r24
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	02 2e       	mov	r0, r18
    1ffa:	02 c0       	rjmp	.+4      	; 0x2000 <GPIO_writePin+0xd0>
    1ffc:	88 0f       	add	r24, r24
    1ffe:	99 1f       	adc	r25, r25
    2000:	0a 94       	dec	r0
    2002:	e2 f7       	brpl	.-8      	; 0x1ffc <GPIO_writePin+0xcc>
    2004:	80 95       	com	r24
    2006:	84 23       	and	r24, r20
    2008:	8c 93       	st	X, r24
    200a:	83 c0       	rjmp	.+262    	; 0x2112 <GPIO_writePin+0x1e2>
			}
			break;
		case PORT_B:
			if(value == LOGIC_HIGH) {
    200c:	8c 81       	ldd	r24, Y+4	; 0x04
    200e:	81 30       	cpi	r24, 0x01	; 1
    2010:	a1 f4       	brne	.+40     	; 0x203a <GPIO_writePin+0x10a>
				SET_BIT(PORTB,pin_num);
    2012:	a8 e3       	ldi	r26, 0x38	; 56
    2014:	b0 e0       	ldi	r27, 0x00	; 0
    2016:	e8 e3       	ldi	r30, 0x38	; 56
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	80 81       	ld	r24, Z
    201c:	48 2f       	mov	r20, r24
    201e:	8b 81       	ldd	r24, Y+3	; 0x03
    2020:	28 2f       	mov	r18, r24
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	81 e0       	ldi	r24, 0x01	; 1
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	02 2e       	mov	r0, r18
    202a:	02 c0       	rjmp	.+4      	; 0x2030 <GPIO_writePin+0x100>
    202c:	88 0f       	add	r24, r24
    202e:	99 1f       	adc	r25, r25
    2030:	0a 94       	dec	r0
    2032:	e2 f7       	brpl	.-8      	; 0x202c <GPIO_writePin+0xfc>
    2034:	84 2b       	or	r24, r20
    2036:	8c 93       	st	X, r24
    2038:	6c c0       	rjmp	.+216    	; 0x2112 <GPIO_writePin+0x1e2>
			}
			else {
				CLR_BIT(PORTB,pin_num);
    203a:	a8 e3       	ldi	r26, 0x38	; 56
    203c:	b0 e0       	ldi	r27, 0x00	; 0
    203e:	e8 e3       	ldi	r30, 0x38	; 56
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	80 81       	ld	r24, Z
    2044:	48 2f       	mov	r20, r24
    2046:	8b 81       	ldd	r24, Y+3	; 0x03
    2048:	28 2f       	mov	r18, r24
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	81 e0       	ldi	r24, 0x01	; 1
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	02 2e       	mov	r0, r18
    2052:	02 c0       	rjmp	.+4      	; 0x2058 <GPIO_writePin+0x128>
    2054:	88 0f       	add	r24, r24
    2056:	99 1f       	adc	r25, r25
    2058:	0a 94       	dec	r0
    205a:	e2 f7       	brpl	.-8      	; 0x2054 <GPIO_writePin+0x124>
    205c:	80 95       	com	r24
    205e:	84 23       	and	r24, r20
    2060:	8c 93       	st	X, r24
    2062:	57 c0       	rjmp	.+174    	; 0x2112 <GPIO_writePin+0x1e2>
			}
			break;
		case PORT_C:
			if(value == LOGIC_HIGH) {
    2064:	8c 81       	ldd	r24, Y+4	; 0x04
    2066:	81 30       	cpi	r24, 0x01	; 1
    2068:	a1 f4       	brne	.+40     	; 0x2092 <GPIO_writePin+0x162>
				SET_BIT(PORTC,pin_num);
    206a:	a5 e3       	ldi	r26, 0x35	; 53
    206c:	b0 e0       	ldi	r27, 0x00	; 0
    206e:	e5 e3       	ldi	r30, 0x35	; 53
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	80 81       	ld	r24, Z
    2074:	48 2f       	mov	r20, r24
    2076:	8b 81       	ldd	r24, Y+3	; 0x03
    2078:	28 2f       	mov	r18, r24
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	81 e0       	ldi	r24, 0x01	; 1
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	02 2e       	mov	r0, r18
    2082:	02 c0       	rjmp	.+4      	; 0x2088 <GPIO_writePin+0x158>
    2084:	88 0f       	add	r24, r24
    2086:	99 1f       	adc	r25, r25
    2088:	0a 94       	dec	r0
    208a:	e2 f7       	brpl	.-8      	; 0x2084 <GPIO_writePin+0x154>
    208c:	84 2b       	or	r24, r20
    208e:	8c 93       	st	X, r24
    2090:	40 c0       	rjmp	.+128    	; 0x2112 <GPIO_writePin+0x1e2>
			}
			else {
				CLR_BIT(PORTC,pin_num);
    2092:	a5 e3       	ldi	r26, 0x35	; 53
    2094:	b0 e0       	ldi	r27, 0x00	; 0
    2096:	e5 e3       	ldi	r30, 0x35	; 53
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	80 81       	ld	r24, Z
    209c:	48 2f       	mov	r20, r24
    209e:	8b 81       	ldd	r24, Y+3	; 0x03
    20a0:	28 2f       	mov	r18, r24
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	81 e0       	ldi	r24, 0x01	; 1
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	02 2e       	mov	r0, r18
    20aa:	02 c0       	rjmp	.+4      	; 0x20b0 <GPIO_writePin+0x180>
    20ac:	88 0f       	add	r24, r24
    20ae:	99 1f       	adc	r25, r25
    20b0:	0a 94       	dec	r0
    20b2:	e2 f7       	brpl	.-8      	; 0x20ac <GPIO_writePin+0x17c>
    20b4:	80 95       	com	r24
    20b6:	84 23       	and	r24, r20
    20b8:	8c 93       	st	X, r24
    20ba:	2b c0       	rjmp	.+86     	; 0x2112 <GPIO_writePin+0x1e2>
			}
			break;
		case PORT_D:
			if(value == LOGIC_HIGH) {
    20bc:	8c 81       	ldd	r24, Y+4	; 0x04
    20be:	81 30       	cpi	r24, 0x01	; 1
    20c0:	a1 f4       	brne	.+40     	; 0x20ea <GPIO_writePin+0x1ba>
				SET_BIT(PORTD,pin_num);
    20c2:	a2 e3       	ldi	r26, 0x32	; 50
    20c4:	b0 e0       	ldi	r27, 0x00	; 0
    20c6:	e2 e3       	ldi	r30, 0x32	; 50
    20c8:	f0 e0       	ldi	r31, 0x00	; 0
    20ca:	80 81       	ld	r24, Z
    20cc:	48 2f       	mov	r20, r24
    20ce:	8b 81       	ldd	r24, Y+3	; 0x03
    20d0:	28 2f       	mov	r18, r24
    20d2:	30 e0       	ldi	r19, 0x00	; 0
    20d4:	81 e0       	ldi	r24, 0x01	; 1
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	02 2e       	mov	r0, r18
    20da:	02 c0       	rjmp	.+4      	; 0x20e0 <GPIO_writePin+0x1b0>
    20dc:	88 0f       	add	r24, r24
    20de:	99 1f       	adc	r25, r25
    20e0:	0a 94       	dec	r0
    20e2:	e2 f7       	brpl	.-8      	; 0x20dc <GPIO_writePin+0x1ac>
    20e4:	84 2b       	or	r24, r20
    20e6:	8c 93       	st	X, r24
    20e8:	14 c0       	rjmp	.+40     	; 0x2112 <GPIO_writePin+0x1e2>
			}
			else {
				CLR_BIT(PORTD,pin_num);
    20ea:	a2 e3       	ldi	r26, 0x32	; 50
    20ec:	b0 e0       	ldi	r27, 0x00	; 0
    20ee:	e2 e3       	ldi	r30, 0x32	; 50
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	80 81       	ld	r24, Z
    20f4:	48 2f       	mov	r20, r24
    20f6:	8b 81       	ldd	r24, Y+3	; 0x03
    20f8:	28 2f       	mov	r18, r24
    20fa:	30 e0       	ldi	r19, 0x00	; 0
    20fc:	81 e0       	ldi	r24, 0x01	; 1
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	02 2e       	mov	r0, r18
    2102:	02 c0       	rjmp	.+4      	; 0x2108 <GPIO_writePin+0x1d8>
    2104:	88 0f       	add	r24, r24
    2106:	99 1f       	adc	r25, r25
    2108:	0a 94       	dec	r0
    210a:	e2 f7       	brpl	.-8      	; 0x2104 <GPIO_writePin+0x1d4>
    210c:	80 95       	com	r24
    210e:	84 23       	and	r24, r20
    2110:	8c 93       	st	X, r24
			}
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    2112:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    2114:	89 81       	ldd	r24, Y+1	; 0x01
}
    2116:	26 96       	adiw	r28, 0x06	; 6
    2118:	0f b6       	in	r0, 0x3f	; 63
    211a:	f8 94       	cli
    211c:	de bf       	out	0x3e, r29	; 62
    211e:	0f be       	out	0x3f, r0	; 63
    2120:	cd bf       	out	0x3d, r28	; 61
    2122:	cf 91       	pop	r28
    2124:	df 91       	pop	r29
    2126:	08 95       	ret

00002128 <GPIO_togglePin>:
/*
 * Description :
 * Toggles a certain pin when requested.
 * If the input port number or pin number are not correct, The function will return an error.
 */
GPIO_Error_t GPIO_togglePin(uint8 port_num, uint8 pin_num) {
    2128:	df 93       	push	r29
    212a:	cf 93       	push	r28
    212c:	00 d0       	rcall	.+0      	; 0x212e <GPIO_togglePin+0x6>
    212e:	00 d0       	rcall	.+0      	; 0x2130 <GPIO_togglePin+0x8>
    2130:	0f 92       	push	r0
    2132:	cd b7       	in	r28, 0x3d	; 61
    2134:	de b7       	in	r29, 0x3e	; 62
    2136:	8a 83       	std	Y+2, r24	; 0x02
    2138:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t GPIO_Driver_Checker = NULL;
    213a:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    213c:	8b 81       	ldd	r24, Y+3	; 0x03
    213e:	88 30       	cpi	r24, 0x08	; 8
    2140:	18 f0       	brcs	.+6      	; 0x2148 <GPIO_togglePin+0x20>
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
    2142:	81 e0       	ldi	r24, 0x01	; 1
    2144:	89 83       	std	Y+1, r24	; 0x01
    2146:	75 c0       	rjmp	.+234    	; 0x2232 <GPIO_togglePin+0x10a>
	}
	else if((port_num >= NUM_OF_PORTS)) {
    2148:	8a 81       	ldd	r24, Y+2	; 0x02
    214a:	84 30       	cpi	r24, 0x04	; 4
    214c:	18 f0       	brcs	.+6      	; 0x2154 <GPIO_togglePin+0x2c>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    214e:	82 e0       	ldi	r24, 0x02	; 2
    2150:	89 83       	std	Y+1, r24	; 0x01
    2152:	6f c0       	rjmp	.+222    	; 0x2232 <GPIO_togglePin+0x10a>
	}
	else {
		switch(port_num) {
    2154:	8a 81       	ldd	r24, Y+2	; 0x02
    2156:	28 2f       	mov	r18, r24
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	3d 83       	std	Y+5, r19	; 0x05
    215c:	2c 83       	std	Y+4, r18	; 0x04
    215e:	8c 81       	ldd	r24, Y+4	; 0x04
    2160:	9d 81       	ldd	r25, Y+5	; 0x05
    2162:	81 30       	cpi	r24, 0x01	; 1
    2164:	91 05       	cpc	r25, r1
    2166:	49 f1       	breq	.+82     	; 0x21ba <GPIO_togglePin+0x92>
    2168:	2c 81       	ldd	r18, Y+4	; 0x04
    216a:	3d 81       	ldd	r19, Y+5	; 0x05
    216c:	22 30       	cpi	r18, 0x02	; 2
    216e:	31 05       	cpc	r19, r1
    2170:	2c f4       	brge	.+10     	; 0x217c <GPIO_togglePin+0x54>
    2172:	8c 81       	ldd	r24, Y+4	; 0x04
    2174:	9d 81       	ldd	r25, Y+5	; 0x05
    2176:	00 97       	sbiw	r24, 0x00	; 0
    2178:	61 f0       	breq	.+24     	; 0x2192 <GPIO_togglePin+0x6a>
    217a:	5a c0       	rjmp	.+180    	; 0x2230 <GPIO_togglePin+0x108>
    217c:	2c 81       	ldd	r18, Y+4	; 0x04
    217e:	3d 81       	ldd	r19, Y+5	; 0x05
    2180:	22 30       	cpi	r18, 0x02	; 2
    2182:	31 05       	cpc	r19, r1
    2184:	71 f1       	breq	.+92     	; 0x21e2 <GPIO_togglePin+0xba>
    2186:	8c 81       	ldd	r24, Y+4	; 0x04
    2188:	9d 81       	ldd	r25, Y+5	; 0x05
    218a:	83 30       	cpi	r24, 0x03	; 3
    218c:	91 05       	cpc	r25, r1
    218e:	e9 f1       	breq	.+122    	; 0x220a <GPIO_togglePin+0xe2>
    2190:	4f c0       	rjmp	.+158    	; 0x2230 <GPIO_togglePin+0x108>
		case PORT_A:
			TOG_BIT(PORTA,pin_num);
    2192:	ab e3       	ldi	r26, 0x3B	; 59
    2194:	b0 e0       	ldi	r27, 0x00	; 0
    2196:	eb e3       	ldi	r30, 0x3B	; 59
    2198:	f0 e0       	ldi	r31, 0x00	; 0
    219a:	80 81       	ld	r24, Z
    219c:	48 2f       	mov	r20, r24
    219e:	8b 81       	ldd	r24, Y+3	; 0x03
    21a0:	28 2f       	mov	r18, r24
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	81 e0       	ldi	r24, 0x01	; 1
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	02 2e       	mov	r0, r18
    21aa:	02 c0       	rjmp	.+4      	; 0x21b0 <GPIO_togglePin+0x88>
    21ac:	88 0f       	add	r24, r24
    21ae:	99 1f       	adc	r25, r25
    21b0:	0a 94       	dec	r0
    21b2:	e2 f7       	brpl	.-8      	; 0x21ac <GPIO_togglePin+0x84>
    21b4:	84 27       	eor	r24, r20
    21b6:	8c 93       	st	X, r24
    21b8:	3b c0       	rjmp	.+118    	; 0x2230 <GPIO_togglePin+0x108>
			break;
		case PORT_B:
			TOG_BIT(PORTB,pin_num);
    21ba:	a8 e3       	ldi	r26, 0x38	; 56
    21bc:	b0 e0       	ldi	r27, 0x00	; 0
    21be:	e8 e3       	ldi	r30, 0x38	; 56
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	80 81       	ld	r24, Z
    21c4:	48 2f       	mov	r20, r24
    21c6:	8b 81       	ldd	r24, Y+3	; 0x03
    21c8:	28 2f       	mov	r18, r24
    21ca:	30 e0       	ldi	r19, 0x00	; 0
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	02 2e       	mov	r0, r18
    21d2:	02 c0       	rjmp	.+4      	; 0x21d8 <GPIO_togglePin+0xb0>
    21d4:	88 0f       	add	r24, r24
    21d6:	99 1f       	adc	r25, r25
    21d8:	0a 94       	dec	r0
    21da:	e2 f7       	brpl	.-8      	; 0x21d4 <GPIO_togglePin+0xac>
    21dc:	84 27       	eor	r24, r20
    21de:	8c 93       	st	X, r24
    21e0:	27 c0       	rjmp	.+78     	; 0x2230 <GPIO_togglePin+0x108>
			break;
		case PORT_C:
			TOG_BIT(PORTC,pin_num);
    21e2:	a5 e3       	ldi	r26, 0x35	; 53
    21e4:	b0 e0       	ldi	r27, 0x00	; 0
    21e6:	e5 e3       	ldi	r30, 0x35	; 53
    21e8:	f0 e0       	ldi	r31, 0x00	; 0
    21ea:	80 81       	ld	r24, Z
    21ec:	48 2f       	mov	r20, r24
    21ee:	8b 81       	ldd	r24, Y+3	; 0x03
    21f0:	28 2f       	mov	r18, r24
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	81 e0       	ldi	r24, 0x01	; 1
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	02 2e       	mov	r0, r18
    21fa:	02 c0       	rjmp	.+4      	; 0x2200 <GPIO_togglePin+0xd8>
    21fc:	88 0f       	add	r24, r24
    21fe:	99 1f       	adc	r25, r25
    2200:	0a 94       	dec	r0
    2202:	e2 f7       	brpl	.-8      	; 0x21fc <GPIO_togglePin+0xd4>
    2204:	84 27       	eor	r24, r20
    2206:	8c 93       	st	X, r24
    2208:	13 c0       	rjmp	.+38     	; 0x2230 <GPIO_togglePin+0x108>
			break;
		case PORT_D:
			TOG_BIT(PORTD,pin_num);
    220a:	a2 e3       	ldi	r26, 0x32	; 50
    220c:	b0 e0       	ldi	r27, 0x00	; 0
    220e:	e2 e3       	ldi	r30, 0x32	; 50
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	80 81       	ld	r24, Z
    2214:	48 2f       	mov	r20, r24
    2216:	8b 81       	ldd	r24, Y+3	; 0x03
    2218:	28 2f       	mov	r18, r24
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	81 e0       	ldi	r24, 0x01	; 1
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	02 2e       	mov	r0, r18
    2222:	02 c0       	rjmp	.+4      	; 0x2228 <GPIO_togglePin+0x100>
    2224:	88 0f       	add	r24, r24
    2226:	99 1f       	adc	r25, r25
    2228:	0a 94       	dec	r0
    222a:	e2 f7       	brpl	.-8      	; 0x2224 <GPIO_togglePin+0xfc>
    222c:	84 27       	eor	r24, r20
    222e:	8c 93       	st	X, r24
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    2230:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    2232:	89 81       	ldd	r24, Y+1	; 0x01
}
    2234:	0f 90       	pop	r0
    2236:	0f 90       	pop	r0
    2238:	0f 90       	pop	r0
    223a:	0f 90       	pop	r0
    223c:	0f 90       	pop	r0
    223e:	cf 91       	pop	r28
    2240:	df 91       	pop	r29
    2242:	08 95       	ret

00002244 <GPIO_readPin>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return an error.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num) {
    2244:	df 93       	push	r29
    2246:	cf 93       	push	r28
    2248:	cd b7       	in	r28, 0x3d	; 61
    224a:	de b7       	in	r29, 0x3e	; 62
    224c:	27 97       	sbiw	r28, 0x07	; 7
    224e:	0f b6       	in	r0, 0x3f	; 63
    2250:	f8 94       	cli
    2252:	de bf       	out	0x3e, r29	; 62
    2254:	0f be       	out	0x3f, r0	; 63
    2256:	cd bf       	out	0x3d, r28	; 61
    2258:	8b 83       	std	Y+3, r24	; 0x03
    225a:	6c 83       	std	Y+4, r22	; 0x04
	uint8 pin_value = LOGIC_LOW;
    225c:	1a 82       	std	Y+2, r1	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t GPIO_Driver_Checker = NULL;
    225e:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    2260:	8c 81       	ldd	r24, Y+4	; 0x04
    2262:	88 30       	cpi	r24, 0x08	; 8
    2264:	28 f0       	brcs	.+10     	; 0x2270 <GPIO_readPin+0x2c>
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
    2266:	81 e0       	ldi	r24, 0x01	; 1
    2268:	89 83       	std	Y+1, r24	; 0x01
		return GPIO_Driver_Checker;
    226a:	29 81       	ldd	r18, Y+1	; 0x01
    226c:	2f 83       	std	Y+7, r18	; 0x07
    226e:	8b c0       	rjmp	.+278    	; 0x2386 <GPIO_readPin+0x142>
	}
	else if((port_num >= NUM_OF_PORTS)) {
    2270:	8b 81       	ldd	r24, Y+3	; 0x03
    2272:	84 30       	cpi	r24, 0x04	; 4
    2274:	28 f0       	brcs	.+10     	; 0x2280 <GPIO_readPin+0x3c>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    2276:	82 e0       	ldi	r24, 0x02	; 2
    2278:	89 83       	std	Y+1, r24	; 0x01
		return GPIO_Driver_Checker;
    227a:	39 81       	ldd	r19, Y+1	; 0x01
    227c:	3f 83       	std	Y+7, r19	; 0x07
    227e:	83 c0       	rjmp	.+262    	; 0x2386 <GPIO_readPin+0x142>
	}
	else {
		/* Read the pin value as required */
		switch(port_num) {
    2280:	8b 81       	ldd	r24, Y+3	; 0x03
    2282:	48 2f       	mov	r20, r24
    2284:	50 e0       	ldi	r21, 0x00	; 0
    2286:	5e 83       	std	Y+6, r21	; 0x06
    2288:	4d 83       	std	Y+5, r20	; 0x05
    228a:	8d 81       	ldd	r24, Y+5	; 0x05
    228c:	9e 81       	ldd	r25, Y+6	; 0x06
    228e:	81 30       	cpi	r24, 0x01	; 1
    2290:	91 05       	cpc	r25, r1
    2292:	79 f1       	breq	.+94     	; 0x22f2 <GPIO_readPin+0xae>
    2294:	2d 81       	ldd	r18, Y+5	; 0x05
    2296:	3e 81       	ldd	r19, Y+6	; 0x06
    2298:	22 30       	cpi	r18, 0x02	; 2
    229a:	31 05       	cpc	r19, r1
    229c:	34 f4       	brge	.+12     	; 0x22aa <GPIO_readPin+0x66>
    229e:	4d 81       	ldd	r20, Y+5	; 0x05
    22a0:	5e 81       	ldd	r21, Y+6	; 0x06
    22a2:	41 15       	cp	r20, r1
    22a4:	51 05       	cpc	r21, r1
    22a6:	69 f0       	breq	.+26     	; 0x22c2 <GPIO_readPin+0x7e>
    22a8:	6b c0       	rjmp	.+214    	; 0x2380 <GPIO_readPin+0x13c>
    22aa:	8d 81       	ldd	r24, Y+5	; 0x05
    22ac:	9e 81       	ldd	r25, Y+6	; 0x06
    22ae:	82 30       	cpi	r24, 0x02	; 2
    22b0:	91 05       	cpc	r25, r1
    22b2:	b9 f1       	breq	.+110    	; 0x2322 <GPIO_readPin+0xde>
    22b4:	2d 81       	ldd	r18, Y+5	; 0x05
    22b6:	3e 81       	ldd	r19, Y+6	; 0x06
    22b8:	23 30       	cpi	r18, 0x03	; 3
    22ba:	31 05       	cpc	r19, r1
    22bc:	09 f4       	brne	.+2      	; 0x22c0 <GPIO_readPin+0x7c>
    22be:	49 c0       	rjmp	.+146    	; 0x2352 <GPIO_readPin+0x10e>
    22c0:	5f c0       	rjmp	.+190    	; 0x2380 <GPIO_readPin+0x13c>
		case PORT_A:
			// Checks if the bit equals '1' or not
			if(BIT_IS_SET(PINA,pin_num)) {
    22c2:	e9 e3       	ldi	r30, 0x39	; 57
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	80 81       	ld	r24, Z
    22c8:	28 2f       	mov	r18, r24
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	8c 81       	ldd	r24, Y+4	; 0x04
    22ce:	88 2f       	mov	r24, r24
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	a9 01       	movw	r20, r18
    22d4:	02 c0       	rjmp	.+4      	; 0x22da <GPIO_readPin+0x96>
    22d6:	55 95       	asr	r21
    22d8:	47 95       	ror	r20
    22da:	8a 95       	dec	r24
    22dc:	e2 f7       	brpl	.-8      	; 0x22d6 <GPIO_readPin+0x92>
    22de:	ca 01       	movw	r24, r20
    22e0:	81 70       	andi	r24, 0x01	; 1
    22e2:	90 70       	andi	r25, 0x00	; 0
    22e4:	88 23       	and	r24, r24
    22e6:	19 f0       	breq	.+6      	; 0x22ee <GPIO_readPin+0xaa>
				pin_value = LOGIC_HIGH;
    22e8:	81 e0       	ldi	r24, 0x01	; 1
    22ea:	8a 83       	std	Y+2, r24	; 0x02
    22ec:	49 c0       	rjmp	.+146    	; 0x2380 <GPIO_readPin+0x13c>
			}
			else {
				pin_value = LOGIC_LOW;
    22ee:	1a 82       	std	Y+2, r1	; 0x02
    22f0:	47 c0       	rjmp	.+142    	; 0x2380 <GPIO_readPin+0x13c>
			}
			break;
		case PORT_B:
			if(BIT_IS_SET(PINB,pin_num)) {
    22f2:	e6 e3       	ldi	r30, 0x36	; 54
    22f4:	f0 e0       	ldi	r31, 0x00	; 0
    22f6:	80 81       	ld	r24, Z
    22f8:	28 2f       	mov	r18, r24
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	8c 81       	ldd	r24, Y+4	; 0x04
    22fe:	88 2f       	mov	r24, r24
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	a9 01       	movw	r20, r18
    2304:	02 c0       	rjmp	.+4      	; 0x230a <GPIO_readPin+0xc6>
    2306:	55 95       	asr	r21
    2308:	47 95       	ror	r20
    230a:	8a 95       	dec	r24
    230c:	e2 f7       	brpl	.-8      	; 0x2306 <GPIO_readPin+0xc2>
    230e:	ca 01       	movw	r24, r20
    2310:	81 70       	andi	r24, 0x01	; 1
    2312:	90 70       	andi	r25, 0x00	; 0
    2314:	88 23       	and	r24, r24
    2316:	19 f0       	breq	.+6      	; 0x231e <GPIO_readPin+0xda>
				pin_value = LOGIC_HIGH;
    2318:	81 e0       	ldi	r24, 0x01	; 1
    231a:	8a 83       	std	Y+2, r24	; 0x02
    231c:	31 c0       	rjmp	.+98     	; 0x2380 <GPIO_readPin+0x13c>
			}
			else {
				pin_value = LOGIC_LOW;
    231e:	1a 82       	std	Y+2, r1	; 0x02
    2320:	2f c0       	rjmp	.+94     	; 0x2380 <GPIO_readPin+0x13c>
			}
			break;
		case PORT_C:
			if(BIT_IS_SET(PINC,pin_num)) {
    2322:	e3 e3       	ldi	r30, 0x33	; 51
    2324:	f0 e0       	ldi	r31, 0x00	; 0
    2326:	80 81       	ld	r24, Z
    2328:	28 2f       	mov	r18, r24
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	8c 81       	ldd	r24, Y+4	; 0x04
    232e:	88 2f       	mov	r24, r24
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	a9 01       	movw	r20, r18
    2334:	02 c0       	rjmp	.+4      	; 0x233a <GPIO_readPin+0xf6>
    2336:	55 95       	asr	r21
    2338:	47 95       	ror	r20
    233a:	8a 95       	dec	r24
    233c:	e2 f7       	brpl	.-8      	; 0x2336 <GPIO_readPin+0xf2>
    233e:	ca 01       	movw	r24, r20
    2340:	81 70       	andi	r24, 0x01	; 1
    2342:	90 70       	andi	r25, 0x00	; 0
    2344:	88 23       	and	r24, r24
    2346:	19 f0       	breq	.+6      	; 0x234e <GPIO_readPin+0x10a>
				pin_value = LOGIC_HIGH;
    2348:	81 e0       	ldi	r24, 0x01	; 1
    234a:	8a 83       	std	Y+2, r24	; 0x02
    234c:	19 c0       	rjmp	.+50     	; 0x2380 <GPIO_readPin+0x13c>
			}
			else {
				pin_value = LOGIC_LOW;
    234e:	1a 82       	std	Y+2, r1	; 0x02
    2350:	17 c0       	rjmp	.+46     	; 0x2380 <GPIO_readPin+0x13c>
			}
			break;
		case PORT_D:
			if(BIT_IS_SET(PIND,pin_num)) {
    2352:	e0 e3       	ldi	r30, 0x30	; 48
    2354:	f0 e0       	ldi	r31, 0x00	; 0
    2356:	80 81       	ld	r24, Z
    2358:	28 2f       	mov	r18, r24
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	8c 81       	ldd	r24, Y+4	; 0x04
    235e:	88 2f       	mov	r24, r24
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	a9 01       	movw	r20, r18
    2364:	02 c0       	rjmp	.+4      	; 0x236a <GPIO_readPin+0x126>
    2366:	55 95       	asr	r21
    2368:	47 95       	ror	r20
    236a:	8a 95       	dec	r24
    236c:	e2 f7       	brpl	.-8      	; 0x2366 <GPIO_readPin+0x122>
    236e:	ca 01       	movw	r24, r20
    2370:	81 70       	andi	r24, 0x01	; 1
    2372:	90 70       	andi	r25, 0x00	; 0
    2374:	88 23       	and	r24, r24
    2376:	19 f0       	breq	.+6      	; 0x237e <GPIO_readPin+0x13a>
				pin_value = LOGIC_HIGH;
    2378:	81 e0       	ldi	r24, 0x01	; 1
    237a:	8a 83       	std	Y+2, r24	; 0x02
    237c:	01 c0       	rjmp	.+2      	; 0x2380 <GPIO_readPin+0x13c>
			}
			else {
				pin_value = LOGIC_LOW;
    237e:	1a 82       	std	Y+2, r1	; 0x02
			}
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    2380:	19 82       	std	Y+1, r1	; 0x01
	}
	return pin_value;
    2382:	5a 81       	ldd	r21, Y+2	; 0x02
    2384:	5f 83       	std	Y+7, r21	; 0x07
    2386:	8f 81       	ldd	r24, Y+7	; 0x07
}
    2388:	27 96       	adiw	r28, 0x07	; 7
    238a:	0f b6       	in	r0, 0x3f	; 63
    238c:	f8 94       	cli
    238e:	de bf       	out	0x3e, r29	; 62
    2390:	0f be       	out	0x3f, r0	; 63
    2392:	cd bf       	out	0x3d, r28	; 61
    2394:	cf 91       	pop	r28
    2396:	df 91       	pop	r29
    2398:	08 95       	ret

0000239a <GPIO_setupPortDirection>:
 * Setup the direction of the required port all pins input/output.
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
GPIO_Error_t GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction) {
    239a:	df 93       	push	r29
    239c:	cf 93       	push	r28
    239e:	00 d0       	rcall	.+0      	; 0x23a0 <GPIO_setupPortDirection+0x6>
    23a0:	00 d0       	rcall	.+0      	; 0x23a2 <GPIO_setupPortDirection+0x8>
    23a2:	0f 92       	push	r0
    23a4:	cd b7       	in	r28, 0x3d	; 61
    23a6:	de b7       	in	r29, 0x3e	; 62
    23a8:	8a 83       	std	Y+2, r24	; 0x02
    23aa:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	uint8_t GPIO_Driver_Checker = NULL;
    23ac:	19 82       	std	Y+1, r1	; 0x01

	if((port_num >= NUM_OF_PORTS)) {
    23ae:	8a 81       	ldd	r24, Y+2	; 0x02
    23b0:	84 30       	cpi	r24, 0x04	; 4
    23b2:	18 f0       	brcs	.+6      	; 0x23ba <GPIO_setupPortDirection+0x20>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    23b4:	82 e0       	ldi	r24, 0x02	; 2
    23b6:	89 83       	std	Y+1, r24	; 0x01
    23b8:	3c c0       	rjmp	.+120    	; 0x2432 <GPIO_setupPortDirection+0x98>
	}
	else if((direction != PORT_INPUT) && (direction != PORT_OUTPUT)) {
    23ba:	8b 81       	ldd	r24, Y+3	; 0x03
    23bc:	88 23       	and	r24, r24
    23be:	31 f0       	breq	.+12     	; 0x23cc <GPIO_setupPortDirection+0x32>
    23c0:	8b 81       	ldd	r24, Y+3	; 0x03
    23c2:	8f 3f       	cpi	r24, 0xFF	; 255
    23c4:	19 f0       	breq	.+6      	; 0x23cc <GPIO_setupPortDirection+0x32>
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
    23c6:	83 e0       	ldi	r24, 0x03	; 3
    23c8:	89 83       	std	Y+1, r24	; 0x01
    23ca:	33 c0       	rjmp	.+102    	; 0x2432 <GPIO_setupPortDirection+0x98>
	}
	else {
		/* Setup the port direction as required */
		switch(port_num) {
    23cc:	8a 81       	ldd	r24, Y+2	; 0x02
    23ce:	28 2f       	mov	r18, r24
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	3d 83       	std	Y+5, r19	; 0x05
    23d4:	2c 83       	std	Y+4, r18	; 0x04
    23d6:	8c 81       	ldd	r24, Y+4	; 0x04
    23d8:	9d 81       	ldd	r25, Y+5	; 0x05
    23da:	81 30       	cpi	r24, 0x01	; 1
    23dc:	91 05       	cpc	r25, r1
    23de:	d1 f0       	breq	.+52     	; 0x2414 <GPIO_setupPortDirection+0x7a>
    23e0:	2c 81       	ldd	r18, Y+4	; 0x04
    23e2:	3d 81       	ldd	r19, Y+5	; 0x05
    23e4:	22 30       	cpi	r18, 0x02	; 2
    23e6:	31 05       	cpc	r19, r1
    23e8:	2c f4       	brge	.+10     	; 0x23f4 <GPIO_setupPortDirection+0x5a>
    23ea:	8c 81       	ldd	r24, Y+4	; 0x04
    23ec:	9d 81       	ldd	r25, Y+5	; 0x05
    23ee:	00 97       	sbiw	r24, 0x00	; 0
    23f0:	61 f0       	breq	.+24     	; 0x240a <GPIO_setupPortDirection+0x70>
    23f2:	1e c0       	rjmp	.+60     	; 0x2430 <GPIO_setupPortDirection+0x96>
    23f4:	2c 81       	ldd	r18, Y+4	; 0x04
    23f6:	3d 81       	ldd	r19, Y+5	; 0x05
    23f8:	22 30       	cpi	r18, 0x02	; 2
    23fa:	31 05       	cpc	r19, r1
    23fc:	81 f0       	breq	.+32     	; 0x241e <GPIO_setupPortDirection+0x84>
    23fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2400:	9d 81       	ldd	r25, Y+5	; 0x05
    2402:	83 30       	cpi	r24, 0x03	; 3
    2404:	91 05       	cpc	r25, r1
    2406:	81 f0       	breq	.+32     	; 0x2428 <GPIO_setupPortDirection+0x8e>
    2408:	13 c0       	rjmp	.+38     	; 0x2430 <GPIO_setupPortDirection+0x96>
		case PORT_A:
			DDRA = direction;
    240a:	ea e3       	ldi	r30, 0x3A	; 58
    240c:	f0 e0       	ldi	r31, 0x00	; 0
    240e:	8b 81       	ldd	r24, Y+3	; 0x03
    2410:	80 83       	st	Z, r24
    2412:	0e c0       	rjmp	.+28     	; 0x2430 <GPIO_setupPortDirection+0x96>
			break;
		case PORT_B:
			DDRB = direction;
    2414:	e7 e3       	ldi	r30, 0x37	; 55
    2416:	f0 e0       	ldi	r31, 0x00	; 0
    2418:	8b 81       	ldd	r24, Y+3	; 0x03
    241a:	80 83       	st	Z, r24
    241c:	09 c0       	rjmp	.+18     	; 0x2430 <GPIO_setupPortDirection+0x96>
			break;
		case PORT_C:
			DDRC = direction;
    241e:	e4 e3       	ldi	r30, 0x34	; 52
    2420:	f0 e0       	ldi	r31, 0x00	; 0
    2422:	8b 81       	ldd	r24, Y+3	; 0x03
    2424:	80 83       	st	Z, r24
    2426:	04 c0       	rjmp	.+8      	; 0x2430 <GPIO_setupPortDirection+0x96>
			break;
		case PORT_D:
			DDRD = direction;
    2428:	e1 e3       	ldi	r30, 0x31	; 49
    242a:	f0 e0       	ldi	r31, 0x00	; 0
    242c:	8b 81       	ldd	r24, Y+3	; 0x03
    242e:	80 83       	st	Z, r24
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    2430:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    2432:	89 81       	ldd	r24, Y+1	; 0x01
}
    2434:	0f 90       	pop	r0
    2436:	0f 90       	pop	r0
    2438:	0f 90       	pop	r0
    243a:	0f 90       	pop	r0
    243c:	0f 90       	pop	r0
    243e:	cf 91       	pop	r28
    2440:	df 91       	pop	r29
    2442:	08 95       	ret

00002444 <GPIO_writePort>:
 * Write the value on the required port.
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
GPIO_Error_t GPIO_writePort(uint8 port_num, uint8 value) {
    2444:	df 93       	push	r29
    2446:	cf 93       	push	r28
    2448:	00 d0       	rcall	.+0      	; 0x244a <GPIO_writePort+0x6>
    244a:	00 d0       	rcall	.+0      	; 0x244c <GPIO_writePort+0x8>
    244c:	0f 92       	push	r0
    244e:	cd b7       	in	r28, 0x3d	; 61
    2450:	de b7       	in	r29, 0x3e	; 62
    2452:	8a 83       	std	Y+2, r24	; 0x02
    2454:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t GPIO_Driver_Checker = NULL;
    2456:	19 82       	std	Y+1, r1	; 0x01
	if((port_num >= NUM_OF_PORTS)) {
    2458:	8a 81       	ldd	r24, Y+2	; 0x02
    245a:	84 30       	cpi	r24, 0x04	; 4
    245c:	18 f0       	brcs	.+6      	; 0x2464 <GPIO_writePort+0x20>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    245e:	82 e0       	ldi	r24, 0x02	; 2
    2460:	89 83       	std	Y+1, r24	; 0x01
    2462:	33 c0       	rjmp	.+102    	; 0x24ca <GPIO_writePort+0x86>
	}
	else {
		/* Setup the port direction as required */
		switch(port_num) {
    2464:	8a 81       	ldd	r24, Y+2	; 0x02
    2466:	28 2f       	mov	r18, r24
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	3d 83       	std	Y+5, r19	; 0x05
    246c:	2c 83       	std	Y+4, r18	; 0x04
    246e:	8c 81       	ldd	r24, Y+4	; 0x04
    2470:	9d 81       	ldd	r25, Y+5	; 0x05
    2472:	81 30       	cpi	r24, 0x01	; 1
    2474:	91 05       	cpc	r25, r1
    2476:	d1 f0       	breq	.+52     	; 0x24ac <GPIO_writePort+0x68>
    2478:	2c 81       	ldd	r18, Y+4	; 0x04
    247a:	3d 81       	ldd	r19, Y+5	; 0x05
    247c:	22 30       	cpi	r18, 0x02	; 2
    247e:	31 05       	cpc	r19, r1
    2480:	2c f4       	brge	.+10     	; 0x248c <GPIO_writePort+0x48>
    2482:	8c 81       	ldd	r24, Y+4	; 0x04
    2484:	9d 81       	ldd	r25, Y+5	; 0x05
    2486:	00 97       	sbiw	r24, 0x00	; 0
    2488:	61 f0       	breq	.+24     	; 0x24a2 <GPIO_writePort+0x5e>
    248a:	1e c0       	rjmp	.+60     	; 0x24c8 <GPIO_writePort+0x84>
    248c:	2c 81       	ldd	r18, Y+4	; 0x04
    248e:	3d 81       	ldd	r19, Y+5	; 0x05
    2490:	22 30       	cpi	r18, 0x02	; 2
    2492:	31 05       	cpc	r19, r1
    2494:	81 f0       	breq	.+32     	; 0x24b6 <GPIO_writePort+0x72>
    2496:	8c 81       	ldd	r24, Y+4	; 0x04
    2498:	9d 81       	ldd	r25, Y+5	; 0x05
    249a:	83 30       	cpi	r24, 0x03	; 3
    249c:	91 05       	cpc	r25, r1
    249e:	81 f0       	breq	.+32     	; 0x24c0 <GPIO_writePort+0x7c>
    24a0:	13 c0       	rjmp	.+38     	; 0x24c8 <GPIO_writePort+0x84>
		case PORT_A:
			PORTA = value;
    24a2:	eb e3       	ldi	r30, 0x3B	; 59
    24a4:	f0 e0       	ldi	r31, 0x00	; 0
    24a6:	8b 81       	ldd	r24, Y+3	; 0x03
    24a8:	80 83       	st	Z, r24
    24aa:	0e c0       	rjmp	.+28     	; 0x24c8 <GPIO_writePort+0x84>
			break;
		case PORT_B:
			PORTB = value;
    24ac:	e8 e3       	ldi	r30, 0x38	; 56
    24ae:	f0 e0       	ldi	r31, 0x00	; 0
    24b0:	8b 81       	ldd	r24, Y+3	; 0x03
    24b2:	80 83       	st	Z, r24
    24b4:	09 c0       	rjmp	.+18     	; 0x24c8 <GPIO_writePort+0x84>
			break;
		case PORT_C:
			PORTC = value;
    24b6:	e5 e3       	ldi	r30, 0x35	; 53
    24b8:	f0 e0       	ldi	r31, 0x00	; 0
    24ba:	8b 81       	ldd	r24, Y+3	; 0x03
    24bc:	80 83       	st	Z, r24
    24be:	04 c0       	rjmp	.+8      	; 0x24c8 <GPIO_writePort+0x84>
			break;
		case PORT_D:
			PORTD = value;
    24c0:	e2 e3       	ldi	r30, 0x32	; 50
    24c2:	f0 e0       	ldi	r31, 0x00	; 0
    24c4:	8b 81       	ldd	r24, Y+3	; 0x03
    24c6:	80 83       	st	Z, r24
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    24c8:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    24ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    24cc:	0f 90       	pop	r0
    24ce:	0f 90       	pop	r0
    24d0:	0f 90       	pop	r0
    24d2:	0f 90       	pop	r0
    24d4:	0f 90       	pop	r0
    24d6:	cf 91       	pop	r28
    24d8:	df 91       	pop	r29
    24da:	08 95       	ret

000024dc <GPIO_readPort>:
/*
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num) {
    24dc:	df 93       	push	r29
    24de:	cf 93       	push	r28
    24e0:	00 d0       	rcall	.+0      	; 0x24e2 <GPIO_readPort+0x6>
    24e2:	00 d0       	rcall	.+0      	; 0x24e4 <GPIO_readPort+0x8>
    24e4:	0f 92       	push	r0
    24e6:	cd b7       	in	r28, 0x3d	; 61
    24e8:	de b7       	in	r29, 0x3e	; 62
    24ea:	8b 83       	std	Y+3, r24	; 0x03
	uint8 value = LOGIC_LOW;
    24ec:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t GPIO_Driver_Checker = NULL;
    24ee:	19 82       	std	Y+1, r1	; 0x01

	if((port_num >= NUM_OF_PORTS)) {
    24f0:	8b 81       	ldd	r24, Y+3	; 0x03
    24f2:	84 30       	cpi	r24, 0x04	; 4
    24f4:	18 f0       	brcs	.+6      	; 0x24fc <GPIO_readPort+0x20>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    24f6:	82 e0       	ldi	r24, 0x02	; 2
    24f8:	89 83       	std	Y+1, r24	; 0x01
    24fa:	32 c0       	rjmp	.+100    	; 0x2560 <GPIO_readPort+0x84>
	}
	else {
		switch(port_num) {
    24fc:	8b 81       	ldd	r24, Y+3	; 0x03
    24fe:	28 2f       	mov	r18, r24
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	3d 83       	std	Y+5, r19	; 0x05
    2504:	2c 83       	std	Y+4, r18	; 0x04
    2506:	8c 81       	ldd	r24, Y+4	; 0x04
    2508:	9d 81       	ldd	r25, Y+5	; 0x05
    250a:	81 30       	cpi	r24, 0x01	; 1
    250c:	91 05       	cpc	r25, r1
    250e:	d1 f0       	breq	.+52     	; 0x2544 <GPIO_readPort+0x68>
    2510:	2c 81       	ldd	r18, Y+4	; 0x04
    2512:	3d 81       	ldd	r19, Y+5	; 0x05
    2514:	22 30       	cpi	r18, 0x02	; 2
    2516:	31 05       	cpc	r19, r1
    2518:	2c f4       	brge	.+10     	; 0x2524 <GPIO_readPort+0x48>
    251a:	8c 81       	ldd	r24, Y+4	; 0x04
    251c:	9d 81       	ldd	r25, Y+5	; 0x05
    251e:	00 97       	sbiw	r24, 0x00	; 0
    2520:	61 f0       	breq	.+24     	; 0x253a <GPIO_readPort+0x5e>
    2522:	1e c0       	rjmp	.+60     	; 0x2560 <GPIO_readPort+0x84>
    2524:	2c 81       	ldd	r18, Y+4	; 0x04
    2526:	3d 81       	ldd	r19, Y+5	; 0x05
    2528:	22 30       	cpi	r18, 0x02	; 2
    252a:	31 05       	cpc	r19, r1
    252c:	81 f0       	breq	.+32     	; 0x254e <GPIO_readPort+0x72>
    252e:	8c 81       	ldd	r24, Y+4	; 0x04
    2530:	9d 81       	ldd	r25, Y+5	; 0x05
    2532:	83 30       	cpi	r24, 0x03	; 3
    2534:	91 05       	cpc	r25, r1
    2536:	81 f0       	breq	.+32     	; 0x2558 <GPIO_readPort+0x7c>
    2538:	13 c0       	rjmp	.+38     	; 0x2560 <GPIO_readPort+0x84>
		case PORT_A:
			// Why value equals PINA?
			value = PINA;
    253a:	e9 e3       	ldi	r30, 0x39	; 57
    253c:	f0 e0       	ldi	r31, 0x00	; 0
    253e:	80 81       	ld	r24, Z
    2540:	8a 83       	std	Y+2, r24	; 0x02
    2542:	0e c0       	rjmp	.+28     	; 0x2560 <GPIO_readPort+0x84>
			break;
		case PORT_B:
			value = PINB;
    2544:	e6 e3       	ldi	r30, 0x36	; 54
    2546:	f0 e0       	ldi	r31, 0x00	; 0
    2548:	80 81       	ld	r24, Z
    254a:	8a 83       	std	Y+2, r24	; 0x02
    254c:	09 c0       	rjmp	.+18     	; 0x2560 <GPIO_readPort+0x84>
			break;
		case PORT_C:
			value = PINC;
    254e:	e3 e3       	ldi	r30, 0x33	; 51
    2550:	f0 e0       	ldi	r31, 0x00	; 0
    2552:	80 81       	ld	r24, Z
    2554:	8a 83       	std	Y+2, r24	; 0x02
    2556:	04 c0       	rjmp	.+8      	; 0x2560 <GPIO_readPort+0x84>
			break;
		case PORT_D:
			value = PIND;
    2558:	e0 e3       	ldi	r30, 0x30	; 48
    255a:	f0 e0       	ldi	r31, 0x00	; 0
    255c:	80 81       	ld	r24, Z
    255e:	8a 83       	std	Y+2, r24	; 0x02
			break;
		}
	}
	return value;
    2560:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2562:	0f 90       	pop	r0
    2564:	0f 90       	pop	r0
    2566:	0f 90       	pop	r0
    2568:	0f 90       	pop	r0
    256a:	0f 90       	pop	r0
    256c:	cf 91       	pop	r28
    256e:	df 91       	pop	r29
    2570:	08 95       	ret

00002572 <EXT_INTERRUPT_Init>:

#include "avr/io.h" /* To use the IO Ports Registers */
#include <util/delay.h>

// Initialize External Interrupt
void EXT_INTERRUPT_Init(void) {
    2572:	df 93       	push	r29
    2574:	cf 93       	push	r28
    2576:	cd b7       	in	r28, 0x3d	; 61
    2578:	de b7       	in	r29, 0x3e	; 62
	 */

	// Checking if INT0 is enabled or disabled
	#if (EXT_INTERRUPT_INT0_INIT_STATE == EXT_INTERRUPT_Enable_State)
		// Enabling the INT0 bit inside GICR
		SET_BIT(GICR, INT0);
    257a:	ab e5       	ldi	r26, 0x5B	; 91
    257c:	b0 e0       	ldi	r27, 0x00	; 0
    257e:	eb e5       	ldi	r30, 0x5B	; 91
    2580:	f0 e0       	ldi	r31, 0x00	; 0
    2582:	80 81       	ld	r24, Z
    2584:	80 64       	ori	r24, 0x40	; 64
    2586:	8c 93       	st	X, r24

		// Setup Pin PD2 "INT0" to Input
		GPIO_setupPinDirection(PORT_D, PIN_2, PIN_INPUT);
    2588:	83 e0       	ldi	r24, 0x03	; 3
    258a:	62 e0       	ldi	r22, 0x02	; 2
    258c:	40 e0       	ldi	r20, 0x00	; 0
    258e:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <GPIO_setupPinDirection>
			SET_BIT(MCUCR, ISC00);
		#elif (EXT_INTERRUPT_0_MODE == EXT_INTERRUPT_Falling_Edge)
			SET_BIT(MCUCR, ISC01);
			CLR_BIT(MCUCR, ISC00);
		#elif (EXT_INTERRUPT_0_MODE == EXT_INTERRUPT_Rising_Edge)
			SET_BIT(MCUCR, ISC01);
    2592:	a5 e5       	ldi	r26, 0x55	; 85
    2594:	b0 e0       	ldi	r27, 0x00	; 0
    2596:	e5 e5       	ldi	r30, 0x55	; 85
    2598:	f0 e0       	ldi	r31, 0x00	; 0
    259a:	80 81       	ld	r24, Z
    259c:	82 60       	ori	r24, 0x02	; 2
    259e:	8c 93       	st	X, r24
			SET_BIT(MCUCR, ISC00);
    25a0:	a5 e5       	ldi	r26, 0x55	; 85
    25a2:	b0 e0       	ldi	r27, 0x00	; 0
    25a4:	e5 e5       	ldi	r30, 0x55	; 85
    25a6:	f0 e0       	ldi	r31, 0x00	; 0
    25a8:	80 81       	ld	r24, Z
    25aa:	81 60       	ori	r24, 0x01	; 1
    25ac:	8c 93       	st	X, r24
		#elif (EXT_INTERRUPT_1_MODE == EXT_INTERRUPT_Rising_Edge)
			SET_BIT(MCUCR, ISC11);
			SET_BIT(MCUCR, ISC10);
		#endif
	#elif (EXT_INTERRUPT_INT1_INIT_STATE == EXT_INTERRUPT_Disable_State)
			CLR_BIT(GICR, INT1);
    25ae:	ab e5       	ldi	r26, 0x5B	; 91
    25b0:	b0 e0       	ldi	r27, 0x00	; 0
    25b2:	eb e5       	ldi	r30, 0x5B	; 91
    25b4:	f0 e0       	ldi	r31, 0x00	; 0
    25b6:	80 81       	ld	r24, Z
    25b8:	8f 77       	andi	r24, 0x7F	; 127
    25ba:	8c 93       	st	X, r24
			CLR_BIT(MCUCSR, ISC2);
		#elif (EXT_INTERRUPT_2_MODE == EXT_INTERRUPT_INT2_Rising_Edge)
			SET_BIT(MCUCSR, ISC2);
		#endif
	#elif (EXT_INTERRUPT_INT2_INIT_STATE == EXT_INTERRUPT_Disable_State)
			CLR_BIT(GICR, INT2);
    25bc:	ab e5       	ldi	r26, 0x5B	; 91
    25be:	b0 e0       	ldi	r27, 0x00	; 0
    25c0:	eb e5       	ldi	r30, 0x5B	; 91
    25c2:	f0 e0       	ldi	r31, 0x00	; 0
    25c4:	80 81       	ld	r24, Z
    25c6:	8f 7d       	andi	r24, 0xDF	; 223
    25c8:	8c 93       	st	X, r24

	/* Status Register – SREG Register Bits Description:
	 * Bit 7 – I: Global Interrupt Enable
	 */
	// Enabling the I-Bit
	SET_BIT(SREG, SREG_I_BIT);
    25ca:	af e5       	ldi	r26, 0x5F	; 95
    25cc:	b0 e0       	ldi	r27, 0x00	; 0
    25ce:	ef e5       	ldi	r30, 0x5F	; 95
    25d0:	f0 e0       	ldi	r31, 0x00	; 0
    25d2:	80 81       	ld	r24, Z
    25d4:	80 68       	ori	r24, 0x80	; 128
    25d6:	8c 93       	st	X, r24
}
    25d8:	cf 91       	pop	r28
    25da:	df 91       	pop	r29
    25dc:	08 95       	ret

000025de <EXT_INTERRUPT_DeInit>:

// Disable External Interrupt ISR
void EXT_INTERRUPT_DeInit(void) {
    25de:	df 93       	push	r29
    25e0:	cf 93       	push	r28
    25e2:	cd b7       	in	r28, 0x3d	; 61
    25e4:	de b7       	in	r29, 0x3e	; 62

	#if (EXT_INTERRUPT_INT0_INIT_STATE == EXT_INTERRUPT_Enable_State)
		CLR_BIT(GICR, INT0);
    25e6:	ab e5       	ldi	r26, 0x5B	; 91
    25e8:	b0 e0       	ldi	r27, 0x00	; 0
    25ea:	eb e5       	ldi	r30, 0x5B	; 91
    25ec:	f0 e0       	ldi	r31, 0x00	; 0
    25ee:	80 81       	ld	r24, Z
    25f0:	8f 7b       	andi	r24, 0xBF	; 191
    25f2:	8c 93       	st	X, r24

	#if (EXT_INTERRUPT_INT2_INIT_STATE == EXT_INTERRUPT_Enable_State)
		CLR_BIT(GICR, INT2);
	#endif

	CLR_BIT(SREG, SREG_I_BIT);
    25f4:	af e5       	ldi	r26, 0x5F	; 95
    25f6:	b0 e0       	ldi	r27, 0x00	; 0
    25f8:	ef e5       	ldi	r30, 0x5F	; 95
    25fa:	f0 e0       	ldi	r31, 0x00	; 0
    25fc:	80 81       	ld	r24, Z
    25fe:	8f 77       	andi	r24, 0x7F	; 127
    2600:	8c 93       	st	X, r24
}
    2602:	cf 91       	pop	r28
    2604:	df 91       	pop	r29
    2606:	08 95       	ret

00002608 <EXT_INTERRUPT_SetCallBack>:

//The function that will be called in the EXT INT
void (*CallBackPtr) (void) = NULL;

// External Interrupt Call Back Function
void EXT_INTERRUPT_SetCallBack(void (*CopyFuncPtr) (void)) {
    2608:	df 93       	push	r29
    260a:	cf 93       	push	r28
    260c:	00 d0       	rcall	.+0      	; 0x260e <EXT_INTERRUPT_SetCallBack+0x6>
    260e:	cd b7       	in	r28, 0x3d	; 61
    2610:	de b7       	in	r29, 0x3e	; 62
    2612:	9a 83       	std	Y+2, r25	; 0x02
    2614:	89 83       	std	Y+1, r24	; 0x01
	CallBackPtr = CopyFuncPtr;
    2616:	89 81       	ldd	r24, Y+1	; 0x01
    2618:	9a 81       	ldd	r25, Y+2	; 0x02
    261a:	90 93 6b 01 	sts	0x016B, r25
    261e:	80 93 6a 01 	sts	0x016A, r24
}
    2622:	0f 90       	pop	r0
    2624:	0f 90       	pop	r0
    2626:	cf 91       	pop	r28
    2628:	df 91       	pop	r29
    262a:	08 95       	ret

0000262c <ADC_Init>:
#include "avr/io.h" /* To use the IO Ports Registers */
#include <util/delay.h>


// Initializes and enables the ADC Module to start functionality
void ADC_Init(void) {
    262c:	df 93       	push	r29
    262e:	cf 93       	push	r28
    2630:	cd b7       	in	r28, 0x3d	; 61
    2632:	de b7       	in	r29, 0x3e	; 62
	 * 7:6, REFS1:0 = 01 to choose AVCC = 5v as reference voltage
	 * 5, ADLAR   = 0 right adjusted
	 * 4:0, MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	// Sets REFS1:0 to '01'
	SET_BIT(ADMUX, REFS0);
    2634:	a7 e2       	ldi	r26, 0x27	; 39
    2636:	b0 e0       	ldi	r27, 0x00	; 0
    2638:	e7 e2       	ldi	r30, 0x27	; 39
    263a:	f0 e0       	ldi	r31, 0x00	; 0
    263c:	80 81       	ld	r24, Z
    263e:	80 64       	ori	r24, 0x40	; 64
    2640:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, REFS1);
    2642:	a7 e2       	ldi	r26, 0x27	; 39
    2644:	b0 e0       	ldi	r27, 0x00	; 0
    2646:	e7 e2       	ldi	r30, 0x27	; 39
    2648:	f0 e0       	ldi	r31, 0x00	; 0
    264a:	80 81       	ld	r24, Z
    264c:	8f 77       	andi	r24, 0x7F	; 127
    264e:	8c 93       	st	X, r24

	CLR_BIT(ADMUX, ADLAR);
    2650:	a7 e2       	ldi	r26, 0x27	; 39
    2652:	b0 e0       	ldi	r27, 0x00	; 0
    2654:	e7 e2       	ldi	r30, 0x27	; 39
    2656:	f0 e0       	ldi	r31, 0x00	; 0
    2658:	80 81       	ld	r24, Z
    265a:	8f 7d       	andi	r24, 0xDF	; 223
    265c:	8c 93       	st	X, r24

	CLR_BIT(ADMUX, MUX4);
    265e:	a7 e2       	ldi	r26, 0x27	; 39
    2660:	b0 e0       	ldi	r27, 0x00	; 0
    2662:	e7 e2       	ldi	r30, 0x27	; 39
    2664:	f0 e0       	ldi	r31, 0x00	; 0
    2666:	80 81       	ld	r24, Z
    2668:	8f 7e       	andi	r24, 0xEF	; 239
    266a:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, MUX3);
    266c:	a7 e2       	ldi	r26, 0x27	; 39
    266e:	b0 e0       	ldi	r27, 0x00	; 0
    2670:	e7 e2       	ldi	r30, 0x27	; 39
    2672:	f0 e0       	ldi	r31, 0x00	; 0
    2674:	80 81       	ld	r24, Z
    2676:	87 7f       	andi	r24, 0xF7	; 247
    2678:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, MUX2);
    267a:	a7 e2       	ldi	r26, 0x27	; 39
    267c:	b0 e0       	ldi	r27, 0x00	; 0
    267e:	e7 e2       	ldi	r30, 0x27	; 39
    2680:	f0 e0       	ldi	r31, 0x00	; 0
    2682:	80 81       	ld	r24, Z
    2684:	8b 7f       	andi	r24, 0xFB	; 251
    2686:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, MUX1);
    2688:	a7 e2       	ldi	r26, 0x27	; 39
    268a:	b0 e0       	ldi	r27, 0x00	; 0
    268c:	e7 e2       	ldi	r30, 0x27	; 39
    268e:	f0 e0       	ldi	r31, 0x00	; 0
    2690:	80 81       	ld	r24, Z
    2692:	8d 7f       	andi	r24, 0xFD	; 253
    2694:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, MUX0);
    2696:	a7 e2       	ldi	r26, 0x27	; 39
    2698:	b0 e0       	ldi	r27, 0x00	; 0
    269a:	e7 e2       	ldi	r30, 0x27	; 39
    269c:	f0 e0       	ldi	r31, 0x00	; 0
    269e:	80 81       	ld	r24, Z
    26a0:	8e 7f       	andi	r24, 0xFE	; 254
    26a2:	8c 93       	st	X, r24
	 * ADIE = 0 Disable ADC Interrupt
	 * ADATE = 0 Disable Auto Trigger
	 * ADPS2:0 = 111 to choose ADC_Clock = F_CPU/128 = 16Mhz/128 = 125Khz --> ADC must operate in range 50-200Khz
	 */
	// Enables ADC
	SET_BIT(ADCSRA, ADEN);
    26a4:	a6 e2       	ldi	r26, 0x26	; 38
    26a6:	b0 e0       	ldi	r27, 0x00	; 0
    26a8:	e6 e2       	ldi	r30, 0x26	; 38
    26aa:	f0 e0       	ldi	r31, 0x00	; 0
    26ac:	80 81       	ld	r24, Z
    26ae:	80 68       	ori	r24, 0x80	; 128
    26b0:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA, ADIE);
    26b2:	a6 e2       	ldi	r26, 0x26	; 38
    26b4:	b0 e0       	ldi	r27, 0x00	; 0
    26b6:	e6 e2       	ldi	r30, 0x26	; 38
    26b8:	f0 e0       	ldi	r31, 0x00	; 0
    26ba:	80 81       	ld	r24, Z
    26bc:	87 7f       	andi	r24, 0xF7	; 247
    26be:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA, ADATE);
    26c0:	a6 e2       	ldi	r26, 0x26	; 38
    26c2:	b0 e0       	ldi	r27, 0x00	; 0
    26c4:	e6 e2       	ldi	r30, 0x26	; 38
    26c6:	f0 e0       	ldi	r31, 0x00	; 0
    26c8:	80 81       	ld	r24, Z
    26ca:	8f 7d       	andi	r24, 0xDF	; 223
    26cc:	8c 93       	st	X, r24

	// Choose Prescaler: 128
	SET_BIT(ADCSRA, ADPS2);
    26ce:	a6 e2       	ldi	r26, 0x26	; 38
    26d0:	b0 e0       	ldi	r27, 0x00	; 0
    26d2:	e6 e2       	ldi	r30, 0x26	; 38
    26d4:	f0 e0       	ldi	r31, 0x00	; 0
    26d6:	80 81       	ld	r24, Z
    26d8:	84 60       	ori	r24, 0x04	; 4
    26da:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADPS1);
    26dc:	a6 e2       	ldi	r26, 0x26	; 38
    26de:	b0 e0       	ldi	r27, 0x00	; 0
    26e0:	e6 e2       	ldi	r30, 0x26	; 38
    26e2:	f0 e0       	ldi	r31, 0x00	; 0
    26e4:	80 81       	ld	r24, Z
    26e6:	82 60       	ori	r24, 0x02	; 2
    26e8:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADPS0);
    26ea:	a6 e2       	ldi	r26, 0x26	; 38
    26ec:	b0 e0       	ldi	r27, 0x00	; 0
    26ee:	e6 e2       	ldi	r30, 0x26	; 38
    26f0:	f0 e0       	ldi	r31, 0x00	; 0
    26f2:	80 81       	ld	r24, Z
    26f4:	81 60       	ori	r24, 0x01	; 1
    26f6:	8c 93       	st	X, r24

}
    26f8:	cf 91       	pop	r28
    26fa:	df 91       	pop	r29
    26fc:	08 95       	ret

000026fe <ADC_readChannel>:


// Reads the content written to the selected channel of the ADC
uint16 ADC_readChannel(uint8 channel_num) {
    26fe:	df 93       	push	r29
    2700:	cf 93       	push	r28
    2702:	0f 92       	push	r0
    2704:	cd b7       	in	r28, 0x3d	; 61
    2706:	de b7       	in	r29, 0x3e	; 62
    2708:	89 83       	std	Y+1, r24	; 0x01

	// Insert Channel Number in ADMUX Procedure

	// Clears first 5 bits to zero
	ADMUX &= 0xE0; // 0b1110 0000
    270a:	a7 e2       	ldi	r26, 0x27	; 39
    270c:	b0 e0       	ldi	r27, 0x00	; 0
    270e:	e7 e2       	ldi	r30, 0x27	; 39
    2710:	f0 e0       	ldi	r31, 0x00	; 0
    2712:	80 81       	ld	r24, Z
    2714:	80 7e       	andi	r24, 0xE0	; 224
    2716:	8c 93       	st	X, r24

	// Mask the Channel No. Input with max channel No.
	channel_num &= 0x07; // 0b0000 0111
    2718:	89 81       	ldd	r24, Y+1	; 0x01
    271a:	87 70       	andi	r24, 0x07	; 7
    271c:	89 83       	std	Y+1, r24	; 0x01

	// Insert Channel no. into ADMUX Register
	ADMUX |= channel_num;
    271e:	a7 e2       	ldi	r26, 0x27	; 39
    2720:	b0 e0       	ldi	r27, 0x00	; 0
    2722:	e7 e2       	ldi	r30, 0x27	; 39
    2724:	f0 e0       	ldi	r31, 0x00	; 0
    2726:	90 81       	ld	r25, Z
    2728:	89 81       	ldd	r24, Y+1	; 0x01
    272a:	89 2b       	or	r24, r25
    272c:	8c 93       	st	X, r24

	// Starts ADC Conversion
	SET_BIT(ADCSRA, ADSC);
    272e:	a6 e2       	ldi	r26, 0x26	; 38
    2730:	b0 e0       	ldi	r27, 0x00	; 0
    2732:	e6 e2       	ldi	r30, 0x26	; 38
    2734:	f0 e0       	ldi	r31, 0x00	; 0
    2736:	80 81       	ld	r24, Z
    2738:	80 64       	ori	r24, 0x40	; 64
    273a:	8c 93       	st	X, r24

	// Busy wait (Polling) untill ADIF = 1
	while ( BIT_IS_CLR(ADCSRA, ADIF) );
    273c:	e6 e2       	ldi	r30, 0x26	; 38
    273e:	f0 e0       	ldi	r31, 0x00	; 0
    2740:	80 81       	ld	r24, Z
    2742:	88 2f       	mov	r24, r24
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	80 71       	andi	r24, 0x10	; 16
    2748:	90 70       	andi	r25, 0x00	; 0
    274a:	00 97       	sbiw	r24, 0x00	; 0
    274c:	b9 f3       	breq	.-18     	; 0x273c <ADC_readChannel+0x3e>

	// sET FLAG BY 1 TO CLEAR
	SET_BIT(ADCSRA, ADIF);
    274e:	a6 e2       	ldi	r26, 0x26	; 38
    2750:	b0 e0       	ldi	r27, 0x00	; 0
    2752:	e6 e2       	ldi	r30, 0x26	; 38
    2754:	f0 e0       	ldi	r31, 0x00	; 0
    2756:	80 81       	ld	r24, Z
    2758:	80 61       	ori	r24, 0x10	; 16
    275a:	8c 93       	st	X, r24

	// Read Data
	return ADC;
    275c:	e4 e2       	ldi	r30, 0x24	; 36
    275e:	f0 e0       	ldi	r31, 0x00	; 0
    2760:	80 81       	ld	r24, Z
    2762:	91 81       	ldd	r25, Z+1	; 0x01
}
    2764:	0f 90       	pop	r0
    2766:	cf 91       	pop	r28
    2768:	df 91       	pop	r29
    276a:	08 95       	ret

0000276c <SEGMENT_Init>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
SEGMENT_Error_t SEGMENT_Init(uint8 port_num) {
    276c:	df 93       	push	r29
    276e:	cf 93       	push	r28
    2770:	00 d0       	rcall	.+0      	; 0x2772 <SEGMENT_Init+0x6>
    2772:	cd b7       	in	r28, 0x3d	; 61
    2774:	de b7       	in	r29, 0x3e	; 62
    2776:	8a 83       	std	Y+2, r24	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t SEGMENT_Driver_Checker = NULL;
    2778:	19 82       	std	Y+1, r1	; 0x01

	if((port_num >= NUM_OF_PORTS)) {
    277a:	8a 81       	ldd	r24, Y+2	; 0x02
    277c:	84 30       	cpi	r24, 0x04	; 4
    277e:	18 f0       	brcs	.+6      	; 0x2786 <SEGMENT_Init+0x1a>
		SEGMENT_Driver_Checker = SEGMENT_WRONG_PORT_NUMBER;
    2780:	82 e0       	ldi	r24, 0x02	; 2
    2782:	89 83       	std	Y+1, r24	; 0x01
    2784:	15 c0       	rjmp	.+42     	; 0x27b0 <SEGMENT_Init+0x44>
	}
	else {
		/* Setup the pin direction as required */
		GPIO_setupPinDirection(port_num, PIN_0, PIN_OUTPUT);
    2786:	8a 81       	ldd	r24, Y+2	; 0x02
    2788:	60 e0       	ldi	r22, 0x00	; 0
    278a:	41 e0       	ldi	r20, 0x01	; 1
    278c:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(port_num, PIN_1, PIN_OUTPUT);
    2790:	8a 81       	ldd	r24, Y+2	; 0x02
    2792:	61 e0       	ldi	r22, 0x01	; 1
    2794:	41 e0       	ldi	r20, 0x01	; 1
    2796:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(port_num, PIN_2, PIN_OUTPUT);
    279a:	8a 81       	ldd	r24, Y+2	; 0x02
    279c:	62 e0       	ldi	r22, 0x02	; 2
    279e:	41 e0       	ldi	r20, 0x01	; 1
    27a0:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(port_num, PIN_3, PIN_OUTPUT);
    27a4:	8a 81       	ldd	r24, Y+2	; 0x02
    27a6:	63 e0       	ldi	r22, 0x03	; 3
    27a8:	41 e0       	ldi	r20, 0x01	; 1
    27aa:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <GPIO_setupPinDirection>
		SEGMENT_Driver_Checker = SEGMENT_OK;
    27ae:	19 82       	std	Y+1, r1	; 0x01
	}
	return SEGMENT_Driver_Checker;
    27b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    27b2:	0f 90       	pop	r0
    27b4:	0f 90       	pop	r0
    27b6:	cf 91       	pop	r28
    27b8:	df 91       	pop	r29
    27ba:	08 95       	ret

000027bc <SEGMENT_DISPLAY>:

SEGMENT_Error_t SEGMENT_DISPLAY(uint8 port_num, uint8 value) {
    27bc:	df 93       	push	r29
    27be:	cf 93       	push	r28
    27c0:	00 d0       	rcall	.+0      	; 0x27c2 <SEGMENT_DISPLAY+0x6>
    27c2:	00 d0       	rcall	.+0      	; 0x27c4 <SEGMENT_DISPLAY+0x8>
    27c4:	0f 92       	push	r0
    27c6:	cd b7       	in	r28, 0x3d	; 61
    27c8:	de b7       	in	r29, 0x3e	; 62
    27ca:	8a 83       	std	Y+2, r24	; 0x02
    27cc:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t SEGMENT_Driver_Checker = NULL;
    27ce:	19 82       	std	Y+1, r1	; 0x01

	if((port_num >= NUM_OF_PORTS)) {
    27d0:	8a 81       	ldd	r24, Y+2	; 0x02
    27d2:	84 30       	cpi	r24, 0x04	; 4
    27d4:	18 f0       	brcs	.+6      	; 0x27dc <SEGMENT_DISPLAY+0x20>
		SEGMENT_Driver_Checker = SEGMENT_WRONG_PORT_NUMBER;
    27d6:	82 e0       	ldi	r24, 0x02	; 2
    27d8:	89 83       	std	Y+1, r24	; 0x01
    27da:	24 c1       	rjmp	.+584    	; 0x2a24 <SEGMENT_DISPLAY+0x268>
	}
	else if((value < 0 && value > 9)) {
		SEGMENT_Driver_Checker = SEGMENT_WRONG_VALUE;
	}
	else {
		switch(value) {
    27dc:	8b 81       	ldd	r24, Y+3	; 0x03
    27de:	28 2f       	mov	r18, r24
    27e0:	30 e0       	ldi	r19, 0x00	; 0
    27e2:	3d 83       	std	Y+5, r19	; 0x05
    27e4:	2c 83       	std	Y+4, r18	; 0x04
    27e6:	8c 81       	ldd	r24, Y+4	; 0x04
    27e8:	9d 81       	ldd	r25, Y+5	; 0x05
    27ea:	84 30       	cpi	r24, 0x04	; 4
    27ec:	91 05       	cpc	r25, r1
    27ee:	09 f4       	brne	.+2      	; 0x27f2 <SEGMENT_DISPLAY+0x36>
    27f0:	9b c0       	rjmp	.+310    	; 0x2928 <SEGMENT_DISPLAY+0x16c>
    27f2:	2c 81       	ldd	r18, Y+4	; 0x04
    27f4:	3d 81       	ldd	r19, Y+5	; 0x05
    27f6:	25 30       	cpi	r18, 0x05	; 5
    27f8:	31 05       	cpc	r19, r1
    27fa:	ec f4       	brge	.+58     	; 0x2836 <SEGMENT_DISPLAY+0x7a>
    27fc:	8c 81       	ldd	r24, Y+4	; 0x04
    27fe:	9d 81       	ldd	r25, Y+5	; 0x05
    2800:	81 30       	cpi	r24, 0x01	; 1
    2802:	91 05       	cpc	r25, r1
    2804:	09 f4       	brne	.+2      	; 0x2808 <SEGMENT_DISPLAY+0x4c>
    2806:	51 c0       	rjmp	.+162    	; 0x28aa <SEGMENT_DISPLAY+0xee>
    2808:	2c 81       	ldd	r18, Y+4	; 0x04
    280a:	3d 81       	ldd	r19, Y+5	; 0x05
    280c:	22 30       	cpi	r18, 0x02	; 2
    280e:	31 05       	cpc	r19, r1
    2810:	2c f4       	brge	.+10     	; 0x281c <SEGMENT_DISPLAY+0x60>
    2812:	8c 81       	ldd	r24, Y+4	; 0x04
    2814:	9d 81       	ldd	r25, Y+5	; 0x05
    2816:	00 97       	sbiw	r24, 0x00	; 0
    2818:	99 f1       	breq	.+102    	; 0x2880 <SEGMENT_DISPLAY+0xc4>
    281a:	03 c1       	rjmp	.+518    	; 0x2a22 <SEGMENT_DISPLAY+0x266>
    281c:	2c 81       	ldd	r18, Y+4	; 0x04
    281e:	3d 81       	ldd	r19, Y+5	; 0x05
    2820:	22 30       	cpi	r18, 0x02	; 2
    2822:	31 05       	cpc	r19, r1
    2824:	09 f4       	brne	.+2      	; 0x2828 <SEGMENT_DISPLAY+0x6c>
    2826:	56 c0       	rjmp	.+172    	; 0x28d4 <SEGMENT_DISPLAY+0x118>
    2828:	8c 81       	ldd	r24, Y+4	; 0x04
    282a:	9d 81       	ldd	r25, Y+5	; 0x05
    282c:	83 30       	cpi	r24, 0x03	; 3
    282e:	91 05       	cpc	r25, r1
    2830:	09 f4       	brne	.+2      	; 0x2834 <SEGMENT_DISPLAY+0x78>
    2832:	65 c0       	rjmp	.+202    	; 0x28fe <SEGMENT_DISPLAY+0x142>
    2834:	f6 c0       	rjmp	.+492    	; 0x2a22 <SEGMENT_DISPLAY+0x266>
    2836:	2c 81       	ldd	r18, Y+4	; 0x04
    2838:	3d 81       	ldd	r19, Y+5	; 0x05
    283a:	27 30       	cpi	r18, 0x07	; 7
    283c:	31 05       	cpc	r19, r1
    283e:	09 f4       	brne	.+2      	; 0x2842 <SEGMENT_DISPLAY+0x86>
    2840:	b2 c0       	rjmp	.+356    	; 0x29a6 <SEGMENT_DISPLAY+0x1ea>
    2842:	8c 81       	ldd	r24, Y+4	; 0x04
    2844:	9d 81       	ldd	r25, Y+5	; 0x05
    2846:	88 30       	cpi	r24, 0x08	; 8
    2848:	91 05       	cpc	r25, r1
    284a:	6c f4       	brge	.+26     	; 0x2866 <SEGMENT_DISPLAY+0xaa>
    284c:	2c 81       	ldd	r18, Y+4	; 0x04
    284e:	3d 81       	ldd	r19, Y+5	; 0x05
    2850:	25 30       	cpi	r18, 0x05	; 5
    2852:	31 05       	cpc	r19, r1
    2854:	09 f4       	brne	.+2      	; 0x2858 <SEGMENT_DISPLAY+0x9c>
    2856:	7d c0       	rjmp	.+250    	; 0x2952 <SEGMENT_DISPLAY+0x196>
    2858:	8c 81       	ldd	r24, Y+4	; 0x04
    285a:	9d 81       	ldd	r25, Y+5	; 0x05
    285c:	86 30       	cpi	r24, 0x06	; 6
    285e:	91 05       	cpc	r25, r1
    2860:	09 f4       	brne	.+2      	; 0x2864 <SEGMENT_DISPLAY+0xa8>
    2862:	8c c0       	rjmp	.+280    	; 0x297c <SEGMENT_DISPLAY+0x1c0>
    2864:	de c0       	rjmp	.+444    	; 0x2a22 <SEGMENT_DISPLAY+0x266>
    2866:	2c 81       	ldd	r18, Y+4	; 0x04
    2868:	3d 81       	ldd	r19, Y+5	; 0x05
    286a:	28 30       	cpi	r18, 0x08	; 8
    286c:	31 05       	cpc	r19, r1
    286e:	09 f4       	brne	.+2      	; 0x2872 <SEGMENT_DISPLAY+0xb6>
    2870:	af c0       	rjmp	.+350    	; 0x29d0 <SEGMENT_DISPLAY+0x214>
    2872:	8c 81       	ldd	r24, Y+4	; 0x04
    2874:	9d 81       	ldd	r25, Y+5	; 0x05
    2876:	89 30       	cpi	r24, 0x09	; 9
    2878:	91 05       	cpc	r25, r1
    287a:	09 f4       	brne	.+2      	; 0x287e <SEGMENT_DISPLAY+0xc2>
    287c:	be c0       	rjmp	.+380    	; 0x29fa <SEGMENT_DISPLAY+0x23e>
    287e:	d1 c0       	rjmp	.+418    	; 0x2a22 <SEGMENT_DISPLAY+0x266>
			case 0:
				GPIO_writePin(port_num, PIN_0, LOGIC_LOW);
    2880:	8a 81       	ldd	r24, Y+2	; 0x02
    2882:	60 e0       	ldi	r22, 0x00	; 0
    2884:	40 e0       	ldi	r20, 0x00	; 0
    2886:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
    288a:	8a 81       	ldd	r24, Y+2	; 0x02
    288c:	61 e0       	ldi	r22, 0x01	; 1
    288e:	40 e0       	ldi	r20, 0x00	; 0
    2890:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
    2894:	8a 81       	ldd	r24, Y+2	; 0x02
    2896:	62 e0       	ldi	r22, 0x02	; 2
    2898:	40 e0       	ldi	r20, 0x00	; 0
    289a:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    289e:	8a 81       	ldd	r24, Y+2	; 0x02
    28a0:	63 e0       	ldi	r22, 0x03	; 3
    28a2:	40 e0       	ldi	r20, 0x00	; 0
    28a4:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <GPIO_writePin>
    28a8:	bc c0       	rjmp	.+376    	; 0x2a22 <SEGMENT_DISPLAY+0x266>
				break;
			case 1:
				GPIO_writePin(port_num, PIN_0, LOGIC_HIGH);
    28aa:	8a 81       	ldd	r24, Y+2	; 0x02
    28ac:	60 e0       	ldi	r22, 0x00	; 0
    28ae:	41 e0       	ldi	r20, 0x01	; 1
    28b0:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
    28b4:	8a 81       	ldd	r24, Y+2	; 0x02
    28b6:	61 e0       	ldi	r22, 0x01	; 1
    28b8:	40 e0       	ldi	r20, 0x00	; 0
    28ba:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
    28be:	8a 81       	ldd	r24, Y+2	; 0x02
    28c0:	62 e0       	ldi	r22, 0x02	; 2
    28c2:	40 e0       	ldi	r20, 0x00	; 0
    28c4:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    28c8:	8a 81       	ldd	r24, Y+2	; 0x02
    28ca:	63 e0       	ldi	r22, 0x03	; 3
    28cc:	40 e0       	ldi	r20, 0x00	; 0
    28ce:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <GPIO_writePin>
    28d2:	a7 c0       	rjmp	.+334    	; 0x2a22 <SEGMENT_DISPLAY+0x266>
				break;
			case 2:
				GPIO_writePin(port_num, PIN_0, LOGIC_LOW);
    28d4:	8a 81       	ldd	r24, Y+2	; 0x02
    28d6:	60 e0       	ldi	r22, 0x00	; 0
    28d8:	40 e0       	ldi	r20, 0x00	; 0
    28da:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_HIGH);
    28de:	8a 81       	ldd	r24, Y+2	; 0x02
    28e0:	61 e0       	ldi	r22, 0x01	; 1
    28e2:	41 e0       	ldi	r20, 0x01	; 1
    28e4:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
    28e8:	8a 81       	ldd	r24, Y+2	; 0x02
    28ea:	62 e0       	ldi	r22, 0x02	; 2
    28ec:	40 e0       	ldi	r20, 0x00	; 0
    28ee:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    28f2:	8a 81       	ldd	r24, Y+2	; 0x02
    28f4:	63 e0       	ldi	r22, 0x03	; 3
    28f6:	40 e0       	ldi	r20, 0x00	; 0
    28f8:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <GPIO_writePin>
    28fc:	92 c0       	rjmp	.+292    	; 0x2a22 <SEGMENT_DISPLAY+0x266>
				break;
			case 3:
				GPIO_writePin(port_num, PIN_0, LOGIC_HIGH);
    28fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2900:	60 e0       	ldi	r22, 0x00	; 0
    2902:	41 e0       	ldi	r20, 0x01	; 1
    2904:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_HIGH);
    2908:	8a 81       	ldd	r24, Y+2	; 0x02
    290a:	61 e0       	ldi	r22, 0x01	; 1
    290c:	41 e0       	ldi	r20, 0x01	; 1
    290e:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
    2912:	8a 81       	ldd	r24, Y+2	; 0x02
    2914:	62 e0       	ldi	r22, 0x02	; 2
    2916:	40 e0       	ldi	r20, 0x00	; 0
    2918:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    291c:	8a 81       	ldd	r24, Y+2	; 0x02
    291e:	63 e0       	ldi	r22, 0x03	; 3
    2920:	40 e0       	ldi	r20, 0x00	; 0
    2922:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <GPIO_writePin>
    2926:	7d c0       	rjmp	.+250    	; 0x2a22 <SEGMENT_DISPLAY+0x266>
				break;
			case 4:
				GPIO_writePin(port_num, PIN_0, LOGIC_LOW);
    2928:	8a 81       	ldd	r24, Y+2	; 0x02
    292a:	60 e0       	ldi	r22, 0x00	; 0
    292c:	40 e0       	ldi	r20, 0x00	; 0
    292e:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
    2932:	8a 81       	ldd	r24, Y+2	; 0x02
    2934:	61 e0       	ldi	r22, 0x01	; 1
    2936:	40 e0       	ldi	r20, 0x00	; 0
    2938:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_HIGH);
    293c:	8a 81       	ldd	r24, Y+2	; 0x02
    293e:	62 e0       	ldi	r22, 0x02	; 2
    2940:	41 e0       	ldi	r20, 0x01	; 1
    2942:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    2946:	8a 81       	ldd	r24, Y+2	; 0x02
    2948:	63 e0       	ldi	r22, 0x03	; 3
    294a:	40 e0       	ldi	r20, 0x00	; 0
    294c:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <GPIO_writePin>
    2950:	68 c0       	rjmp	.+208    	; 0x2a22 <SEGMENT_DISPLAY+0x266>
				break;
			case 5:
				GPIO_writePin(port_num, PIN_0, LOGIC_HIGH);
    2952:	8a 81       	ldd	r24, Y+2	; 0x02
    2954:	60 e0       	ldi	r22, 0x00	; 0
    2956:	41 e0       	ldi	r20, 0x01	; 1
    2958:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
    295c:	8a 81       	ldd	r24, Y+2	; 0x02
    295e:	61 e0       	ldi	r22, 0x01	; 1
    2960:	40 e0       	ldi	r20, 0x00	; 0
    2962:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_HIGH);
    2966:	8a 81       	ldd	r24, Y+2	; 0x02
    2968:	62 e0       	ldi	r22, 0x02	; 2
    296a:	41 e0       	ldi	r20, 0x01	; 1
    296c:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    2970:	8a 81       	ldd	r24, Y+2	; 0x02
    2972:	63 e0       	ldi	r22, 0x03	; 3
    2974:	40 e0       	ldi	r20, 0x00	; 0
    2976:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <GPIO_writePin>
    297a:	53 c0       	rjmp	.+166    	; 0x2a22 <SEGMENT_DISPLAY+0x266>
				break;
			case 6:
				GPIO_writePin(port_num, PIN_0, LOGIC_LOW);
    297c:	8a 81       	ldd	r24, Y+2	; 0x02
    297e:	60 e0       	ldi	r22, 0x00	; 0
    2980:	40 e0       	ldi	r20, 0x00	; 0
    2982:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_HIGH);
    2986:	8a 81       	ldd	r24, Y+2	; 0x02
    2988:	61 e0       	ldi	r22, 0x01	; 1
    298a:	41 e0       	ldi	r20, 0x01	; 1
    298c:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_HIGH);
    2990:	8a 81       	ldd	r24, Y+2	; 0x02
    2992:	62 e0       	ldi	r22, 0x02	; 2
    2994:	41 e0       	ldi	r20, 0x01	; 1
    2996:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    299a:	8a 81       	ldd	r24, Y+2	; 0x02
    299c:	63 e0       	ldi	r22, 0x03	; 3
    299e:	40 e0       	ldi	r20, 0x00	; 0
    29a0:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <GPIO_writePin>
    29a4:	3e c0       	rjmp	.+124    	; 0x2a22 <SEGMENT_DISPLAY+0x266>
				break;
			case 7:
				GPIO_writePin(port_num, PIN_0, LOGIC_HIGH);
    29a6:	8a 81       	ldd	r24, Y+2	; 0x02
    29a8:	60 e0       	ldi	r22, 0x00	; 0
    29aa:	41 e0       	ldi	r20, 0x01	; 1
    29ac:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_HIGH);
    29b0:	8a 81       	ldd	r24, Y+2	; 0x02
    29b2:	61 e0       	ldi	r22, 0x01	; 1
    29b4:	41 e0       	ldi	r20, 0x01	; 1
    29b6:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_HIGH);
    29ba:	8a 81       	ldd	r24, Y+2	; 0x02
    29bc:	62 e0       	ldi	r22, 0x02	; 2
    29be:	41 e0       	ldi	r20, 0x01	; 1
    29c0:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    29c4:	8a 81       	ldd	r24, Y+2	; 0x02
    29c6:	63 e0       	ldi	r22, 0x03	; 3
    29c8:	40 e0       	ldi	r20, 0x00	; 0
    29ca:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <GPIO_writePin>
    29ce:	29 c0       	rjmp	.+82     	; 0x2a22 <SEGMENT_DISPLAY+0x266>
				break;
			case 8:
				GPIO_writePin(port_num, PIN_0, LOGIC_LOW);
    29d0:	8a 81       	ldd	r24, Y+2	; 0x02
    29d2:	60 e0       	ldi	r22, 0x00	; 0
    29d4:	40 e0       	ldi	r20, 0x00	; 0
    29d6:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
    29da:	8a 81       	ldd	r24, Y+2	; 0x02
    29dc:	61 e0       	ldi	r22, 0x01	; 1
    29de:	40 e0       	ldi	r20, 0x00	; 0
    29e0:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
    29e4:	8a 81       	ldd	r24, Y+2	; 0x02
    29e6:	62 e0       	ldi	r22, 0x02	; 2
    29e8:	40 e0       	ldi	r20, 0x00	; 0
    29ea:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_HIGH);
    29ee:	8a 81       	ldd	r24, Y+2	; 0x02
    29f0:	63 e0       	ldi	r22, 0x03	; 3
    29f2:	41 e0       	ldi	r20, 0x01	; 1
    29f4:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <GPIO_writePin>
    29f8:	14 c0       	rjmp	.+40     	; 0x2a22 <SEGMENT_DISPLAY+0x266>
				break;
			case 9:
				GPIO_writePin(port_num, PIN_0, LOGIC_HIGH);
    29fa:	8a 81       	ldd	r24, Y+2	; 0x02
    29fc:	60 e0       	ldi	r22, 0x00	; 0
    29fe:	41 e0       	ldi	r20, 0x01	; 1
    2a00:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
    2a04:	8a 81       	ldd	r24, Y+2	; 0x02
    2a06:	61 e0       	ldi	r22, 0x01	; 1
    2a08:	40 e0       	ldi	r20, 0x00	; 0
    2a0a:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
    2a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a10:	62 e0       	ldi	r22, 0x02	; 2
    2a12:	40 e0       	ldi	r20, 0x00	; 0
    2a14:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_HIGH);
    2a18:	8a 81       	ldd	r24, Y+2	; 0x02
    2a1a:	63 e0       	ldi	r22, 0x03	; 3
    2a1c:	41 e0       	ldi	r20, 0x01	; 1
    2a1e:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <GPIO_writePin>
				break;
		}
		SEGMENT_Driver_Checker = SEGMENT_OK;
    2a22:	19 82       	std	Y+1, r1	; 0x01
	}
	return SEGMENT_Driver_Checker;
    2a24:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a26:	0f 90       	pop	r0
    2a28:	0f 90       	pop	r0
    2a2a:	0f 90       	pop	r0
    2a2c:	0f 90       	pop	r0
    2a2e:	0f 90       	pop	r0
    2a30:	cf 91       	pop	r28
    2a32:	df 91       	pop	r29
    2a34:	08 95       	ret

00002a36 <MOTOR_dcMotorInit>:
 *                              					Module Implementation                           					  	  *
 *******************************************************************************/

// Initializes and enables the ADC Module to start functionality

void MOTOR_dcMotorInit() {
    2a36:	df 93       	push	r29
    2a38:	cf 93       	push	r28
    2a3a:	cd b7       	in	r28, 0x3d	; 61
    2a3c:	de b7       	in	r29, 0x3e	; 62
	// Configuring the Input pins to control the Motor
	GPIO_setupPinDirection(DCMOTOR_INPUT_PORT, DCMOTOR_CLOCKWISE, PIN_INPUT);
    2a3e:	eb e3       	ldi	r30, 0x3B	; 59
    2a40:	f0 e0       	ldi	r31, 0x00	; 0
    2a42:	80 81       	ld	r24, Z
    2a44:	60 e0       	ldi	r22, 0x00	; 0
    2a46:	40 e0       	ldi	r20, 0x00	; 0
    2a48:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DCMOTOR_INPUT_PORT, DCMOTOR_ANTICLOCKWISE, PIN_INPUT);
    2a4c:	eb e3       	ldi	r30, 0x3B	; 59
    2a4e:	f0 e0       	ldi	r31, 0x00	; 0
    2a50:	80 81       	ld	r24, Z
    2a52:	61 e0       	ldi	r22, 0x01	; 1
    2a54:	40 e0       	ldi	r20, 0x00	; 0
    2a56:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DCMOTOR_INPUT_PORT, DCMOTOR_OFF, PIN_INPUT);
    2a5a:	eb e3       	ldi	r30, 0x3B	; 59
    2a5c:	f0 e0       	ldi	r31, 0x00	; 0
    2a5e:	80 81       	ld	r24, Z
    2a60:	62 e0       	ldi	r22, 0x02	; 2
    2a62:	40 e0       	ldi	r20, 0x00	; 0
    2a64:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(DCMOTOR_OUTPUT_PORT, DCMOTOR_OUTPUT_PIN, PIN_OUTPUT);
    2a68:	e5 e3       	ldi	r30, 0x35	; 53
    2a6a:	f0 e0       	ldi	r31, 0x00	; 0
    2a6c:	80 81       	ld	r24, Z
    2a6e:	60 e0       	ldi	r22, 0x00	; 0
    2a70:	41 e0       	ldi	r20, 0x01	; 1
    2a72:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DCMOTOR_OUTPUT_PORT, DCMOTOR_OUTPUT_PIN + 1, PIN_OUTPUT);
    2a76:	e5 e3       	ldi	r30, 0x35	; 53
    2a78:	f0 e0       	ldi	r31, 0x00	; 0
    2a7a:	80 81       	ld	r24, Z
    2a7c:	61 e0       	ldi	r22, 0x01	; 1
    2a7e:	41 e0       	ldi	r20, 0x01	; 1
    2a80:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <GPIO_setupPinDirection>
}
    2a84:	cf 91       	pop	r28
    2a86:	df 91       	pop	r29
    2a88:	08 95       	ret

00002a8a <MOTOR_dcMotorControl>:

void MOTOR_dcMotorControl(void) {
    2a8a:	df 93       	push	r29
    2a8c:	cf 93       	push	r28
    2a8e:	cd b7       	in	r28, 0x3d	; 61
    2a90:	de b7       	in	r29, 0x3e	; 62
	// Configuring the Input pins to control the Motor
	MOTOR_dcMotorInit();
    2a92:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <MOTOR_dcMotorInit>

	// SETTING THE BITS OF THE L293D CHIP CONTROLLING THE MOTORS
	if (BIT_IS_SET(DCMOTOR_INPUT_PORT, DCMOTOR_CLOCKWISE)) {
    2a96:	eb e3       	ldi	r30, 0x3B	; 59
    2a98:	f0 e0       	ldi	r31, 0x00	; 0
    2a9a:	80 81       	ld	r24, Z
    2a9c:	88 2f       	mov	r24, r24
    2a9e:	90 e0       	ldi	r25, 0x00	; 0
    2aa0:	81 70       	andi	r24, 0x01	; 1
    2aa2:	90 70       	andi	r25, 0x00	; 0
    2aa4:	88 23       	and	r24, r24
    2aa6:	79 f0       	breq	.+30     	; 0x2ac6 <MOTOR_dcMotorControl+0x3c>
		CLR_BIT(DCMOTOR_OUTPUT_PORT, DCMOTOR_OUTPUT_PIN);
    2aa8:	a5 e3       	ldi	r26, 0x35	; 53
    2aaa:	b0 e0       	ldi	r27, 0x00	; 0
    2aac:	e5 e3       	ldi	r30, 0x35	; 53
    2aae:	f0 e0       	ldi	r31, 0x00	; 0
    2ab0:	80 81       	ld	r24, Z
    2ab2:	8e 7f       	andi	r24, 0xFE	; 254
    2ab4:	8c 93       	st	X, r24
		SET_BIT(DCMOTOR_OUTPUT_PORT, (DCMOTOR_OUTPUT_PIN + 1));
    2ab6:	a5 e3       	ldi	r26, 0x35	; 53
    2ab8:	b0 e0       	ldi	r27, 0x00	; 0
    2aba:	e5 e3       	ldi	r30, 0x35	; 53
    2abc:	f0 e0       	ldi	r31, 0x00	; 0
    2abe:	80 81       	ld	r24, Z
    2ac0:	82 60       	ori	r24, 0x02	; 2
    2ac2:	8c 93       	st	X, r24
    2ac4:	2f c0       	rjmp	.+94     	; 0x2b24 <MOTOR_dcMotorControl+0x9a>
	}

	else if (BIT_IS_SET(DCMOTOR_INPUT_PORT, DCMOTOR_ANTICLOCKWISE)) {
    2ac6:	eb e3       	ldi	r30, 0x3B	; 59
    2ac8:	f0 e0       	ldi	r31, 0x00	; 0
    2aca:	80 81       	ld	r24, Z
    2acc:	88 2f       	mov	r24, r24
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	82 70       	andi	r24, 0x02	; 2
    2ad2:	90 70       	andi	r25, 0x00	; 0
    2ad4:	00 97       	sbiw	r24, 0x00	; 0
    2ad6:	79 f0       	breq	.+30     	; 0x2af6 <MOTOR_dcMotorControl+0x6c>
		SET_BIT(DCMOTOR_OUTPUT_PORT, DCMOTOR_OUTPUT_PIN);
    2ad8:	a5 e3       	ldi	r26, 0x35	; 53
    2ada:	b0 e0       	ldi	r27, 0x00	; 0
    2adc:	e5 e3       	ldi	r30, 0x35	; 53
    2ade:	f0 e0       	ldi	r31, 0x00	; 0
    2ae0:	80 81       	ld	r24, Z
    2ae2:	81 60       	ori	r24, 0x01	; 1
    2ae4:	8c 93       	st	X, r24
		CLR_BIT(DCMOTOR_OUTPUT_PORT, (DCMOTOR_OUTPUT_PIN + 1));
    2ae6:	a5 e3       	ldi	r26, 0x35	; 53
    2ae8:	b0 e0       	ldi	r27, 0x00	; 0
    2aea:	e5 e3       	ldi	r30, 0x35	; 53
    2aec:	f0 e0       	ldi	r31, 0x00	; 0
    2aee:	80 81       	ld	r24, Z
    2af0:	8d 7f       	andi	r24, 0xFD	; 253
    2af2:	8c 93       	st	X, r24
    2af4:	17 c0       	rjmp	.+46     	; 0x2b24 <MOTOR_dcMotorControl+0x9a>
	}

	else if (BIT_IS_SET(DCMOTOR_INPUT_PORT, DCMOTOR_OFF)) {
    2af6:	eb e3       	ldi	r30, 0x3B	; 59
    2af8:	f0 e0       	ldi	r31, 0x00	; 0
    2afa:	80 81       	ld	r24, Z
    2afc:	88 2f       	mov	r24, r24
    2afe:	90 e0       	ldi	r25, 0x00	; 0
    2b00:	84 70       	andi	r24, 0x04	; 4
    2b02:	90 70       	andi	r25, 0x00	; 0
    2b04:	00 97       	sbiw	r24, 0x00	; 0
    2b06:	71 f0       	breq	.+28     	; 0x2b24 <MOTOR_dcMotorControl+0x9a>
		CLR_BIT(DCMOTOR_OUTPUT_PORT, DCMOTOR_OUTPUT_PIN);
    2b08:	a5 e3       	ldi	r26, 0x35	; 53
    2b0a:	b0 e0       	ldi	r27, 0x00	; 0
    2b0c:	e5 e3       	ldi	r30, 0x35	; 53
    2b0e:	f0 e0       	ldi	r31, 0x00	; 0
    2b10:	80 81       	ld	r24, Z
    2b12:	8e 7f       	andi	r24, 0xFE	; 254
    2b14:	8c 93       	st	X, r24
		CLR_BIT(DCMOTOR_OUTPUT_PORT, (DCMOTOR_OUTPUT_PIN + 1));
    2b16:	a5 e3       	ldi	r26, 0x35	; 53
    2b18:	b0 e0       	ldi	r27, 0x00	; 0
    2b1a:	e5 e3       	ldi	r30, 0x35	; 53
    2b1c:	f0 e0       	ldi	r31, 0x00	; 0
    2b1e:	80 81       	ld	r24, Z
    2b20:	8d 7f       	andi	r24, 0xFD	; 253
    2b22:	8c 93       	st	X, r24
	}
}
    2b24:	cf 91       	pop	r28
    2b26:	df 91       	pop	r29
    2b28:	08 95       	ret

00002b2a <LM35_getTemperature>:
#include "avr/io.h" /* To use the IO Ports Registers */
#include <util/delay.h>


// Initializes and enables the ADC Module to start functionality
uint8 LM35_getTemperature(void) {
    2b2a:	df 93       	push	r29
    2b2c:	cf 93       	push	r28
    2b2e:	00 d0       	rcall	.+0      	; 0x2b30 <LM35_getTemperature+0x6>
    2b30:	cd b7       	in	r28, 0x3d	; 61
    2b32:	de b7       	in	r29, 0x3e	; 62
	uint8 temperature = 0;
    2b34:	1a 82       	std	Y+2, r1	; 0x02
	uint8 ADC_Value = 0;
    2b36:	19 82       	std	Y+1, r1	; 0x01
	ADC_Value = ADC_readChannel(LM35_CH_ID);
    2b38:	82 e0       	ldi	r24, 0x02	; 2
    2b3a:	0e 94 7f 13 	call	0x26fe	; 0x26fe <ADC_readChannel>
    2b3e:	89 83       	std	Y+1, r24	; 0x01

	temperature = (uint8) ( ( (uint32)ADC_Value * LM35_MAX_TEMP * ADC_REFERENCE_VOLT_VALUE) / (ADC_MAX_VALUE * LM35_MAX_VOLT) );
    2b40:	89 81       	ldd	r24, Y+1	; 0x01
    2b42:	88 2f       	mov	r24, r24
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	a0 e0       	ldi	r26, 0x00	; 0
    2b48:	b0 e0       	ldi	r27, 0x00	; 0
    2b4a:	2e ee       	ldi	r18, 0xEE	; 238
    2b4c:	32 e0       	ldi	r19, 0x02	; 2
    2b4e:	40 e0       	ldi	r20, 0x00	; 0
    2b50:	50 e0       	ldi	r21, 0x00	; 0
    2b52:	bc 01       	movw	r22, r24
    2b54:	cd 01       	movw	r24, r26
    2b56:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <__mulsi3>
    2b5a:	dc 01       	movw	r26, r24
    2b5c:	cb 01       	movw	r24, r22
    2b5e:	bc 01       	movw	r22, r24
    2b60:	cd 01       	movw	r24, r26
    2b62:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2b66:	dc 01       	movw	r26, r24
    2b68:	cb 01       	movw	r24, r22
    2b6a:	bc 01       	movw	r22, r24
    2b6c:	cd 01       	movw	r24, r26
    2b6e:	20 e0       	ldi	r18, 0x00	; 0
    2b70:	30 ed       	ldi	r19, 0xD0	; 208
    2b72:	4f eb       	ldi	r20, 0xBF	; 191
    2b74:	54 e4       	ldi	r21, 0x44	; 68
    2b76:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2b7a:	dc 01       	movw	r26, r24
    2b7c:	cb 01       	movw	r24, r22
    2b7e:	bc 01       	movw	r22, r24
    2b80:	cd 01       	movw	r24, r26
    2b82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b86:	dc 01       	movw	r26, r24
    2b88:	cb 01       	movw	r24, r22
    2b8a:	8a 83       	std	Y+2, r24	; 0x02

	return temperature;
    2b8c:	8a 81       	ldd	r24, Y+2	; 0x02

}
    2b8e:	0f 90       	pop	r0
    2b90:	0f 90       	pop	r0
    2b92:	cf 91       	pop	r28
    2b94:	df 91       	pop	r29
    2b96:	08 95       	ret

00002b98 <LED_Init>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
LED_Error_t LED_Init(uint8 port_num, uint8 pin_num) {
    2b98:	df 93       	push	r29
    2b9a:	cf 93       	push	r28
    2b9c:	00 d0       	rcall	.+0      	; 0x2b9e <LED_Init+0x6>
    2b9e:	0f 92       	push	r0
    2ba0:	cd b7       	in	r28, 0x3d	; 61
    2ba2:	de b7       	in	r29, 0x3e	; 62
    2ba4:	8a 83       	std	Y+2, r24	; 0x02
    2ba6:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t LED_Driver_Checker = NULL;
    2ba8:	19 82       	std	Y+1, r1	; 0x01
	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    2baa:	8b 81       	ldd	r24, Y+3	; 0x03
    2bac:	88 30       	cpi	r24, 0x08	; 8
    2bae:	18 f0       	brcs	.+6      	; 0x2bb6 <LED_Init+0x1e>
		LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    2bb0:	81 e0       	ldi	r24, 0x01	; 1
    2bb2:	89 83       	std	Y+1, r24	; 0x01
    2bb4:	0c c0       	rjmp	.+24     	; 0x2bce <LED_Init+0x36>
	}
	else if((port_num >= NUM_OF_PORTS)) {
    2bb6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb8:	84 30       	cpi	r24, 0x04	; 4
    2bba:	18 f0       	brcs	.+6      	; 0x2bc2 <LED_Init+0x2a>
		LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    2bbc:	82 e0       	ldi	r24, 0x02	; 2
    2bbe:	89 83       	std	Y+1, r24	; 0x01
    2bc0:	06 c0       	rjmp	.+12     	; 0x2bce <LED_Init+0x36>
	}
	else {
		/* Setup the pin direction as required */
		GPIO_setupPinDirection(port_num, pin_num, PIN_OUTPUT);
    2bc2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc4:	6b 81       	ldd	r22, Y+3	; 0x03
    2bc6:	41 e0       	ldi	r20, 0x01	; 1
    2bc8:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <GPIO_setupPinDirection>
		LED_Driver_Checker = LED_OK;
    2bcc:	19 82       	std	Y+1, r1	; 0x01
	}
	return LED_Driver_Checker;
    2bce:	89 81       	ldd	r24, Y+1	; 0x01
}
    2bd0:	0f 90       	pop	r0
    2bd2:	0f 90       	pop	r0
    2bd4:	0f 90       	pop	r0
    2bd6:	cf 91       	pop	r28
    2bd8:	df 91       	pop	r29
    2bda:	08 95       	ret

00002bdc <LED_On>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
LED_Error_t LED_On(uint8 port_num, uint8 pin_num) {
    2bdc:	df 93       	push	r29
    2bde:	cf 93       	push	r28
    2be0:	00 d0       	rcall	.+0      	; 0x2be2 <LED_On+0x6>
    2be2:	0f 92       	push	r0
    2be4:	cd b7       	in	r28, 0x3d	; 61
    2be6:	de b7       	in	r29, 0x3e	; 62
    2be8:	8a 83       	std	Y+2, r24	; 0x02
    2bea:	6b 83       	std	Y+3, r22	; 0x03

	uint8_t LED_Driver_Checker = NULL;
    2bec:	19 82       	std	Y+1, r1	; 0x01
		if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    2bee:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf0:	88 30       	cpi	r24, 0x08	; 8
    2bf2:	18 f0       	brcs	.+6      	; 0x2bfa <LED_On+0x1e>
			LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    2bf4:	81 e0       	ldi	r24, 0x01	; 1
    2bf6:	89 83       	std	Y+1, r24	; 0x01
    2bf8:	0c c0       	rjmp	.+24     	; 0x2c12 <LED_On+0x36>
		}
		else if((port_num >= NUM_OF_PORTS)) {
    2bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    2bfc:	84 30       	cpi	r24, 0x04	; 4
    2bfe:	18 f0       	brcs	.+6      	; 0x2c06 <LED_On+0x2a>
			LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    2c00:	82 e0       	ldi	r24, 0x02	; 2
    2c02:	89 83       	std	Y+1, r24	; 0x01
    2c04:	06 c0       	rjmp	.+12     	; 0x2c12 <LED_On+0x36>
		else {
			/* Setup the pin direction as required */
			#if (LED_MODE == LED_NEGATIVE_LOGIC)
				GPIO_writePin(port_num, pin_num, LOGIC_LOW);
			#elif (LED_MODE == LED_POSITIVE_LOGIC)
				GPIO_writePin(port_num, pin_num, LOGIC_HIGH);
    2c06:	8a 81       	ldd	r24, Y+2	; 0x02
    2c08:	6b 81       	ldd	r22, Y+3	; 0x03
    2c0a:	41 e0       	ldi	r20, 0x01	; 1
    2c0c:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <GPIO_writePin>
			#endif
			LED_Driver_Checker = LED_OK;
    2c10:	19 82       	std	Y+1, r1	; 0x01
		}
		return LED_Driver_Checker;
    2c12:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c14:	0f 90       	pop	r0
    2c16:	0f 90       	pop	r0
    2c18:	0f 90       	pop	r0
    2c1a:	cf 91       	pop	r28
    2c1c:	df 91       	pop	r29
    2c1e:	08 95       	ret

00002c20 <LED_Off>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
LED_Error_t LED_Off(uint8 port_num, uint8 pin_num) {
    2c20:	df 93       	push	r29
    2c22:	cf 93       	push	r28
    2c24:	00 d0       	rcall	.+0      	; 0x2c26 <LED_Off+0x6>
    2c26:	0f 92       	push	r0
    2c28:	cd b7       	in	r28, 0x3d	; 61
    2c2a:	de b7       	in	r29, 0x3e	; 62
    2c2c:	8a 83       	std	Y+2, r24	; 0x02
    2c2e:	6b 83       	std	Y+3, r22	; 0x03

	uint8_t LED_Driver_Checker = NULL;
    2c30:	19 82       	std	Y+1, r1	; 0x01
		if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    2c32:	8b 81       	ldd	r24, Y+3	; 0x03
    2c34:	88 30       	cpi	r24, 0x08	; 8
    2c36:	18 f0       	brcs	.+6      	; 0x2c3e <LED_Off+0x1e>
			LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    2c38:	81 e0       	ldi	r24, 0x01	; 1
    2c3a:	89 83       	std	Y+1, r24	; 0x01
    2c3c:	0c c0       	rjmp	.+24     	; 0x2c56 <LED_Off+0x36>
		}
		else if((port_num >= NUM_OF_PORTS)) {
    2c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c40:	84 30       	cpi	r24, 0x04	; 4
    2c42:	18 f0       	brcs	.+6      	; 0x2c4a <LED_Off+0x2a>
			LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    2c44:	82 e0       	ldi	r24, 0x02	; 2
    2c46:	89 83       	std	Y+1, r24	; 0x01
    2c48:	06 c0       	rjmp	.+12     	; 0x2c56 <LED_Off+0x36>
		else {
			/* Setup the pin direction as required */
			#if (LED_MODE == LED_NEGATIVE_LOGIC)
				GPIO_writePin(port_num, pin_num, LOGIC_HIGH);
			#elif (LED_MODE == LED_POSITIVE_LOGIC)
				GPIO_writePin(port_num, pin_num, LOGIC_LOW);
    2c4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c4c:	6b 81       	ldd	r22, Y+3	; 0x03
    2c4e:	40 e0       	ldi	r20, 0x00	; 0
    2c50:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <GPIO_writePin>
			#endif
			LED_Driver_Checker = LED_OK;
    2c54:	19 82       	std	Y+1, r1	; 0x01
		}
		return LED_Driver_Checker;
    2c56:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c58:	0f 90       	pop	r0
    2c5a:	0f 90       	pop	r0
    2c5c:	0f 90       	pop	r0
    2c5e:	cf 91       	pop	r28
    2c60:	df 91       	pop	r29
    2c62:	08 95       	ret

00002c64 <LED_Toggle>:

LED_Error_t LED_Toggle(uint8 port_num, uint8 pin_num) {
    2c64:	df 93       	push	r29
    2c66:	cf 93       	push	r28
    2c68:	00 d0       	rcall	.+0      	; 0x2c6a <LED_Toggle+0x6>
    2c6a:	0f 92       	push	r0
    2c6c:	cd b7       	in	r28, 0x3d	; 61
    2c6e:	de b7       	in	r29, 0x3e	; 62
    2c70:	8a 83       	std	Y+2, r24	; 0x02
    2c72:	6b 83       	std	Y+3, r22	; 0x03

	uint8_t LED_Driver_Checker = NULL;
    2c74:	19 82       	std	Y+1, r1	; 0x01
		if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    2c76:	8b 81       	ldd	r24, Y+3	; 0x03
    2c78:	88 30       	cpi	r24, 0x08	; 8
    2c7a:	18 f0       	brcs	.+6      	; 0x2c82 <LED_Toggle+0x1e>
			LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    2c7c:	81 e0       	ldi	r24, 0x01	; 1
    2c7e:	89 83       	std	Y+1, r24	; 0x01
    2c80:	0b c0       	rjmp	.+22     	; 0x2c98 <LED_Toggle+0x34>
		}
		else if((port_num >= NUM_OF_PORTS)) {
    2c82:	8a 81       	ldd	r24, Y+2	; 0x02
    2c84:	84 30       	cpi	r24, 0x04	; 4
    2c86:	18 f0       	brcs	.+6      	; 0x2c8e <LED_Toggle+0x2a>
			LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    2c88:	82 e0       	ldi	r24, 0x02	; 2
    2c8a:	89 83       	std	Y+1, r24	; 0x01
    2c8c:	05 c0       	rjmp	.+10     	; 0x2c98 <LED_Toggle+0x34>
		}
		else {
			/* Setup the pin direction as required */
			GPIO_togglePin(port_num, pin_num);
    2c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c90:	6b 81       	ldd	r22, Y+3	; 0x03
    2c92:	0e 94 94 10 	call	0x2128	; 0x2128 <GPIO_togglePin>
			LED_Driver_Checker = LED_OK;
    2c96:	19 82       	std	Y+1, r1	; 0x01
		}
		return LED_Driver_Checker;
    2c98:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c9a:	0f 90       	pop	r0
    2c9c:	0f 90       	pop	r0
    2c9e:	0f 90       	pop	r0
    2ca0:	cf 91       	pop	r28
    2ca2:	df 91       	pop	r29
    2ca4:	08 95       	ret

00002ca6 <LCD_Init>:
#include "avr/io.h" /* To use the IO Ports Registers */
#include <util/delay.h>


// Initializes and enables the LCD Module to start functionality
void LCD_Init(void) {
    2ca6:	df 93       	push	r29
    2ca8:	cf 93       	push	r28
    2caa:	cd b7       	in	r28, 0x3d	; 61
    2cac:	de b7       	in	r29, 0x3e	; 62
    2cae:	2e 97       	sbiw	r28, 0x0e	; 14
    2cb0:	0f b6       	in	r0, 0x3f	; 63
    2cb2:	f8 94       	cli
    2cb4:	de bf       	out	0x3e, r29	; 62
    2cb6:	0f be       	out	0x3f, r0	; 63
    2cb8:	cd bf       	out	0x3d, r28	; 61
	// Initialize RS Pin
	GPIO_setupPinDirection(LCD_INIT_PORT, LCD_RS, PIN_OUTPUT);
    2cba:	80 e0       	ldi	r24, 0x00	; 0
    2cbc:	61 e0       	ldi	r22, 0x01	; 1
    2cbe:	41 e0       	ldi	r20, 0x01	; 1
    2cc0:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <GPIO_setupPinDirection>

	// Initialize Enable Pin
	GPIO_setupPinDirection(LCD_INIT_PORT, LCD_ENABLE, PIN_OUTPUT);
    2cc4:	80 e0       	ldi	r24, 0x00	; 0
    2cc6:	62 e0       	ldi	r22, 0x02	; 2
    2cc8:	41 e0       	ldi	r20, 0x01	; 1
    2cca:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <GPIO_setupPinDirection>
    2cce:	80 e0       	ldi	r24, 0x00	; 0
    2cd0:	90 e0       	ldi	r25, 0x00	; 0
    2cd2:	a0 ea       	ldi	r26, 0xA0	; 160
    2cd4:	b1 e4       	ldi	r27, 0x41	; 65
    2cd6:	8b 87       	std	Y+11, r24	; 0x0b
    2cd8:	9c 87       	std	Y+12, r25	; 0x0c
    2cda:	ad 87       	std	Y+13, r26	; 0x0d
    2cdc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cde:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ce0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ce2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ce4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ce6:	20 e0       	ldi	r18, 0x00	; 0
    2ce8:	30 e0       	ldi	r19, 0x00	; 0
    2cea:	4a ef       	ldi	r20, 0xFA	; 250
    2cec:	54 e4       	ldi	r21, 0x44	; 68
    2cee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cf2:	dc 01       	movw	r26, r24
    2cf4:	cb 01       	movw	r24, r22
    2cf6:	8f 83       	std	Y+7, r24	; 0x07
    2cf8:	98 87       	std	Y+8, r25	; 0x08
    2cfa:	a9 87       	std	Y+9, r26	; 0x09
    2cfc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cfe:	6f 81       	ldd	r22, Y+7	; 0x07
    2d00:	78 85       	ldd	r23, Y+8	; 0x08
    2d02:	89 85       	ldd	r24, Y+9	; 0x09
    2d04:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d06:	20 e0       	ldi	r18, 0x00	; 0
    2d08:	30 e0       	ldi	r19, 0x00	; 0
    2d0a:	40 e8       	ldi	r20, 0x80	; 128
    2d0c:	5f e3       	ldi	r21, 0x3F	; 63
    2d0e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d12:	88 23       	and	r24, r24
    2d14:	2c f4       	brge	.+10     	; 0x2d20 <LCD_Init+0x7a>
		__ticks = 1;
    2d16:	81 e0       	ldi	r24, 0x01	; 1
    2d18:	90 e0       	ldi	r25, 0x00	; 0
    2d1a:	9e 83       	std	Y+6, r25	; 0x06
    2d1c:	8d 83       	std	Y+5, r24	; 0x05
    2d1e:	3f c0       	rjmp	.+126    	; 0x2d9e <LCD_Init+0xf8>
	else if (__tmp > 65535)
    2d20:	6f 81       	ldd	r22, Y+7	; 0x07
    2d22:	78 85       	ldd	r23, Y+8	; 0x08
    2d24:	89 85       	ldd	r24, Y+9	; 0x09
    2d26:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d28:	20 e0       	ldi	r18, 0x00	; 0
    2d2a:	3f ef       	ldi	r19, 0xFF	; 255
    2d2c:	4f e7       	ldi	r20, 0x7F	; 127
    2d2e:	57 e4       	ldi	r21, 0x47	; 71
    2d30:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d34:	18 16       	cp	r1, r24
    2d36:	4c f5       	brge	.+82     	; 0x2d8a <LCD_Init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d38:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d40:	20 e0       	ldi	r18, 0x00	; 0
    2d42:	30 e0       	ldi	r19, 0x00	; 0
    2d44:	40 e2       	ldi	r20, 0x20	; 32
    2d46:	51 e4       	ldi	r21, 0x41	; 65
    2d48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d4c:	dc 01       	movw	r26, r24
    2d4e:	cb 01       	movw	r24, r22
    2d50:	bc 01       	movw	r22, r24
    2d52:	cd 01       	movw	r24, r26
    2d54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d58:	dc 01       	movw	r26, r24
    2d5a:	cb 01       	movw	r24, r22
    2d5c:	9e 83       	std	Y+6, r25	; 0x06
    2d5e:	8d 83       	std	Y+5, r24	; 0x05
    2d60:	0f c0       	rjmp	.+30     	; 0x2d80 <LCD_Init+0xda>
    2d62:	88 ec       	ldi	r24, 0xC8	; 200
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	9c 83       	std	Y+4, r25	; 0x04
    2d68:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d6c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d6e:	01 97       	sbiw	r24, 0x01	; 1
    2d70:	f1 f7       	brne	.-4      	; 0x2d6e <LCD_Init+0xc8>
    2d72:	9c 83       	std	Y+4, r25	; 0x04
    2d74:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d76:	8d 81       	ldd	r24, Y+5	; 0x05
    2d78:	9e 81       	ldd	r25, Y+6	; 0x06
    2d7a:	01 97       	sbiw	r24, 0x01	; 1
    2d7c:	9e 83       	std	Y+6, r25	; 0x06
    2d7e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d80:	8d 81       	ldd	r24, Y+5	; 0x05
    2d82:	9e 81       	ldd	r25, Y+6	; 0x06
    2d84:	00 97       	sbiw	r24, 0x00	; 0
    2d86:	69 f7       	brne	.-38     	; 0x2d62 <LCD_Init+0xbc>
    2d88:	14 c0       	rjmp	.+40     	; 0x2db2 <LCD_Init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d8a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d8c:	78 85       	ldd	r23, Y+8	; 0x08
    2d8e:	89 85       	ldd	r24, Y+9	; 0x09
    2d90:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d96:	dc 01       	movw	r26, r24
    2d98:	cb 01       	movw	r24, r22
    2d9a:	9e 83       	std	Y+6, r25	; 0x06
    2d9c:	8d 83       	std	Y+5, r24	; 0x05
    2d9e:	8d 81       	ldd	r24, Y+5	; 0x05
    2da0:	9e 81       	ldd	r25, Y+6	; 0x06
    2da2:	9a 83       	std	Y+2, r25	; 0x02
    2da4:	89 83       	std	Y+1, r24	; 0x01
    2da6:	89 81       	ldd	r24, Y+1	; 0x01
    2da8:	9a 81       	ldd	r25, Y+2	; 0x02
    2daa:	01 97       	sbiw	r24, 0x01	; 1
    2dac:	f1 f7       	brne	.-4      	; 0x2daa <LCD_Init+0x104>
    2dae:	9a 83       	std	Y+2, r25	; 0x02
    2db0:	89 83       	std	Y+1, r24	; 0x01
		LCD_sendCommand(LCD_TWO_LINE_FOUR_BIT_INIT2);
		LCD_sendCommand(LCD_TWO_LINE_FOUR_BIT);
	}
	else if (LCD_BIT_MODE == LCD_8_BIT) {
		// Setup the port and pins for the data pins inside the LCD
		GPIO_setupPortDirection(LCD_DATA_PORT, PORT_OUTPUT);
    2db2:	80 e0       	ldi	r24, 0x00	; 0
    2db4:	6f ef       	ldi	r22, 0xFF	; 255
    2db6:	0e 94 cd 11 	call	0x239a	; 0x239a <GPIO_setupPortDirection>

		LCD_sendCommand(LCD_TWO_LINE_EIGHT_BIT);
    2dba:	88 e3       	ldi	r24, 0x38	; 56
    2dbc:	0e 94 ef 16 	call	0x2dde	; 0x2dde <LCD_sendCommand>

		LCD_sendCommand(LCD_TWO_LINE_EIGHT_BIT);
	}

	// Makes the cursor off
	LCD_sendCommand(LCD_CURSOR_OFF);
    2dc0:	8c e0       	ldi	r24, 0x0C	; 12
    2dc2:	0e 94 ef 16 	call	0x2dde	; 0x2dde <LCD_sendCommand>
	// Clears Display
	LCD_sendCommand(LCD_CLEAR_DISPLAY);
    2dc6:	81 e0       	ldi	r24, 0x01	; 1
    2dc8:	0e 94 ef 16 	call	0x2dde	; 0x2dde <LCD_sendCommand>
}
    2dcc:	2e 96       	adiw	r28, 0x0e	; 14
    2dce:	0f b6       	in	r0, 0x3f	; 63
    2dd0:	f8 94       	cli
    2dd2:	de bf       	out	0x3e, r29	; 62
    2dd4:	0f be       	out	0x3f, r0	; 63
    2dd6:	cd bf       	out	0x3d, r28	; 61
    2dd8:	cf 91       	pop	r28
    2dda:	df 91       	pop	r29
    2ddc:	08 95       	ret

00002dde <LCD_sendCommand>:


// Sends a command to the LCD
void LCD_sendCommand(uint8 command) {
    2dde:	df 93       	push	r29
    2de0:	cf 93       	push	r28
    2de2:	cd b7       	in	r28, 0x3d	; 61
    2de4:	de b7       	in	r29, 0x3e	; 62
    2de6:	e9 97       	sbiw	r28, 0x39	; 57
    2de8:	0f b6       	in	r0, 0x3f	; 63
    2dea:	f8 94       	cli
    2dec:	de bf       	out	0x3e, r29	; 62
    2dee:	0f be       	out	0x3f, r0	; 63
    2df0:	cd bf       	out	0x3d, r28	; 61
    2df2:	89 af       	std	Y+57, r24	; 0x39
	// Set RS Pin to '0'
	GPIO_writePin(LCD_INIT_PORT, LCD_RS, LOGIC_LOW);
    2df4:	80 e0       	ldi	r24, 0x00	; 0
    2df6:	61 e0       	ldi	r22, 0x01	; 1
    2df8:	40 e0       	ldi	r20, 0x00	; 0
    2dfa:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <GPIO_writePin>
    2dfe:	80 e0       	ldi	r24, 0x00	; 0
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    2e02:	a0 e8       	ldi	r26, 0x80	; 128
    2e04:	bf e3       	ldi	r27, 0x3F	; 63
    2e06:	8d ab       	std	Y+53, r24	; 0x35
    2e08:	9e ab       	std	Y+54, r25	; 0x36
    2e0a:	af ab       	std	Y+55, r26	; 0x37
    2e0c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e0e:	6d a9       	ldd	r22, Y+53	; 0x35
    2e10:	7e a9       	ldd	r23, Y+54	; 0x36
    2e12:	8f a9       	ldd	r24, Y+55	; 0x37
    2e14:	98 ad       	ldd	r25, Y+56	; 0x38
    2e16:	20 e0       	ldi	r18, 0x00	; 0
    2e18:	30 e0       	ldi	r19, 0x00	; 0
    2e1a:	4a ef       	ldi	r20, 0xFA	; 250
    2e1c:	54 e4       	ldi	r21, 0x44	; 68
    2e1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e22:	dc 01       	movw	r26, r24
    2e24:	cb 01       	movw	r24, r22
    2e26:	89 ab       	std	Y+49, r24	; 0x31
    2e28:	9a ab       	std	Y+50, r25	; 0x32
    2e2a:	ab ab       	std	Y+51, r26	; 0x33
    2e2c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2e2e:	69 a9       	ldd	r22, Y+49	; 0x31
    2e30:	7a a9       	ldd	r23, Y+50	; 0x32
    2e32:	8b a9       	ldd	r24, Y+51	; 0x33
    2e34:	9c a9       	ldd	r25, Y+52	; 0x34
    2e36:	20 e0       	ldi	r18, 0x00	; 0
    2e38:	30 e0       	ldi	r19, 0x00	; 0
    2e3a:	40 e8       	ldi	r20, 0x80	; 128
    2e3c:	5f e3       	ldi	r21, 0x3F	; 63
    2e3e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e42:	88 23       	and	r24, r24
    2e44:	2c f4       	brge	.+10     	; 0x2e50 <LCD_sendCommand+0x72>
		__ticks = 1;
    2e46:	81 e0       	ldi	r24, 0x01	; 1
    2e48:	90 e0       	ldi	r25, 0x00	; 0
    2e4a:	98 ab       	std	Y+48, r25	; 0x30
    2e4c:	8f a7       	std	Y+47, r24	; 0x2f
    2e4e:	3f c0       	rjmp	.+126    	; 0x2ece <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    2e50:	69 a9       	ldd	r22, Y+49	; 0x31
    2e52:	7a a9       	ldd	r23, Y+50	; 0x32
    2e54:	8b a9       	ldd	r24, Y+51	; 0x33
    2e56:	9c a9       	ldd	r25, Y+52	; 0x34
    2e58:	20 e0       	ldi	r18, 0x00	; 0
    2e5a:	3f ef       	ldi	r19, 0xFF	; 255
    2e5c:	4f e7       	ldi	r20, 0x7F	; 127
    2e5e:	57 e4       	ldi	r21, 0x47	; 71
    2e60:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e64:	18 16       	cp	r1, r24
    2e66:	4c f5       	brge	.+82     	; 0x2eba <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e68:	6d a9       	ldd	r22, Y+53	; 0x35
    2e6a:	7e a9       	ldd	r23, Y+54	; 0x36
    2e6c:	8f a9       	ldd	r24, Y+55	; 0x37
    2e6e:	98 ad       	ldd	r25, Y+56	; 0x38
    2e70:	20 e0       	ldi	r18, 0x00	; 0
    2e72:	30 e0       	ldi	r19, 0x00	; 0
    2e74:	40 e2       	ldi	r20, 0x20	; 32
    2e76:	51 e4       	ldi	r21, 0x41	; 65
    2e78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e7c:	dc 01       	movw	r26, r24
    2e7e:	cb 01       	movw	r24, r22
    2e80:	bc 01       	movw	r22, r24
    2e82:	cd 01       	movw	r24, r26
    2e84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e88:	dc 01       	movw	r26, r24
    2e8a:	cb 01       	movw	r24, r22
    2e8c:	98 ab       	std	Y+48, r25	; 0x30
    2e8e:	8f a7       	std	Y+47, r24	; 0x2f
    2e90:	0f c0       	rjmp	.+30     	; 0x2eb0 <LCD_sendCommand+0xd2>
    2e92:	88 ec       	ldi	r24, 0xC8	; 200
    2e94:	90 e0       	ldi	r25, 0x00	; 0
    2e96:	9e a7       	std	Y+46, r25	; 0x2e
    2e98:	8d a7       	std	Y+45, r24	; 0x2d
    2e9a:	8d a5       	ldd	r24, Y+45	; 0x2d
    2e9c:	9e a5       	ldd	r25, Y+46	; 0x2e
    2e9e:	01 97       	sbiw	r24, 0x01	; 1
    2ea0:	f1 f7       	brne	.-4      	; 0x2e9e <LCD_sendCommand+0xc0>
    2ea2:	9e a7       	std	Y+46, r25	; 0x2e
    2ea4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ea6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ea8:	98 a9       	ldd	r25, Y+48	; 0x30
    2eaa:	01 97       	sbiw	r24, 0x01	; 1
    2eac:	98 ab       	std	Y+48, r25	; 0x30
    2eae:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eb0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2eb2:	98 a9       	ldd	r25, Y+48	; 0x30
    2eb4:	00 97       	sbiw	r24, 0x00	; 0
    2eb6:	69 f7       	brne	.-38     	; 0x2e92 <LCD_sendCommand+0xb4>
    2eb8:	14 c0       	rjmp	.+40     	; 0x2ee2 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eba:	69 a9       	ldd	r22, Y+49	; 0x31
    2ebc:	7a a9       	ldd	r23, Y+50	; 0x32
    2ebe:	8b a9       	ldd	r24, Y+51	; 0x33
    2ec0:	9c a9       	ldd	r25, Y+52	; 0x34
    2ec2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ec6:	dc 01       	movw	r26, r24
    2ec8:	cb 01       	movw	r24, r22
    2eca:	98 ab       	std	Y+48, r25	; 0x30
    2ecc:	8f a7       	std	Y+47, r24	; 0x2f
    2ece:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ed0:	98 a9       	ldd	r25, Y+48	; 0x30
    2ed2:	9c a7       	std	Y+44, r25	; 0x2c
    2ed4:	8b a7       	std	Y+43, r24	; 0x2b
    2ed6:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ed8:	9c a5       	ldd	r25, Y+44	; 0x2c
    2eda:	01 97       	sbiw	r24, 0x01	; 1
    2edc:	f1 f7       	brne	.-4      	; 0x2eda <LCD_sendCommand+0xfc>
    2ede:	9c a7       	std	Y+44, r25	; 0x2c
    2ee0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	// Set Enable Pin to '1'
	GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
    2ee2:	80 e0       	ldi	r24, 0x00	; 0
    2ee4:	62 e0       	ldi	r22, 0x02	; 2
    2ee6:	41 e0       	ldi	r20, 0x01	; 1
    2ee8:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <GPIO_writePin>
    2eec:	80 e0       	ldi	r24, 0x00	; 0
    2eee:	90 e0       	ldi	r25, 0x00	; 0
    2ef0:	a0 e8       	ldi	r26, 0x80	; 128
    2ef2:	bf e3       	ldi	r27, 0x3F	; 63
    2ef4:	8f a3       	std	Y+39, r24	; 0x27
    2ef6:	98 a7       	std	Y+40, r25	; 0x28
    2ef8:	a9 a7       	std	Y+41, r26	; 0x29
    2efa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2efc:	6f a1       	ldd	r22, Y+39	; 0x27
    2efe:	78 a5       	ldd	r23, Y+40	; 0x28
    2f00:	89 a5       	ldd	r24, Y+41	; 0x29
    2f02:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f04:	20 e0       	ldi	r18, 0x00	; 0
    2f06:	30 e0       	ldi	r19, 0x00	; 0
    2f08:	4a ef       	ldi	r20, 0xFA	; 250
    2f0a:	54 e4       	ldi	r21, 0x44	; 68
    2f0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f10:	dc 01       	movw	r26, r24
    2f12:	cb 01       	movw	r24, r22
    2f14:	8b a3       	std	Y+35, r24	; 0x23
    2f16:	9c a3       	std	Y+36, r25	; 0x24
    2f18:	ad a3       	std	Y+37, r26	; 0x25
    2f1a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2f1c:	6b a1       	ldd	r22, Y+35	; 0x23
    2f1e:	7c a1       	ldd	r23, Y+36	; 0x24
    2f20:	8d a1       	ldd	r24, Y+37	; 0x25
    2f22:	9e a1       	ldd	r25, Y+38	; 0x26
    2f24:	20 e0       	ldi	r18, 0x00	; 0
    2f26:	30 e0       	ldi	r19, 0x00	; 0
    2f28:	40 e8       	ldi	r20, 0x80	; 128
    2f2a:	5f e3       	ldi	r21, 0x3F	; 63
    2f2c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f30:	88 23       	and	r24, r24
    2f32:	2c f4       	brge	.+10     	; 0x2f3e <LCD_sendCommand+0x160>
		__ticks = 1;
    2f34:	81 e0       	ldi	r24, 0x01	; 1
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	9a a3       	std	Y+34, r25	; 0x22
    2f3a:	89 a3       	std	Y+33, r24	; 0x21
    2f3c:	3f c0       	rjmp	.+126    	; 0x2fbc <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    2f3e:	6b a1       	ldd	r22, Y+35	; 0x23
    2f40:	7c a1       	ldd	r23, Y+36	; 0x24
    2f42:	8d a1       	ldd	r24, Y+37	; 0x25
    2f44:	9e a1       	ldd	r25, Y+38	; 0x26
    2f46:	20 e0       	ldi	r18, 0x00	; 0
    2f48:	3f ef       	ldi	r19, 0xFF	; 255
    2f4a:	4f e7       	ldi	r20, 0x7F	; 127
    2f4c:	57 e4       	ldi	r21, 0x47	; 71
    2f4e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f52:	18 16       	cp	r1, r24
    2f54:	4c f5       	brge	.+82     	; 0x2fa8 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f56:	6f a1       	ldd	r22, Y+39	; 0x27
    2f58:	78 a5       	ldd	r23, Y+40	; 0x28
    2f5a:	89 a5       	ldd	r24, Y+41	; 0x29
    2f5c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f5e:	20 e0       	ldi	r18, 0x00	; 0
    2f60:	30 e0       	ldi	r19, 0x00	; 0
    2f62:	40 e2       	ldi	r20, 0x20	; 32
    2f64:	51 e4       	ldi	r21, 0x41	; 65
    2f66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f6a:	dc 01       	movw	r26, r24
    2f6c:	cb 01       	movw	r24, r22
    2f6e:	bc 01       	movw	r22, r24
    2f70:	cd 01       	movw	r24, r26
    2f72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f76:	dc 01       	movw	r26, r24
    2f78:	cb 01       	movw	r24, r22
    2f7a:	9a a3       	std	Y+34, r25	; 0x22
    2f7c:	89 a3       	std	Y+33, r24	; 0x21
    2f7e:	0f c0       	rjmp	.+30     	; 0x2f9e <LCD_sendCommand+0x1c0>
    2f80:	88 ec       	ldi	r24, 0xC8	; 200
    2f82:	90 e0       	ldi	r25, 0x00	; 0
    2f84:	98 a3       	std	Y+32, r25	; 0x20
    2f86:	8f 8f       	std	Y+31, r24	; 0x1f
    2f88:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f8a:	98 a1       	ldd	r25, Y+32	; 0x20
    2f8c:	01 97       	sbiw	r24, 0x01	; 1
    2f8e:	f1 f7       	brne	.-4      	; 0x2f8c <LCD_sendCommand+0x1ae>
    2f90:	98 a3       	std	Y+32, r25	; 0x20
    2f92:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f94:	89 a1       	ldd	r24, Y+33	; 0x21
    2f96:	9a a1       	ldd	r25, Y+34	; 0x22
    2f98:	01 97       	sbiw	r24, 0x01	; 1
    2f9a:	9a a3       	std	Y+34, r25	; 0x22
    2f9c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f9e:	89 a1       	ldd	r24, Y+33	; 0x21
    2fa0:	9a a1       	ldd	r25, Y+34	; 0x22
    2fa2:	00 97       	sbiw	r24, 0x00	; 0
    2fa4:	69 f7       	brne	.-38     	; 0x2f80 <LCD_sendCommand+0x1a2>
    2fa6:	14 c0       	rjmp	.+40     	; 0x2fd0 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fa8:	6b a1       	ldd	r22, Y+35	; 0x23
    2faa:	7c a1       	ldd	r23, Y+36	; 0x24
    2fac:	8d a1       	ldd	r24, Y+37	; 0x25
    2fae:	9e a1       	ldd	r25, Y+38	; 0x26
    2fb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fb4:	dc 01       	movw	r26, r24
    2fb6:	cb 01       	movw	r24, r22
    2fb8:	9a a3       	std	Y+34, r25	; 0x22
    2fba:	89 a3       	std	Y+33, r24	; 0x21
    2fbc:	89 a1       	ldd	r24, Y+33	; 0x21
    2fbe:	9a a1       	ldd	r25, Y+34	; 0x22
    2fc0:	9e 8f       	std	Y+30, r25	; 0x1e
    2fc2:	8d 8f       	std	Y+29, r24	; 0x1d
    2fc4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2fc6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2fc8:	01 97       	sbiw	r24, 0x01	; 1
    2fca:	f1 f7       	brne	.-4      	; 0x2fc8 <LCD_sendCommand+0x1ea>
    2fcc:	9e 8f       	std	Y+30, r25	; 0x1e
    2fce:	8d 8f       	std	Y+29, r24	; 0x1d
		// Clear Enable Pin to '0'
		GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
		_delay_ms(1); /* delay for processing Th = 13ns */
	}
	else if (LCD_BIT_MODE == LCD_8_BIT) {
		GPIO_writePort(LCD_DATA_PORT, command);
    2fd0:	80 e0       	ldi	r24, 0x00	; 0
    2fd2:	69 ad       	ldd	r22, Y+57	; 0x39
    2fd4:	0e 94 22 12 	call	0x2444	; 0x2444 <GPIO_writePort>
    2fd8:	80 e0       	ldi	r24, 0x00	; 0
    2fda:	90 e0       	ldi	r25, 0x00	; 0
    2fdc:	a0 e8       	ldi	r26, 0x80	; 128
    2fde:	bf e3       	ldi	r27, 0x3F	; 63
    2fe0:	89 8f       	std	Y+25, r24	; 0x19
    2fe2:	9a 8f       	std	Y+26, r25	; 0x1a
    2fe4:	ab 8f       	std	Y+27, r26	; 0x1b
    2fe6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fe8:	69 8d       	ldd	r22, Y+25	; 0x19
    2fea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ff0:	20 e0       	ldi	r18, 0x00	; 0
    2ff2:	30 e0       	ldi	r19, 0x00	; 0
    2ff4:	4a ef       	ldi	r20, 0xFA	; 250
    2ff6:	54 e4       	ldi	r21, 0x44	; 68
    2ff8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ffc:	dc 01       	movw	r26, r24
    2ffe:	cb 01       	movw	r24, r22
    3000:	8d 8b       	std	Y+21, r24	; 0x15
    3002:	9e 8b       	std	Y+22, r25	; 0x16
    3004:	af 8b       	std	Y+23, r26	; 0x17
    3006:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3008:	6d 89       	ldd	r22, Y+21	; 0x15
    300a:	7e 89       	ldd	r23, Y+22	; 0x16
    300c:	8f 89       	ldd	r24, Y+23	; 0x17
    300e:	98 8d       	ldd	r25, Y+24	; 0x18
    3010:	20 e0       	ldi	r18, 0x00	; 0
    3012:	30 e0       	ldi	r19, 0x00	; 0
    3014:	40 e8       	ldi	r20, 0x80	; 128
    3016:	5f e3       	ldi	r21, 0x3F	; 63
    3018:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    301c:	88 23       	and	r24, r24
    301e:	2c f4       	brge	.+10     	; 0x302a <LCD_sendCommand+0x24c>
		__ticks = 1;
    3020:	81 e0       	ldi	r24, 0x01	; 1
    3022:	90 e0       	ldi	r25, 0x00	; 0
    3024:	9c 8b       	std	Y+20, r25	; 0x14
    3026:	8b 8b       	std	Y+19, r24	; 0x13
    3028:	3f c0       	rjmp	.+126    	; 0x30a8 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    302a:	6d 89       	ldd	r22, Y+21	; 0x15
    302c:	7e 89       	ldd	r23, Y+22	; 0x16
    302e:	8f 89       	ldd	r24, Y+23	; 0x17
    3030:	98 8d       	ldd	r25, Y+24	; 0x18
    3032:	20 e0       	ldi	r18, 0x00	; 0
    3034:	3f ef       	ldi	r19, 0xFF	; 255
    3036:	4f e7       	ldi	r20, 0x7F	; 127
    3038:	57 e4       	ldi	r21, 0x47	; 71
    303a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    303e:	18 16       	cp	r1, r24
    3040:	4c f5       	brge	.+82     	; 0x3094 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3042:	69 8d       	ldd	r22, Y+25	; 0x19
    3044:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3046:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3048:	9c 8d       	ldd	r25, Y+28	; 0x1c
    304a:	20 e0       	ldi	r18, 0x00	; 0
    304c:	30 e0       	ldi	r19, 0x00	; 0
    304e:	40 e2       	ldi	r20, 0x20	; 32
    3050:	51 e4       	ldi	r21, 0x41	; 65
    3052:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3056:	dc 01       	movw	r26, r24
    3058:	cb 01       	movw	r24, r22
    305a:	bc 01       	movw	r22, r24
    305c:	cd 01       	movw	r24, r26
    305e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3062:	dc 01       	movw	r26, r24
    3064:	cb 01       	movw	r24, r22
    3066:	9c 8b       	std	Y+20, r25	; 0x14
    3068:	8b 8b       	std	Y+19, r24	; 0x13
    306a:	0f c0       	rjmp	.+30     	; 0x308a <LCD_sendCommand+0x2ac>
    306c:	88 ec       	ldi	r24, 0xC8	; 200
    306e:	90 e0       	ldi	r25, 0x00	; 0
    3070:	9a 8b       	std	Y+18, r25	; 0x12
    3072:	89 8b       	std	Y+17, r24	; 0x11
    3074:	89 89       	ldd	r24, Y+17	; 0x11
    3076:	9a 89       	ldd	r25, Y+18	; 0x12
    3078:	01 97       	sbiw	r24, 0x01	; 1
    307a:	f1 f7       	brne	.-4      	; 0x3078 <LCD_sendCommand+0x29a>
    307c:	9a 8b       	std	Y+18, r25	; 0x12
    307e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3080:	8b 89       	ldd	r24, Y+19	; 0x13
    3082:	9c 89       	ldd	r25, Y+20	; 0x14
    3084:	01 97       	sbiw	r24, 0x01	; 1
    3086:	9c 8b       	std	Y+20, r25	; 0x14
    3088:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    308a:	8b 89       	ldd	r24, Y+19	; 0x13
    308c:	9c 89       	ldd	r25, Y+20	; 0x14
    308e:	00 97       	sbiw	r24, 0x00	; 0
    3090:	69 f7       	brne	.-38     	; 0x306c <LCD_sendCommand+0x28e>
    3092:	14 c0       	rjmp	.+40     	; 0x30bc <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3094:	6d 89       	ldd	r22, Y+21	; 0x15
    3096:	7e 89       	ldd	r23, Y+22	; 0x16
    3098:	8f 89       	ldd	r24, Y+23	; 0x17
    309a:	98 8d       	ldd	r25, Y+24	; 0x18
    309c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30a0:	dc 01       	movw	r26, r24
    30a2:	cb 01       	movw	r24, r22
    30a4:	9c 8b       	std	Y+20, r25	; 0x14
    30a6:	8b 8b       	std	Y+19, r24	; 0x13
    30a8:	8b 89       	ldd	r24, Y+19	; 0x13
    30aa:	9c 89       	ldd	r25, Y+20	; 0x14
    30ac:	98 8b       	std	Y+16, r25	; 0x10
    30ae:	8f 87       	std	Y+15, r24	; 0x0f
    30b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    30b2:	98 89       	ldd	r25, Y+16	; 0x10
    30b4:	01 97       	sbiw	r24, 0x01	; 1
    30b6:	f1 f7       	brne	.-4      	; 0x30b4 <LCD_sendCommand+0x2d6>
    30b8:	98 8b       	std	Y+16, r25	; 0x10
    30ba:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);

		// Clear Enable Pin to '0'
		GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
    30bc:	80 e0       	ldi	r24, 0x00	; 0
    30be:	62 e0       	ldi	r22, 0x02	; 2
    30c0:	40 e0       	ldi	r20, 0x00	; 0
    30c2:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <GPIO_writePin>
    30c6:	80 e0       	ldi	r24, 0x00	; 0
    30c8:	90 e0       	ldi	r25, 0x00	; 0
    30ca:	a0 e8       	ldi	r26, 0x80	; 128
    30cc:	bf e3       	ldi	r27, 0x3F	; 63
    30ce:	8b 87       	std	Y+11, r24	; 0x0b
    30d0:	9c 87       	std	Y+12, r25	; 0x0c
    30d2:	ad 87       	std	Y+13, r26	; 0x0d
    30d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    30d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    30da:	8d 85       	ldd	r24, Y+13	; 0x0d
    30dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    30de:	20 e0       	ldi	r18, 0x00	; 0
    30e0:	30 e0       	ldi	r19, 0x00	; 0
    30e2:	4a ef       	ldi	r20, 0xFA	; 250
    30e4:	54 e4       	ldi	r21, 0x44	; 68
    30e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ea:	dc 01       	movw	r26, r24
    30ec:	cb 01       	movw	r24, r22
    30ee:	8f 83       	std	Y+7, r24	; 0x07
    30f0:	98 87       	std	Y+8, r25	; 0x08
    30f2:	a9 87       	std	Y+9, r26	; 0x09
    30f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30f6:	6f 81       	ldd	r22, Y+7	; 0x07
    30f8:	78 85       	ldd	r23, Y+8	; 0x08
    30fa:	89 85       	ldd	r24, Y+9	; 0x09
    30fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    30fe:	20 e0       	ldi	r18, 0x00	; 0
    3100:	30 e0       	ldi	r19, 0x00	; 0
    3102:	40 e8       	ldi	r20, 0x80	; 128
    3104:	5f e3       	ldi	r21, 0x3F	; 63
    3106:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    310a:	88 23       	and	r24, r24
    310c:	2c f4       	brge	.+10     	; 0x3118 <LCD_sendCommand+0x33a>
		__ticks = 1;
    310e:	81 e0       	ldi	r24, 0x01	; 1
    3110:	90 e0       	ldi	r25, 0x00	; 0
    3112:	9e 83       	std	Y+6, r25	; 0x06
    3114:	8d 83       	std	Y+5, r24	; 0x05
    3116:	3f c0       	rjmp	.+126    	; 0x3196 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    3118:	6f 81       	ldd	r22, Y+7	; 0x07
    311a:	78 85       	ldd	r23, Y+8	; 0x08
    311c:	89 85       	ldd	r24, Y+9	; 0x09
    311e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3120:	20 e0       	ldi	r18, 0x00	; 0
    3122:	3f ef       	ldi	r19, 0xFF	; 255
    3124:	4f e7       	ldi	r20, 0x7F	; 127
    3126:	57 e4       	ldi	r21, 0x47	; 71
    3128:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    312c:	18 16       	cp	r1, r24
    312e:	4c f5       	brge	.+82     	; 0x3182 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3130:	6b 85       	ldd	r22, Y+11	; 0x0b
    3132:	7c 85       	ldd	r23, Y+12	; 0x0c
    3134:	8d 85       	ldd	r24, Y+13	; 0x0d
    3136:	9e 85       	ldd	r25, Y+14	; 0x0e
    3138:	20 e0       	ldi	r18, 0x00	; 0
    313a:	30 e0       	ldi	r19, 0x00	; 0
    313c:	40 e2       	ldi	r20, 0x20	; 32
    313e:	51 e4       	ldi	r21, 0x41	; 65
    3140:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3144:	dc 01       	movw	r26, r24
    3146:	cb 01       	movw	r24, r22
    3148:	bc 01       	movw	r22, r24
    314a:	cd 01       	movw	r24, r26
    314c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3150:	dc 01       	movw	r26, r24
    3152:	cb 01       	movw	r24, r22
    3154:	9e 83       	std	Y+6, r25	; 0x06
    3156:	8d 83       	std	Y+5, r24	; 0x05
    3158:	0f c0       	rjmp	.+30     	; 0x3178 <LCD_sendCommand+0x39a>
    315a:	88 ec       	ldi	r24, 0xC8	; 200
    315c:	90 e0       	ldi	r25, 0x00	; 0
    315e:	9c 83       	std	Y+4, r25	; 0x04
    3160:	8b 83       	std	Y+3, r24	; 0x03
    3162:	8b 81       	ldd	r24, Y+3	; 0x03
    3164:	9c 81       	ldd	r25, Y+4	; 0x04
    3166:	01 97       	sbiw	r24, 0x01	; 1
    3168:	f1 f7       	brne	.-4      	; 0x3166 <LCD_sendCommand+0x388>
    316a:	9c 83       	std	Y+4, r25	; 0x04
    316c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    316e:	8d 81       	ldd	r24, Y+5	; 0x05
    3170:	9e 81       	ldd	r25, Y+6	; 0x06
    3172:	01 97       	sbiw	r24, 0x01	; 1
    3174:	9e 83       	std	Y+6, r25	; 0x06
    3176:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3178:	8d 81       	ldd	r24, Y+5	; 0x05
    317a:	9e 81       	ldd	r25, Y+6	; 0x06
    317c:	00 97       	sbiw	r24, 0x00	; 0
    317e:	69 f7       	brne	.-38     	; 0x315a <LCD_sendCommand+0x37c>
    3180:	14 c0       	rjmp	.+40     	; 0x31aa <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3182:	6f 81       	ldd	r22, Y+7	; 0x07
    3184:	78 85       	ldd	r23, Y+8	; 0x08
    3186:	89 85       	ldd	r24, Y+9	; 0x09
    3188:	9a 85       	ldd	r25, Y+10	; 0x0a
    318a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    318e:	dc 01       	movw	r26, r24
    3190:	cb 01       	movw	r24, r22
    3192:	9e 83       	std	Y+6, r25	; 0x06
    3194:	8d 83       	std	Y+5, r24	; 0x05
    3196:	8d 81       	ldd	r24, Y+5	; 0x05
    3198:	9e 81       	ldd	r25, Y+6	; 0x06
    319a:	9a 83       	std	Y+2, r25	; 0x02
    319c:	89 83       	std	Y+1, r24	; 0x01
    319e:	89 81       	ldd	r24, Y+1	; 0x01
    31a0:	9a 81       	ldd	r25, Y+2	; 0x02
    31a2:	01 97       	sbiw	r24, 0x01	; 1
    31a4:	f1 f7       	brne	.-4      	; 0x31a2 <LCD_sendCommand+0x3c4>
    31a6:	9a 83       	std	Y+2, r25	; 0x02
    31a8:	89 83       	std	Y+1, r24	; 0x01

		// Clear Enable Pin to '0'
		GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
		_delay_ms(1); /* delay for processing Th = 13ns */
	}
}
    31aa:	e9 96       	adiw	r28, 0x39	; 57
    31ac:	0f b6       	in	r0, 0x3f	; 63
    31ae:	f8 94       	cli
    31b0:	de bf       	out	0x3e, r29	; 62
    31b2:	0f be       	out	0x3f, r0	; 63
    31b4:	cd bf       	out	0x3d, r28	; 61
    31b6:	cf 91       	pop	r28
    31b8:	df 91       	pop	r29
    31ba:	08 95       	ret

000031bc <LCD_displayCharacter>:


// Displays a character on the LCD
void LCD_displayCharacter(uint8 data) {
    31bc:	df 93       	push	r29
    31be:	cf 93       	push	r28
    31c0:	cd b7       	in	r28, 0x3d	; 61
    31c2:	de b7       	in	r29, 0x3e	; 62
    31c4:	e9 97       	sbiw	r28, 0x39	; 57
    31c6:	0f b6       	in	r0, 0x3f	; 63
    31c8:	f8 94       	cli
    31ca:	de bf       	out	0x3e, r29	; 62
    31cc:	0f be       	out	0x3f, r0	; 63
    31ce:	cd bf       	out	0x3d, r28	; 61
    31d0:	89 af       	std	Y+57, r24	; 0x39
	// Set RS Pin to '1'
	GPIO_writePin(LCD_INIT_PORT, LCD_RS, LOGIC_HIGH);
    31d2:	80 e0       	ldi	r24, 0x00	; 0
    31d4:	61 e0       	ldi	r22, 0x01	; 1
    31d6:	41 e0       	ldi	r20, 0x01	; 1
    31d8:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <GPIO_writePin>
    31dc:	80 e0       	ldi	r24, 0x00	; 0
    31de:	90 e0       	ldi	r25, 0x00	; 0
    31e0:	a0 e8       	ldi	r26, 0x80	; 128
    31e2:	bf e3       	ldi	r27, 0x3F	; 63
    31e4:	8d ab       	std	Y+53, r24	; 0x35
    31e6:	9e ab       	std	Y+54, r25	; 0x36
    31e8:	af ab       	std	Y+55, r26	; 0x37
    31ea:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31ec:	6d a9       	ldd	r22, Y+53	; 0x35
    31ee:	7e a9       	ldd	r23, Y+54	; 0x36
    31f0:	8f a9       	ldd	r24, Y+55	; 0x37
    31f2:	98 ad       	ldd	r25, Y+56	; 0x38
    31f4:	20 e0       	ldi	r18, 0x00	; 0
    31f6:	30 e0       	ldi	r19, 0x00	; 0
    31f8:	4a ef       	ldi	r20, 0xFA	; 250
    31fa:	54 e4       	ldi	r21, 0x44	; 68
    31fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3200:	dc 01       	movw	r26, r24
    3202:	cb 01       	movw	r24, r22
    3204:	89 ab       	std	Y+49, r24	; 0x31
    3206:	9a ab       	std	Y+50, r25	; 0x32
    3208:	ab ab       	std	Y+51, r26	; 0x33
    320a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    320c:	69 a9       	ldd	r22, Y+49	; 0x31
    320e:	7a a9       	ldd	r23, Y+50	; 0x32
    3210:	8b a9       	ldd	r24, Y+51	; 0x33
    3212:	9c a9       	ldd	r25, Y+52	; 0x34
    3214:	20 e0       	ldi	r18, 0x00	; 0
    3216:	30 e0       	ldi	r19, 0x00	; 0
    3218:	40 e8       	ldi	r20, 0x80	; 128
    321a:	5f e3       	ldi	r21, 0x3F	; 63
    321c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3220:	88 23       	and	r24, r24
    3222:	2c f4       	brge	.+10     	; 0x322e <LCD_displayCharacter+0x72>
		__ticks = 1;
    3224:	81 e0       	ldi	r24, 0x01	; 1
    3226:	90 e0       	ldi	r25, 0x00	; 0
    3228:	98 ab       	std	Y+48, r25	; 0x30
    322a:	8f a7       	std	Y+47, r24	; 0x2f
    322c:	3f c0       	rjmp	.+126    	; 0x32ac <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    322e:	69 a9       	ldd	r22, Y+49	; 0x31
    3230:	7a a9       	ldd	r23, Y+50	; 0x32
    3232:	8b a9       	ldd	r24, Y+51	; 0x33
    3234:	9c a9       	ldd	r25, Y+52	; 0x34
    3236:	20 e0       	ldi	r18, 0x00	; 0
    3238:	3f ef       	ldi	r19, 0xFF	; 255
    323a:	4f e7       	ldi	r20, 0x7F	; 127
    323c:	57 e4       	ldi	r21, 0x47	; 71
    323e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3242:	18 16       	cp	r1, r24
    3244:	4c f5       	brge	.+82     	; 0x3298 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3246:	6d a9       	ldd	r22, Y+53	; 0x35
    3248:	7e a9       	ldd	r23, Y+54	; 0x36
    324a:	8f a9       	ldd	r24, Y+55	; 0x37
    324c:	98 ad       	ldd	r25, Y+56	; 0x38
    324e:	20 e0       	ldi	r18, 0x00	; 0
    3250:	30 e0       	ldi	r19, 0x00	; 0
    3252:	40 e2       	ldi	r20, 0x20	; 32
    3254:	51 e4       	ldi	r21, 0x41	; 65
    3256:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    325a:	dc 01       	movw	r26, r24
    325c:	cb 01       	movw	r24, r22
    325e:	bc 01       	movw	r22, r24
    3260:	cd 01       	movw	r24, r26
    3262:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3266:	dc 01       	movw	r26, r24
    3268:	cb 01       	movw	r24, r22
    326a:	98 ab       	std	Y+48, r25	; 0x30
    326c:	8f a7       	std	Y+47, r24	; 0x2f
    326e:	0f c0       	rjmp	.+30     	; 0x328e <LCD_displayCharacter+0xd2>
    3270:	88 ec       	ldi	r24, 0xC8	; 200
    3272:	90 e0       	ldi	r25, 0x00	; 0
    3274:	9e a7       	std	Y+46, r25	; 0x2e
    3276:	8d a7       	std	Y+45, r24	; 0x2d
    3278:	8d a5       	ldd	r24, Y+45	; 0x2d
    327a:	9e a5       	ldd	r25, Y+46	; 0x2e
    327c:	01 97       	sbiw	r24, 0x01	; 1
    327e:	f1 f7       	brne	.-4      	; 0x327c <LCD_displayCharacter+0xc0>
    3280:	9e a7       	std	Y+46, r25	; 0x2e
    3282:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3284:	8f a5       	ldd	r24, Y+47	; 0x2f
    3286:	98 a9       	ldd	r25, Y+48	; 0x30
    3288:	01 97       	sbiw	r24, 0x01	; 1
    328a:	98 ab       	std	Y+48, r25	; 0x30
    328c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    328e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3290:	98 a9       	ldd	r25, Y+48	; 0x30
    3292:	00 97       	sbiw	r24, 0x00	; 0
    3294:	69 f7       	brne	.-38     	; 0x3270 <LCD_displayCharacter+0xb4>
    3296:	14 c0       	rjmp	.+40     	; 0x32c0 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3298:	69 a9       	ldd	r22, Y+49	; 0x31
    329a:	7a a9       	ldd	r23, Y+50	; 0x32
    329c:	8b a9       	ldd	r24, Y+51	; 0x33
    329e:	9c a9       	ldd	r25, Y+52	; 0x34
    32a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32a4:	dc 01       	movw	r26, r24
    32a6:	cb 01       	movw	r24, r22
    32a8:	98 ab       	std	Y+48, r25	; 0x30
    32aa:	8f a7       	std	Y+47, r24	; 0x2f
    32ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    32ae:	98 a9       	ldd	r25, Y+48	; 0x30
    32b0:	9c a7       	std	Y+44, r25	; 0x2c
    32b2:	8b a7       	std	Y+43, r24	; 0x2b
    32b4:	8b a5       	ldd	r24, Y+43	; 0x2b
    32b6:	9c a5       	ldd	r25, Y+44	; 0x2c
    32b8:	01 97       	sbiw	r24, 0x01	; 1
    32ba:	f1 f7       	brne	.-4      	; 0x32b8 <LCD_displayCharacter+0xfc>
    32bc:	9c a7       	std	Y+44, r25	; 0x2c
    32be:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	// Set Enable Pin to '1'
	GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
    32c0:	80 e0       	ldi	r24, 0x00	; 0
    32c2:	62 e0       	ldi	r22, 0x02	; 2
    32c4:	41 e0       	ldi	r20, 0x01	; 1
    32c6:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <GPIO_writePin>
    32ca:	80 e0       	ldi	r24, 0x00	; 0
    32cc:	90 e0       	ldi	r25, 0x00	; 0
    32ce:	a0 e8       	ldi	r26, 0x80	; 128
    32d0:	bf e3       	ldi	r27, 0x3F	; 63
    32d2:	8f a3       	std	Y+39, r24	; 0x27
    32d4:	98 a7       	std	Y+40, r25	; 0x28
    32d6:	a9 a7       	std	Y+41, r26	; 0x29
    32d8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32da:	6f a1       	ldd	r22, Y+39	; 0x27
    32dc:	78 a5       	ldd	r23, Y+40	; 0x28
    32de:	89 a5       	ldd	r24, Y+41	; 0x29
    32e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    32e2:	20 e0       	ldi	r18, 0x00	; 0
    32e4:	30 e0       	ldi	r19, 0x00	; 0
    32e6:	4a ef       	ldi	r20, 0xFA	; 250
    32e8:	54 e4       	ldi	r21, 0x44	; 68
    32ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32ee:	dc 01       	movw	r26, r24
    32f0:	cb 01       	movw	r24, r22
    32f2:	8b a3       	std	Y+35, r24	; 0x23
    32f4:	9c a3       	std	Y+36, r25	; 0x24
    32f6:	ad a3       	std	Y+37, r26	; 0x25
    32f8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    32fa:	6b a1       	ldd	r22, Y+35	; 0x23
    32fc:	7c a1       	ldd	r23, Y+36	; 0x24
    32fe:	8d a1       	ldd	r24, Y+37	; 0x25
    3300:	9e a1       	ldd	r25, Y+38	; 0x26
    3302:	20 e0       	ldi	r18, 0x00	; 0
    3304:	30 e0       	ldi	r19, 0x00	; 0
    3306:	40 e8       	ldi	r20, 0x80	; 128
    3308:	5f e3       	ldi	r21, 0x3F	; 63
    330a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    330e:	88 23       	and	r24, r24
    3310:	2c f4       	brge	.+10     	; 0x331c <LCD_displayCharacter+0x160>
		__ticks = 1;
    3312:	81 e0       	ldi	r24, 0x01	; 1
    3314:	90 e0       	ldi	r25, 0x00	; 0
    3316:	9a a3       	std	Y+34, r25	; 0x22
    3318:	89 a3       	std	Y+33, r24	; 0x21
    331a:	3f c0       	rjmp	.+126    	; 0x339a <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    331c:	6b a1       	ldd	r22, Y+35	; 0x23
    331e:	7c a1       	ldd	r23, Y+36	; 0x24
    3320:	8d a1       	ldd	r24, Y+37	; 0x25
    3322:	9e a1       	ldd	r25, Y+38	; 0x26
    3324:	20 e0       	ldi	r18, 0x00	; 0
    3326:	3f ef       	ldi	r19, 0xFF	; 255
    3328:	4f e7       	ldi	r20, 0x7F	; 127
    332a:	57 e4       	ldi	r21, 0x47	; 71
    332c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3330:	18 16       	cp	r1, r24
    3332:	4c f5       	brge	.+82     	; 0x3386 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3334:	6f a1       	ldd	r22, Y+39	; 0x27
    3336:	78 a5       	ldd	r23, Y+40	; 0x28
    3338:	89 a5       	ldd	r24, Y+41	; 0x29
    333a:	9a a5       	ldd	r25, Y+42	; 0x2a
    333c:	20 e0       	ldi	r18, 0x00	; 0
    333e:	30 e0       	ldi	r19, 0x00	; 0
    3340:	40 e2       	ldi	r20, 0x20	; 32
    3342:	51 e4       	ldi	r21, 0x41	; 65
    3344:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3348:	dc 01       	movw	r26, r24
    334a:	cb 01       	movw	r24, r22
    334c:	bc 01       	movw	r22, r24
    334e:	cd 01       	movw	r24, r26
    3350:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3354:	dc 01       	movw	r26, r24
    3356:	cb 01       	movw	r24, r22
    3358:	9a a3       	std	Y+34, r25	; 0x22
    335a:	89 a3       	std	Y+33, r24	; 0x21
    335c:	0f c0       	rjmp	.+30     	; 0x337c <LCD_displayCharacter+0x1c0>
    335e:	88 ec       	ldi	r24, 0xC8	; 200
    3360:	90 e0       	ldi	r25, 0x00	; 0
    3362:	98 a3       	std	Y+32, r25	; 0x20
    3364:	8f 8f       	std	Y+31, r24	; 0x1f
    3366:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3368:	98 a1       	ldd	r25, Y+32	; 0x20
    336a:	01 97       	sbiw	r24, 0x01	; 1
    336c:	f1 f7       	brne	.-4      	; 0x336a <LCD_displayCharacter+0x1ae>
    336e:	98 a3       	std	Y+32, r25	; 0x20
    3370:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3372:	89 a1       	ldd	r24, Y+33	; 0x21
    3374:	9a a1       	ldd	r25, Y+34	; 0x22
    3376:	01 97       	sbiw	r24, 0x01	; 1
    3378:	9a a3       	std	Y+34, r25	; 0x22
    337a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    337c:	89 a1       	ldd	r24, Y+33	; 0x21
    337e:	9a a1       	ldd	r25, Y+34	; 0x22
    3380:	00 97       	sbiw	r24, 0x00	; 0
    3382:	69 f7       	brne	.-38     	; 0x335e <LCD_displayCharacter+0x1a2>
    3384:	14 c0       	rjmp	.+40     	; 0x33ae <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3386:	6b a1       	ldd	r22, Y+35	; 0x23
    3388:	7c a1       	ldd	r23, Y+36	; 0x24
    338a:	8d a1       	ldd	r24, Y+37	; 0x25
    338c:	9e a1       	ldd	r25, Y+38	; 0x26
    338e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3392:	dc 01       	movw	r26, r24
    3394:	cb 01       	movw	r24, r22
    3396:	9a a3       	std	Y+34, r25	; 0x22
    3398:	89 a3       	std	Y+33, r24	; 0x21
    339a:	89 a1       	ldd	r24, Y+33	; 0x21
    339c:	9a a1       	ldd	r25, Y+34	; 0x22
    339e:	9e 8f       	std	Y+30, r25	; 0x1e
    33a0:	8d 8f       	std	Y+29, r24	; 0x1d
    33a2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33a4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    33a6:	01 97       	sbiw	r24, 0x01	; 1
    33a8:	f1 f7       	brne	.-4      	; 0x33a6 <LCD_displayCharacter+0x1ea>
    33aa:	9e 8f       	std	Y+30, r25	; 0x1e
    33ac:	8d 8f       	std	Y+29, r24	; 0x1d
		// Clear Enable Pin to '0'
		GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
		_delay_ms(1); /* delay for processing Th = 13ns */
	}
	else if (LCD_BIT_MODE == LCD_8_BIT) {
		GPIO_writePort(LCD_DATA_PORT, data);
    33ae:	80 e0       	ldi	r24, 0x00	; 0
    33b0:	69 ad       	ldd	r22, Y+57	; 0x39
    33b2:	0e 94 22 12 	call	0x2444	; 0x2444 <GPIO_writePort>
    33b6:	80 e0       	ldi	r24, 0x00	; 0
    33b8:	90 e0       	ldi	r25, 0x00	; 0
    33ba:	a0 e8       	ldi	r26, 0x80	; 128
    33bc:	bf e3       	ldi	r27, 0x3F	; 63
    33be:	89 8f       	std	Y+25, r24	; 0x19
    33c0:	9a 8f       	std	Y+26, r25	; 0x1a
    33c2:	ab 8f       	std	Y+27, r26	; 0x1b
    33c4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33c6:	69 8d       	ldd	r22, Y+25	; 0x19
    33c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33ce:	20 e0       	ldi	r18, 0x00	; 0
    33d0:	30 e0       	ldi	r19, 0x00	; 0
    33d2:	4a ef       	ldi	r20, 0xFA	; 250
    33d4:	54 e4       	ldi	r21, 0x44	; 68
    33d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33da:	dc 01       	movw	r26, r24
    33dc:	cb 01       	movw	r24, r22
    33de:	8d 8b       	std	Y+21, r24	; 0x15
    33e0:	9e 8b       	std	Y+22, r25	; 0x16
    33e2:	af 8b       	std	Y+23, r26	; 0x17
    33e4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    33e6:	6d 89       	ldd	r22, Y+21	; 0x15
    33e8:	7e 89       	ldd	r23, Y+22	; 0x16
    33ea:	8f 89       	ldd	r24, Y+23	; 0x17
    33ec:	98 8d       	ldd	r25, Y+24	; 0x18
    33ee:	20 e0       	ldi	r18, 0x00	; 0
    33f0:	30 e0       	ldi	r19, 0x00	; 0
    33f2:	40 e8       	ldi	r20, 0x80	; 128
    33f4:	5f e3       	ldi	r21, 0x3F	; 63
    33f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33fa:	88 23       	and	r24, r24
    33fc:	2c f4       	brge	.+10     	; 0x3408 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    33fe:	81 e0       	ldi	r24, 0x01	; 1
    3400:	90 e0       	ldi	r25, 0x00	; 0
    3402:	9c 8b       	std	Y+20, r25	; 0x14
    3404:	8b 8b       	std	Y+19, r24	; 0x13
    3406:	3f c0       	rjmp	.+126    	; 0x3486 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    3408:	6d 89       	ldd	r22, Y+21	; 0x15
    340a:	7e 89       	ldd	r23, Y+22	; 0x16
    340c:	8f 89       	ldd	r24, Y+23	; 0x17
    340e:	98 8d       	ldd	r25, Y+24	; 0x18
    3410:	20 e0       	ldi	r18, 0x00	; 0
    3412:	3f ef       	ldi	r19, 0xFF	; 255
    3414:	4f e7       	ldi	r20, 0x7F	; 127
    3416:	57 e4       	ldi	r21, 0x47	; 71
    3418:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    341c:	18 16       	cp	r1, r24
    341e:	4c f5       	brge	.+82     	; 0x3472 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3420:	69 8d       	ldd	r22, Y+25	; 0x19
    3422:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3424:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3426:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3428:	20 e0       	ldi	r18, 0x00	; 0
    342a:	30 e0       	ldi	r19, 0x00	; 0
    342c:	40 e2       	ldi	r20, 0x20	; 32
    342e:	51 e4       	ldi	r21, 0x41	; 65
    3430:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3434:	dc 01       	movw	r26, r24
    3436:	cb 01       	movw	r24, r22
    3438:	bc 01       	movw	r22, r24
    343a:	cd 01       	movw	r24, r26
    343c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3440:	dc 01       	movw	r26, r24
    3442:	cb 01       	movw	r24, r22
    3444:	9c 8b       	std	Y+20, r25	; 0x14
    3446:	8b 8b       	std	Y+19, r24	; 0x13
    3448:	0f c0       	rjmp	.+30     	; 0x3468 <LCD_displayCharacter+0x2ac>
    344a:	88 ec       	ldi	r24, 0xC8	; 200
    344c:	90 e0       	ldi	r25, 0x00	; 0
    344e:	9a 8b       	std	Y+18, r25	; 0x12
    3450:	89 8b       	std	Y+17, r24	; 0x11
    3452:	89 89       	ldd	r24, Y+17	; 0x11
    3454:	9a 89       	ldd	r25, Y+18	; 0x12
    3456:	01 97       	sbiw	r24, 0x01	; 1
    3458:	f1 f7       	brne	.-4      	; 0x3456 <LCD_displayCharacter+0x29a>
    345a:	9a 8b       	std	Y+18, r25	; 0x12
    345c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    345e:	8b 89       	ldd	r24, Y+19	; 0x13
    3460:	9c 89       	ldd	r25, Y+20	; 0x14
    3462:	01 97       	sbiw	r24, 0x01	; 1
    3464:	9c 8b       	std	Y+20, r25	; 0x14
    3466:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3468:	8b 89       	ldd	r24, Y+19	; 0x13
    346a:	9c 89       	ldd	r25, Y+20	; 0x14
    346c:	00 97       	sbiw	r24, 0x00	; 0
    346e:	69 f7       	brne	.-38     	; 0x344a <LCD_displayCharacter+0x28e>
    3470:	14 c0       	rjmp	.+40     	; 0x349a <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3472:	6d 89       	ldd	r22, Y+21	; 0x15
    3474:	7e 89       	ldd	r23, Y+22	; 0x16
    3476:	8f 89       	ldd	r24, Y+23	; 0x17
    3478:	98 8d       	ldd	r25, Y+24	; 0x18
    347a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    347e:	dc 01       	movw	r26, r24
    3480:	cb 01       	movw	r24, r22
    3482:	9c 8b       	std	Y+20, r25	; 0x14
    3484:	8b 8b       	std	Y+19, r24	; 0x13
    3486:	8b 89       	ldd	r24, Y+19	; 0x13
    3488:	9c 89       	ldd	r25, Y+20	; 0x14
    348a:	98 8b       	std	Y+16, r25	; 0x10
    348c:	8f 87       	std	Y+15, r24	; 0x0f
    348e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3490:	98 89       	ldd	r25, Y+16	; 0x10
    3492:	01 97       	sbiw	r24, 0x01	; 1
    3494:	f1 f7       	brne	.-4      	; 0x3492 <LCD_displayCharacter+0x2d6>
    3496:	98 8b       	std	Y+16, r25	; 0x10
    3498:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);

		// Clear Enable Pin to '0'
		GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
    349a:	80 e0       	ldi	r24, 0x00	; 0
    349c:	62 e0       	ldi	r22, 0x02	; 2
    349e:	40 e0       	ldi	r20, 0x00	; 0
    34a0:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <GPIO_writePin>
    34a4:	80 e0       	ldi	r24, 0x00	; 0
    34a6:	90 e0       	ldi	r25, 0x00	; 0
    34a8:	a0 e8       	ldi	r26, 0x80	; 128
    34aa:	bf e3       	ldi	r27, 0x3F	; 63
    34ac:	8b 87       	std	Y+11, r24	; 0x0b
    34ae:	9c 87       	std	Y+12, r25	; 0x0c
    34b0:	ad 87       	std	Y+13, r26	; 0x0d
    34b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    34b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    34b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    34ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    34bc:	20 e0       	ldi	r18, 0x00	; 0
    34be:	30 e0       	ldi	r19, 0x00	; 0
    34c0:	4a ef       	ldi	r20, 0xFA	; 250
    34c2:	54 e4       	ldi	r21, 0x44	; 68
    34c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34c8:	dc 01       	movw	r26, r24
    34ca:	cb 01       	movw	r24, r22
    34cc:	8f 83       	std	Y+7, r24	; 0x07
    34ce:	98 87       	std	Y+8, r25	; 0x08
    34d0:	a9 87       	std	Y+9, r26	; 0x09
    34d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34d4:	6f 81       	ldd	r22, Y+7	; 0x07
    34d6:	78 85       	ldd	r23, Y+8	; 0x08
    34d8:	89 85       	ldd	r24, Y+9	; 0x09
    34da:	9a 85       	ldd	r25, Y+10	; 0x0a
    34dc:	20 e0       	ldi	r18, 0x00	; 0
    34de:	30 e0       	ldi	r19, 0x00	; 0
    34e0:	40 e8       	ldi	r20, 0x80	; 128
    34e2:	5f e3       	ldi	r21, 0x3F	; 63
    34e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34e8:	88 23       	and	r24, r24
    34ea:	2c f4       	brge	.+10     	; 0x34f6 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    34ec:	81 e0       	ldi	r24, 0x01	; 1
    34ee:	90 e0       	ldi	r25, 0x00	; 0
    34f0:	9e 83       	std	Y+6, r25	; 0x06
    34f2:	8d 83       	std	Y+5, r24	; 0x05
    34f4:	3f c0       	rjmp	.+126    	; 0x3574 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    34f6:	6f 81       	ldd	r22, Y+7	; 0x07
    34f8:	78 85       	ldd	r23, Y+8	; 0x08
    34fa:	89 85       	ldd	r24, Y+9	; 0x09
    34fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    34fe:	20 e0       	ldi	r18, 0x00	; 0
    3500:	3f ef       	ldi	r19, 0xFF	; 255
    3502:	4f e7       	ldi	r20, 0x7F	; 127
    3504:	57 e4       	ldi	r21, 0x47	; 71
    3506:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    350a:	18 16       	cp	r1, r24
    350c:	4c f5       	brge	.+82     	; 0x3560 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    350e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3510:	7c 85       	ldd	r23, Y+12	; 0x0c
    3512:	8d 85       	ldd	r24, Y+13	; 0x0d
    3514:	9e 85       	ldd	r25, Y+14	; 0x0e
    3516:	20 e0       	ldi	r18, 0x00	; 0
    3518:	30 e0       	ldi	r19, 0x00	; 0
    351a:	40 e2       	ldi	r20, 0x20	; 32
    351c:	51 e4       	ldi	r21, 0x41	; 65
    351e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3522:	dc 01       	movw	r26, r24
    3524:	cb 01       	movw	r24, r22
    3526:	bc 01       	movw	r22, r24
    3528:	cd 01       	movw	r24, r26
    352a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    352e:	dc 01       	movw	r26, r24
    3530:	cb 01       	movw	r24, r22
    3532:	9e 83       	std	Y+6, r25	; 0x06
    3534:	8d 83       	std	Y+5, r24	; 0x05
    3536:	0f c0       	rjmp	.+30     	; 0x3556 <LCD_displayCharacter+0x39a>
    3538:	88 ec       	ldi	r24, 0xC8	; 200
    353a:	90 e0       	ldi	r25, 0x00	; 0
    353c:	9c 83       	std	Y+4, r25	; 0x04
    353e:	8b 83       	std	Y+3, r24	; 0x03
    3540:	8b 81       	ldd	r24, Y+3	; 0x03
    3542:	9c 81       	ldd	r25, Y+4	; 0x04
    3544:	01 97       	sbiw	r24, 0x01	; 1
    3546:	f1 f7       	brne	.-4      	; 0x3544 <LCD_displayCharacter+0x388>
    3548:	9c 83       	std	Y+4, r25	; 0x04
    354a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    354c:	8d 81       	ldd	r24, Y+5	; 0x05
    354e:	9e 81       	ldd	r25, Y+6	; 0x06
    3550:	01 97       	sbiw	r24, 0x01	; 1
    3552:	9e 83       	std	Y+6, r25	; 0x06
    3554:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3556:	8d 81       	ldd	r24, Y+5	; 0x05
    3558:	9e 81       	ldd	r25, Y+6	; 0x06
    355a:	00 97       	sbiw	r24, 0x00	; 0
    355c:	69 f7       	brne	.-38     	; 0x3538 <LCD_displayCharacter+0x37c>
    355e:	14 c0       	rjmp	.+40     	; 0x3588 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3560:	6f 81       	ldd	r22, Y+7	; 0x07
    3562:	78 85       	ldd	r23, Y+8	; 0x08
    3564:	89 85       	ldd	r24, Y+9	; 0x09
    3566:	9a 85       	ldd	r25, Y+10	; 0x0a
    3568:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    356c:	dc 01       	movw	r26, r24
    356e:	cb 01       	movw	r24, r22
    3570:	9e 83       	std	Y+6, r25	; 0x06
    3572:	8d 83       	std	Y+5, r24	; 0x05
    3574:	8d 81       	ldd	r24, Y+5	; 0x05
    3576:	9e 81       	ldd	r25, Y+6	; 0x06
    3578:	9a 83       	std	Y+2, r25	; 0x02
    357a:	89 83       	std	Y+1, r24	; 0x01
    357c:	89 81       	ldd	r24, Y+1	; 0x01
    357e:	9a 81       	ldd	r25, Y+2	; 0x02
    3580:	01 97       	sbiw	r24, 0x01	; 1
    3582:	f1 f7       	brne	.-4      	; 0x3580 <LCD_displayCharacter+0x3c4>
    3584:	9a 83       	std	Y+2, r25	; 0x02
    3586:	89 83       	std	Y+1, r24	; 0x01

		// Clear Enable Pin to '0'
		GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
		_delay_ms(1); /* delay for processing Th = 13ns */
	}
}
    3588:	e9 96       	adiw	r28, 0x39	; 57
    358a:	0f b6       	in	r0, 0x3f	; 63
    358c:	f8 94       	cli
    358e:	de bf       	out	0x3e, r29	; 62
    3590:	0f be       	out	0x3f, r0	; 63
    3592:	cd bf       	out	0x3d, r28	; 61
    3594:	cf 91       	pop	r28
    3596:	df 91       	pop	r29
    3598:	08 95       	ret

0000359a <LCD_displayString>:


// Displays a string on the LCD
void LCD_displayString(const char *str) {
    359a:	df 93       	push	r29
    359c:	cf 93       	push	r28
    359e:	00 d0       	rcall	.+0      	; 0x35a0 <LCD_displayString+0x6>
    35a0:	0f 92       	push	r0
    35a2:	cd b7       	in	r28, 0x3d	; 61
    35a4:	de b7       	in	r29, 0x3e	; 62
    35a6:	9b 83       	std	Y+3, r25	; 0x03
    35a8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    35aa:	19 82       	std	Y+1, r1	; 0x01
    35ac:	0e c0       	rjmp	.+28     	; 0x35ca <LCD_displayString+0x30>
	while(str[i] != '\0') {
		LCD_displayCharacter(str[i]);
    35ae:	89 81       	ldd	r24, Y+1	; 0x01
    35b0:	28 2f       	mov	r18, r24
    35b2:	30 e0       	ldi	r19, 0x00	; 0
    35b4:	8a 81       	ldd	r24, Y+2	; 0x02
    35b6:	9b 81       	ldd	r25, Y+3	; 0x03
    35b8:	fc 01       	movw	r30, r24
    35ba:	e2 0f       	add	r30, r18
    35bc:	f3 1f       	adc	r31, r19
    35be:	80 81       	ld	r24, Z
    35c0:	0e 94 de 18 	call	0x31bc	; 0x31bc <LCD_displayCharacter>
		i++;
    35c4:	89 81       	ldd	r24, Y+1	; 0x01
    35c6:	8f 5f       	subi	r24, 0xFF	; 255
    35c8:	89 83       	std	Y+1, r24	; 0x01


// Displays a string on the LCD
void LCD_displayString(const char *str) {
	uint8 i = 0;
	while(str[i] != '\0') {
    35ca:	89 81       	ldd	r24, Y+1	; 0x01
    35cc:	28 2f       	mov	r18, r24
    35ce:	30 e0       	ldi	r19, 0x00	; 0
    35d0:	8a 81       	ldd	r24, Y+2	; 0x02
    35d2:	9b 81       	ldd	r25, Y+3	; 0x03
    35d4:	fc 01       	movw	r30, r24
    35d6:	e2 0f       	add	r30, r18
    35d8:	f3 1f       	adc	r31, r19
    35da:	80 81       	ld	r24, Z
    35dc:	88 23       	and	r24, r24
    35de:	39 f7       	brne	.-50     	; 0x35ae <LCD_displayString+0x14>
	}
	/*
	for (int i = 0 ; i < strlen(str) ; i++) {
		LCD_displayCharacters(str[i]);
	}*/
}
    35e0:	0f 90       	pop	r0
    35e2:	0f 90       	pop	r0
    35e4:	0f 90       	pop	r0
    35e6:	cf 91       	pop	r28
    35e8:	df 91       	pop	r29
    35ea:	08 95       	ret

000035ec <LCD_moveCursor>:


// Chooses where the cursor would stand on the LCD to type from it
void LCD_moveCursor(uint8 row, uint8 col) {
    35ec:	df 93       	push	r29
    35ee:	cf 93       	push	r28
    35f0:	00 d0       	rcall	.+0      	; 0x35f2 <LCD_moveCursor+0x6>
    35f2:	00 d0       	rcall	.+0      	; 0x35f4 <LCD_moveCursor+0x8>
    35f4:	0f 92       	push	r0
    35f6:	cd b7       	in	r28, 0x3d	; 61
    35f8:	de b7       	in	r29, 0x3e	; 62
    35fa:	8a 83       	std	Y+2, r24	; 0x02
    35fc:	6b 83       	std	Y+3, r22	; 0x03
	uint8 LCD_MEMORY_ADDRESS;

	// Calculate the required address in the LCD DDRAM checking
	// The location of the cursor originally on which line
	switch(row) {
    35fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3600:	28 2f       	mov	r18, r24
    3602:	30 e0       	ldi	r19, 0x00	; 0
    3604:	3d 83       	std	Y+5, r19	; 0x05
    3606:	2c 83       	std	Y+4, r18	; 0x04
    3608:	8c 81       	ldd	r24, Y+4	; 0x04
    360a:	9d 81       	ldd	r25, Y+5	; 0x05
    360c:	81 30       	cpi	r24, 0x01	; 1
    360e:	91 05       	cpc	r25, r1
    3610:	c1 f0       	breq	.+48     	; 0x3642 <LCD_moveCursor+0x56>
    3612:	2c 81       	ldd	r18, Y+4	; 0x04
    3614:	3d 81       	ldd	r19, Y+5	; 0x05
    3616:	22 30       	cpi	r18, 0x02	; 2
    3618:	31 05       	cpc	r19, r1
    361a:	2c f4       	brge	.+10     	; 0x3626 <LCD_moveCursor+0x3a>
    361c:	8c 81       	ldd	r24, Y+4	; 0x04
    361e:	9d 81       	ldd	r25, Y+5	; 0x05
    3620:	00 97       	sbiw	r24, 0x00	; 0
    3622:	61 f0       	breq	.+24     	; 0x363c <LCD_moveCursor+0x50>
    3624:	19 c0       	rjmp	.+50     	; 0x3658 <LCD_moveCursor+0x6c>
    3626:	2c 81       	ldd	r18, Y+4	; 0x04
    3628:	3d 81       	ldd	r19, Y+5	; 0x05
    362a:	22 30       	cpi	r18, 0x02	; 2
    362c:	31 05       	cpc	r19, r1
    362e:	69 f0       	breq	.+26     	; 0x364a <LCD_moveCursor+0x5e>
    3630:	8c 81       	ldd	r24, Y+4	; 0x04
    3632:	9d 81       	ldd	r25, Y+5	; 0x05
    3634:	83 30       	cpi	r24, 0x03	; 3
    3636:	91 05       	cpc	r25, r1
    3638:	61 f0       	breq	.+24     	; 0x3652 <LCD_moveCursor+0x66>
    363a:	0e c0       	rjmp	.+28     	; 0x3658 <LCD_moveCursor+0x6c>
		case 0:
			LCD_MEMORY_ADDRESS = col;
    363c:	8b 81       	ldd	r24, Y+3	; 0x03
    363e:	89 83       	std	Y+1, r24	; 0x01
    3640:	0b c0       	rjmp	.+22     	; 0x3658 <LCD_moveCursor+0x6c>
				break;
		case 1:
			LCD_MEMORY_ADDRESS = col + 0x40;
    3642:	8b 81       	ldd	r24, Y+3	; 0x03
    3644:	80 5c       	subi	r24, 0xC0	; 192
    3646:	89 83       	std	Y+1, r24	; 0x01
    3648:	07 c0       	rjmp	.+14     	; 0x3658 <LCD_moveCursor+0x6c>
				break;
		case 2:
			LCD_MEMORY_ADDRESS = col + 0x10;
    364a:	8b 81       	ldd	r24, Y+3	; 0x03
    364c:	80 5f       	subi	r24, 0xF0	; 240
    364e:	89 83       	std	Y+1, r24	; 0x01
    3650:	03 c0       	rjmp	.+6      	; 0x3658 <LCD_moveCursor+0x6c>
				break;
		case 3:
			LCD_MEMORY_ADDRESS = col + 0x50;
    3652:	8b 81       	ldd	r24, Y+3	; 0x03
    3654:	80 5b       	subi	r24, 0xB0	; 176
    3656:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(LCD_MEMORY_ADDRESS | LCD_CURSOR_LOCATION);
    3658:	89 81       	ldd	r24, Y+1	; 0x01
    365a:	80 68       	ori	r24, 0x80	; 128
    365c:	0e 94 ef 16 	call	0x2dde	; 0x2dde <LCD_sendCommand>
}
    3660:	0f 90       	pop	r0
    3662:	0f 90       	pop	r0
    3664:	0f 90       	pop	r0
    3666:	0f 90       	pop	r0
    3668:	0f 90       	pop	r0
    366a:	cf 91       	pop	r28
    366c:	df 91       	pop	r29
    366e:	08 95       	ret

00003670 <LCD_displayStringRowColumn>:


// Displays a string on the LCD at a chosen cursor and row
void LCD_displayStringRowColumn(uint8 row, uint8 col, const char *Str) {
    3670:	df 93       	push	r29
    3672:	cf 93       	push	r28
    3674:	00 d0       	rcall	.+0      	; 0x3676 <LCD_displayStringRowColumn+0x6>
    3676:	00 d0       	rcall	.+0      	; 0x3678 <LCD_displayStringRowColumn+0x8>
    3678:	cd b7       	in	r28, 0x3d	; 61
    367a:	de b7       	in	r29, 0x3e	; 62
    367c:	89 83       	std	Y+1, r24	; 0x01
    367e:	6a 83       	std	Y+2, r22	; 0x02
    3680:	5c 83       	std	Y+4, r21	; 0x04
    3682:	4b 83       	std	Y+3, r20	; 0x03
	// Go to to the required LCD position
	LCD_moveCursor(row, col);
    3684:	89 81       	ldd	r24, Y+1	; 0x01
    3686:	6a 81       	ldd	r22, Y+2	; 0x02
    3688:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <LCD_moveCursor>

	// Display the string from the cursor
	LCD_displayString(Str);
    368c:	8b 81       	ldd	r24, Y+3	; 0x03
    368e:	9c 81       	ldd	r25, Y+4	; 0x04
    3690:	0e 94 cd 1a 	call	0x359a	; 0x359a <LCD_displayString>
}
    3694:	0f 90       	pop	r0
    3696:	0f 90       	pop	r0
    3698:	0f 90       	pop	r0
    369a:	0f 90       	pop	r0
    369c:	cf 91       	pop	r28
    369e:	df 91       	pop	r29
    36a0:	08 95       	ret

000036a2 <LCD_intgerToString>:

// LCD only understands ASCII, so this converts Int to a string
void LCD_intgerToString(int data) {
    36a2:	df 93       	push	r29
    36a4:	cf 93       	push	r28
    36a6:	cd b7       	in	r28, 0x3d	; 61
    36a8:	de b7       	in	r29, 0x3e	; 62
    36aa:	62 97       	sbiw	r28, 0x12	; 18
    36ac:	0f b6       	in	r0, 0x3f	; 63
    36ae:	f8 94       	cli
    36b0:	de bf       	out	0x3e, r29	; 62
    36b2:	0f be       	out	0x3f, r0	; 63
    36b4:	cd bf       	out	0x3d, r28	; 61
    36b6:	9a 8b       	std	Y+18, r25	; 0x12
    36b8:	89 8b       	std	Y+17, r24	; 0x11
	// A string to hold the ASCII values
	char buffer[16];

	// Converts data to its ASCII
	itoa(data, buffer, 10);
    36ba:	89 89       	ldd	r24, Y+17	; 0x11
    36bc:	9a 89       	ldd	r25, Y+18	; 0x12
    36be:	9e 01       	movw	r18, r28
    36c0:	2f 5f       	subi	r18, 0xFF	; 255
    36c2:	3f 4f       	sbci	r19, 0xFF	; 255
    36c4:	b9 01       	movw	r22, r18
    36c6:	4a e0       	ldi	r20, 0x0A	; 10
    36c8:	50 e0       	ldi	r21, 0x00	; 0
    36ca:	0e 94 9c 1d 	call	0x3b38	; 0x3b38 <itoa>

	// Display string with the results in the buffer
	LCD_displayString(buffer);
    36ce:	ce 01       	movw	r24, r28
    36d0:	01 96       	adiw	r24, 0x01	; 1
    36d2:	0e 94 cd 1a 	call	0x359a	; 0x359a <LCD_displayString>
}
    36d6:	62 96       	adiw	r28, 0x12	; 18
    36d8:	0f b6       	in	r0, 0x3f	; 63
    36da:	f8 94       	cli
    36dc:	de bf       	out	0x3e, r29	; 62
    36de:	0f be       	out	0x3f, r0	; 63
    36e0:	cd bf       	out	0x3d, r28	; 61
    36e2:	cf 91       	pop	r28
    36e4:	df 91       	pop	r29
    36e6:	08 95       	ret

000036e8 <LCD_clearScreen>:

// Clears the LCD from any garbage
void LCD_clearScreen(void) {
    36e8:	df 93       	push	r29
    36ea:	cf 93       	push	r28
    36ec:	cd b7       	in	r28, 0x3d	; 61
    36ee:	de b7       	in	r29, 0x3e	; 62
	// Clears the LCD Display
	LCD_sendCommand(LCD_CLEAR_DISPLAY);
    36f0:	81 e0       	ldi	r24, 0x01	; 1
    36f2:	0e 94 ef 16 	call	0x2dde	; 0x2dde <LCD_sendCommand>
}
    36f6:	cf 91       	pop	r28
    36f8:	df 91       	pop	r29
    36fa:	08 95       	ret

000036fc <KEYPAD_Init>:
	#endif

#endif /* STD_KEYPAD */


void KEYPAD_Init(void) {
    36fc:	df 93       	push	r29
    36fe:	cf 93       	push	r28
    3700:	cd b7       	in	r28, 0x3d	; 61
    3702:	de b7       	in	r29, 0x3e	; 62
		/* Setup PORT and PINS for for KEYPAD Rows*/
		GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN, PIN_INPUT);
    3704:	81 e0       	ldi	r24, 0x01	; 1
    3706:	64 e0       	ldi	r22, 0x04	; 4
    3708:	40 e0       	ldi	r20, 0x00	; 0
    370a:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN+1, PIN_INPUT);
    370e:	81 e0       	ldi	r24, 0x01	; 1
    3710:	65 e0       	ldi	r22, 0x05	; 5
    3712:	40 e0       	ldi	r20, 0x00	; 0
    3714:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN+2, PIN_INPUT);
    3718:	81 e0       	ldi	r24, 0x01	; 1
    371a:	66 e0       	ldi	r22, 0x06	; 6
    371c:	40 e0       	ldi	r20, 0x00	; 0
    371e:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN+3, PIN_INPUT);
    3722:	81 e0       	ldi	r24, 0x01	; 1
    3724:	67 e0       	ldi	r22, 0x07	; 7
    3726:	40 e0       	ldi	r20, 0x00	; 0
    3728:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <GPIO_setupPinDirection>

		/* Setup PORT and PINS for for KEYPAD Columns*/
		GPIO_setupPinDirection(KEYPAD_COL_PORT, KEYPAD_FIRSTCOL_PIN, PIN_INPUT);
    372c:	81 e0       	ldi	r24, 0x01	; 1
    372e:	60 e0       	ldi	r22, 0x00	; 0
    3730:	40 e0       	ldi	r20, 0x00	; 0
    3732:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(KEYPAD_COL_PORT, KEYPAD_FIRSTCOL_PIN+1, PIN_INPUT);
    3736:	81 e0       	ldi	r24, 0x01	; 1
    3738:	61 e0       	ldi	r22, 0x01	; 1
    373a:	40 e0       	ldi	r20, 0x00	; 0
    373c:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(KEYPAD_COL_PORT, KEYPAD_FIRSTCOL_PIN+2, PIN_INPUT);
    3740:	81 e0       	ldi	r24, 0x01	; 1
    3742:	62 e0       	ldi	r22, 0x02	; 2
    3744:	40 e0       	ldi	r20, 0x00	; 0
    3746:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <GPIO_setupPinDirection>

		#if(KEYPAD_COL_NUM == 4)
			GPIO_setupPinDirection(KEYPAD_COL_PORT, KEYPAD_FIRSTCOL_PIN+3, PIN_INPUT);
    374a:	81 e0       	ldi	r24, 0x01	; 1
    374c:	63 e0       	ldi	r22, 0x03	; 3
    374e:	40 e0       	ldi	r20, 0x00	; 0
    3750:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <GPIO_setupPinDirection>
		#endif
}
    3754:	cf 91       	pop	r28
    3756:	df 91       	pop	r29
    3758:	08 95       	ret

0000375a <KEYPAD_getPressedKey>:


uint8 KEYPAD_getPressedKey(void) {
    375a:	df 93       	push	r29
    375c:	cf 93       	push	r28
    375e:	00 d0       	rcall	.+0      	; 0x3760 <KEYPAD_getPressedKey+0x6>
    3760:	cd b7       	in	r28, 0x3d	; 61
    3762:	de b7       	in	r29, 0x3e	; 62
	uint8 row, col;
	while(1) {
			for (row = 0 ; row < KEYPAD_ROW_NUM ; row++) {
    3764:	1a 82       	std	Y+2, r1	; 0x02
    3766:	39 c0       	rjmp	.+114    	; 0x37da <KEYPAD_getPressedKey+0x80>
				// I set the pin by '1' for the row, and will iterate
				GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, PIN_OUTPUT);
    3768:	8a 81       	ldd	r24, Y+2	; 0x02
    376a:	98 2f       	mov	r25, r24
    376c:	9c 5f       	subi	r25, 0xFC	; 252
    376e:	81 e0       	ldi	r24, 0x01	; 1
    3770:	69 2f       	mov	r22, r25
    3772:	41 e0       	ldi	r20, 0x01	; 1
    3774:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <GPIO_setupPinDirection>

				/* Set/Clear the row output pin */
				GPIO_writePin(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, KEYPAD_BUTTON_PRESSED);
    3778:	8a 81       	ldd	r24, Y+2	; 0x02
    377a:	98 2f       	mov	r25, r24
    377c:	9c 5f       	subi	r25, 0xFC	; 252
    377e:	81 e0       	ldi	r24, 0x01	; 1
    3780:	69 2f       	mov	r22, r25
    3782:	40 e0       	ldi	r20, 0x00	; 0
    3784:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <GPIO_writePin>

				for (col = 0 ; col < KEYPAD_COL_NUM ; col++) {
    3788:	19 82       	std	Y+1, r1	; 0x01
    378a:	19 c0       	rjmp	.+50     	; 0x37be <KEYPAD_getPressedKey+0x64>
					/* Check if the switch is pressed in this column */
					if(GPIO_readPin(KEYPAD_COL_PORT,KEYPAD_FIRSTCOL_PIN + col) == KEYPAD_BUTTON_PRESSED) {
    378c:	81 e0       	ldi	r24, 0x01	; 1
    378e:	69 81       	ldd	r22, Y+1	; 0x01
    3790:	0e 94 22 11 	call	0x2244	; 0x2244 <GPIO_readPin>
    3794:	88 23       	and	r24, r24
    3796:	81 f4       	brne	.+32     	; 0x37b8 <KEYPAD_getPressedKey+0x5e>
							#else
								return KEYPAD_4x3_adjustKeyNumber( (row * KEYPAD_COL_NUM) + col + 1);
							#endif
						#elif (KEYPAD_COL_NUM == 4)
							#ifdef STD_KEYPAD
								return ( (row * KEYPAD_COL_NUM) + col + 1);
    3798:	8a 81       	ldd	r24, Y+2	; 0x02
    379a:	88 2f       	mov	r24, r24
    379c:	90 e0       	ldi	r25, 0x00	; 0
    379e:	88 0f       	add	r24, r24
    37a0:	99 1f       	adc	r25, r25
    37a2:	88 0f       	add	r24, r24
    37a4:	99 1f       	adc	r25, r25
    37a6:	98 2f       	mov	r25, r24
    37a8:	89 81       	ldd	r24, Y+1	; 0x01
    37aa:	89 0f       	add	r24, r25
    37ac:	8f 5f       	subi	r24, 0xFF	; 255
					}
				}
				GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, PIN_INPUT);
			}
		}
}
    37ae:	0f 90       	pop	r0
    37b0:	0f 90       	pop	r0
    37b2:	cf 91       	pop	r28
    37b4:	df 91       	pop	r29
    37b6:	08 95       	ret
				GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, PIN_OUTPUT);

				/* Set/Clear the row output pin */
				GPIO_writePin(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, KEYPAD_BUTTON_PRESSED);

				for (col = 0 ; col < KEYPAD_COL_NUM ; col++) {
    37b8:	89 81       	ldd	r24, Y+1	; 0x01
    37ba:	8f 5f       	subi	r24, 0xFF	; 255
    37bc:	89 83       	std	Y+1, r24	; 0x01
    37be:	89 81       	ldd	r24, Y+1	; 0x01
    37c0:	84 30       	cpi	r24, 0x04	; 4
    37c2:	20 f3       	brcs	.-56     	; 0x378c <KEYPAD_getPressedKey+0x32>
								return KEYPAD_4x4_adjustKeyNumber( (row * KEYPAD_COL_NUM) + col + 1);
							#endif
						#endif
					}
				}
				GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, PIN_INPUT);
    37c4:	8a 81       	ldd	r24, Y+2	; 0x02
    37c6:	98 2f       	mov	r25, r24
    37c8:	9c 5f       	subi	r25, 0xFC	; 252
    37ca:	81 e0       	ldi	r24, 0x01	; 1
    37cc:	69 2f       	mov	r22, r25
    37ce:	40 e0       	ldi	r20, 0x00	; 0
    37d0:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <GPIO_setupPinDirection>


uint8 KEYPAD_getPressedKey(void) {
	uint8 row, col;
	while(1) {
			for (row = 0 ; row < KEYPAD_ROW_NUM ; row++) {
    37d4:	8a 81       	ldd	r24, Y+2	; 0x02
    37d6:	8f 5f       	subi	r24, 0xFF	; 255
    37d8:	8a 83       	std	Y+2, r24	; 0x02
    37da:	8a 81       	ldd	r24, Y+2	; 0x02
    37dc:	84 30       	cpi	r24, 0x04	; 4
    37de:	20 f2       	brcs	.-120    	; 0x3768 <KEYPAD_getPressedKey+0xe>
    37e0:	c1 cf       	rjmp	.-126    	; 0x3764 <KEYPAD_getPressedKey+0xa>

000037e2 <EEPROM_writeByte>:
#include "avr/io.h" /* To use the IO Ports Registers */
#include <util/delay.h>



uint8 EEPROM_writeByte(uint16 u16Address, uint8 u8Data) {
    37e2:	df 93       	push	r29
    37e4:	cf 93       	push	r28
    37e6:	00 d0       	rcall	.+0      	; 0x37e8 <EEPROM_writeByte+0x6>
    37e8:	00 d0       	rcall	.+0      	; 0x37ea <EEPROM_writeByte+0x8>
    37ea:	0f 92       	push	r0
    37ec:	cd b7       	in	r28, 0x3d	; 61
    37ee:	de b7       	in	r29, 0x3e	; 62
    37f0:	9b 83       	std	Y+3, r25	; 0x03
    37f2:	8a 83       	std	Y+2, r24	; 0x02
    37f4:	6c 83       	std	Y+4, r22	; 0x04
	I2C_start();
    37f6:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <I2C_start>
	if (I2C_getStatus() != I2C_START) {
    37fa:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <I2C_getStatus>
    37fe:	88 30       	cpi	r24, 0x08	; 8
    3800:	11 f0       	breq	.+4      	; 0x3806 <EEPROM_writeByte+0x24>
	        return ERROR;
    3802:	1d 82       	std	Y+5, r1	; 0x05
    3804:	2a c0       	rjmp	.+84     	; 0x385a <EEPROM_writeByte+0x78>
	 * EEPROM address is 11 bits, the 3 MSB is the device address
	 * The other bits are the word address
	 * but the device address is again shifted to another 8 bit frame:
	 * the 4 MSB is 1010, then the Device Address, then R/W
	 */
	uint8 EEPROM_ADDRESS_EQN = (uint8) (0xA0 | ( (u16Address & 0x0700) >> 7) );
    3806:	8a 81       	ldd	r24, Y+2	; 0x02
    3808:	9b 81       	ldd	r25, Y+3	; 0x03
    380a:	80 70       	andi	r24, 0x00	; 0
    380c:	97 70       	andi	r25, 0x07	; 7
    380e:	88 0f       	add	r24, r24
    3810:	89 2f       	mov	r24, r25
    3812:	88 1f       	adc	r24, r24
    3814:	99 0b       	sbc	r25, r25
    3816:	91 95       	neg	r25
    3818:	80 6a       	ori	r24, 0xA0	; 160
    381a:	89 83       	std	Y+1, r24	; 0x01
	// 0xA0 = 1010, 0x0700 = 0b111 0000 000
	I2C_writeByte(EEPROM_ADDRESS_EQN);
    381c:	89 81       	ldd	r24, Y+1	; 0x01
    381e:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <I2C_writeByte>
	if (I2C_getStatus() != I2C_MT_SLA_W_ACK) {
    3822:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <I2C_getStatus>
    3826:	88 31       	cpi	r24, 0x18	; 24
    3828:	11 f0       	breq	.+4      	; 0x382e <EEPROM_writeByte+0x4c>
		return ERROR;
    382a:	1d 82       	std	Y+5, r1	; 0x05
    382c:	16 c0       	rjmp	.+44     	; 0x385a <EEPROM_writeByte+0x78>
	}

	I2C_writeByte((uint8) (u16Address));
    382e:	8a 81       	ldd	r24, Y+2	; 0x02
    3830:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <I2C_writeByte>
	if (I2C_getStatus() != I2C_MT_DATA_ACK) {
    3834:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <I2C_getStatus>
    3838:	88 32       	cpi	r24, 0x28	; 40
    383a:	11 f0       	breq	.+4      	; 0x3840 <EEPROM_writeByte+0x5e>
		return ERROR;
    383c:	1d 82       	std	Y+5, r1	; 0x05
    383e:	0d c0       	rjmp	.+26     	; 0x385a <EEPROM_writeByte+0x78>
	}

	I2C_writeByte(u8Data);
    3840:	8c 81       	ldd	r24, Y+4	; 0x04
    3842:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <I2C_writeByte>
	if (I2C_getStatus() != I2C_MT_DATA_ACK) {
    3846:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <I2C_getStatus>
    384a:	88 32       	cpi	r24, 0x28	; 40
    384c:	11 f0       	breq	.+4      	; 0x3852 <EEPROM_writeByte+0x70>
		return ERROR;
    384e:	1d 82       	std	Y+5, r1	; 0x05
    3850:	04 c0       	rjmp	.+8      	; 0x385a <EEPROM_writeByte+0x78>
	}

	I2C_stop();
    3852:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <I2C_stop>

	return SUCCESS;
    3856:	81 e0       	ldi	r24, 0x01	; 1
    3858:	8d 83       	std	Y+5, r24	; 0x05
    385a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    385c:	0f 90       	pop	r0
    385e:	0f 90       	pop	r0
    3860:	0f 90       	pop	r0
    3862:	0f 90       	pop	r0
    3864:	0f 90       	pop	r0
    3866:	cf 91       	pop	r28
    3868:	df 91       	pop	r29
    386a:	08 95       	ret

0000386c <EEPROM_readByte>:


uint8 EEPROM_readByte(uint16 u16Address, uint8 *u8Data) {
    386c:	df 93       	push	r29
    386e:	cf 93       	push	r28
    3870:	00 d0       	rcall	.+0      	; 0x3872 <EEPROM_readByte+0x6>
    3872:	00 d0       	rcall	.+0      	; 0x3874 <EEPROM_readByte+0x8>
    3874:	00 d0       	rcall	.+0      	; 0x3876 <EEPROM_readByte+0xa>
    3876:	cd b7       	in	r28, 0x3d	; 61
    3878:	de b7       	in	r29, 0x3e	; 62
    387a:	9b 83       	std	Y+3, r25	; 0x03
    387c:	8a 83       	std	Y+2, r24	; 0x02
    387e:	7d 83       	std	Y+5, r23	; 0x05
    3880:	6c 83       	std	Y+4, r22	; 0x04
	I2C_start();
    3882:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <I2C_start>
	if (I2C_getStatus() != I2C_START) {
    3886:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <I2C_getStatus>
    388a:	88 30       	cpi	r24, 0x08	; 8
    388c:	11 f0       	breq	.+4      	; 0x3892 <EEPROM_readByte+0x26>
			return ERROR;
    388e:	1e 82       	std	Y+6, r1	; 0x06
    3890:	3e c0       	rjmp	.+124    	; 0x390e <EEPROM_readByte+0xa2>
	 * EEPROM address is 11 bits, the 3 MSB is the device address
	 * The other bits are the word address
	 * but the device address is again shifted to another 8 bit frame:
	 * the 4 MSB is 1010, then the Device Address, then R/W
	 */
	uint8 EEPROM_ADDRESS_EQN = (uint8) (0xA0 | ( (u16Address & 0x0700) >> 7) );
    3892:	8a 81       	ldd	r24, Y+2	; 0x02
    3894:	9b 81       	ldd	r25, Y+3	; 0x03
    3896:	80 70       	andi	r24, 0x00	; 0
    3898:	97 70       	andi	r25, 0x07	; 7
    389a:	88 0f       	add	r24, r24
    389c:	89 2f       	mov	r24, r25
    389e:	88 1f       	adc	r24, r24
    38a0:	99 0b       	sbc	r25, r25
    38a2:	91 95       	neg	r25
    38a4:	80 6a       	ori	r24, 0xA0	; 160
    38a6:	89 83       	std	Y+1, r24	; 0x01
	// 0xA0 = 1010, 0x0700 = 0b111 0000 000
	I2C_writeByte(EEPROM_ADDRESS_EQN);
    38a8:	89 81       	ldd	r24, Y+1	; 0x01
    38aa:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <I2C_writeByte>
	if (I2C_getStatus() != I2C_MT_SLA_W_ACK) {
    38ae:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <I2C_getStatus>
    38b2:	88 31       	cpi	r24, 0x18	; 24
    38b4:	11 f0       	breq	.+4      	; 0x38ba <EEPROM_readByte+0x4e>
		return ERROR;
    38b6:	1e 82       	std	Y+6, r1	; 0x06
    38b8:	2a c0       	rjmp	.+84     	; 0x390e <EEPROM_readByte+0xa2>
	}

	I2C_writeByte((uint8) (u16Address));
    38ba:	8a 81       	ldd	r24, Y+2	; 0x02
    38bc:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <I2C_writeByte>
	if (I2C_getStatus() != I2C_MT_DATA_ACK) {
    38c0:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <I2C_getStatus>
    38c4:	88 32       	cpi	r24, 0x28	; 40
    38c6:	11 f0       	breq	.+4      	; 0x38cc <EEPROM_readByte+0x60>
		return ERROR;
    38c8:	1e 82       	std	Y+6, r1	; 0x06
    38ca:	21 c0       	rjmp	.+66     	; 0x390e <EEPROM_readByte+0xa2>
	}

	I2C_start();
    38cc:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <I2C_start>
	if (I2C_getStatus() != I2C_REP_START) {
    38d0:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <I2C_getStatus>
    38d4:	80 31       	cpi	r24, 0x10	; 16
    38d6:	11 f0       	breq	.+4      	; 0x38dc <EEPROM_readByte+0x70>
		return ERROR;
    38d8:	1e 82       	std	Y+6, r1	; 0x06
    38da:	19 c0       	rjmp	.+50     	; 0x390e <EEPROM_readByte+0xa2>
	}

	I2C_writeByte(EEPROM_ADDRESS_EQN | 1); // For Reading
    38dc:	89 81       	ldd	r24, Y+1	; 0x01
    38de:	81 60       	ori	r24, 0x01	; 1
    38e0:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <I2C_writeByte>
	if (I2C_getStatus() != I2C_MT_SLA_R_ACK) {
    38e4:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <I2C_getStatus>
    38e8:	80 34       	cpi	r24, 0x40	; 64
    38ea:	11 f0       	breq	.+4      	; 0x38f0 <EEPROM_readByte+0x84>
		return ERROR;
    38ec:	1e 82       	std	Y+6, r1	; 0x06
    38ee:	0f c0       	rjmp	.+30     	; 0x390e <EEPROM_readByte+0xa2>
	}

	*u8Data = I2C_readByteWithNACK();
    38f0:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <I2C_readByteWithNACK>
    38f4:	ec 81       	ldd	r30, Y+4	; 0x04
    38f6:	fd 81       	ldd	r31, Y+5	; 0x05
    38f8:	80 83       	st	Z, r24
	if (I2C_getStatus() != I2C_MR_DATA_NACK) {
    38fa:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <I2C_getStatus>
    38fe:	88 35       	cpi	r24, 0x58	; 88
    3900:	11 f0       	breq	.+4      	; 0x3906 <EEPROM_readByte+0x9a>
		return ERROR;
    3902:	1e 82       	std	Y+6, r1	; 0x06
    3904:	04 c0       	rjmp	.+8      	; 0x390e <EEPROM_readByte+0xa2>
	}

	I2C_stop();
    3906:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <I2C_stop>

	return SUCCESS;
    390a:	81 e0       	ldi	r24, 0x01	; 1
    390c:	8e 83       	std	Y+6, r24	; 0x06
    390e:	8e 81       	ldd	r24, Y+6	; 0x06
}
    3910:	26 96       	adiw	r28, 0x06	; 6
    3912:	0f b6       	in	r0, 0x3f	; 63
    3914:	f8 94       	cli
    3916:	de bf       	out	0x3e, r29	; 62
    3918:	0f be       	out	0x3f, r0	; 63
    391a:	cd bf       	out	0x3d, r28	; 61
    391c:	cf 91       	pop	r28
    391e:	df 91       	pop	r29
    3920:	08 95       	ret

00003922 <Buzzer_Init>:

/*
 * Description :
 * Setup the direction of the required pin input/output.
 */
void Buzzer_Init(uint8 port_num, uint8 pin_num) {
    3922:	df 93       	push	r29
    3924:	cf 93       	push	r28
    3926:	00 d0       	rcall	.+0      	; 0x3928 <Buzzer_Init+0x6>
    3928:	cd b7       	in	r28, 0x3d	; 61
    392a:	de b7       	in	r29, 0x3e	; 62
    392c:	89 83       	std	Y+1, r24	; 0x01
    392e:	6a 83       	std	Y+2, r22	; 0x02
	/* Setup the pin direction as required */
	GPIO_setupPinDirection(port_num, pin_num, PIN_OUTPUT);
    3930:	89 81       	ldd	r24, Y+1	; 0x01
    3932:	6a 81       	ldd	r22, Y+2	; 0x02
    3934:	41 e0       	ldi	r20, 0x01	; 1
    3936:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <GPIO_setupPinDirection>
	GPIO_writePin(port_num, pin_num, LOGIC_LOW);
    393a:	89 81       	ldd	r24, Y+1	; 0x01
    393c:	6a 81       	ldd	r22, Y+2	; 0x02
    393e:	40 e0       	ldi	r20, 0x00	; 0
    3940:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <GPIO_writePin>
}
    3944:	0f 90       	pop	r0
    3946:	0f 90       	pop	r0
    3948:	cf 91       	pop	r28
    394a:	df 91       	pop	r29
    394c:	08 95       	ret

0000394e <Buzzer_On>:

/*
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 */
void Buzzer_On(uint8 port_num, uint8 pin_num) {
    394e:	df 93       	push	r29
    3950:	cf 93       	push	r28
    3952:	00 d0       	rcall	.+0      	; 0x3954 <Buzzer_On+0x6>
    3954:	cd b7       	in	r28, 0x3d	; 61
    3956:	de b7       	in	r29, 0x3e	; 62
    3958:	89 83       	std	Y+1, r24	; 0x01
    395a:	6a 83       	std	Y+2, r22	; 0x02
	/* Setup the pin direction as required */
	GPIO_writePin(port_num, pin_num, LOGIC_HIGH);
    395c:	89 81       	ldd	r24, Y+1	; 0x01
    395e:	6a 81       	ldd	r22, Y+2	; 0x02
    3960:	41 e0       	ldi	r20, 0x01	; 1
    3962:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <GPIO_writePin>
}
    3966:	0f 90       	pop	r0
    3968:	0f 90       	pop	r0
    396a:	cf 91       	pop	r28
    396c:	df 91       	pop	r29
    396e:	08 95       	ret

00003970 <Buzzer_Off>:

/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 */
void Buzzer_Off(uint8 port_num, uint8 pin_num) {
    3970:	df 93       	push	r29
    3972:	cf 93       	push	r28
    3974:	00 d0       	rcall	.+0      	; 0x3976 <Buzzer_Off+0x6>
    3976:	cd b7       	in	r28, 0x3d	; 61
    3978:	de b7       	in	r29, 0x3e	; 62
    397a:	89 83       	std	Y+1, r24	; 0x01
    397c:	6a 83       	std	Y+2, r22	; 0x02
	/* Setup the pin direction as required */
	GPIO_writePin(port_num, pin_num, LOGIC_LOW);
    397e:	89 81       	ldd	r24, Y+1	; 0x01
    3980:	6a 81       	ldd	r22, Y+2	; 0x02
    3982:	40 e0       	ldi	r20, 0x00	; 0
    3984:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <GPIO_writePin>
}
    3988:	0f 90       	pop	r0
    398a:	0f 90       	pop	r0
    398c:	cf 91       	pop	r28
    398e:	df 91       	pop	r29
    3990:	08 95       	ret

00003992 <BUTTON_Init>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
BUTTON_Error_t BUTTON_Init(uint8 port_num, uint8 pin_num) {
    3992:	df 93       	push	r29
    3994:	cf 93       	push	r28
    3996:	00 d0       	rcall	.+0      	; 0x3998 <BUTTON_Init+0x6>
    3998:	0f 92       	push	r0
    399a:	cd b7       	in	r28, 0x3d	; 61
    399c:	de b7       	in	r29, 0x3e	; 62
    399e:	8a 83       	std	Y+2, r24	; 0x02
    39a0:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t BUTTON_Driver_Checker = NULL;
    39a2:	19 82       	std	Y+1, r1	; 0x01
	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    39a4:	8b 81       	ldd	r24, Y+3	; 0x03
    39a6:	88 30       	cpi	r24, 0x08	; 8
    39a8:	18 f0       	brcs	.+6      	; 0x39b0 <BUTTON_Init+0x1e>
		BUTTON_Driver_Checker = BUTTON_WRONG_PIN_NUMBER;
    39aa:	81 e0       	ldi	r24, 0x01	; 1
    39ac:	89 83       	std	Y+1, r24	; 0x01
    39ae:	0c c0       	rjmp	.+24     	; 0x39c8 <BUTTON_Init+0x36>
	}
	else if((port_num >= NUM_OF_PORTS)) {
    39b0:	8a 81       	ldd	r24, Y+2	; 0x02
    39b2:	84 30       	cpi	r24, 0x04	; 4
    39b4:	18 f0       	brcs	.+6      	; 0x39bc <BUTTON_Init+0x2a>
		BUTTON_Driver_Checker = BUTTON_WRONG_PORT_NUMBER;
    39b6:	82 e0       	ldi	r24, 0x02	; 2
    39b8:	89 83       	std	Y+1, r24	; 0x01
    39ba:	06 c0       	rjmp	.+12     	; 0x39c8 <BUTTON_Init+0x36>
	}
	else {
		/* Setup the pin direction as required */
		GPIO_setupPinDirection(port_num, pin_num, PIN_INPUT);
    39bc:	8a 81       	ldd	r24, Y+2	; 0x02
    39be:	6b 81       	ldd	r22, Y+3	; 0x03
    39c0:	40 e0       	ldi	r20, 0x00	; 0
    39c2:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <GPIO_setupPinDirection>
		BUTTON_Driver_Checker = BUTTON_OK;
    39c6:	19 82       	std	Y+1, r1	; 0x01
	}
	return BUTTON_Driver_Checker;
    39c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    39ca:	0f 90       	pop	r0
    39cc:	0f 90       	pop	r0
    39ce:	0f 90       	pop	r0
    39d0:	cf 91       	pop	r28
    39d2:	df 91       	pop	r29
    39d4:	08 95       	ret

000039d6 <BUTTON_Read>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
uint8 BUTTON_Read(uint8 port_num, uint8 pin_num) {
    39d6:	df 93       	push	r29
    39d8:	cf 93       	push	r28
    39da:	00 d0       	rcall	.+0      	; 0x39dc <BUTTON_Read+0x6>
    39dc:	0f 92       	push	r0
    39de:	cd b7       	in	r28, 0x3d	; 61
    39e0:	de b7       	in	r29, 0x3e	; 62
    39e2:	8a 83       	std	Y+2, r24	; 0x02
    39e4:	6b 83       	std	Y+3, r22	; 0x03

	uint8_t BUTTON_Driver_Checker = NULL;
    39e6:	19 82       	std	Y+1, r1	; 0x01
		if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    39e8:	8b 81       	ldd	r24, Y+3	; 0x03
    39ea:	88 30       	cpi	r24, 0x08	; 8
    39ec:	18 f0       	brcs	.+6      	; 0x39f4 <BUTTON_Read+0x1e>
			BUTTON_Driver_Checker = BUTTON_WRONG_PIN_NUMBER;
    39ee:	81 e0       	ldi	r24, 0x01	; 1
    39f0:	89 83       	std	Y+1, r24	; 0x01
    39f2:	0b c0       	rjmp	.+22     	; 0x3a0a <BUTTON_Read+0x34>
		}
		else if((port_num >= NUM_OF_PORTS)) {
    39f4:	8a 81       	ldd	r24, Y+2	; 0x02
    39f6:	84 30       	cpi	r24, 0x04	; 4
    39f8:	18 f0       	brcs	.+6      	; 0x3a00 <BUTTON_Read+0x2a>
			BUTTON_Driver_Checker = BUTTON_WRONG_PORT_NUMBER;
    39fa:	82 e0       	ldi	r24, 0x02	; 2
    39fc:	89 83       	std	Y+1, r24	; 0x01
    39fe:	05 c0       	rjmp	.+10     	; 0x3a0a <BUTTON_Read+0x34>
		}
		else {
			/* Setup the pin direction as required */
			GPIO_readPin(port_num, pin_num);
    3a00:	8a 81       	ldd	r24, Y+2	; 0x02
    3a02:	6b 81       	ldd	r22, Y+3	; 0x03
    3a04:	0e 94 22 11 	call	0x2244	; 0x2244 <GPIO_readPin>
			BUTTON_Driver_Checker = BUTTON_OK;
    3a08:	19 82       	std	Y+1, r1	; 0x01
		}
		return GPIO_readPin(port_num, pin_num);
    3a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a0c:	6b 81       	ldd	r22, Y+3	; 0x03
    3a0e:	0e 94 22 11 	call	0x2244	; 0x2244 <GPIO_readPin>
}
    3a12:	0f 90       	pop	r0
    3a14:	0f 90       	pop	r0
    3a16:	0f 90       	pop	r0
    3a18:	cf 91       	pop	r28
    3a1a:	df 91       	pop	r29
    3a1c:	08 95       	ret

00003a1e <__vector_10>:
		compareMatches = 0;
	}
}
*/

ISR(TIMER0_COMP_vect) {
    3a1e:	1f 92       	push	r1
    3a20:	0f 92       	push	r0
    3a22:	0f b6       	in	r0, 0x3f	; 63
    3a24:	0f 92       	push	r0
    3a26:	11 24       	eor	r1, r1
    3a28:	df 93       	push	r29
    3a2a:	cf 93       	push	r28
    3a2c:	cd b7       	in	r28, 0x3d	; 61
    3a2e:	de b7       	in	r29, 0x3e	; 62

}
    3a30:	cf 91       	pop	r28
    3a32:	df 91       	pop	r29
    3a34:	0f 90       	pop	r0
    3a36:	0f be       	out	0x3f, r0	; 63
    3a38:	0f 90       	pop	r0
    3a3a:	1f 90       	pop	r1
    3a3c:	18 95       	reti

00003a3e <main>:

int main(void) {
    3a3e:	df 93       	push	r29
    3a40:	cf 93       	push	r28
    3a42:	cd b7       	in	r28, 0x3d	; 61
    3a44:	de b7       	in	r29, 0x3e	; 62
    3a46:	ff cf       	rjmp	.-2      	; 0x3a46 <main+0x8>

00003a48 <__mulsi3>:
    3a48:	62 9f       	mul	r22, r18
    3a4a:	d0 01       	movw	r26, r0
    3a4c:	73 9f       	mul	r23, r19
    3a4e:	f0 01       	movw	r30, r0
    3a50:	82 9f       	mul	r24, r18
    3a52:	e0 0d       	add	r30, r0
    3a54:	f1 1d       	adc	r31, r1
    3a56:	64 9f       	mul	r22, r20
    3a58:	e0 0d       	add	r30, r0
    3a5a:	f1 1d       	adc	r31, r1
    3a5c:	92 9f       	mul	r25, r18
    3a5e:	f0 0d       	add	r31, r0
    3a60:	83 9f       	mul	r24, r19
    3a62:	f0 0d       	add	r31, r0
    3a64:	74 9f       	mul	r23, r20
    3a66:	f0 0d       	add	r31, r0
    3a68:	65 9f       	mul	r22, r21
    3a6a:	f0 0d       	add	r31, r0
    3a6c:	99 27       	eor	r25, r25
    3a6e:	72 9f       	mul	r23, r18
    3a70:	b0 0d       	add	r27, r0
    3a72:	e1 1d       	adc	r30, r1
    3a74:	f9 1f       	adc	r31, r25
    3a76:	63 9f       	mul	r22, r19
    3a78:	b0 0d       	add	r27, r0
    3a7a:	e1 1d       	adc	r30, r1
    3a7c:	f9 1f       	adc	r31, r25
    3a7e:	bd 01       	movw	r22, r26
    3a80:	cf 01       	movw	r24, r30
    3a82:	11 24       	eor	r1, r1
    3a84:	08 95       	ret

00003a86 <__udivmodsi4>:
    3a86:	a1 e2       	ldi	r26, 0x21	; 33
    3a88:	1a 2e       	mov	r1, r26
    3a8a:	aa 1b       	sub	r26, r26
    3a8c:	bb 1b       	sub	r27, r27
    3a8e:	fd 01       	movw	r30, r26
    3a90:	0d c0       	rjmp	.+26     	; 0x3aac <__udivmodsi4_ep>

00003a92 <__udivmodsi4_loop>:
    3a92:	aa 1f       	adc	r26, r26
    3a94:	bb 1f       	adc	r27, r27
    3a96:	ee 1f       	adc	r30, r30
    3a98:	ff 1f       	adc	r31, r31
    3a9a:	a2 17       	cp	r26, r18
    3a9c:	b3 07       	cpc	r27, r19
    3a9e:	e4 07       	cpc	r30, r20
    3aa0:	f5 07       	cpc	r31, r21
    3aa2:	20 f0       	brcs	.+8      	; 0x3aac <__udivmodsi4_ep>
    3aa4:	a2 1b       	sub	r26, r18
    3aa6:	b3 0b       	sbc	r27, r19
    3aa8:	e4 0b       	sbc	r30, r20
    3aaa:	f5 0b       	sbc	r31, r21

00003aac <__udivmodsi4_ep>:
    3aac:	66 1f       	adc	r22, r22
    3aae:	77 1f       	adc	r23, r23
    3ab0:	88 1f       	adc	r24, r24
    3ab2:	99 1f       	adc	r25, r25
    3ab4:	1a 94       	dec	r1
    3ab6:	69 f7       	brne	.-38     	; 0x3a92 <__udivmodsi4_loop>
    3ab8:	60 95       	com	r22
    3aba:	70 95       	com	r23
    3abc:	80 95       	com	r24
    3abe:	90 95       	com	r25
    3ac0:	9b 01       	movw	r18, r22
    3ac2:	ac 01       	movw	r20, r24
    3ac4:	bd 01       	movw	r22, r26
    3ac6:	cf 01       	movw	r24, r30
    3ac8:	08 95       	ret

00003aca <__prologue_saves__>:
    3aca:	2f 92       	push	r2
    3acc:	3f 92       	push	r3
    3ace:	4f 92       	push	r4
    3ad0:	5f 92       	push	r5
    3ad2:	6f 92       	push	r6
    3ad4:	7f 92       	push	r7
    3ad6:	8f 92       	push	r8
    3ad8:	9f 92       	push	r9
    3ada:	af 92       	push	r10
    3adc:	bf 92       	push	r11
    3ade:	cf 92       	push	r12
    3ae0:	df 92       	push	r13
    3ae2:	ef 92       	push	r14
    3ae4:	ff 92       	push	r15
    3ae6:	0f 93       	push	r16
    3ae8:	1f 93       	push	r17
    3aea:	cf 93       	push	r28
    3aec:	df 93       	push	r29
    3aee:	cd b7       	in	r28, 0x3d	; 61
    3af0:	de b7       	in	r29, 0x3e	; 62
    3af2:	ca 1b       	sub	r28, r26
    3af4:	db 0b       	sbc	r29, r27
    3af6:	0f b6       	in	r0, 0x3f	; 63
    3af8:	f8 94       	cli
    3afa:	de bf       	out	0x3e, r29	; 62
    3afc:	0f be       	out	0x3f, r0	; 63
    3afe:	cd bf       	out	0x3d, r28	; 61
    3b00:	09 94       	ijmp

00003b02 <__epilogue_restores__>:
    3b02:	2a 88       	ldd	r2, Y+18	; 0x12
    3b04:	39 88       	ldd	r3, Y+17	; 0x11
    3b06:	48 88       	ldd	r4, Y+16	; 0x10
    3b08:	5f 84       	ldd	r5, Y+15	; 0x0f
    3b0a:	6e 84       	ldd	r6, Y+14	; 0x0e
    3b0c:	7d 84       	ldd	r7, Y+13	; 0x0d
    3b0e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3b10:	9b 84       	ldd	r9, Y+11	; 0x0b
    3b12:	aa 84       	ldd	r10, Y+10	; 0x0a
    3b14:	b9 84       	ldd	r11, Y+9	; 0x09
    3b16:	c8 84       	ldd	r12, Y+8	; 0x08
    3b18:	df 80       	ldd	r13, Y+7	; 0x07
    3b1a:	ee 80       	ldd	r14, Y+6	; 0x06
    3b1c:	fd 80       	ldd	r15, Y+5	; 0x05
    3b1e:	0c 81       	ldd	r16, Y+4	; 0x04
    3b20:	1b 81       	ldd	r17, Y+3	; 0x03
    3b22:	aa 81       	ldd	r26, Y+2	; 0x02
    3b24:	b9 81       	ldd	r27, Y+1	; 0x01
    3b26:	ce 0f       	add	r28, r30
    3b28:	d1 1d       	adc	r29, r1
    3b2a:	0f b6       	in	r0, 0x3f	; 63
    3b2c:	f8 94       	cli
    3b2e:	de bf       	out	0x3e, r29	; 62
    3b30:	0f be       	out	0x3f, r0	; 63
    3b32:	cd bf       	out	0x3d, r28	; 61
    3b34:	ed 01       	movw	r28, r26
    3b36:	08 95       	ret

00003b38 <itoa>:
    3b38:	fb 01       	movw	r30, r22
    3b3a:	9f 01       	movw	r18, r30
    3b3c:	e8 94       	clt
    3b3e:	42 30       	cpi	r20, 0x02	; 2
    3b40:	c4 f0       	brlt	.+48     	; 0x3b72 <itoa+0x3a>
    3b42:	45 32       	cpi	r20, 0x25	; 37
    3b44:	b4 f4       	brge	.+44     	; 0x3b72 <itoa+0x3a>
    3b46:	4a 30       	cpi	r20, 0x0A	; 10
    3b48:	29 f4       	brne	.+10     	; 0x3b54 <itoa+0x1c>
    3b4a:	97 fb       	bst	r25, 7
    3b4c:	1e f4       	brtc	.+6      	; 0x3b54 <itoa+0x1c>
    3b4e:	90 95       	com	r25
    3b50:	81 95       	neg	r24
    3b52:	9f 4f       	sbci	r25, 0xFF	; 255
    3b54:	64 2f       	mov	r22, r20
    3b56:	77 27       	eor	r23, r23
    3b58:	0e 94 49 1e 	call	0x3c92	; 0x3c92 <__udivmodhi4>
    3b5c:	80 5d       	subi	r24, 0xD0	; 208
    3b5e:	8a 33       	cpi	r24, 0x3A	; 58
    3b60:	0c f0       	brlt	.+2      	; 0x3b64 <itoa+0x2c>
    3b62:	89 5d       	subi	r24, 0xD9	; 217
    3b64:	81 93       	st	Z+, r24
    3b66:	cb 01       	movw	r24, r22
    3b68:	00 97       	sbiw	r24, 0x00	; 0
    3b6a:	a1 f7       	brne	.-24     	; 0x3b54 <itoa+0x1c>
    3b6c:	16 f4       	brtc	.+4      	; 0x3b72 <itoa+0x3a>
    3b6e:	5d e2       	ldi	r21, 0x2D	; 45
    3b70:	51 93       	st	Z+, r21
    3b72:	10 82       	st	Z, r1
    3b74:	c9 01       	movw	r24, r18
    3b76:	0c 94 17 1e 	jmp	0x3c2e	; 0x3c2e <strrev>

00003b7a <ceil>:
    3b7a:	3b d0       	rcall	.+118    	; 0x3bf2 <__fp_trunc>
    3b7c:	80 f0       	brcs	.+32     	; 0x3b9e <ceil+0x24>
    3b7e:	9f 37       	cpi	r25, 0x7F	; 127
    3b80:	40 f4       	brcc	.+16     	; 0x3b92 <ceil+0x18>
    3b82:	91 11       	cpse	r25, r1
    3b84:	0e f4       	brtc	.+2      	; 0x3b88 <ceil+0xe>
    3b86:	4d c0       	rjmp	.+154    	; 0x3c22 <__fp_szero>
    3b88:	60 e0       	ldi	r22, 0x00	; 0
    3b8a:	70 e0       	ldi	r23, 0x00	; 0
    3b8c:	80 e8       	ldi	r24, 0x80	; 128
    3b8e:	9f e3       	ldi	r25, 0x3F	; 63
    3b90:	08 95       	ret
    3b92:	26 f0       	brts	.+8      	; 0x3b9c <ceil+0x22>
    3b94:	1b 16       	cp	r1, r27
    3b96:	61 1d       	adc	r22, r1
    3b98:	71 1d       	adc	r23, r1
    3b9a:	81 1d       	adc	r24, r1
    3b9c:	01 c0       	rjmp	.+2      	; 0x3ba0 <__fp_mintl>
    3b9e:	1b c0       	rjmp	.+54     	; 0x3bd6 <__fp_mpack>

00003ba0 <__fp_mintl>:
    3ba0:	88 23       	and	r24, r24
    3ba2:	71 f4       	brne	.+28     	; 0x3bc0 <__fp_mintl+0x20>
    3ba4:	77 23       	and	r23, r23
    3ba6:	21 f0       	breq	.+8      	; 0x3bb0 <__fp_mintl+0x10>
    3ba8:	98 50       	subi	r25, 0x08	; 8
    3baa:	87 2b       	or	r24, r23
    3bac:	76 2f       	mov	r23, r22
    3bae:	07 c0       	rjmp	.+14     	; 0x3bbe <__fp_mintl+0x1e>
    3bb0:	66 23       	and	r22, r22
    3bb2:	11 f4       	brne	.+4      	; 0x3bb8 <__fp_mintl+0x18>
    3bb4:	99 27       	eor	r25, r25
    3bb6:	0d c0       	rjmp	.+26     	; 0x3bd2 <__fp_mintl+0x32>
    3bb8:	90 51       	subi	r25, 0x10	; 16
    3bba:	86 2b       	or	r24, r22
    3bbc:	70 e0       	ldi	r23, 0x00	; 0
    3bbe:	60 e0       	ldi	r22, 0x00	; 0
    3bc0:	2a f0       	brmi	.+10     	; 0x3bcc <__fp_mintl+0x2c>
    3bc2:	9a 95       	dec	r25
    3bc4:	66 0f       	add	r22, r22
    3bc6:	77 1f       	adc	r23, r23
    3bc8:	88 1f       	adc	r24, r24
    3bca:	da f7       	brpl	.-10     	; 0x3bc2 <__fp_mintl+0x22>
    3bcc:	88 0f       	add	r24, r24
    3bce:	96 95       	lsr	r25
    3bd0:	87 95       	ror	r24
    3bd2:	97 f9       	bld	r25, 7
    3bd4:	08 95       	ret

00003bd6 <__fp_mpack>:
    3bd6:	9f 3f       	cpi	r25, 0xFF	; 255
    3bd8:	31 f0       	breq	.+12     	; 0x3be6 <__fp_mpack_finite+0xc>

00003bda <__fp_mpack_finite>:
    3bda:	91 50       	subi	r25, 0x01	; 1
    3bdc:	20 f4       	brcc	.+8      	; 0x3be6 <__fp_mpack_finite+0xc>
    3bde:	87 95       	ror	r24
    3be0:	77 95       	ror	r23
    3be2:	67 95       	ror	r22
    3be4:	b7 95       	ror	r27
    3be6:	88 0f       	add	r24, r24
    3be8:	91 1d       	adc	r25, r1
    3bea:	96 95       	lsr	r25
    3bec:	87 95       	ror	r24
    3bee:	97 f9       	bld	r25, 7
    3bf0:	08 95       	ret

00003bf2 <__fp_trunc>:
    3bf2:	35 d0       	rcall	.+106    	; 0x3c5e <__fp_splitA>
    3bf4:	a0 f0       	brcs	.+40     	; 0x3c1e <__fp_trunc+0x2c>
    3bf6:	be e7       	ldi	r27, 0x7E	; 126
    3bf8:	b9 17       	cp	r27, r25
    3bfa:	88 f4       	brcc	.+34     	; 0x3c1e <__fp_trunc+0x2c>
    3bfc:	bb 27       	eor	r27, r27
    3bfe:	9f 38       	cpi	r25, 0x8F	; 143
    3c00:	60 f4       	brcc	.+24     	; 0x3c1a <__fp_trunc+0x28>
    3c02:	16 16       	cp	r1, r22
    3c04:	b1 1d       	adc	r27, r1
    3c06:	67 2f       	mov	r22, r23
    3c08:	78 2f       	mov	r23, r24
    3c0a:	88 27       	eor	r24, r24
    3c0c:	98 5f       	subi	r25, 0xF8	; 248
    3c0e:	f7 cf       	rjmp	.-18     	; 0x3bfe <__fp_trunc+0xc>
    3c10:	86 95       	lsr	r24
    3c12:	77 95       	ror	r23
    3c14:	67 95       	ror	r22
    3c16:	b1 1d       	adc	r27, r1
    3c18:	93 95       	inc	r25
    3c1a:	96 39       	cpi	r25, 0x96	; 150
    3c1c:	c8 f3       	brcs	.-14     	; 0x3c10 <__fp_trunc+0x1e>
    3c1e:	08 95       	ret

00003c20 <__fp_zero>:
    3c20:	e8 94       	clt

00003c22 <__fp_szero>:
    3c22:	bb 27       	eor	r27, r27
    3c24:	66 27       	eor	r22, r22
    3c26:	77 27       	eor	r23, r23
    3c28:	cb 01       	movw	r24, r22
    3c2a:	97 f9       	bld	r25, 7
    3c2c:	08 95       	ret

00003c2e <strrev>:
    3c2e:	dc 01       	movw	r26, r24
    3c30:	fc 01       	movw	r30, r24
    3c32:	67 2f       	mov	r22, r23
    3c34:	71 91       	ld	r23, Z+
    3c36:	77 23       	and	r23, r23
    3c38:	e1 f7       	brne	.-8      	; 0x3c32 <strrev+0x4>
    3c3a:	32 97       	sbiw	r30, 0x02	; 2
    3c3c:	04 c0       	rjmp	.+8      	; 0x3c46 <strrev+0x18>
    3c3e:	7c 91       	ld	r23, X
    3c40:	6d 93       	st	X+, r22
    3c42:	70 83       	st	Z, r23
    3c44:	62 91       	ld	r22, -Z
    3c46:	ae 17       	cp	r26, r30
    3c48:	bf 07       	cpc	r27, r31
    3c4a:	c8 f3       	brcs	.-14     	; 0x3c3e <strrev+0x10>
    3c4c:	08 95       	ret

00003c4e <__fp_split3>:
    3c4e:	57 fd       	sbrc	r21, 7
    3c50:	90 58       	subi	r25, 0x80	; 128
    3c52:	44 0f       	add	r20, r20
    3c54:	55 1f       	adc	r21, r21
    3c56:	59 f0       	breq	.+22     	; 0x3c6e <__fp_splitA+0x10>
    3c58:	5f 3f       	cpi	r21, 0xFF	; 255
    3c5a:	71 f0       	breq	.+28     	; 0x3c78 <__fp_splitA+0x1a>
    3c5c:	47 95       	ror	r20

00003c5e <__fp_splitA>:
    3c5e:	88 0f       	add	r24, r24
    3c60:	97 fb       	bst	r25, 7
    3c62:	99 1f       	adc	r25, r25
    3c64:	61 f0       	breq	.+24     	; 0x3c7e <__fp_splitA+0x20>
    3c66:	9f 3f       	cpi	r25, 0xFF	; 255
    3c68:	79 f0       	breq	.+30     	; 0x3c88 <__fp_splitA+0x2a>
    3c6a:	87 95       	ror	r24
    3c6c:	08 95       	ret
    3c6e:	12 16       	cp	r1, r18
    3c70:	13 06       	cpc	r1, r19
    3c72:	14 06       	cpc	r1, r20
    3c74:	55 1f       	adc	r21, r21
    3c76:	f2 cf       	rjmp	.-28     	; 0x3c5c <__fp_split3+0xe>
    3c78:	46 95       	lsr	r20
    3c7a:	f1 df       	rcall	.-30     	; 0x3c5e <__fp_splitA>
    3c7c:	08 c0       	rjmp	.+16     	; 0x3c8e <__fp_splitA+0x30>
    3c7e:	16 16       	cp	r1, r22
    3c80:	17 06       	cpc	r1, r23
    3c82:	18 06       	cpc	r1, r24
    3c84:	99 1f       	adc	r25, r25
    3c86:	f1 cf       	rjmp	.-30     	; 0x3c6a <__fp_splitA+0xc>
    3c88:	86 95       	lsr	r24
    3c8a:	71 05       	cpc	r23, r1
    3c8c:	61 05       	cpc	r22, r1
    3c8e:	08 94       	sec
    3c90:	08 95       	ret

00003c92 <__udivmodhi4>:
    3c92:	aa 1b       	sub	r26, r26
    3c94:	bb 1b       	sub	r27, r27
    3c96:	51 e1       	ldi	r21, 0x11	; 17
    3c98:	07 c0       	rjmp	.+14     	; 0x3ca8 <__udivmodhi4_ep>

00003c9a <__udivmodhi4_loop>:
    3c9a:	aa 1f       	adc	r26, r26
    3c9c:	bb 1f       	adc	r27, r27
    3c9e:	a6 17       	cp	r26, r22
    3ca0:	b7 07       	cpc	r27, r23
    3ca2:	10 f0       	brcs	.+4      	; 0x3ca8 <__udivmodhi4_ep>
    3ca4:	a6 1b       	sub	r26, r22
    3ca6:	b7 0b       	sbc	r27, r23

00003ca8 <__udivmodhi4_ep>:
    3ca8:	88 1f       	adc	r24, r24
    3caa:	99 1f       	adc	r25, r25
    3cac:	5a 95       	dec	r21
    3cae:	a9 f7       	brne	.-22     	; 0x3c9a <__udivmodhi4_loop>
    3cb0:	80 95       	com	r24
    3cb2:	90 95       	com	r25
    3cb4:	bc 01       	movw	r22, r24
    3cb6:	cd 01       	movw	r24, r26
    3cb8:	08 95       	ret

00003cba <_exit>:
    3cba:	f8 94       	cli

00003cbc <__stop_program>:
    3cbc:	ff cf       	rjmp	.-2      	; 0x3cbc <__stop_program>
