
DOOR-LOCK-PROJECT_CTRL-ECU_HOSA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004638  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013e  00800060  00004638  000046cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  0080019e  0080019e  0000480a  2**0
                  ALLOC
  3 .stab         00006738  00000000  00000000  0000480c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003616  00000000  00000000  0000af44  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000e55a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000e71a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000e92e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  00010f40  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0001240e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0001371c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  000138fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  00013c03  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001461d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 ba 1e 	jmp	0x3d74	; 0x3d74 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e3       	ldi	r30, 0x38	; 56
      68:	f6 e4       	ldi	r31, 0x46	; 70
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 39       	cpi	r26, 0x9E	; 158
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e9       	ldi	r26, 0x9E	; 158
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3a       	cpi	r26, 0xAE	; 174
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <main>
      8a:	0c 94 1a 23 	jmp	0x4634	; 0x4634 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 1d 21 	jmp	0x423a	; 0x423a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e8       	ldi	r26, 0x8F	; 143
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 39 21 	jmp	0x4272	; 0x4272 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 29 21 	jmp	0x4252	; 0x4252 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 45 21 	jmp	0x428a	; 0x428a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 29 21 	jmp	0x4252	; 0x4252 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 45 21 	jmp	0x428a	; 0x428a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 1d 21 	jmp	0x423a	; 0x423a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e8       	ldi	r24, 0x8F	; 143
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 39 21 	jmp	0x4272	; 0x4272 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 25 21 	jmp	0x424a	; 0x424a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6f e8       	ldi	r22, 0x8F	; 143
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 41 21 	jmp	0x4282	; 0x4282 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 29 21 	jmp	0x4252	; 0x4252 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 45 21 	jmp	0x428a	; 0x428a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 29 21 	jmp	0x4252	; 0x4252 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 45 21 	jmp	0x428a	; 0x428a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 29 21 	jmp	0x4252	; 0x4252 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 45 21 	jmp	0x428a	; 0x428a <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 26 21 	jmp	0x424c	; 0x424c <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 42 21 	jmp	0x4284	; 0x4284 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 2d 21 	jmp	0x425a	; 0x425a <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 49 21 	jmp	0x4292	; 0x4292 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 25 21 	jmp	0x424a	; 0x424a <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 41 21 	jmp	0x4282	; 0x4282 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e9 56       	subi	r30, 0x69	; 105
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <USART_Init>:


// Initializes and enables the USART Module to start functionality
//void USART_Init(uint32 baudRate)

void USART_Init(const USART_ConfigType *USART_ConfigPtr) {
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
     ef2:	60 97       	sbiw	r28, 0x10	; 16
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	f8 94       	cli
     ef8:	de bf       	out	0x3e, r29	; 62
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	cd bf       	out	0x3d, r28	; 61
     efe:	98 87       	std	Y+8, r25	; 0x08
     f00:	8f 83       	std	Y+7, r24	; 0x07
	CLR_BIT(UCSRC, UCSZ2);
	SET_BIT(UCSRC, UCSZ1);
	SET_BIT(UCSRC, UCSZ0);
*/

	UCSRA |= (1 << U2X);
     f02:	ab e2       	ldi	r26, 0x2B	; 43
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	eb e2       	ldi	r30, 0x2B	; 43
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	82 60       	ori	r24, 0x02	; 2
     f0e:	8c 93       	st	X, r24
	UCSRB |= (1 << TXEN) | (1 << RXEN);
     f10:	aa e2       	ldi	r26, 0x2A	; 42
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	ea e2       	ldi	r30, 0x2A	; 42
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	88 61       	ori	r24, 0x18	; 24
     f1c:	8c 93       	st	X, r24
	UCSRC |= (1 << URSEL);
     f1e:	a0 e4       	ldi	r26, 0x40	; 64
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e0 e4       	ldi	r30, 0x40	; 64
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	80 68       	ori	r24, 0x80	; 128
     f2a:	8c 93       	st	X, r24

	switch (USART_ConfigPtr -> bitData) {
     f2c:	ef 81       	ldd	r30, Y+7	; 0x07
     f2e:	f8 85       	ldd	r31, Y+8	; 0x08
     f30:	80 81       	ld	r24, Z
     f32:	28 2f       	mov	r18, r24
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	38 8b       	std	Y+16, r19	; 0x10
     f38:	2f 87       	std	Y+15, r18	; 0x0f
     f3a:	8f 85       	ldd	r24, Y+15	; 0x0f
     f3c:	98 89       	ldd	r25, Y+16	; 0x10
     f3e:	82 30       	cpi	r24, 0x02	; 2
     f40:	91 05       	cpc	r25, r1
     f42:	49 f1       	breq	.+82     	; 0xf96 <USART_Init+0xac>
     f44:	2f 85       	ldd	r18, Y+15	; 0x0f
     f46:	38 89       	ldd	r19, Y+16	; 0x10
     f48:	23 30       	cpi	r18, 0x03	; 3
     f4a:	31 05       	cpc	r19, r1
     f4c:	54 f4       	brge	.+20     	; 0xf62 <USART_Init+0x78>
     f4e:	8f 85       	ldd	r24, Y+15	; 0x0f
     f50:	98 89       	ldd	r25, Y+16	; 0x10
     f52:	00 97       	sbiw	r24, 0x00	; 0
     f54:	89 f0       	breq	.+34     	; 0xf78 <USART_Init+0x8e>
     f56:	2f 85       	ldd	r18, Y+15	; 0x0f
     f58:	38 89       	ldd	r19, Y+16	; 0x10
     f5a:	21 30       	cpi	r18, 0x01	; 1
     f5c:	31 05       	cpc	r19, r1
     f5e:	99 f0       	breq	.+38     	; 0xf86 <USART_Init+0x9c>
     f60:	32 c0       	rjmp	.+100    	; 0xfc6 <USART_Init+0xdc>
     f62:	8f 85       	ldd	r24, Y+15	; 0x0f
     f64:	98 89       	ldd	r25, Y+16	; 0x10
     f66:	83 30       	cpi	r24, 0x03	; 3
     f68:	91 05       	cpc	r25, r1
     f6a:	e9 f0       	breq	.+58     	; 0xfa6 <USART_Init+0xbc>
     f6c:	2f 85       	ldd	r18, Y+15	; 0x0f
     f6e:	38 89       	ldd	r19, Y+16	; 0x10
     f70:	27 30       	cpi	r18, 0x07	; 7
     f72:	31 05       	cpc	r19, r1
     f74:	01 f1       	breq	.+64     	; 0xfb6 <USART_Init+0xcc>
     f76:	27 c0       	rjmp	.+78     	; 0xfc6 <USART_Init+0xdc>
		case	USART_5_BIT:
			UCSRC &= ~((1 << UCSZ1) & (1 << UCSZ0) & (1 << UCSZ2));
     f78:	e0 e4       	ldi	r30, 0x40	; 64
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	a0 e4       	ldi	r26, 0x40	; 64
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	8c 91       	ld	r24, X
     f82:	80 83       	st	Z, r24
     f84:	27 c0       	rjmp	.+78     	; 0xfd4 <USART_Init+0xea>
		break;
		case	USART_6_BIT:
			UCSRC |= (1 << UCSZ0);
     f86:	a0 e4       	ldi	r26, 0x40	; 64
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	e0 e4       	ldi	r30, 0x40	; 64
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	82 60       	ori	r24, 0x02	; 2
     f92:	8c 93       	st	X, r24
     f94:	1f c0       	rjmp	.+62     	; 0xfd4 <USART_Init+0xea>
		break;
		case	USART_7_BIT:
			UCSRC |= (1 << UCSZ1);
     f96:	a0 e4       	ldi	r26, 0x40	; 64
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e0 e4       	ldi	r30, 0x40	; 64
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	84 60       	ori	r24, 0x04	; 4
     fa2:	8c 93       	st	X, r24
     fa4:	17 c0       	rjmp	.+46     	; 0xfd4 <USART_Init+0xea>
		break;
		case	USART_8_BIT:
			UCSRC |= (1 << UCSZ0) | (1 << UCSZ1);
     fa6:	a0 e4       	ldi	r26, 0x40	; 64
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	e0 e4       	ldi	r30, 0x40	; 64
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	86 60       	ori	r24, 0x06	; 6
     fb2:	8c 93       	st	X, r24
     fb4:	0f c0       	rjmp	.+30     	; 0xfd4 <USART_Init+0xea>
		break;
		case	USART_9_BIT:
			UCSRC |= (1 << UCSZ0) | (1 << UCSZ1) | (1 << UCSZ2);
     fb6:	a0 e4       	ldi	r26, 0x40	; 64
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	e0 e4       	ldi	r30, 0x40	; 64
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	86 60       	ori	r24, 0x06	; 6
     fc2:	8c 93       	st	X, r24
     fc4:	07 c0       	rjmp	.+14     	; 0xfd4 <USART_Init+0xea>
		break;
		default:
			UCSRC |= (1 << UCSZ0) | (1 << UCSZ1);
     fc6:	a0 e4       	ldi	r26, 0x40	; 64
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	e0 e4       	ldi	r30, 0x40	; 64
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	86 60       	ori	r24, 0x06	; 6
     fd2:	8c 93       	st	X, r24
		break;
	}

	switch (USART_ConfigPtr -> parity) {
     fd4:	ef 81       	ldd	r30, Y+7	; 0x07
     fd6:	f8 85       	ldd	r31, Y+8	; 0x08
     fd8:	81 81       	ldd	r24, Z+1	; 0x01
     fda:	28 2f       	mov	r18, r24
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	3e 87       	std	Y+14, r19	; 0x0e
     fe0:	2d 87       	std	Y+13, r18	; 0x0d
     fe2:	8d 85       	ldd	r24, Y+13	; 0x0d
     fe4:	9e 85       	ldd	r25, Y+14	; 0x0e
     fe6:	82 30       	cpi	r24, 0x02	; 2
     fe8:	91 05       	cpc	r25, r1
     fea:	81 f0       	breq	.+32     	; 0x100c <USART_Init+0x122>
     fec:	2d 85       	ldd	r18, Y+13	; 0x0d
     fee:	3e 85       	ldd	r19, Y+14	; 0x0e
     ff0:	23 30       	cpi	r18, 0x03	; 3
     ff2:	31 05       	cpc	r19, r1
     ff4:	99 f0       	breq	.+38     	; 0x101c <USART_Init+0x132>
     ff6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ff8:	9e 85       	ldd	r25, Y+14	; 0x0e
     ffa:	00 97       	sbiw	r24, 0x00	; 0
     ffc:	b9 f4       	brne	.+46     	; 0x102c <USART_Init+0x142>
		case	USART_PARITY_DISABLED:
			UCSRC &= ~((1 << UPM0) & (1 << UPM1));
     ffe:	e0 e4       	ldi	r30, 0x40	; 64
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	a0 e4       	ldi	r26, 0x40	; 64
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	8c 91       	ld	r24, X
    1008:	80 83       	st	Z, r24
    100a:	16 c0       	rjmp	.+44     	; 0x1038 <USART_Init+0x14e>
		break;
		case	USART_PARITY_EVEN:
			UCSRC |= (1 << UPM1);
    100c:	a0 e4       	ldi	r26, 0x40	; 64
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	e0 e4       	ldi	r30, 0x40	; 64
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	80 62       	ori	r24, 0x20	; 32
    1018:	8c 93       	st	X, r24
    101a:	0e c0       	rjmp	.+28     	; 0x1038 <USART_Init+0x14e>
		break;
		case	USART_PARITY_ODD:
			UCSRC |= (1 << UPM0) | (1 << UPM1);
    101c:	a0 e4       	ldi	r26, 0x40	; 64
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	e0 e4       	ldi	r30, 0x40	; 64
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	80 63       	ori	r24, 0x30	; 48
    1028:	8c 93       	st	X, r24
    102a:	06 c0       	rjmp	.+12     	; 0x1038 <USART_Init+0x14e>
		break;
		default:
			UCSRC &= ~((1 << UPM0) & (1 << UPM1));
    102c:	e0 e4       	ldi	r30, 0x40	; 64
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	a0 e4       	ldi	r26, 0x40	; 64
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	8c 91       	ld	r24, X
    1036:	80 83       	st	Z, r24
		break;
	}

	switch (USART_ConfigPtr -> parity) {
    1038:	ef 81       	ldd	r30, Y+7	; 0x07
    103a:	f8 85       	ldd	r31, Y+8	; 0x08
    103c:	81 81       	ldd	r24, Z+1	; 0x01
    103e:	28 2f       	mov	r18, r24
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	3c 87       	std	Y+12, r19	; 0x0c
    1044:	2b 87       	std	Y+11, r18	; 0x0b
    1046:	8b 85       	ldd	r24, Y+11	; 0x0b
    1048:	9c 85       	ldd	r25, Y+12	; 0x0c
    104a:	00 97       	sbiw	r24, 0x00	; 0
    104c:	31 f0       	breq	.+12     	; 0x105a <USART_Init+0x170>
    104e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1050:	3c 85       	ldd	r19, Y+12	; 0x0c
    1052:	21 30       	cpi	r18, 0x01	; 1
    1054:	31 05       	cpc	r19, r1
    1056:	49 f0       	breq	.+18     	; 0x106a <USART_Init+0x180>
    1058:	10 c0       	rjmp	.+32     	; 0x107a <USART_Init+0x190>
		case	USART_STOP_1_BIT:
			UCSRC &= ~(1 << USBS);
    105a:	a0 e4       	ldi	r26, 0x40	; 64
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	e0 e4       	ldi	r30, 0x40	; 64
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	87 7f       	andi	r24, 0xF7	; 247
    1066:	8c 93       	st	X, r24
    1068:	0f c0       	rjmp	.+30     	; 0x1088 <USART_Init+0x19e>
		break;
		case	USART_STOP_2_BIT:
			UCSRC |= (1 << USBS);
    106a:	a0 e4       	ldi	r26, 0x40	; 64
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	e0 e4       	ldi	r30, 0x40	; 64
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	88 60       	ori	r24, 0x08	; 8
    1076:	8c 93       	st	X, r24
    1078:	07 c0       	rjmp	.+14     	; 0x1088 <USART_Init+0x19e>
		break;
		default:
			UCSRC &= ~(1 << USBS);
    107a:	a0 e4       	ldi	r26, 0x40	; 64
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	e0 e4       	ldi	r30, 0x40	; 64
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	87 7f       	andi	r24, 0xF7	; 247
    1086:	8c 93       	st	X, r24
		break;
	}

	uint32 baudrate = 0;
    1088:	1b 82       	std	Y+3, r1	; 0x03
    108a:	1c 82       	std	Y+4, r1	; 0x04
    108c:	1d 82       	std	Y+5, r1	; 0x05
    108e:	1e 82       	std	Y+6, r1	; 0x06
	switch (USART_ConfigPtr -> baudRate) {
    1090:	ef 81       	ldd	r30, Y+7	; 0x07
    1092:	f8 85       	ldd	r31, Y+8	; 0x08
    1094:	83 81       	ldd	r24, Z+3	; 0x03
    1096:	94 81       	ldd	r25, Z+4	; 0x04
    1098:	9a 87       	std	Y+10, r25	; 0x0a
    109a:	89 87       	std	Y+9, r24	; 0x09
    109c:	29 85       	ldd	r18, Y+9	; 0x09
    109e:	3a 85       	ldd	r19, Y+10	; 0x0a
    10a0:	82 e1       	ldi	r24, 0x12	; 18
    10a2:	20 3c       	cpi	r18, 0xC0	; 192
    10a4:	38 07       	cpc	r19, r24
    10a6:	19 f1       	breq	.+70     	; 0x10ee <USART_Init+0x204>
    10a8:	29 85       	ldd	r18, Y+9	; 0x09
    10aa:	3a 85       	ldd	r19, Y+10	; 0x0a
    10ac:	82 e1       	ldi	r24, 0x12	; 18
    10ae:	21 3c       	cpi	r18, 0xC1	; 193
    10b0:	38 07       	cpc	r19, r24
    10b2:	38 f4       	brcc	.+14     	; 0x10c2 <USART_Init+0x1d8>
    10b4:	29 85       	ldd	r18, Y+9	; 0x09
    10b6:	3a 85       	ldd	r19, Y+10	; 0x0a
    10b8:	89 e0       	ldi	r24, 0x09	; 9
    10ba:	20 36       	cpi	r18, 0x60	; 96
    10bc:	38 07       	cpc	r19, r24
    10be:	71 f0       	breq	.+28     	; 0x10dc <USART_Init+0x1f2>
    10c0:	31 c0       	rjmp	.+98     	; 0x1124 <USART_Init+0x23a>
    10c2:	29 85       	ldd	r18, Y+9	; 0x09
    10c4:	3a 85       	ldd	r19, Y+10	; 0x0a
    10c6:	85 e2       	ldi	r24, 0x25	; 37
    10c8:	20 38       	cpi	r18, 0x80	; 128
    10ca:	38 07       	cpc	r19, r24
    10cc:	c9 f0       	breq	.+50     	; 0x1100 <USART_Init+0x216>
    10ce:	29 85       	ldd	r18, Y+9	; 0x09
    10d0:	3a 85       	ldd	r19, Y+10	; 0x0a
    10d2:	88 e3       	ldi	r24, 0x38	; 56
    10d4:	20 34       	cpi	r18, 0x40	; 64
    10d6:	38 07       	cpc	r19, r24
    10d8:	e1 f0       	breq	.+56     	; 0x1112 <USART_Init+0x228>
    10da:	24 c0       	rjmp	.+72     	; 0x1124 <USART_Init+0x23a>
		case	USART_BAUDRATE_2400:
			baudrate = 2400;
    10dc:	80 e6       	ldi	r24, 0x60	; 96
    10de:	99 e0       	ldi	r25, 0x09	; 9
    10e0:	a0 e0       	ldi	r26, 0x00	; 0
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	8b 83       	std	Y+3, r24	; 0x03
    10e6:	9c 83       	std	Y+4, r25	; 0x04
    10e8:	ad 83       	std	Y+5, r26	; 0x05
    10ea:	be 83       	std	Y+6, r27	; 0x06
    10ec:	23 c0       	rjmp	.+70     	; 0x1134 <USART_Init+0x24a>
		break;
		case	USART_BAUDRATE_4800:
			baudrate = 4800;
    10ee:	80 ec       	ldi	r24, 0xC0	; 192
    10f0:	92 e1       	ldi	r25, 0x12	; 18
    10f2:	a0 e0       	ldi	r26, 0x00	; 0
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	8b 83       	std	Y+3, r24	; 0x03
    10f8:	9c 83       	std	Y+4, r25	; 0x04
    10fa:	ad 83       	std	Y+5, r26	; 0x05
    10fc:	be 83       	std	Y+6, r27	; 0x06
    10fe:	1a c0       	rjmp	.+52     	; 0x1134 <USART_Init+0x24a>
		break;
		case	USART_BAUDRATE_9600:
			baudrate = 9600;
    1100:	80 e8       	ldi	r24, 0x80	; 128
    1102:	95 e2       	ldi	r25, 0x25	; 37
    1104:	a0 e0       	ldi	r26, 0x00	; 0
    1106:	b0 e0       	ldi	r27, 0x00	; 0
    1108:	8b 83       	std	Y+3, r24	; 0x03
    110a:	9c 83       	std	Y+4, r25	; 0x04
    110c:	ad 83       	std	Y+5, r26	; 0x05
    110e:	be 83       	std	Y+6, r27	; 0x06
    1110:	11 c0       	rjmp	.+34     	; 0x1134 <USART_Init+0x24a>
		break;
		case	USART_BAUDRATE_14400:
			baudrate = 14400;
    1112:	80 e4       	ldi	r24, 0x40	; 64
    1114:	98 e3       	ldi	r25, 0x38	; 56
    1116:	a0 e0       	ldi	r26, 0x00	; 0
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	8b 83       	std	Y+3, r24	; 0x03
    111c:	9c 83       	std	Y+4, r25	; 0x04
    111e:	ad 83       	std	Y+5, r26	; 0x05
    1120:	be 83       	std	Y+6, r27	; 0x06
    1122:	08 c0       	rjmp	.+16     	; 0x1134 <USART_Init+0x24a>
		break;
		default:
			baudrate = 9600;
    1124:	80 e8       	ldi	r24, 0x80	; 128
    1126:	95 e2       	ldi	r25, 0x25	; 37
    1128:	a0 e0       	ldi	r26, 0x00	; 0
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	8b 83       	std	Y+3, r24	; 0x03
    112e:	9c 83       	std	Y+4, r25	; 0x04
    1130:	ad 83       	std	Y+5, r26	; 0x05
    1132:	be 83       	std	Y+6, r27	; 0x06

	// UBBRH = 0;
	// UBBRL = 207;
	// (0000) (1100 1111) 12 bits, (0000) is for UBBRH, (1100 1111) if for UBBRL

	uint16 UBBR_Value = 0;
    1134:	1a 82       	std	Y+2, r1	; 0x02
    1136:	19 82       	std	Y+1, r1	; 0x01
	UBBR_Value = (uint16) ( ( (F_CPU) / (8 * (baudrate) * 8UL) ) - 1 );
    1138:	8b 81       	ldd	r24, Y+3	; 0x03
    113a:	9c 81       	ldd	r25, Y+4	; 0x04
    113c:	ad 81       	ldd	r26, Y+5	; 0x05
    113e:	be 81       	ldd	r27, Y+6	; 0x06
    1140:	88 0f       	add	r24, r24
    1142:	99 1f       	adc	r25, r25
    1144:	aa 1f       	adc	r26, r26
    1146:	bb 1f       	adc	r27, r27
    1148:	88 0f       	add	r24, r24
    114a:	99 1f       	adc	r25, r25
    114c:	aa 1f       	adc	r26, r26
    114e:	bb 1f       	adc	r27, r27
    1150:	88 0f       	add	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	aa 1f       	adc	r26, r26
    1156:	bb 1f       	adc	r27, r27
    1158:	88 0f       	add	r24, r24
    115a:	99 1f       	adc	r25, r25
    115c:	aa 1f       	adc	r26, r26
    115e:	bb 1f       	adc	r27, r27
    1160:	88 0f       	add	r24, r24
    1162:	99 1f       	adc	r25, r25
    1164:	aa 1f       	adc	r26, r26
    1166:	bb 1f       	adc	r27, r27
    1168:	88 0f       	add	r24, r24
    116a:	99 1f       	adc	r25, r25
    116c:	aa 1f       	adc	r26, r26
    116e:	bb 1f       	adc	r27, r27
    1170:	9c 01       	movw	r18, r24
    1172:	ad 01       	movw	r20, r26
    1174:	80 e0       	ldi	r24, 0x00	; 0
    1176:	92 e1       	ldi	r25, 0x12	; 18
    1178:	aa e7       	ldi	r26, 0x7A	; 122
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	bc 01       	movw	r22, r24
    117e:	cd 01       	movw	r24, r26
    1180:	0e 94 fb 20 	call	0x41f6	; 0x41f6 <__udivmodsi4>
    1184:	da 01       	movw	r26, r20
    1186:	c9 01       	movw	r24, r18
    1188:	01 97       	sbiw	r24, 0x01	; 1
    118a:	9a 83       	std	Y+2, r25	; 0x02
    118c:	89 83       	std	Y+1, r24	; 0x01
	UBRRH = UBBR_Value >> 8;
    118e:	e0 e4       	ldi	r30, 0x40	; 64
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	89 81       	ldd	r24, Y+1	; 0x01
    1194:	9a 81       	ldd	r25, Y+2	; 0x02
    1196:	89 2f       	mov	r24, r25
    1198:	99 27       	eor	r25, r25
    119a:	80 83       	st	Z, r24
	// Because I want the 4 Zeroes in it

	UBRRL = UBBR_Value;
    119c:	e9 e2       	ldi	r30, 0x29	; 41
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	89 81       	ldd	r24, Y+1	; 0x01
    11a2:	80 83       	st	Z, r24
	// Because I want the actual value

}
    11a4:	60 96       	adiw	r28, 0x10	; 16
    11a6:	0f b6       	in	r0, 0x3f	; 63
    11a8:	f8 94       	cli
    11aa:	de bf       	out	0x3e, r29	; 62
    11ac:	0f be       	out	0x3f, r0	; 63
    11ae:	cd bf       	out	0x3d, r28	; 61
    11b0:	cf 91       	pop	r28
    11b2:	df 91       	pop	r29
    11b4:	08 95       	ret

000011b6 <USART_sendByte>:


// Responsible for the USART to send a byte
void USART_sendByte(const uint8 data) {
    11b6:	df 93       	push	r29
    11b8:	cf 93       	push	r28
    11ba:	0f 92       	push	r0
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
    11c0:	89 83       	std	Y+1, r24	; 0x01
	  *  Bit 5 – UDRE: USART Data Register Empty
	  *
	  *  UDRE flag is set when the TX Buffer (UDR) is empty and ready
	  *  for transmitting a new byte waiting untill this flag is set to '1'
	  */
	while(BIT_IS_CLR(UCSRA, UDRE)) {
    11c2:	eb e2       	ldi	r30, 0x2B	; 43
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	88 2f       	mov	r24, r24
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	80 72       	andi	r24, 0x20	; 32
    11ce:	90 70       	andi	r25, 0x00	; 0
    11d0:	00 97       	sbiw	r24, 0x00	; 0
    11d2:	b9 f3       	breq	.-18     	; 0x11c2 <USART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    11d4:	ec e2       	ldi	r30, 0x2C	; 44
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	89 81       	ldd	r24, Y+1	; 0x01
    11da:	80 83       	st	Z, r24

	} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	// This is waiting for the flag to be set to '0' to know that I received data
	*******************************************************************/
}
    11dc:	0f 90       	pop	r0
    11de:	cf 91       	pop	r28
    11e0:	df 91       	pop	r29
    11e2:	08 95       	ret

000011e4 <USART_receiveByte>:


// Responsible for the USART to receive a byte
uint8 USART_receiveByte(void) {
    11e4:	df 93       	push	r29
    11e6:	cf 93       	push	r28
    11e8:	cd b7       	in	r28, 0x3d	; 61
    11ea:	de b7       	in	r29, 0x3e	; 62
	/* UCSRA - USART Control and Status Register A
	  *  Bit 7 – RXC: USART Receive Complete, when it receives data, the flag = 0
	  */
	while ( BIT_IS_CLR(UCSRA, RXC) );
    11ec:	eb e2       	ldi	r30, 0x2B	; 43
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	88 23       	and	r24, r24
    11f4:	dc f7       	brge	.-10     	; 0x11ec <USART_receiveByte+0x8>
	// This is waiting for the flag to be set to '0' to know that I received data

	return UDR; // When reading
    11f6:	ec e2       	ldi	r30, 0x2C	; 44
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
}
    11fc:	cf 91       	pop	r28
    11fe:	df 91       	pop	r29
    1200:	08 95       	ret

00001202 <USART_sendString>:


// Responsible for the USART to send an array of bytes, a string
void USART_sendString(const uint8 *str) {
    1202:	df 93       	push	r29
    1204:	cf 93       	push	r28
    1206:	00 d0       	rcall	.+0      	; 0x1208 <USART_sendString+0x6>
    1208:	0f 92       	push	r0
    120a:	cd b7       	in	r28, 0x3d	; 61
    120c:	de b7       	in	r29, 0x3e	; 62
    120e:	9b 83       	std	Y+3, r25	; 0x03
    1210:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1212:	19 82       	std	Y+1, r1	; 0x01
    1214:	0e c0       	rjmp	.+28     	; 0x1232 <USART_sendString+0x30>
	while (str[i] != '\0') {
		USART_sendByte(str[i]);
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	8a 81       	ldd	r24, Y+2	; 0x02
    121e:	9b 81       	ldd	r25, Y+3	; 0x03
    1220:	fc 01       	movw	r30, r24
    1222:	e2 0f       	add	r30, r18
    1224:	f3 1f       	adc	r31, r19
    1226:	80 81       	ld	r24, Z
    1228:	0e 94 db 08 	call	0x11b6	; 0x11b6 <USART_sendByte>
		i++;
    122c:	89 81       	ldd	r24, Y+1	; 0x01
    122e:	8f 5f       	subi	r24, 0xFF	; 255
    1230:	89 83       	std	Y+1, r24	; 0x01


// Responsible for the USART to send an array of bytes, a string
void USART_sendString(const uint8 *str) {
	uint8 i = 0;
	while (str[i] != '\0') {
    1232:	89 81       	ldd	r24, Y+1	; 0x01
    1234:	28 2f       	mov	r18, r24
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	8a 81       	ldd	r24, Y+2	; 0x02
    123a:	9b 81       	ldd	r25, Y+3	; 0x03
    123c:	fc 01       	movw	r30, r24
    123e:	e2 0f       	add	r30, r18
    1240:	f3 1f       	adc	r31, r19
    1242:	80 81       	ld	r24, Z
    1244:	88 23       	and	r24, r24
    1246:	39 f7       	brne	.-50     	; 0x1216 <USART_sendString+0x14>
		USART_sendByte(str[i]);
		i++;
	}
}
    1248:	0f 90       	pop	r0
    124a:	0f 90       	pop	r0
    124c:	0f 90       	pop	r0
    124e:	cf 91       	pop	r28
    1250:	df 91       	pop	r29
    1252:	08 95       	ret

00001254 <USART_receiveString>:


// Responsible for the USART to receive an array of bytes, a string
void USART_receiveString(uint8 *str) {
    1254:	0f 93       	push	r16
    1256:	1f 93       	push	r17
    1258:	df 93       	push	r29
    125a:	cf 93       	push	r28
    125c:	00 d0       	rcall	.+0      	; 0x125e <USART_receiveString+0xa>
    125e:	0f 92       	push	r0
    1260:	cd b7       	in	r28, 0x3d	; 61
    1262:	de b7       	in	r29, 0x3e	; 62
    1264:	9b 83       	std	Y+3, r25	; 0x03
    1266:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1268:	19 82       	std	Y+1, r1	; 0x01
	str[i] = USART_receiveByte();
    126a:	89 81       	ldd	r24, Y+1	; 0x01
    126c:	28 2f       	mov	r18, r24
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	8a 81       	ldd	r24, Y+2	; 0x02
    1272:	9b 81       	ldd	r25, Y+3	; 0x03
    1274:	8c 01       	movw	r16, r24
    1276:	02 0f       	add	r16, r18
    1278:	13 1f       	adc	r17, r19
    127a:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <USART_receiveByte>
    127e:	f8 01       	movw	r30, r16
    1280:	80 83       	st	Z, r24
    1282:	0f c0       	rjmp	.+30     	; 0x12a2 <USART_receiveString+0x4e>

	while (str[i] != '#') {
		i++;
    1284:	89 81       	ldd	r24, Y+1	; 0x01
    1286:	8f 5f       	subi	r24, 0xFF	; 255
    1288:	89 83       	std	Y+1, r24	; 0x01
		str[i] = USART_receiveByte();
    128a:	89 81       	ldd	r24, Y+1	; 0x01
    128c:	28 2f       	mov	r18, r24
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	8a 81       	ldd	r24, Y+2	; 0x02
    1292:	9b 81       	ldd	r25, Y+3	; 0x03
    1294:	8c 01       	movw	r16, r24
    1296:	02 0f       	add	r16, r18
    1298:	13 1f       	adc	r17, r19
    129a:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <USART_receiveByte>
    129e:	f8 01       	movw	r30, r16
    12a0:	80 83       	st	Z, r24
// Responsible for the USART to receive an array of bytes, a string
void USART_receiveString(uint8 *str) {
	uint8 i = 0;
	str[i] = USART_receiveByte();

	while (str[i] != '#') {
    12a2:	89 81       	ldd	r24, Y+1	; 0x01
    12a4:	28 2f       	mov	r18, r24
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	8a 81       	ldd	r24, Y+2	; 0x02
    12aa:	9b 81       	ldd	r25, Y+3	; 0x03
    12ac:	fc 01       	movw	r30, r24
    12ae:	e2 0f       	add	r30, r18
    12b0:	f3 1f       	adc	r31, r19
    12b2:	80 81       	ld	r24, Z
    12b4:	83 32       	cpi	r24, 0x23	; 35
    12b6:	31 f7       	brne	.-52     	; 0x1284 <USART_receiveString+0x30>
		i++;
		str[i] = USART_receiveByte();
	}
	str[i] = '\0'; // replacing the '#' with '\0'
    12b8:	89 81       	ldd	r24, Y+1	; 0x01
    12ba:	28 2f       	mov	r18, r24
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	8a 81       	ldd	r24, Y+2	; 0x02
    12c0:	9b 81       	ldd	r25, Y+3	; 0x03
    12c2:	fc 01       	movw	r30, r24
    12c4:	e2 0f       	add	r30, r18
    12c6:	f3 1f       	adc	r31, r19
    12c8:	10 82       	st	Z, r1
}
    12ca:	0f 90       	pop	r0
    12cc:	0f 90       	pop	r0
    12ce:	0f 90       	pop	r0
    12d0:	cf 91       	pop	r28
    12d2:	df 91       	pop	r29
    12d4:	1f 91       	pop	r17
    12d6:	0f 91       	pop	r16
    12d8:	08 95       	ret

000012da <Timer0_Init>:

/*******************************************************************************
 *                              					Module Implementation                           					  	  *
 *******************************************************************************/

void Timer0_Init(const Timer_ConfigType* TIMER0_ConfigPtr) {
    12da:	df 93       	push	r29
    12dc:	cf 93       	push	r28
    12de:	00 d0       	rcall	.+0      	; 0x12e0 <Timer0_Init+0x6>
    12e0:	00 d0       	rcall	.+0      	; 0x12e2 <Timer0_Init+0x8>
    12e2:	00 d0       	rcall	.+0      	; 0x12e4 <Timer0_Init+0xa>
    12e4:	cd b7       	in	r28, 0x3d	; 61
    12e6:	de b7       	in	r29, 0x3e	; 62
    12e8:	9a 83       	std	Y+2, r25	; 0x02
    12ea:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 = 0x00;
    12ec:	e3 e5       	ldi	r30, 0x53	; 83
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	10 82       	st	Z, r1
	TCNT0 = 0x00;
    12f2:	e2 e5       	ldi	r30, 0x52	; 82
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	10 82       	st	Z, r1

	switch (TIMER0_ConfigPtr -> prescaler) {
    12f8:	e9 81       	ldd	r30, Y+1	; 0x01
    12fa:	fa 81       	ldd	r31, Y+2	; 0x02
    12fc:	24 81       	ldd	r18, Z+4	; 0x04
    12fe:	35 81       	ldd	r19, Z+5	; 0x05
    1300:	3e 83       	std	Y+6, r19	; 0x06
    1302:	2d 83       	std	Y+5, r18	; 0x05
    1304:	8d 81       	ldd	r24, Y+5	; 0x05
    1306:	9e 81       	ldd	r25, Y+6	; 0x06
    1308:	80 34       	cpi	r24, 0x40	; 64
    130a:	91 05       	cpc	r25, r1
    130c:	61 f1       	breq	.+88     	; 0x1366 <Timer0_Init+0x8c>
    130e:	2d 81       	ldd	r18, Y+5	; 0x05
    1310:	3e 81       	ldd	r19, Y+6	; 0x06
    1312:	21 34       	cpi	r18, 0x41	; 65
    1314:	31 05       	cpc	r19, r1
    1316:	58 f4       	brcc	.+22     	; 0x132e <Timer0_Init+0x54>
    1318:	8d 81       	ldd	r24, Y+5	; 0x05
    131a:	9e 81       	ldd	r25, Y+6	; 0x06
    131c:	81 30       	cpi	r24, 0x01	; 1
    131e:	91 05       	cpc	r25, r1
    1320:	91 f1       	breq	.+100    	; 0x1386 <Timer0_Init+0xac>
    1322:	2d 81       	ldd	r18, Y+5	; 0x05
    1324:	3e 81       	ldd	r19, Y+6	; 0x06
    1326:	28 30       	cpi	r18, 0x08	; 8
    1328:	31 05       	cpc	r19, r1
    132a:	29 f1       	breq	.+74     	; 0x1376 <Timer0_Init+0x9c>
    132c:	34 c0       	rjmp	.+104    	; 0x1396 <Timer0_Init+0xbc>
    132e:	8d 81       	ldd	r24, Y+5	; 0x05
    1330:	9e 81       	ldd	r25, Y+6	; 0x06
    1332:	21 e0       	ldi	r18, 0x01	; 1
    1334:	80 30       	cpi	r24, 0x00	; 0
    1336:	92 07       	cpc	r25, r18
    1338:	71 f0       	breq	.+28     	; 0x1356 <Timer0_Init+0x7c>
    133a:	8d 81       	ldd	r24, Y+5	; 0x05
    133c:	9e 81       	ldd	r25, Y+6	; 0x06
    133e:	24 e0       	ldi	r18, 0x04	; 4
    1340:	80 30       	cpi	r24, 0x00	; 0
    1342:	92 07       	cpc	r25, r18
    1344:	41 f5       	brne	.+80     	; 0x1396 <Timer0_Init+0xbc>
		case	TIMER_PRESCALER_1024:
			TCCR0 |= (1 << CS00) | (1 << CS02);
    1346:	a3 e5       	ldi	r26, 0x53	; 83
    1348:	b0 e0       	ldi	r27, 0x00	; 0
    134a:	e3 e5       	ldi	r30, 0x53	; 83
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	85 60       	ori	r24, 0x05	; 5
    1352:	8c 93       	st	X, r24
    1354:	27 c0       	rjmp	.+78     	; 0x13a4 <Timer0_Init+0xca>
		break;
		case	TIMER_PRESCALER_256:
			TCCR0 |= (1 << CS02);
    1356:	a3 e5       	ldi	r26, 0x53	; 83
    1358:	b0 e0       	ldi	r27, 0x00	; 0
    135a:	e3 e5       	ldi	r30, 0x53	; 83
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	80 81       	ld	r24, Z
    1360:	84 60       	ori	r24, 0x04	; 4
    1362:	8c 93       	st	X, r24
    1364:	1f c0       	rjmp	.+62     	; 0x13a4 <Timer0_Init+0xca>
		break;
		case	TIMER_PRESCALER_64:
			TCCR0 |= (1 << CS00) | (1 << CS01);
    1366:	a3 e5       	ldi	r26, 0x53	; 83
    1368:	b0 e0       	ldi	r27, 0x00	; 0
    136a:	e3 e5       	ldi	r30, 0x53	; 83
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	83 60       	ori	r24, 0x03	; 3
    1372:	8c 93       	st	X, r24
    1374:	17 c0       	rjmp	.+46     	; 0x13a4 <Timer0_Init+0xca>
		break;
		case	TIMER_PRESCALER_8:
			TCCR0 |= (1 << CS01);
    1376:	a3 e5       	ldi	r26, 0x53	; 83
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	e3 e5       	ldi	r30, 0x53	; 83
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	82 60       	ori	r24, 0x02	; 2
    1382:	8c 93       	st	X, r24
    1384:	0f c0       	rjmp	.+30     	; 0x13a4 <Timer0_Init+0xca>
		break;
		case	TIMER_PRESCALER_1:
			TCCR0 |= (1 << CS00);
    1386:	a3 e5       	ldi	r26, 0x53	; 83
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	e3 e5       	ldi	r30, 0x53	; 83
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	81 60       	ori	r24, 0x01	; 1
    1392:	8c 93       	st	X, r24
    1394:	07 c0       	rjmp	.+14     	; 0x13a4 <Timer0_Init+0xca>
		break;
		default:
			TCCR0 |= (1 << CS00) | (1 << CS02);
    1396:	a3 e5       	ldi	r26, 0x53	; 83
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	e3 e5       	ldi	r30, 0x53	; 83
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	85 60       	ori	r24, 0x05	; 5
    13a2:	8c 93       	st	X, r24
		break;
	}

	switch (TIMER0_ConfigPtr -> mode) {
    13a4:	e9 81       	ldd	r30, Y+1	; 0x01
    13a6:	fa 81       	ldd	r31, Y+2	; 0x02
    13a8:	86 81       	ldd	r24, Z+6	; 0x06
    13aa:	28 2f       	mov	r18, r24
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	3c 83       	std	Y+4, r19	; 0x04
    13b0:	2b 83       	std	Y+3, r18	; 0x03
    13b2:	8b 81       	ldd	r24, Y+3	; 0x03
    13b4:	9c 81       	ldd	r25, Y+4	; 0x04
    13b6:	81 30       	cpi	r24, 0x01	; 1
    13b8:	91 05       	cpc	r25, r1
    13ba:	c1 f0       	breq	.+48     	; 0x13ec <Timer0_Init+0x112>
    13bc:	2b 81       	ldd	r18, Y+3	; 0x03
    13be:	3c 81       	ldd	r19, Y+4	; 0x04
    13c0:	22 30       	cpi	r18, 0x02	; 2
    13c2:	31 05       	cpc	r19, r1
    13c4:	11 f1       	breq	.+68     	; 0x140a <Timer0_Init+0x130>
    13c6:	8b 81       	ldd	r24, Y+3	; 0x03
    13c8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ca:	00 97       	sbiw	r24, 0x00	; 0
    13cc:	69 f5       	brne	.+90     	; 0x1428 <Timer0_Init+0x14e>
		case	TIMER_NORMAL_MODE:
			TCCR0 |= (1 << FOC0);
    13ce:	a3 e5       	ldi	r26, 0x53	; 83
    13d0:	b0 e0       	ldi	r27, 0x00	; 0
    13d2:	e3 e5       	ldi	r30, 0x53	; 83
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	80 68       	ori	r24, 0x80	; 128
    13da:	8c 93       	st	X, r24
			#if (INTERRUPT_MODE == INTERRUPT_ENABLE)
				SET_BIT(TIMSK, TOIE0);
				SET_BIT(SREG, 7); // Bit 7 – i bit: Global Interrupt Enable
			#elif (INTERRUPT_MODE == INTERRUPT_DISABLE)
				CLR_BIT(TIMSK, TOIE0);
    13dc:	a9 e5       	ldi	r26, 0x59	; 89
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	e9 e5       	ldi	r30, 0x59	; 89
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	8e 7f       	andi	r24, 0xFE	; 254
    13e8:	8c 93       	st	X, r24
    13ea:	2c c0       	rjmp	.+88     	; 0x1444 <Timer0_Init+0x16a>
			#endif
		break;
		case	TIMER_COMPARE_MODE:
			TCCR0 |= (1 << FOC0) | (1 << WGM01);
    13ec:	a3 e5       	ldi	r26, 0x53	; 83
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	e3 e5       	ldi	r30, 0x53	; 83
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	88 68       	ori	r24, 0x88	; 136
    13f8:	8c 93       	st	X, r24
			#if (INTERRUPT_MODE == INTERRUPT_ENABLE)
				SET_BIT(TIMSK, OCIE0);
				SET_BIT(SREG, 7); // Bit 7 – i bit: Global Interrupt Enable
			#elif (INTERRUPT_MODE == INTERRUPT_DISABLE)
				CLR_BIT(TIMSK, OCIE0);
    13fa:	a9 e5       	ldi	r26, 0x59	; 89
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	e9 e5       	ldi	r30, 0x59	; 89
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	8d 7f       	andi	r24, 0xFD	; 253
    1406:	8c 93       	st	X, r24
    1408:	1d c0       	rjmp	.+58     	; 0x1444 <Timer0_Init+0x16a>
			#elif (CTC_MODE == CTC_SET)
				TCCR0 |= (1 << COM00) | (1 << COM01);
			#endif
		break;
		case	TIMER_FASTPWM_MODE:
			TCCR0 |= (1 << WGM00) | (1 << WGM01);
    140a:	a3 e5       	ldi	r26, 0x53	; 83
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	e3 e5       	ldi	r30, 0x53	; 83
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	80 81       	ld	r24, Z
    1414:	88 64       	ori	r24, 0x48	; 72
    1416:	8c 93       	st	X, r24

			#if (FASTPWM_MODE == FASTPWM_NOINVERT)
				TCCR0 |= (1 << COM01);
    1418:	a3 e5       	ldi	r26, 0x53	; 83
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	e3 e5       	ldi	r30, 0x53	; 83
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	80 62       	ori	r24, 0x20	; 32
    1424:	8c 93       	st	X, r24
    1426:	0e c0       	rjmp	.+28     	; 0x1444 <Timer0_Init+0x16a>
			#elif (FASTPWM_MODE == FASTPWM_INVERT)
				TCCR0 |= (1 << COM00) | (1 << COM01);
			#endif
		break;
		default:
			TCCR0 |= (1 << FOC0);
    1428:	a3 e5       	ldi	r26, 0x53	; 83
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	e3 e5       	ldi	r30, 0x53	; 83
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 81       	ld	r24, Z
    1432:	80 68       	ori	r24, 0x80	; 128
    1434:	8c 93       	st	X, r24
			#if (INTERRUPT_MODE == INTERRUPT_ENABLE)
				SET_BIT(TIMSK, TOIE0);
				SET_BIT(SREG, 7); // Bit 7 – i bit: Global Interrupt Enable
			#elif (INTERRUPT_MODE == INTERRUPT_DISABLE)
				CLR_BIT(TIMSK, TOIE0);
    1436:	a9 e5       	ldi	r26, 0x59	; 89
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	e9 e5       	ldi	r30, 0x59	; 89
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	8e 7f       	andi	r24, 0xFE	; 254
    1442:	8c 93       	st	X, r24
			#endif
		break;
	}
}
    1444:	26 96       	adiw	r28, 0x06	; 6
    1446:	0f b6       	in	r0, 0x3f	; 63
    1448:	f8 94       	cli
    144a:	de bf       	out	0x3e, r29	; 62
    144c:	0f be       	out	0x3f, r0	; 63
    144e:	cd bf       	out	0x3d, r28	; 61
    1450:	cf 91       	pop	r28
    1452:	df 91       	pop	r29
    1454:	08 95       	ret

00001456 <Timer0_deInit>:


void Timer0_deInit(void) {
    1456:	df 93       	push	r29
    1458:	cf 93       	push	r28
    145a:	cd b7       	in	r28, 0x3d	; 61
    145c:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0x00;
    145e:	e3 e5       	ldi	r30, 0x53	; 83
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	10 82       	st	Z, r1
	TCNT0 = 0x00;
    1464:	e2 e5       	ldi	r30, 0x52	; 82
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	10 82       	st	Z, r1
	OCR0   = 0x00;
    146a:	ec e5       	ldi	r30, 0x5C	; 92
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	10 82       	st	Z, r1
}
    1470:	cf 91       	pop	r28
    1472:	df 91       	pop	r29
    1474:	08 95       	ret

00001476 <Timer1_Init>:

void Timer1_Init(const Timer_ConfigType* TIMER1_ConfigPtr) {
    1476:	df 93       	push	r29
    1478:	cf 93       	push	r28
    147a:	00 d0       	rcall	.+0      	; 0x147c <Timer1_Init+0x6>
    147c:	00 d0       	rcall	.+0      	; 0x147e <Timer1_Init+0x8>
    147e:	00 d0       	rcall	.+0      	; 0x1480 <Timer1_Init+0xa>
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
    1484:	9a 83       	std	Y+2, r25	; 0x02
    1486:	89 83       	std	Y+1, r24	; 0x01
	TCCR1A = 0x00;
    1488:	ef e4       	ldi	r30, 0x4F	; 79
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	10 82       	st	Z, r1
	TCCR1B = 0x00;
    148e:	ee e4       	ldi	r30, 0x4E	; 78
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	10 82       	st	Z, r1
	TCNT1 = 0x00;
    1494:	ec e4       	ldi	r30, 0x4C	; 76
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	11 82       	std	Z+1, r1	; 0x01
    149a:	10 82       	st	Z, r1

	switch (TIMER1_ConfigPtr -> prescaler) {
    149c:	e9 81       	ldd	r30, Y+1	; 0x01
    149e:	fa 81       	ldd	r31, Y+2	; 0x02
    14a0:	24 81       	ldd	r18, Z+4	; 0x04
    14a2:	35 81       	ldd	r19, Z+5	; 0x05
    14a4:	3e 83       	std	Y+6, r19	; 0x06
    14a6:	2d 83       	std	Y+5, r18	; 0x05
    14a8:	8d 81       	ldd	r24, Y+5	; 0x05
    14aa:	9e 81       	ldd	r25, Y+6	; 0x06
    14ac:	80 34       	cpi	r24, 0x40	; 64
    14ae:	91 05       	cpc	r25, r1
    14b0:	61 f1       	breq	.+88     	; 0x150a <Timer1_Init+0x94>
    14b2:	2d 81       	ldd	r18, Y+5	; 0x05
    14b4:	3e 81       	ldd	r19, Y+6	; 0x06
    14b6:	21 34       	cpi	r18, 0x41	; 65
    14b8:	31 05       	cpc	r19, r1
    14ba:	58 f4       	brcc	.+22     	; 0x14d2 <Timer1_Init+0x5c>
    14bc:	8d 81       	ldd	r24, Y+5	; 0x05
    14be:	9e 81       	ldd	r25, Y+6	; 0x06
    14c0:	81 30       	cpi	r24, 0x01	; 1
    14c2:	91 05       	cpc	r25, r1
    14c4:	91 f1       	breq	.+100    	; 0x152a <Timer1_Init+0xb4>
    14c6:	2d 81       	ldd	r18, Y+5	; 0x05
    14c8:	3e 81       	ldd	r19, Y+6	; 0x06
    14ca:	28 30       	cpi	r18, 0x08	; 8
    14cc:	31 05       	cpc	r19, r1
    14ce:	29 f1       	breq	.+74     	; 0x151a <Timer1_Init+0xa4>
    14d0:	34 c0       	rjmp	.+104    	; 0x153a <Timer1_Init+0xc4>
    14d2:	8d 81       	ldd	r24, Y+5	; 0x05
    14d4:	9e 81       	ldd	r25, Y+6	; 0x06
    14d6:	21 e0       	ldi	r18, 0x01	; 1
    14d8:	80 30       	cpi	r24, 0x00	; 0
    14da:	92 07       	cpc	r25, r18
    14dc:	71 f0       	breq	.+28     	; 0x14fa <Timer1_Init+0x84>
    14de:	8d 81       	ldd	r24, Y+5	; 0x05
    14e0:	9e 81       	ldd	r25, Y+6	; 0x06
    14e2:	24 e0       	ldi	r18, 0x04	; 4
    14e4:	80 30       	cpi	r24, 0x00	; 0
    14e6:	92 07       	cpc	r25, r18
    14e8:	41 f5       	brne	.+80     	; 0x153a <Timer1_Init+0xc4>
		case	TIMER_PRESCALER_1024:
			TCCR1B |= (1 << CS10) | (1 << CS12);
    14ea:	ae e4       	ldi	r26, 0x4E	; 78
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	ee e4       	ldi	r30, 0x4E	; 78
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	85 60       	ori	r24, 0x05	; 5
    14f6:	8c 93       	st	X, r24
    14f8:	27 c0       	rjmp	.+78     	; 0x1548 <Timer1_Init+0xd2>
		break;
		case	TIMER_PRESCALER_256:
			TCCR1B |= (1 << CS12);
    14fa:	ae e4       	ldi	r26, 0x4E	; 78
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	ee e4       	ldi	r30, 0x4E	; 78
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	84 60       	ori	r24, 0x04	; 4
    1506:	8c 93       	st	X, r24
    1508:	1f c0       	rjmp	.+62     	; 0x1548 <Timer1_Init+0xd2>
		break;
		case	TIMER_PRESCALER_64:
			TCCR1B |= (1 << CS10) | (1 << CS11);
    150a:	ae e4       	ldi	r26, 0x4E	; 78
    150c:	b0 e0       	ldi	r27, 0x00	; 0
    150e:	ee e4       	ldi	r30, 0x4E	; 78
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	83 60       	ori	r24, 0x03	; 3
    1516:	8c 93       	st	X, r24
    1518:	17 c0       	rjmp	.+46     	; 0x1548 <Timer1_Init+0xd2>
		break;
		case	TIMER_PRESCALER_8:
			TCCR1B |= (1 << CS11);
    151a:	ae e4       	ldi	r26, 0x4E	; 78
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	ee e4       	ldi	r30, 0x4E	; 78
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	82 60       	ori	r24, 0x02	; 2
    1526:	8c 93       	st	X, r24
    1528:	0f c0       	rjmp	.+30     	; 0x1548 <Timer1_Init+0xd2>
		break;
		case	TIMER_PRESCALER_1:
			TCCR1B |= (1 << CS10);
    152a:	ae e4       	ldi	r26, 0x4E	; 78
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	ee e4       	ldi	r30, 0x4E	; 78
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	81 60       	ori	r24, 0x01	; 1
    1536:	8c 93       	st	X, r24
    1538:	07 c0       	rjmp	.+14     	; 0x1548 <Timer1_Init+0xd2>
		break;
		default:
			TCCR1B |= (1 << CS10) | (1 << CS12);
    153a:	ae e4       	ldi	r26, 0x4E	; 78
    153c:	b0 e0       	ldi	r27, 0x00	; 0
    153e:	ee e4       	ldi	r30, 0x4E	; 78
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
    1544:	85 60       	ori	r24, 0x05	; 5
    1546:	8c 93       	st	X, r24
		break;
	}

	switch (TIMER1_ConfigPtr -> mode) {
    1548:	e9 81       	ldd	r30, Y+1	; 0x01
    154a:	fa 81       	ldd	r31, Y+2	; 0x02
    154c:	86 81       	ldd	r24, Z+6	; 0x06
    154e:	28 2f       	mov	r18, r24
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	3c 83       	std	Y+4, r19	; 0x04
    1554:	2b 83       	std	Y+3, r18	; 0x03
    1556:	8b 81       	ldd	r24, Y+3	; 0x03
    1558:	9c 81       	ldd	r25, Y+4	; 0x04
    155a:	81 30       	cpi	r24, 0x01	; 1
    155c:	91 05       	cpc	r25, r1
    155e:	89 f0       	breq	.+34     	; 0x1582 <Timer1_Init+0x10c>
    1560:	2b 81       	ldd	r18, Y+3	; 0x03
    1562:	3c 81       	ldd	r19, Y+4	; 0x04
    1564:	22 30       	cpi	r18, 0x02	; 2
    1566:	31 05       	cpc	r19, r1
    1568:	a1 f0       	breq	.+40     	; 0x1592 <Timer1_Init+0x11c>
    156a:	8b 81       	ldd	r24, Y+3	; 0x03
    156c:	9c 81       	ldd	r25, Y+4	; 0x04
    156e:	00 97       	sbiw	r24, 0x00	; 0
    1570:	31 f5       	brne	.+76     	; 0x15be <Timer1_Init+0x148>
		case	TIMER_NORMAL_MODE:
			TCCR1A |= (1 << FOC1A) | (1 << FOC1B);
    1572:	af e4       	ldi	r26, 0x4F	; 79
    1574:	b0 e0       	ldi	r27, 0x00	; 0
    1576:	ef e4       	ldi	r30, 0x4F	; 79
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	80 81       	ld	r24, Z
    157c:	8c 60       	ori	r24, 0x0C	; 12
    157e:	8c 93       	st	X, r24
    1580:	25 c0       	rjmp	.+74     	; 0x15cc <Timer1_Init+0x156>
		break;
		case	TIMER_COMPARE_MODE:
			TCCR1A |= (1 << FOC1A) | (1 << FOC1B) | (1 << WGM12);
    1582:	af e4       	ldi	r26, 0x4F	; 79
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	ef e4       	ldi	r30, 0x4F	; 79
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	8c 60       	ori	r24, 0x0C	; 12
    158e:	8c 93       	st	X, r24
    1590:	1d c0       	rjmp	.+58     	; 0x15cc <Timer1_Init+0x156>
			#elif (CTC_MODE == CTC_SET)
				TCCR1A |= (1 << COM1A0) | (1 << COM1B0) | (1 << COM1A1) | (1 << COM1B1);
			#endif
		break;
		case	TIMER_FASTPWM_MODE:
			TCCR1A |= (1 << WGM10) | (1 << WGM11);
    1592:	af e4       	ldi	r26, 0x4F	; 79
    1594:	b0 e0       	ldi	r27, 0x00	; 0
    1596:	ef e4       	ldi	r30, 0x4F	; 79
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	83 60       	ori	r24, 0x03	; 3
    159e:	8c 93       	st	X, r24
			TCCR1B |= (1 << WGM12) | (1 << WGM13);
    15a0:	ae e4       	ldi	r26, 0x4E	; 78
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	ee e4       	ldi	r30, 0x4E	; 78
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	88 61       	ori	r24, 0x18	; 24
    15ac:	8c 93       	st	X, r24
			#if (FASTPWM_MODE == FASTPWM_NOINVERT)
				TCCR1A |= (1 << COM1A1) | (1 << COM1B1);
    15ae:	af e4       	ldi	r26, 0x4F	; 79
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	ef e4       	ldi	r30, 0x4F	; 79
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	80 6a       	ori	r24, 0xA0	; 160
    15ba:	8c 93       	st	X, r24
    15bc:	07 c0       	rjmp	.+14     	; 0x15cc <Timer1_Init+0x156>
			#elif (FASTPWM_MODE == FASTPWM_INVERT)
				TCCR1A |= (1 << COM1A0) | (1 << COM1B0) | (1 << COM1A1) | (1 << COM1B1);
			#endif
		break;
		default:
			TCCR1A |= (1 << FOC1A) | (1 << FOC1B);
    15be:	af e4       	ldi	r26, 0x4F	; 79
    15c0:	b0 e0       	ldi	r27, 0x00	; 0
    15c2:	ef e4       	ldi	r30, 0x4F	; 79
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	80 81       	ld	r24, Z
    15c8:	8c 60       	ori	r24, 0x0C	; 12
    15ca:	8c 93       	st	X, r24
		break;
	}
}
    15cc:	26 96       	adiw	r28, 0x06	; 6
    15ce:	0f b6       	in	r0, 0x3f	; 63
    15d0:	f8 94       	cli
    15d2:	de bf       	out	0x3e, r29	; 62
    15d4:	0f be       	out	0x3f, r0	; 63
    15d6:	cd bf       	out	0x3d, r28	; 61
    15d8:	cf 91       	pop	r28
    15da:	df 91       	pop	r29
    15dc:	08 95       	ret

000015de <Timer1_deInit>:

void Timer1_deInit(void) {
    15de:	df 93       	push	r29
    15e0:	cf 93       	push	r28
    15e2:	cd b7       	in	r28, 0x3d	; 61
    15e4:	de b7       	in	r29, 0x3e	; 62
	TCCR1A	= 0x00;
    15e6:	ef e4       	ldi	r30, 0x4F	; 79
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	10 82       	st	Z, r1
	TCCR1B	= 0x00;
    15ec:	ee e4       	ldi	r30, 0x4E	; 78
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	10 82       	st	Z, r1
	TCNT1		= 0x00;
    15f2:	ec e4       	ldi	r30, 0x4C	; 76
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	11 82       	std	Z+1, r1	; 0x01
    15f8:	10 82       	st	Z, r1
	OCR1A  	= 0x00;
    15fa:	ea e4       	ldi	r30, 0x4A	; 74
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	11 82       	std	Z+1, r1	; 0x01
    1600:	10 82       	st	Z, r1
	OCR1B   	= 0x00;
    1602:	e8 e4       	ldi	r30, 0x48	; 72
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	11 82       	std	Z+1, r1	; 0x01
    1608:	10 82       	st	Z, r1
}
    160a:	cf 91       	pop	r28
    160c:	df 91       	pop	r29
    160e:	08 95       	ret

00001610 <Timer2_Init>:


void Timer2_Init(const Timer_ConfigType* TIMER2_ConfigPtr) {
    1610:	df 93       	push	r29
    1612:	cf 93       	push	r28
    1614:	00 d0       	rcall	.+0      	; 0x1616 <Timer2_Init+0x6>
    1616:	00 d0       	rcall	.+0      	; 0x1618 <Timer2_Init+0x8>
    1618:	00 d0       	rcall	.+0      	; 0x161a <Timer2_Init+0xa>
    161a:	cd b7       	in	r28, 0x3d	; 61
    161c:	de b7       	in	r29, 0x3e	; 62
    161e:	9a 83       	std	Y+2, r25	; 0x02
    1620:	89 83       	std	Y+1, r24	; 0x01
	TCCR2 = 0x00;
    1622:	e5 e4       	ldi	r30, 0x45	; 69
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	10 82       	st	Z, r1
	TCNT2 = 0x00;
    1628:	e4 e4       	ldi	r30, 0x44	; 68
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	10 82       	st	Z, r1

	switch (TIMER2_ConfigPtr -> prescaler) {
    162e:	e9 81       	ldd	r30, Y+1	; 0x01
    1630:	fa 81       	ldd	r31, Y+2	; 0x02
    1632:	24 81       	ldd	r18, Z+4	; 0x04
    1634:	35 81       	ldd	r19, Z+5	; 0x05
    1636:	3e 83       	std	Y+6, r19	; 0x06
    1638:	2d 83       	std	Y+5, r18	; 0x05
    163a:	8d 81       	ldd	r24, Y+5	; 0x05
    163c:	9e 81       	ldd	r25, Y+6	; 0x06
    163e:	80 34       	cpi	r24, 0x40	; 64
    1640:	91 05       	cpc	r25, r1
    1642:	61 f1       	breq	.+88     	; 0x169c <Timer2_Init+0x8c>
    1644:	2d 81       	ldd	r18, Y+5	; 0x05
    1646:	3e 81       	ldd	r19, Y+6	; 0x06
    1648:	21 34       	cpi	r18, 0x41	; 65
    164a:	31 05       	cpc	r19, r1
    164c:	58 f4       	brcc	.+22     	; 0x1664 <Timer2_Init+0x54>
    164e:	8d 81       	ldd	r24, Y+5	; 0x05
    1650:	9e 81       	ldd	r25, Y+6	; 0x06
    1652:	81 30       	cpi	r24, 0x01	; 1
    1654:	91 05       	cpc	r25, r1
    1656:	91 f1       	breq	.+100    	; 0x16bc <Timer2_Init+0xac>
    1658:	2d 81       	ldd	r18, Y+5	; 0x05
    165a:	3e 81       	ldd	r19, Y+6	; 0x06
    165c:	28 30       	cpi	r18, 0x08	; 8
    165e:	31 05       	cpc	r19, r1
    1660:	29 f1       	breq	.+74     	; 0x16ac <Timer2_Init+0x9c>
    1662:	34 c0       	rjmp	.+104    	; 0x16cc <Timer2_Init+0xbc>
    1664:	8d 81       	ldd	r24, Y+5	; 0x05
    1666:	9e 81       	ldd	r25, Y+6	; 0x06
    1668:	21 e0       	ldi	r18, 0x01	; 1
    166a:	80 30       	cpi	r24, 0x00	; 0
    166c:	92 07       	cpc	r25, r18
    166e:	71 f0       	breq	.+28     	; 0x168c <Timer2_Init+0x7c>
    1670:	8d 81       	ldd	r24, Y+5	; 0x05
    1672:	9e 81       	ldd	r25, Y+6	; 0x06
    1674:	24 e0       	ldi	r18, 0x04	; 4
    1676:	80 30       	cpi	r24, 0x00	; 0
    1678:	92 07       	cpc	r25, r18
    167a:	41 f5       	brne	.+80     	; 0x16cc <Timer2_Init+0xbc>
		case	TIMER_PRESCALER_1024:
			TCCR2 |= (1 << CS20) | (1 << CS22);
    167c:	a5 e4       	ldi	r26, 0x45	; 69
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	e5 e4       	ldi	r30, 0x45	; 69
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	85 60       	ori	r24, 0x05	; 5
    1688:	8c 93       	st	X, r24
    168a:	27 c0       	rjmp	.+78     	; 0x16da <Timer2_Init+0xca>
		break;
		case	TIMER_PRESCALER_256:
			TCCR2 |= (1 << CS22);
    168c:	a5 e4       	ldi	r26, 0x45	; 69
    168e:	b0 e0       	ldi	r27, 0x00	; 0
    1690:	e5 e4       	ldi	r30, 0x45	; 69
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	80 81       	ld	r24, Z
    1696:	84 60       	ori	r24, 0x04	; 4
    1698:	8c 93       	st	X, r24
    169a:	1f c0       	rjmp	.+62     	; 0x16da <Timer2_Init+0xca>
		break;
		case	TIMER_PRESCALER_64:
			TCCR2 |= (1 << CS20) | (1 << CS21);
    169c:	a5 e4       	ldi	r26, 0x45	; 69
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	e5 e4       	ldi	r30, 0x45	; 69
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	83 60       	ori	r24, 0x03	; 3
    16a8:	8c 93       	st	X, r24
    16aa:	17 c0       	rjmp	.+46     	; 0x16da <Timer2_Init+0xca>
		break;
		case	TIMER_PRESCALER_8:
			TCCR2 |= (1 << CS21);
    16ac:	a5 e4       	ldi	r26, 0x45	; 69
    16ae:	b0 e0       	ldi	r27, 0x00	; 0
    16b0:	e5 e4       	ldi	r30, 0x45	; 69
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	80 81       	ld	r24, Z
    16b6:	82 60       	ori	r24, 0x02	; 2
    16b8:	8c 93       	st	X, r24
    16ba:	0f c0       	rjmp	.+30     	; 0x16da <Timer2_Init+0xca>
		break;
		case	TIMER_PRESCALER_1:
			TCCR2 |= (1 << CS20);
    16bc:	a5 e4       	ldi	r26, 0x45	; 69
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	e5 e4       	ldi	r30, 0x45	; 69
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	81 60       	ori	r24, 0x01	; 1
    16c8:	8c 93       	st	X, r24
    16ca:	07 c0       	rjmp	.+14     	; 0x16da <Timer2_Init+0xca>
		break;
		default:
			TCCR2 |= (1 << CS20) | (1 << CS22);
    16cc:	a5 e4       	ldi	r26, 0x45	; 69
    16ce:	b0 e0       	ldi	r27, 0x00	; 0
    16d0:	e5 e4       	ldi	r30, 0x45	; 69
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	80 81       	ld	r24, Z
    16d6:	85 60       	ori	r24, 0x05	; 5
    16d8:	8c 93       	st	X, r24
		break;
	}

	switch (TIMER2_ConfigPtr -> mode) {
    16da:	e9 81       	ldd	r30, Y+1	; 0x01
    16dc:	fa 81       	ldd	r31, Y+2	; 0x02
    16de:	86 81       	ldd	r24, Z+6	; 0x06
    16e0:	28 2f       	mov	r18, r24
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	3c 83       	std	Y+4, r19	; 0x04
    16e6:	2b 83       	std	Y+3, r18	; 0x03
    16e8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ea:	9c 81       	ldd	r25, Y+4	; 0x04
    16ec:	81 30       	cpi	r24, 0x01	; 1
    16ee:	91 05       	cpc	r25, r1
    16f0:	c1 f0       	breq	.+48     	; 0x1722 <Timer2_Init+0x112>
    16f2:	2b 81       	ldd	r18, Y+3	; 0x03
    16f4:	3c 81       	ldd	r19, Y+4	; 0x04
    16f6:	22 30       	cpi	r18, 0x02	; 2
    16f8:	31 05       	cpc	r19, r1
    16fa:	11 f1       	breq	.+68     	; 0x1740 <Timer2_Init+0x130>
    16fc:	8b 81       	ldd	r24, Y+3	; 0x03
    16fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1700:	00 97       	sbiw	r24, 0x00	; 0
    1702:	69 f5       	brne	.+90     	; 0x175e <Timer2_Init+0x14e>
		case	TIMER_NORMAL_MODE:
			TCCR2 |= (1 << FOC2);
    1704:	a5 e4       	ldi	r26, 0x45	; 69
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	e5 e4       	ldi	r30, 0x45	; 69
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	80 68       	ori	r24, 0x80	; 128
    1710:	8c 93       	st	X, r24
			#if (INTERRUPT_MODE == INTERRUPT_ENABLE)
				SET_BIT(TIMSK, TOIE2);
				SET_BIT(SREG, 7); // Bit 7 – i bit: Global Interrupt Enable
			#elif (INTERRUPT_MODE == INTERRUPT_DISABLE)
				CLR_BIT(TIMSK, TOIE2);
    1712:	a9 e5       	ldi	r26, 0x59	; 89
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	e9 e5       	ldi	r30, 0x59	; 89
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	8f 7b       	andi	r24, 0xBF	; 191
    171e:	8c 93       	st	X, r24
    1720:	2c c0       	rjmp	.+88     	; 0x177a <Timer2_Init+0x16a>
			#endif
		break;
		case	TIMER_COMPARE_MODE:
			TCCR2 |= (1 << FOC2) | (1 << WGM21);
    1722:	a5 e4       	ldi	r26, 0x45	; 69
    1724:	b0 e0       	ldi	r27, 0x00	; 0
    1726:	e5 e4       	ldi	r30, 0x45	; 69
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	88 68       	ori	r24, 0x88	; 136
    172e:	8c 93       	st	X, r24
			#if (INTERRUPT_MODE == INTERRUPT_ENABLE)
				SET_BIT(TIMSK, OCIE2);
				SET_BIT(SREG, 7); // Bit 7 – i bit: Global Interrupt Enable
			#elif (INTERRUPT_MODE == INTERRUPT_DISABLE)
				CLR_BIT(TIMSK, OCIE2);
    1730:	a9 e5       	ldi	r26, 0x59	; 89
    1732:	b0 e0       	ldi	r27, 0x00	; 0
    1734:	e9 e5       	ldi	r30, 0x59	; 89
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	8f 77       	andi	r24, 0x7F	; 127
    173c:	8c 93       	st	X, r24
    173e:	1d c0       	rjmp	.+58     	; 0x177a <Timer2_Init+0x16a>
			#elif (CTC_MODE == CTC_SET)
				TCCR2 |= (1 << COM20) | (1 << COM21);
			#endif
		break;
		case	TIMER_FASTPWM_MODE:
			TCCR2 |= (1 << WGM20) | (1 << WGM21);
    1740:	a5 e4       	ldi	r26, 0x45	; 69
    1742:	b0 e0       	ldi	r27, 0x00	; 0
    1744:	e5 e4       	ldi	r30, 0x45	; 69
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	80 81       	ld	r24, Z
    174a:	88 64       	ori	r24, 0x48	; 72
    174c:	8c 93       	st	X, r24
			#if (FASTPWM_MODE == FASTPWM_NOINVERT)
				TCCR2 |= (1 << COM21);
    174e:	a5 e4       	ldi	r26, 0x45	; 69
    1750:	b0 e0       	ldi	r27, 0x00	; 0
    1752:	e5 e4       	ldi	r30, 0x45	; 69
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	80 81       	ld	r24, Z
    1758:	80 62       	ori	r24, 0x20	; 32
    175a:	8c 93       	st	X, r24
    175c:	0e c0       	rjmp	.+28     	; 0x177a <Timer2_Init+0x16a>
			#elif (FASTPWM_MODE == FASTPWM_INVERT)
				TCCR2 |= (1 << COM20) | (1 << COM21);
			#endif
		break;
		default:
			TCCR2 |= (1 << FOC2);
    175e:	a5 e4       	ldi	r26, 0x45	; 69
    1760:	b0 e0       	ldi	r27, 0x00	; 0
    1762:	e5 e4       	ldi	r30, 0x45	; 69
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	80 81       	ld	r24, Z
    1768:	80 68       	ori	r24, 0x80	; 128
    176a:	8c 93       	st	X, r24
			#if (INTERRUPT_MODE == INTERRUPT_ENABLE)
				SET_BIT(TIMSK, TOIE2);
				SET_BIT(SREG, 7); // Bit 7 – i bit: Global Interrupt Enable
			#elif (INTERRUPT_MODE == INTERRUPT_DISABLE)
				CLR_BIT(TIMSK, TOIE2);
    176c:	a9 e5       	ldi	r26, 0x59	; 89
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	e9 e5       	ldi	r30, 0x59	; 89
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	8f 7b       	andi	r24, 0xBF	; 191
    1778:	8c 93       	st	X, r24
			#endif
		break;
	}
}
    177a:	26 96       	adiw	r28, 0x06	; 6
    177c:	0f b6       	in	r0, 0x3f	; 63
    177e:	f8 94       	cli
    1780:	de bf       	out	0x3e, r29	; 62
    1782:	0f be       	out	0x3f, r0	; 63
    1784:	cd bf       	out	0x3d, r28	; 61
    1786:	cf 91       	pop	r28
    1788:	df 91       	pop	r29
    178a:	08 95       	ret

0000178c <Timer2_deInit>:

void Timer2_deInit(void) {
    178c:	df 93       	push	r29
    178e:	cf 93       	push	r28
    1790:	cd b7       	in	r28, 0x3d	; 61
    1792:	de b7       	in	r29, 0x3e	; 62
	TCCR2 = 0x00;
    1794:	e5 e4       	ldi	r30, 0x45	; 69
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	10 82       	st	Z, r1
	TCNT2 = 0x00;
    179a:	e4 e4       	ldi	r30, 0x44	; 68
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	10 82       	st	Z, r1
	OCR2   = 0x00;
    17a0:	e3 e4       	ldi	r30, 0x43	; 67
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	10 82       	st	Z, r1
}
    17a6:	cf 91       	pop	r28
    17a8:	df 91       	pop	r29
    17aa:	08 95       	ret

000017ac <Timer0_normalDelaySec>:


void Timer0_normalDelaySec(float32 timeDelay) {
    17ac:	df 93       	push	r29
    17ae:	cf 93       	push	r28
    17b0:	cd b7       	in	r28, 0x3d	; 61
    17b2:	de b7       	in	r29, 0x3e	; 62
    17b4:	61 97       	sbiw	r28, 0x11	; 17
    17b6:	0f b6       	in	r0, 0x3f	; 63
    17b8:	f8 94       	cli
    17ba:	de bf       	out	0x3e, r29	; 62
    17bc:	0f be       	out	0x3f, r0	; 63
    17be:	cd bf       	out	0x3d, r28	; 61
    17c0:	6e 87       	std	Y+14, r22	; 0x0e
    17c2:	7f 87       	std	Y+15, r23	; 0x0f
    17c4:	88 8b       	std	Y+16, r24	; 0x10
    17c6:	99 8b       	std	Y+17, r25	; 0x11
	// Compares overflow counter with overflow amount in a loop
	// Executes a busy wait function
	// Then clears the TIFR by setting it
	// Iterates Overflow Counter

	float32 	tickTime 					= 0;
    17c8:	80 e0       	ldi	r24, 0x00	; 0
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	a0 e0       	ldi	r26, 0x00	; 0
    17ce:	b0 e0       	ldi	r27, 0x00	; 0
    17d0:	8a 87       	std	Y+10, r24	; 0x0a
    17d2:	9b 87       	std	Y+11, r25	; 0x0b
    17d4:	ac 87       	std	Y+12, r26	; 0x0c
    17d6:	bd 87       	std	Y+13, r27	; 0x0d
	float32 	maxDelayTime 		= 0;
    17d8:	80 e0       	ldi	r24, 0x00	; 0
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	a0 e0       	ldi	r26, 0x00	; 0
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	8e 83       	std	Y+6, r24	; 0x06
    17e2:	9f 83       	std	Y+7, r25	; 0x07
    17e4:	a8 87       	std	Y+8, r26	; 0x08
    17e6:	b9 87       	std	Y+9, r27	; 0x09
	float32 	overflowAmount 	= 0;
    17e8:	80 e0       	ldi	r24, 0x00	; 0
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	a0 e0       	ldi	r26, 0x00	; 0
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	8a 83       	std	Y+2, r24	; 0x02
    17f2:	9b 83       	std	Y+3, r25	; 0x03
    17f4:	ac 83       	std	Y+4, r26	; 0x04
    17f6:	bd 83       	std	Y+5, r27	; 0x05
	uint8 		overFlowCounter 	= 0;
    17f8:	19 82       	std	Y+1, r1	; 0x01

	tickTime = PRESCALER_VALUE / (float)F_CPU;
    17fa:	8d eb       	ldi	r24, 0xBD	; 189
    17fc:	97 e3       	ldi	r25, 0x37	; 55
    17fe:	a6 e8       	ldi	r26, 0x86	; 134
    1800:	b5 e3       	ldi	r27, 0x35	; 53
    1802:	8a 87       	std	Y+10, r24	; 0x0a
    1804:	9b 87       	std	Y+11, r25	; 0x0b
    1806:	ac 87       	std	Y+12, r26	; 0x0c
    1808:	bd 87       	std	Y+13, r27	; 0x0d
	maxDelayTime = tickTime * 256; 		// 2^n = 256
    180a:	6a 85       	ldd	r22, Y+10	; 0x0a
    180c:	7b 85       	ldd	r23, Y+11	; 0x0b
    180e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1810:	9d 85       	ldd	r25, Y+13	; 0x0d
    1812:	20 e0       	ldi	r18, 0x00	; 0
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	40 e8       	ldi	r20, 0x80	; 128
    1818:	53 e4       	ldi	r21, 0x43	; 67
    181a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    181e:	dc 01       	movw	r26, r24
    1820:	cb 01       	movw	r24, r22
    1822:	8e 83       	std	Y+6, r24	; 0x06
    1824:	9f 83       	std	Y+7, r25	; 0x07
    1826:	a8 87       	std	Y+8, r26	; 0x08
    1828:	b9 87       	std	Y+9, r27	; 0x09
	overflowAmount = ceil((timeDelay) / (maxDelayTime));
    182a:	6e 85       	ldd	r22, Y+14	; 0x0e
    182c:	7f 85       	ldd	r23, Y+15	; 0x0f
    182e:	88 89       	ldd	r24, Y+16	; 0x10
    1830:	99 89       	ldd	r25, Y+17	; 0x11
    1832:	2e 81       	ldd	r18, Y+6	; 0x06
    1834:	3f 81       	ldd	r19, Y+7	; 0x07
    1836:	48 85       	ldd	r20, Y+8	; 0x08
    1838:	59 85       	ldd	r21, Y+9	; 0x09
    183a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    183e:	dc 01       	movw	r26, r24
    1840:	cb 01       	movw	r24, r22
    1842:	bc 01       	movw	r22, r24
    1844:	cd 01       	movw	r24, r26
    1846:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <ceil>
    184a:	dc 01       	movw	r26, r24
    184c:	cb 01       	movw	r24, r22
    184e:	8a 83       	std	Y+2, r24	; 0x02
    1850:	9b 83       	std	Y+3, r25	; 0x03
    1852:	ac 83       	std	Y+4, r26	; 0x04
    1854:	bd 83       	std	Y+5, r27	; 0x05
    1856:	13 c0       	rjmp	.+38     	; 0x187e <Timer0_normalDelaySec+0xd2>

	// Using the Timer Overflow Flag TOV
	//Timer0_Init();
	while (overFlowCounter < overflowAmount) {
		while (BIT_IS_CLR(TIFR, TOV0)) {
    1858:	e8 e5       	ldi	r30, 0x58	; 88
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	80 81       	ld	r24, Z
    185e:	88 2f       	mov	r24, r24
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	81 70       	andi	r24, 0x01	; 1
    1864:	90 70       	andi	r25, 0x00	; 0
    1866:	00 97       	sbiw	r24, 0x00	; 0
    1868:	b9 f3       	breq	.-18     	; 0x1858 <Timer0_normalDelaySec+0xac>
			// This function is a Busy Wait
		}
		overFlowCounter++;
    186a:	89 81       	ldd	r24, Y+1	; 0x01
    186c:	8f 5f       	subi	r24, 0xFF	; 255
    186e:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(TIFR, TOV0);
    1870:	a8 e5       	ldi	r26, 0x58	; 88
    1872:	b0 e0       	ldi	r27, 0x00	; 0
    1874:	e8 e5       	ldi	r30, 0x58	; 88
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	80 81       	ld	r24, Z
    187a:	81 60       	ori	r24, 0x01	; 1
    187c:	8c 93       	st	X, r24
	maxDelayTime = tickTime * 256; 		// 2^n = 256
	overflowAmount = ceil((timeDelay) / (maxDelayTime));

	// Using the Timer Overflow Flag TOV
	//Timer0_Init();
	while (overFlowCounter < overflowAmount) {
    187e:	89 81       	ldd	r24, Y+1	; 0x01
    1880:	88 2f       	mov	r24, r24
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	aa 27       	eor	r26, r26
    1886:	97 fd       	sbrc	r25, 7
    1888:	a0 95       	com	r26
    188a:	ba 2f       	mov	r27, r26
    188c:	bc 01       	movw	r22, r24
    188e:	cd 01       	movw	r24, r26
    1890:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    1894:	dc 01       	movw	r26, r24
    1896:	cb 01       	movw	r24, r22
    1898:	bc 01       	movw	r22, r24
    189a:	cd 01       	movw	r24, r26
    189c:	2a 81       	ldd	r18, Y+2	; 0x02
    189e:	3b 81       	ldd	r19, Y+3	; 0x03
    18a0:	4c 81       	ldd	r20, Y+4	; 0x04
    18a2:	5d 81       	ldd	r21, Y+5	; 0x05
    18a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18a8:	88 23       	and	r24, r24
    18aa:	b4 f2       	brlt	.-84     	; 0x1858 <Timer0_normalDelaySec+0xac>
			// This function is a Busy Wait
		}
		overFlowCounter++;
		SET_BIT(TIFR, TOV0);
	}
	overFlowCounter = 0;
    18ac:	19 82       	std	Y+1, r1	; 0x01
//		CLR_BIT(TIFR, OCF0);
//		overFlowCounter++;
//	}
//	overFlowCounter = 0;
//	TCNT0 = 0x00;
}
    18ae:	61 96       	adiw	r28, 0x11	; 17
    18b0:	0f b6       	in	r0, 0x3f	; 63
    18b2:	f8 94       	cli
    18b4:	de bf       	out	0x3e, r29	; 62
    18b6:	0f be       	out	0x3f, r0	; 63
    18b8:	cd bf       	out	0x3d, r28	; 61
    18ba:	cf 91       	pop	r28
    18bc:	df 91       	pop	r29
    18be:	08 95       	ret

000018c0 <Timer1_normalDelaySec>:



void Timer1_normalDelaySec(float32 timeDelay) {
    18c0:	df 93       	push	r29
    18c2:	cf 93       	push	r28
    18c4:	cd b7       	in	r28, 0x3d	; 61
    18c6:	de b7       	in	r29, 0x3e	; 62
    18c8:	61 97       	sbiw	r28, 0x11	; 17
    18ca:	0f b6       	in	r0, 0x3f	; 63
    18cc:	f8 94       	cli
    18ce:	de bf       	out	0x3e, r29	; 62
    18d0:	0f be       	out	0x3f, r0	; 63
    18d2:	cd bf       	out	0x3d, r28	; 61
    18d4:	6e 87       	std	Y+14, r22	; 0x0e
    18d6:	7f 87       	std	Y+15, r23	; 0x0f
    18d8:	88 8b       	std	Y+16, r24	; 0x10
    18da:	99 8b       	std	Y+17, r25	; 0x11
	// Compares overflow counter with overflow amount in a loop
	// Executes a busy wait function
	// Then clears the TIFR by setting it
	// Iterates Overflow Counter

	float32 	tickTime 					= 0;
    18dc:	80 e0       	ldi	r24, 0x00	; 0
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	a0 e0       	ldi	r26, 0x00	; 0
    18e2:	b0 e0       	ldi	r27, 0x00	; 0
    18e4:	8a 87       	std	Y+10, r24	; 0x0a
    18e6:	9b 87       	std	Y+11, r25	; 0x0b
    18e8:	ac 87       	std	Y+12, r26	; 0x0c
    18ea:	bd 87       	std	Y+13, r27	; 0x0d
	float32 	maxDelayTime 		= 0;
    18ec:	80 e0       	ldi	r24, 0x00	; 0
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	a0 e0       	ldi	r26, 0x00	; 0
    18f2:	b0 e0       	ldi	r27, 0x00	; 0
    18f4:	8e 83       	std	Y+6, r24	; 0x06
    18f6:	9f 83       	std	Y+7, r25	; 0x07
    18f8:	a8 87       	std	Y+8, r26	; 0x08
    18fa:	b9 87       	std	Y+9, r27	; 0x09
	float32 	overflowAmount 	= 0;
    18fc:	80 e0       	ldi	r24, 0x00	; 0
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	a0 e0       	ldi	r26, 0x00	; 0
    1902:	b0 e0       	ldi	r27, 0x00	; 0
    1904:	8a 83       	std	Y+2, r24	; 0x02
    1906:	9b 83       	std	Y+3, r25	; 0x03
    1908:	ac 83       	std	Y+4, r26	; 0x04
    190a:	bd 83       	std	Y+5, r27	; 0x05
	uint8 		overFlowCounter 	= 0;
    190c:	19 82       	std	Y+1, r1	; 0x01

	tickTime = PRESCALER_VALUE / (float)F_CPU;
    190e:	8d eb       	ldi	r24, 0xBD	; 189
    1910:	97 e3       	ldi	r25, 0x37	; 55
    1912:	a6 e8       	ldi	r26, 0x86	; 134
    1914:	b5 e3       	ldi	r27, 0x35	; 53
    1916:	8a 87       	std	Y+10, r24	; 0x0a
    1918:	9b 87       	std	Y+11, r25	; 0x0b
    191a:	ac 87       	std	Y+12, r26	; 0x0c
    191c:	bd 87       	std	Y+13, r27	; 0x0d
	maxDelayTime = tickTime * 256; 		// 2^n = 256
    191e:	6a 85       	ldd	r22, Y+10	; 0x0a
    1920:	7b 85       	ldd	r23, Y+11	; 0x0b
    1922:	8c 85       	ldd	r24, Y+12	; 0x0c
    1924:	9d 85       	ldd	r25, Y+13	; 0x0d
    1926:	20 e0       	ldi	r18, 0x00	; 0
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	40 e8       	ldi	r20, 0x80	; 128
    192c:	53 e4       	ldi	r21, 0x43	; 67
    192e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1932:	dc 01       	movw	r26, r24
    1934:	cb 01       	movw	r24, r22
    1936:	8e 83       	std	Y+6, r24	; 0x06
    1938:	9f 83       	std	Y+7, r25	; 0x07
    193a:	a8 87       	std	Y+8, r26	; 0x08
    193c:	b9 87       	std	Y+9, r27	; 0x09
	overflowAmount = ceil((timeDelay) / (maxDelayTime));
    193e:	6e 85       	ldd	r22, Y+14	; 0x0e
    1940:	7f 85       	ldd	r23, Y+15	; 0x0f
    1942:	88 89       	ldd	r24, Y+16	; 0x10
    1944:	99 89       	ldd	r25, Y+17	; 0x11
    1946:	2e 81       	ldd	r18, Y+6	; 0x06
    1948:	3f 81       	ldd	r19, Y+7	; 0x07
    194a:	48 85       	ldd	r20, Y+8	; 0x08
    194c:	59 85       	ldd	r21, Y+9	; 0x09
    194e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1952:	dc 01       	movw	r26, r24
    1954:	cb 01       	movw	r24, r22
    1956:	bc 01       	movw	r22, r24
    1958:	cd 01       	movw	r24, r26
    195a:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <ceil>
    195e:	dc 01       	movw	r26, r24
    1960:	cb 01       	movw	r24, r22
    1962:	8a 83       	std	Y+2, r24	; 0x02
    1964:	9b 83       	std	Y+3, r25	; 0x03
    1966:	ac 83       	std	Y+4, r26	; 0x04
    1968:	bd 83       	std	Y+5, r27	; 0x05
    196a:	13 c0       	rjmp	.+38     	; 0x1992 <Timer1_normalDelaySec+0xd2>

	// Using the Timer Overflow Flag TOV
	//Timer1_Init();
	while (overFlowCounter < overflowAmount) {
		while (BIT_IS_CLR(TIFR, TOV1)) {
    196c:	e8 e5       	ldi	r30, 0x58	; 88
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	80 81       	ld	r24, Z
    1972:	88 2f       	mov	r24, r24
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	84 70       	andi	r24, 0x04	; 4
    1978:	90 70       	andi	r25, 0x00	; 0
    197a:	00 97       	sbiw	r24, 0x00	; 0
    197c:	b9 f3       	breq	.-18     	; 0x196c <Timer1_normalDelaySec+0xac>
			// This function is a Busy Wait
		}
		overFlowCounter++;
    197e:	89 81       	ldd	r24, Y+1	; 0x01
    1980:	8f 5f       	subi	r24, 0xFF	; 255
    1982:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(TIFR, TOV1);
    1984:	a8 e5       	ldi	r26, 0x58	; 88
    1986:	b0 e0       	ldi	r27, 0x00	; 0
    1988:	e8 e5       	ldi	r30, 0x58	; 88
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	80 81       	ld	r24, Z
    198e:	84 60       	ori	r24, 0x04	; 4
    1990:	8c 93       	st	X, r24
	maxDelayTime = tickTime * 256; 		// 2^n = 256
	overflowAmount = ceil((timeDelay) / (maxDelayTime));

	// Using the Timer Overflow Flag TOV
	//Timer1_Init();
	while (overFlowCounter < overflowAmount) {
    1992:	89 81       	ldd	r24, Y+1	; 0x01
    1994:	88 2f       	mov	r24, r24
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	aa 27       	eor	r26, r26
    199a:	97 fd       	sbrc	r25, 7
    199c:	a0 95       	com	r26
    199e:	ba 2f       	mov	r27, r26
    19a0:	bc 01       	movw	r22, r24
    19a2:	cd 01       	movw	r24, r26
    19a4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    19a8:	dc 01       	movw	r26, r24
    19aa:	cb 01       	movw	r24, r22
    19ac:	bc 01       	movw	r22, r24
    19ae:	cd 01       	movw	r24, r26
    19b0:	2a 81       	ldd	r18, Y+2	; 0x02
    19b2:	3b 81       	ldd	r19, Y+3	; 0x03
    19b4:	4c 81       	ldd	r20, Y+4	; 0x04
    19b6:	5d 81       	ldd	r21, Y+5	; 0x05
    19b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19bc:	88 23       	and	r24, r24
    19be:	b4 f2       	brlt	.-84     	; 0x196c <Timer1_normalDelaySec+0xac>
			// This function is a Busy Wait
		}
		overFlowCounter++;
		SET_BIT(TIFR, TOV1);
	}
	overFlowCounter = 0;
    19c0:	19 82       	std	Y+1, r1	; 0x01
	//Timer1_Init();
	//TCCR0 = 0;
}
    19c2:	61 96       	adiw	r28, 0x11	; 17
    19c4:	0f b6       	in	r0, 0x3f	; 63
    19c6:	f8 94       	cli
    19c8:	de bf       	out	0x3e, r29	; 62
    19ca:	0f be       	out	0x3f, r0	; 63
    19cc:	cd bf       	out	0x3d, r28	; 61
    19ce:	cf 91       	pop	r28
    19d0:	df 91       	pop	r29
    19d2:	08 95       	ret

000019d4 <Timer_setCTCMode_normalFreq>:





void Timer_setCTCMode_normalFreq(float freqKHZ, uint8 port_num, uint8 pin_num) {
    19d4:	0f 93       	push	r16
    19d6:	1f 93       	push	r17
    19d8:	df 93       	push	r29
    19da:	cf 93       	push	r28
    19dc:	00 d0       	rcall	.+0      	; 0x19de <Timer_setCTCMode_normalFreq+0xa>
    19de:	00 d0       	rcall	.+0      	; 0x19e0 <Timer_setCTCMode_normalFreq+0xc>
    19e0:	00 d0       	rcall	.+0      	; 0x19e2 <Timer_setCTCMode_normalFreq+0xe>
    19e2:	cd b7       	in	r28, 0x3d	; 61
    19e4:	de b7       	in	r29, 0x3e	; 62
    19e6:	69 83       	std	Y+1, r22	; 0x01
    19e8:	7a 83       	std	Y+2, r23	; 0x02
    19ea:	8b 83       	std	Y+3, r24	; 0x03
    19ec:	9c 83       	std	Y+4, r25	; 0x04
    19ee:	4d 83       	std	Y+5, r20	; 0x05
    19f0:	2e 83       	std	Y+6, r18	; 0x06
	// Focn = F_CPU / (2N*(1 + OCRn))
	// For i.e: Focn = 2 KHz, what are my knowns?
	// Focn, FCPU, N,,, so i will calculate the OCRn
	// Thus solving my problem.

	GPIO_setupPinDirection(port_num, pin_num, PIN_OUTPUT);
    19f2:	8d 81       	ldd	r24, Y+5	; 0x05
    19f4:	6e 81       	ldd	r22, Y+6	; 0x06
    19f6:	41 e0       	ldi	r20, 0x01	; 1
    19f8:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <GPIO_setupPinDirection>
	GPIO_writePin(port_num, pin_num, LOGIC_LOW);
    19fc:	8d 81       	ldd	r24, Y+5	; 0x05
    19fe:	6e 81       	ldd	r22, Y+6	; 0x06
    1a00:	40 e0       	ldi	r20, 0x00	; 0
    1a02:	0e 94 a0 10 	call	0x2140	; 0x2140 <GPIO_writePin>

	// Using the Timer CTC Mode
	TCNT0 	= 0;
    1a06:	e2 e5       	ldi	r30, 0x52	; 82
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	10 82       	st	Z, r1
	OCR0 		= 0;
    1a0c:	ec e5       	ldi	r30, 0x5C	; 92
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	10 82       	st	Z, r1
	OCR0 		= ceil( (float32)F_CPU / (2 * PRESCALER_VALUE * freqKHZ * 1000) ) - 1;
    1a12:	0c e5       	ldi	r16, 0x5C	; 92
    1a14:	10 e0       	ldi	r17, 0x00	; 0
    1a16:	69 81       	ldd	r22, Y+1	; 0x01
    1a18:	7a 81       	ldd	r23, Y+2	; 0x02
    1a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a1e:	20 e0       	ldi	r18, 0x00	; 0
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	40 e8       	ldi	r20, 0x80	; 128
    1a24:	51 e4       	ldi	r21, 0x41	; 65
    1a26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a2a:	dc 01       	movw	r26, r24
    1a2c:	cb 01       	movw	r24, r22
    1a2e:	bc 01       	movw	r22, r24
    1a30:	cd 01       	movw	r24, r26
    1a32:	20 e0       	ldi	r18, 0x00	; 0
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	4a e7       	ldi	r20, 0x7A	; 122
    1a38:	54 e4       	ldi	r21, 0x44	; 68
    1a3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a3e:	dc 01       	movw	r26, r24
    1a40:	cb 01       	movw	r24, r22
    1a42:	9c 01       	movw	r18, r24
    1a44:	ad 01       	movw	r20, r26
    1a46:	60 e0       	ldi	r22, 0x00	; 0
    1a48:	74 e2       	ldi	r23, 0x24	; 36
    1a4a:	84 ef       	ldi	r24, 0xF4	; 244
    1a4c:	9a e4       	ldi	r25, 0x4A	; 74
    1a4e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a52:	dc 01       	movw	r26, r24
    1a54:	cb 01       	movw	r24, r22
    1a56:	bc 01       	movw	r22, r24
    1a58:	cd 01       	movw	r24, r26
    1a5a:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <ceil>
    1a5e:	dc 01       	movw	r26, r24
    1a60:	cb 01       	movw	r24, r22
    1a62:	bc 01       	movw	r22, r24
    1a64:	cd 01       	movw	r24, r26
    1a66:	20 e0       	ldi	r18, 0x00	; 0
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	40 e8       	ldi	r20, 0x80	; 128
    1a6c:	5f e3       	ldi	r21, 0x3F	; 63
    1a6e:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1a72:	dc 01       	movw	r26, r24
    1a74:	cb 01       	movw	r24, r22
    1a76:	bc 01       	movw	r22, r24
    1a78:	cd 01       	movw	r24, r26
    1a7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a7e:	dc 01       	movw	r26, r24
    1a80:	cb 01       	movw	r24, r22
    1a82:	f8 01       	movw	r30, r16
    1a84:	80 83       	st	Z, r24

	if (BIT_IS_SET(TIFR, OCF0)) {
    1a86:	e8 e5       	ldi	r30, 0x58	; 88
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	80 81       	ld	r24, Z
    1a8c:	88 2f       	mov	r24, r24
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	82 70       	andi	r24, 0x02	; 2
    1a92:	90 70       	andi	r25, 0x00	; 0
    1a94:	00 97       	sbiw	r24, 0x00	; 0
    1a96:	59 f0       	breq	.+22     	; 0x1aae <Timer_setCTCMode_normalFreq+0xda>
		GPIO_togglePin(port_num, pin_num);
    1a98:	8d 81       	ldd	r24, Y+5	; 0x05
    1a9a:	6e 81       	ldd	r22, Y+6	; 0x06
    1a9c:	0e 94 9c 11 	call	0x2338	; 0x2338 <GPIO_togglePin>
		SET_BIT(TIFR, OCF0);
    1aa0:	a8 e5       	ldi	r26, 0x58	; 88
    1aa2:	b0 e0       	ldi	r27, 0x00	; 0
    1aa4:	e8 e5       	ldi	r30, 0x58	; 88
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	80 81       	ld	r24, Z
    1aaa:	82 60       	ori	r24, 0x02	; 2
    1aac:	8c 93       	st	X, r24
	}


}
    1aae:	26 96       	adiw	r28, 0x06	; 6
    1ab0:	0f b6       	in	r0, 0x3f	; 63
    1ab2:	f8 94       	cli
    1ab4:	de bf       	out	0x3e, r29	; 62
    1ab6:	0f be       	out	0x3f, r0	; 63
    1ab8:	cd bf       	out	0x3d, r28	; 61
    1aba:	cf 91       	pop	r28
    1abc:	df 91       	pop	r29
    1abe:	1f 91       	pop	r17
    1ac0:	0f 91       	pop	r16
    1ac2:	08 95       	ret

00001ac4 <Timer_setCTCMode_interruptFreq>:


uint8 Timer_setCTCMode_interruptFreq(float freqKHZ) {
    1ac4:	0f 93       	push	r16
    1ac6:	1f 93       	push	r17
    1ac8:	df 93       	push	r29
    1aca:	cf 93       	push	r28
    1acc:	00 d0       	rcall	.+0      	; 0x1ace <Timer_setCTCMode_interruptFreq+0xa>
    1ace:	00 d0       	rcall	.+0      	; 0x1ad0 <Timer_setCTCMode_interruptFreq+0xc>
    1ad0:	cd b7       	in	r28, 0x3d	; 61
    1ad2:	de b7       	in	r29, 0x3e	; 62
    1ad4:	69 83       	std	Y+1, r22	; 0x01
    1ad6:	7a 83       	std	Y+2, r23	; 0x02
    1ad8:	8b 83       	std	Y+3, r24	; 0x03
    1ada:	9c 83       	std	Y+4, r25	; 0x04
	// Focn, FCPU, N,,, so i will calculate the OCRn
	// Thus solving my problem.

	// Using the Timer CTC Mode
	//Timer0_Init();
	TCNT0 	= 0;
    1adc:	e2 e5       	ldi	r30, 0x52	; 82
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	10 82       	st	Z, r1
	OCR0 		= 0;
    1ae2:	ec e5       	ldi	r30, 0x5C	; 92
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	10 82       	st	Z, r1
	OCR0 		= ceil( (float32)F_CPU / (2 * PRESCALER_VALUE * freqKHZ * 1000) ) - 1;
    1ae8:	0c e5       	ldi	r16, 0x5C	; 92
    1aea:	10 e0       	ldi	r17, 0x00	; 0
    1aec:	69 81       	ldd	r22, Y+1	; 0x01
    1aee:	7a 81       	ldd	r23, Y+2	; 0x02
    1af0:	8b 81       	ldd	r24, Y+3	; 0x03
    1af2:	9c 81       	ldd	r25, Y+4	; 0x04
    1af4:	20 e0       	ldi	r18, 0x00	; 0
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	40 e8       	ldi	r20, 0x80	; 128
    1afa:	51 e4       	ldi	r21, 0x41	; 65
    1afc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b00:	dc 01       	movw	r26, r24
    1b02:	cb 01       	movw	r24, r22
    1b04:	bc 01       	movw	r22, r24
    1b06:	cd 01       	movw	r24, r26
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	4a e7       	ldi	r20, 0x7A	; 122
    1b0e:	54 e4       	ldi	r21, 0x44	; 68
    1b10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b14:	dc 01       	movw	r26, r24
    1b16:	cb 01       	movw	r24, r22
    1b18:	9c 01       	movw	r18, r24
    1b1a:	ad 01       	movw	r20, r26
    1b1c:	60 e0       	ldi	r22, 0x00	; 0
    1b1e:	74 e2       	ldi	r23, 0x24	; 36
    1b20:	84 ef       	ldi	r24, 0xF4	; 244
    1b22:	9a e4       	ldi	r25, 0x4A	; 74
    1b24:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b28:	dc 01       	movw	r26, r24
    1b2a:	cb 01       	movw	r24, r22
    1b2c:	bc 01       	movw	r22, r24
    1b2e:	cd 01       	movw	r24, r26
    1b30:	0e 94 7a 22 	call	0x44f4	; 0x44f4 <ceil>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	bc 01       	movw	r22, r24
    1b3a:	cd 01       	movw	r24, r26
    1b3c:	20 e0       	ldi	r18, 0x00	; 0
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	40 e8       	ldi	r20, 0x80	; 128
    1b42:	5f e3       	ldi	r21, 0x3F	; 63
    1b44:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1b48:	dc 01       	movw	r26, r24
    1b4a:	cb 01       	movw	r24, r22
    1b4c:	bc 01       	movw	r22, r24
    1b4e:	cd 01       	movw	r24, r26
    1b50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b54:	dc 01       	movw	r26, r24
    1b56:	cb 01       	movw	r24, r22
    1b58:	f8 01       	movw	r30, r16
    1b5a:	80 83       	st	Z, r24

	return OCR0;
    1b5c:	ec e5       	ldi	r30, 0x5C	; 92
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	80 81       	ld	r24, Z
}
    1b62:	0f 90       	pop	r0
    1b64:	0f 90       	pop	r0
    1b66:	0f 90       	pop	r0
    1b68:	0f 90       	pop	r0
    1b6a:	cf 91       	pop	r28
    1b6c:	df 91       	pop	r29
    1b6e:	1f 91       	pop	r17
    1b70:	0f 91       	pop	r16
    1b72:	08 95       	ret

00001b74 <SPI_initMaster>:
#include "avr/io.h" /* To use the IO Ports Registers */
#include <util/delay.h>


// Initializes and enables the Master mode for the SPI Module to start functionality
void SPI_initMaster(void) {
    1b74:	df 93       	push	r29
    1b76:	cf 93       	push	r28
    1b78:	cd b7       	in	r28, 0x3d	; 61
    1b7a:	de b7       	in	r29, 0x3e	; 62
	 *	SS (PB4)   	--> 	Output
	 *	MOSI (PB5) --> 	Output
	 *	MISO (PB6) --> 	Input
	 *	SCK (PB7) 	--> 	Output
	 */
	GPIO_setupPinDirection(PORT_B, SS, PIN_OUTPUT);
    1b7c:	81 e0       	ldi	r24, 0x01	; 1
    1b7e:	64 e0       	ldi	r22, 0x04	; 4
    1b80:	41 e0       	ldi	r20, 0x01	; 1
    1b82:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORT_B, MOSI, PIN_OUTPUT);
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	65 e0       	ldi	r22, 0x05	; 5
    1b8a:	41 e0       	ldi	r20, 0x01	; 1
    1b8c:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORT_B, MISO, PIN_INPUT);
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	66 e0       	ldi	r22, 0x06	; 6
    1b94:	40 e0       	ldi	r20, 0x00	; 0
    1b96:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORT_B, SCK, PIN_OUTPUT);
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	67 e0       	ldi	r22, 0x07	; 7
    1b9e:	41 e0       	ldi	r20, 0x01	; 1
    1ba0:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <GPIO_setupPinDirection>
	  *  Bit 3 – CPOL: Clock Polarity
	  *  Bit 2 – CPHA: Clock Phase
	  *  Bits 1, 0 – SPR1, SPR0: SPI Clock Rate Select 1 and 0
	  */

	SET_BIT(SPCR, SPE); // Enabling the SPI Module
    1ba4:	ad e2       	ldi	r26, 0x2D	; 45
    1ba6:	b0 e0       	ldi	r27, 0x00	; 0
    1ba8:	ed e2       	ldi	r30, 0x2D	; 45
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	80 81       	ld	r24, Z
    1bae:	80 64       	ori	r24, 0x40	; 64
    1bb0:	8c 93       	st	X, r24
	SET_BIT(SPCR, MSTR); // Enabling the Master / Slave Mode; I will choose Master
    1bb2:	ad e2       	ldi	r26, 0x2D	; 45
    1bb4:	b0 e0       	ldi	r27, 0x00	; 0
    1bb6:	ed e2       	ldi	r30, 0x2D	; 45
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	80 81       	ld	r24, Z
    1bbc:	80 61       	ori	r24, 0x10	; 16
    1bbe:	8c 93       	st	X, r24
	CLR_BIT(SPCR, SPR1); // Choosing the SCK rate, Fosc / 4
    1bc0:	ad e2       	ldi	r26, 0x2D	; 45
    1bc2:	b0 e0       	ldi	r27, 0x00	; 0
    1bc4:	ed e2       	ldi	r30, 0x2D	; 45
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	80 81       	ld	r24, Z
    1bca:	8d 7f       	andi	r24, 0xFD	; 253
    1bcc:	8c 93       	st	X, r24
	CLR_BIT(SPCR, SPR0); // So SPR1, SPR0 = '00'
    1bce:	ad e2       	ldi	r26, 0x2D	; 45
    1bd0:	b0 e0       	ldi	r27, 0x00	; 0
    1bd2:	ed e2       	ldi	r30, 0x2D	; 45
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	80 81       	ld	r24, Z
    1bd8:	8e 7f       	andi	r24, 0xFE	; 254
    1bda:	8c 93       	st	X, r24
	  *  Bit 7 – SPIF: SPI Interrupt Flag
	  *  Bit 6 – WCOL: Write COLlision Flag
	  *  Bit 5..1 – Res: Reserved Bits
	  *  Bit 0 – SPI2X: Double SPI Speed Bit
	  */
	CLR_BIT(SPSR, SPI2X); // Make SPI2X = '0' to support the Fosc / 4
    1bdc:	ae e2       	ldi	r26, 0x2E	; 46
    1bde:	b0 e0       	ldi	r27, 0x00	; 0
    1be0:	ee e2       	ldi	r30, 0x2E	; 46
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	80 81       	ld	r24, Z
    1be6:	8e 7f       	andi	r24, 0xFE	; 254
    1be8:	8c 93       	st	X, r24

}
    1bea:	cf 91       	pop	r28
    1bec:	df 91       	pop	r29
    1bee:	08 95       	ret

00001bf0 <SPI_initSlave>:


// Initializes and enables the Slave mode for the SPI Module to start functionality
void SPI_initSlave(void) {
    1bf0:	df 93       	push	r29
    1bf2:	cf 93       	push	r28
    1bf4:	cd b7       	in	r28, 0x3d	; 61
    1bf6:	de b7       	in	r29, 0x3e	; 62
	 *	SS (PB4)   	--> 	Input
	 *	MOSI (PB5) --> 	Input
	 *	MISO (PB6) --> 	Output
	 *	SCK (PB7) 	--> 	Input
	 */
	GPIO_setupPinDirection(PORT_B, SS, PIN_INPUT);
    1bf8:	81 e0       	ldi	r24, 0x01	; 1
    1bfa:	64 e0       	ldi	r22, 0x04	; 4
    1bfc:	40 e0       	ldi	r20, 0x00	; 0
    1bfe:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORT_B, MOSI, PIN_INPUT);
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	65 e0       	ldi	r22, 0x05	; 5
    1c06:	40 e0       	ldi	r20, 0x00	; 0
    1c08:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORT_B, MISO, PIN_OUTPUT);
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	66 e0       	ldi	r22, 0x06	; 6
    1c10:	41 e0       	ldi	r20, 0x01	; 1
    1c12:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORT_B, SCK, PIN_INPUT);
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	67 e0       	ldi	r22, 0x07	; 7
    1c1a:	40 e0       	ldi	r20, 0x00	; 0
    1c1c:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <GPIO_setupPinDirection>
	  *  Bit 4 – MSTR: Master/Slave Select
	  *  Bit 3 – CPOL: Clock Polarity
	  *  Bit 2 – CPHA: Clock Phase
	  *  Bits 1, 0 – SPR1, SPR0: SPI Clock Rate Select 1 and 0
	  */
	SET_BIT(SPCR, SPE); // Enabling the SPI Module
    1c20:	ad e2       	ldi	r26, 0x2D	; 45
    1c22:	b0 e0       	ldi	r27, 0x00	; 0
    1c24:	ed e2       	ldi	r30, 0x2D	; 45
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	80 81       	ld	r24, Z
    1c2a:	80 64       	ori	r24, 0x40	; 64
    1c2c:	8c 93       	st	X, r24
	CLR_BIT(SPCR, MSTR); // Enabling the Master / Slave Mode; I will choose Master
    1c2e:	ad e2       	ldi	r26, 0x2D	; 45
    1c30:	b0 e0       	ldi	r27, 0x00	; 0
    1c32:	ed e2       	ldi	r30, 0x2D	; 45
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	8f 7e       	andi	r24, 0xEF	; 239
    1c3a:	8c 93       	st	X, r24
	CLR_BIT(SPCR, SPR1); // Choosing the SCK rate, Fosc / 4
    1c3c:	ad e2       	ldi	r26, 0x2D	; 45
    1c3e:	b0 e0       	ldi	r27, 0x00	; 0
    1c40:	ed e2       	ldi	r30, 0x2D	; 45
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	80 81       	ld	r24, Z
    1c46:	8d 7f       	andi	r24, 0xFD	; 253
    1c48:	8c 93       	st	X, r24
	CLR_BIT(SPCR, SPR0); // So SPR1, SPR0 = '00'
    1c4a:	ad e2       	ldi	r26, 0x2D	; 45
    1c4c:	b0 e0       	ldi	r27, 0x00	; 0
    1c4e:	ed e2       	ldi	r30, 0x2D	; 45
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	80 81       	ld	r24, Z
    1c54:	8e 7f       	andi	r24, 0xFE	; 254
    1c56:	8c 93       	st	X, r24
	  *  Bit 7 – SPIF: SPI Interrupt Flag
	  *  Bit 6 – WCOL: Write COLlision Flag
	  *  Bit 5..1 – Res: Reserved Bits
	  *  Bit 0 – SPI2X: Double SPI Speed Bit
	  */
	CLR_BIT(SPSR, SPI2X); // Make SPI2X = '0' to support the Fosc / 4
    1c58:	ae e2       	ldi	r26, 0x2E	; 46
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	ee e2       	ldi	r30, 0x2E	; 46
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	8e 7f       	andi	r24, 0xFE	; 254
    1c64:	8c 93       	st	X, r24

}
    1c66:	cf 91       	pop	r28
    1c68:	df 91       	pop	r29
    1c6a:	08 95       	ret

00001c6c <SPI_sendReceiveByte>:


// Responsible for the SPI to send & receive a byte
uint8 SPI_sendReceiveByte(uint8 data) {
    1c6c:	df 93       	push	r29
    1c6e:	cf 93       	push	r28
    1c70:	0f 92       	push	r0
    1c72:	cd b7       	in	r28, 0x3d	; 61
    1c74:	de b7       	in	r29, 0x3e	; 62
    1c76:	89 83       	std	Y+1, r24	; 0x01

	SPDR = data;
    1c78:	ef e2       	ldi	r30, 0x2F	; 47
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	89 81       	ldd	r24, Y+1	; 0x01
    1c7e:	80 83       	st	Z, r24

	while(BIT_IS_CLR(SPSR, SPIF)) {
    1c80:	ee e2       	ldi	r30, 0x2E	; 46
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	80 81       	ld	r24, Z
    1c86:	88 23       	and	r24, r24
    1c88:	dc f7       	brge	.-10     	; 0x1c80 <SPI_sendReceiveByte+0x14>
		 * flag is set, Master will set SS to low to generate clock on SCK pin
		 */
	}

	// after SPIF is set, then I return the data
	return SPDR;
    1c8a:	ef e2       	ldi	r30, 0x2F	; 47
    1c8c:	f0 e0       	ldi	r31, 0x00	; 0
    1c8e:	80 81       	ld	r24, Z
}
    1c90:	0f 90       	pop	r0
    1c92:	cf 91       	pop	r28
    1c94:	df 91       	pop	r29
    1c96:	08 95       	ret

00001c98 <SPI_sendString>:

void SPI_sendString(const uint8 *str) {
    1c98:	df 93       	push	r29
    1c9a:	cf 93       	push	r28
    1c9c:	00 d0       	rcall	.+0      	; 0x1c9e <SPI_sendString+0x6>
    1c9e:	00 d0       	rcall	.+0      	; 0x1ca0 <SPI_sendString+0x8>
    1ca0:	cd b7       	in	r28, 0x3d	; 61
    1ca2:	de b7       	in	r29, 0x3e	; 62
    1ca4:	9c 83       	std	Y+4, r25	; 0x04
    1ca6:	8b 83       	std	Y+3, r24	; 0x03
	uint8 i = 0;
    1ca8:	1a 82       	std	Y+2, r1	; 0x02
	uint8 receivedData = 0;
    1caa:	19 82       	std	Y+1, r1	; 0x01
    1cac:	0f c0       	rjmp	.+30     	; 0x1ccc <SPI_sendString+0x34>

	while (str[i] != '\0') {
		// receivedData contains the data from the other device
		receivedData = SPI_sendReceiveByte(str[i]);
    1cae:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb0:	28 2f       	mov	r18, r24
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb8:	fc 01       	movw	r30, r24
    1cba:	e2 0f       	add	r30, r18
    1cbc:	f3 1f       	adc	r31, r19
    1cbe:	80 81       	ld	r24, Z
    1cc0:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <SPI_sendReceiveByte>
    1cc4:	89 83       	std	Y+1, r24	; 0x01
		i++;
    1cc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc8:	8f 5f       	subi	r24, 0xFF	; 255
    1cca:	8a 83       	std	Y+2, r24	; 0x02

void SPI_sendString(const uint8 *str) {
	uint8 i = 0;
	uint8 receivedData = 0;

	while (str[i] != '\0') {
    1ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cce:	28 2f       	mov	r18, r24
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd6:	fc 01       	movw	r30, r24
    1cd8:	e2 0f       	add	r30, r18
    1cda:	f3 1f       	adc	r31, r19
    1cdc:	80 81       	ld	r24, Z
    1cde:	88 23       	and	r24, r24
    1ce0:	31 f7       	brne	.-52     	; 0x1cae <SPI_sendString+0x16>
		// receivedData contains the data from the other device
		receivedData = SPI_sendReceiveByte(str[i]);
		i++;
	}

}
    1ce2:	0f 90       	pop	r0
    1ce4:	0f 90       	pop	r0
    1ce6:	0f 90       	pop	r0
    1ce8:	0f 90       	pop	r0
    1cea:	cf 91       	pop	r28
    1cec:	df 91       	pop	r29
    1cee:	08 95       	ret

00001cf0 <SPI_receiveString>:


void SPI_receiveString(uint8 *str) {
    1cf0:	0f 93       	push	r16
    1cf2:	1f 93       	push	r17
    1cf4:	df 93       	push	r29
    1cf6:	cf 93       	push	r28
    1cf8:	00 d0       	rcall	.+0      	; 0x1cfa <SPI_receiveString+0xa>
    1cfa:	0f 92       	push	r0
    1cfc:	cd b7       	in	r28, 0x3d	; 61
    1cfe:	de b7       	in	r29, 0x3e	; 62
    1d00:	9b 83       	std	Y+3, r25	; 0x03
    1d02:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1d04:	19 82       	std	Y+1, r1	; 0x01
	// Receives and stores the first byte
	str[i] = SPI_sendReceiveByte(SPI_DEF_DATA_VAL);
    1d06:	89 81       	ldd	r24, Y+1	; 0x01
    1d08:	28 2f       	mov	r18, r24
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d10:	8c 01       	movw	r16, r24
    1d12:	02 0f       	add	r16, r18
    1d14:	13 1f       	adc	r17, r19
    1d16:	8f ef       	ldi	r24, 0xFF	; 255
    1d18:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <SPI_sendReceiveByte>
    1d1c:	f8 01       	movw	r30, r16
    1d1e:	80 83       	st	Z, r24
    1d20:	10 c0       	rjmp	.+32     	; 0x1d42 <SPI_receiveString+0x52>


	while (str[i] != '#') {
		i++; // why the incrementer above?
    1d22:	89 81       	ldd	r24, Y+1	; 0x01
    1d24:	8f 5f       	subi	r24, 0xFF	; 255
    1d26:	89 83       	std	Y+1, r24	; 0x01
		str[i] = SPI_sendReceiveByte(SPI_DEF_DATA_VAL);
    1d28:	89 81       	ldd	r24, Y+1	; 0x01
    1d2a:	28 2f       	mov	r18, r24
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d30:	9b 81       	ldd	r25, Y+3	; 0x03
    1d32:	8c 01       	movw	r16, r24
    1d34:	02 0f       	add	r16, r18
    1d36:	13 1f       	adc	r17, r19
    1d38:	8f ef       	ldi	r24, 0xFF	; 255
    1d3a:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <SPI_sendReceiveByte>
    1d3e:	f8 01       	movw	r30, r16
    1d40:	80 83       	st	Z, r24
	uint8 i = 0;
	// Receives and stores the first byte
	str[i] = SPI_sendReceiveByte(SPI_DEF_DATA_VAL);


	while (str[i] != '#') {
    1d42:	89 81       	ldd	r24, Y+1	; 0x01
    1d44:	28 2f       	mov	r18, r24
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d4c:	fc 01       	movw	r30, r24
    1d4e:	e2 0f       	add	r30, r18
    1d50:	f3 1f       	adc	r31, r19
    1d52:	80 81       	ld	r24, Z
    1d54:	83 32       	cpi	r24, 0x23	; 35
    1d56:	29 f7       	brne	.-54     	; 0x1d22 <SPI_receiveString+0x32>
		i++; // why the incrementer above?
		str[i] = SPI_sendReceiveByte(SPI_DEF_DATA_VAL);
	}

	str[i] = '\0'; // replacing the '#' with '\0'
    1d58:	89 81       	ldd	r24, Y+1	; 0x01
    1d5a:	28 2f       	mov	r18, r24
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d60:	9b 81       	ldd	r25, Y+3	; 0x03
    1d62:	fc 01       	movw	r30, r24
    1d64:	e2 0f       	add	r30, r18
    1d66:	f3 1f       	adc	r31, r19
    1d68:	10 82       	st	Z, r1

}
    1d6a:	0f 90       	pop	r0
    1d6c:	0f 90       	pop	r0
    1d6e:	0f 90       	pop	r0
    1d70:	cf 91       	pop	r28
    1d72:	df 91       	pop	r29
    1d74:	1f 91       	pop	r17
    1d76:	0f 91       	pop	r16
    1d78:	08 95       	ret

00001d7a <ICU_Init>:
#include <util/delay.h>
//#include <avr/interrupt.h>


// Initializes and enables the ADC Module to start functionality
void ICU_Init(void) {
    1d7a:	df 93       	push	r29
    1d7c:	cf 93       	push	r28
    1d7e:	cd b7       	in	r28, 0x3d	; 61
    1d80:	de b7       	in	r29, 0x3e	; 62
	 * 2 – FOC1B: Force Output Compare for Compare unit B
	 * 1:0 – WGM11:0: Waveform Generation Mode
	 */

	// Clears COM1A1:0 to '00', I want normal mode
	CLR_BIT(TCCR1A, COM1A1);
    1d82:	af e4       	ldi	r26, 0x4F	; 79
    1d84:	b0 e0       	ldi	r27, 0x00	; 0
    1d86:	ef e4       	ldi	r30, 0x4F	; 79
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	80 81       	ld	r24, Z
    1d8c:	8f 77       	andi	r24, 0x7F	; 127
    1d8e:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, COM1A0);
    1d90:	af e4       	ldi	r26, 0x4F	; 79
    1d92:	b0 e0       	ldi	r27, 0x00	; 0
    1d94:	ef e4       	ldi	r30, 0x4F	; 79
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	80 81       	ld	r24, Z
    1d9a:	8f 7b       	andi	r24, 0xBF	; 191
    1d9c:	8c 93       	st	X, r24

	// Clears COM1B1:0 to '00', I want normal mode
	CLR_BIT(TCCR1A, COM1B1);
    1d9e:	af e4       	ldi	r26, 0x4F	; 79
    1da0:	b0 e0       	ldi	r27, 0x00	; 0
    1da2:	ef e4       	ldi	r30, 0x4F	; 79
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	80 81       	ld	r24, Z
    1da8:	8f 7d       	andi	r24, 0xDF	; 223
    1daa:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, COM1B0);
    1dac:	af e4       	ldi	r26, 0x4F	; 79
    1dae:	b0 e0       	ldi	r27, 0x00	; 0
    1db0:	ef e4       	ldi	r30, 0x4F	; 79
    1db2:	f0 e0       	ldi	r31, 0x00	; 0
    1db4:	80 81       	ld	r24, Z
    1db6:	8f 7e       	andi	r24, 0xEF	; 239
    1db8:	8c 93       	st	X, r24

	// Sets FOC1A to '1', I'm in normal mode
	SET_BIT(TCCR1A, FOC1A);
    1dba:	af e4       	ldi	r26, 0x4F	; 79
    1dbc:	b0 e0       	ldi	r27, 0x00	; 0
    1dbe:	ef e4       	ldi	r30, 0x4F	; 79
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	80 81       	ld	r24, Z
    1dc4:	88 60       	ori	r24, 0x08	; 8
    1dc6:	8c 93       	st	X, r24

	// Sets FOC1A to '1', I'm in normal mode
	SET_BIT(TCCR1A, FOC1B);
    1dc8:	af e4       	ldi	r26, 0x4F	; 79
    1dca:	b0 e0       	ldi	r27, 0x00	; 0
    1dcc:	ef e4       	ldi	r30, 0x4F	; 79
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	80 81       	ld	r24, Z
    1dd2:	84 60       	ori	r24, 0x04	; 4
    1dd4:	8c 93       	st	X, r24

	// Clears COM1B1:0 to '00', I want normal mode
	CLR_BIT(TCCR1A, WGM11);
    1dd6:	af e4       	ldi	r26, 0x4F	; 79
    1dd8:	b0 e0       	ldi	r27, 0x00	; 0
    1dda:	ef e4       	ldi	r30, 0x4F	; 79
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	80 81       	ld	r24, Z
    1de0:	8d 7f       	andi	r24, 0xFD	; 253
    1de2:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, WGM10);
    1de4:	af e4       	ldi	r26, 0x4F	; 79
    1de6:	b0 e0       	ldi	r27, 0x00	; 0
    1de8:	ef e4       	ldi	r30, 0x4F	; 79
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 81       	ld	r24, Z
    1dee:	8e 7f       	andi	r24, 0xFE	; 254
    1df0:	8c 93       	st	X, r24
	 * Bit 4:3 – WGM13:2: Waveform Generation Mode
	 * Bit 2:0 – CS12:0: Clock Select
	 */

	// Clears ICNC1 to '0', I DONT want the noise canceling
	CLR_BIT(TCCR1B, ICNC1);
    1df2:	ae e4       	ldi	r26, 0x4E	; 78
    1df4:	b0 e0       	ldi	r27, 0x00	; 0
    1df6:	ee e4       	ldi	r30, 0x4E	; 78
    1df8:	f0 e0       	ldi	r31, 0x00	; 0
    1dfa:	80 81       	ld	r24, Z
    1dfc:	8f 77       	andi	r24, 0x7F	; 127
    1dfe:	8c 93       	st	X, r24

	// Sets ICES1 to '1', I want the rising edge
	SET_BIT(TCCR1B, ICES1);
    1e00:	ae e4       	ldi	r26, 0x4E	; 78
    1e02:	b0 e0       	ldi	r27, 0x00	; 0
    1e04:	ee e4       	ldi	r30, 0x4E	; 78
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	80 81       	ld	r24, Z
    1e0a:	80 64       	ori	r24, 0x40	; 64
    1e0c:	8c 93       	st	X, r24

	// Sets CS12:0 to '001', nO PRESCALING
	CLR_BIT(TCCR1B, CS12);
    1e0e:	ae e4       	ldi	r26, 0x4E	; 78
    1e10:	b0 e0       	ldi	r27, 0x00	; 0
    1e12:	ee e4       	ldi	r30, 0x4E	; 78
    1e14:	f0 e0       	ldi	r31, 0x00	; 0
    1e16:	80 81       	ld	r24, Z
    1e18:	8b 7f       	andi	r24, 0xFB	; 251
    1e1a:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, CS11);
    1e1c:	ae e4       	ldi	r26, 0x4E	; 78
    1e1e:	b0 e0       	ldi	r27, 0x00	; 0
    1e20:	ee e4       	ldi	r30, 0x4E	; 78
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	80 81       	ld	r24, Z
    1e26:	8d 7f       	andi	r24, 0xFD	; 253
    1e28:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, CS10);
    1e2a:	ae e4       	ldi	r26, 0x4E	; 78
    1e2c:	b0 e0       	ldi	r27, 0x00	; 0
    1e2e:	ee e4       	ldi	r30, 0x4E	; 78
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	80 81       	ld	r24, Z
    1e34:	81 60       	ori	r24, 0x01	; 1
    1e36:	8c 93       	st	X, r24

	// Clears TCNT1 to '0', Initialize to '0'
	TCNT1 = 0;
    1e38:	ec e4       	ldi	r30, 0x4C	; 76
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	11 82       	std	Z+1, r1	; 0x01
    1e3e:	10 82       	st	Z, r1

	// Clears ICR1 to '0', Initialize to '0'
	ICR1 = 0;
    1e40:	e6 e4       	ldi	r30, 0x46	; 70
    1e42:	f0 e0       	ldi	r31, 0x00	; 0
    1e44:	11 82       	std	Z+1, r1	; 0x01
    1e46:	10 82       	st	Z, r1
	 */

	// TIMSK1 |= (1 << TICIE1);
	// SREG |= (1 << 7);

}
    1e48:	cf 91       	pop	r28
    1e4a:	df 91       	pop	r29
    1e4c:	08 95       	ret

00001e4e <I2C_Init>:
 *                              					Module Implementation                              					  *
 *******************************************************************************/

// Initializes and enables the Master mode for the TWI Module to start functionality
// const I2C_ConfigType *I2C_ConfigPtr
void I2C_Init(void) {
    1e4e:	df 93       	push	r29
    1e50:	cf 93       	push	r28
    1e52:	cd b7       	in	r28, 0x3d	; 61
    1e54:	de b7       	in	r29, 0x3e	; 62
	 * In the previous equation, I have two unknowns, the TWBR & TWPS
	 * Its the prescaler bits.. so what to choose?
	 * I know that the SCL is 400 KHz, & F_CPU is 8 MHz
	 * I can control TWPS & let it, TWPS = 0, so TWBR = 2
	 */
	TWSR = 0x00;
    1e56:	e1 e2       	ldi	r30, 0x21	; 33
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	10 82       	st	Z, r1
	TWBR = 0x02;
    1e5c:	e0 e2       	ldi	r30, 0x20	; 32
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	82 e0       	ldi	r24, 0x02	; 2
    1e62:	80 83       	st	Z, r24
	TWAR = I2C_SLAVE_ADDR; // Slave Address
    1e64:	e2 e2       	ldi	r30, 0x22	; 34
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	82 e0       	ldi	r24, 0x02	; 2
    1e6a:	80 83       	st	Z, r24
	TWCR = (1 << TWEN); // Enabling the I2C Module
    1e6c:	e6 e5       	ldi	r30, 0x56	; 86
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	84 e0       	ldi	r24, 0x04	; 4
    1e72:	80 83       	st	Z, r24

}
    1e74:	cf 91       	pop	r28
    1e76:	df 91       	pop	r29
    1e78:	08 95       	ret

00001e7a <I2C_Start>:

// Responsible for the SPI to send an array of bytes, a string
void I2C_Start(void) {
    1e7a:	df 93       	push	r29
    1e7c:	cf 93       	push	r28
    1e7e:	cd b7       	in	r28, 0x3d	; 61
    1e80:	de b7       	in	r29, 0x3e	; 62
	// Again enabling the I2C Module, Set the Start Condition, Clearing the TWINT Flag
	/* But why I'm not using the normal set bit technique?
	 * Because I don't want to keep old data, & I want the information always set by me
	 */
	TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWSTA);
    1e82:	e6 e5       	ldi	r30, 0x56	; 86
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	84 ea       	ldi	r24, 0xA4	; 164
    1e88:	80 83       	st	Z, r24

	while(BIT_IS_CLR(TWCR, TWINT)) {
    1e8a:	e6 e5       	ldi	r30, 0x56	; 86
    1e8c:	f0 e0       	ldi	r31, 0x00	; 0
    1e8e:	80 81       	ld	r24, Z
    1e90:	88 23       	and	r24, r24
    1e92:	dc f7       	brge	.-10     	; 0x1e8a <I2C_Start+0x10>
		// Busy Wait for TWINT set in TWCR Register
		// to ensure that start bit is send successfully
	}
}
    1e94:	cf 91       	pop	r28
    1e96:	df 91       	pop	r29
    1e98:	08 95       	ret

00001e9a <I2C_Stop>:

// Responsible for the SPI to receive an array of bytes, a string
void I2C_Stop(void) {
    1e9a:	df 93       	push	r29
    1e9c:	cf 93       	push	r28
    1e9e:	cd b7       	in	r28, 0x3d	; 61
    1ea0:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWSTO);
    1ea2:	e6 e5       	ldi	r30, 0x56	; 86
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	84 e9       	ldi	r24, 0x94	; 148
    1ea8:	80 83       	st	Z, r24
}
    1eaa:	cf 91       	pop	r28
    1eac:	df 91       	pop	r29
    1eae:	08 95       	ret

00001eb0 <I2C_writeByte>:

// Responsible for the SPI to receive an array of bytes, a string
void I2C_writeByte(uint8 data) {
    1eb0:	df 93       	push	r29
    1eb2:	cf 93       	push	r28
    1eb4:	0f 92       	push	r0
    1eb6:	cd b7       	in	r28, 0x3d	; 61
    1eb8:	de b7       	in	r29, 0x3e	; 62
    1eba:	89 83       	std	Y+1, r24	; 0x01
	TWCR = (1 << TWEN) | (1 << TWINT);
    1ebc:	e6 e5       	ldi	r30, 0x56	; 86
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	84 e8       	ldi	r24, 0x84	; 132
    1ec2:	80 83       	st	Z, r24
	TWDR = data;
    1ec4:	e3 e2       	ldi	r30, 0x23	; 35
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	89 81       	ldd	r24, Y+1	; 0x01
    1eca:	80 83       	st	Z, r24

	while(BIT_IS_CLR(TWCR, TWINT)) {
    1ecc:	e6 e5       	ldi	r30, 0x56	; 86
    1ece:	f0 e0       	ldi	r31, 0x00	; 0
    1ed0:	80 81       	ld	r24, Z
    1ed2:	88 23       	and	r24, r24
    1ed4:	dc f7       	brge	.-10     	; 0x1ecc <I2C_writeByte+0x1c>
		// Busy Wait for TWINT set in TWCR Register
		// to ensure that data is sent successfully
	}
}
    1ed6:	0f 90       	pop	r0
    1ed8:	cf 91       	pop	r28
    1eda:	df 91       	pop	r29
    1edc:	08 95       	ret

00001ede <I2C_readByteWithACK>:

// Responsible for the SPI to receive an array of bytes, a string
uint8 I2C_readByteWithACK(void) {
    1ede:	df 93       	push	r29
    1ee0:	cf 93       	push	r28
    1ee2:	cd b7       	in	r28, 0x3d	; 61
    1ee4:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWEA);
    1ee6:	e6 e5       	ldi	r30, 0x56	; 86
    1ee8:	f0 e0       	ldi	r31, 0x00	; 0
    1eea:	84 ec       	ldi	r24, 0xC4	; 196
    1eec:	80 83       	st	Z, r24

	while(BIT_IS_CLR(TWCR, TWINT)) {
    1eee:	e6 e5       	ldi	r30, 0x56	; 86
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	80 81       	ld	r24, Z
    1ef4:	88 23       	and	r24, r24
    1ef6:	dc f7       	brge	.-10     	; 0x1eee <I2C_readByteWithACK+0x10>
		// Busy Wait for TWINT set in TWCR Register
		// to ensure that data is sent successfully
	}
	return TWDR;
    1ef8:	e3 e2       	ldi	r30, 0x23	; 35
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	80 81       	ld	r24, Z
}
    1efe:	cf 91       	pop	r28
    1f00:	df 91       	pop	r29
    1f02:	08 95       	ret

00001f04 <I2C_readByteWithNACK>:

// Responsible for the SPI to receive an array of bytes, a string
uint8 I2C_readByteWithNACK(void) {
    1f04:	df 93       	push	r29
    1f06:	cf 93       	push	r28
    1f08:	cd b7       	in	r28, 0x3d	; 61
    1f0a:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWEN) | (1 << TWINT);
    1f0c:	e6 e5       	ldi	r30, 0x56	; 86
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	84 e8       	ldi	r24, 0x84	; 132
    1f12:	80 83       	st	Z, r24

	while(BIT_IS_CLR(TWCR, TWINT)) {
    1f14:	e6 e5       	ldi	r30, 0x56	; 86
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	80 81       	ld	r24, Z
    1f1a:	88 23       	and	r24, r24
    1f1c:	dc f7       	brge	.-10     	; 0x1f14 <I2C_readByteWithNACK+0x10>
		// Busy Wait for TWINT set in TWCR Register
		// to ensure that data is sent successfully
	}
	return TWDR;
    1f1e:	e3 e2       	ldi	r30, 0x23	; 35
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	80 81       	ld	r24, Z
}
    1f24:	cf 91       	pop	r28
    1f26:	df 91       	pop	r29
    1f28:	08 95       	ret

00001f2a <I2C_getStatus>:

// Responsible for the SPI to receive an array of bytes, a string
uint8 I2C_getStatus(void) {
    1f2a:	df 93       	push	r29
    1f2c:	cf 93       	push	r28
    1f2e:	0f 92       	push	r0
    1f30:	cd b7       	in	r28, 0x3d	; 61
    1f32:	de b7       	in	r29, 0x3e	; 62
	uint8 I2CStatus;
	I2CStatus = TWSR & I2C_INITIALSTATUS;
    1f34:	e1 e2       	ldi	r30, 0x21	; 33
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	80 81       	ld	r24, Z
    1f3a:	88 7f       	andi	r24, 0xF8	; 248
    1f3c:	89 83       	std	Y+1, r24	; 0x01
	return I2CStatus;
    1f3e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f40:	0f 90       	pop	r0
    1f42:	cf 91       	pop	r28
    1f44:	df 91       	pop	r29
    1f46:	08 95       	ret

00001f48 <GPIO_setupPinDirection>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
GPIO_Error_t GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction) {
    1f48:	df 93       	push	r29
    1f4a:	cf 93       	push	r28
    1f4c:	00 d0       	rcall	.+0      	; 0x1f4e <GPIO_setupPinDirection+0x6>
    1f4e:	00 d0       	rcall	.+0      	; 0x1f50 <GPIO_setupPinDirection+0x8>
    1f50:	00 d0       	rcall	.+0      	; 0x1f52 <GPIO_setupPinDirection+0xa>
    1f52:	cd b7       	in	r28, 0x3d	; 61
    1f54:	de b7       	in	r29, 0x3e	; 62
    1f56:	8a 83       	std	Y+2, r24	; 0x02
    1f58:	6b 83       	std	Y+3, r22	; 0x03
    1f5a:	4c 83       	std	Y+4, r20	; 0x04
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t GPIO_Driver_Checker = NULL;
    1f5c:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    1f5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f60:	88 30       	cpi	r24, 0x08	; 8
    1f62:	18 f0       	brcs	.+6      	; 0x1f6a <GPIO_setupPinDirection+0x22>
		// Checks if the entered pin number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	89 83       	std	Y+1, r24	; 0x01
    1f68:	e1 c0       	rjmp	.+450    	; 0x212c <GPIO_setupPinDirection+0x1e4>
	}
	else if((port_num >= NUM_OF_PORTS)) {
    1f6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6c:	84 30       	cpi	r24, 0x04	; 4
    1f6e:	18 f0       	brcs	.+6      	; 0x1f76 <GPIO_setupPinDirection+0x2e>
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    1f70:	82 e0       	ldi	r24, 0x02	; 2
    1f72:	89 83       	std	Y+1, r24	; 0x01
    1f74:	db c0       	rjmp	.+438    	; 0x212c <GPIO_setupPinDirection+0x1e4>
	}
	else if((direction != PIN_INPUT) && (direction != PIN_OUTPUT)) {
    1f76:	8c 81       	ldd	r24, Y+4	; 0x04
    1f78:	88 23       	and	r24, r24
    1f7a:	31 f0       	breq	.+12     	; 0x1f88 <GPIO_setupPinDirection+0x40>
    1f7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f7e:	81 30       	cpi	r24, 0x01	; 1
    1f80:	19 f0       	breq	.+6      	; 0x1f88 <GPIO_setupPinDirection+0x40>
		// Checks if the entered direction is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
    1f82:	83 e0       	ldi	r24, 0x03	; 3
    1f84:	89 83       	std	Y+1, r24	; 0x01
    1f86:	d2 c0       	rjmp	.+420    	; 0x212c <GPIO_setupPinDirection+0x1e4>
	}
	else {
		// Setup the pin direction as required
		switch(port_num) {
    1f88:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8a:	28 2f       	mov	r18, r24
    1f8c:	30 e0       	ldi	r19, 0x00	; 0
    1f8e:	3e 83       	std	Y+6, r19	; 0x06
    1f90:	2d 83       	std	Y+5, r18	; 0x05
    1f92:	8d 81       	ldd	r24, Y+5	; 0x05
    1f94:	9e 81       	ldd	r25, Y+6	; 0x06
    1f96:	81 30       	cpi	r24, 0x01	; 1
    1f98:	91 05       	cpc	r25, r1
    1f9a:	09 f4       	brne	.+2      	; 0x1f9e <GPIO_setupPinDirection+0x56>
    1f9c:	43 c0       	rjmp	.+134    	; 0x2024 <GPIO_setupPinDirection+0xdc>
    1f9e:	2d 81       	ldd	r18, Y+5	; 0x05
    1fa0:	3e 81       	ldd	r19, Y+6	; 0x06
    1fa2:	22 30       	cpi	r18, 0x02	; 2
    1fa4:	31 05       	cpc	r19, r1
    1fa6:	2c f4       	brge	.+10     	; 0x1fb2 <GPIO_setupPinDirection+0x6a>
    1fa8:	8d 81       	ldd	r24, Y+5	; 0x05
    1faa:	9e 81       	ldd	r25, Y+6	; 0x06
    1fac:	00 97       	sbiw	r24, 0x00	; 0
    1fae:	71 f0       	breq	.+28     	; 0x1fcc <GPIO_setupPinDirection+0x84>
    1fb0:	bc c0       	rjmp	.+376    	; 0x212a <GPIO_setupPinDirection+0x1e2>
    1fb2:	2d 81       	ldd	r18, Y+5	; 0x05
    1fb4:	3e 81       	ldd	r19, Y+6	; 0x06
    1fb6:	22 30       	cpi	r18, 0x02	; 2
    1fb8:	31 05       	cpc	r19, r1
    1fba:	09 f4       	brne	.+2      	; 0x1fbe <GPIO_setupPinDirection+0x76>
    1fbc:	5f c0       	rjmp	.+190    	; 0x207c <GPIO_setupPinDirection+0x134>
    1fbe:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc0:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc2:	83 30       	cpi	r24, 0x03	; 3
    1fc4:	91 05       	cpc	r25, r1
    1fc6:	09 f4       	brne	.+2      	; 0x1fca <GPIO_setupPinDirection+0x82>
    1fc8:	85 c0       	rjmp	.+266    	; 0x20d4 <GPIO_setupPinDirection+0x18c>
    1fca:	af c0       	rjmp	.+350    	; 0x212a <GPIO_setupPinDirection+0x1e2>
		case PORT_A:
			if(direction == PIN_OUTPUT) {
    1fcc:	8c 81       	ldd	r24, Y+4	; 0x04
    1fce:	81 30       	cpi	r24, 0x01	; 1
    1fd0:	a1 f4       	brne	.+40     	; 0x1ffa <GPIO_setupPinDirection+0xb2>
				SET_BIT(DDRA, pin_num);
    1fd2:	aa e3       	ldi	r26, 0x3A	; 58
    1fd4:	b0 e0       	ldi	r27, 0x00	; 0
    1fd6:	ea e3       	ldi	r30, 0x3A	; 58
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	80 81       	ld	r24, Z
    1fdc:	48 2f       	mov	r20, r24
    1fde:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe0:	28 2f       	mov	r18, r24
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	02 2e       	mov	r0, r18
    1fea:	02 c0       	rjmp	.+4      	; 0x1ff0 <GPIO_setupPinDirection+0xa8>
    1fec:	88 0f       	add	r24, r24
    1fee:	99 1f       	adc	r25, r25
    1ff0:	0a 94       	dec	r0
    1ff2:	e2 f7       	brpl	.-8      	; 0x1fec <GPIO_setupPinDirection+0xa4>
    1ff4:	84 2b       	or	r24, r20
    1ff6:	8c 93       	st	X, r24
    1ff8:	98 c0       	rjmp	.+304    	; 0x212a <GPIO_setupPinDirection+0x1e2>
			}
			else {
				CLR_BIT(DDRA, pin_num);
    1ffa:	aa e3       	ldi	r26, 0x3A	; 58
    1ffc:	b0 e0       	ldi	r27, 0x00	; 0
    1ffe:	ea e3       	ldi	r30, 0x3A	; 58
    2000:	f0 e0       	ldi	r31, 0x00	; 0
    2002:	80 81       	ld	r24, Z
    2004:	48 2f       	mov	r20, r24
    2006:	8b 81       	ldd	r24, Y+3	; 0x03
    2008:	28 2f       	mov	r18, r24
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	02 2e       	mov	r0, r18
    2012:	02 c0       	rjmp	.+4      	; 0x2018 <GPIO_setupPinDirection+0xd0>
    2014:	88 0f       	add	r24, r24
    2016:	99 1f       	adc	r25, r25
    2018:	0a 94       	dec	r0
    201a:	e2 f7       	brpl	.-8      	; 0x2014 <GPIO_setupPinDirection+0xcc>
    201c:	80 95       	com	r24
    201e:	84 23       	and	r24, r20
    2020:	8c 93       	st	X, r24
    2022:	83 c0       	rjmp	.+262    	; 0x212a <GPIO_setupPinDirection+0x1e2>
			}
			break;
		case PORT_B:
			if(direction == PIN_OUTPUT) {
    2024:	8c 81       	ldd	r24, Y+4	; 0x04
    2026:	81 30       	cpi	r24, 0x01	; 1
    2028:	a1 f4       	brne	.+40     	; 0x2052 <GPIO_setupPinDirection+0x10a>
				SET_BIT(DDRB,pin_num);
    202a:	a7 e3       	ldi	r26, 0x37	; 55
    202c:	b0 e0       	ldi	r27, 0x00	; 0
    202e:	e7 e3       	ldi	r30, 0x37	; 55
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	80 81       	ld	r24, Z
    2034:	48 2f       	mov	r20, r24
    2036:	8b 81       	ldd	r24, Y+3	; 0x03
    2038:	28 2f       	mov	r18, r24
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	81 e0       	ldi	r24, 0x01	; 1
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	02 2e       	mov	r0, r18
    2042:	02 c0       	rjmp	.+4      	; 0x2048 <GPIO_setupPinDirection+0x100>
    2044:	88 0f       	add	r24, r24
    2046:	99 1f       	adc	r25, r25
    2048:	0a 94       	dec	r0
    204a:	e2 f7       	brpl	.-8      	; 0x2044 <GPIO_setupPinDirection+0xfc>
    204c:	84 2b       	or	r24, r20
    204e:	8c 93       	st	X, r24
    2050:	6c c0       	rjmp	.+216    	; 0x212a <GPIO_setupPinDirection+0x1e2>
			}
			else {
				CLR_BIT(DDRB,pin_num);
    2052:	a7 e3       	ldi	r26, 0x37	; 55
    2054:	b0 e0       	ldi	r27, 0x00	; 0
    2056:	e7 e3       	ldi	r30, 0x37	; 55
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	80 81       	ld	r24, Z
    205c:	48 2f       	mov	r20, r24
    205e:	8b 81       	ldd	r24, Y+3	; 0x03
    2060:	28 2f       	mov	r18, r24
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	02 2e       	mov	r0, r18
    206a:	02 c0       	rjmp	.+4      	; 0x2070 <GPIO_setupPinDirection+0x128>
    206c:	88 0f       	add	r24, r24
    206e:	99 1f       	adc	r25, r25
    2070:	0a 94       	dec	r0
    2072:	e2 f7       	brpl	.-8      	; 0x206c <GPIO_setupPinDirection+0x124>
    2074:	80 95       	com	r24
    2076:	84 23       	and	r24, r20
    2078:	8c 93       	st	X, r24
    207a:	57 c0       	rjmp	.+174    	; 0x212a <GPIO_setupPinDirection+0x1e2>
			}
			break;
		case PORT_C:
			if(direction == PIN_OUTPUT) {
    207c:	8c 81       	ldd	r24, Y+4	; 0x04
    207e:	81 30       	cpi	r24, 0x01	; 1
    2080:	a1 f4       	brne	.+40     	; 0x20aa <GPIO_setupPinDirection+0x162>
				SET_BIT(DDRC,pin_num);
    2082:	a4 e3       	ldi	r26, 0x34	; 52
    2084:	b0 e0       	ldi	r27, 0x00	; 0
    2086:	e4 e3       	ldi	r30, 0x34	; 52
    2088:	f0 e0       	ldi	r31, 0x00	; 0
    208a:	80 81       	ld	r24, Z
    208c:	48 2f       	mov	r20, r24
    208e:	8b 81       	ldd	r24, Y+3	; 0x03
    2090:	28 2f       	mov	r18, r24
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	81 e0       	ldi	r24, 0x01	; 1
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	02 2e       	mov	r0, r18
    209a:	02 c0       	rjmp	.+4      	; 0x20a0 <GPIO_setupPinDirection+0x158>
    209c:	88 0f       	add	r24, r24
    209e:	99 1f       	adc	r25, r25
    20a0:	0a 94       	dec	r0
    20a2:	e2 f7       	brpl	.-8      	; 0x209c <GPIO_setupPinDirection+0x154>
    20a4:	84 2b       	or	r24, r20
    20a6:	8c 93       	st	X, r24
    20a8:	40 c0       	rjmp	.+128    	; 0x212a <GPIO_setupPinDirection+0x1e2>
			}
			else {
				CLR_BIT(DDRC,pin_num);
    20aa:	a4 e3       	ldi	r26, 0x34	; 52
    20ac:	b0 e0       	ldi	r27, 0x00	; 0
    20ae:	e4 e3       	ldi	r30, 0x34	; 52
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	80 81       	ld	r24, Z
    20b4:	48 2f       	mov	r20, r24
    20b6:	8b 81       	ldd	r24, Y+3	; 0x03
    20b8:	28 2f       	mov	r18, r24
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	81 e0       	ldi	r24, 0x01	; 1
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	02 2e       	mov	r0, r18
    20c2:	02 c0       	rjmp	.+4      	; 0x20c8 <GPIO_setupPinDirection+0x180>
    20c4:	88 0f       	add	r24, r24
    20c6:	99 1f       	adc	r25, r25
    20c8:	0a 94       	dec	r0
    20ca:	e2 f7       	brpl	.-8      	; 0x20c4 <GPIO_setupPinDirection+0x17c>
    20cc:	80 95       	com	r24
    20ce:	84 23       	and	r24, r20
    20d0:	8c 93       	st	X, r24
    20d2:	2b c0       	rjmp	.+86     	; 0x212a <GPIO_setupPinDirection+0x1e2>
			}
			break;
		case PORT_D:
			if(direction == PIN_OUTPUT) {
    20d4:	8c 81       	ldd	r24, Y+4	; 0x04
    20d6:	81 30       	cpi	r24, 0x01	; 1
    20d8:	a1 f4       	brne	.+40     	; 0x2102 <GPIO_setupPinDirection+0x1ba>
				SET_BIT(DDRD,pin_num);
    20da:	a1 e3       	ldi	r26, 0x31	; 49
    20dc:	b0 e0       	ldi	r27, 0x00	; 0
    20de:	e1 e3       	ldi	r30, 0x31	; 49
    20e0:	f0 e0       	ldi	r31, 0x00	; 0
    20e2:	80 81       	ld	r24, Z
    20e4:	48 2f       	mov	r20, r24
    20e6:	8b 81       	ldd	r24, Y+3	; 0x03
    20e8:	28 2f       	mov	r18, r24
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	81 e0       	ldi	r24, 0x01	; 1
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	02 2e       	mov	r0, r18
    20f2:	02 c0       	rjmp	.+4      	; 0x20f8 <GPIO_setupPinDirection+0x1b0>
    20f4:	88 0f       	add	r24, r24
    20f6:	99 1f       	adc	r25, r25
    20f8:	0a 94       	dec	r0
    20fa:	e2 f7       	brpl	.-8      	; 0x20f4 <GPIO_setupPinDirection+0x1ac>
    20fc:	84 2b       	or	r24, r20
    20fe:	8c 93       	st	X, r24
    2100:	14 c0       	rjmp	.+40     	; 0x212a <GPIO_setupPinDirection+0x1e2>
			}
			else {
				CLR_BIT(DDRD,pin_num);
    2102:	a1 e3       	ldi	r26, 0x31	; 49
    2104:	b0 e0       	ldi	r27, 0x00	; 0
    2106:	e1 e3       	ldi	r30, 0x31	; 49
    2108:	f0 e0       	ldi	r31, 0x00	; 0
    210a:	80 81       	ld	r24, Z
    210c:	48 2f       	mov	r20, r24
    210e:	8b 81       	ldd	r24, Y+3	; 0x03
    2110:	28 2f       	mov	r18, r24
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	02 2e       	mov	r0, r18
    211a:	02 c0       	rjmp	.+4      	; 0x2120 <GPIO_setupPinDirection+0x1d8>
    211c:	88 0f       	add	r24, r24
    211e:	99 1f       	adc	r25, r25
    2120:	0a 94       	dec	r0
    2122:	e2 f7       	brpl	.-8      	; 0x211c <GPIO_setupPinDirection+0x1d4>
    2124:	80 95       	com	r24
    2126:	84 23       	and	r24, r20
    2128:	8c 93       	st	X, r24
			}
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    212a:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    212c:	89 81       	ldd	r24, Y+1	; 0x01
}
    212e:	26 96       	adiw	r28, 0x06	; 6
    2130:	0f b6       	in	r0, 0x3f	; 63
    2132:	f8 94       	cli
    2134:	de bf       	out	0x3e, r29	; 62
    2136:	0f be       	out	0x3f, r0	; 63
    2138:	cd bf       	out	0x3d, r28	; 61
    213a:	cf 91       	pop	r28
    213c:	df 91       	pop	r29
    213e:	08 95       	ret

00002140 <GPIO_writePin>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
GPIO_Error_t GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value) {
    2140:	df 93       	push	r29
    2142:	cf 93       	push	r28
    2144:	00 d0       	rcall	.+0      	; 0x2146 <GPIO_writePin+0x6>
    2146:	00 d0       	rcall	.+0      	; 0x2148 <GPIO_writePin+0x8>
    2148:	00 d0       	rcall	.+0      	; 0x214a <GPIO_writePin+0xa>
    214a:	cd b7       	in	r28, 0x3d	; 61
    214c:	de b7       	in	r29, 0x3e	; 62
    214e:	8a 83       	std	Y+2, r24	; 0x02
    2150:	6b 83       	std	Y+3, r22	; 0x03
    2152:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t GPIO_Driver_Checker = NULL;
    2154:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    2156:	8b 81       	ldd	r24, Y+3	; 0x03
    2158:	88 30       	cpi	r24, 0x08	; 8
    215a:	18 f0       	brcs	.+6      	; 0x2162 <GPIO_writePin+0x22>
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
    215c:	81 e0       	ldi	r24, 0x01	; 1
    215e:	89 83       	std	Y+1, r24	; 0x01
    2160:	e1 c0       	rjmp	.+450    	; 0x2324 <GPIO_writePin+0x1e4>
	}
	else if((port_num >= NUM_OF_PORTS)) {
    2162:	8a 81       	ldd	r24, Y+2	; 0x02
    2164:	84 30       	cpi	r24, 0x04	; 4
    2166:	18 f0       	brcs	.+6      	; 0x216e <GPIO_writePin+0x2e>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    2168:	82 e0       	ldi	r24, 0x02	; 2
    216a:	89 83       	std	Y+1, r24	; 0x01
    216c:	db c0       	rjmp	.+438    	; 0x2324 <GPIO_writePin+0x1e4>
	}
	else if((value != LOGIC_HIGH) && (value != LOGIC_LOW)) {
    216e:	8c 81       	ldd	r24, Y+4	; 0x04
    2170:	81 30       	cpi	r24, 0x01	; 1
    2172:	31 f0       	breq	.+12     	; 0x2180 <GPIO_writePin+0x40>
    2174:	8c 81       	ldd	r24, Y+4	; 0x04
    2176:	88 23       	and	r24, r24
    2178:	19 f0       	breq	.+6      	; 0x2180 <GPIO_writePin+0x40>
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
    217a:	83 e0       	ldi	r24, 0x03	; 3
    217c:	89 83       	std	Y+1, r24	; 0x01
    217e:	d2 c0       	rjmp	.+420    	; 0x2324 <GPIO_writePin+0x1e4>
	}
	else {
		switch(port_num) {
    2180:	8a 81       	ldd	r24, Y+2	; 0x02
    2182:	28 2f       	mov	r18, r24
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	3e 83       	std	Y+6, r19	; 0x06
    2188:	2d 83       	std	Y+5, r18	; 0x05
    218a:	8d 81       	ldd	r24, Y+5	; 0x05
    218c:	9e 81       	ldd	r25, Y+6	; 0x06
    218e:	81 30       	cpi	r24, 0x01	; 1
    2190:	91 05       	cpc	r25, r1
    2192:	09 f4       	brne	.+2      	; 0x2196 <GPIO_writePin+0x56>
    2194:	43 c0       	rjmp	.+134    	; 0x221c <GPIO_writePin+0xdc>
    2196:	2d 81       	ldd	r18, Y+5	; 0x05
    2198:	3e 81       	ldd	r19, Y+6	; 0x06
    219a:	22 30       	cpi	r18, 0x02	; 2
    219c:	31 05       	cpc	r19, r1
    219e:	2c f4       	brge	.+10     	; 0x21aa <GPIO_writePin+0x6a>
    21a0:	8d 81       	ldd	r24, Y+5	; 0x05
    21a2:	9e 81       	ldd	r25, Y+6	; 0x06
    21a4:	00 97       	sbiw	r24, 0x00	; 0
    21a6:	71 f0       	breq	.+28     	; 0x21c4 <GPIO_writePin+0x84>
    21a8:	bc c0       	rjmp	.+376    	; 0x2322 <GPIO_writePin+0x1e2>
    21aa:	2d 81       	ldd	r18, Y+5	; 0x05
    21ac:	3e 81       	ldd	r19, Y+6	; 0x06
    21ae:	22 30       	cpi	r18, 0x02	; 2
    21b0:	31 05       	cpc	r19, r1
    21b2:	09 f4       	brne	.+2      	; 0x21b6 <GPIO_writePin+0x76>
    21b4:	5f c0       	rjmp	.+190    	; 0x2274 <GPIO_writePin+0x134>
    21b6:	8d 81       	ldd	r24, Y+5	; 0x05
    21b8:	9e 81       	ldd	r25, Y+6	; 0x06
    21ba:	83 30       	cpi	r24, 0x03	; 3
    21bc:	91 05       	cpc	r25, r1
    21be:	09 f4       	brne	.+2      	; 0x21c2 <GPIO_writePin+0x82>
    21c0:	85 c0       	rjmp	.+266    	; 0x22cc <GPIO_writePin+0x18c>
    21c2:	af c0       	rjmp	.+350    	; 0x2322 <GPIO_writePin+0x1e2>
		case PORT_A:
			if(value == LOGIC_HIGH) {
    21c4:	8c 81       	ldd	r24, Y+4	; 0x04
    21c6:	81 30       	cpi	r24, 0x01	; 1
    21c8:	a1 f4       	brne	.+40     	; 0x21f2 <GPIO_writePin+0xb2>
				SET_BIT(PORTA,pin_num);
    21ca:	ab e3       	ldi	r26, 0x3B	; 59
    21cc:	b0 e0       	ldi	r27, 0x00	; 0
    21ce:	eb e3       	ldi	r30, 0x3B	; 59
    21d0:	f0 e0       	ldi	r31, 0x00	; 0
    21d2:	80 81       	ld	r24, Z
    21d4:	48 2f       	mov	r20, r24
    21d6:	8b 81       	ldd	r24, Y+3	; 0x03
    21d8:	28 2f       	mov	r18, r24
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	81 e0       	ldi	r24, 0x01	; 1
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	02 2e       	mov	r0, r18
    21e2:	02 c0       	rjmp	.+4      	; 0x21e8 <GPIO_writePin+0xa8>
    21e4:	88 0f       	add	r24, r24
    21e6:	99 1f       	adc	r25, r25
    21e8:	0a 94       	dec	r0
    21ea:	e2 f7       	brpl	.-8      	; 0x21e4 <GPIO_writePin+0xa4>
    21ec:	84 2b       	or	r24, r20
    21ee:	8c 93       	st	X, r24
    21f0:	98 c0       	rjmp	.+304    	; 0x2322 <GPIO_writePin+0x1e2>
			}
			else {
				CLR_BIT(PORTA,pin_num);
    21f2:	ab e3       	ldi	r26, 0x3B	; 59
    21f4:	b0 e0       	ldi	r27, 0x00	; 0
    21f6:	eb e3       	ldi	r30, 0x3B	; 59
    21f8:	f0 e0       	ldi	r31, 0x00	; 0
    21fa:	80 81       	ld	r24, Z
    21fc:	48 2f       	mov	r20, r24
    21fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2200:	28 2f       	mov	r18, r24
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	81 e0       	ldi	r24, 0x01	; 1
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	02 2e       	mov	r0, r18
    220a:	02 c0       	rjmp	.+4      	; 0x2210 <GPIO_writePin+0xd0>
    220c:	88 0f       	add	r24, r24
    220e:	99 1f       	adc	r25, r25
    2210:	0a 94       	dec	r0
    2212:	e2 f7       	brpl	.-8      	; 0x220c <GPIO_writePin+0xcc>
    2214:	80 95       	com	r24
    2216:	84 23       	and	r24, r20
    2218:	8c 93       	st	X, r24
    221a:	83 c0       	rjmp	.+262    	; 0x2322 <GPIO_writePin+0x1e2>
			}
			break;
		case PORT_B:
			if(value == LOGIC_HIGH) {
    221c:	8c 81       	ldd	r24, Y+4	; 0x04
    221e:	81 30       	cpi	r24, 0x01	; 1
    2220:	a1 f4       	brne	.+40     	; 0x224a <GPIO_writePin+0x10a>
				SET_BIT(PORTB,pin_num);
    2222:	a8 e3       	ldi	r26, 0x38	; 56
    2224:	b0 e0       	ldi	r27, 0x00	; 0
    2226:	e8 e3       	ldi	r30, 0x38	; 56
    2228:	f0 e0       	ldi	r31, 0x00	; 0
    222a:	80 81       	ld	r24, Z
    222c:	48 2f       	mov	r20, r24
    222e:	8b 81       	ldd	r24, Y+3	; 0x03
    2230:	28 2f       	mov	r18, r24
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	81 e0       	ldi	r24, 0x01	; 1
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	02 2e       	mov	r0, r18
    223a:	02 c0       	rjmp	.+4      	; 0x2240 <GPIO_writePin+0x100>
    223c:	88 0f       	add	r24, r24
    223e:	99 1f       	adc	r25, r25
    2240:	0a 94       	dec	r0
    2242:	e2 f7       	brpl	.-8      	; 0x223c <GPIO_writePin+0xfc>
    2244:	84 2b       	or	r24, r20
    2246:	8c 93       	st	X, r24
    2248:	6c c0       	rjmp	.+216    	; 0x2322 <GPIO_writePin+0x1e2>
			}
			else {
				CLR_BIT(PORTB,pin_num);
    224a:	a8 e3       	ldi	r26, 0x38	; 56
    224c:	b0 e0       	ldi	r27, 0x00	; 0
    224e:	e8 e3       	ldi	r30, 0x38	; 56
    2250:	f0 e0       	ldi	r31, 0x00	; 0
    2252:	80 81       	ld	r24, Z
    2254:	48 2f       	mov	r20, r24
    2256:	8b 81       	ldd	r24, Y+3	; 0x03
    2258:	28 2f       	mov	r18, r24
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	81 e0       	ldi	r24, 0x01	; 1
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	02 2e       	mov	r0, r18
    2262:	02 c0       	rjmp	.+4      	; 0x2268 <GPIO_writePin+0x128>
    2264:	88 0f       	add	r24, r24
    2266:	99 1f       	adc	r25, r25
    2268:	0a 94       	dec	r0
    226a:	e2 f7       	brpl	.-8      	; 0x2264 <GPIO_writePin+0x124>
    226c:	80 95       	com	r24
    226e:	84 23       	and	r24, r20
    2270:	8c 93       	st	X, r24
    2272:	57 c0       	rjmp	.+174    	; 0x2322 <GPIO_writePin+0x1e2>
			}
			break;
		case PORT_C:
			if(value == LOGIC_HIGH) {
    2274:	8c 81       	ldd	r24, Y+4	; 0x04
    2276:	81 30       	cpi	r24, 0x01	; 1
    2278:	a1 f4       	brne	.+40     	; 0x22a2 <GPIO_writePin+0x162>
				SET_BIT(PORTC,pin_num);
    227a:	a5 e3       	ldi	r26, 0x35	; 53
    227c:	b0 e0       	ldi	r27, 0x00	; 0
    227e:	e5 e3       	ldi	r30, 0x35	; 53
    2280:	f0 e0       	ldi	r31, 0x00	; 0
    2282:	80 81       	ld	r24, Z
    2284:	48 2f       	mov	r20, r24
    2286:	8b 81       	ldd	r24, Y+3	; 0x03
    2288:	28 2f       	mov	r18, r24
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	81 e0       	ldi	r24, 0x01	; 1
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	02 2e       	mov	r0, r18
    2292:	02 c0       	rjmp	.+4      	; 0x2298 <GPIO_writePin+0x158>
    2294:	88 0f       	add	r24, r24
    2296:	99 1f       	adc	r25, r25
    2298:	0a 94       	dec	r0
    229a:	e2 f7       	brpl	.-8      	; 0x2294 <GPIO_writePin+0x154>
    229c:	84 2b       	or	r24, r20
    229e:	8c 93       	st	X, r24
    22a0:	40 c0       	rjmp	.+128    	; 0x2322 <GPIO_writePin+0x1e2>
			}
			else {
				CLR_BIT(PORTC,pin_num);
    22a2:	a5 e3       	ldi	r26, 0x35	; 53
    22a4:	b0 e0       	ldi	r27, 0x00	; 0
    22a6:	e5 e3       	ldi	r30, 0x35	; 53
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	80 81       	ld	r24, Z
    22ac:	48 2f       	mov	r20, r24
    22ae:	8b 81       	ldd	r24, Y+3	; 0x03
    22b0:	28 2f       	mov	r18, r24
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	81 e0       	ldi	r24, 0x01	; 1
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	02 2e       	mov	r0, r18
    22ba:	02 c0       	rjmp	.+4      	; 0x22c0 <GPIO_writePin+0x180>
    22bc:	88 0f       	add	r24, r24
    22be:	99 1f       	adc	r25, r25
    22c0:	0a 94       	dec	r0
    22c2:	e2 f7       	brpl	.-8      	; 0x22bc <GPIO_writePin+0x17c>
    22c4:	80 95       	com	r24
    22c6:	84 23       	and	r24, r20
    22c8:	8c 93       	st	X, r24
    22ca:	2b c0       	rjmp	.+86     	; 0x2322 <GPIO_writePin+0x1e2>
			}
			break;
		case PORT_D:
			if(value == LOGIC_HIGH) {
    22cc:	8c 81       	ldd	r24, Y+4	; 0x04
    22ce:	81 30       	cpi	r24, 0x01	; 1
    22d0:	a1 f4       	brne	.+40     	; 0x22fa <GPIO_writePin+0x1ba>
				SET_BIT(PORTD,pin_num);
    22d2:	a2 e3       	ldi	r26, 0x32	; 50
    22d4:	b0 e0       	ldi	r27, 0x00	; 0
    22d6:	e2 e3       	ldi	r30, 0x32	; 50
    22d8:	f0 e0       	ldi	r31, 0x00	; 0
    22da:	80 81       	ld	r24, Z
    22dc:	48 2f       	mov	r20, r24
    22de:	8b 81       	ldd	r24, Y+3	; 0x03
    22e0:	28 2f       	mov	r18, r24
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	81 e0       	ldi	r24, 0x01	; 1
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	02 2e       	mov	r0, r18
    22ea:	02 c0       	rjmp	.+4      	; 0x22f0 <GPIO_writePin+0x1b0>
    22ec:	88 0f       	add	r24, r24
    22ee:	99 1f       	adc	r25, r25
    22f0:	0a 94       	dec	r0
    22f2:	e2 f7       	brpl	.-8      	; 0x22ec <GPIO_writePin+0x1ac>
    22f4:	84 2b       	or	r24, r20
    22f6:	8c 93       	st	X, r24
    22f8:	14 c0       	rjmp	.+40     	; 0x2322 <GPIO_writePin+0x1e2>
			}
			else {
				CLR_BIT(PORTD,pin_num);
    22fa:	a2 e3       	ldi	r26, 0x32	; 50
    22fc:	b0 e0       	ldi	r27, 0x00	; 0
    22fe:	e2 e3       	ldi	r30, 0x32	; 50
    2300:	f0 e0       	ldi	r31, 0x00	; 0
    2302:	80 81       	ld	r24, Z
    2304:	48 2f       	mov	r20, r24
    2306:	8b 81       	ldd	r24, Y+3	; 0x03
    2308:	28 2f       	mov	r18, r24
    230a:	30 e0       	ldi	r19, 0x00	; 0
    230c:	81 e0       	ldi	r24, 0x01	; 1
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	02 2e       	mov	r0, r18
    2312:	02 c0       	rjmp	.+4      	; 0x2318 <GPIO_writePin+0x1d8>
    2314:	88 0f       	add	r24, r24
    2316:	99 1f       	adc	r25, r25
    2318:	0a 94       	dec	r0
    231a:	e2 f7       	brpl	.-8      	; 0x2314 <GPIO_writePin+0x1d4>
    231c:	80 95       	com	r24
    231e:	84 23       	and	r24, r20
    2320:	8c 93       	st	X, r24
			}
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    2322:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    2324:	89 81       	ldd	r24, Y+1	; 0x01
}
    2326:	26 96       	adiw	r28, 0x06	; 6
    2328:	0f b6       	in	r0, 0x3f	; 63
    232a:	f8 94       	cli
    232c:	de bf       	out	0x3e, r29	; 62
    232e:	0f be       	out	0x3f, r0	; 63
    2330:	cd bf       	out	0x3d, r28	; 61
    2332:	cf 91       	pop	r28
    2334:	df 91       	pop	r29
    2336:	08 95       	ret

00002338 <GPIO_togglePin>:
/*
 * Description :
 * Toggles a certain pin when requested.
 * If the input port number or pin number are not correct, The function will return an error.
 */
GPIO_Error_t GPIO_togglePin(uint8 port_num, uint8 pin_num) {
    2338:	df 93       	push	r29
    233a:	cf 93       	push	r28
    233c:	00 d0       	rcall	.+0      	; 0x233e <GPIO_togglePin+0x6>
    233e:	00 d0       	rcall	.+0      	; 0x2340 <GPIO_togglePin+0x8>
    2340:	0f 92       	push	r0
    2342:	cd b7       	in	r28, 0x3d	; 61
    2344:	de b7       	in	r29, 0x3e	; 62
    2346:	8a 83       	std	Y+2, r24	; 0x02
    2348:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t GPIO_Driver_Checker = NULL;
    234a:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    234c:	8b 81       	ldd	r24, Y+3	; 0x03
    234e:	88 30       	cpi	r24, 0x08	; 8
    2350:	18 f0       	brcs	.+6      	; 0x2358 <GPIO_togglePin+0x20>
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
    2352:	81 e0       	ldi	r24, 0x01	; 1
    2354:	89 83       	std	Y+1, r24	; 0x01
    2356:	75 c0       	rjmp	.+234    	; 0x2442 <GPIO_togglePin+0x10a>
	}
	else if((port_num >= NUM_OF_PORTS)) {
    2358:	8a 81       	ldd	r24, Y+2	; 0x02
    235a:	84 30       	cpi	r24, 0x04	; 4
    235c:	18 f0       	brcs	.+6      	; 0x2364 <GPIO_togglePin+0x2c>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    235e:	82 e0       	ldi	r24, 0x02	; 2
    2360:	89 83       	std	Y+1, r24	; 0x01
    2362:	6f c0       	rjmp	.+222    	; 0x2442 <GPIO_togglePin+0x10a>
	}
	else {
		switch(port_num) {
    2364:	8a 81       	ldd	r24, Y+2	; 0x02
    2366:	28 2f       	mov	r18, r24
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	3d 83       	std	Y+5, r19	; 0x05
    236c:	2c 83       	std	Y+4, r18	; 0x04
    236e:	8c 81       	ldd	r24, Y+4	; 0x04
    2370:	9d 81       	ldd	r25, Y+5	; 0x05
    2372:	81 30       	cpi	r24, 0x01	; 1
    2374:	91 05       	cpc	r25, r1
    2376:	49 f1       	breq	.+82     	; 0x23ca <GPIO_togglePin+0x92>
    2378:	2c 81       	ldd	r18, Y+4	; 0x04
    237a:	3d 81       	ldd	r19, Y+5	; 0x05
    237c:	22 30       	cpi	r18, 0x02	; 2
    237e:	31 05       	cpc	r19, r1
    2380:	2c f4       	brge	.+10     	; 0x238c <GPIO_togglePin+0x54>
    2382:	8c 81       	ldd	r24, Y+4	; 0x04
    2384:	9d 81       	ldd	r25, Y+5	; 0x05
    2386:	00 97       	sbiw	r24, 0x00	; 0
    2388:	61 f0       	breq	.+24     	; 0x23a2 <GPIO_togglePin+0x6a>
    238a:	5a c0       	rjmp	.+180    	; 0x2440 <GPIO_togglePin+0x108>
    238c:	2c 81       	ldd	r18, Y+4	; 0x04
    238e:	3d 81       	ldd	r19, Y+5	; 0x05
    2390:	22 30       	cpi	r18, 0x02	; 2
    2392:	31 05       	cpc	r19, r1
    2394:	71 f1       	breq	.+92     	; 0x23f2 <GPIO_togglePin+0xba>
    2396:	8c 81       	ldd	r24, Y+4	; 0x04
    2398:	9d 81       	ldd	r25, Y+5	; 0x05
    239a:	83 30       	cpi	r24, 0x03	; 3
    239c:	91 05       	cpc	r25, r1
    239e:	e9 f1       	breq	.+122    	; 0x241a <GPIO_togglePin+0xe2>
    23a0:	4f c0       	rjmp	.+158    	; 0x2440 <GPIO_togglePin+0x108>
		case PORT_A:
			TOG_BIT(PORTA,pin_num);
    23a2:	ab e3       	ldi	r26, 0x3B	; 59
    23a4:	b0 e0       	ldi	r27, 0x00	; 0
    23a6:	eb e3       	ldi	r30, 0x3B	; 59
    23a8:	f0 e0       	ldi	r31, 0x00	; 0
    23aa:	80 81       	ld	r24, Z
    23ac:	48 2f       	mov	r20, r24
    23ae:	8b 81       	ldd	r24, Y+3	; 0x03
    23b0:	28 2f       	mov	r18, r24
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	81 e0       	ldi	r24, 0x01	; 1
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	02 2e       	mov	r0, r18
    23ba:	02 c0       	rjmp	.+4      	; 0x23c0 <GPIO_togglePin+0x88>
    23bc:	88 0f       	add	r24, r24
    23be:	99 1f       	adc	r25, r25
    23c0:	0a 94       	dec	r0
    23c2:	e2 f7       	brpl	.-8      	; 0x23bc <GPIO_togglePin+0x84>
    23c4:	84 27       	eor	r24, r20
    23c6:	8c 93       	st	X, r24
    23c8:	3b c0       	rjmp	.+118    	; 0x2440 <GPIO_togglePin+0x108>
			break;
		case PORT_B:
			TOG_BIT(PORTB,pin_num);
    23ca:	a8 e3       	ldi	r26, 0x38	; 56
    23cc:	b0 e0       	ldi	r27, 0x00	; 0
    23ce:	e8 e3       	ldi	r30, 0x38	; 56
    23d0:	f0 e0       	ldi	r31, 0x00	; 0
    23d2:	80 81       	ld	r24, Z
    23d4:	48 2f       	mov	r20, r24
    23d6:	8b 81       	ldd	r24, Y+3	; 0x03
    23d8:	28 2f       	mov	r18, r24
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	81 e0       	ldi	r24, 0x01	; 1
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	02 2e       	mov	r0, r18
    23e2:	02 c0       	rjmp	.+4      	; 0x23e8 <GPIO_togglePin+0xb0>
    23e4:	88 0f       	add	r24, r24
    23e6:	99 1f       	adc	r25, r25
    23e8:	0a 94       	dec	r0
    23ea:	e2 f7       	brpl	.-8      	; 0x23e4 <GPIO_togglePin+0xac>
    23ec:	84 27       	eor	r24, r20
    23ee:	8c 93       	st	X, r24
    23f0:	27 c0       	rjmp	.+78     	; 0x2440 <GPIO_togglePin+0x108>
			break;
		case PORT_C:
			TOG_BIT(PORTC,pin_num);
    23f2:	a5 e3       	ldi	r26, 0x35	; 53
    23f4:	b0 e0       	ldi	r27, 0x00	; 0
    23f6:	e5 e3       	ldi	r30, 0x35	; 53
    23f8:	f0 e0       	ldi	r31, 0x00	; 0
    23fa:	80 81       	ld	r24, Z
    23fc:	48 2f       	mov	r20, r24
    23fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2400:	28 2f       	mov	r18, r24
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	81 e0       	ldi	r24, 0x01	; 1
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	02 2e       	mov	r0, r18
    240a:	02 c0       	rjmp	.+4      	; 0x2410 <GPIO_togglePin+0xd8>
    240c:	88 0f       	add	r24, r24
    240e:	99 1f       	adc	r25, r25
    2410:	0a 94       	dec	r0
    2412:	e2 f7       	brpl	.-8      	; 0x240c <GPIO_togglePin+0xd4>
    2414:	84 27       	eor	r24, r20
    2416:	8c 93       	st	X, r24
    2418:	13 c0       	rjmp	.+38     	; 0x2440 <GPIO_togglePin+0x108>
			break;
		case PORT_D:
			TOG_BIT(PORTD,pin_num);
    241a:	a2 e3       	ldi	r26, 0x32	; 50
    241c:	b0 e0       	ldi	r27, 0x00	; 0
    241e:	e2 e3       	ldi	r30, 0x32	; 50
    2420:	f0 e0       	ldi	r31, 0x00	; 0
    2422:	80 81       	ld	r24, Z
    2424:	48 2f       	mov	r20, r24
    2426:	8b 81       	ldd	r24, Y+3	; 0x03
    2428:	28 2f       	mov	r18, r24
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	81 e0       	ldi	r24, 0x01	; 1
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	02 2e       	mov	r0, r18
    2432:	02 c0       	rjmp	.+4      	; 0x2438 <GPIO_togglePin+0x100>
    2434:	88 0f       	add	r24, r24
    2436:	99 1f       	adc	r25, r25
    2438:	0a 94       	dec	r0
    243a:	e2 f7       	brpl	.-8      	; 0x2434 <GPIO_togglePin+0xfc>
    243c:	84 27       	eor	r24, r20
    243e:	8c 93       	st	X, r24
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    2440:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    2442:	89 81       	ldd	r24, Y+1	; 0x01
}
    2444:	0f 90       	pop	r0
    2446:	0f 90       	pop	r0
    2448:	0f 90       	pop	r0
    244a:	0f 90       	pop	r0
    244c:	0f 90       	pop	r0
    244e:	cf 91       	pop	r28
    2450:	df 91       	pop	r29
    2452:	08 95       	ret

00002454 <GPIO_readPin>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return an error.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num) {
    2454:	df 93       	push	r29
    2456:	cf 93       	push	r28
    2458:	cd b7       	in	r28, 0x3d	; 61
    245a:	de b7       	in	r29, 0x3e	; 62
    245c:	27 97       	sbiw	r28, 0x07	; 7
    245e:	0f b6       	in	r0, 0x3f	; 63
    2460:	f8 94       	cli
    2462:	de bf       	out	0x3e, r29	; 62
    2464:	0f be       	out	0x3f, r0	; 63
    2466:	cd bf       	out	0x3d, r28	; 61
    2468:	8b 83       	std	Y+3, r24	; 0x03
    246a:	6c 83       	std	Y+4, r22	; 0x04
	uint8 pin_value = LOGIC_LOW;
    246c:	1a 82       	std	Y+2, r1	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t GPIO_Driver_Checker = NULL;
    246e:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    2470:	8c 81       	ldd	r24, Y+4	; 0x04
    2472:	88 30       	cpi	r24, 0x08	; 8
    2474:	28 f0       	brcs	.+10     	; 0x2480 <GPIO_readPin+0x2c>
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
    2476:	81 e0       	ldi	r24, 0x01	; 1
    2478:	89 83       	std	Y+1, r24	; 0x01
		return GPIO_Driver_Checker;
    247a:	29 81       	ldd	r18, Y+1	; 0x01
    247c:	2f 83       	std	Y+7, r18	; 0x07
    247e:	8b c0       	rjmp	.+278    	; 0x2596 <GPIO_readPin+0x142>
	}
	else if((port_num >= NUM_OF_PORTS)) {
    2480:	8b 81       	ldd	r24, Y+3	; 0x03
    2482:	84 30       	cpi	r24, 0x04	; 4
    2484:	28 f0       	brcs	.+10     	; 0x2490 <GPIO_readPin+0x3c>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    2486:	82 e0       	ldi	r24, 0x02	; 2
    2488:	89 83       	std	Y+1, r24	; 0x01
		return GPIO_Driver_Checker;
    248a:	39 81       	ldd	r19, Y+1	; 0x01
    248c:	3f 83       	std	Y+7, r19	; 0x07
    248e:	83 c0       	rjmp	.+262    	; 0x2596 <GPIO_readPin+0x142>
	}
	else {
		/* Read the pin value as required */
		switch(port_num) {
    2490:	8b 81       	ldd	r24, Y+3	; 0x03
    2492:	48 2f       	mov	r20, r24
    2494:	50 e0       	ldi	r21, 0x00	; 0
    2496:	5e 83       	std	Y+6, r21	; 0x06
    2498:	4d 83       	std	Y+5, r20	; 0x05
    249a:	8d 81       	ldd	r24, Y+5	; 0x05
    249c:	9e 81       	ldd	r25, Y+6	; 0x06
    249e:	81 30       	cpi	r24, 0x01	; 1
    24a0:	91 05       	cpc	r25, r1
    24a2:	79 f1       	breq	.+94     	; 0x2502 <GPIO_readPin+0xae>
    24a4:	2d 81       	ldd	r18, Y+5	; 0x05
    24a6:	3e 81       	ldd	r19, Y+6	; 0x06
    24a8:	22 30       	cpi	r18, 0x02	; 2
    24aa:	31 05       	cpc	r19, r1
    24ac:	34 f4       	brge	.+12     	; 0x24ba <GPIO_readPin+0x66>
    24ae:	4d 81       	ldd	r20, Y+5	; 0x05
    24b0:	5e 81       	ldd	r21, Y+6	; 0x06
    24b2:	41 15       	cp	r20, r1
    24b4:	51 05       	cpc	r21, r1
    24b6:	69 f0       	breq	.+26     	; 0x24d2 <GPIO_readPin+0x7e>
    24b8:	6b c0       	rjmp	.+214    	; 0x2590 <GPIO_readPin+0x13c>
    24ba:	8d 81       	ldd	r24, Y+5	; 0x05
    24bc:	9e 81       	ldd	r25, Y+6	; 0x06
    24be:	82 30       	cpi	r24, 0x02	; 2
    24c0:	91 05       	cpc	r25, r1
    24c2:	b9 f1       	breq	.+110    	; 0x2532 <GPIO_readPin+0xde>
    24c4:	2d 81       	ldd	r18, Y+5	; 0x05
    24c6:	3e 81       	ldd	r19, Y+6	; 0x06
    24c8:	23 30       	cpi	r18, 0x03	; 3
    24ca:	31 05       	cpc	r19, r1
    24cc:	09 f4       	brne	.+2      	; 0x24d0 <GPIO_readPin+0x7c>
    24ce:	49 c0       	rjmp	.+146    	; 0x2562 <GPIO_readPin+0x10e>
    24d0:	5f c0       	rjmp	.+190    	; 0x2590 <GPIO_readPin+0x13c>
		case PORT_A:
			// Checks if the bit equals '1' or not
			if(BIT_IS_SET(PINA,pin_num)) {
    24d2:	e9 e3       	ldi	r30, 0x39	; 57
    24d4:	f0 e0       	ldi	r31, 0x00	; 0
    24d6:	80 81       	ld	r24, Z
    24d8:	28 2f       	mov	r18, r24
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	8c 81       	ldd	r24, Y+4	; 0x04
    24de:	88 2f       	mov	r24, r24
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	a9 01       	movw	r20, r18
    24e4:	02 c0       	rjmp	.+4      	; 0x24ea <GPIO_readPin+0x96>
    24e6:	55 95       	asr	r21
    24e8:	47 95       	ror	r20
    24ea:	8a 95       	dec	r24
    24ec:	e2 f7       	brpl	.-8      	; 0x24e6 <GPIO_readPin+0x92>
    24ee:	ca 01       	movw	r24, r20
    24f0:	81 70       	andi	r24, 0x01	; 1
    24f2:	90 70       	andi	r25, 0x00	; 0
    24f4:	88 23       	and	r24, r24
    24f6:	19 f0       	breq	.+6      	; 0x24fe <GPIO_readPin+0xaa>
				pin_value = LOGIC_HIGH;
    24f8:	81 e0       	ldi	r24, 0x01	; 1
    24fa:	8a 83       	std	Y+2, r24	; 0x02
    24fc:	49 c0       	rjmp	.+146    	; 0x2590 <GPIO_readPin+0x13c>
			}
			else {
				pin_value = LOGIC_LOW;
    24fe:	1a 82       	std	Y+2, r1	; 0x02
    2500:	47 c0       	rjmp	.+142    	; 0x2590 <GPIO_readPin+0x13c>
			}
			break;
		case PORT_B:
			if(BIT_IS_SET(PINB,pin_num)) {
    2502:	e6 e3       	ldi	r30, 0x36	; 54
    2504:	f0 e0       	ldi	r31, 0x00	; 0
    2506:	80 81       	ld	r24, Z
    2508:	28 2f       	mov	r18, r24
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	8c 81       	ldd	r24, Y+4	; 0x04
    250e:	88 2f       	mov	r24, r24
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	a9 01       	movw	r20, r18
    2514:	02 c0       	rjmp	.+4      	; 0x251a <GPIO_readPin+0xc6>
    2516:	55 95       	asr	r21
    2518:	47 95       	ror	r20
    251a:	8a 95       	dec	r24
    251c:	e2 f7       	brpl	.-8      	; 0x2516 <GPIO_readPin+0xc2>
    251e:	ca 01       	movw	r24, r20
    2520:	81 70       	andi	r24, 0x01	; 1
    2522:	90 70       	andi	r25, 0x00	; 0
    2524:	88 23       	and	r24, r24
    2526:	19 f0       	breq	.+6      	; 0x252e <GPIO_readPin+0xda>
				pin_value = LOGIC_HIGH;
    2528:	81 e0       	ldi	r24, 0x01	; 1
    252a:	8a 83       	std	Y+2, r24	; 0x02
    252c:	31 c0       	rjmp	.+98     	; 0x2590 <GPIO_readPin+0x13c>
			}
			else {
				pin_value = LOGIC_LOW;
    252e:	1a 82       	std	Y+2, r1	; 0x02
    2530:	2f c0       	rjmp	.+94     	; 0x2590 <GPIO_readPin+0x13c>
			}
			break;
		case PORT_C:
			if(BIT_IS_SET(PINC,pin_num)) {
    2532:	e3 e3       	ldi	r30, 0x33	; 51
    2534:	f0 e0       	ldi	r31, 0x00	; 0
    2536:	80 81       	ld	r24, Z
    2538:	28 2f       	mov	r18, r24
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	8c 81       	ldd	r24, Y+4	; 0x04
    253e:	88 2f       	mov	r24, r24
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	a9 01       	movw	r20, r18
    2544:	02 c0       	rjmp	.+4      	; 0x254a <GPIO_readPin+0xf6>
    2546:	55 95       	asr	r21
    2548:	47 95       	ror	r20
    254a:	8a 95       	dec	r24
    254c:	e2 f7       	brpl	.-8      	; 0x2546 <GPIO_readPin+0xf2>
    254e:	ca 01       	movw	r24, r20
    2550:	81 70       	andi	r24, 0x01	; 1
    2552:	90 70       	andi	r25, 0x00	; 0
    2554:	88 23       	and	r24, r24
    2556:	19 f0       	breq	.+6      	; 0x255e <GPIO_readPin+0x10a>
				pin_value = LOGIC_HIGH;
    2558:	81 e0       	ldi	r24, 0x01	; 1
    255a:	8a 83       	std	Y+2, r24	; 0x02
    255c:	19 c0       	rjmp	.+50     	; 0x2590 <GPIO_readPin+0x13c>
			}
			else {
				pin_value = LOGIC_LOW;
    255e:	1a 82       	std	Y+2, r1	; 0x02
    2560:	17 c0       	rjmp	.+46     	; 0x2590 <GPIO_readPin+0x13c>
			}
			break;
		case PORT_D:
			if(BIT_IS_SET(PIND,pin_num)) {
    2562:	e0 e3       	ldi	r30, 0x30	; 48
    2564:	f0 e0       	ldi	r31, 0x00	; 0
    2566:	80 81       	ld	r24, Z
    2568:	28 2f       	mov	r18, r24
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	8c 81       	ldd	r24, Y+4	; 0x04
    256e:	88 2f       	mov	r24, r24
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	a9 01       	movw	r20, r18
    2574:	02 c0       	rjmp	.+4      	; 0x257a <GPIO_readPin+0x126>
    2576:	55 95       	asr	r21
    2578:	47 95       	ror	r20
    257a:	8a 95       	dec	r24
    257c:	e2 f7       	brpl	.-8      	; 0x2576 <GPIO_readPin+0x122>
    257e:	ca 01       	movw	r24, r20
    2580:	81 70       	andi	r24, 0x01	; 1
    2582:	90 70       	andi	r25, 0x00	; 0
    2584:	88 23       	and	r24, r24
    2586:	19 f0       	breq	.+6      	; 0x258e <GPIO_readPin+0x13a>
				pin_value = LOGIC_HIGH;
    2588:	81 e0       	ldi	r24, 0x01	; 1
    258a:	8a 83       	std	Y+2, r24	; 0x02
    258c:	01 c0       	rjmp	.+2      	; 0x2590 <GPIO_readPin+0x13c>
			}
			else {
				pin_value = LOGIC_LOW;
    258e:	1a 82       	std	Y+2, r1	; 0x02
			}
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    2590:	19 82       	std	Y+1, r1	; 0x01
	}
	return pin_value;
    2592:	5a 81       	ldd	r21, Y+2	; 0x02
    2594:	5f 83       	std	Y+7, r21	; 0x07
    2596:	8f 81       	ldd	r24, Y+7	; 0x07
}
    2598:	27 96       	adiw	r28, 0x07	; 7
    259a:	0f b6       	in	r0, 0x3f	; 63
    259c:	f8 94       	cli
    259e:	de bf       	out	0x3e, r29	; 62
    25a0:	0f be       	out	0x3f, r0	; 63
    25a2:	cd bf       	out	0x3d, r28	; 61
    25a4:	cf 91       	pop	r28
    25a6:	df 91       	pop	r29
    25a8:	08 95       	ret

000025aa <GPIO_setupPortDirection>:
 * Setup the direction of the required port all pins input/output.
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
GPIO_Error_t GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction) {
    25aa:	df 93       	push	r29
    25ac:	cf 93       	push	r28
    25ae:	00 d0       	rcall	.+0      	; 0x25b0 <GPIO_setupPortDirection+0x6>
    25b0:	00 d0       	rcall	.+0      	; 0x25b2 <GPIO_setupPortDirection+0x8>
    25b2:	0f 92       	push	r0
    25b4:	cd b7       	in	r28, 0x3d	; 61
    25b6:	de b7       	in	r29, 0x3e	; 62
    25b8:	8a 83       	std	Y+2, r24	; 0x02
    25ba:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	uint8_t GPIO_Driver_Checker = NULL;
    25bc:	19 82       	std	Y+1, r1	; 0x01

	if((port_num >= NUM_OF_PORTS)) {
    25be:	8a 81       	ldd	r24, Y+2	; 0x02
    25c0:	84 30       	cpi	r24, 0x04	; 4
    25c2:	18 f0       	brcs	.+6      	; 0x25ca <GPIO_setupPortDirection+0x20>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    25c4:	82 e0       	ldi	r24, 0x02	; 2
    25c6:	89 83       	std	Y+1, r24	; 0x01
    25c8:	3c c0       	rjmp	.+120    	; 0x2642 <GPIO_setupPortDirection+0x98>
	}
	else if((direction != PORT_INPUT) && (direction != PORT_OUTPUT)) {
    25ca:	8b 81       	ldd	r24, Y+3	; 0x03
    25cc:	88 23       	and	r24, r24
    25ce:	31 f0       	breq	.+12     	; 0x25dc <GPIO_setupPortDirection+0x32>
    25d0:	8b 81       	ldd	r24, Y+3	; 0x03
    25d2:	8f 3f       	cpi	r24, 0xFF	; 255
    25d4:	19 f0       	breq	.+6      	; 0x25dc <GPIO_setupPortDirection+0x32>
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
    25d6:	83 e0       	ldi	r24, 0x03	; 3
    25d8:	89 83       	std	Y+1, r24	; 0x01
    25da:	33 c0       	rjmp	.+102    	; 0x2642 <GPIO_setupPortDirection+0x98>
	}
	else {
		/* Setup the port direction as required */
		switch(port_num) {
    25dc:	8a 81       	ldd	r24, Y+2	; 0x02
    25de:	28 2f       	mov	r18, r24
    25e0:	30 e0       	ldi	r19, 0x00	; 0
    25e2:	3d 83       	std	Y+5, r19	; 0x05
    25e4:	2c 83       	std	Y+4, r18	; 0x04
    25e6:	8c 81       	ldd	r24, Y+4	; 0x04
    25e8:	9d 81       	ldd	r25, Y+5	; 0x05
    25ea:	81 30       	cpi	r24, 0x01	; 1
    25ec:	91 05       	cpc	r25, r1
    25ee:	d1 f0       	breq	.+52     	; 0x2624 <GPIO_setupPortDirection+0x7a>
    25f0:	2c 81       	ldd	r18, Y+4	; 0x04
    25f2:	3d 81       	ldd	r19, Y+5	; 0x05
    25f4:	22 30       	cpi	r18, 0x02	; 2
    25f6:	31 05       	cpc	r19, r1
    25f8:	2c f4       	brge	.+10     	; 0x2604 <GPIO_setupPortDirection+0x5a>
    25fa:	8c 81       	ldd	r24, Y+4	; 0x04
    25fc:	9d 81       	ldd	r25, Y+5	; 0x05
    25fe:	00 97       	sbiw	r24, 0x00	; 0
    2600:	61 f0       	breq	.+24     	; 0x261a <GPIO_setupPortDirection+0x70>
    2602:	1e c0       	rjmp	.+60     	; 0x2640 <GPIO_setupPortDirection+0x96>
    2604:	2c 81       	ldd	r18, Y+4	; 0x04
    2606:	3d 81       	ldd	r19, Y+5	; 0x05
    2608:	22 30       	cpi	r18, 0x02	; 2
    260a:	31 05       	cpc	r19, r1
    260c:	81 f0       	breq	.+32     	; 0x262e <GPIO_setupPortDirection+0x84>
    260e:	8c 81       	ldd	r24, Y+4	; 0x04
    2610:	9d 81       	ldd	r25, Y+5	; 0x05
    2612:	83 30       	cpi	r24, 0x03	; 3
    2614:	91 05       	cpc	r25, r1
    2616:	81 f0       	breq	.+32     	; 0x2638 <GPIO_setupPortDirection+0x8e>
    2618:	13 c0       	rjmp	.+38     	; 0x2640 <GPIO_setupPortDirection+0x96>
		case PORT_A:
			DDRA = direction;
    261a:	ea e3       	ldi	r30, 0x3A	; 58
    261c:	f0 e0       	ldi	r31, 0x00	; 0
    261e:	8b 81       	ldd	r24, Y+3	; 0x03
    2620:	80 83       	st	Z, r24
    2622:	0e c0       	rjmp	.+28     	; 0x2640 <GPIO_setupPortDirection+0x96>
			break;
		case PORT_B:
			DDRB = direction;
    2624:	e7 e3       	ldi	r30, 0x37	; 55
    2626:	f0 e0       	ldi	r31, 0x00	; 0
    2628:	8b 81       	ldd	r24, Y+3	; 0x03
    262a:	80 83       	st	Z, r24
    262c:	09 c0       	rjmp	.+18     	; 0x2640 <GPIO_setupPortDirection+0x96>
			break;
		case PORT_C:
			DDRC = direction;
    262e:	e4 e3       	ldi	r30, 0x34	; 52
    2630:	f0 e0       	ldi	r31, 0x00	; 0
    2632:	8b 81       	ldd	r24, Y+3	; 0x03
    2634:	80 83       	st	Z, r24
    2636:	04 c0       	rjmp	.+8      	; 0x2640 <GPIO_setupPortDirection+0x96>
			break;
		case PORT_D:
			DDRD = direction;
    2638:	e1 e3       	ldi	r30, 0x31	; 49
    263a:	f0 e0       	ldi	r31, 0x00	; 0
    263c:	8b 81       	ldd	r24, Y+3	; 0x03
    263e:	80 83       	st	Z, r24
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    2640:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    2642:	89 81       	ldd	r24, Y+1	; 0x01
}
    2644:	0f 90       	pop	r0
    2646:	0f 90       	pop	r0
    2648:	0f 90       	pop	r0
    264a:	0f 90       	pop	r0
    264c:	0f 90       	pop	r0
    264e:	cf 91       	pop	r28
    2650:	df 91       	pop	r29
    2652:	08 95       	ret

00002654 <GPIO_writePort>:
 * Write the value on the required port.
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
GPIO_Error_t GPIO_writePort(uint8 port_num, uint8 value) {
    2654:	df 93       	push	r29
    2656:	cf 93       	push	r28
    2658:	00 d0       	rcall	.+0      	; 0x265a <GPIO_writePort+0x6>
    265a:	00 d0       	rcall	.+0      	; 0x265c <GPIO_writePort+0x8>
    265c:	0f 92       	push	r0
    265e:	cd b7       	in	r28, 0x3d	; 61
    2660:	de b7       	in	r29, 0x3e	; 62
    2662:	8a 83       	std	Y+2, r24	; 0x02
    2664:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t GPIO_Driver_Checker = NULL;
    2666:	19 82       	std	Y+1, r1	; 0x01
	if((port_num >= NUM_OF_PORTS)) {
    2668:	8a 81       	ldd	r24, Y+2	; 0x02
    266a:	84 30       	cpi	r24, 0x04	; 4
    266c:	18 f0       	brcs	.+6      	; 0x2674 <GPIO_writePort+0x20>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    266e:	82 e0       	ldi	r24, 0x02	; 2
    2670:	89 83       	std	Y+1, r24	; 0x01
    2672:	33 c0       	rjmp	.+102    	; 0x26da <GPIO_writePort+0x86>
	}
	else {
		/* Setup the port direction as required */
		switch(port_num) {
    2674:	8a 81       	ldd	r24, Y+2	; 0x02
    2676:	28 2f       	mov	r18, r24
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	3d 83       	std	Y+5, r19	; 0x05
    267c:	2c 83       	std	Y+4, r18	; 0x04
    267e:	8c 81       	ldd	r24, Y+4	; 0x04
    2680:	9d 81       	ldd	r25, Y+5	; 0x05
    2682:	81 30       	cpi	r24, 0x01	; 1
    2684:	91 05       	cpc	r25, r1
    2686:	d1 f0       	breq	.+52     	; 0x26bc <GPIO_writePort+0x68>
    2688:	2c 81       	ldd	r18, Y+4	; 0x04
    268a:	3d 81       	ldd	r19, Y+5	; 0x05
    268c:	22 30       	cpi	r18, 0x02	; 2
    268e:	31 05       	cpc	r19, r1
    2690:	2c f4       	brge	.+10     	; 0x269c <GPIO_writePort+0x48>
    2692:	8c 81       	ldd	r24, Y+4	; 0x04
    2694:	9d 81       	ldd	r25, Y+5	; 0x05
    2696:	00 97       	sbiw	r24, 0x00	; 0
    2698:	61 f0       	breq	.+24     	; 0x26b2 <GPIO_writePort+0x5e>
    269a:	1e c0       	rjmp	.+60     	; 0x26d8 <GPIO_writePort+0x84>
    269c:	2c 81       	ldd	r18, Y+4	; 0x04
    269e:	3d 81       	ldd	r19, Y+5	; 0x05
    26a0:	22 30       	cpi	r18, 0x02	; 2
    26a2:	31 05       	cpc	r19, r1
    26a4:	81 f0       	breq	.+32     	; 0x26c6 <GPIO_writePort+0x72>
    26a6:	8c 81       	ldd	r24, Y+4	; 0x04
    26a8:	9d 81       	ldd	r25, Y+5	; 0x05
    26aa:	83 30       	cpi	r24, 0x03	; 3
    26ac:	91 05       	cpc	r25, r1
    26ae:	81 f0       	breq	.+32     	; 0x26d0 <GPIO_writePort+0x7c>
    26b0:	13 c0       	rjmp	.+38     	; 0x26d8 <GPIO_writePort+0x84>
		case PORT_A:
			PORTA = value;
    26b2:	eb e3       	ldi	r30, 0x3B	; 59
    26b4:	f0 e0       	ldi	r31, 0x00	; 0
    26b6:	8b 81       	ldd	r24, Y+3	; 0x03
    26b8:	80 83       	st	Z, r24
    26ba:	0e c0       	rjmp	.+28     	; 0x26d8 <GPIO_writePort+0x84>
			break;
		case PORT_B:
			PORTB = value;
    26bc:	e8 e3       	ldi	r30, 0x38	; 56
    26be:	f0 e0       	ldi	r31, 0x00	; 0
    26c0:	8b 81       	ldd	r24, Y+3	; 0x03
    26c2:	80 83       	st	Z, r24
    26c4:	09 c0       	rjmp	.+18     	; 0x26d8 <GPIO_writePort+0x84>
			break;
		case PORT_C:
			PORTC = value;
    26c6:	e5 e3       	ldi	r30, 0x35	; 53
    26c8:	f0 e0       	ldi	r31, 0x00	; 0
    26ca:	8b 81       	ldd	r24, Y+3	; 0x03
    26cc:	80 83       	st	Z, r24
    26ce:	04 c0       	rjmp	.+8      	; 0x26d8 <GPIO_writePort+0x84>
			break;
		case PORT_D:
			PORTD = value;
    26d0:	e2 e3       	ldi	r30, 0x32	; 50
    26d2:	f0 e0       	ldi	r31, 0x00	; 0
    26d4:	8b 81       	ldd	r24, Y+3	; 0x03
    26d6:	80 83       	st	Z, r24
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    26d8:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    26da:	89 81       	ldd	r24, Y+1	; 0x01
}
    26dc:	0f 90       	pop	r0
    26de:	0f 90       	pop	r0
    26e0:	0f 90       	pop	r0
    26e2:	0f 90       	pop	r0
    26e4:	0f 90       	pop	r0
    26e6:	cf 91       	pop	r28
    26e8:	df 91       	pop	r29
    26ea:	08 95       	ret

000026ec <GPIO_readPort>:
/*
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num) {
    26ec:	df 93       	push	r29
    26ee:	cf 93       	push	r28
    26f0:	00 d0       	rcall	.+0      	; 0x26f2 <GPIO_readPort+0x6>
    26f2:	00 d0       	rcall	.+0      	; 0x26f4 <GPIO_readPort+0x8>
    26f4:	0f 92       	push	r0
    26f6:	cd b7       	in	r28, 0x3d	; 61
    26f8:	de b7       	in	r29, 0x3e	; 62
    26fa:	8b 83       	std	Y+3, r24	; 0x03
	uint8 value = LOGIC_LOW;
    26fc:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t GPIO_Driver_Checker = NULL;
    26fe:	19 82       	std	Y+1, r1	; 0x01

	if((port_num >= NUM_OF_PORTS)) {
    2700:	8b 81       	ldd	r24, Y+3	; 0x03
    2702:	84 30       	cpi	r24, 0x04	; 4
    2704:	18 f0       	brcs	.+6      	; 0x270c <GPIO_readPort+0x20>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    2706:	82 e0       	ldi	r24, 0x02	; 2
    2708:	89 83       	std	Y+1, r24	; 0x01
    270a:	32 c0       	rjmp	.+100    	; 0x2770 <GPIO_readPort+0x84>
	}
	else {
		switch(port_num) {
    270c:	8b 81       	ldd	r24, Y+3	; 0x03
    270e:	28 2f       	mov	r18, r24
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	3d 83       	std	Y+5, r19	; 0x05
    2714:	2c 83       	std	Y+4, r18	; 0x04
    2716:	8c 81       	ldd	r24, Y+4	; 0x04
    2718:	9d 81       	ldd	r25, Y+5	; 0x05
    271a:	81 30       	cpi	r24, 0x01	; 1
    271c:	91 05       	cpc	r25, r1
    271e:	d1 f0       	breq	.+52     	; 0x2754 <GPIO_readPort+0x68>
    2720:	2c 81       	ldd	r18, Y+4	; 0x04
    2722:	3d 81       	ldd	r19, Y+5	; 0x05
    2724:	22 30       	cpi	r18, 0x02	; 2
    2726:	31 05       	cpc	r19, r1
    2728:	2c f4       	brge	.+10     	; 0x2734 <GPIO_readPort+0x48>
    272a:	8c 81       	ldd	r24, Y+4	; 0x04
    272c:	9d 81       	ldd	r25, Y+5	; 0x05
    272e:	00 97       	sbiw	r24, 0x00	; 0
    2730:	61 f0       	breq	.+24     	; 0x274a <GPIO_readPort+0x5e>
    2732:	1e c0       	rjmp	.+60     	; 0x2770 <GPIO_readPort+0x84>
    2734:	2c 81       	ldd	r18, Y+4	; 0x04
    2736:	3d 81       	ldd	r19, Y+5	; 0x05
    2738:	22 30       	cpi	r18, 0x02	; 2
    273a:	31 05       	cpc	r19, r1
    273c:	81 f0       	breq	.+32     	; 0x275e <GPIO_readPort+0x72>
    273e:	8c 81       	ldd	r24, Y+4	; 0x04
    2740:	9d 81       	ldd	r25, Y+5	; 0x05
    2742:	83 30       	cpi	r24, 0x03	; 3
    2744:	91 05       	cpc	r25, r1
    2746:	81 f0       	breq	.+32     	; 0x2768 <GPIO_readPort+0x7c>
    2748:	13 c0       	rjmp	.+38     	; 0x2770 <GPIO_readPort+0x84>
		case PORT_A:
			// Why value equals PINA?
			value = PINA;
    274a:	e9 e3       	ldi	r30, 0x39	; 57
    274c:	f0 e0       	ldi	r31, 0x00	; 0
    274e:	80 81       	ld	r24, Z
    2750:	8a 83       	std	Y+2, r24	; 0x02
    2752:	0e c0       	rjmp	.+28     	; 0x2770 <GPIO_readPort+0x84>
			break;
		case PORT_B:
			value = PINB;
    2754:	e6 e3       	ldi	r30, 0x36	; 54
    2756:	f0 e0       	ldi	r31, 0x00	; 0
    2758:	80 81       	ld	r24, Z
    275a:	8a 83       	std	Y+2, r24	; 0x02
    275c:	09 c0       	rjmp	.+18     	; 0x2770 <GPIO_readPort+0x84>
			break;
		case PORT_C:
			value = PINC;
    275e:	e3 e3       	ldi	r30, 0x33	; 51
    2760:	f0 e0       	ldi	r31, 0x00	; 0
    2762:	80 81       	ld	r24, Z
    2764:	8a 83       	std	Y+2, r24	; 0x02
    2766:	04 c0       	rjmp	.+8      	; 0x2770 <GPIO_readPort+0x84>
			break;
		case PORT_D:
			value = PIND;
    2768:	e0 e3       	ldi	r30, 0x30	; 48
    276a:	f0 e0       	ldi	r31, 0x00	; 0
    276c:	80 81       	ld	r24, Z
    276e:	8a 83       	std	Y+2, r24	; 0x02
			break;
		}
	}
	return value;
    2770:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2772:	0f 90       	pop	r0
    2774:	0f 90       	pop	r0
    2776:	0f 90       	pop	r0
    2778:	0f 90       	pop	r0
    277a:	0f 90       	pop	r0
    277c:	cf 91       	pop	r28
    277e:	df 91       	pop	r29
    2780:	08 95       	ret

00002782 <EXT_INTERRUPT_Init>:

#include "avr/io.h" /* To use the IO Ports Registers */
#include <util/delay.h>

// Initialize External Interrupt
void EXT_INTERRUPT_Init(void) {
    2782:	df 93       	push	r29
    2784:	cf 93       	push	r28
    2786:	cd b7       	in	r28, 0x3d	; 61
    2788:	de b7       	in	r29, 0x3e	; 62
	 */

	// Checking if INT0 is enabled or disabled
	#if (EXT_INTERRUPT_INT0_INIT_STATE == EXT_INTERRUPT_Enable_State)
		// Enabling the INT0 bit inside GICR
		SET_BIT(GICR, INT0);
    278a:	ab e5       	ldi	r26, 0x5B	; 91
    278c:	b0 e0       	ldi	r27, 0x00	; 0
    278e:	eb e5       	ldi	r30, 0x5B	; 91
    2790:	f0 e0       	ldi	r31, 0x00	; 0
    2792:	80 81       	ld	r24, Z
    2794:	80 64       	ori	r24, 0x40	; 64
    2796:	8c 93       	st	X, r24

		// Setup Pin PD2 "INT0" to Input
		GPIO_setupPinDirection(PORT_D, PIN_2, PIN_INPUT);
    2798:	83 e0       	ldi	r24, 0x03	; 3
    279a:	62 e0       	ldi	r22, 0x02	; 2
    279c:	40 e0       	ldi	r20, 0x00	; 0
    279e:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <GPIO_setupPinDirection>
			SET_BIT(MCUCR, ISC00);
		#elif (EXT_INTERRUPT_0_MODE == EXT_INTERRUPT_Falling_Edge)
			SET_BIT(MCUCR, ISC01);
			CLR_BIT(MCUCR, ISC00);
		#elif (EXT_INTERRUPT_0_MODE == EXT_INTERRUPT_Rising_Edge)
			SET_BIT(MCUCR, ISC01);
    27a2:	a5 e5       	ldi	r26, 0x55	; 85
    27a4:	b0 e0       	ldi	r27, 0x00	; 0
    27a6:	e5 e5       	ldi	r30, 0x55	; 85
    27a8:	f0 e0       	ldi	r31, 0x00	; 0
    27aa:	80 81       	ld	r24, Z
    27ac:	82 60       	ori	r24, 0x02	; 2
    27ae:	8c 93       	st	X, r24
			SET_BIT(MCUCR, ISC00);
    27b0:	a5 e5       	ldi	r26, 0x55	; 85
    27b2:	b0 e0       	ldi	r27, 0x00	; 0
    27b4:	e5 e5       	ldi	r30, 0x55	; 85
    27b6:	f0 e0       	ldi	r31, 0x00	; 0
    27b8:	80 81       	ld	r24, Z
    27ba:	81 60       	ori	r24, 0x01	; 1
    27bc:	8c 93       	st	X, r24
		#elif (EXT_INTERRUPT_1_MODE == EXT_INTERRUPT_Rising_Edge)
			SET_BIT(MCUCR, ISC11);
			SET_BIT(MCUCR, ISC10);
		#endif
	#elif (EXT_INTERRUPT_INT1_INIT_STATE == EXT_INTERRUPT_Disable_State)
			CLR_BIT(GICR, INT1);
    27be:	ab e5       	ldi	r26, 0x5B	; 91
    27c0:	b0 e0       	ldi	r27, 0x00	; 0
    27c2:	eb e5       	ldi	r30, 0x5B	; 91
    27c4:	f0 e0       	ldi	r31, 0x00	; 0
    27c6:	80 81       	ld	r24, Z
    27c8:	8f 77       	andi	r24, 0x7F	; 127
    27ca:	8c 93       	st	X, r24
			CLR_BIT(MCUCSR, ISC2);
		#elif (EXT_INTERRUPT_2_MODE == EXT_INTERRUPT_INT2_Rising_Edge)
			SET_BIT(MCUCSR, ISC2);
		#endif
	#elif (EXT_INTERRUPT_INT2_INIT_STATE == EXT_INTERRUPT_Disable_State)
			CLR_BIT(GICR, INT2);
    27cc:	ab e5       	ldi	r26, 0x5B	; 91
    27ce:	b0 e0       	ldi	r27, 0x00	; 0
    27d0:	eb e5       	ldi	r30, 0x5B	; 91
    27d2:	f0 e0       	ldi	r31, 0x00	; 0
    27d4:	80 81       	ld	r24, Z
    27d6:	8f 7d       	andi	r24, 0xDF	; 223
    27d8:	8c 93       	st	X, r24

	/* Status Register – SREG Register Bits Description:
	 * Bit 7 – I: Global Interrupt Enable
	 */
	// Enabling the I-Bit
	SET_BIT(SREG, SREG_I_BIT);
    27da:	af e5       	ldi	r26, 0x5F	; 95
    27dc:	b0 e0       	ldi	r27, 0x00	; 0
    27de:	ef e5       	ldi	r30, 0x5F	; 95
    27e0:	f0 e0       	ldi	r31, 0x00	; 0
    27e2:	80 81       	ld	r24, Z
    27e4:	80 68       	ori	r24, 0x80	; 128
    27e6:	8c 93       	st	X, r24
}
    27e8:	cf 91       	pop	r28
    27ea:	df 91       	pop	r29
    27ec:	08 95       	ret

000027ee <EXT_INTERRUPT_DeInit>:

// Disable External Interrupt ISR
void EXT_INTERRUPT_DeInit(void) {
    27ee:	df 93       	push	r29
    27f0:	cf 93       	push	r28
    27f2:	cd b7       	in	r28, 0x3d	; 61
    27f4:	de b7       	in	r29, 0x3e	; 62

	#if (EXT_INTERRUPT_INT0_INIT_STATE == EXT_INTERRUPT_Enable_State)
		CLR_BIT(GICR, INT0);
    27f6:	ab e5       	ldi	r26, 0x5B	; 91
    27f8:	b0 e0       	ldi	r27, 0x00	; 0
    27fa:	eb e5       	ldi	r30, 0x5B	; 91
    27fc:	f0 e0       	ldi	r31, 0x00	; 0
    27fe:	80 81       	ld	r24, Z
    2800:	8f 7b       	andi	r24, 0xBF	; 191
    2802:	8c 93       	st	X, r24

	#if (EXT_INTERRUPT_INT2_INIT_STATE == EXT_INTERRUPT_Enable_State)
		CLR_BIT(GICR, INT2);
	#endif

	CLR_BIT(SREG, SREG_I_BIT);
    2804:	af e5       	ldi	r26, 0x5F	; 95
    2806:	b0 e0       	ldi	r27, 0x00	; 0
    2808:	ef e5       	ldi	r30, 0x5F	; 95
    280a:	f0 e0       	ldi	r31, 0x00	; 0
    280c:	80 81       	ld	r24, Z
    280e:	8f 77       	andi	r24, 0x7F	; 127
    2810:	8c 93       	st	X, r24
}
    2812:	cf 91       	pop	r28
    2814:	df 91       	pop	r29
    2816:	08 95       	ret

00002818 <EXT_INTERRUPT_SetCallBack>:

//The function that will be called in the EXT INT
void (*CallBackPtr) (void) = NULL;

// External Interrupt Call Back Function
void EXT_INTERRUPT_SetCallBack(void (*CopyFuncPtr) (void)) {
    2818:	df 93       	push	r29
    281a:	cf 93       	push	r28
    281c:	00 d0       	rcall	.+0      	; 0x281e <EXT_INTERRUPT_SetCallBack+0x6>
    281e:	cd b7       	in	r28, 0x3d	; 61
    2820:	de b7       	in	r29, 0x3e	; 62
    2822:	9a 83       	std	Y+2, r25	; 0x02
    2824:	89 83       	std	Y+1, r24	; 0x01
	CallBackPtr = CopyFuncPtr;
    2826:	89 81       	ldd	r24, Y+1	; 0x01
    2828:	9a 81       	ldd	r25, Y+2	; 0x02
    282a:	90 93 a1 01 	sts	0x01A1, r25
    282e:	80 93 a0 01 	sts	0x01A0, r24
}
    2832:	0f 90       	pop	r0
    2834:	0f 90       	pop	r0
    2836:	cf 91       	pop	r28
    2838:	df 91       	pop	r29
    283a:	08 95       	ret

0000283c <ADC_Init>:
#include "avr/io.h" /* To use the IO Ports Registers */
#include <util/delay.h>


// Initializes and enables the ADC Module to start functionality
void ADC_Init(void) {
    283c:	df 93       	push	r29
    283e:	cf 93       	push	r28
    2840:	cd b7       	in	r28, 0x3d	; 61
    2842:	de b7       	in	r29, 0x3e	; 62
	 * 7:6, REFS1:0 = 01 to choose AVCC = 5v as reference voltage
	 * 5, ADLAR   = 0 right adjusted
	 * 4:0, MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	// Sets REFS1:0 to '01'
	SET_BIT(ADMUX, REFS0);
    2844:	a7 e2       	ldi	r26, 0x27	; 39
    2846:	b0 e0       	ldi	r27, 0x00	; 0
    2848:	e7 e2       	ldi	r30, 0x27	; 39
    284a:	f0 e0       	ldi	r31, 0x00	; 0
    284c:	80 81       	ld	r24, Z
    284e:	80 64       	ori	r24, 0x40	; 64
    2850:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, REFS1);
    2852:	a7 e2       	ldi	r26, 0x27	; 39
    2854:	b0 e0       	ldi	r27, 0x00	; 0
    2856:	e7 e2       	ldi	r30, 0x27	; 39
    2858:	f0 e0       	ldi	r31, 0x00	; 0
    285a:	80 81       	ld	r24, Z
    285c:	8f 77       	andi	r24, 0x7F	; 127
    285e:	8c 93       	st	X, r24

	CLR_BIT(ADMUX, ADLAR);
    2860:	a7 e2       	ldi	r26, 0x27	; 39
    2862:	b0 e0       	ldi	r27, 0x00	; 0
    2864:	e7 e2       	ldi	r30, 0x27	; 39
    2866:	f0 e0       	ldi	r31, 0x00	; 0
    2868:	80 81       	ld	r24, Z
    286a:	8f 7d       	andi	r24, 0xDF	; 223
    286c:	8c 93       	st	X, r24

	CLR_BIT(ADMUX, MUX4);
    286e:	a7 e2       	ldi	r26, 0x27	; 39
    2870:	b0 e0       	ldi	r27, 0x00	; 0
    2872:	e7 e2       	ldi	r30, 0x27	; 39
    2874:	f0 e0       	ldi	r31, 0x00	; 0
    2876:	80 81       	ld	r24, Z
    2878:	8f 7e       	andi	r24, 0xEF	; 239
    287a:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, MUX3);
    287c:	a7 e2       	ldi	r26, 0x27	; 39
    287e:	b0 e0       	ldi	r27, 0x00	; 0
    2880:	e7 e2       	ldi	r30, 0x27	; 39
    2882:	f0 e0       	ldi	r31, 0x00	; 0
    2884:	80 81       	ld	r24, Z
    2886:	87 7f       	andi	r24, 0xF7	; 247
    2888:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, MUX2);
    288a:	a7 e2       	ldi	r26, 0x27	; 39
    288c:	b0 e0       	ldi	r27, 0x00	; 0
    288e:	e7 e2       	ldi	r30, 0x27	; 39
    2890:	f0 e0       	ldi	r31, 0x00	; 0
    2892:	80 81       	ld	r24, Z
    2894:	8b 7f       	andi	r24, 0xFB	; 251
    2896:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, MUX1);
    2898:	a7 e2       	ldi	r26, 0x27	; 39
    289a:	b0 e0       	ldi	r27, 0x00	; 0
    289c:	e7 e2       	ldi	r30, 0x27	; 39
    289e:	f0 e0       	ldi	r31, 0x00	; 0
    28a0:	80 81       	ld	r24, Z
    28a2:	8d 7f       	andi	r24, 0xFD	; 253
    28a4:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, MUX0);
    28a6:	a7 e2       	ldi	r26, 0x27	; 39
    28a8:	b0 e0       	ldi	r27, 0x00	; 0
    28aa:	e7 e2       	ldi	r30, 0x27	; 39
    28ac:	f0 e0       	ldi	r31, 0x00	; 0
    28ae:	80 81       	ld	r24, Z
    28b0:	8e 7f       	andi	r24, 0xFE	; 254
    28b2:	8c 93       	st	X, r24
	 * ADIE = 0 Disable ADC Interrupt
	 * ADATE = 0 Disable Auto Trigger
	 * ADPS2:0 = 111 to choose ADC_Clock = F_CPU/128 = 16Mhz/128 = 125Khz --> ADC must operate in range 50-200Khz
	 */
	// Enables ADC
	SET_BIT(ADCSRA, ADEN);
    28b4:	a6 e2       	ldi	r26, 0x26	; 38
    28b6:	b0 e0       	ldi	r27, 0x00	; 0
    28b8:	e6 e2       	ldi	r30, 0x26	; 38
    28ba:	f0 e0       	ldi	r31, 0x00	; 0
    28bc:	80 81       	ld	r24, Z
    28be:	80 68       	ori	r24, 0x80	; 128
    28c0:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA, ADIE);
    28c2:	a6 e2       	ldi	r26, 0x26	; 38
    28c4:	b0 e0       	ldi	r27, 0x00	; 0
    28c6:	e6 e2       	ldi	r30, 0x26	; 38
    28c8:	f0 e0       	ldi	r31, 0x00	; 0
    28ca:	80 81       	ld	r24, Z
    28cc:	87 7f       	andi	r24, 0xF7	; 247
    28ce:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA, ADATE);
    28d0:	a6 e2       	ldi	r26, 0x26	; 38
    28d2:	b0 e0       	ldi	r27, 0x00	; 0
    28d4:	e6 e2       	ldi	r30, 0x26	; 38
    28d6:	f0 e0       	ldi	r31, 0x00	; 0
    28d8:	80 81       	ld	r24, Z
    28da:	8f 7d       	andi	r24, 0xDF	; 223
    28dc:	8c 93       	st	X, r24

	// Choose Prescaler: 128
	SET_BIT(ADCSRA, ADPS2);
    28de:	a6 e2       	ldi	r26, 0x26	; 38
    28e0:	b0 e0       	ldi	r27, 0x00	; 0
    28e2:	e6 e2       	ldi	r30, 0x26	; 38
    28e4:	f0 e0       	ldi	r31, 0x00	; 0
    28e6:	80 81       	ld	r24, Z
    28e8:	84 60       	ori	r24, 0x04	; 4
    28ea:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADPS1);
    28ec:	a6 e2       	ldi	r26, 0x26	; 38
    28ee:	b0 e0       	ldi	r27, 0x00	; 0
    28f0:	e6 e2       	ldi	r30, 0x26	; 38
    28f2:	f0 e0       	ldi	r31, 0x00	; 0
    28f4:	80 81       	ld	r24, Z
    28f6:	82 60       	ori	r24, 0x02	; 2
    28f8:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADPS0);
    28fa:	a6 e2       	ldi	r26, 0x26	; 38
    28fc:	b0 e0       	ldi	r27, 0x00	; 0
    28fe:	e6 e2       	ldi	r30, 0x26	; 38
    2900:	f0 e0       	ldi	r31, 0x00	; 0
    2902:	80 81       	ld	r24, Z
    2904:	81 60       	ori	r24, 0x01	; 1
    2906:	8c 93       	st	X, r24

}
    2908:	cf 91       	pop	r28
    290a:	df 91       	pop	r29
    290c:	08 95       	ret

0000290e <ADC_readChannel>:


// Reads the content written to the selected channel of the ADC
uint16 ADC_readChannel(uint8 channel_num) {
    290e:	df 93       	push	r29
    2910:	cf 93       	push	r28
    2912:	0f 92       	push	r0
    2914:	cd b7       	in	r28, 0x3d	; 61
    2916:	de b7       	in	r29, 0x3e	; 62
    2918:	89 83       	std	Y+1, r24	; 0x01

	// Insert Channel Number in ADMUX Procedure

	// Clears first 5 bits to zero
	ADMUX &= 0xE0; // 0b1110 0000
    291a:	a7 e2       	ldi	r26, 0x27	; 39
    291c:	b0 e0       	ldi	r27, 0x00	; 0
    291e:	e7 e2       	ldi	r30, 0x27	; 39
    2920:	f0 e0       	ldi	r31, 0x00	; 0
    2922:	80 81       	ld	r24, Z
    2924:	80 7e       	andi	r24, 0xE0	; 224
    2926:	8c 93       	st	X, r24

	// Mask the Channel No. Input with max channel No.
	channel_num &= 0x07; // 0b0000 0111
    2928:	89 81       	ldd	r24, Y+1	; 0x01
    292a:	87 70       	andi	r24, 0x07	; 7
    292c:	89 83       	std	Y+1, r24	; 0x01

	// Insert Channel no. into ADMUX Register
	ADMUX |= channel_num;
    292e:	a7 e2       	ldi	r26, 0x27	; 39
    2930:	b0 e0       	ldi	r27, 0x00	; 0
    2932:	e7 e2       	ldi	r30, 0x27	; 39
    2934:	f0 e0       	ldi	r31, 0x00	; 0
    2936:	90 81       	ld	r25, Z
    2938:	89 81       	ldd	r24, Y+1	; 0x01
    293a:	89 2b       	or	r24, r25
    293c:	8c 93       	st	X, r24

	// Starts ADC Conversion
	SET_BIT(ADCSRA, ADSC);
    293e:	a6 e2       	ldi	r26, 0x26	; 38
    2940:	b0 e0       	ldi	r27, 0x00	; 0
    2942:	e6 e2       	ldi	r30, 0x26	; 38
    2944:	f0 e0       	ldi	r31, 0x00	; 0
    2946:	80 81       	ld	r24, Z
    2948:	80 64       	ori	r24, 0x40	; 64
    294a:	8c 93       	st	X, r24

	// Busy wait (Polling) untill ADIF = 1
	while ( BIT_IS_CLR(ADCSRA, ADIF) );
    294c:	e6 e2       	ldi	r30, 0x26	; 38
    294e:	f0 e0       	ldi	r31, 0x00	; 0
    2950:	80 81       	ld	r24, Z
    2952:	88 2f       	mov	r24, r24
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	80 71       	andi	r24, 0x10	; 16
    2958:	90 70       	andi	r25, 0x00	; 0
    295a:	00 97       	sbiw	r24, 0x00	; 0
    295c:	b9 f3       	breq	.-18     	; 0x294c <ADC_readChannel+0x3e>

	// sET FLAG BY 1 TO CLEAR
	SET_BIT(ADCSRA, ADIF);
    295e:	a6 e2       	ldi	r26, 0x26	; 38
    2960:	b0 e0       	ldi	r27, 0x00	; 0
    2962:	e6 e2       	ldi	r30, 0x26	; 38
    2964:	f0 e0       	ldi	r31, 0x00	; 0
    2966:	80 81       	ld	r24, Z
    2968:	80 61       	ori	r24, 0x10	; 16
    296a:	8c 93       	st	X, r24

	// Read Data
	return ADC;
    296c:	e4 e2       	ldi	r30, 0x24	; 36
    296e:	f0 e0       	ldi	r31, 0x00	; 0
    2970:	80 81       	ld	r24, Z
    2972:	91 81       	ldd	r25, Z+1	; 0x01
}
    2974:	0f 90       	pop	r0
    2976:	cf 91       	pop	r28
    2978:	df 91       	pop	r29
    297a:	08 95       	ret

0000297c <SEGMENT_Init>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
SEGMENT_Error_t SEGMENT_Init(uint8 port_num) {
    297c:	df 93       	push	r29
    297e:	cf 93       	push	r28
    2980:	00 d0       	rcall	.+0      	; 0x2982 <SEGMENT_Init+0x6>
    2982:	cd b7       	in	r28, 0x3d	; 61
    2984:	de b7       	in	r29, 0x3e	; 62
    2986:	8a 83       	std	Y+2, r24	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t SEGMENT_Driver_Checker = NULL;
    2988:	19 82       	std	Y+1, r1	; 0x01

	if((port_num >= NUM_OF_PORTS)) {
    298a:	8a 81       	ldd	r24, Y+2	; 0x02
    298c:	84 30       	cpi	r24, 0x04	; 4
    298e:	18 f0       	brcs	.+6      	; 0x2996 <SEGMENT_Init+0x1a>
		SEGMENT_Driver_Checker = SEGMENT_WRONG_PORT_NUMBER;
    2990:	82 e0       	ldi	r24, 0x02	; 2
    2992:	89 83       	std	Y+1, r24	; 0x01
    2994:	15 c0       	rjmp	.+42     	; 0x29c0 <SEGMENT_Init+0x44>
	}
	else {
		/* Setup the pin direction as required */
		GPIO_setupPinDirection(port_num, PIN_0, PIN_OUTPUT);
    2996:	8a 81       	ldd	r24, Y+2	; 0x02
    2998:	60 e0       	ldi	r22, 0x00	; 0
    299a:	41 e0       	ldi	r20, 0x01	; 1
    299c:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(port_num, PIN_1, PIN_OUTPUT);
    29a0:	8a 81       	ldd	r24, Y+2	; 0x02
    29a2:	61 e0       	ldi	r22, 0x01	; 1
    29a4:	41 e0       	ldi	r20, 0x01	; 1
    29a6:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(port_num, PIN_2, PIN_OUTPUT);
    29aa:	8a 81       	ldd	r24, Y+2	; 0x02
    29ac:	62 e0       	ldi	r22, 0x02	; 2
    29ae:	41 e0       	ldi	r20, 0x01	; 1
    29b0:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(port_num, PIN_3, PIN_OUTPUT);
    29b4:	8a 81       	ldd	r24, Y+2	; 0x02
    29b6:	63 e0       	ldi	r22, 0x03	; 3
    29b8:	41 e0       	ldi	r20, 0x01	; 1
    29ba:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <GPIO_setupPinDirection>
		SEGMENT_Driver_Checker = SEGMENT_OK;
    29be:	19 82       	std	Y+1, r1	; 0x01
	}
	return SEGMENT_Driver_Checker;
    29c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    29c2:	0f 90       	pop	r0
    29c4:	0f 90       	pop	r0
    29c6:	cf 91       	pop	r28
    29c8:	df 91       	pop	r29
    29ca:	08 95       	ret

000029cc <SEGMENT_DISPLAY>:

SEGMENT_Error_t SEGMENT_DISPLAY(uint8 port_num, uint8 value) {
    29cc:	df 93       	push	r29
    29ce:	cf 93       	push	r28
    29d0:	00 d0       	rcall	.+0      	; 0x29d2 <SEGMENT_DISPLAY+0x6>
    29d2:	00 d0       	rcall	.+0      	; 0x29d4 <SEGMENT_DISPLAY+0x8>
    29d4:	0f 92       	push	r0
    29d6:	cd b7       	in	r28, 0x3d	; 61
    29d8:	de b7       	in	r29, 0x3e	; 62
    29da:	8a 83       	std	Y+2, r24	; 0x02
    29dc:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t SEGMENT_Driver_Checker = NULL;
    29de:	19 82       	std	Y+1, r1	; 0x01

	if((port_num >= NUM_OF_PORTS)) {
    29e0:	8a 81       	ldd	r24, Y+2	; 0x02
    29e2:	84 30       	cpi	r24, 0x04	; 4
    29e4:	18 f0       	brcs	.+6      	; 0x29ec <SEGMENT_DISPLAY+0x20>
		SEGMENT_Driver_Checker = SEGMENT_WRONG_PORT_NUMBER;
    29e6:	82 e0       	ldi	r24, 0x02	; 2
    29e8:	89 83       	std	Y+1, r24	; 0x01
    29ea:	24 c1       	rjmp	.+584    	; 0x2c34 <SEGMENT_DISPLAY+0x268>
	}
	else if((value < 0 && value > 9)) {
		SEGMENT_Driver_Checker = SEGMENT_WRONG_VALUE;
	}
	else {
		switch(value) {
    29ec:	8b 81       	ldd	r24, Y+3	; 0x03
    29ee:	28 2f       	mov	r18, r24
    29f0:	30 e0       	ldi	r19, 0x00	; 0
    29f2:	3d 83       	std	Y+5, r19	; 0x05
    29f4:	2c 83       	std	Y+4, r18	; 0x04
    29f6:	8c 81       	ldd	r24, Y+4	; 0x04
    29f8:	9d 81       	ldd	r25, Y+5	; 0x05
    29fa:	84 30       	cpi	r24, 0x04	; 4
    29fc:	91 05       	cpc	r25, r1
    29fe:	09 f4       	brne	.+2      	; 0x2a02 <SEGMENT_DISPLAY+0x36>
    2a00:	9b c0       	rjmp	.+310    	; 0x2b38 <SEGMENT_DISPLAY+0x16c>
    2a02:	2c 81       	ldd	r18, Y+4	; 0x04
    2a04:	3d 81       	ldd	r19, Y+5	; 0x05
    2a06:	25 30       	cpi	r18, 0x05	; 5
    2a08:	31 05       	cpc	r19, r1
    2a0a:	ec f4       	brge	.+58     	; 0x2a46 <SEGMENT_DISPLAY+0x7a>
    2a0c:	8c 81       	ldd	r24, Y+4	; 0x04
    2a0e:	9d 81       	ldd	r25, Y+5	; 0x05
    2a10:	81 30       	cpi	r24, 0x01	; 1
    2a12:	91 05       	cpc	r25, r1
    2a14:	09 f4       	brne	.+2      	; 0x2a18 <SEGMENT_DISPLAY+0x4c>
    2a16:	51 c0       	rjmp	.+162    	; 0x2aba <SEGMENT_DISPLAY+0xee>
    2a18:	2c 81       	ldd	r18, Y+4	; 0x04
    2a1a:	3d 81       	ldd	r19, Y+5	; 0x05
    2a1c:	22 30       	cpi	r18, 0x02	; 2
    2a1e:	31 05       	cpc	r19, r1
    2a20:	2c f4       	brge	.+10     	; 0x2a2c <SEGMENT_DISPLAY+0x60>
    2a22:	8c 81       	ldd	r24, Y+4	; 0x04
    2a24:	9d 81       	ldd	r25, Y+5	; 0x05
    2a26:	00 97       	sbiw	r24, 0x00	; 0
    2a28:	99 f1       	breq	.+102    	; 0x2a90 <SEGMENT_DISPLAY+0xc4>
    2a2a:	03 c1       	rjmp	.+518    	; 0x2c32 <SEGMENT_DISPLAY+0x266>
    2a2c:	2c 81       	ldd	r18, Y+4	; 0x04
    2a2e:	3d 81       	ldd	r19, Y+5	; 0x05
    2a30:	22 30       	cpi	r18, 0x02	; 2
    2a32:	31 05       	cpc	r19, r1
    2a34:	09 f4       	brne	.+2      	; 0x2a38 <SEGMENT_DISPLAY+0x6c>
    2a36:	56 c0       	rjmp	.+172    	; 0x2ae4 <SEGMENT_DISPLAY+0x118>
    2a38:	8c 81       	ldd	r24, Y+4	; 0x04
    2a3a:	9d 81       	ldd	r25, Y+5	; 0x05
    2a3c:	83 30       	cpi	r24, 0x03	; 3
    2a3e:	91 05       	cpc	r25, r1
    2a40:	09 f4       	brne	.+2      	; 0x2a44 <SEGMENT_DISPLAY+0x78>
    2a42:	65 c0       	rjmp	.+202    	; 0x2b0e <SEGMENT_DISPLAY+0x142>
    2a44:	f6 c0       	rjmp	.+492    	; 0x2c32 <SEGMENT_DISPLAY+0x266>
    2a46:	2c 81       	ldd	r18, Y+4	; 0x04
    2a48:	3d 81       	ldd	r19, Y+5	; 0x05
    2a4a:	27 30       	cpi	r18, 0x07	; 7
    2a4c:	31 05       	cpc	r19, r1
    2a4e:	09 f4       	brne	.+2      	; 0x2a52 <SEGMENT_DISPLAY+0x86>
    2a50:	b2 c0       	rjmp	.+356    	; 0x2bb6 <SEGMENT_DISPLAY+0x1ea>
    2a52:	8c 81       	ldd	r24, Y+4	; 0x04
    2a54:	9d 81       	ldd	r25, Y+5	; 0x05
    2a56:	88 30       	cpi	r24, 0x08	; 8
    2a58:	91 05       	cpc	r25, r1
    2a5a:	6c f4       	brge	.+26     	; 0x2a76 <SEGMENT_DISPLAY+0xaa>
    2a5c:	2c 81       	ldd	r18, Y+4	; 0x04
    2a5e:	3d 81       	ldd	r19, Y+5	; 0x05
    2a60:	25 30       	cpi	r18, 0x05	; 5
    2a62:	31 05       	cpc	r19, r1
    2a64:	09 f4       	brne	.+2      	; 0x2a68 <SEGMENT_DISPLAY+0x9c>
    2a66:	7d c0       	rjmp	.+250    	; 0x2b62 <SEGMENT_DISPLAY+0x196>
    2a68:	8c 81       	ldd	r24, Y+4	; 0x04
    2a6a:	9d 81       	ldd	r25, Y+5	; 0x05
    2a6c:	86 30       	cpi	r24, 0x06	; 6
    2a6e:	91 05       	cpc	r25, r1
    2a70:	09 f4       	brne	.+2      	; 0x2a74 <SEGMENT_DISPLAY+0xa8>
    2a72:	8c c0       	rjmp	.+280    	; 0x2b8c <SEGMENT_DISPLAY+0x1c0>
    2a74:	de c0       	rjmp	.+444    	; 0x2c32 <SEGMENT_DISPLAY+0x266>
    2a76:	2c 81       	ldd	r18, Y+4	; 0x04
    2a78:	3d 81       	ldd	r19, Y+5	; 0x05
    2a7a:	28 30       	cpi	r18, 0x08	; 8
    2a7c:	31 05       	cpc	r19, r1
    2a7e:	09 f4       	brne	.+2      	; 0x2a82 <SEGMENT_DISPLAY+0xb6>
    2a80:	af c0       	rjmp	.+350    	; 0x2be0 <SEGMENT_DISPLAY+0x214>
    2a82:	8c 81       	ldd	r24, Y+4	; 0x04
    2a84:	9d 81       	ldd	r25, Y+5	; 0x05
    2a86:	89 30       	cpi	r24, 0x09	; 9
    2a88:	91 05       	cpc	r25, r1
    2a8a:	09 f4       	brne	.+2      	; 0x2a8e <SEGMENT_DISPLAY+0xc2>
    2a8c:	be c0       	rjmp	.+380    	; 0x2c0a <SEGMENT_DISPLAY+0x23e>
    2a8e:	d1 c0       	rjmp	.+418    	; 0x2c32 <SEGMENT_DISPLAY+0x266>
			case 0:
				GPIO_writePin(port_num, PIN_0, LOGIC_LOW);
    2a90:	8a 81       	ldd	r24, Y+2	; 0x02
    2a92:	60 e0       	ldi	r22, 0x00	; 0
    2a94:	40 e0       	ldi	r20, 0x00	; 0
    2a96:	0e 94 a0 10 	call	0x2140	; 0x2140 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
    2a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a9c:	61 e0       	ldi	r22, 0x01	; 1
    2a9e:	40 e0       	ldi	r20, 0x00	; 0
    2aa0:	0e 94 a0 10 	call	0x2140	; 0x2140 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
    2aa4:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa6:	62 e0       	ldi	r22, 0x02	; 2
    2aa8:	40 e0       	ldi	r20, 0x00	; 0
    2aaa:	0e 94 a0 10 	call	0x2140	; 0x2140 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    2aae:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab0:	63 e0       	ldi	r22, 0x03	; 3
    2ab2:	40 e0       	ldi	r20, 0x00	; 0
    2ab4:	0e 94 a0 10 	call	0x2140	; 0x2140 <GPIO_writePin>
    2ab8:	bc c0       	rjmp	.+376    	; 0x2c32 <SEGMENT_DISPLAY+0x266>
				break;
			case 1:
				GPIO_writePin(port_num, PIN_0, LOGIC_HIGH);
    2aba:	8a 81       	ldd	r24, Y+2	; 0x02
    2abc:	60 e0       	ldi	r22, 0x00	; 0
    2abe:	41 e0       	ldi	r20, 0x01	; 1
    2ac0:	0e 94 a0 10 	call	0x2140	; 0x2140 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
    2ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac6:	61 e0       	ldi	r22, 0x01	; 1
    2ac8:	40 e0       	ldi	r20, 0x00	; 0
    2aca:	0e 94 a0 10 	call	0x2140	; 0x2140 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
    2ace:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad0:	62 e0       	ldi	r22, 0x02	; 2
    2ad2:	40 e0       	ldi	r20, 0x00	; 0
    2ad4:	0e 94 a0 10 	call	0x2140	; 0x2140 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    2ad8:	8a 81       	ldd	r24, Y+2	; 0x02
    2ada:	63 e0       	ldi	r22, 0x03	; 3
    2adc:	40 e0       	ldi	r20, 0x00	; 0
    2ade:	0e 94 a0 10 	call	0x2140	; 0x2140 <GPIO_writePin>
    2ae2:	a7 c0       	rjmp	.+334    	; 0x2c32 <SEGMENT_DISPLAY+0x266>
				break;
			case 2:
				GPIO_writePin(port_num, PIN_0, LOGIC_LOW);
    2ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae6:	60 e0       	ldi	r22, 0x00	; 0
    2ae8:	40 e0       	ldi	r20, 0x00	; 0
    2aea:	0e 94 a0 10 	call	0x2140	; 0x2140 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_HIGH);
    2aee:	8a 81       	ldd	r24, Y+2	; 0x02
    2af0:	61 e0       	ldi	r22, 0x01	; 1
    2af2:	41 e0       	ldi	r20, 0x01	; 1
    2af4:	0e 94 a0 10 	call	0x2140	; 0x2140 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
    2af8:	8a 81       	ldd	r24, Y+2	; 0x02
    2afa:	62 e0       	ldi	r22, 0x02	; 2
    2afc:	40 e0       	ldi	r20, 0x00	; 0
    2afe:	0e 94 a0 10 	call	0x2140	; 0x2140 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    2b02:	8a 81       	ldd	r24, Y+2	; 0x02
    2b04:	63 e0       	ldi	r22, 0x03	; 3
    2b06:	40 e0       	ldi	r20, 0x00	; 0
    2b08:	0e 94 a0 10 	call	0x2140	; 0x2140 <GPIO_writePin>
    2b0c:	92 c0       	rjmp	.+292    	; 0x2c32 <SEGMENT_DISPLAY+0x266>
				break;
			case 3:
				GPIO_writePin(port_num, PIN_0, LOGIC_HIGH);
    2b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b10:	60 e0       	ldi	r22, 0x00	; 0
    2b12:	41 e0       	ldi	r20, 0x01	; 1
    2b14:	0e 94 a0 10 	call	0x2140	; 0x2140 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_HIGH);
    2b18:	8a 81       	ldd	r24, Y+2	; 0x02
    2b1a:	61 e0       	ldi	r22, 0x01	; 1
    2b1c:	41 e0       	ldi	r20, 0x01	; 1
    2b1e:	0e 94 a0 10 	call	0x2140	; 0x2140 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
    2b22:	8a 81       	ldd	r24, Y+2	; 0x02
    2b24:	62 e0       	ldi	r22, 0x02	; 2
    2b26:	40 e0       	ldi	r20, 0x00	; 0
    2b28:	0e 94 a0 10 	call	0x2140	; 0x2140 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    2b2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b2e:	63 e0       	ldi	r22, 0x03	; 3
    2b30:	40 e0       	ldi	r20, 0x00	; 0
    2b32:	0e 94 a0 10 	call	0x2140	; 0x2140 <GPIO_writePin>
    2b36:	7d c0       	rjmp	.+250    	; 0x2c32 <SEGMENT_DISPLAY+0x266>
				break;
			case 4:
				GPIO_writePin(port_num, PIN_0, LOGIC_LOW);
    2b38:	8a 81       	ldd	r24, Y+2	; 0x02
    2b3a:	60 e0       	ldi	r22, 0x00	; 0
    2b3c:	40 e0       	ldi	r20, 0x00	; 0
    2b3e:	0e 94 a0 10 	call	0x2140	; 0x2140 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
    2b42:	8a 81       	ldd	r24, Y+2	; 0x02
    2b44:	61 e0       	ldi	r22, 0x01	; 1
    2b46:	40 e0       	ldi	r20, 0x00	; 0
    2b48:	0e 94 a0 10 	call	0x2140	; 0x2140 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_HIGH);
    2b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b4e:	62 e0       	ldi	r22, 0x02	; 2
    2b50:	41 e0       	ldi	r20, 0x01	; 1
    2b52:	0e 94 a0 10 	call	0x2140	; 0x2140 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    2b56:	8a 81       	ldd	r24, Y+2	; 0x02
    2b58:	63 e0       	ldi	r22, 0x03	; 3
    2b5a:	40 e0       	ldi	r20, 0x00	; 0
    2b5c:	0e 94 a0 10 	call	0x2140	; 0x2140 <GPIO_writePin>
    2b60:	68 c0       	rjmp	.+208    	; 0x2c32 <SEGMENT_DISPLAY+0x266>
				break;
			case 5:
				GPIO_writePin(port_num, PIN_0, LOGIC_HIGH);
    2b62:	8a 81       	ldd	r24, Y+2	; 0x02
    2b64:	60 e0       	ldi	r22, 0x00	; 0
    2b66:	41 e0       	ldi	r20, 0x01	; 1
    2b68:	0e 94 a0 10 	call	0x2140	; 0x2140 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
    2b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b6e:	61 e0       	ldi	r22, 0x01	; 1
    2b70:	40 e0       	ldi	r20, 0x00	; 0
    2b72:	0e 94 a0 10 	call	0x2140	; 0x2140 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_HIGH);
    2b76:	8a 81       	ldd	r24, Y+2	; 0x02
    2b78:	62 e0       	ldi	r22, 0x02	; 2
    2b7a:	41 e0       	ldi	r20, 0x01	; 1
    2b7c:	0e 94 a0 10 	call	0x2140	; 0x2140 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    2b80:	8a 81       	ldd	r24, Y+2	; 0x02
    2b82:	63 e0       	ldi	r22, 0x03	; 3
    2b84:	40 e0       	ldi	r20, 0x00	; 0
    2b86:	0e 94 a0 10 	call	0x2140	; 0x2140 <GPIO_writePin>
    2b8a:	53 c0       	rjmp	.+166    	; 0x2c32 <SEGMENT_DISPLAY+0x266>
				break;
			case 6:
				GPIO_writePin(port_num, PIN_0, LOGIC_LOW);
    2b8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b8e:	60 e0       	ldi	r22, 0x00	; 0
    2b90:	40 e0       	ldi	r20, 0x00	; 0
    2b92:	0e 94 a0 10 	call	0x2140	; 0x2140 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_HIGH);
    2b96:	8a 81       	ldd	r24, Y+2	; 0x02
    2b98:	61 e0       	ldi	r22, 0x01	; 1
    2b9a:	41 e0       	ldi	r20, 0x01	; 1
    2b9c:	0e 94 a0 10 	call	0x2140	; 0x2140 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_HIGH);
    2ba0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba2:	62 e0       	ldi	r22, 0x02	; 2
    2ba4:	41 e0       	ldi	r20, 0x01	; 1
    2ba6:	0e 94 a0 10 	call	0x2140	; 0x2140 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    2baa:	8a 81       	ldd	r24, Y+2	; 0x02
    2bac:	63 e0       	ldi	r22, 0x03	; 3
    2bae:	40 e0       	ldi	r20, 0x00	; 0
    2bb0:	0e 94 a0 10 	call	0x2140	; 0x2140 <GPIO_writePin>
    2bb4:	3e c0       	rjmp	.+124    	; 0x2c32 <SEGMENT_DISPLAY+0x266>
				break;
			case 7:
				GPIO_writePin(port_num, PIN_0, LOGIC_HIGH);
    2bb6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb8:	60 e0       	ldi	r22, 0x00	; 0
    2bba:	41 e0       	ldi	r20, 0x01	; 1
    2bbc:	0e 94 a0 10 	call	0x2140	; 0x2140 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_HIGH);
    2bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc2:	61 e0       	ldi	r22, 0x01	; 1
    2bc4:	41 e0       	ldi	r20, 0x01	; 1
    2bc6:	0e 94 a0 10 	call	0x2140	; 0x2140 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_HIGH);
    2bca:	8a 81       	ldd	r24, Y+2	; 0x02
    2bcc:	62 e0       	ldi	r22, 0x02	; 2
    2bce:	41 e0       	ldi	r20, 0x01	; 1
    2bd0:	0e 94 a0 10 	call	0x2140	; 0x2140 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    2bd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd6:	63 e0       	ldi	r22, 0x03	; 3
    2bd8:	40 e0       	ldi	r20, 0x00	; 0
    2bda:	0e 94 a0 10 	call	0x2140	; 0x2140 <GPIO_writePin>
    2bde:	29 c0       	rjmp	.+82     	; 0x2c32 <SEGMENT_DISPLAY+0x266>
				break;
			case 8:
				GPIO_writePin(port_num, PIN_0, LOGIC_LOW);
    2be0:	8a 81       	ldd	r24, Y+2	; 0x02
    2be2:	60 e0       	ldi	r22, 0x00	; 0
    2be4:	40 e0       	ldi	r20, 0x00	; 0
    2be6:	0e 94 a0 10 	call	0x2140	; 0x2140 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
    2bea:	8a 81       	ldd	r24, Y+2	; 0x02
    2bec:	61 e0       	ldi	r22, 0x01	; 1
    2bee:	40 e0       	ldi	r20, 0x00	; 0
    2bf0:	0e 94 a0 10 	call	0x2140	; 0x2140 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
    2bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf6:	62 e0       	ldi	r22, 0x02	; 2
    2bf8:	40 e0       	ldi	r20, 0x00	; 0
    2bfa:	0e 94 a0 10 	call	0x2140	; 0x2140 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_HIGH);
    2bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    2c00:	63 e0       	ldi	r22, 0x03	; 3
    2c02:	41 e0       	ldi	r20, 0x01	; 1
    2c04:	0e 94 a0 10 	call	0x2140	; 0x2140 <GPIO_writePin>
    2c08:	14 c0       	rjmp	.+40     	; 0x2c32 <SEGMENT_DISPLAY+0x266>
				break;
			case 9:
				GPIO_writePin(port_num, PIN_0, LOGIC_HIGH);
    2c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c0c:	60 e0       	ldi	r22, 0x00	; 0
    2c0e:	41 e0       	ldi	r20, 0x01	; 1
    2c10:	0e 94 a0 10 	call	0x2140	; 0x2140 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
    2c14:	8a 81       	ldd	r24, Y+2	; 0x02
    2c16:	61 e0       	ldi	r22, 0x01	; 1
    2c18:	40 e0       	ldi	r20, 0x00	; 0
    2c1a:	0e 94 a0 10 	call	0x2140	; 0x2140 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
    2c1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c20:	62 e0       	ldi	r22, 0x02	; 2
    2c22:	40 e0       	ldi	r20, 0x00	; 0
    2c24:	0e 94 a0 10 	call	0x2140	; 0x2140 <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_HIGH);
    2c28:	8a 81       	ldd	r24, Y+2	; 0x02
    2c2a:	63 e0       	ldi	r22, 0x03	; 3
    2c2c:	41 e0       	ldi	r20, 0x01	; 1
    2c2e:	0e 94 a0 10 	call	0x2140	; 0x2140 <GPIO_writePin>
				break;
		}
		SEGMENT_Driver_Checker = SEGMENT_OK;
    2c32:	19 82       	std	Y+1, r1	; 0x01
	}
	return SEGMENT_Driver_Checker;
    2c34:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c36:	0f 90       	pop	r0
    2c38:	0f 90       	pop	r0
    2c3a:	0f 90       	pop	r0
    2c3c:	0f 90       	pop	r0
    2c3e:	0f 90       	pop	r0
    2c40:	cf 91       	pop	r28
    2c42:	df 91       	pop	r29
    2c44:	08 95       	ret

00002c46 <MOTOR_dcMotorInit>:
 *                              					Module Implementation                           					  	  *
 *******************************************************************************/

// Initializes and enables the ADC Module to start functionality

void MOTOR_dcMotorInit() {
    2c46:	df 93       	push	r29
    2c48:	cf 93       	push	r28
    2c4a:	cd b7       	in	r28, 0x3d	; 61
    2c4c:	de b7       	in	r29, 0x3e	; 62
	// Configuring the Input pins to control the Motor
	GPIO_setupPinDirection(DCMOTOR_INPUT_PORT, DCMOTOR_CLOCKWISE, PIN_INPUT);
    2c4e:	eb e3       	ldi	r30, 0x3B	; 59
    2c50:	f0 e0       	ldi	r31, 0x00	; 0
    2c52:	80 81       	ld	r24, Z
    2c54:	60 e0       	ldi	r22, 0x00	; 0
    2c56:	40 e0       	ldi	r20, 0x00	; 0
    2c58:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DCMOTOR_INPUT_PORT, DCMOTOR_ANTICLOCKWISE, PIN_INPUT);
    2c5c:	eb e3       	ldi	r30, 0x3B	; 59
    2c5e:	f0 e0       	ldi	r31, 0x00	; 0
    2c60:	80 81       	ld	r24, Z
    2c62:	61 e0       	ldi	r22, 0x01	; 1
    2c64:	40 e0       	ldi	r20, 0x00	; 0
    2c66:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DCMOTOR_INPUT_PORT, DCMOTOR_OFF, PIN_INPUT);
    2c6a:	eb e3       	ldi	r30, 0x3B	; 59
    2c6c:	f0 e0       	ldi	r31, 0x00	; 0
    2c6e:	80 81       	ld	r24, Z
    2c70:	62 e0       	ldi	r22, 0x02	; 2
    2c72:	40 e0       	ldi	r20, 0x00	; 0
    2c74:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(DCMOTOR_OUTPUT_PORT, DCMOTOR_OUTPUT_PIN, PIN_OUTPUT);
    2c78:	e5 e3       	ldi	r30, 0x35	; 53
    2c7a:	f0 e0       	ldi	r31, 0x00	; 0
    2c7c:	80 81       	ld	r24, Z
    2c7e:	60 e0       	ldi	r22, 0x00	; 0
    2c80:	41 e0       	ldi	r20, 0x01	; 1
    2c82:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DCMOTOR_OUTPUT_PORT, DCMOTOR_OUTPUT_PIN + 1, PIN_OUTPUT);
    2c86:	e5 e3       	ldi	r30, 0x35	; 53
    2c88:	f0 e0       	ldi	r31, 0x00	; 0
    2c8a:	80 81       	ld	r24, Z
    2c8c:	61 e0       	ldi	r22, 0x01	; 1
    2c8e:	41 e0       	ldi	r20, 0x01	; 1
    2c90:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <GPIO_setupPinDirection>
}
    2c94:	cf 91       	pop	r28
    2c96:	df 91       	pop	r29
    2c98:	08 95       	ret

00002c9a <MOTOR_dcMotorControl>:

void MOTOR_dcMotorControl(void) {
    2c9a:	df 93       	push	r29
    2c9c:	cf 93       	push	r28
    2c9e:	cd b7       	in	r28, 0x3d	; 61
    2ca0:	de b7       	in	r29, 0x3e	; 62
	// Configuring the Input pins to control the Motor
	MOTOR_dcMotorInit();
    2ca2:	0e 94 23 16 	call	0x2c46	; 0x2c46 <MOTOR_dcMotorInit>

	// SETTING THE BITS OF THE L293D CHIP CONTROLLING THE MOTORS
	if (BIT_IS_SET(DCMOTOR_INPUT_PORT, DCMOTOR_CLOCKWISE)) {
    2ca6:	eb e3       	ldi	r30, 0x3B	; 59
    2ca8:	f0 e0       	ldi	r31, 0x00	; 0
    2caa:	80 81       	ld	r24, Z
    2cac:	88 2f       	mov	r24, r24
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	81 70       	andi	r24, 0x01	; 1
    2cb2:	90 70       	andi	r25, 0x00	; 0
    2cb4:	88 23       	and	r24, r24
    2cb6:	79 f0       	breq	.+30     	; 0x2cd6 <MOTOR_dcMotorControl+0x3c>
		CLR_BIT(DCMOTOR_OUTPUT_PORT, DCMOTOR_OUTPUT_PIN);
    2cb8:	a5 e3       	ldi	r26, 0x35	; 53
    2cba:	b0 e0       	ldi	r27, 0x00	; 0
    2cbc:	e5 e3       	ldi	r30, 0x35	; 53
    2cbe:	f0 e0       	ldi	r31, 0x00	; 0
    2cc0:	80 81       	ld	r24, Z
    2cc2:	8e 7f       	andi	r24, 0xFE	; 254
    2cc4:	8c 93       	st	X, r24
		SET_BIT(DCMOTOR_OUTPUT_PORT, (DCMOTOR_OUTPUT_PIN + 1));
    2cc6:	a5 e3       	ldi	r26, 0x35	; 53
    2cc8:	b0 e0       	ldi	r27, 0x00	; 0
    2cca:	e5 e3       	ldi	r30, 0x35	; 53
    2ccc:	f0 e0       	ldi	r31, 0x00	; 0
    2cce:	80 81       	ld	r24, Z
    2cd0:	82 60       	ori	r24, 0x02	; 2
    2cd2:	8c 93       	st	X, r24
    2cd4:	2f c0       	rjmp	.+94     	; 0x2d34 <MOTOR_dcMotorControl+0x9a>
	}

	else if (BIT_IS_SET(DCMOTOR_INPUT_PORT, DCMOTOR_ANTICLOCKWISE)) {
    2cd6:	eb e3       	ldi	r30, 0x3B	; 59
    2cd8:	f0 e0       	ldi	r31, 0x00	; 0
    2cda:	80 81       	ld	r24, Z
    2cdc:	88 2f       	mov	r24, r24
    2cde:	90 e0       	ldi	r25, 0x00	; 0
    2ce0:	82 70       	andi	r24, 0x02	; 2
    2ce2:	90 70       	andi	r25, 0x00	; 0
    2ce4:	00 97       	sbiw	r24, 0x00	; 0
    2ce6:	79 f0       	breq	.+30     	; 0x2d06 <MOTOR_dcMotorControl+0x6c>
		SET_BIT(DCMOTOR_OUTPUT_PORT, DCMOTOR_OUTPUT_PIN);
    2ce8:	a5 e3       	ldi	r26, 0x35	; 53
    2cea:	b0 e0       	ldi	r27, 0x00	; 0
    2cec:	e5 e3       	ldi	r30, 0x35	; 53
    2cee:	f0 e0       	ldi	r31, 0x00	; 0
    2cf0:	80 81       	ld	r24, Z
    2cf2:	81 60       	ori	r24, 0x01	; 1
    2cf4:	8c 93       	st	X, r24
		CLR_BIT(DCMOTOR_OUTPUT_PORT, (DCMOTOR_OUTPUT_PIN + 1));
    2cf6:	a5 e3       	ldi	r26, 0x35	; 53
    2cf8:	b0 e0       	ldi	r27, 0x00	; 0
    2cfa:	e5 e3       	ldi	r30, 0x35	; 53
    2cfc:	f0 e0       	ldi	r31, 0x00	; 0
    2cfe:	80 81       	ld	r24, Z
    2d00:	8d 7f       	andi	r24, 0xFD	; 253
    2d02:	8c 93       	st	X, r24
    2d04:	17 c0       	rjmp	.+46     	; 0x2d34 <MOTOR_dcMotorControl+0x9a>
	}

	else if (BIT_IS_SET(DCMOTOR_INPUT_PORT, DCMOTOR_OFF)) {
    2d06:	eb e3       	ldi	r30, 0x3B	; 59
    2d08:	f0 e0       	ldi	r31, 0x00	; 0
    2d0a:	80 81       	ld	r24, Z
    2d0c:	88 2f       	mov	r24, r24
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	84 70       	andi	r24, 0x04	; 4
    2d12:	90 70       	andi	r25, 0x00	; 0
    2d14:	00 97       	sbiw	r24, 0x00	; 0
    2d16:	71 f0       	breq	.+28     	; 0x2d34 <MOTOR_dcMotorControl+0x9a>
		CLR_BIT(DCMOTOR_OUTPUT_PORT, DCMOTOR_OUTPUT_PIN);
    2d18:	a5 e3       	ldi	r26, 0x35	; 53
    2d1a:	b0 e0       	ldi	r27, 0x00	; 0
    2d1c:	e5 e3       	ldi	r30, 0x35	; 53
    2d1e:	f0 e0       	ldi	r31, 0x00	; 0
    2d20:	80 81       	ld	r24, Z
    2d22:	8e 7f       	andi	r24, 0xFE	; 254
    2d24:	8c 93       	st	X, r24
		CLR_BIT(DCMOTOR_OUTPUT_PORT, (DCMOTOR_OUTPUT_PIN + 1));
    2d26:	a5 e3       	ldi	r26, 0x35	; 53
    2d28:	b0 e0       	ldi	r27, 0x00	; 0
    2d2a:	e5 e3       	ldi	r30, 0x35	; 53
    2d2c:	f0 e0       	ldi	r31, 0x00	; 0
    2d2e:	80 81       	ld	r24, Z
    2d30:	8d 7f       	andi	r24, 0xFD	; 253
    2d32:	8c 93       	st	X, r24
	}
}
    2d34:	cf 91       	pop	r28
    2d36:	df 91       	pop	r29
    2d38:	08 95       	ret

00002d3a <LM35_getTemperature>:
#include "avr/io.h" /* To use the IO Ports Registers */
#include <util/delay.h>


// Initializes and enables the ADC Module to start functionality
uint8 LM35_getTemperature(void) {
    2d3a:	df 93       	push	r29
    2d3c:	cf 93       	push	r28
    2d3e:	00 d0       	rcall	.+0      	; 0x2d40 <LM35_getTemperature+0x6>
    2d40:	cd b7       	in	r28, 0x3d	; 61
    2d42:	de b7       	in	r29, 0x3e	; 62
	uint8 temperature = 0;
    2d44:	1a 82       	std	Y+2, r1	; 0x02
	uint8 ADC_Value = 0;
    2d46:	19 82       	std	Y+1, r1	; 0x01
	ADC_Value = ADC_readChannel(LM35_CH_ID);
    2d48:	82 e0       	ldi	r24, 0x02	; 2
    2d4a:	0e 94 87 14 	call	0x290e	; 0x290e <ADC_readChannel>
    2d4e:	89 83       	std	Y+1, r24	; 0x01

	temperature = (uint8) ( ( (uint32)ADC_Value * LM35_MAX_TEMP * ADC_REFERENCE_VOLT_VALUE) / (ADC_MAX_VALUE * LM35_MAX_VOLT) );
    2d50:	89 81       	ldd	r24, Y+1	; 0x01
    2d52:	88 2f       	mov	r24, r24
    2d54:	90 e0       	ldi	r25, 0x00	; 0
    2d56:	a0 e0       	ldi	r26, 0x00	; 0
    2d58:	b0 e0       	ldi	r27, 0x00	; 0
    2d5a:	2e ee       	ldi	r18, 0xEE	; 238
    2d5c:	32 e0       	ldi	r19, 0x02	; 2
    2d5e:	40 e0       	ldi	r20, 0x00	; 0
    2d60:	50 e0       	ldi	r21, 0x00	; 0
    2d62:	bc 01       	movw	r22, r24
    2d64:	cd 01       	movw	r24, r26
    2d66:	0e 94 dc 20 	call	0x41b8	; 0x41b8 <__mulsi3>
    2d6a:	dc 01       	movw	r26, r24
    2d6c:	cb 01       	movw	r24, r22
    2d6e:	bc 01       	movw	r22, r24
    2d70:	cd 01       	movw	r24, r26
    2d72:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    2d76:	dc 01       	movw	r26, r24
    2d78:	cb 01       	movw	r24, r22
    2d7a:	bc 01       	movw	r22, r24
    2d7c:	cd 01       	movw	r24, r26
    2d7e:	20 e0       	ldi	r18, 0x00	; 0
    2d80:	30 ed       	ldi	r19, 0xD0	; 208
    2d82:	4f eb       	ldi	r20, 0xBF	; 191
    2d84:	54 e4       	ldi	r21, 0x44	; 68
    2d86:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2d8a:	dc 01       	movw	r26, r24
    2d8c:	cb 01       	movw	r24, r22
    2d8e:	bc 01       	movw	r22, r24
    2d90:	cd 01       	movw	r24, r26
    2d92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d96:	dc 01       	movw	r26, r24
    2d98:	cb 01       	movw	r24, r22
    2d9a:	8a 83       	std	Y+2, r24	; 0x02

	return temperature;
    2d9c:	8a 81       	ldd	r24, Y+2	; 0x02

}
    2d9e:	0f 90       	pop	r0
    2da0:	0f 90       	pop	r0
    2da2:	cf 91       	pop	r28
    2da4:	df 91       	pop	r29
    2da6:	08 95       	ret

00002da8 <LED_Init>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
LED_Error_t LED_Init(uint8 port_num, uint8 pin_num) {
    2da8:	df 93       	push	r29
    2daa:	cf 93       	push	r28
    2dac:	00 d0       	rcall	.+0      	; 0x2dae <LED_Init+0x6>
    2dae:	0f 92       	push	r0
    2db0:	cd b7       	in	r28, 0x3d	; 61
    2db2:	de b7       	in	r29, 0x3e	; 62
    2db4:	8a 83       	std	Y+2, r24	; 0x02
    2db6:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t LED_Driver_Checker = NULL;
    2db8:	19 82       	std	Y+1, r1	; 0x01
	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    2dba:	8b 81       	ldd	r24, Y+3	; 0x03
    2dbc:	88 30       	cpi	r24, 0x08	; 8
    2dbe:	18 f0       	brcs	.+6      	; 0x2dc6 <LED_Init+0x1e>
		LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    2dc0:	81 e0       	ldi	r24, 0x01	; 1
    2dc2:	89 83       	std	Y+1, r24	; 0x01
    2dc4:	0c c0       	rjmp	.+24     	; 0x2dde <LED_Init+0x36>
	}
	else if((port_num >= NUM_OF_PORTS)) {
    2dc6:	8a 81       	ldd	r24, Y+2	; 0x02
    2dc8:	84 30       	cpi	r24, 0x04	; 4
    2dca:	18 f0       	brcs	.+6      	; 0x2dd2 <LED_Init+0x2a>
		LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    2dcc:	82 e0       	ldi	r24, 0x02	; 2
    2dce:	89 83       	std	Y+1, r24	; 0x01
    2dd0:	06 c0       	rjmp	.+12     	; 0x2dde <LED_Init+0x36>
	}
	else {
		/* Setup the pin direction as required */
		GPIO_setupPinDirection(port_num, pin_num, PIN_OUTPUT);
    2dd2:	8a 81       	ldd	r24, Y+2	; 0x02
    2dd4:	6b 81       	ldd	r22, Y+3	; 0x03
    2dd6:	41 e0       	ldi	r20, 0x01	; 1
    2dd8:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <GPIO_setupPinDirection>
		LED_Driver_Checker = LED_OK;
    2ddc:	19 82       	std	Y+1, r1	; 0x01
	}
	return LED_Driver_Checker;
    2dde:	89 81       	ldd	r24, Y+1	; 0x01
}
    2de0:	0f 90       	pop	r0
    2de2:	0f 90       	pop	r0
    2de4:	0f 90       	pop	r0
    2de6:	cf 91       	pop	r28
    2de8:	df 91       	pop	r29
    2dea:	08 95       	ret

00002dec <LED_On>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
LED_Error_t LED_On(uint8 port_num, uint8 pin_num) {
    2dec:	df 93       	push	r29
    2dee:	cf 93       	push	r28
    2df0:	00 d0       	rcall	.+0      	; 0x2df2 <LED_On+0x6>
    2df2:	0f 92       	push	r0
    2df4:	cd b7       	in	r28, 0x3d	; 61
    2df6:	de b7       	in	r29, 0x3e	; 62
    2df8:	8a 83       	std	Y+2, r24	; 0x02
    2dfa:	6b 83       	std	Y+3, r22	; 0x03

	uint8_t LED_Driver_Checker = NULL;
    2dfc:	19 82       	std	Y+1, r1	; 0x01
		if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    2dfe:	8b 81       	ldd	r24, Y+3	; 0x03
    2e00:	88 30       	cpi	r24, 0x08	; 8
    2e02:	18 f0       	brcs	.+6      	; 0x2e0a <LED_On+0x1e>
			LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    2e04:	81 e0       	ldi	r24, 0x01	; 1
    2e06:	89 83       	std	Y+1, r24	; 0x01
    2e08:	0c c0       	rjmp	.+24     	; 0x2e22 <LED_On+0x36>
		}
		else if((port_num >= NUM_OF_PORTS)) {
    2e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e0c:	84 30       	cpi	r24, 0x04	; 4
    2e0e:	18 f0       	brcs	.+6      	; 0x2e16 <LED_On+0x2a>
			LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    2e10:	82 e0       	ldi	r24, 0x02	; 2
    2e12:	89 83       	std	Y+1, r24	; 0x01
    2e14:	06 c0       	rjmp	.+12     	; 0x2e22 <LED_On+0x36>
		else {
			/* Setup the pin direction as required */
			#if (LED_MODE == LED_NEGATIVE_LOGIC)
				GPIO_writePin(port_num, pin_num, LOGIC_LOW);
			#elif (LED_MODE == LED_POSITIVE_LOGIC)
				GPIO_writePin(port_num, pin_num, LOGIC_HIGH);
    2e16:	8a 81       	ldd	r24, Y+2	; 0x02
    2e18:	6b 81       	ldd	r22, Y+3	; 0x03
    2e1a:	41 e0       	ldi	r20, 0x01	; 1
    2e1c:	0e 94 a0 10 	call	0x2140	; 0x2140 <GPIO_writePin>
			#endif
			LED_Driver_Checker = LED_OK;
    2e20:	19 82       	std	Y+1, r1	; 0x01
		}
		return LED_Driver_Checker;
    2e22:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e24:	0f 90       	pop	r0
    2e26:	0f 90       	pop	r0
    2e28:	0f 90       	pop	r0
    2e2a:	cf 91       	pop	r28
    2e2c:	df 91       	pop	r29
    2e2e:	08 95       	ret

00002e30 <LED_Off>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
LED_Error_t LED_Off(uint8 port_num, uint8 pin_num) {
    2e30:	df 93       	push	r29
    2e32:	cf 93       	push	r28
    2e34:	00 d0       	rcall	.+0      	; 0x2e36 <LED_Off+0x6>
    2e36:	0f 92       	push	r0
    2e38:	cd b7       	in	r28, 0x3d	; 61
    2e3a:	de b7       	in	r29, 0x3e	; 62
    2e3c:	8a 83       	std	Y+2, r24	; 0x02
    2e3e:	6b 83       	std	Y+3, r22	; 0x03

	uint8_t LED_Driver_Checker = NULL;
    2e40:	19 82       	std	Y+1, r1	; 0x01
		if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    2e42:	8b 81       	ldd	r24, Y+3	; 0x03
    2e44:	88 30       	cpi	r24, 0x08	; 8
    2e46:	18 f0       	brcs	.+6      	; 0x2e4e <LED_Off+0x1e>
			LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    2e48:	81 e0       	ldi	r24, 0x01	; 1
    2e4a:	89 83       	std	Y+1, r24	; 0x01
    2e4c:	0c c0       	rjmp	.+24     	; 0x2e66 <LED_Off+0x36>
		}
		else if((port_num >= NUM_OF_PORTS)) {
    2e4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e50:	84 30       	cpi	r24, 0x04	; 4
    2e52:	18 f0       	brcs	.+6      	; 0x2e5a <LED_Off+0x2a>
			LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    2e54:	82 e0       	ldi	r24, 0x02	; 2
    2e56:	89 83       	std	Y+1, r24	; 0x01
    2e58:	06 c0       	rjmp	.+12     	; 0x2e66 <LED_Off+0x36>
		else {
			/* Setup the pin direction as required */
			#if (LED_MODE == LED_NEGATIVE_LOGIC)
				GPIO_writePin(port_num, pin_num, LOGIC_HIGH);
			#elif (LED_MODE == LED_POSITIVE_LOGIC)
				GPIO_writePin(port_num, pin_num, LOGIC_LOW);
    2e5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e5c:	6b 81       	ldd	r22, Y+3	; 0x03
    2e5e:	40 e0       	ldi	r20, 0x00	; 0
    2e60:	0e 94 a0 10 	call	0x2140	; 0x2140 <GPIO_writePin>
			#endif
			LED_Driver_Checker = LED_OK;
    2e64:	19 82       	std	Y+1, r1	; 0x01
		}
		return LED_Driver_Checker;
    2e66:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e68:	0f 90       	pop	r0
    2e6a:	0f 90       	pop	r0
    2e6c:	0f 90       	pop	r0
    2e6e:	cf 91       	pop	r28
    2e70:	df 91       	pop	r29
    2e72:	08 95       	ret

00002e74 <LED_Toggle>:

LED_Error_t LED_Toggle(uint8 port_num, uint8 pin_num) {
    2e74:	df 93       	push	r29
    2e76:	cf 93       	push	r28
    2e78:	00 d0       	rcall	.+0      	; 0x2e7a <LED_Toggle+0x6>
    2e7a:	0f 92       	push	r0
    2e7c:	cd b7       	in	r28, 0x3d	; 61
    2e7e:	de b7       	in	r29, 0x3e	; 62
    2e80:	8a 83       	std	Y+2, r24	; 0x02
    2e82:	6b 83       	std	Y+3, r22	; 0x03

	uint8_t LED_Driver_Checker = NULL;
    2e84:	19 82       	std	Y+1, r1	; 0x01
		if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    2e86:	8b 81       	ldd	r24, Y+3	; 0x03
    2e88:	88 30       	cpi	r24, 0x08	; 8
    2e8a:	18 f0       	brcs	.+6      	; 0x2e92 <LED_Toggle+0x1e>
			LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    2e8c:	81 e0       	ldi	r24, 0x01	; 1
    2e8e:	89 83       	std	Y+1, r24	; 0x01
    2e90:	0b c0       	rjmp	.+22     	; 0x2ea8 <LED_Toggle+0x34>
		}
		else if((port_num >= NUM_OF_PORTS)) {
    2e92:	8a 81       	ldd	r24, Y+2	; 0x02
    2e94:	84 30       	cpi	r24, 0x04	; 4
    2e96:	18 f0       	brcs	.+6      	; 0x2e9e <LED_Toggle+0x2a>
			LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    2e98:	82 e0       	ldi	r24, 0x02	; 2
    2e9a:	89 83       	std	Y+1, r24	; 0x01
    2e9c:	05 c0       	rjmp	.+10     	; 0x2ea8 <LED_Toggle+0x34>
		}
		else {
			/* Setup the pin direction as required */
			GPIO_togglePin(port_num, pin_num);
    2e9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea0:	6b 81       	ldd	r22, Y+3	; 0x03
    2ea2:	0e 94 9c 11 	call	0x2338	; 0x2338 <GPIO_togglePin>
			LED_Driver_Checker = LED_OK;
    2ea6:	19 82       	std	Y+1, r1	; 0x01
		}
		return LED_Driver_Checker;
    2ea8:	89 81       	ldd	r24, Y+1	; 0x01
}
    2eaa:	0f 90       	pop	r0
    2eac:	0f 90       	pop	r0
    2eae:	0f 90       	pop	r0
    2eb0:	cf 91       	pop	r28
    2eb2:	df 91       	pop	r29
    2eb4:	08 95       	ret

00002eb6 <LCD_Init>:
#include "avr/io.h" /* To use the IO Ports Registers */
#include <util/delay.h>


// Initializes and enables the LCD Module to start functionality
void LCD_Init(void) {
    2eb6:	df 93       	push	r29
    2eb8:	cf 93       	push	r28
    2eba:	cd b7       	in	r28, 0x3d	; 61
    2ebc:	de b7       	in	r29, 0x3e	; 62
    2ebe:	2e 97       	sbiw	r28, 0x0e	; 14
    2ec0:	0f b6       	in	r0, 0x3f	; 63
    2ec2:	f8 94       	cli
    2ec4:	de bf       	out	0x3e, r29	; 62
    2ec6:	0f be       	out	0x3f, r0	; 63
    2ec8:	cd bf       	out	0x3d, r28	; 61
	// Initialize RS Pin
	GPIO_setupPinDirection(LCD_INIT_PORT, LCD_RS, PIN_OUTPUT);
    2eca:	81 e0       	ldi	r24, 0x01	; 1
    2ecc:	60 e0       	ldi	r22, 0x00	; 0
    2ece:	41 e0       	ldi	r20, 0x01	; 1
    2ed0:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <GPIO_setupPinDirection>

	// Initialize Enable Pin
	GPIO_setupPinDirection(LCD_INIT_PORT, LCD_ENABLE, PIN_OUTPUT);
    2ed4:	81 e0       	ldi	r24, 0x01	; 1
    2ed6:	61 e0       	ldi	r22, 0x01	; 1
    2ed8:	41 e0       	ldi	r20, 0x01	; 1
    2eda:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <GPIO_setupPinDirection>
    2ede:	80 e0       	ldi	r24, 0x00	; 0
    2ee0:	90 e0       	ldi	r25, 0x00	; 0
    2ee2:	a0 ea       	ldi	r26, 0xA0	; 160
    2ee4:	b1 e4       	ldi	r27, 0x41	; 65
    2ee6:	8b 87       	std	Y+11, r24	; 0x0b
    2ee8:	9c 87       	std	Y+12, r25	; 0x0c
    2eea:	ad 87       	std	Y+13, r26	; 0x0d
    2eec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eee:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ef0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ef2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ef4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ef6:	20 e0       	ldi	r18, 0x00	; 0
    2ef8:	30 e0       	ldi	r19, 0x00	; 0
    2efa:	4a ef       	ldi	r20, 0xFA	; 250
    2efc:	54 e4       	ldi	r21, 0x44	; 68
    2efe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f02:	dc 01       	movw	r26, r24
    2f04:	cb 01       	movw	r24, r22
    2f06:	8f 83       	std	Y+7, r24	; 0x07
    2f08:	98 87       	std	Y+8, r25	; 0x08
    2f0a:	a9 87       	std	Y+9, r26	; 0x09
    2f0c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f0e:	6f 81       	ldd	r22, Y+7	; 0x07
    2f10:	78 85       	ldd	r23, Y+8	; 0x08
    2f12:	89 85       	ldd	r24, Y+9	; 0x09
    2f14:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f16:	20 e0       	ldi	r18, 0x00	; 0
    2f18:	30 e0       	ldi	r19, 0x00	; 0
    2f1a:	40 e8       	ldi	r20, 0x80	; 128
    2f1c:	5f e3       	ldi	r21, 0x3F	; 63
    2f1e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f22:	88 23       	and	r24, r24
    2f24:	2c f4       	brge	.+10     	; 0x2f30 <LCD_Init+0x7a>
		__ticks = 1;
    2f26:	81 e0       	ldi	r24, 0x01	; 1
    2f28:	90 e0       	ldi	r25, 0x00	; 0
    2f2a:	9e 83       	std	Y+6, r25	; 0x06
    2f2c:	8d 83       	std	Y+5, r24	; 0x05
    2f2e:	3f c0       	rjmp	.+126    	; 0x2fae <LCD_Init+0xf8>
	else if (__tmp > 65535)
    2f30:	6f 81       	ldd	r22, Y+7	; 0x07
    2f32:	78 85       	ldd	r23, Y+8	; 0x08
    2f34:	89 85       	ldd	r24, Y+9	; 0x09
    2f36:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f38:	20 e0       	ldi	r18, 0x00	; 0
    2f3a:	3f ef       	ldi	r19, 0xFF	; 255
    2f3c:	4f e7       	ldi	r20, 0x7F	; 127
    2f3e:	57 e4       	ldi	r21, 0x47	; 71
    2f40:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f44:	18 16       	cp	r1, r24
    2f46:	4c f5       	brge	.+82     	; 0x2f9a <LCD_Init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f48:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f50:	20 e0       	ldi	r18, 0x00	; 0
    2f52:	30 e0       	ldi	r19, 0x00	; 0
    2f54:	40 e2       	ldi	r20, 0x20	; 32
    2f56:	51 e4       	ldi	r21, 0x41	; 65
    2f58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f5c:	dc 01       	movw	r26, r24
    2f5e:	cb 01       	movw	r24, r22
    2f60:	bc 01       	movw	r22, r24
    2f62:	cd 01       	movw	r24, r26
    2f64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f68:	dc 01       	movw	r26, r24
    2f6a:	cb 01       	movw	r24, r22
    2f6c:	9e 83       	std	Y+6, r25	; 0x06
    2f6e:	8d 83       	std	Y+5, r24	; 0x05
    2f70:	0f c0       	rjmp	.+30     	; 0x2f90 <LCD_Init+0xda>
    2f72:	88 ec       	ldi	r24, 0xC8	; 200
    2f74:	90 e0       	ldi	r25, 0x00	; 0
    2f76:	9c 83       	std	Y+4, r25	; 0x04
    2f78:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2f7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f7c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f7e:	01 97       	sbiw	r24, 0x01	; 1
    2f80:	f1 f7       	brne	.-4      	; 0x2f7e <LCD_Init+0xc8>
    2f82:	9c 83       	std	Y+4, r25	; 0x04
    2f84:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f86:	8d 81       	ldd	r24, Y+5	; 0x05
    2f88:	9e 81       	ldd	r25, Y+6	; 0x06
    2f8a:	01 97       	sbiw	r24, 0x01	; 1
    2f8c:	9e 83       	std	Y+6, r25	; 0x06
    2f8e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f90:	8d 81       	ldd	r24, Y+5	; 0x05
    2f92:	9e 81       	ldd	r25, Y+6	; 0x06
    2f94:	00 97       	sbiw	r24, 0x00	; 0
    2f96:	69 f7       	brne	.-38     	; 0x2f72 <LCD_Init+0xbc>
    2f98:	14 c0       	rjmp	.+40     	; 0x2fc2 <LCD_Init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f9a:	6f 81       	ldd	r22, Y+7	; 0x07
    2f9c:	78 85       	ldd	r23, Y+8	; 0x08
    2f9e:	89 85       	ldd	r24, Y+9	; 0x09
    2fa0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fa6:	dc 01       	movw	r26, r24
    2fa8:	cb 01       	movw	r24, r22
    2faa:	9e 83       	std	Y+6, r25	; 0x06
    2fac:	8d 83       	std	Y+5, r24	; 0x05
    2fae:	8d 81       	ldd	r24, Y+5	; 0x05
    2fb0:	9e 81       	ldd	r25, Y+6	; 0x06
    2fb2:	9a 83       	std	Y+2, r25	; 0x02
    2fb4:	89 83       	std	Y+1, r24	; 0x01
    2fb6:	89 81       	ldd	r24, Y+1	; 0x01
    2fb8:	9a 81       	ldd	r25, Y+2	; 0x02
    2fba:	01 97       	sbiw	r24, 0x01	; 1
    2fbc:	f1 f7       	brne	.-4      	; 0x2fba <LCD_Init+0x104>
    2fbe:	9a 83       	std	Y+2, r25	; 0x02
    2fc0:	89 83       	std	Y+1, r24	; 0x01
		LCD_sendCommand(LCD_TWO_LINE_FOUR_BIT_INIT2);
		LCD_sendCommand(LCD_TWO_LINE_FOUR_BIT);
	}
	else if (LCD_BIT_MODE == LCD_8_BIT) {
		// Setup the port and pins for the data pins inside the LCD
		GPIO_setupPortDirection(LCD_DATA_PORT, PORT_OUTPUT);
    2fc2:	80 e0       	ldi	r24, 0x00	; 0
    2fc4:	6f ef       	ldi	r22, 0xFF	; 255
    2fc6:	0e 94 d5 12 	call	0x25aa	; 0x25aa <GPIO_setupPortDirection>

		LCD_sendCommand(LCD_TWO_LINE_EIGHT_BIT);
    2fca:	88 e3       	ldi	r24, 0x38	; 56
    2fcc:	0e 94 f7 17 	call	0x2fee	; 0x2fee <LCD_sendCommand>

		LCD_sendCommand(LCD_TWO_LINE_EIGHT_BIT);
	}

	// Makes the cursor off
	LCD_sendCommand(LCD_CURSOR_OFF);
    2fd0:	8c e0       	ldi	r24, 0x0C	; 12
    2fd2:	0e 94 f7 17 	call	0x2fee	; 0x2fee <LCD_sendCommand>
	// Clears Display
	LCD_sendCommand(LCD_CLEAR_DISPLAY);
    2fd6:	81 e0       	ldi	r24, 0x01	; 1
    2fd8:	0e 94 f7 17 	call	0x2fee	; 0x2fee <LCD_sendCommand>
}
    2fdc:	2e 96       	adiw	r28, 0x0e	; 14
    2fde:	0f b6       	in	r0, 0x3f	; 63
    2fe0:	f8 94       	cli
    2fe2:	de bf       	out	0x3e, r29	; 62
    2fe4:	0f be       	out	0x3f, r0	; 63
    2fe6:	cd bf       	out	0x3d, r28	; 61
    2fe8:	cf 91       	pop	r28
    2fea:	df 91       	pop	r29
    2fec:	08 95       	ret

00002fee <LCD_sendCommand>:


// Sends a command to the LCD
void LCD_sendCommand(uint8 command) {
    2fee:	df 93       	push	r29
    2ff0:	cf 93       	push	r28
    2ff2:	cd b7       	in	r28, 0x3d	; 61
    2ff4:	de b7       	in	r29, 0x3e	; 62
    2ff6:	e9 97       	sbiw	r28, 0x39	; 57
    2ff8:	0f b6       	in	r0, 0x3f	; 63
    2ffa:	f8 94       	cli
    2ffc:	de bf       	out	0x3e, r29	; 62
    2ffe:	0f be       	out	0x3f, r0	; 63
    3000:	cd bf       	out	0x3d, r28	; 61
    3002:	89 af       	std	Y+57, r24	; 0x39
	// Set RS Pin to '0'
	GPIO_writePin(LCD_INIT_PORT, LCD_RS, LOGIC_LOW);
    3004:	81 e0       	ldi	r24, 0x01	; 1
    3006:	60 e0       	ldi	r22, 0x00	; 0
    3008:	40 e0       	ldi	r20, 0x00	; 0
    300a:	0e 94 a0 10 	call	0x2140	; 0x2140 <GPIO_writePin>
    300e:	80 e0       	ldi	r24, 0x00	; 0
    3010:	90 e0       	ldi	r25, 0x00	; 0
    3012:	a0 e8       	ldi	r26, 0x80	; 128
    3014:	bf e3       	ldi	r27, 0x3F	; 63
    3016:	8d ab       	std	Y+53, r24	; 0x35
    3018:	9e ab       	std	Y+54, r25	; 0x36
    301a:	af ab       	std	Y+55, r26	; 0x37
    301c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    301e:	6d a9       	ldd	r22, Y+53	; 0x35
    3020:	7e a9       	ldd	r23, Y+54	; 0x36
    3022:	8f a9       	ldd	r24, Y+55	; 0x37
    3024:	98 ad       	ldd	r25, Y+56	; 0x38
    3026:	20 e0       	ldi	r18, 0x00	; 0
    3028:	30 e0       	ldi	r19, 0x00	; 0
    302a:	4a ef       	ldi	r20, 0xFA	; 250
    302c:	54 e4       	ldi	r21, 0x44	; 68
    302e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3032:	dc 01       	movw	r26, r24
    3034:	cb 01       	movw	r24, r22
    3036:	89 ab       	std	Y+49, r24	; 0x31
    3038:	9a ab       	std	Y+50, r25	; 0x32
    303a:	ab ab       	std	Y+51, r26	; 0x33
    303c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    303e:	69 a9       	ldd	r22, Y+49	; 0x31
    3040:	7a a9       	ldd	r23, Y+50	; 0x32
    3042:	8b a9       	ldd	r24, Y+51	; 0x33
    3044:	9c a9       	ldd	r25, Y+52	; 0x34
    3046:	20 e0       	ldi	r18, 0x00	; 0
    3048:	30 e0       	ldi	r19, 0x00	; 0
    304a:	40 e8       	ldi	r20, 0x80	; 128
    304c:	5f e3       	ldi	r21, 0x3F	; 63
    304e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3052:	88 23       	and	r24, r24
    3054:	2c f4       	brge	.+10     	; 0x3060 <LCD_sendCommand+0x72>
		__ticks = 1;
    3056:	81 e0       	ldi	r24, 0x01	; 1
    3058:	90 e0       	ldi	r25, 0x00	; 0
    305a:	98 ab       	std	Y+48, r25	; 0x30
    305c:	8f a7       	std	Y+47, r24	; 0x2f
    305e:	3f c0       	rjmp	.+126    	; 0x30de <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    3060:	69 a9       	ldd	r22, Y+49	; 0x31
    3062:	7a a9       	ldd	r23, Y+50	; 0x32
    3064:	8b a9       	ldd	r24, Y+51	; 0x33
    3066:	9c a9       	ldd	r25, Y+52	; 0x34
    3068:	20 e0       	ldi	r18, 0x00	; 0
    306a:	3f ef       	ldi	r19, 0xFF	; 255
    306c:	4f e7       	ldi	r20, 0x7F	; 127
    306e:	57 e4       	ldi	r21, 0x47	; 71
    3070:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3074:	18 16       	cp	r1, r24
    3076:	4c f5       	brge	.+82     	; 0x30ca <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3078:	6d a9       	ldd	r22, Y+53	; 0x35
    307a:	7e a9       	ldd	r23, Y+54	; 0x36
    307c:	8f a9       	ldd	r24, Y+55	; 0x37
    307e:	98 ad       	ldd	r25, Y+56	; 0x38
    3080:	20 e0       	ldi	r18, 0x00	; 0
    3082:	30 e0       	ldi	r19, 0x00	; 0
    3084:	40 e2       	ldi	r20, 0x20	; 32
    3086:	51 e4       	ldi	r21, 0x41	; 65
    3088:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    308c:	dc 01       	movw	r26, r24
    308e:	cb 01       	movw	r24, r22
    3090:	bc 01       	movw	r22, r24
    3092:	cd 01       	movw	r24, r26
    3094:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3098:	dc 01       	movw	r26, r24
    309a:	cb 01       	movw	r24, r22
    309c:	98 ab       	std	Y+48, r25	; 0x30
    309e:	8f a7       	std	Y+47, r24	; 0x2f
    30a0:	0f c0       	rjmp	.+30     	; 0x30c0 <LCD_sendCommand+0xd2>
    30a2:	88 ec       	ldi	r24, 0xC8	; 200
    30a4:	90 e0       	ldi	r25, 0x00	; 0
    30a6:	9e a7       	std	Y+46, r25	; 0x2e
    30a8:	8d a7       	std	Y+45, r24	; 0x2d
    30aa:	8d a5       	ldd	r24, Y+45	; 0x2d
    30ac:	9e a5       	ldd	r25, Y+46	; 0x2e
    30ae:	01 97       	sbiw	r24, 0x01	; 1
    30b0:	f1 f7       	brne	.-4      	; 0x30ae <LCD_sendCommand+0xc0>
    30b2:	9e a7       	std	Y+46, r25	; 0x2e
    30b4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    30b8:	98 a9       	ldd	r25, Y+48	; 0x30
    30ba:	01 97       	sbiw	r24, 0x01	; 1
    30bc:	98 ab       	std	Y+48, r25	; 0x30
    30be:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    30c2:	98 a9       	ldd	r25, Y+48	; 0x30
    30c4:	00 97       	sbiw	r24, 0x00	; 0
    30c6:	69 f7       	brne	.-38     	; 0x30a2 <LCD_sendCommand+0xb4>
    30c8:	14 c0       	rjmp	.+40     	; 0x30f2 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30ca:	69 a9       	ldd	r22, Y+49	; 0x31
    30cc:	7a a9       	ldd	r23, Y+50	; 0x32
    30ce:	8b a9       	ldd	r24, Y+51	; 0x33
    30d0:	9c a9       	ldd	r25, Y+52	; 0x34
    30d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30d6:	dc 01       	movw	r26, r24
    30d8:	cb 01       	movw	r24, r22
    30da:	98 ab       	std	Y+48, r25	; 0x30
    30dc:	8f a7       	std	Y+47, r24	; 0x2f
    30de:	8f a5       	ldd	r24, Y+47	; 0x2f
    30e0:	98 a9       	ldd	r25, Y+48	; 0x30
    30e2:	9c a7       	std	Y+44, r25	; 0x2c
    30e4:	8b a7       	std	Y+43, r24	; 0x2b
    30e6:	8b a5       	ldd	r24, Y+43	; 0x2b
    30e8:	9c a5       	ldd	r25, Y+44	; 0x2c
    30ea:	01 97       	sbiw	r24, 0x01	; 1
    30ec:	f1 f7       	brne	.-4      	; 0x30ea <LCD_sendCommand+0xfc>
    30ee:	9c a7       	std	Y+44, r25	; 0x2c
    30f0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	// Set Enable Pin to '1'
	GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
    30f2:	81 e0       	ldi	r24, 0x01	; 1
    30f4:	61 e0       	ldi	r22, 0x01	; 1
    30f6:	41 e0       	ldi	r20, 0x01	; 1
    30f8:	0e 94 a0 10 	call	0x2140	; 0x2140 <GPIO_writePin>
    30fc:	80 e0       	ldi	r24, 0x00	; 0
    30fe:	90 e0       	ldi	r25, 0x00	; 0
    3100:	a0 e8       	ldi	r26, 0x80	; 128
    3102:	bf e3       	ldi	r27, 0x3F	; 63
    3104:	8f a3       	std	Y+39, r24	; 0x27
    3106:	98 a7       	std	Y+40, r25	; 0x28
    3108:	a9 a7       	std	Y+41, r26	; 0x29
    310a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    310c:	6f a1       	ldd	r22, Y+39	; 0x27
    310e:	78 a5       	ldd	r23, Y+40	; 0x28
    3110:	89 a5       	ldd	r24, Y+41	; 0x29
    3112:	9a a5       	ldd	r25, Y+42	; 0x2a
    3114:	20 e0       	ldi	r18, 0x00	; 0
    3116:	30 e0       	ldi	r19, 0x00	; 0
    3118:	4a ef       	ldi	r20, 0xFA	; 250
    311a:	54 e4       	ldi	r21, 0x44	; 68
    311c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3120:	dc 01       	movw	r26, r24
    3122:	cb 01       	movw	r24, r22
    3124:	8b a3       	std	Y+35, r24	; 0x23
    3126:	9c a3       	std	Y+36, r25	; 0x24
    3128:	ad a3       	std	Y+37, r26	; 0x25
    312a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    312c:	6b a1       	ldd	r22, Y+35	; 0x23
    312e:	7c a1       	ldd	r23, Y+36	; 0x24
    3130:	8d a1       	ldd	r24, Y+37	; 0x25
    3132:	9e a1       	ldd	r25, Y+38	; 0x26
    3134:	20 e0       	ldi	r18, 0x00	; 0
    3136:	30 e0       	ldi	r19, 0x00	; 0
    3138:	40 e8       	ldi	r20, 0x80	; 128
    313a:	5f e3       	ldi	r21, 0x3F	; 63
    313c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3140:	88 23       	and	r24, r24
    3142:	2c f4       	brge	.+10     	; 0x314e <LCD_sendCommand+0x160>
		__ticks = 1;
    3144:	81 e0       	ldi	r24, 0x01	; 1
    3146:	90 e0       	ldi	r25, 0x00	; 0
    3148:	9a a3       	std	Y+34, r25	; 0x22
    314a:	89 a3       	std	Y+33, r24	; 0x21
    314c:	3f c0       	rjmp	.+126    	; 0x31cc <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    314e:	6b a1       	ldd	r22, Y+35	; 0x23
    3150:	7c a1       	ldd	r23, Y+36	; 0x24
    3152:	8d a1       	ldd	r24, Y+37	; 0x25
    3154:	9e a1       	ldd	r25, Y+38	; 0x26
    3156:	20 e0       	ldi	r18, 0x00	; 0
    3158:	3f ef       	ldi	r19, 0xFF	; 255
    315a:	4f e7       	ldi	r20, 0x7F	; 127
    315c:	57 e4       	ldi	r21, 0x47	; 71
    315e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3162:	18 16       	cp	r1, r24
    3164:	4c f5       	brge	.+82     	; 0x31b8 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3166:	6f a1       	ldd	r22, Y+39	; 0x27
    3168:	78 a5       	ldd	r23, Y+40	; 0x28
    316a:	89 a5       	ldd	r24, Y+41	; 0x29
    316c:	9a a5       	ldd	r25, Y+42	; 0x2a
    316e:	20 e0       	ldi	r18, 0x00	; 0
    3170:	30 e0       	ldi	r19, 0x00	; 0
    3172:	40 e2       	ldi	r20, 0x20	; 32
    3174:	51 e4       	ldi	r21, 0x41	; 65
    3176:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    317a:	dc 01       	movw	r26, r24
    317c:	cb 01       	movw	r24, r22
    317e:	bc 01       	movw	r22, r24
    3180:	cd 01       	movw	r24, r26
    3182:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3186:	dc 01       	movw	r26, r24
    3188:	cb 01       	movw	r24, r22
    318a:	9a a3       	std	Y+34, r25	; 0x22
    318c:	89 a3       	std	Y+33, r24	; 0x21
    318e:	0f c0       	rjmp	.+30     	; 0x31ae <LCD_sendCommand+0x1c0>
    3190:	88 ec       	ldi	r24, 0xC8	; 200
    3192:	90 e0       	ldi	r25, 0x00	; 0
    3194:	98 a3       	std	Y+32, r25	; 0x20
    3196:	8f 8f       	std	Y+31, r24	; 0x1f
    3198:	8f 8d       	ldd	r24, Y+31	; 0x1f
    319a:	98 a1       	ldd	r25, Y+32	; 0x20
    319c:	01 97       	sbiw	r24, 0x01	; 1
    319e:	f1 f7       	brne	.-4      	; 0x319c <LCD_sendCommand+0x1ae>
    31a0:	98 a3       	std	Y+32, r25	; 0x20
    31a2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31a4:	89 a1       	ldd	r24, Y+33	; 0x21
    31a6:	9a a1       	ldd	r25, Y+34	; 0x22
    31a8:	01 97       	sbiw	r24, 0x01	; 1
    31aa:	9a a3       	std	Y+34, r25	; 0x22
    31ac:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31ae:	89 a1       	ldd	r24, Y+33	; 0x21
    31b0:	9a a1       	ldd	r25, Y+34	; 0x22
    31b2:	00 97       	sbiw	r24, 0x00	; 0
    31b4:	69 f7       	brne	.-38     	; 0x3190 <LCD_sendCommand+0x1a2>
    31b6:	14 c0       	rjmp	.+40     	; 0x31e0 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31b8:	6b a1       	ldd	r22, Y+35	; 0x23
    31ba:	7c a1       	ldd	r23, Y+36	; 0x24
    31bc:	8d a1       	ldd	r24, Y+37	; 0x25
    31be:	9e a1       	ldd	r25, Y+38	; 0x26
    31c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31c4:	dc 01       	movw	r26, r24
    31c6:	cb 01       	movw	r24, r22
    31c8:	9a a3       	std	Y+34, r25	; 0x22
    31ca:	89 a3       	std	Y+33, r24	; 0x21
    31cc:	89 a1       	ldd	r24, Y+33	; 0x21
    31ce:	9a a1       	ldd	r25, Y+34	; 0x22
    31d0:	9e 8f       	std	Y+30, r25	; 0x1e
    31d2:	8d 8f       	std	Y+29, r24	; 0x1d
    31d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31d6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    31d8:	01 97       	sbiw	r24, 0x01	; 1
    31da:	f1 f7       	brne	.-4      	; 0x31d8 <LCD_sendCommand+0x1ea>
    31dc:	9e 8f       	std	Y+30, r25	; 0x1e
    31de:	8d 8f       	std	Y+29, r24	; 0x1d
		// Clear Enable Pin to '0'
		GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
		_delay_ms(1); /* delay for processing Th = 13ns */
	}
	else if (LCD_BIT_MODE == LCD_8_BIT) {
		GPIO_writePort(LCD_DATA_PORT, command);
    31e0:	80 e0       	ldi	r24, 0x00	; 0
    31e2:	69 ad       	ldd	r22, Y+57	; 0x39
    31e4:	0e 94 2a 13 	call	0x2654	; 0x2654 <GPIO_writePort>
    31e8:	80 e0       	ldi	r24, 0x00	; 0
    31ea:	90 e0       	ldi	r25, 0x00	; 0
    31ec:	a0 e8       	ldi	r26, 0x80	; 128
    31ee:	bf e3       	ldi	r27, 0x3F	; 63
    31f0:	89 8f       	std	Y+25, r24	; 0x19
    31f2:	9a 8f       	std	Y+26, r25	; 0x1a
    31f4:	ab 8f       	std	Y+27, r26	; 0x1b
    31f6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31f8:	69 8d       	ldd	r22, Y+25	; 0x19
    31fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3200:	20 e0       	ldi	r18, 0x00	; 0
    3202:	30 e0       	ldi	r19, 0x00	; 0
    3204:	4a ef       	ldi	r20, 0xFA	; 250
    3206:	54 e4       	ldi	r21, 0x44	; 68
    3208:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    320c:	dc 01       	movw	r26, r24
    320e:	cb 01       	movw	r24, r22
    3210:	8d 8b       	std	Y+21, r24	; 0x15
    3212:	9e 8b       	std	Y+22, r25	; 0x16
    3214:	af 8b       	std	Y+23, r26	; 0x17
    3216:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3218:	6d 89       	ldd	r22, Y+21	; 0x15
    321a:	7e 89       	ldd	r23, Y+22	; 0x16
    321c:	8f 89       	ldd	r24, Y+23	; 0x17
    321e:	98 8d       	ldd	r25, Y+24	; 0x18
    3220:	20 e0       	ldi	r18, 0x00	; 0
    3222:	30 e0       	ldi	r19, 0x00	; 0
    3224:	40 e8       	ldi	r20, 0x80	; 128
    3226:	5f e3       	ldi	r21, 0x3F	; 63
    3228:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    322c:	88 23       	and	r24, r24
    322e:	2c f4       	brge	.+10     	; 0x323a <LCD_sendCommand+0x24c>
		__ticks = 1;
    3230:	81 e0       	ldi	r24, 0x01	; 1
    3232:	90 e0       	ldi	r25, 0x00	; 0
    3234:	9c 8b       	std	Y+20, r25	; 0x14
    3236:	8b 8b       	std	Y+19, r24	; 0x13
    3238:	3f c0       	rjmp	.+126    	; 0x32b8 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    323a:	6d 89       	ldd	r22, Y+21	; 0x15
    323c:	7e 89       	ldd	r23, Y+22	; 0x16
    323e:	8f 89       	ldd	r24, Y+23	; 0x17
    3240:	98 8d       	ldd	r25, Y+24	; 0x18
    3242:	20 e0       	ldi	r18, 0x00	; 0
    3244:	3f ef       	ldi	r19, 0xFF	; 255
    3246:	4f e7       	ldi	r20, 0x7F	; 127
    3248:	57 e4       	ldi	r21, 0x47	; 71
    324a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    324e:	18 16       	cp	r1, r24
    3250:	4c f5       	brge	.+82     	; 0x32a4 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3252:	69 8d       	ldd	r22, Y+25	; 0x19
    3254:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3256:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3258:	9c 8d       	ldd	r25, Y+28	; 0x1c
    325a:	20 e0       	ldi	r18, 0x00	; 0
    325c:	30 e0       	ldi	r19, 0x00	; 0
    325e:	40 e2       	ldi	r20, 0x20	; 32
    3260:	51 e4       	ldi	r21, 0x41	; 65
    3262:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3266:	dc 01       	movw	r26, r24
    3268:	cb 01       	movw	r24, r22
    326a:	bc 01       	movw	r22, r24
    326c:	cd 01       	movw	r24, r26
    326e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3272:	dc 01       	movw	r26, r24
    3274:	cb 01       	movw	r24, r22
    3276:	9c 8b       	std	Y+20, r25	; 0x14
    3278:	8b 8b       	std	Y+19, r24	; 0x13
    327a:	0f c0       	rjmp	.+30     	; 0x329a <LCD_sendCommand+0x2ac>
    327c:	88 ec       	ldi	r24, 0xC8	; 200
    327e:	90 e0       	ldi	r25, 0x00	; 0
    3280:	9a 8b       	std	Y+18, r25	; 0x12
    3282:	89 8b       	std	Y+17, r24	; 0x11
    3284:	89 89       	ldd	r24, Y+17	; 0x11
    3286:	9a 89       	ldd	r25, Y+18	; 0x12
    3288:	01 97       	sbiw	r24, 0x01	; 1
    328a:	f1 f7       	brne	.-4      	; 0x3288 <LCD_sendCommand+0x29a>
    328c:	9a 8b       	std	Y+18, r25	; 0x12
    328e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3290:	8b 89       	ldd	r24, Y+19	; 0x13
    3292:	9c 89       	ldd	r25, Y+20	; 0x14
    3294:	01 97       	sbiw	r24, 0x01	; 1
    3296:	9c 8b       	std	Y+20, r25	; 0x14
    3298:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    329a:	8b 89       	ldd	r24, Y+19	; 0x13
    329c:	9c 89       	ldd	r25, Y+20	; 0x14
    329e:	00 97       	sbiw	r24, 0x00	; 0
    32a0:	69 f7       	brne	.-38     	; 0x327c <LCD_sendCommand+0x28e>
    32a2:	14 c0       	rjmp	.+40     	; 0x32cc <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32a4:	6d 89       	ldd	r22, Y+21	; 0x15
    32a6:	7e 89       	ldd	r23, Y+22	; 0x16
    32a8:	8f 89       	ldd	r24, Y+23	; 0x17
    32aa:	98 8d       	ldd	r25, Y+24	; 0x18
    32ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32b0:	dc 01       	movw	r26, r24
    32b2:	cb 01       	movw	r24, r22
    32b4:	9c 8b       	std	Y+20, r25	; 0x14
    32b6:	8b 8b       	std	Y+19, r24	; 0x13
    32b8:	8b 89       	ldd	r24, Y+19	; 0x13
    32ba:	9c 89       	ldd	r25, Y+20	; 0x14
    32bc:	98 8b       	std	Y+16, r25	; 0x10
    32be:	8f 87       	std	Y+15, r24	; 0x0f
    32c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    32c2:	98 89       	ldd	r25, Y+16	; 0x10
    32c4:	01 97       	sbiw	r24, 0x01	; 1
    32c6:	f1 f7       	brne	.-4      	; 0x32c4 <LCD_sendCommand+0x2d6>
    32c8:	98 8b       	std	Y+16, r25	; 0x10
    32ca:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);

		// Clear Enable Pin to '0'
		GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
    32cc:	81 e0       	ldi	r24, 0x01	; 1
    32ce:	61 e0       	ldi	r22, 0x01	; 1
    32d0:	40 e0       	ldi	r20, 0x00	; 0
    32d2:	0e 94 a0 10 	call	0x2140	; 0x2140 <GPIO_writePin>
    32d6:	80 e0       	ldi	r24, 0x00	; 0
    32d8:	90 e0       	ldi	r25, 0x00	; 0
    32da:	a0 e8       	ldi	r26, 0x80	; 128
    32dc:	bf e3       	ldi	r27, 0x3F	; 63
    32de:	8b 87       	std	Y+11, r24	; 0x0b
    32e0:	9c 87       	std	Y+12, r25	; 0x0c
    32e2:	ad 87       	std	Y+13, r26	; 0x0d
    32e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    32e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    32ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    32ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    32ee:	20 e0       	ldi	r18, 0x00	; 0
    32f0:	30 e0       	ldi	r19, 0x00	; 0
    32f2:	4a ef       	ldi	r20, 0xFA	; 250
    32f4:	54 e4       	ldi	r21, 0x44	; 68
    32f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32fa:	dc 01       	movw	r26, r24
    32fc:	cb 01       	movw	r24, r22
    32fe:	8f 83       	std	Y+7, r24	; 0x07
    3300:	98 87       	std	Y+8, r25	; 0x08
    3302:	a9 87       	std	Y+9, r26	; 0x09
    3304:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3306:	6f 81       	ldd	r22, Y+7	; 0x07
    3308:	78 85       	ldd	r23, Y+8	; 0x08
    330a:	89 85       	ldd	r24, Y+9	; 0x09
    330c:	9a 85       	ldd	r25, Y+10	; 0x0a
    330e:	20 e0       	ldi	r18, 0x00	; 0
    3310:	30 e0       	ldi	r19, 0x00	; 0
    3312:	40 e8       	ldi	r20, 0x80	; 128
    3314:	5f e3       	ldi	r21, 0x3F	; 63
    3316:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    331a:	88 23       	and	r24, r24
    331c:	2c f4       	brge	.+10     	; 0x3328 <LCD_sendCommand+0x33a>
		__ticks = 1;
    331e:	81 e0       	ldi	r24, 0x01	; 1
    3320:	90 e0       	ldi	r25, 0x00	; 0
    3322:	9e 83       	std	Y+6, r25	; 0x06
    3324:	8d 83       	std	Y+5, r24	; 0x05
    3326:	3f c0       	rjmp	.+126    	; 0x33a6 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    3328:	6f 81       	ldd	r22, Y+7	; 0x07
    332a:	78 85       	ldd	r23, Y+8	; 0x08
    332c:	89 85       	ldd	r24, Y+9	; 0x09
    332e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3330:	20 e0       	ldi	r18, 0x00	; 0
    3332:	3f ef       	ldi	r19, 0xFF	; 255
    3334:	4f e7       	ldi	r20, 0x7F	; 127
    3336:	57 e4       	ldi	r21, 0x47	; 71
    3338:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    333c:	18 16       	cp	r1, r24
    333e:	4c f5       	brge	.+82     	; 0x3392 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3340:	6b 85       	ldd	r22, Y+11	; 0x0b
    3342:	7c 85       	ldd	r23, Y+12	; 0x0c
    3344:	8d 85       	ldd	r24, Y+13	; 0x0d
    3346:	9e 85       	ldd	r25, Y+14	; 0x0e
    3348:	20 e0       	ldi	r18, 0x00	; 0
    334a:	30 e0       	ldi	r19, 0x00	; 0
    334c:	40 e2       	ldi	r20, 0x20	; 32
    334e:	51 e4       	ldi	r21, 0x41	; 65
    3350:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3354:	dc 01       	movw	r26, r24
    3356:	cb 01       	movw	r24, r22
    3358:	bc 01       	movw	r22, r24
    335a:	cd 01       	movw	r24, r26
    335c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3360:	dc 01       	movw	r26, r24
    3362:	cb 01       	movw	r24, r22
    3364:	9e 83       	std	Y+6, r25	; 0x06
    3366:	8d 83       	std	Y+5, r24	; 0x05
    3368:	0f c0       	rjmp	.+30     	; 0x3388 <LCD_sendCommand+0x39a>
    336a:	88 ec       	ldi	r24, 0xC8	; 200
    336c:	90 e0       	ldi	r25, 0x00	; 0
    336e:	9c 83       	std	Y+4, r25	; 0x04
    3370:	8b 83       	std	Y+3, r24	; 0x03
    3372:	8b 81       	ldd	r24, Y+3	; 0x03
    3374:	9c 81       	ldd	r25, Y+4	; 0x04
    3376:	01 97       	sbiw	r24, 0x01	; 1
    3378:	f1 f7       	brne	.-4      	; 0x3376 <LCD_sendCommand+0x388>
    337a:	9c 83       	std	Y+4, r25	; 0x04
    337c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    337e:	8d 81       	ldd	r24, Y+5	; 0x05
    3380:	9e 81       	ldd	r25, Y+6	; 0x06
    3382:	01 97       	sbiw	r24, 0x01	; 1
    3384:	9e 83       	std	Y+6, r25	; 0x06
    3386:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3388:	8d 81       	ldd	r24, Y+5	; 0x05
    338a:	9e 81       	ldd	r25, Y+6	; 0x06
    338c:	00 97       	sbiw	r24, 0x00	; 0
    338e:	69 f7       	brne	.-38     	; 0x336a <LCD_sendCommand+0x37c>
    3390:	14 c0       	rjmp	.+40     	; 0x33ba <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3392:	6f 81       	ldd	r22, Y+7	; 0x07
    3394:	78 85       	ldd	r23, Y+8	; 0x08
    3396:	89 85       	ldd	r24, Y+9	; 0x09
    3398:	9a 85       	ldd	r25, Y+10	; 0x0a
    339a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    339e:	dc 01       	movw	r26, r24
    33a0:	cb 01       	movw	r24, r22
    33a2:	9e 83       	std	Y+6, r25	; 0x06
    33a4:	8d 83       	std	Y+5, r24	; 0x05
    33a6:	8d 81       	ldd	r24, Y+5	; 0x05
    33a8:	9e 81       	ldd	r25, Y+6	; 0x06
    33aa:	9a 83       	std	Y+2, r25	; 0x02
    33ac:	89 83       	std	Y+1, r24	; 0x01
    33ae:	89 81       	ldd	r24, Y+1	; 0x01
    33b0:	9a 81       	ldd	r25, Y+2	; 0x02
    33b2:	01 97       	sbiw	r24, 0x01	; 1
    33b4:	f1 f7       	brne	.-4      	; 0x33b2 <LCD_sendCommand+0x3c4>
    33b6:	9a 83       	std	Y+2, r25	; 0x02
    33b8:	89 83       	std	Y+1, r24	; 0x01

		// Clear Enable Pin to '0'
		GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
		_delay_ms(1); /* delay for processing Th = 13ns */
	}
}
    33ba:	e9 96       	adiw	r28, 0x39	; 57
    33bc:	0f b6       	in	r0, 0x3f	; 63
    33be:	f8 94       	cli
    33c0:	de bf       	out	0x3e, r29	; 62
    33c2:	0f be       	out	0x3f, r0	; 63
    33c4:	cd bf       	out	0x3d, r28	; 61
    33c6:	cf 91       	pop	r28
    33c8:	df 91       	pop	r29
    33ca:	08 95       	ret

000033cc <LCD_displayCharacter>:


// Displays a character on the LCD
void LCD_displayCharacter(uint8 data) {
    33cc:	df 93       	push	r29
    33ce:	cf 93       	push	r28
    33d0:	cd b7       	in	r28, 0x3d	; 61
    33d2:	de b7       	in	r29, 0x3e	; 62
    33d4:	e9 97       	sbiw	r28, 0x39	; 57
    33d6:	0f b6       	in	r0, 0x3f	; 63
    33d8:	f8 94       	cli
    33da:	de bf       	out	0x3e, r29	; 62
    33dc:	0f be       	out	0x3f, r0	; 63
    33de:	cd bf       	out	0x3d, r28	; 61
    33e0:	89 af       	std	Y+57, r24	; 0x39
	// Set RS Pin to '1'
	GPIO_writePin(LCD_INIT_PORT, LCD_RS, LOGIC_HIGH);
    33e2:	81 e0       	ldi	r24, 0x01	; 1
    33e4:	60 e0       	ldi	r22, 0x00	; 0
    33e6:	41 e0       	ldi	r20, 0x01	; 1
    33e8:	0e 94 a0 10 	call	0x2140	; 0x2140 <GPIO_writePin>
    33ec:	80 e0       	ldi	r24, 0x00	; 0
    33ee:	90 e0       	ldi	r25, 0x00	; 0
    33f0:	a0 e8       	ldi	r26, 0x80	; 128
    33f2:	bf e3       	ldi	r27, 0x3F	; 63
    33f4:	8d ab       	std	Y+53, r24	; 0x35
    33f6:	9e ab       	std	Y+54, r25	; 0x36
    33f8:	af ab       	std	Y+55, r26	; 0x37
    33fa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33fc:	6d a9       	ldd	r22, Y+53	; 0x35
    33fe:	7e a9       	ldd	r23, Y+54	; 0x36
    3400:	8f a9       	ldd	r24, Y+55	; 0x37
    3402:	98 ad       	ldd	r25, Y+56	; 0x38
    3404:	20 e0       	ldi	r18, 0x00	; 0
    3406:	30 e0       	ldi	r19, 0x00	; 0
    3408:	4a ef       	ldi	r20, 0xFA	; 250
    340a:	54 e4       	ldi	r21, 0x44	; 68
    340c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3410:	dc 01       	movw	r26, r24
    3412:	cb 01       	movw	r24, r22
    3414:	89 ab       	std	Y+49, r24	; 0x31
    3416:	9a ab       	std	Y+50, r25	; 0x32
    3418:	ab ab       	std	Y+51, r26	; 0x33
    341a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    341c:	69 a9       	ldd	r22, Y+49	; 0x31
    341e:	7a a9       	ldd	r23, Y+50	; 0x32
    3420:	8b a9       	ldd	r24, Y+51	; 0x33
    3422:	9c a9       	ldd	r25, Y+52	; 0x34
    3424:	20 e0       	ldi	r18, 0x00	; 0
    3426:	30 e0       	ldi	r19, 0x00	; 0
    3428:	40 e8       	ldi	r20, 0x80	; 128
    342a:	5f e3       	ldi	r21, 0x3F	; 63
    342c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3430:	88 23       	and	r24, r24
    3432:	2c f4       	brge	.+10     	; 0x343e <LCD_displayCharacter+0x72>
		__ticks = 1;
    3434:	81 e0       	ldi	r24, 0x01	; 1
    3436:	90 e0       	ldi	r25, 0x00	; 0
    3438:	98 ab       	std	Y+48, r25	; 0x30
    343a:	8f a7       	std	Y+47, r24	; 0x2f
    343c:	3f c0       	rjmp	.+126    	; 0x34bc <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    343e:	69 a9       	ldd	r22, Y+49	; 0x31
    3440:	7a a9       	ldd	r23, Y+50	; 0x32
    3442:	8b a9       	ldd	r24, Y+51	; 0x33
    3444:	9c a9       	ldd	r25, Y+52	; 0x34
    3446:	20 e0       	ldi	r18, 0x00	; 0
    3448:	3f ef       	ldi	r19, 0xFF	; 255
    344a:	4f e7       	ldi	r20, 0x7F	; 127
    344c:	57 e4       	ldi	r21, 0x47	; 71
    344e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3452:	18 16       	cp	r1, r24
    3454:	4c f5       	brge	.+82     	; 0x34a8 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3456:	6d a9       	ldd	r22, Y+53	; 0x35
    3458:	7e a9       	ldd	r23, Y+54	; 0x36
    345a:	8f a9       	ldd	r24, Y+55	; 0x37
    345c:	98 ad       	ldd	r25, Y+56	; 0x38
    345e:	20 e0       	ldi	r18, 0x00	; 0
    3460:	30 e0       	ldi	r19, 0x00	; 0
    3462:	40 e2       	ldi	r20, 0x20	; 32
    3464:	51 e4       	ldi	r21, 0x41	; 65
    3466:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    346a:	dc 01       	movw	r26, r24
    346c:	cb 01       	movw	r24, r22
    346e:	bc 01       	movw	r22, r24
    3470:	cd 01       	movw	r24, r26
    3472:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3476:	dc 01       	movw	r26, r24
    3478:	cb 01       	movw	r24, r22
    347a:	98 ab       	std	Y+48, r25	; 0x30
    347c:	8f a7       	std	Y+47, r24	; 0x2f
    347e:	0f c0       	rjmp	.+30     	; 0x349e <LCD_displayCharacter+0xd2>
    3480:	88 ec       	ldi	r24, 0xC8	; 200
    3482:	90 e0       	ldi	r25, 0x00	; 0
    3484:	9e a7       	std	Y+46, r25	; 0x2e
    3486:	8d a7       	std	Y+45, r24	; 0x2d
    3488:	8d a5       	ldd	r24, Y+45	; 0x2d
    348a:	9e a5       	ldd	r25, Y+46	; 0x2e
    348c:	01 97       	sbiw	r24, 0x01	; 1
    348e:	f1 f7       	brne	.-4      	; 0x348c <LCD_displayCharacter+0xc0>
    3490:	9e a7       	std	Y+46, r25	; 0x2e
    3492:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3494:	8f a5       	ldd	r24, Y+47	; 0x2f
    3496:	98 a9       	ldd	r25, Y+48	; 0x30
    3498:	01 97       	sbiw	r24, 0x01	; 1
    349a:	98 ab       	std	Y+48, r25	; 0x30
    349c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    349e:	8f a5       	ldd	r24, Y+47	; 0x2f
    34a0:	98 a9       	ldd	r25, Y+48	; 0x30
    34a2:	00 97       	sbiw	r24, 0x00	; 0
    34a4:	69 f7       	brne	.-38     	; 0x3480 <LCD_displayCharacter+0xb4>
    34a6:	14 c0       	rjmp	.+40     	; 0x34d0 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34a8:	69 a9       	ldd	r22, Y+49	; 0x31
    34aa:	7a a9       	ldd	r23, Y+50	; 0x32
    34ac:	8b a9       	ldd	r24, Y+51	; 0x33
    34ae:	9c a9       	ldd	r25, Y+52	; 0x34
    34b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34b4:	dc 01       	movw	r26, r24
    34b6:	cb 01       	movw	r24, r22
    34b8:	98 ab       	std	Y+48, r25	; 0x30
    34ba:	8f a7       	std	Y+47, r24	; 0x2f
    34bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    34be:	98 a9       	ldd	r25, Y+48	; 0x30
    34c0:	9c a7       	std	Y+44, r25	; 0x2c
    34c2:	8b a7       	std	Y+43, r24	; 0x2b
    34c4:	8b a5       	ldd	r24, Y+43	; 0x2b
    34c6:	9c a5       	ldd	r25, Y+44	; 0x2c
    34c8:	01 97       	sbiw	r24, 0x01	; 1
    34ca:	f1 f7       	brne	.-4      	; 0x34c8 <LCD_displayCharacter+0xfc>
    34cc:	9c a7       	std	Y+44, r25	; 0x2c
    34ce:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	// Set Enable Pin to '1'
	GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
    34d0:	81 e0       	ldi	r24, 0x01	; 1
    34d2:	61 e0       	ldi	r22, 0x01	; 1
    34d4:	41 e0       	ldi	r20, 0x01	; 1
    34d6:	0e 94 a0 10 	call	0x2140	; 0x2140 <GPIO_writePin>
    34da:	80 e0       	ldi	r24, 0x00	; 0
    34dc:	90 e0       	ldi	r25, 0x00	; 0
    34de:	a0 e8       	ldi	r26, 0x80	; 128
    34e0:	bf e3       	ldi	r27, 0x3F	; 63
    34e2:	8f a3       	std	Y+39, r24	; 0x27
    34e4:	98 a7       	std	Y+40, r25	; 0x28
    34e6:	a9 a7       	std	Y+41, r26	; 0x29
    34e8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34ea:	6f a1       	ldd	r22, Y+39	; 0x27
    34ec:	78 a5       	ldd	r23, Y+40	; 0x28
    34ee:	89 a5       	ldd	r24, Y+41	; 0x29
    34f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    34f2:	20 e0       	ldi	r18, 0x00	; 0
    34f4:	30 e0       	ldi	r19, 0x00	; 0
    34f6:	4a ef       	ldi	r20, 0xFA	; 250
    34f8:	54 e4       	ldi	r21, 0x44	; 68
    34fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34fe:	dc 01       	movw	r26, r24
    3500:	cb 01       	movw	r24, r22
    3502:	8b a3       	std	Y+35, r24	; 0x23
    3504:	9c a3       	std	Y+36, r25	; 0x24
    3506:	ad a3       	std	Y+37, r26	; 0x25
    3508:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    350a:	6b a1       	ldd	r22, Y+35	; 0x23
    350c:	7c a1       	ldd	r23, Y+36	; 0x24
    350e:	8d a1       	ldd	r24, Y+37	; 0x25
    3510:	9e a1       	ldd	r25, Y+38	; 0x26
    3512:	20 e0       	ldi	r18, 0x00	; 0
    3514:	30 e0       	ldi	r19, 0x00	; 0
    3516:	40 e8       	ldi	r20, 0x80	; 128
    3518:	5f e3       	ldi	r21, 0x3F	; 63
    351a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    351e:	88 23       	and	r24, r24
    3520:	2c f4       	brge	.+10     	; 0x352c <LCD_displayCharacter+0x160>
		__ticks = 1;
    3522:	81 e0       	ldi	r24, 0x01	; 1
    3524:	90 e0       	ldi	r25, 0x00	; 0
    3526:	9a a3       	std	Y+34, r25	; 0x22
    3528:	89 a3       	std	Y+33, r24	; 0x21
    352a:	3f c0       	rjmp	.+126    	; 0x35aa <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    352c:	6b a1       	ldd	r22, Y+35	; 0x23
    352e:	7c a1       	ldd	r23, Y+36	; 0x24
    3530:	8d a1       	ldd	r24, Y+37	; 0x25
    3532:	9e a1       	ldd	r25, Y+38	; 0x26
    3534:	20 e0       	ldi	r18, 0x00	; 0
    3536:	3f ef       	ldi	r19, 0xFF	; 255
    3538:	4f e7       	ldi	r20, 0x7F	; 127
    353a:	57 e4       	ldi	r21, 0x47	; 71
    353c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3540:	18 16       	cp	r1, r24
    3542:	4c f5       	brge	.+82     	; 0x3596 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3544:	6f a1       	ldd	r22, Y+39	; 0x27
    3546:	78 a5       	ldd	r23, Y+40	; 0x28
    3548:	89 a5       	ldd	r24, Y+41	; 0x29
    354a:	9a a5       	ldd	r25, Y+42	; 0x2a
    354c:	20 e0       	ldi	r18, 0x00	; 0
    354e:	30 e0       	ldi	r19, 0x00	; 0
    3550:	40 e2       	ldi	r20, 0x20	; 32
    3552:	51 e4       	ldi	r21, 0x41	; 65
    3554:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3558:	dc 01       	movw	r26, r24
    355a:	cb 01       	movw	r24, r22
    355c:	bc 01       	movw	r22, r24
    355e:	cd 01       	movw	r24, r26
    3560:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3564:	dc 01       	movw	r26, r24
    3566:	cb 01       	movw	r24, r22
    3568:	9a a3       	std	Y+34, r25	; 0x22
    356a:	89 a3       	std	Y+33, r24	; 0x21
    356c:	0f c0       	rjmp	.+30     	; 0x358c <LCD_displayCharacter+0x1c0>
    356e:	88 ec       	ldi	r24, 0xC8	; 200
    3570:	90 e0       	ldi	r25, 0x00	; 0
    3572:	98 a3       	std	Y+32, r25	; 0x20
    3574:	8f 8f       	std	Y+31, r24	; 0x1f
    3576:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3578:	98 a1       	ldd	r25, Y+32	; 0x20
    357a:	01 97       	sbiw	r24, 0x01	; 1
    357c:	f1 f7       	brne	.-4      	; 0x357a <LCD_displayCharacter+0x1ae>
    357e:	98 a3       	std	Y+32, r25	; 0x20
    3580:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3582:	89 a1       	ldd	r24, Y+33	; 0x21
    3584:	9a a1       	ldd	r25, Y+34	; 0x22
    3586:	01 97       	sbiw	r24, 0x01	; 1
    3588:	9a a3       	std	Y+34, r25	; 0x22
    358a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    358c:	89 a1       	ldd	r24, Y+33	; 0x21
    358e:	9a a1       	ldd	r25, Y+34	; 0x22
    3590:	00 97       	sbiw	r24, 0x00	; 0
    3592:	69 f7       	brne	.-38     	; 0x356e <LCD_displayCharacter+0x1a2>
    3594:	14 c0       	rjmp	.+40     	; 0x35be <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3596:	6b a1       	ldd	r22, Y+35	; 0x23
    3598:	7c a1       	ldd	r23, Y+36	; 0x24
    359a:	8d a1       	ldd	r24, Y+37	; 0x25
    359c:	9e a1       	ldd	r25, Y+38	; 0x26
    359e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35a2:	dc 01       	movw	r26, r24
    35a4:	cb 01       	movw	r24, r22
    35a6:	9a a3       	std	Y+34, r25	; 0x22
    35a8:	89 a3       	std	Y+33, r24	; 0x21
    35aa:	89 a1       	ldd	r24, Y+33	; 0x21
    35ac:	9a a1       	ldd	r25, Y+34	; 0x22
    35ae:	9e 8f       	std	Y+30, r25	; 0x1e
    35b0:	8d 8f       	std	Y+29, r24	; 0x1d
    35b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    35b4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    35b6:	01 97       	sbiw	r24, 0x01	; 1
    35b8:	f1 f7       	brne	.-4      	; 0x35b6 <LCD_displayCharacter+0x1ea>
    35ba:	9e 8f       	std	Y+30, r25	; 0x1e
    35bc:	8d 8f       	std	Y+29, r24	; 0x1d
		// Clear Enable Pin to '0'
		GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
		_delay_ms(1); /* delay for processing Th = 13ns */
	}
	else if (LCD_BIT_MODE == LCD_8_BIT) {
		GPIO_writePort(LCD_DATA_PORT, data);
    35be:	80 e0       	ldi	r24, 0x00	; 0
    35c0:	69 ad       	ldd	r22, Y+57	; 0x39
    35c2:	0e 94 2a 13 	call	0x2654	; 0x2654 <GPIO_writePort>
    35c6:	80 e0       	ldi	r24, 0x00	; 0
    35c8:	90 e0       	ldi	r25, 0x00	; 0
    35ca:	a0 e8       	ldi	r26, 0x80	; 128
    35cc:	bf e3       	ldi	r27, 0x3F	; 63
    35ce:	89 8f       	std	Y+25, r24	; 0x19
    35d0:	9a 8f       	std	Y+26, r25	; 0x1a
    35d2:	ab 8f       	std	Y+27, r26	; 0x1b
    35d4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35d6:	69 8d       	ldd	r22, Y+25	; 0x19
    35d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    35da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35de:	20 e0       	ldi	r18, 0x00	; 0
    35e0:	30 e0       	ldi	r19, 0x00	; 0
    35e2:	4a ef       	ldi	r20, 0xFA	; 250
    35e4:	54 e4       	ldi	r21, 0x44	; 68
    35e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35ea:	dc 01       	movw	r26, r24
    35ec:	cb 01       	movw	r24, r22
    35ee:	8d 8b       	std	Y+21, r24	; 0x15
    35f0:	9e 8b       	std	Y+22, r25	; 0x16
    35f2:	af 8b       	std	Y+23, r26	; 0x17
    35f4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    35f6:	6d 89       	ldd	r22, Y+21	; 0x15
    35f8:	7e 89       	ldd	r23, Y+22	; 0x16
    35fa:	8f 89       	ldd	r24, Y+23	; 0x17
    35fc:	98 8d       	ldd	r25, Y+24	; 0x18
    35fe:	20 e0       	ldi	r18, 0x00	; 0
    3600:	30 e0       	ldi	r19, 0x00	; 0
    3602:	40 e8       	ldi	r20, 0x80	; 128
    3604:	5f e3       	ldi	r21, 0x3F	; 63
    3606:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    360a:	88 23       	and	r24, r24
    360c:	2c f4       	brge	.+10     	; 0x3618 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    360e:	81 e0       	ldi	r24, 0x01	; 1
    3610:	90 e0       	ldi	r25, 0x00	; 0
    3612:	9c 8b       	std	Y+20, r25	; 0x14
    3614:	8b 8b       	std	Y+19, r24	; 0x13
    3616:	3f c0       	rjmp	.+126    	; 0x3696 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    3618:	6d 89       	ldd	r22, Y+21	; 0x15
    361a:	7e 89       	ldd	r23, Y+22	; 0x16
    361c:	8f 89       	ldd	r24, Y+23	; 0x17
    361e:	98 8d       	ldd	r25, Y+24	; 0x18
    3620:	20 e0       	ldi	r18, 0x00	; 0
    3622:	3f ef       	ldi	r19, 0xFF	; 255
    3624:	4f e7       	ldi	r20, 0x7F	; 127
    3626:	57 e4       	ldi	r21, 0x47	; 71
    3628:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    362c:	18 16       	cp	r1, r24
    362e:	4c f5       	brge	.+82     	; 0x3682 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3630:	69 8d       	ldd	r22, Y+25	; 0x19
    3632:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3634:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3636:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3638:	20 e0       	ldi	r18, 0x00	; 0
    363a:	30 e0       	ldi	r19, 0x00	; 0
    363c:	40 e2       	ldi	r20, 0x20	; 32
    363e:	51 e4       	ldi	r21, 0x41	; 65
    3640:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3644:	dc 01       	movw	r26, r24
    3646:	cb 01       	movw	r24, r22
    3648:	bc 01       	movw	r22, r24
    364a:	cd 01       	movw	r24, r26
    364c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3650:	dc 01       	movw	r26, r24
    3652:	cb 01       	movw	r24, r22
    3654:	9c 8b       	std	Y+20, r25	; 0x14
    3656:	8b 8b       	std	Y+19, r24	; 0x13
    3658:	0f c0       	rjmp	.+30     	; 0x3678 <LCD_displayCharacter+0x2ac>
    365a:	88 ec       	ldi	r24, 0xC8	; 200
    365c:	90 e0       	ldi	r25, 0x00	; 0
    365e:	9a 8b       	std	Y+18, r25	; 0x12
    3660:	89 8b       	std	Y+17, r24	; 0x11
    3662:	89 89       	ldd	r24, Y+17	; 0x11
    3664:	9a 89       	ldd	r25, Y+18	; 0x12
    3666:	01 97       	sbiw	r24, 0x01	; 1
    3668:	f1 f7       	brne	.-4      	; 0x3666 <LCD_displayCharacter+0x29a>
    366a:	9a 8b       	std	Y+18, r25	; 0x12
    366c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    366e:	8b 89       	ldd	r24, Y+19	; 0x13
    3670:	9c 89       	ldd	r25, Y+20	; 0x14
    3672:	01 97       	sbiw	r24, 0x01	; 1
    3674:	9c 8b       	std	Y+20, r25	; 0x14
    3676:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3678:	8b 89       	ldd	r24, Y+19	; 0x13
    367a:	9c 89       	ldd	r25, Y+20	; 0x14
    367c:	00 97       	sbiw	r24, 0x00	; 0
    367e:	69 f7       	brne	.-38     	; 0x365a <LCD_displayCharacter+0x28e>
    3680:	14 c0       	rjmp	.+40     	; 0x36aa <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3682:	6d 89       	ldd	r22, Y+21	; 0x15
    3684:	7e 89       	ldd	r23, Y+22	; 0x16
    3686:	8f 89       	ldd	r24, Y+23	; 0x17
    3688:	98 8d       	ldd	r25, Y+24	; 0x18
    368a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    368e:	dc 01       	movw	r26, r24
    3690:	cb 01       	movw	r24, r22
    3692:	9c 8b       	std	Y+20, r25	; 0x14
    3694:	8b 8b       	std	Y+19, r24	; 0x13
    3696:	8b 89       	ldd	r24, Y+19	; 0x13
    3698:	9c 89       	ldd	r25, Y+20	; 0x14
    369a:	98 8b       	std	Y+16, r25	; 0x10
    369c:	8f 87       	std	Y+15, r24	; 0x0f
    369e:	8f 85       	ldd	r24, Y+15	; 0x0f
    36a0:	98 89       	ldd	r25, Y+16	; 0x10
    36a2:	01 97       	sbiw	r24, 0x01	; 1
    36a4:	f1 f7       	brne	.-4      	; 0x36a2 <LCD_displayCharacter+0x2d6>
    36a6:	98 8b       	std	Y+16, r25	; 0x10
    36a8:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);

		// Clear Enable Pin to '0'
		GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
    36aa:	81 e0       	ldi	r24, 0x01	; 1
    36ac:	61 e0       	ldi	r22, 0x01	; 1
    36ae:	40 e0       	ldi	r20, 0x00	; 0
    36b0:	0e 94 a0 10 	call	0x2140	; 0x2140 <GPIO_writePin>
    36b4:	80 e0       	ldi	r24, 0x00	; 0
    36b6:	90 e0       	ldi	r25, 0x00	; 0
    36b8:	a0 e8       	ldi	r26, 0x80	; 128
    36ba:	bf e3       	ldi	r27, 0x3F	; 63
    36bc:	8b 87       	std	Y+11, r24	; 0x0b
    36be:	9c 87       	std	Y+12, r25	; 0x0c
    36c0:	ad 87       	std	Y+13, r26	; 0x0d
    36c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    36c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    36c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    36ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    36cc:	20 e0       	ldi	r18, 0x00	; 0
    36ce:	30 e0       	ldi	r19, 0x00	; 0
    36d0:	4a ef       	ldi	r20, 0xFA	; 250
    36d2:	54 e4       	ldi	r21, 0x44	; 68
    36d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36d8:	dc 01       	movw	r26, r24
    36da:	cb 01       	movw	r24, r22
    36dc:	8f 83       	std	Y+7, r24	; 0x07
    36de:	98 87       	std	Y+8, r25	; 0x08
    36e0:	a9 87       	std	Y+9, r26	; 0x09
    36e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    36e4:	6f 81       	ldd	r22, Y+7	; 0x07
    36e6:	78 85       	ldd	r23, Y+8	; 0x08
    36e8:	89 85       	ldd	r24, Y+9	; 0x09
    36ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    36ec:	20 e0       	ldi	r18, 0x00	; 0
    36ee:	30 e0       	ldi	r19, 0x00	; 0
    36f0:	40 e8       	ldi	r20, 0x80	; 128
    36f2:	5f e3       	ldi	r21, 0x3F	; 63
    36f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36f8:	88 23       	and	r24, r24
    36fa:	2c f4       	brge	.+10     	; 0x3706 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    36fc:	81 e0       	ldi	r24, 0x01	; 1
    36fe:	90 e0       	ldi	r25, 0x00	; 0
    3700:	9e 83       	std	Y+6, r25	; 0x06
    3702:	8d 83       	std	Y+5, r24	; 0x05
    3704:	3f c0       	rjmp	.+126    	; 0x3784 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    3706:	6f 81       	ldd	r22, Y+7	; 0x07
    3708:	78 85       	ldd	r23, Y+8	; 0x08
    370a:	89 85       	ldd	r24, Y+9	; 0x09
    370c:	9a 85       	ldd	r25, Y+10	; 0x0a
    370e:	20 e0       	ldi	r18, 0x00	; 0
    3710:	3f ef       	ldi	r19, 0xFF	; 255
    3712:	4f e7       	ldi	r20, 0x7F	; 127
    3714:	57 e4       	ldi	r21, 0x47	; 71
    3716:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    371a:	18 16       	cp	r1, r24
    371c:	4c f5       	brge	.+82     	; 0x3770 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    371e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3720:	7c 85       	ldd	r23, Y+12	; 0x0c
    3722:	8d 85       	ldd	r24, Y+13	; 0x0d
    3724:	9e 85       	ldd	r25, Y+14	; 0x0e
    3726:	20 e0       	ldi	r18, 0x00	; 0
    3728:	30 e0       	ldi	r19, 0x00	; 0
    372a:	40 e2       	ldi	r20, 0x20	; 32
    372c:	51 e4       	ldi	r21, 0x41	; 65
    372e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3732:	dc 01       	movw	r26, r24
    3734:	cb 01       	movw	r24, r22
    3736:	bc 01       	movw	r22, r24
    3738:	cd 01       	movw	r24, r26
    373a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    373e:	dc 01       	movw	r26, r24
    3740:	cb 01       	movw	r24, r22
    3742:	9e 83       	std	Y+6, r25	; 0x06
    3744:	8d 83       	std	Y+5, r24	; 0x05
    3746:	0f c0       	rjmp	.+30     	; 0x3766 <LCD_displayCharacter+0x39a>
    3748:	88 ec       	ldi	r24, 0xC8	; 200
    374a:	90 e0       	ldi	r25, 0x00	; 0
    374c:	9c 83       	std	Y+4, r25	; 0x04
    374e:	8b 83       	std	Y+3, r24	; 0x03
    3750:	8b 81       	ldd	r24, Y+3	; 0x03
    3752:	9c 81       	ldd	r25, Y+4	; 0x04
    3754:	01 97       	sbiw	r24, 0x01	; 1
    3756:	f1 f7       	brne	.-4      	; 0x3754 <LCD_displayCharacter+0x388>
    3758:	9c 83       	std	Y+4, r25	; 0x04
    375a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    375c:	8d 81       	ldd	r24, Y+5	; 0x05
    375e:	9e 81       	ldd	r25, Y+6	; 0x06
    3760:	01 97       	sbiw	r24, 0x01	; 1
    3762:	9e 83       	std	Y+6, r25	; 0x06
    3764:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3766:	8d 81       	ldd	r24, Y+5	; 0x05
    3768:	9e 81       	ldd	r25, Y+6	; 0x06
    376a:	00 97       	sbiw	r24, 0x00	; 0
    376c:	69 f7       	brne	.-38     	; 0x3748 <LCD_displayCharacter+0x37c>
    376e:	14 c0       	rjmp	.+40     	; 0x3798 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3770:	6f 81       	ldd	r22, Y+7	; 0x07
    3772:	78 85       	ldd	r23, Y+8	; 0x08
    3774:	89 85       	ldd	r24, Y+9	; 0x09
    3776:	9a 85       	ldd	r25, Y+10	; 0x0a
    3778:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    377c:	dc 01       	movw	r26, r24
    377e:	cb 01       	movw	r24, r22
    3780:	9e 83       	std	Y+6, r25	; 0x06
    3782:	8d 83       	std	Y+5, r24	; 0x05
    3784:	8d 81       	ldd	r24, Y+5	; 0x05
    3786:	9e 81       	ldd	r25, Y+6	; 0x06
    3788:	9a 83       	std	Y+2, r25	; 0x02
    378a:	89 83       	std	Y+1, r24	; 0x01
    378c:	89 81       	ldd	r24, Y+1	; 0x01
    378e:	9a 81       	ldd	r25, Y+2	; 0x02
    3790:	01 97       	sbiw	r24, 0x01	; 1
    3792:	f1 f7       	brne	.-4      	; 0x3790 <LCD_displayCharacter+0x3c4>
    3794:	9a 83       	std	Y+2, r25	; 0x02
    3796:	89 83       	std	Y+1, r24	; 0x01

		// Clear Enable Pin to '0'
		GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
		_delay_ms(1); /* delay for processing Th = 13ns */
	}
}
    3798:	e9 96       	adiw	r28, 0x39	; 57
    379a:	0f b6       	in	r0, 0x3f	; 63
    379c:	f8 94       	cli
    379e:	de bf       	out	0x3e, r29	; 62
    37a0:	0f be       	out	0x3f, r0	; 63
    37a2:	cd bf       	out	0x3d, r28	; 61
    37a4:	cf 91       	pop	r28
    37a6:	df 91       	pop	r29
    37a8:	08 95       	ret

000037aa <LCD_displayString>:


// Displays a string on the LCD
void LCD_displayString(const char *str) {
    37aa:	df 93       	push	r29
    37ac:	cf 93       	push	r28
    37ae:	00 d0       	rcall	.+0      	; 0x37b0 <LCD_displayString+0x6>
    37b0:	0f 92       	push	r0
    37b2:	cd b7       	in	r28, 0x3d	; 61
    37b4:	de b7       	in	r29, 0x3e	; 62
    37b6:	9b 83       	std	Y+3, r25	; 0x03
    37b8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    37ba:	19 82       	std	Y+1, r1	; 0x01
    37bc:	0e c0       	rjmp	.+28     	; 0x37da <LCD_displayString+0x30>
	while(str[i] != '\0') {
		LCD_displayCharacter(str[i]);
    37be:	89 81       	ldd	r24, Y+1	; 0x01
    37c0:	28 2f       	mov	r18, r24
    37c2:	30 e0       	ldi	r19, 0x00	; 0
    37c4:	8a 81       	ldd	r24, Y+2	; 0x02
    37c6:	9b 81       	ldd	r25, Y+3	; 0x03
    37c8:	fc 01       	movw	r30, r24
    37ca:	e2 0f       	add	r30, r18
    37cc:	f3 1f       	adc	r31, r19
    37ce:	80 81       	ld	r24, Z
    37d0:	0e 94 e6 19 	call	0x33cc	; 0x33cc <LCD_displayCharacter>
		i++;
    37d4:	89 81       	ldd	r24, Y+1	; 0x01
    37d6:	8f 5f       	subi	r24, 0xFF	; 255
    37d8:	89 83       	std	Y+1, r24	; 0x01


// Displays a string on the LCD
void LCD_displayString(const char *str) {
	uint8 i = 0;
	while(str[i] != '\0') {
    37da:	89 81       	ldd	r24, Y+1	; 0x01
    37dc:	28 2f       	mov	r18, r24
    37de:	30 e0       	ldi	r19, 0x00	; 0
    37e0:	8a 81       	ldd	r24, Y+2	; 0x02
    37e2:	9b 81       	ldd	r25, Y+3	; 0x03
    37e4:	fc 01       	movw	r30, r24
    37e6:	e2 0f       	add	r30, r18
    37e8:	f3 1f       	adc	r31, r19
    37ea:	80 81       	ld	r24, Z
    37ec:	88 23       	and	r24, r24
    37ee:	39 f7       	brne	.-50     	; 0x37be <LCD_displayString+0x14>
	}
	/*
	for (int i = 0 ; i < strlen(str) ; i++) {
		LCD_displayCharacters(str[i]);
	}*/
}
    37f0:	0f 90       	pop	r0
    37f2:	0f 90       	pop	r0
    37f4:	0f 90       	pop	r0
    37f6:	cf 91       	pop	r28
    37f8:	df 91       	pop	r29
    37fa:	08 95       	ret

000037fc <LCD_moveCursor>:


// Chooses where the cursor would stand on the LCD to type from it
void LCD_moveCursor(uint8 row, uint8 col) {
    37fc:	df 93       	push	r29
    37fe:	cf 93       	push	r28
    3800:	00 d0       	rcall	.+0      	; 0x3802 <LCD_moveCursor+0x6>
    3802:	00 d0       	rcall	.+0      	; 0x3804 <LCD_moveCursor+0x8>
    3804:	0f 92       	push	r0
    3806:	cd b7       	in	r28, 0x3d	; 61
    3808:	de b7       	in	r29, 0x3e	; 62
    380a:	8a 83       	std	Y+2, r24	; 0x02
    380c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 LCD_MEMORY_ADDRESS;

	// Calculate the required address in the LCD DDRAM checking
	// The location of the cursor originally on which line
	switch(row) {
    380e:	8a 81       	ldd	r24, Y+2	; 0x02
    3810:	28 2f       	mov	r18, r24
    3812:	30 e0       	ldi	r19, 0x00	; 0
    3814:	3d 83       	std	Y+5, r19	; 0x05
    3816:	2c 83       	std	Y+4, r18	; 0x04
    3818:	8c 81       	ldd	r24, Y+4	; 0x04
    381a:	9d 81       	ldd	r25, Y+5	; 0x05
    381c:	81 30       	cpi	r24, 0x01	; 1
    381e:	91 05       	cpc	r25, r1
    3820:	c1 f0       	breq	.+48     	; 0x3852 <LCD_moveCursor+0x56>
    3822:	2c 81       	ldd	r18, Y+4	; 0x04
    3824:	3d 81       	ldd	r19, Y+5	; 0x05
    3826:	22 30       	cpi	r18, 0x02	; 2
    3828:	31 05       	cpc	r19, r1
    382a:	2c f4       	brge	.+10     	; 0x3836 <LCD_moveCursor+0x3a>
    382c:	8c 81       	ldd	r24, Y+4	; 0x04
    382e:	9d 81       	ldd	r25, Y+5	; 0x05
    3830:	00 97       	sbiw	r24, 0x00	; 0
    3832:	61 f0       	breq	.+24     	; 0x384c <LCD_moveCursor+0x50>
    3834:	19 c0       	rjmp	.+50     	; 0x3868 <LCD_moveCursor+0x6c>
    3836:	2c 81       	ldd	r18, Y+4	; 0x04
    3838:	3d 81       	ldd	r19, Y+5	; 0x05
    383a:	22 30       	cpi	r18, 0x02	; 2
    383c:	31 05       	cpc	r19, r1
    383e:	69 f0       	breq	.+26     	; 0x385a <LCD_moveCursor+0x5e>
    3840:	8c 81       	ldd	r24, Y+4	; 0x04
    3842:	9d 81       	ldd	r25, Y+5	; 0x05
    3844:	83 30       	cpi	r24, 0x03	; 3
    3846:	91 05       	cpc	r25, r1
    3848:	61 f0       	breq	.+24     	; 0x3862 <LCD_moveCursor+0x66>
    384a:	0e c0       	rjmp	.+28     	; 0x3868 <LCD_moveCursor+0x6c>
		case 0:
			LCD_MEMORY_ADDRESS = col;
    384c:	8b 81       	ldd	r24, Y+3	; 0x03
    384e:	89 83       	std	Y+1, r24	; 0x01
    3850:	0b c0       	rjmp	.+22     	; 0x3868 <LCD_moveCursor+0x6c>
				break;
		case 1:
			LCD_MEMORY_ADDRESS = col + 0x40;
    3852:	8b 81       	ldd	r24, Y+3	; 0x03
    3854:	80 5c       	subi	r24, 0xC0	; 192
    3856:	89 83       	std	Y+1, r24	; 0x01
    3858:	07 c0       	rjmp	.+14     	; 0x3868 <LCD_moveCursor+0x6c>
				break;
		case 2:
			LCD_MEMORY_ADDRESS = col + 0x10;
    385a:	8b 81       	ldd	r24, Y+3	; 0x03
    385c:	80 5f       	subi	r24, 0xF0	; 240
    385e:	89 83       	std	Y+1, r24	; 0x01
    3860:	03 c0       	rjmp	.+6      	; 0x3868 <LCD_moveCursor+0x6c>
				break;
		case 3:
			LCD_MEMORY_ADDRESS = col + 0x50;
    3862:	8b 81       	ldd	r24, Y+3	; 0x03
    3864:	80 5b       	subi	r24, 0xB0	; 176
    3866:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(LCD_MEMORY_ADDRESS | LCD_CURSOR_LOCATION);
    3868:	89 81       	ldd	r24, Y+1	; 0x01
    386a:	80 68       	ori	r24, 0x80	; 128
    386c:	0e 94 f7 17 	call	0x2fee	; 0x2fee <LCD_sendCommand>
}
    3870:	0f 90       	pop	r0
    3872:	0f 90       	pop	r0
    3874:	0f 90       	pop	r0
    3876:	0f 90       	pop	r0
    3878:	0f 90       	pop	r0
    387a:	cf 91       	pop	r28
    387c:	df 91       	pop	r29
    387e:	08 95       	ret

00003880 <LCD_displayStringRowColumn>:


// Displays a string on the LCD at a chosen cursor and row
void LCD_displayStringRowColumn(uint8 row, uint8 col, const char *Str) {
    3880:	df 93       	push	r29
    3882:	cf 93       	push	r28
    3884:	00 d0       	rcall	.+0      	; 0x3886 <LCD_displayStringRowColumn+0x6>
    3886:	00 d0       	rcall	.+0      	; 0x3888 <LCD_displayStringRowColumn+0x8>
    3888:	cd b7       	in	r28, 0x3d	; 61
    388a:	de b7       	in	r29, 0x3e	; 62
    388c:	89 83       	std	Y+1, r24	; 0x01
    388e:	6a 83       	std	Y+2, r22	; 0x02
    3890:	5c 83       	std	Y+4, r21	; 0x04
    3892:	4b 83       	std	Y+3, r20	; 0x03
	// Go to to the required LCD position
	LCD_moveCursor(row, col);
    3894:	89 81       	ldd	r24, Y+1	; 0x01
    3896:	6a 81       	ldd	r22, Y+2	; 0x02
    3898:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <LCD_moveCursor>

	// Display the string from the cursor
	LCD_displayString(Str);
    389c:	8b 81       	ldd	r24, Y+3	; 0x03
    389e:	9c 81       	ldd	r25, Y+4	; 0x04
    38a0:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <LCD_displayString>
}
    38a4:	0f 90       	pop	r0
    38a6:	0f 90       	pop	r0
    38a8:	0f 90       	pop	r0
    38aa:	0f 90       	pop	r0
    38ac:	cf 91       	pop	r28
    38ae:	df 91       	pop	r29
    38b0:	08 95       	ret

000038b2 <LCD_intgerToString>:

// LCD only understands ASCII, so this converts Int to a string
void LCD_intgerToString(int data) {
    38b2:	df 93       	push	r29
    38b4:	cf 93       	push	r28
    38b6:	cd b7       	in	r28, 0x3d	; 61
    38b8:	de b7       	in	r29, 0x3e	; 62
    38ba:	62 97       	sbiw	r28, 0x12	; 18
    38bc:	0f b6       	in	r0, 0x3f	; 63
    38be:	f8 94       	cli
    38c0:	de bf       	out	0x3e, r29	; 62
    38c2:	0f be       	out	0x3f, r0	; 63
    38c4:	cd bf       	out	0x3d, r28	; 61
    38c6:	9a 8b       	std	Y+18, r25	; 0x12
    38c8:	89 8b       	std	Y+17, r24	; 0x11
	// A string to hold the ASCII values
	char buffer[16];

	// Converts data to its ASCII
	itoa(data, buffer, 10);
    38ca:	89 89       	ldd	r24, Y+17	; 0x11
    38cc:	9a 89       	ldd	r25, Y+18	; 0x12
    38ce:	9e 01       	movw	r18, r28
    38d0:	2f 5f       	subi	r18, 0xFF	; 255
    38d2:	3f 4f       	sbci	r19, 0xFF	; 255
    38d4:	b9 01       	movw	r22, r18
    38d6:	4a e0       	ldi	r20, 0x0A	; 10
    38d8:	50 e0       	ldi	r21, 0x00	; 0
    38da:	0e 94 59 22 	call	0x44b2	; 0x44b2 <itoa>

	// Display string with the results in the buffer
	LCD_displayString(buffer);
    38de:	ce 01       	movw	r24, r28
    38e0:	01 96       	adiw	r24, 0x01	; 1
    38e2:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <LCD_displayString>
}
    38e6:	62 96       	adiw	r28, 0x12	; 18
    38e8:	0f b6       	in	r0, 0x3f	; 63
    38ea:	f8 94       	cli
    38ec:	de bf       	out	0x3e, r29	; 62
    38ee:	0f be       	out	0x3f, r0	; 63
    38f0:	cd bf       	out	0x3d, r28	; 61
    38f2:	cf 91       	pop	r28
    38f4:	df 91       	pop	r29
    38f6:	08 95       	ret

000038f8 <LCD_clearScreen>:

// Clears the LCD from any garbage
void LCD_clearScreen(void) {
    38f8:	df 93       	push	r29
    38fa:	cf 93       	push	r28
    38fc:	cd b7       	in	r28, 0x3d	; 61
    38fe:	de b7       	in	r29, 0x3e	; 62
	// Clears the LCD Display
	LCD_sendCommand(LCD_CLEAR_DISPLAY);
    3900:	81 e0       	ldi	r24, 0x01	; 1
    3902:	0e 94 f7 17 	call	0x2fee	; 0x2fee <LCD_sendCommand>
}
    3906:	cf 91       	pop	r28
    3908:	df 91       	pop	r29
    390a:	08 95       	ret

0000390c <KEYPAD_Init>:
		static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number);
	#endif
#endif /* STD_KEYPAD */


void KEYPAD_Init(void) {
    390c:	df 93       	push	r29
    390e:	cf 93       	push	r28
    3910:	cd b7       	in	r28, 0x3d	; 61
    3912:	de b7       	in	r29, 0x3e	; 62
	/* Setup PORT and PINS for for KEYPAD Rows*/
	GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN, PIN_INPUT);
    3914:	82 e0       	ldi	r24, 0x02	; 2
    3916:	60 e0       	ldi	r22, 0x00	; 0
    3918:	40 e0       	ldi	r20, 0x00	; 0
    391a:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + 1, PIN_INPUT);
    391e:	82 e0       	ldi	r24, 0x02	; 2
    3920:	61 e0       	ldi	r22, 0x01	; 1
    3922:	40 e0       	ldi	r20, 0x00	; 0
    3924:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + 2, PIN_INPUT);
    3928:	82 e0       	ldi	r24, 0x02	; 2
    392a:	62 e0       	ldi	r22, 0x02	; 2
    392c:	40 e0       	ldi	r20, 0x00	; 0
    392e:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + 3, PIN_INPUT);
    3932:	82 e0       	ldi	r24, 0x02	; 2
    3934:	63 e0       	ldi	r22, 0x03	; 3
    3936:	40 e0       	ldi	r20, 0x00	; 0
    3938:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <GPIO_setupPinDirection>

	/* Setup PORT and PINS for for KEYPAD Columns*/
	GPIO_setupPinDirection(KEYPAD_COL_PORT, KEYPAD_FIRSTCOL_PIN, PIN_INPUT);
    393c:	82 e0       	ldi	r24, 0x02	; 2
    393e:	64 e0       	ldi	r22, 0x04	; 4
    3940:	40 e0       	ldi	r20, 0x00	; 0
    3942:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT, KEYPAD_FIRSTCOL_PIN + 1, PIN_INPUT);
    3946:	82 e0       	ldi	r24, 0x02	; 2
    3948:	65 e0       	ldi	r22, 0x05	; 5
    394a:	40 e0       	ldi	r20, 0x00	; 0
    394c:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT, KEYPAD_FIRSTCOL_PIN + 2, PIN_INPUT);
    3950:	82 e0       	ldi	r24, 0x02	; 2
    3952:	66 e0       	ldi	r22, 0x06	; 6
    3954:	40 e0       	ldi	r20, 0x00	; 0
    3956:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <GPIO_setupPinDirection>

	#if(KEYPAD_COL_NUM == 4)
		GPIO_setupPinDirection(KEYPAD_COL_PORT, KEYPAD_FIRSTCOL_PIN + 3, PIN_INPUT);
    395a:	82 e0       	ldi	r24, 0x02	; 2
    395c:	67 e0       	ldi	r22, 0x07	; 7
    395e:	40 e0       	ldi	r20, 0x00	; 0
    3960:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <GPIO_setupPinDirection>
	#endif
}
    3964:	cf 91       	pop	r28
    3966:	df 91       	pop	r29
    3968:	08 95       	ret

0000396a <KEYPAD_getPressedKey>:


uint8 KEYPAD_getPressedKey(void) {
    396a:	df 93       	push	r29
    396c:	cf 93       	push	r28
    396e:	00 d0       	rcall	.+0      	; 0x3970 <KEYPAD_getPressedKey+0x6>
    3970:	cd b7       	in	r28, 0x3d	; 61
    3972:	de b7       	in	r29, 0x3e	; 62
	uint8 row, col;
	while(1) {
		for (row = 0 ; row < KEYPAD_ROW_NUM ; row++) {
    3974:	1a 82       	std	Y+2, r1	; 0x02
    3976:	35 c0       	rjmp	.+106    	; 0x39e2 <KEYPAD_getPressedKey+0x78>
			// I set the pin by '1' for the row, and will iterate
			GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, PIN_OUTPUT);
    3978:	82 e0       	ldi	r24, 0x02	; 2
    397a:	6a 81       	ldd	r22, Y+2	; 0x02
    397c:	41 e0       	ldi	r20, 0x01	; 1
    397e:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <GPIO_setupPinDirection>
			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, KEYPAD_BUTTON_PRESSED);
    3982:	82 e0       	ldi	r24, 0x02	; 2
    3984:	6a 81       	ldd	r22, Y+2	; 0x02
    3986:	40 e0       	ldi	r20, 0x00	; 0
    3988:	0e 94 a0 10 	call	0x2140	; 0x2140 <GPIO_writePin>
			//_delay_ms(8);
			for (col = 0 ; col < KEYPAD_COL_NUM ; col++) {
    398c:	19 82       	std	Y+1, r1	; 0x01
    398e:	1e c0       	rjmp	.+60     	; 0x39cc <KEYPAD_getPressedKey+0x62>
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT,KEYPAD_FIRSTCOL_PIN + col) == KEYPAD_BUTTON_PRESSED) {
    3990:	89 81       	ldd	r24, Y+1	; 0x01
    3992:	98 2f       	mov	r25, r24
    3994:	9c 5f       	subi	r25, 0xFC	; 252
    3996:	82 e0       	ldi	r24, 0x02	; 2
    3998:	69 2f       	mov	r22, r25
    399a:	0e 94 2a 12 	call	0x2454	; 0x2454 <GPIO_readPin>
    399e:	88 23       	and	r24, r24
    39a0:	91 f4       	brne	.+36     	; 0x39c6 <KEYPAD_getPressedKey+0x5c>
						#endif
					#elif (KEYPAD_COL_NUM == 4)
						#ifdef STD_KEYPAD
							return ( (row * KEYPAD_COL_NUM) + col + 1);
						#else
							return KEYPAD_4x4_adjustKeyNumber( (row * KEYPAD_COL_NUM) + col + 1);
    39a2:	8a 81       	ldd	r24, Y+2	; 0x02
    39a4:	88 2f       	mov	r24, r24
    39a6:	90 e0       	ldi	r25, 0x00	; 0
    39a8:	88 0f       	add	r24, r24
    39aa:	99 1f       	adc	r25, r25
    39ac:	88 0f       	add	r24, r24
    39ae:	99 1f       	adc	r25, r25
    39b0:	98 2f       	mov	r25, r24
    39b2:	89 81       	ldd	r24, Y+1	; 0x01
    39b4:	89 0f       	add	r24, r25
    39b6:	8f 5f       	subi	r24, 0xFF	; 255
    39b8:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <KEYPAD_4x4_adjustKeyNumber>
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, PIN_INPUT);
		}
	}
}
    39bc:	0f 90       	pop	r0
    39be:	0f 90       	pop	r0
    39c0:	cf 91       	pop	r28
    39c2:	df 91       	pop	r29
    39c4:	08 95       	ret
			// I set the pin by '1' for the row, and will iterate
			GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, PIN_OUTPUT);
			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, KEYPAD_BUTTON_PRESSED);
			//_delay_ms(8);
			for (col = 0 ; col < KEYPAD_COL_NUM ; col++) {
    39c6:	89 81       	ldd	r24, Y+1	; 0x01
    39c8:	8f 5f       	subi	r24, 0xFF	; 255
    39ca:	89 83       	std	Y+1, r24	; 0x01
    39cc:	89 81       	ldd	r24, Y+1	; 0x01
    39ce:	84 30       	cpi	r24, 0x04	; 4
    39d0:	f8 f2       	brcs	.-66     	; 0x3990 <KEYPAD_getPressedKey+0x26>
							return KEYPAD_4x4_adjustKeyNumber( (row * KEYPAD_COL_NUM) + col + 1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, PIN_INPUT);
    39d2:	82 e0       	ldi	r24, 0x02	; 2
    39d4:	6a 81       	ldd	r22, Y+2	; 0x02
    39d6:	40 e0       	ldi	r20, 0x00	; 0
    39d8:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <GPIO_setupPinDirection>


uint8 KEYPAD_getPressedKey(void) {
	uint8 row, col;
	while(1) {
		for (row = 0 ; row < KEYPAD_ROW_NUM ; row++) {
    39dc:	8a 81       	ldd	r24, Y+2	; 0x02
    39de:	8f 5f       	subi	r24, 0xFF	; 255
    39e0:	8a 83       	std	Y+2, r24	; 0x02
    39e2:	8a 81       	ldd	r24, Y+2	; 0x02
    39e4:	84 30       	cpi	r24, 0x04	; 4
    39e6:	40 f2       	brcs	.-112    	; 0x3978 <KEYPAD_getPressedKey+0xe>
    39e8:	c5 cf       	rjmp	.-118    	; 0x3974 <KEYPAD_getPressedKey+0xa>

000039ea <KEYPAD_4x4_adjustKeyNumber>:
			return keypad_button;
		}

	#elif (KEYPAD_COL_NUM == 4)
		// Update the keypad pressed button value with the correct one in keypad 4x4 shape
		static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number) {
    39ea:	df 93       	push	r29
    39ec:	cf 93       	push	r28
    39ee:	00 d0       	rcall	.+0      	; 0x39f0 <KEYPAD_4x4_adjustKeyNumber+0x6>
    39f0:	00 d0       	rcall	.+0      	; 0x39f2 <KEYPAD_4x4_adjustKeyNumber+0x8>
    39f2:	cd b7       	in	r28, 0x3d	; 61
    39f4:	de b7       	in	r29, 0x3e	; 62
    39f6:	8a 83       	std	Y+2, r24	; 0x02
			uint8 keypad_button = 0;
    39f8:	19 82       	std	Y+1, r1	; 0x01
			switch(button_number) {
    39fa:	8a 81       	ldd	r24, Y+2	; 0x02
    39fc:	28 2f       	mov	r18, r24
    39fe:	30 e0       	ldi	r19, 0x00	; 0
    3a00:	3c 83       	std	Y+4, r19	; 0x04
    3a02:	2b 83       	std	Y+3, r18	; 0x03
    3a04:	8b 81       	ldd	r24, Y+3	; 0x03
    3a06:	9c 81       	ldd	r25, Y+4	; 0x04
    3a08:	88 30       	cpi	r24, 0x08	; 8
    3a0a:	91 05       	cpc	r25, r1
    3a0c:	09 f4       	brne	.+2      	; 0x3a10 <KEYPAD_4x4_adjustKeyNumber+0x26>
    3a0e:	70 c0       	rjmp	.+224    	; 0x3af0 <KEYPAD_4x4_adjustKeyNumber+0x106>
    3a10:	2b 81       	ldd	r18, Y+3	; 0x03
    3a12:	3c 81       	ldd	r19, Y+4	; 0x04
    3a14:	29 30       	cpi	r18, 0x09	; 9
    3a16:	31 05       	cpc	r19, r1
    3a18:	5c f5       	brge	.+86     	; 0x3a70 <KEYPAD_4x4_adjustKeyNumber+0x86>
    3a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a1c:	9c 81       	ldd	r25, Y+4	; 0x04
    3a1e:	84 30       	cpi	r24, 0x04	; 4
    3a20:	91 05       	cpc	r25, r1
    3a22:	09 f4       	brne	.+2      	; 0x3a26 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    3a24:	59 c0       	rjmp	.+178    	; 0x3ad8 <KEYPAD_4x4_adjustKeyNumber+0xee>
    3a26:	2b 81       	ldd	r18, Y+3	; 0x03
    3a28:	3c 81       	ldd	r19, Y+4	; 0x04
    3a2a:	25 30       	cpi	r18, 0x05	; 5
    3a2c:	31 05       	cpc	r19, r1
    3a2e:	9c f4       	brge	.+38     	; 0x3a56 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    3a30:	8b 81       	ldd	r24, Y+3	; 0x03
    3a32:	9c 81       	ldd	r25, Y+4	; 0x04
    3a34:	82 30       	cpi	r24, 0x02	; 2
    3a36:	91 05       	cpc	r25, r1
    3a38:	09 f4       	brne	.+2      	; 0x3a3c <KEYPAD_4x4_adjustKeyNumber+0x52>
    3a3a:	48 c0       	rjmp	.+144    	; 0x3acc <KEYPAD_4x4_adjustKeyNumber+0xe2>
    3a3c:	2b 81       	ldd	r18, Y+3	; 0x03
    3a3e:	3c 81       	ldd	r19, Y+4	; 0x04
    3a40:	23 30       	cpi	r18, 0x03	; 3
    3a42:	31 05       	cpc	r19, r1
    3a44:	0c f0       	brlt	.+2      	; 0x3a48 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    3a46:	45 c0       	rjmp	.+138    	; 0x3ad2 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    3a48:	8b 81       	ldd	r24, Y+3	; 0x03
    3a4a:	9c 81       	ldd	r25, Y+4	; 0x04
    3a4c:	81 30       	cpi	r24, 0x01	; 1
    3a4e:	91 05       	cpc	r25, r1
    3a50:	09 f4       	brne	.+2      	; 0x3a54 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    3a52:	39 c0       	rjmp	.+114    	; 0x3ac6 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    3a54:	67 c0       	rjmp	.+206    	; 0x3b24 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    3a56:	2b 81       	ldd	r18, Y+3	; 0x03
    3a58:	3c 81       	ldd	r19, Y+4	; 0x04
    3a5a:	26 30       	cpi	r18, 0x06	; 6
    3a5c:	31 05       	cpc	r19, r1
    3a5e:	09 f4       	brne	.+2      	; 0x3a62 <KEYPAD_4x4_adjustKeyNumber+0x78>
    3a60:	41 c0       	rjmp	.+130    	; 0x3ae4 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    3a62:	8b 81       	ldd	r24, Y+3	; 0x03
    3a64:	9c 81       	ldd	r25, Y+4	; 0x04
    3a66:	87 30       	cpi	r24, 0x07	; 7
    3a68:	91 05       	cpc	r25, r1
    3a6a:	0c f0       	brlt	.+2      	; 0x3a6e <KEYPAD_4x4_adjustKeyNumber+0x84>
    3a6c:	3e c0       	rjmp	.+124    	; 0x3aea <KEYPAD_4x4_adjustKeyNumber+0x100>
    3a6e:	37 c0       	rjmp	.+110    	; 0x3ade <KEYPAD_4x4_adjustKeyNumber+0xf4>
    3a70:	2b 81       	ldd	r18, Y+3	; 0x03
    3a72:	3c 81       	ldd	r19, Y+4	; 0x04
    3a74:	2c 30       	cpi	r18, 0x0C	; 12
    3a76:	31 05       	cpc	r19, r1
    3a78:	09 f4       	brne	.+2      	; 0x3a7c <KEYPAD_4x4_adjustKeyNumber+0x92>
    3a7a:	46 c0       	rjmp	.+140    	; 0x3b08 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    3a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    3a7e:	9c 81       	ldd	r25, Y+4	; 0x04
    3a80:	8d 30       	cpi	r24, 0x0D	; 13
    3a82:	91 05       	cpc	r25, r1
    3a84:	5c f4       	brge	.+22     	; 0x3a9c <KEYPAD_4x4_adjustKeyNumber+0xb2>
    3a86:	2b 81       	ldd	r18, Y+3	; 0x03
    3a88:	3c 81       	ldd	r19, Y+4	; 0x04
    3a8a:	2a 30       	cpi	r18, 0x0A	; 10
    3a8c:	31 05       	cpc	r19, r1
    3a8e:	b1 f1       	breq	.+108    	; 0x3afc <KEYPAD_4x4_adjustKeyNumber+0x112>
    3a90:	8b 81       	ldd	r24, Y+3	; 0x03
    3a92:	9c 81       	ldd	r25, Y+4	; 0x04
    3a94:	8b 30       	cpi	r24, 0x0B	; 11
    3a96:	91 05       	cpc	r25, r1
    3a98:	a4 f5       	brge	.+104    	; 0x3b02 <KEYPAD_4x4_adjustKeyNumber+0x118>
    3a9a:	2d c0       	rjmp	.+90     	; 0x3af6 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    3a9c:	2b 81       	ldd	r18, Y+3	; 0x03
    3a9e:	3c 81       	ldd	r19, Y+4	; 0x04
    3aa0:	2e 30       	cpi	r18, 0x0E	; 14
    3aa2:	31 05       	cpc	r19, r1
    3aa4:	b9 f1       	breq	.+110    	; 0x3b14 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    3aa6:	8b 81       	ldd	r24, Y+3	; 0x03
    3aa8:	9c 81       	ldd	r25, Y+4	; 0x04
    3aaa:	8e 30       	cpi	r24, 0x0E	; 14
    3aac:	91 05       	cpc	r25, r1
    3aae:	7c f1       	brlt	.+94     	; 0x3b0e <KEYPAD_4x4_adjustKeyNumber+0x124>
    3ab0:	2b 81       	ldd	r18, Y+3	; 0x03
    3ab2:	3c 81       	ldd	r19, Y+4	; 0x04
    3ab4:	2f 30       	cpi	r18, 0x0F	; 15
    3ab6:	31 05       	cpc	r19, r1
    3ab8:	79 f1       	breq	.+94     	; 0x3b18 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    3aba:	8b 81       	ldd	r24, Y+3	; 0x03
    3abc:	9c 81       	ldd	r25, Y+4	; 0x04
    3abe:	80 31       	cpi	r24, 0x10	; 16
    3ac0:	91 05       	cpc	r25, r1
    3ac2:	69 f1       	breq	.+90     	; 0x3b1e <KEYPAD_4x4_adjustKeyNumber+0x134>
    3ac4:	2f c0       	rjmp	.+94     	; 0x3b24 <KEYPAD_4x4_adjustKeyNumber+0x13a>
				case 1: keypad_button = 7;
    3ac6:	87 e0       	ldi	r24, 0x07	; 7
    3ac8:	89 83       	std	Y+1, r24	; 0x01
    3aca:	2e c0       	rjmp	.+92     	; 0x3b28 <KEYPAD_4x4_adjustKeyNumber+0x13e>
						break;
				case 2: keypad_button = 8;
    3acc:	88 e0       	ldi	r24, 0x08	; 8
    3ace:	89 83       	std	Y+1, r24	; 0x01
    3ad0:	2b c0       	rjmp	.+86     	; 0x3b28 <KEYPAD_4x4_adjustKeyNumber+0x13e>
						break;
				case 3: keypad_button = 9;
    3ad2:	89 e0       	ldi	r24, 0x09	; 9
    3ad4:	89 83       	std	Y+1, r24	; 0x01
    3ad6:	28 c0       	rjmp	.+80     	; 0x3b28 <KEYPAD_4x4_adjustKeyNumber+0x13e>
						break;
				case 4: keypad_button = '%'; // ASCII Code of %
    3ad8:	85 e2       	ldi	r24, 0x25	; 37
    3ada:	89 83       	std	Y+1, r24	; 0x01
    3adc:	25 c0       	rjmp	.+74     	; 0x3b28 <KEYPAD_4x4_adjustKeyNumber+0x13e>
						break;
				case 5: keypad_button = 4;
    3ade:	84 e0       	ldi	r24, 0x04	; 4
    3ae0:	89 83       	std	Y+1, r24	; 0x01
    3ae2:	22 c0       	rjmp	.+68     	; 0x3b28 <KEYPAD_4x4_adjustKeyNumber+0x13e>
						break;
				case 6: keypad_button = 5;
    3ae4:	85 e0       	ldi	r24, 0x05	; 5
    3ae6:	89 83       	std	Y+1, r24	; 0x01
    3ae8:	1f c0       	rjmp	.+62     	; 0x3b28 <KEYPAD_4x4_adjustKeyNumber+0x13e>
						break;
				case 7: keypad_button = 6;
    3aea:	86 e0       	ldi	r24, 0x06	; 6
    3aec:	89 83       	std	Y+1, r24	; 0x01
    3aee:	1c c0       	rjmp	.+56     	; 0x3b28 <KEYPAD_4x4_adjustKeyNumber+0x13e>
						break;
				case 8: keypad_button = '*'; /* ASCII Code of '*' */
    3af0:	8a e2       	ldi	r24, 0x2A	; 42
    3af2:	89 83       	std	Y+1, r24	; 0x01
    3af4:	19 c0       	rjmp	.+50     	; 0x3b28 <KEYPAD_4x4_adjustKeyNumber+0x13e>
						break;
				case 9: keypad_button = 1;
    3af6:	81 e0       	ldi	r24, 0x01	; 1
    3af8:	89 83       	std	Y+1, r24	; 0x01
    3afa:	16 c0       	rjmp	.+44     	; 0x3b28 <KEYPAD_4x4_adjustKeyNumber+0x13e>
						break;
				case 10: keypad_button = 2;
    3afc:	82 e0       	ldi	r24, 0x02	; 2
    3afe:	89 83       	std	Y+1, r24	; 0x01
    3b00:	13 c0       	rjmp	.+38     	; 0x3b28 <KEYPAD_4x4_adjustKeyNumber+0x13e>
						break;
				case 11: keypad_button = 3;
    3b02:	83 e0       	ldi	r24, 0x03	; 3
    3b04:	89 83       	std	Y+1, r24	; 0x01
    3b06:	10 c0       	rjmp	.+32     	; 0x3b28 <KEYPAD_4x4_adjustKeyNumber+0x13e>
						break;
				case 12: keypad_button = '-'; /* ASCII Code of '-' */
    3b08:	8d e2       	ldi	r24, 0x2D	; 45
    3b0a:	89 83       	std	Y+1, r24	; 0x01
    3b0c:	0d c0       	rjmp	.+26     	; 0x3b28 <KEYPAD_4x4_adjustKeyNumber+0x13e>
						break;
				case 13: keypad_button = 13;  /* ASCII of Enter */
    3b0e:	8d e0       	ldi	r24, 0x0D	; 13
    3b10:	89 83       	std	Y+1, r24	; 0x01
    3b12:	0a c0       	rjmp	.+20     	; 0x3b28 <KEYPAD_4x4_adjustKeyNumber+0x13e>
						break;
				case 14: keypad_button = 0;
    3b14:	19 82       	std	Y+1, r1	; 0x01
    3b16:	08 c0       	rjmp	.+16     	; 0x3b28 <KEYPAD_4x4_adjustKeyNumber+0x13e>
						break;
				case 15: keypad_button = '='; /* ASCII Code of '=' */
    3b18:	8d e3       	ldi	r24, 0x3D	; 61
    3b1a:	89 83       	std	Y+1, r24	; 0x01
    3b1c:	05 c0       	rjmp	.+10     	; 0x3b28 <KEYPAD_4x4_adjustKeyNumber+0x13e>
						break;
				case 16: keypad_button = '+'; /* ASCII Code of '+' */
    3b1e:	8b e2       	ldi	r24, 0x2B	; 43
    3b20:	89 83       	std	Y+1, r24	; 0x01
    3b22:	02 c0       	rjmp	.+4      	; 0x3b28 <KEYPAD_4x4_adjustKeyNumber+0x13e>
						break;
				default: keypad_button = button_number;
    3b24:	8a 81       	ldd	r24, Y+2	; 0x02
    3b26:	89 83       	std	Y+1, r24	; 0x01
						break;
			}
			return keypad_button;
    3b28:	89 81       	ldd	r24, Y+1	; 0x01
		}
    3b2a:	0f 90       	pop	r0
    3b2c:	0f 90       	pop	r0
    3b2e:	0f 90       	pop	r0
    3b30:	0f 90       	pop	r0
    3b32:	cf 91       	pop	r28
    3b34:	df 91       	pop	r29
    3b36:	08 95       	ret

00003b38 <EEPROM_writeByte>:
#include "avr/io.h" /* To use the IO Ports Registers */
#include <util/delay.h>



uint8 EEPROM_writeByte(uint16 u16Address, uint8 u8Data) {
    3b38:	df 93       	push	r29
    3b3a:	cf 93       	push	r28
    3b3c:	00 d0       	rcall	.+0      	; 0x3b3e <EEPROM_writeByte+0x6>
    3b3e:	00 d0       	rcall	.+0      	; 0x3b40 <EEPROM_writeByte+0x8>
    3b40:	0f 92       	push	r0
    3b42:	cd b7       	in	r28, 0x3d	; 61
    3b44:	de b7       	in	r29, 0x3e	; 62
    3b46:	9b 83       	std	Y+3, r25	; 0x03
    3b48:	8a 83       	std	Y+2, r24	; 0x02
    3b4a:	6c 83       	std	Y+4, r22	; 0x04
	I2C_Start();
    3b4c:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <I2C_Start>
	if (I2C_getStatus() != I2C_START) {
    3b50:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <I2C_getStatus>
    3b54:	88 30       	cpi	r24, 0x08	; 8
    3b56:	11 f0       	breq	.+4      	; 0x3b5c <EEPROM_writeByte+0x24>
	        return ERROR;
    3b58:	1d 82       	std	Y+5, r1	; 0x05
    3b5a:	2a c0       	rjmp	.+84     	; 0x3bb0 <EEPROM_writeByte+0x78>
	 * EEPROM address is 11 bits, the 3 MSB is the device address
	 * The other bits are the word address
	 * but the device address is again shifted to another 8 bit frame:
	 * the 4 MSB is 1010, then the Device Address, then R/W
	 */
	uint8 EEPROM_ADDRESS_EQN = (uint8) (0xA0 | ( (u16Address & 0x0700) >> 7) );
    3b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b5e:	9b 81       	ldd	r25, Y+3	; 0x03
    3b60:	80 70       	andi	r24, 0x00	; 0
    3b62:	97 70       	andi	r25, 0x07	; 7
    3b64:	88 0f       	add	r24, r24
    3b66:	89 2f       	mov	r24, r25
    3b68:	88 1f       	adc	r24, r24
    3b6a:	99 0b       	sbc	r25, r25
    3b6c:	91 95       	neg	r25
    3b6e:	80 6a       	ori	r24, 0xA0	; 160
    3b70:	89 83       	std	Y+1, r24	; 0x01
	// 0xA0 = 1010, 0x0700 = 0b111 0000 000
	I2C_writeByte(EEPROM_ADDRESS_EQN);
    3b72:	89 81       	ldd	r24, Y+1	; 0x01
    3b74:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <I2C_writeByte>
	if (I2C_getStatus() != I2C_MT_SLA_W_ACK) {
    3b78:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <I2C_getStatus>
    3b7c:	88 31       	cpi	r24, 0x18	; 24
    3b7e:	11 f0       	breq	.+4      	; 0x3b84 <EEPROM_writeByte+0x4c>
		return ERROR;
    3b80:	1d 82       	std	Y+5, r1	; 0x05
    3b82:	16 c0       	rjmp	.+44     	; 0x3bb0 <EEPROM_writeByte+0x78>
	}

	I2C_writeByte((uint8) (u16Address));
    3b84:	8a 81       	ldd	r24, Y+2	; 0x02
    3b86:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <I2C_writeByte>
	if (I2C_getStatus() != I2C_MT_DATA_ACK) {
    3b8a:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <I2C_getStatus>
    3b8e:	88 32       	cpi	r24, 0x28	; 40
    3b90:	11 f0       	breq	.+4      	; 0x3b96 <EEPROM_writeByte+0x5e>
		return ERROR;
    3b92:	1d 82       	std	Y+5, r1	; 0x05
    3b94:	0d c0       	rjmp	.+26     	; 0x3bb0 <EEPROM_writeByte+0x78>
	}

	I2C_writeByte(u8Data);
    3b96:	8c 81       	ldd	r24, Y+4	; 0x04
    3b98:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <I2C_writeByte>
	if (I2C_getStatus() != I2C_MT_DATA_ACK) {
    3b9c:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <I2C_getStatus>
    3ba0:	88 32       	cpi	r24, 0x28	; 40
    3ba2:	11 f0       	breq	.+4      	; 0x3ba8 <EEPROM_writeByte+0x70>
		return ERROR;
    3ba4:	1d 82       	std	Y+5, r1	; 0x05
    3ba6:	04 c0       	rjmp	.+8      	; 0x3bb0 <EEPROM_writeByte+0x78>
	}

	I2C_Stop();
    3ba8:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <I2C_Stop>

	return SUCCESS;
    3bac:	81 e0       	ldi	r24, 0x01	; 1
    3bae:	8d 83       	std	Y+5, r24	; 0x05
    3bb0:	8d 81       	ldd	r24, Y+5	; 0x05
}
    3bb2:	0f 90       	pop	r0
    3bb4:	0f 90       	pop	r0
    3bb6:	0f 90       	pop	r0
    3bb8:	0f 90       	pop	r0
    3bba:	0f 90       	pop	r0
    3bbc:	cf 91       	pop	r28
    3bbe:	df 91       	pop	r29
    3bc0:	08 95       	ret

00003bc2 <EEPROM_readByte>:


uint8 EEPROM_readByte(uint16 u16Address, uint8 *u8Data) {
    3bc2:	df 93       	push	r29
    3bc4:	cf 93       	push	r28
    3bc6:	00 d0       	rcall	.+0      	; 0x3bc8 <EEPROM_readByte+0x6>
    3bc8:	00 d0       	rcall	.+0      	; 0x3bca <EEPROM_readByte+0x8>
    3bca:	00 d0       	rcall	.+0      	; 0x3bcc <EEPROM_readByte+0xa>
    3bcc:	cd b7       	in	r28, 0x3d	; 61
    3bce:	de b7       	in	r29, 0x3e	; 62
    3bd0:	9b 83       	std	Y+3, r25	; 0x03
    3bd2:	8a 83       	std	Y+2, r24	; 0x02
    3bd4:	7d 83       	std	Y+5, r23	; 0x05
    3bd6:	6c 83       	std	Y+4, r22	; 0x04
	I2C_Start();
    3bd8:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <I2C_Start>
	if (I2C_getStatus() != I2C_START) {
    3bdc:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <I2C_getStatus>
    3be0:	88 30       	cpi	r24, 0x08	; 8
    3be2:	11 f0       	breq	.+4      	; 0x3be8 <EEPROM_readByte+0x26>
			return ERROR;
    3be4:	1e 82       	std	Y+6, r1	; 0x06
    3be6:	3e c0       	rjmp	.+124    	; 0x3c64 <EEPROM_readByte+0xa2>
	 * EEPROM address is 11 bits, the 3 MSB is the device address
	 * The other bits are the word address
	 * but the device address is again shifted to another 8 bit frame:
	 * the 4 MSB is 1010, then the Device Address, then R/W
	 */
	uint8 EEPROM_ADDRESS_EQN = (uint8) (0xA0 | ( (u16Address & 0x0700) >> 7) );
    3be8:	8a 81       	ldd	r24, Y+2	; 0x02
    3bea:	9b 81       	ldd	r25, Y+3	; 0x03
    3bec:	80 70       	andi	r24, 0x00	; 0
    3bee:	97 70       	andi	r25, 0x07	; 7
    3bf0:	88 0f       	add	r24, r24
    3bf2:	89 2f       	mov	r24, r25
    3bf4:	88 1f       	adc	r24, r24
    3bf6:	99 0b       	sbc	r25, r25
    3bf8:	91 95       	neg	r25
    3bfa:	80 6a       	ori	r24, 0xA0	; 160
    3bfc:	89 83       	std	Y+1, r24	; 0x01
	// 0xA0 = 1010, 0x0700 = 0b111 0000 000
	I2C_writeByte(EEPROM_ADDRESS_EQN);
    3bfe:	89 81       	ldd	r24, Y+1	; 0x01
    3c00:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <I2C_writeByte>
	if (I2C_getStatus() != I2C_MT_SLA_W_ACK) {
    3c04:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <I2C_getStatus>
    3c08:	88 31       	cpi	r24, 0x18	; 24
    3c0a:	11 f0       	breq	.+4      	; 0x3c10 <EEPROM_readByte+0x4e>
		return ERROR;
    3c0c:	1e 82       	std	Y+6, r1	; 0x06
    3c0e:	2a c0       	rjmp	.+84     	; 0x3c64 <EEPROM_readByte+0xa2>
	}

	I2C_writeByte((uint8) (u16Address));
    3c10:	8a 81       	ldd	r24, Y+2	; 0x02
    3c12:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <I2C_writeByte>
	if (I2C_getStatus() != I2C_MT_DATA_ACK) {
    3c16:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <I2C_getStatus>
    3c1a:	88 32       	cpi	r24, 0x28	; 40
    3c1c:	11 f0       	breq	.+4      	; 0x3c22 <EEPROM_readByte+0x60>
		return ERROR;
    3c1e:	1e 82       	std	Y+6, r1	; 0x06
    3c20:	21 c0       	rjmp	.+66     	; 0x3c64 <EEPROM_readByte+0xa2>
	}

	I2C_Start();
    3c22:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <I2C_Start>
	if (I2C_getStatus() != I2C_REP_START) {
    3c26:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <I2C_getStatus>
    3c2a:	80 31       	cpi	r24, 0x10	; 16
    3c2c:	11 f0       	breq	.+4      	; 0x3c32 <EEPROM_readByte+0x70>
		return ERROR;
    3c2e:	1e 82       	std	Y+6, r1	; 0x06
    3c30:	19 c0       	rjmp	.+50     	; 0x3c64 <EEPROM_readByte+0xa2>
	}

	I2C_writeByte(EEPROM_ADDRESS_EQN | 1); // For Reading
    3c32:	89 81       	ldd	r24, Y+1	; 0x01
    3c34:	81 60       	ori	r24, 0x01	; 1
    3c36:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <I2C_writeByte>
	if (I2C_getStatus() != I2C_MT_SLA_R_ACK) {
    3c3a:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <I2C_getStatus>
    3c3e:	80 34       	cpi	r24, 0x40	; 64
    3c40:	11 f0       	breq	.+4      	; 0x3c46 <EEPROM_readByte+0x84>
		return ERROR;
    3c42:	1e 82       	std	Y+6, r1	; 0x06
    3c44:	0f c0       	rjmp	.+30     	; 0x3c64 <EEPROM_readByte+0xa2>
	}

	*u8Data = I2C_readByteWithNACK();
    3c46:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <I2C_readByteWithNACK>
    3c4a:	ec 81       	ldd	r30, Y+4	; 0x04
    3c4c:	fd 81       	ldd	r31, Y+5	; 0x05
    3c4e:	80 83       	st	Z, r24
	if (I2C_getStatus() != I2C_MR_DATA_NACK) {
    3c50:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <I2C_getStatus>
    3c54:	88 35       	cpi	r24, 0x58	; 88
    3c56:	11 f0       	breq	.+4      	; 0x3c5c <EEPROM_readByte+0x9a>
		return ERROR;
    3c58:	1e 82       	std	Y+6, r1	; 0x06
    3c5a:	04 c0       	rjmp	.+8      	; 0x3c64 <EEPROM_readByte+0xa2>
	}

	I2C_Stop();
    3c5c:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <I2C_Stop>

	return SUCCESS;
    3c60:	81 e0       	ldi	r24, 0x01	; 1
    3c62:	8e 83       	std	Y+6, r24	; 0x06
    3c64:	8e 81       	ldd	r24, Y+6	; 0x06
}
    3c66:	26 96       	adiw	r28, 0x06	; 6
    3c68:	0f b6       	in	r0, 0x3f	; 63
    3c6a:	f8 94       	cli
    3c6c:	de bf       	out	0x3e, r29	; 62
    3c6e:	0f be       	out	0x3f, r0	; 63
    3c70:	cd bf       	out	0x3d, r28	; 61
    3c72:	cf 91       	pop	r28
    3c74:	df 91       	pop	r29
    3c76:	08 95       	ret

00003c78 <Buzzer_Init>:

/*
 * Description :
 * Setup the direction of the required pin input/output.
 */
void Buzzer_Init(uint8 port_num, uint8 pin_num) {
    3c78:	df 93       	push	r29
    3c7a:	cf 93       	push	r28
    3c7c:	00 d0       	rcall	.+0      	; 0x3c7e <Buzzer_Init+0x6>
    3c7e:	cd b7       	in	r28, 0x3d	; 61
    3c80:	de b7       	in	r29, 0x3e	; 62
    3c82:	89 83       	std	Y+1, r24	; 0x01
    3c84:	6a 83       	std	Y+2, r22	; 0x02
	/* Setup the pin direction as required */
	GPIO_setupPinDirection(port_num, pin_num, PIN_OUTPUT);
    3c86:	89 81       	ldd	r24, Y+1	; 0x01
    3c88:	6a 81       	ldd	r22, Y+2	; 0x02
    3c8a:	41 e0       	ldi	r20, 0x01	; 1
    3c8c:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <GPIO_setupPinDirection>
	GPIO_writePin(port_num, pin_num, LOGIC_LOW);
    3c90:	89 81       	ldd	r24, Y+1	; 0x01
    3c92:	6a 81       	ldd	r22, Y+2	; 0x02
    3c94:	40 e0       	ldi	r20, 0x00	; 0
    3c96:	0e 94 a0 10 	call	0x2140	; 0x2140 <GPIO_writePin>
}
    3c9a:	0f 90       	pop	r0
    3c9c:	0f 90       	pop	r0
    3c9e:	cf 91       	pop	r28
    3ca0:	df 91       	pop	r29
    3ca2:	08 95       	ret

00003ca4 <Buzzer_On>:

/*
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 */
void Buzzer_On(uint8 port_num, uint8 pin_num) {
    3ca4:	df 93       	push	r29
    3ca6:	cf 93       	push	r28
    3ca8:	00 d0       	rcall	.+0      	; 0x3caa <Buzzer_On+0x6>
    3caa:	cd b7       	in	r28, 0x3d	; 61
    3cac:	de b7       	in	r29, 0x3e	; 62
    3cae:	89 83       	std	Y+1, r24	; 0x01
    3cb0:	6a 83       	std	Y+2, r22	; 0x02
	/* Setup the pin direction as required */
	GPIO_writePin(port_num, pin_num, LOGIC_HIGH);
    3cb2:	89 81       	ldd	r24, Y+1	; 0x01
    3cb4:	6a 81       	ldd	r22, Y+2	; 0x02
    3cb6:	41 e0       	ldi	r20, 0x01	; 1
    3cb8:	0e 94 a0 10 	call	0x2140	; 0x2140 <GPIO_writePin>
}
    3cbc:	0f 90       	pop	r0
    3cbe:	0f 90       	pop	r0
    3cc0:	cf 91       	pop	r28
    3cc2:	df 91       	pop	r29
    3cc4:	08 95       	ret

00003cc6 <Buzzer_Off>:

/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 */
void Buzzer_Off(uint8 port_num, uint8 pin_num) {
    3cc6:	df 93       	push	r29
    3cc8:	cf 93       	push	r28
    3cca:	00 d0       	rcall	.+0      	; 0x3ccc <Buzzer_Off+0x6>
    3ccc:	cd b7       	in	r28, 0x3d	; 61
    3cce:	de b7       	in	r29, 0x3e	; 62
    3cd0:	89 83       	std	Y+1, r24	; 0x01
    3cd2:	6a 83       	std	Y+2, r22	; 0x02
	/* Setup the pin direction as required */
	GPIO_writePin(port_num, pin_num, LOGIC_LOW);
    3cd4:	89 81       	ldd	r24, Y+1	; 0x01
    3cd6:	6a 81       	ldd	r22, Y+2	; 0x02
    3cd8:	40 e0       	ldi	r20, 0x00	; 0
    3cda:	0e 94 a0 10 	call	0x2140	; 0x2140 <GPIO_writePin>
}
    3cde:	0f 90       	pop	r0
    3ce0:	0f 90       	pop	r0
    3ce2:	cf 91       	pop	r28
    3ce4:	df 91       	pop	r29
    3ce6:	08 95       	ret

00003ce8 <BUTTON_Init>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
BUTTON_Error_t BUTTON_Init(uint8 port_num, uint8 pin_num) {
    3ce8:	df 93       	push	r29
    3cea:	cf 93       	push	r28
    3cec:	00 d0       	rcall	.+0      	; 0x3cee <BUTTON_Init+0x6>
    3cee:	0f 92       	push	r0
    3cf0:	cd b7       	in	r28, 0x3d	; 61
    3cf2:	de b7       	in	r29, 0x3e	; 62
    3cf4:	8a 83       	std	Y+2, r24	; 0x02
    3cf6:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t BUTTON_Driver_Checker = NULL;
    3cf8:	19 82       	std	Y+1, r1	; 0x01
	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    3cfa:	8b 81       	ldd	r24, Y+3	; 0x03
    3cfc:	88 30       	cpi	r24, 0x08	; 8
    3cfe:	18 f0       	brcs	.+6      	; 0x3d06 <BUTTON_Init+0x1e>
		BUTTON_Driver_Checker = BUTTON_WRONG_PIN_NUMBER;
    3d00:	81 e0       	ldi	r24, 0x01	; 1
    3d02:	89 83       	std	Y+1, r24	; 0x01
    3d04:	0c c0       	rjmp	.+24     	; 0x3d1e <BUTTON_Init+0x36>
	}
	else if((port_num >= NUM_OF_PORTS)) {
    3d06:	8a 81       	ldd	r24, Y+2	; 0x02
    3d08:	84 30       	cpi	r24, 0x04	; 4
    3d0a:	18 f0       	brcs	.+6      	; 0x3d12 <BUTTON_Init+0x2a>
		BUTTON_Driver_Checker = BUTTON_WRONG_PORT_NUMBER;
    3d0c:	82 e0       	ldi	r24, 0x02	; 2
    3d0e:	89 83       	std	Y+1, r24	; 0x01
    3d10:	06 c0       	rjmp	.+12     	; 0x3d1e <BUTTON_Init+0x36>
	}
	else {
		/* Setup the pin direction as required */
		GPIO_setupPinDirection(port_num, pin_num, PIN_INPUT);
    3d12:	8a 81       	ldd	r24, Y+2	; 0x02
    3d14:	6b 81       	ldd	r22, Y+3	; 0x03
    3d16:	40 e0       	ldi	r20, 0x00	; 0
    3d18:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <GPIO_setupPinDirection>
		BUTTON_Driver_Checker = BUTTON_OK;
    3d1c:	19 82       	std	Y+1, r1	; 0x01
	}
	return BUTTON_Driver_Checker;
    3d1e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d20:	0f 90       	pop	r0
    3d22:	0f 90       	pop	r0
    3d24:	0f 90       	pop	r0
    3d26:	cf 91       	pop	r28
    3d28:	df 91       	pop	r29
    3d2a:	08 95       	ret

00003d2c <BUTTON_Read>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
uint8 BUTTON_Read(uint8 port_num, uint8 pin_num) {
    3d2c:	df 93       	push	r29
    3d2e:	cf 93       	push	r28
    3d30:	00 d0       	rcall	.+0      	; 0x3d32 <BUTTON_Read+0x6>
    3d32:	0f 92       	push	r0
    3d34:	cd b7       	in	r28, 0x3d	; 61
    3d36:	de b7       	in	r29, 0x3e	; 62
    3d38:	8a 83       	std	Y+2, r24	; 0x02
    3d3a:	6b 83       	std	Y+3, r22	; 0x03

	uint8_t BUTTON_Driver_Checker = NULL;
    3d3c:	19 82       	std	Y+1, r1	; 0x01
		if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    3d3e:	8b 81       	ldd	r24, Y+3	; 0x03
    3d40:	88 30       	cpi	r24, 0x08	; 8
    3d42:	18 f0       	brcs	.+6      	; 0x3d4a <BUTTON_Read+0x1e>
			BUTTON_Driver_Checker = BUTTON_WRONG_PIN_NUMBER;
    3d44:	81 e0       	ldi	r24, 0x01	; 1
    3d46:	89 83       	std	Y+1, r24	; 0x01
    3d48:	0b c0       	rjmp	.+22     	; 0x3d60 <BUTTON_Read+0x34>
		}
		else if((port_num >= NUM_OF_PORTS)) {
    3d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d4c:	84 30       	cpi	r24, 0x04	; 4
    3d4e:	18 f0       	brcs	.+6      	; 0x3d56 <BUTTON_Read+0x2a>
			BUTTON_Driver_Checker = BUTTON_WRONG_PORT_NUMBER;
    3d50:	82 e0       	ldi	r24, 0x02	; 2
    3d52:	89 83       	std	Y+1, r24	; 0x01
    3d54:	05 c0       	rjmp	.+10     	; 0x3d60 <BUTTON_Read+0x34>
		}
		else {
			/* Setup the pin direction as required */
			GPIO_readPin(port_num, pin_num);
    3d56:	8a 81       	ldd	r24, Y+2	; 0x02
    3d58:	6b 81       	ldd	r22, Y+3	; 0x03
    3d5a:	0e 94 2a 12 	call	0x2454	; 0x2454 <GPIO_readPin>
			BUTTON_Driver_Checker = BUTTON_OK;
    3d5e:	19 82       	std	Y+1, r1	; 0x01
		}
		return GPIO_readPin(port_num, pin_num);
    3d60:	8a 81       	ldd	r24, Y+2	; 0x02
    3d62:	6b 81       	ldd	r22, Y+3	; 0x03
    3d64:	0e 94 2a 12 	call	0x2454	; 0x2454 <GPIO_readPin>
}
    3d68:	0f 90       	pop	r0
    3d6a:	0f 90       	pop	r0
    3d6c:	0f 90       	pop	r0
    3d6e:	cf 91       	pop	r28
    3d70:	df 91       	pop	r29
    3d72:	08 95       	ret

00003d74 <__vector_10>:

#define ARRAY_SIZE 5
volatile uint8 receivedData[ARRAY_SIZE];
volatile uint8 dataReceivedCount = 0;

ISR(TIMER0_COMP_vect) {
    3d74:	1f 92       	push	r1
    3d76:	0f 92       	push	r0
    3d78:	0f b6       	in	r0, 0x3f	; 63
    3d7a:	0f 92       	push	r0
    3d7c:	11 24       	eor	r1, r1
    3d7e:	df 93       	push	r29
    3d80:	cf 93       	push	r28
    3d82:	cd b7       	in	r28, 0x3d	; 61
    3d84:	de b7       	in	r29, 0x3e	; 62

}
    3d86:	cf 91       	pop	r28
    3d88:	df 91       	pop	r29
    3d8a:	0f 90       	pop	r0
    3d8c:	0f be       	out	0x3f, r0	; 63
    3d8e:	0f 90       	pop	r0
    3d90:	1f 90       	pop	r1
    3d92:	18 95       	reti

00003d94 <main>:

int main(void) {
    3d94:	df 93       	push	r29
    3d96:	cf 93       	push	r28
    3d98:	00 d0       	rcall	.+0      	; 0x3d9a <main+0x6>
    3d9a:	cd b7       	in	r28, 0x3d	; 61
    3d9c:	de b7       	in	r29, 0x3e	; 62
	USART_ConfigType *USARTConfig;
	USARTConfig -> bitData 		= USART_8_BIT;
    3d9e:	e9 81       	ldd	r30, Y+1	; 0x01
    3da0:	fa 81       	ldd	r31, Y+2	; 0x02
    3da2:	83 e0       	ldi	r24, 0x03	; 3
    3da4:	80 83       	st	Z, r24
	USARTConfig -> stopBit 		= USART_STOP_1_BIT;
    3da6:	e9 81       	ldd	r30, Y+1	; 0x01
    3da8:	fa 81       	ldd	r31, Y+2	; 0x02
    3daa:	12 82       	std	Z+2, r1	; 0x02
	USARTConfig -> parity 		= USART_PARITY_DISABLED;
    3dac:	e9 81       	ldd	r30, Y+1	; 0x01
    3dae:	fa 81       	ldd	r31, Y+2	; 0x02
    3db0:	11 82       	std	Z+1, r1	; 0x01
	USARTConfig -> baudRate 	= USART_BAUDRATE_9600;
    3db2:	e9 81       	ldd	r30, Y+1	; 0x01
    3db4:	fa 81       	ldd	r31, Y+2	; 0x02
    3db6:	80 e8       	ldi	r24, 0x80	; 128
    3db8:	95 e2       	ldi	r25, 0x25	; 37
    3dba:	94 83       	std	Z+4, r25	; 0x04
    3dbc:	83 83       	std	Z+3, r24	; 0x03
	USART_Init(USARTConfig);
    3dbe:	89 81       	ldd	r24, Y+1	; 0x01
    3dc0:	9a 81       	ldd	r25, Y+2	; 0x02
    3dc2:	0e 94 75 07 	call	0xeea	; 0xeea <USART_Init>
	I2C_Init();
    3dc6:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <I2C_Init>
    3dca:	ff cf       	rjmp	.-2      	; 0x3dca <main+0x36>

00003dcc <passwordEntry1>:
 *
 *******************************************************************************/

#include "mainApp_Functions.h"

uint8* passwordEntry1 (void) {
    3dcc:	df 93       	push	r29
    3dce:	cf 93       	push	r28
    3dd0:	cd b7       	in	r28, 0x3d	; 61
    3dd2:	de b7       	in	r29, 0x3e	; 62
    3dd4:	64 97       	sbiw	r28, 0x14	; 20
    3dd6:	0f b6       	in	r0, 0x3f	; 63
    3dd8:	f8 94       	cli
    3dda:	de bf       	out	0x3e, r29	; 62
    3ddc:	0f be       	out	0x3f, r0	; 63
    3dde:	cd bf       	out	0x3d, r28	; 61
	uint8 passLength = 5;
    3de0:	85 e0       	ldi	r24, 0x05	; 5
    3de2:	8c 8b       	std	Y+20, r24	; 0x14
	uint8* passInput1 = (uint8*) malloc(passLength * sizeof(uint8));
    3de4:	8c 89       	ldd	r24, Y+20	; 0x14
    3de6:	88 2f       	mov	r24, r24
    3de8:	90 e0       	ldi	r25, 0x00	; 0
    3dea:	0e 94 54 21 	call	0x42a8	; 0x42a8 <malloc>
    3dee:	9b 8b       	std	Y+19, r25	; 0x13
    3df0:	8a 8b       	std	Y+18, r24	; 0x12

	// Code for getting keypad input and saving it in an uint8 array of size password length.
	LCD_moveCursor(0, 0);
    3df2:	80 e0       	ldi	r24, 0x00	; 0
    3df4:	60 e0       	ldi	r22, 0x00	; 0
    3df6:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <LCD_moveCursor>
	LCD_displayString("1.Enter Pass:");
    3dfa:	80 e6       	ldi	r24, 0x60	; 96
    3dfc:	90 e0       	ldi	r25, 0x00	; 0
    3dfe:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <LCD_displayString>
	LCD_moveCursor(1, 0);
    3e02:	81 e0       	ldi	r24, 0x01	; 1
    3e04:	60 e0       	ldi	r22, 0x00	; 0
    3e06:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <LCD_moveCursor>
	LCD_displayString("-----");
    3e0a:	8e e6       	ldi	r24, 0x6E	; 110
    3e0c:	90 e0       	ldi	r25, 0x00	; 0
    3e0e:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <LCD_displayString>
	for (int i = 0 ; i < passLength ; i++) {
    3e12:	19 8a       	std	Y+17, r1	; 0x11
    3e14:	18 8a       	std	Y+16, r1	; 0x10
    3e16:	90 c0       	rjmp	.+288    	; 0x3f38 <passwordEntry1+0x16c>
		uint8 KEYPAD_Value = 100;
    3e18:	84 e6       	ldi	r24, 0x64	; 100
    3e1a:	8f 87       	std	Y+15, r24	; 0x0f
		KEYPAD_Value =  KEYPAD_getPressedKey();
    3e1c:	0e 94 b5 1c 	call	0x396a	; 0x396a <KEYPAD_getPressedKey>
    3e20:	8f 87       	std	Y+15, r24	; 0x0f
    3e22:	80 e0       	ldi	r24, 0x00	; 0
    3e24:	90 e0       	ldi	r25, 0x00	; 0
    3e26:	a8 e4       	ldi	r26, 0x48	; 72
    3e28:	b2 e4       	ldi	r27, 0x42	; 66
    3e2a:	8b 87       	std	Y+11, r24	; 0x0b
    3e2c:	9c 87       	std	Y+12, r25	; 0x0c
    3e2e:	ad 87       	std	Y+13, r26	; 0x0d
    3e30:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e32:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e34:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e36:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e38:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e3a:	20 e0       	ldi	r18, 0x00	; 0
    3e3c:	30 e0       	ldi	r19, 0x00	; 0
    3e3e:	4a ef       	ldi	r20, 0xFA	; 250
    3e40:	54 e4       	ldi	r21, 0x44	; 68
    3e42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e46:	dc 01       	movw	r26, r24
    3e48:	cb 01       	movw	r24, r22
    3e4a:	8f 83       	std	Y+7, r24	; 0x07
    3e4c:	98 87       	std	Y+8, r25	; 0x08
    3e4e:	a9 87       	std	Y+9, r26	; 0x09
    3e50:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e52:	6f 81       	ldd	r22, Y+7	; 0x07
    3e54:	78 85       	ldd	r23, Y+8	; 0x08
    3e56:	89 85       	ldd	r24, Y+9	; 0x09
    3e58:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e5a:	20 e0       	ldi	r18, 0x00	; 0
    3e5c:	30 e0       	ldi	r19, 0x00	; 0
    3e5e:	40 e8       	ldi	r20, 0x80	; 128
    3e60:	5f e3       	ldi	r21, 0x3F	; 63
    3e62:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e66:	88 23       	and	r24, r24
    3e68:	2c f4       	brge	.+10     	; 0x3e74 <passwordEntry1+0xa8>
		__ticks = 1;
    3e6a:	81 e0       	ldi	r24, 0x01	; 1
    3e6c:	90 e0       	ldi	r25, 0x00	; 0
    3e6e:	9e 83       	std	Y+6, r25	; 0x06
    3e70:	8d 83       	std	Y+5, r24	; 0x05
    3e72:	3f c0       	rjmp	.+126    	; 0x3ef2 <passwordEntry1+0x126>
	else if (__tmp > 65535)
    3e74:	6f 81       	ldd	r22, Y+7	; 0x07
    3e76:	78 85       	ldd	r23, Y+8	; 0x08
    3e78:	89 85       	ldd	r24, Y+9	; 0x09
    3e7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e7c:	20 e0       	ldi	r18, 0x00	; 0
    3e7e:	3f ef       	ldi	r19, 0xFF	; 255
    3e80:	4f e7       	ldi	r20, 0x7F	; 127
    3e82:	57 e4       	ldi	r21, 0x47	; 71
    3e84:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e88:	18 16       	cp	r1, r24
    3e8a:	4c f5       	brge	.+82     	; 0x3ede <passwordEntry1+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e90:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e92:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e94:	20 e0       	ldi	r18, 0x00	; 0
    3e96:	30 e0       	ldi	r19, 0x00	; 0
    3e98:	40 e2       	ldi	r20, 0x20	; 32
    3e9a:	51 e4       	ldi	r21, 0x41	; 65
    3e9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ea0:	dc 01       	movw	r26, r24
    3ea2:	cb 01       	movw	r24, r22
    3ea4:	bc 01       	movw	r22, r24
    3ea6:	cd 01       	movw	r24, r26
    3ea8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eac:	dc 01       	movw	r26, r24
    3eae:	cb 01       	movw	r24, r22
    3eb0:	9e 83       	std	Y+6, r25	; 0x06
    3eb2:	8d 83       	std	Y+5, r24	; 0x05
    3eb4:	0f c0       	rjmp	.+30     	; 0x3ed4 <passwordEntry1+0x108>
    3eb6:	88 ec       	ldi	r24, 0xC8	; 200
    3eb8:	90 e0       	ldi	r25, 0x00	; 0
    3eba:	9c 83       	std	Y+4, r25	; 0x04
    3ebc:	8b 83       	std	Y+3, r24	; 0x03
    3ebe:	8b 81       	ldd	r24, Y+3	; 0x03
    3ec0:	9c 81       	ldd	r25, Y+4	; 0x04
    3ec2:	01 97       	sbiw	r24, 0x01	; 1
    3ec4:	f1 f7       	brne	.-4      	; 0x3ec2 <passwordEntry1+0xf6>
    3ec6:	9c 83       	std	Y+4, r25	; 0x04
    3ec8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3eca:	8d 81       	ldd	r24, Y+5	; 0x05
    3ecc:	9e 81       	ldd	r25, Y+6	; 0x06
    3ece:	01 97       	sbiw	r24, 0x01	; 1
    3ed0:	9e 83       	std	Y+6, r25	; 0x06
    3ed2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ed4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ed6:	9e 81       	ldd	r25, Y+6	; 0x06
    3ed8:	00 97       	sbiw	r24, 0x00	; 0
    3eda:	69 f7       	brne	.-38     	; 0x3eb6 <passwordEntry1+0xea>
    3edc:	14 c0       	rjmp	.+40     	; 0x3f06 <passwordEntry1+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ede:	6f 81       	ldd	r22, Y+7	; 0x07
    3ee0:	78 85       	ldd	r23, Y+8	; 0x08
    3ee2:	89 85       	ldd	r24, Y+9	; 0x09
    3ee4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ee6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eea:	dc 01       	movw	r26, r24
    3eec:	cb 01       	movw	r24, r22
    3eee:	9e 83       	std	Y+6, r25	; 0x06
    3ef0:	8d 83       	std	Y+5, r24	; 0x05
    3ef2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ef4:	9e 81       	ldd	r25, Y+6	; 0x06
    3ef6:	9a 83       	std	Y+2, r25	; 0x02
    3ef8:	89 83       	std	Y+1, r24	; 0x01
    3efa:	89 81       	ldd	r24, Y+1	; 0x01
    3efc:	9a 81       	ldd	r25, Y+2	; 0x02
    3efe:	01 97       	sbiw	r24, 0x01	; 1
    3f00:	f1 f7       	brne	.-4      	; 0x3efe <passwordEntry1+0x132>
    3f02:	9a 83       	std	Y+2, r25	; 0x02
    3f04:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(50);
		passInput1[i] = KEYPAD_Value;
    3f06:	28 89       	ldd	r18, Y+16	; 0x10
    3f08:	39 89       	ldd	r19, Y+17	; 0x11
    3f0a:	8a 89       	ldd	r24, Y+18	; 0x12
    3f0c:	9b 89       	ldd	r25, Y+19	; 0x13
    3f0e:	fc 01       	movw	r30, r24
    3f10:	e2 0f       	add	r30, r18
    3f12:	f3 1f       	adc	r31, r19
    3f14:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f16:	80 83       	st	Z, r24

		if((KEYPAD_Value >= 0) && (KEYPAD_Value <= 9)) {
    3f18:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f1a:	8a 30       	cpi	r24, 0x0A	; 10
    3f1c:	40 f4       	brcc	.+16     	; 0x3f2e <passwordEntry1+0x162>
			LCD_moveCursor(1, i);
    3f1e:	98 89       	ldd	r25, Y+16	; 0x10
    3f20:	81 e0       	ldi	r24, 0x01	; 1
    3f22:	69 2f       	mov	r22, r25
    3f24:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <LCD_moveCursor>
			LCD_displayCharacter('*');
    3f28:	8a e2       	ldi	r24, 0x2A	; 42
    3f2a:	0e 94 e6 19 	call	0x33cc	; 0x33cc <LCD_displayCharacter>
	// Code for getting keypad input and saving it in an uint8 array of size password length.
	LCD_moveCursor(0, 0);
	LCD_displayString("1.Enter Pass:");
	LCD_moveCursor(1, 0);
	LCD_displayString("-----");
	for (int i = 0 ; i < passLength ; i++) {
    3f2e:	88 89       	ldd	r24, Y+16	; 0x10
    3f30:	99 89       	ldd	r25, Y+17	; 0x11
    3f32:	01 96       	adiw	r24, 0x01	; 1
    3f34:	99 8b       	std	Y+17, r25	; 0x11
    3f36:	88 8b       	std	Y+16, r24	; 0x10
    3f38:	8c 89       	ldd	r24, Y+20	; 0x14
    3f3a:	28 2f       	mov	r18, r24
    3f3c:	30 e0       	ldi	r19, 0x00	; 0
    3f3e:	88 89       	ldd	r24, Y+16	; 0x10
    3f40:	99 89       	ldd	r25, Y+17	; 0x11
    3f42:	82 17       	cp	r24, r18
    3f44:	93 07       	cpc	r25, r19
    3f46:	0c f4       	brge	.+2      	; 0x3f4a <passwordEntry1+0x17e>
    3f48:	67 cf       	rjmp	.-306    	; 0x3e18 <passwordEntry1+0x4c>
			LCD_moveCursor(1, i);
			LCD_displayCharacter('*');
//			LCD_intgerToString(KEYPAD_Value);
		}
	}
	return passInput1;
    3f4a:	8a 89       	ldd	r24, Y+18	; 0x12
    3f4c:	9b 89       	ldd	r25, Y+19	; 0x13
}
    3f4e:	64 96       	adiw	r28, 0x14	; 20
    3f50:	0f b6       	in	r0, 0x3f	; 63
    3f52:	f8 94       	cli
    3f54:	de bf       	out	0x3e, r29	; 62
    3f56:	0f be       	out	0x3f, r0	; 63
    3f58:	cd bf       	out	0x3d, r28	; 61
    3f5a:	cf 91       	pop	r28
    3f5c:	df 91       	pop	r29
    3f5e:	08 95       	ret

00003f60 <passwordEntry2>:

uint8* passwordEntry2 (void) {
    3f60:	df 93       	push	r29
    3f62:	cf 93       	push	r28
    3f64:	cd b7       	in	r28, 0x3d	; 61
    3f66:	de b7       	in	r29, 0x3e	; 62
    3f68:	64 97       	sbiw	r28, 0x14	; 20
    3f6a:	0f b6       	in	r0, 0x3f	; 63
    3f6c:	f8 94       	cli
    3f6e:	de bf       	out	0x3e, r29	; 62
    3f70:	0f be       	out	0x3f, r0	; 63
    3f72:	cd bf       	out	0x3d, r28	; 61
	uint8 passLength = 5;
    3f74:	85 e0       	ldi	r24, 0x05	; 5
    3f76:	8c 8b       	std	Y+20, r24	; 0x14
	uint8* passInput2 = (uint8*) malloc(passLength * sizeof(uint8));
    3f78:	8c 89       	ldd	r24, Y+20	; 0x14
    3f7a:	88 2f       	mov	r24, r24
    3f7c:	90 e0       	ldi	r25, 0x00	; 0
    3f7e:	0e 94 54 21 	call	0x42a8	; 0x42a8 <malloc>
    3f82:	9b 8b       	std	Y+19, r25	; 0x13
    3f84:	8a 8b       	std	Y+18, r24	; 0x12

	// Code for getting keypad input and saving it in an uint8 array of size password length.
	LCD_moveCursor(0, 0);
    3f86:	80 e0       	ldi	r24, 0x00	; 0
    3f88:	60 e0       	ldi	r22, 0x00	; 0
    3f8a:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <LCD_moveCursor>
	LCD_displayString("1.Re-Enter Pass:");
    3f8e:	84 e7       	ldi	r24, 0x74	; 116
    3f90:	90 e0       	ldi	r25, 0x00	; 0
    3f92:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <LCD_displayString>
	LCD_moveCursor(1, 0);
    3f96:	81 e0       	ldi	r24, 0x01	; 1
    3f98:	60 e0       	ldi	r22, 0x00	; 0
    3f9a:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <LCD_moveCursor>
	LCD_displayString("-----");
    3f9e:	8e e6       	ldi	r24, 0x6E	; 110
    3fa0:	90 e0       	ldi	r25, 0x00	; 0
    3fa2:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <LCD_displayString>
	for (int i = 0 ; i < passLength ; i++) {
    3fa6:	19 8a       	std	Y+17, r1	; 0x11
    3fa8:	18 8a       	std	Y+16, r1	; 0x10
    3faa:	90 c0       	rjmp	.+288    	; 0x40cc <passwordEntry2+0x16c>
		uint8 KEYPAD_Value = 100;
    3fac:	84 e6       	ldi	r24, 0x64	; 100
    3fae:	8f 87       	std	Y+15, r24	; 0x0f
		KEYPAD_Value =  KEYPAD_getPressedKey();
    3fb0:	0e 94 b5 1c 	call	0x396a	; 0x396a <KEYPAD_getPressedKey>
    3fb4:	8f 87       	std	Y+15, r24	; 0x0f
    3fb6:	80 e0       	ldi	r24, 0x00	; 0
    3fb8:	90 e0       	ldi	r25, 0x00	; 0
    3fba:	a8 e4       	ldi	r26, 0x48	; 72
    3fbc:	b2 e4       	ldi	r27, 0x42	; 66
    3fbe:	8b 87       	std	Y+11, r24	; 0x0b
    3fc0:	9c 87       	std	Y+12, r25	; 0x0c
    3fc2:	ad 87       	std	Y+13, r26	; 0x0d
    3fc4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    3fc8:	7c 85       	ldd	r23, Y+12	; 0x0c
    3fca:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fcc:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fce:	20 e0       	ldi	r18, 0x00	; 0
    3fd0:	30 e0       	ldi	r19, 0x00	; 0
    3fd2:	4a ef       	ldi	r20, 0xFA	; 250
    3fd4:	54 e4       	ldi	r21, 0x44	; 68
    3fd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fda:	dc 01       	movw	r26, r24
    3fdc:	cb 01       	movw	r24, r22
    3fde:	8f 83       	std	Y+7, r24	; 0x07
    3fe0:	98 87       	std	Y+8, r25	; 0x08
    3fe2:	a9 87       	std	Y+9, r26	; 0x09
    3fe4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3fe6:	6f 81       	ldd	r22, Y+7	; 0x07
    3fe8:	78 85       	ldd	r23, Y+8	; 0x08
    3fea:	89 85       	ldd	r24, Y+9	; 0x09
    3fec:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fee:	20 e0       	ldi	r18, 0x00	; 0
    3ff0:	30 e0       	ldi	r19, 0x00	; 0
    3ff2:	40 e8       	ldi	r20, 0x80	; 128
    3ff4:	5f e3       	ldi	r21, 0x3F	; 63
    3ff6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ffa:	88 23       	and	r24, r24
    3ffc:	2c f4       	brge	.+10     	; 0x4008 <passwordEntry2+0xa8>
		__ticks = 1;
    3ffe:	81 e0       	ldi	r24, 0x01	; 1
    4000:	90 e0       	ldi	r25, 0x00	; 0
    4002:	9e 83       	std	Y+6, r25	; 0x06
    4004:	8d 83       	std	Y+5, r24	; 0x05
    4006:	3f c0       	rjmp	.+126    	; 0x4086 <passwordEntry2+0x126>
	else if (__tmp > 65535)
    4008:	6f 81       	ldd	r22, Y+7	; 0x07
    400a:	78 85       	ldd	r23, Y+8	; 0x08
    400c:	89 85       	ldd	r24, Y+9	; 0x09
    400e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4010:	20 e0       	ldi	r18, 0x00	; 0
    4012:	3f ef       	ldi	r19, 0xFF	; 255
    4014:	4f e7       	ldi	r20, 0x7F	; 127
    4016:	57 e4       	ldi	r21, 0x47	; 71
    4018:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    401c:	18 16       	cp	r1, r24
    401e:	4c f5       	brge	.+82     	; 0x4072 <passwordEntry2+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4020:	6b 85       	ldd	r22, Y+11	; 0x0b
    4022:	7c 85       	ldd	r23, Y+12	; 0x0c
    4024:	8d 85       	ldd	r24, Y+13	; 0x0d
    4026:	9e 85       	ldd	r25, Y+14	; 0x0e
    4028:	20 e0       	ldi	r18, 0x00	; 0
    402a:	30 e0       	ldi	r19, 0x00	; 0
    402c:	40 e2       	ldi	r20, 0x20	; 32
    402e:	51 e4       	ldi	r21, 0x41	; 65
    4030:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4034:	dc 01       	movw	r26, r24
    4036:	cb 01       	movw	r24, r22
    4038:	bc 01       	movw	r22, r24
    403a:	cd 01       	movw	r24, r26
    403c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4040:	dc 01       	movw	r26, r24
    4042:	cb 01       	movw	r24, r22
    4044:	9e 83       	std	Y+6, r25	; 0x06
    4046:	8d 83       	std	Y+5, r24	; 0x05
    4048:	0f c0       	rjmp	.+30     	; 0x4068 <passwordEntry2+0x108>
    404a:	88 ec       	ldi	r24, 0xC8	; 200
    404c:	90 e0       	ldi	r25, 0x00	; 0
    404e:	9c 83       	std	Y+4, r25	; 0x04
    4050:	8b 83       	std	Y+3, r24	; 0x03
    4052:	8b 81       	ldd	r24, Y+3	; 0x03
    4054:	9c 81       	ldd	r25, Y+4	; 0x04
    4056:	01 97       	sbiw	r24, 0x01	; 1
    4058:	f1 f7       	brne	.-4      	; 0x4056 <passwordEntry2+0xf6>
    405a:	9c 83       	std	Y+4, r25	; 0x04
    405c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    405e:	8d 81       	ldd	r24, Y+5	; 0x05
    4060:	9e 81       	ldd	r25, Y+6	; 0x06
    4062:	01 97       	sbiw	r24, 0x01	; 1
    4064:	9e 83       	std	Y+6, r25	; 0x06
    4066:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4068:	8d 81       	ldd	r24, Y+5	; 0x05
    406a:	9e 81       	ldd	r25, Y+6	; 0x06
    406c:	00 97       	sbiw	r24, 0x00	; 0
    406e:	69 f7       	brne	.-38     	; 0x404a <passwordEntry2+0xea>
    4070:	14 c0       	rjmp	.+40     	; 0x409a <passwordEntry2+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4072:	6f 81       	ldd	r22, Y+7	; 0x07
    4074:	78 85       	ldd	r23, Y+8	; 0x08
    4076:	89 85       	ldd	r24, Y+9	; 0x09
    4078:	9a 85       	ldd	r25, Y+10	; 0x0a
    407a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    407e:	dc 01       	movw	r26, r24
    4080:	cb 01       	movw	r24, r22
    4082:	9e 83       	std	Y+6, r25	; 0x06
    4084:	8d 83       	std	Y+5, r24	; 0x05
    4086:	8d 81       	ldd	r24, Y+5	; 0x05
    4088:	9e 81       	ldd	r25, Y+6	; 0x06
    408a:	9a 83       	std	Y+2, r25	; 0x02
    408c:	89 83       	std	Y+1, r24	; 0x01
    408e:	89 81       	ldd	r24, Y+1	; 0x01
    4090:	9a 81       	ldd	r25, Y+2	; 0x02
    4092:	01 97       	sbiw	r24, 0x01	; 1
    4094:	f1 f7       	brne	.-4      	; 0x4092 <passwordEntry2+0x132>
    4096:	9a 83       	std	Y+2, r25	; 0x02
    4098:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(50);
		passInput2[i] = KEYPAD_Value;
    409a:	28 89       	ldd	r18, Y+16	; 0x10
    409c:	39 89       	ldd	r19, Y+17	; 0x11
    409e:	8a 89       	ldd	r24, Y+18	; 0x12
    40a0:	9b 89       	ldd	r25, Y+19	; 0x13
    40a2:	fc 01       	movw	r30, r24
    40a4:	e2 0f       	add	r30, r18
    40a6:	f3 1f       	adc	r31, r19
    40a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    40aa:	80 83       	st	Z, r24

		if((KEYPAD_Value >= 0) && (KEYPAD_Value <= 9)) {
    40ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    40ae:	8a 30       	cpi	r24, 0x0A	; 10
    40b0:	40 f4       	brcc	.+16     	; 0x40c2 <passwordEntry2+0x162>
			LCD_moveCursor(1, i);
    40b2:	98 89       	ldd	r25, Y+16	; 0x10
    40b4:	81 e0       	ldi	r24, 0x01	; 1
    40b6:	69 2f       	mov	r22, r25
    40b8:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <LCD_moveCursor>
			LCD_displayCharacter('*');
    40bc:	8a e2       	ldi	r24, 0x2A	; 42
    40be:	0e 94 e6 19 	call	0x33cc	; 0x33cc <LCD_displayCharacter>
	// Code for getting keypad input and saving it in an uint8 array of size password length.
	LCD_moveCursor(0, 0);
	LCD_displayString("1.Re-Enter Pass:");
	LCD_moveCursor(1, 0);
	LCD_displayString("-----");
	for (int i = 0 ; i < passLength ; i++) {
    40c2:	88 89       	ldd	r24, Y+16	; 0x10
    40c4:	99 89       	ldd	r25, Y+17	; 0x11
    40c6:	01 96       	adiw	r24, 0x01	; 1
    40c8:	99 8b       	std	Y+17, r25	; 0x11
    40ca:	88 8b       	std	Y+16, r24	; 0x10
    40cc:	8c 89       	ldd	r24, Y+20	; 0x14
    40ce:	28 2f       	mov	r18, r24
    40d0:	30 e0       	ldi	r19, 0x00	; 0
    40d2:	88 89       	ldd	r24, Y+16	; 0x10
    40d4:	99 89       	ldd	r25, Y+17	; 0x11
    40d6:	82 17       	cp	r24, r18
    40d8:	93 07       	cpc	r25, r19
    40da:	0c f4       	brge	.+2      	; 0x40de <passwordEntry2+0x17e>
    40dc:	67 cf       	rjmp	.-306    	; 0x3fac <passwordEntry2+0x4c>
			LCD_moveCursor(1, i);
			LCD_displayCharacter('*');
//			LCD_intgerToString(KEYPAD_Value);
		}
	}
	return passInput2;
    40de:	8a 89       	ldd	r24, Y+18	; 0x12
    40e0:	9b 89       	ldd	r25, Y+19	; 0x13
}
    40e2:	64 96       	adiw	r28, 0x14	; 20
    40e4:	0f b6       	in	r0, 0x3f	; 63
    40e6:	f8 94       	cli
    40e8:	de bf       	out	0x3e, r29	; 62
    40ea:	0f be       	out	0x3f, r0	; 63
    40ec:	cd bf       	out	0x3d, r28	; 61
    40ee:	cf 91       	pop	r28
    40f0:	df 91       	pop	r29
    40f2:	08 95       	ret

000040f4 <displayPasswords>:

void displayPasswords(uint8* pass1, uint8* pass2) {
    40f4:	df 93       	push	r29
    40f6:	cf 93       	push	r28
    40f8:	cd b7       	in	r28, 0x3d	; 61
    40fa:	de b7       	in	r29, 0x3e	; 62
    40fc:	27 97       	sbiw	r28, 0x07	; 7
    40fe:	0f b6       	in	r0, 0x3f	; 63
    4100:	f8 94       	cli
    4102:	de bf       	out	0x3e, r29	; 62
    4104:	0f be       	out	0x3f, r0	; 63
    4106:	cd bf       	out	0x3d, r28	; 61
    4108:	9d 83       	std	Y+5, r25	; 0x05
    410a:	8c 83       	std	Y+4, r24	; 0x04
    410c:	7f 83       	std	Y+7, r23	; 0x07
    410e:	6e 83       	std	Y+6, r22	; 0x06
	// Displays the password saved in the array to check if keypad inputted correctly
	// This is a test code sample
	uint8 passLength = 5;
    4110:	85 e0       	ldi	r24, 0x05	; 5
    4112:	8b 83       	std	Y+3, r24	; 0x03
	LCD_clearScreen();
    4114:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <LCD_clearScreen>
	for (int i = 0 ; i < passLength ; i++) {
    4118:	1a 82       	std	Y+2, r1	; 0x02
    411a:	19 82       	std	Y+1, r1	; 0x01
    411c:	3b c0       	rjmp	.+118    	; 0x4194 <displayPasswords+0xa0>
		LCD_moveCursor(0, 0);
    411e:	80 e0       	ldi	r24, 0x00	; 0
    4120:	60 e0       	ldi	r22, 0x00	; 0
    4122:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <LCD_moveCursor>
		LCD_displayString("P1: ");
    4126:	85 e8       	ldi	r24, 0x85	; 133
    4128:	90 e0       	ldi	r25, 0x00	; 0
    412a:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <LCD_displayString>
		LCD_moveCursor(0, 4 + i);
    412e:	89 81       	ldd	r24, Y+1	; 0x01
    4130:	98 2f       	mov	r25, r24
    4132:	9c 5f       	subi	r25, 0xFC	; 252
    4134:	80 e0       	ldi	r24, 0x00	; 0
    4136:	69 2f       	mov	r22, r25
    4138:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <LCD_moveCursor>
		LCD_intgerToString(pass1[i]);
    413c:	29 81       	ldd	r18, Y+1	; 0x01
    413e:	3a 81       	ldd	r19, Y+2	; 0x02
    4140:	8c 81       	ldd	r24, Y+4	; 0x04
    4142:	9d 81       	ldd	r25, Y+5	; 0x05
    4144:	fc 01       	movw	r30, r24
    4146:	e2 0f       	add	r30, r18
    4148:	f3 1f       	adc	r31, r19
    414a:	80 81       	ld	r24, Z
    414c:	88 2f       	mov	r24, r24
    414e:	90 e0       	ldi	r25, 0x00	; 0
    4150:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <LCD_intgerToString>

		LCD_moveCursor(1, 0);
    4154:	81 e0       	ldi	r24, 0x01	; 1
    4156:	60 e0       	ldi	r22, 0x00	; 0
    4158:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <LCD_moveCursor>
		LCD_displayString("P2: ");
    415c:	8a e8       	ldi	r24, 0x8A	; 138
    415e:	90 e0       	ldi	r25, 0x00	; 0
    4160:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <LCD_displayString>
		LCD_moveCursor(1, 4 + i);
    4164:	89 81       	ldd	r24, Y+1	; 0x01
    4166:	98 2f       	mov	r25, r24
    4168:	9c 5f       	subi	r25, 0xFC	; 252
    416a:	81 e0       	ldi	r24, 0x01	; 1
    416c:	69 2f       	mov	r22, r25
    416e:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <LCD_moveCursor>
		LCD_intgerToString(pass2[i]);
    4172:	29 81       	ldd	r18, Y+1	; 0x01
    4174:	3a 81       	ldd	r19, Y+2	; 0x02
    4176:	8e 81       	ldd	r24, Y+6	; 0x06
    4178:	9f 81       	ldd	r25, Y+7	; 0x07
    417a:	fc 01       	movw	r30, r24
    417c:	e2 0f       	add	r30, r18
    417e:	f3 1f       	adc	r31, r19
    4180:	80 81       	ld	r24, Z
    4182:	88 2f       	mov	r24, r24
    4184:	90 e0       	ldi	r25, 0x00	; 0
    4186:	0e 94 59 1c 	call	0x38b2	; 0x38b2 <LCD_intgerToString>
void displayPasswords(uint8* pass1, uint8* pass2) {
	// Displays the password saved in the array to check if keypad inputted correctly
	// This is a test code sample
	uint8 passLength = 5;
	LCD_clearScreen();
	for (int i = 0 ; i < passLength ; i++) {
    418a:	89 81       	ldd	r24, Y+1	; 0x01
    418c:	9a 81       	ldd	r25, Y+2	; 0x02
    418e:	01 96       	adiw	r24, 0x01	; 1
    4190:	9a 83       	std	Y+2, r25	; 0x02
    4192:	89 83       	std	Y+1, r24	; 0x01
    4194:	8b 81       	ldd	r24, Y+3	; 0x03
    4196:	28 2f       	mov	r18, r24
    4198:	30 e0       	ldi	r19, 0x00	; 0
    419a:	89 81       	ldd	r24, Y+1	; 0x01
    419c:	9a 81       	ldd	r25, Y+2	; 0x02
    419e:	82 17       	cp	r24, r18
    41a0:	93 07       	cpc	r25, r19
    41a2:	0c f4       	brge	.+2      	; 0x41a6 <displayPasswords+0xb2>
    41a4:	bc cf       	rjmp	.-136    	; 0x411e <displayPasswords+0x2a>
		LCD_moveCursor(1, 0);
		LCD_displayString("P2: ");
		LCD_moveCursor(1, 4 + i);
		LCD_intgerToString(pass2[i]);
	}
}
    41a6:	27 96       	adiw	r28, 0x07	; 7
    41a8:	0f b6       	in	r0, 0x3f	; 63
    41aa:	f8 94       	cli
    41ac:	de bf       	out	0x3e, r29	; 62
    41ae:	0f be       	out	0x3f, r0	; 63
    41b0:	cd bf       	out	0x3d, r28	; 61
    41b2:	cf 91       	pop	r28
    41b4:	df 91       	pop	r29
    41b6:	08 95       	ret

000041b8 <__mulsi3>:
    41b8:	62 9f       	mul	r22, r18
    41ba:	d0 01       	movw	r26, r0
    41bc:	73 9f       	mul	r23, r19
    41be:	f0 01       	movw	r30, r0
    41c0:	82 9f       	mul	r24, r18
    41c2:	e0 0d       	add	r30, r0
    41c4:	f1 1d       	adc	r31, r1
    41c6:	64 9f       	mul	r22, r20
    41c8:	e0 0d       	add	r30, r0
    41ca:	f1 1d       	adc	r31, r1
    41cc:	92 9f       	mul	r25, r18
    41ce:	f0 0d       	add	r31, r0
    41d0:	83 9f       	mul	r24, r19
    41d2:	f0 0d       	add	r31, r0
    41d4:	74 9f       	mul	r23, r20
    41d6:	f0 0d       	add	r31, r0
    41d8:	65 9f       	mul	r22, r21
    41da:	f0 0d       	add	r31, r0
    41dc:	99 27       	eor	r25, r25
    41de:	72 9f       	mul	r23, r18
    41e0:	b0 0d       	add	r27, r0
    41e2:	e1 1d       	adc	r30, r1
    41e4:	f9 1f       	adc	r31, r25
    41e6:	63 9f       	mul	r22, r19
    41e8:	b0 0d       	add	r27, r0
    41ea:	e1 1d       	adc	r30, r1
    41ec:	f9 1f       	adc	r31, r25
    41ee:	bd 01       	movw	r22, r26
    41f0:	cf 01       	movw	r24, r30
    41f2:	11 24       	eor	r1, r1
    41f4:	08 95       	ret

000041f6 <__udivmodsi4>:
    41f6:	a1 e2       	ldi	r26, 0x21	; 33
    41f8:	1a 2e       	mov	r1, r26
    41fa:	aa 1b       	sub	r26, r26
    41fc:	bb 1b       	sub	r27, r27
    41fe:	fd 01       	movw	r30, r26
    4200:	0d c0       	rjmp	.+26     	; 0x421c <__udivmodsi4_ep>

00004202 <__udivmodsi4_loop>:
    4202:	aa 1f       	adc	r26, r26
    4204:	bb 1f       	adc	r27, r27
    4206:	ee 1f       	adc	r30, r30
    4208:	ff 1f       	adc	r31, r31
    420a:	a2 17       	cp	r26, r18
    420c:	b3 07       	cpc	r27, r19
    420e:	e4 07       	cpc	r30, r20
    4210:	f5 07       	cpc	r31, r21
    4212:	20 f0       	brcs	.+8      	; 0x421c <__udivmodsi4_ep>
    4214:	a2 1b       	sub	r26, r18
    4216:	b3 0b       	sbc	r27, r19
    4218:	e4 0b       	sbc	r30, r20
    421a:	f5 0b       	sbc	r31, r21

0000421c <__udivmodsi4_ep>:
    421c:	66 1f       	adc	r22, r22
    421e:	77 1f       	adc	r23, r23
    4220:	88 1f       	adc	r24, r24
    4222:	99 1f       	adc	r25, r25
    4224:	1a 94       	dec	r1
    4226:	69 f7       	brne	.-38     	; 0x4202 <__udivmodsi4_loop>
    4228:	60 95       	com	r22
    422a:	70 95       	com	r23
    422c:	80 95       	com	r24
    422e:	90 95       	com	r25
    4230:	9b 01       	movw	r18, r22
    4232:	ac 01       	movw	r20, r24
    4234:	bd 01       	movw	r22, r26
    4236:	cf 01       	movw	r24, r30
    4238:	08 95       	ret

0000423a <__prologue_saves__>:
    423a:	2f 92       	push	r2
    423c:	3f 92       	push	r3
    423e:	4f 92       	push	r4
    4240:	5f 92       	push	r5
    4242:	6f 92       	push	r6
    4244:	7f 92       	push	r7
    4246:	8f 92       	push	r8
    4248:	9f 92       	push	r9
    424a:	af 92       	push	r10
    424c:	bf 92       	push	r11
    424e:	cf 92       	push	r12
    4250:	df 92       	push	r13
    4252:	ef 92       	push	r14
    4254:	ff 92       	push	r15
    4256:	0f 93       	push	r16
    4258:	1f 93       	push	r17
    425a:	cf 93       	push	r28
    425c:	df 93       	push	r29
    425e:	cd b7       	in	r28, 0x3d	; 61
    4260:	de b7       	in	r29, 0x3e	; 62
    4262:	ca 1b       	sub	r28, r26
    4264:	db 0b       	sbc	r29, r27
    4266:	0f b6       	in	r0, 0x3f	; 63
    4268:	f8 94       	cli
    426a:	de bf       	out	0x3e, r29	; 62
    426c:	0f be       	out	0x3f, r0	; 63
    426e:	cd bf       	out	0x3d, r28	; 61
    4270:	09 94       	ijmp

00004272 <__epilogue_restores__>:
    4272:	2a 88       	ldd	r2, Y+18	; 0x12
    4274:	39 88       	ldd	r3, Y+17	; 0x11
    4276:	48 88       	ldd	r4, Y+16	; 0x10
    4278:	5f 84       	ldd	r5, Y+15	; 0x0f
    427a:	6e 84       	ldd	r6, Y+14	; 0x0e
    427c:	7d 84       	ldd	r7, Y+13	; 0x0d
    427e:	8c 84       	ldd	r8, Y+12	; 0x0c
    4280:	9b 84       	ldd	r9, Y+11	; 0x0b
    4282:	aa 84       	ldd	r10, Y+10	; 0x0a
    4284:	b9 84       	ldd	r11, Y+9	; 0x09
    4286:	c8 84       	ldd	r12, Y+8	; 0x08
    4288:	df 80       	ldd	r13, Y+7	; 0x07
    428a:	ee 80       	ldd	r14, Y+6	; 0x06
    428c:	fd 80       	ldd	r15, Y+5	; 0x05
    428e:	0c 81       	ldd	r16, Y+4	; 0x04
    4290:	1b 81       	ldd	r17, Y+3	; 0x03
    4292:	aa 81       	ldd	r26, Y+2	; 0x02
    4294:	b9 81       	ldd	r27, Y+1	; 0x01
    4296:	ce 0f       	add	r28, r30
    4298:	d1 1d       	adc	r29, r1
    429a:	0f b6       	in	r0, 0x3f	; 63
    429c:	f8 94       	cli
    429e:	de bf       	out	0x3e, r29	; 62
    42a0:	0f be       	out	0x3f, r0	; 63
    42a2:	cd bf       	out	0x3d, r28	; 61
    42a4:	ed 01       	movw	r28, r26
    42a6:	08 95       	ret

000042a8 <malloc>:
    42a8:	cf 93       	push	r28
    42aa:	df 93       	push	r29
    42ac:	bc 01       	movw	r22, r24
    42ae:	82 30       	cpi	r24, 0x02	; 2
    42b0:	91 05       	cpc	r25, r1
    42b2:	10 f4       	brcc	.+4      	; 0x42b8 <malloc+0x10>
    42b4:	62 e0       	ldi	r22, 0x02	; 2
    42b6:	70 e0       	ldi	r23, 0x00	; 0
    42b8:	a0 91 ac 01 	lds	r26, 0x01AC
    42bc:	b0 91 ad 01 	lds	r27, 0x01AD
    42c0:	ed 01       	movw	r28, r26
    42c2:	e0 e0       	ldi	r30, 0x00	; 0
    42c4:	f0 e0       	ldi	r31, 0x00	; 0
    42c6:	40 e0       	ldi	r20, 0x00	; 0
    42c8:	50 e0       	ldi	r21, 0x00	; 0
    42ca:	21 c0       	rjmp	.+66     	; 0x430e <malloc+0x66>
    42cc:	88 81       	ld	r24, Y
    42ce:	99 81       	ldd	r25, Y+1	; 0x01
    42d0:	86 17       	cp	r24, r22
    42d2:	97 07       	cpc	r25, r23
    42d4:	69 f4       	brne	.+26     	; 0x42f0 <malloc+0x48>
    42d6:	8a 81       	ldd	r24, Y+2	; 0x02
    42d8:	9b 81       	ldd	r25, Y+3	; 0x03
    42da:	30 97       	sbiw	r30, 0x00	; 0
    42dc:	19 f0       	breq	.+6      	; 0x42e4 <malloc+0x3c>
    42de:	93 83       	std	Z+3, r25	; 0x03
    42e0:	82 83       	std	Z+2, r24	; 0x02
    42e2:	04 c0       	rjmp	.+8      	; 0x42ec <malloc+0x44>
    42e4:	90 93 ad 01 	sts	0x01AD, r25
    42e8:	80 93 ac 01 	sts	0x01AC, r24
    42ec:	fe 01       	movw	r30, r28
    42ee:	34 c0       	rjmp	.+104    	; 0x4358 <malloc+0xb0>
    42f0:	68 17       	cp	r22, r24
    42f2:	79 07       	cpc	r23, r25
    42f4:	38 f4       	brcc	.+14     	; 0x4304 <malloc+0x5c>
    42f6:	41 15       	cp	r20, r1
    42f8:	51 05       	cpc	r21, r1
    42fa:	19 f0       	breq	.+6      	; 0x4302 <malloc+0x5a>
    42fc:	84 17       	cp	r24, r20
    42fe:	95 07       	cpc	r25, r21
    4300:	08 f4       	brcc	.+2      	; 0x4304 <malloc+0x5c>
    4302:	ac 01       	movw	r20, r24
    4304:	fe 01       	movw	r30, r28
    4306:	8a 81       	ldd	r24, Y+2	; 0x02
    4308:	9b 81       	ldd	r25, Y+3	; 0x03
    430a:	9c 01       	movw	r18, r24
    430c:	e9 01       	movw	r28, r18
    430e:	20 97       	sbiw	r28, 0x00	; 0
    4310:	e9 f6       	brne	.-70     	; 0x42cc <malloc+0x24>
    4312:	41 15       	cp	r20, r1
    4314:	51 05       	cpc	r21, r1
    4316:	a9 f1       	breq	.+106    	; 0x4382 <malloc+0xda>
    4318:	ca 01       	movw	r24, r20
    431a:	86 1b       	sub	r24, r22
    431c:	97 0b       	sbc	r25, r23
    431e:	04 97       	sbiw	r24, 0x04	; 4
    4320:	08 f4       	brcc	.+2      	; 0x4324 <malloc+0x7c>
    4322:	ba 01       	movw	r22, r20
    4324:	e0 e0       	ldi	r30, 0x00	; 0
    4326:	f0 e0       	ldi	r31, 0x00	; 0
    4328:	2a c0       	rjmp	.+84     	; 0x437e <malloc+0xd6>
    432a:	8d 91       	ld	r24, X+
    432c:	9c 91       	ld	r25, X
    432e:	11 97       	sbiw	r26, 0x01	; 1
    4330:	84 17       	cp	r24, r20
    4332:	95 07       	cpc	r25, r21
    4334:	f9 f4       	brne	.+62     	; 0x4374 <malloc+0xcc>
    4336:	64 17       	cp	r22, r20
    4338:	75 07       	cpc	r23, r21
    433a:	81 f4       	brne	.+32     	; 0x435c <malloc+0xb4>
    433c:	12 96       	adiw	r26, 0x02	; 2
    433e:	8d 91       	ld	r24, X+
    4340:	9c 91       	ld	r25, X
    4342:	13 97       	sbiw	r26, 0x03	; 3
    4344:	30 97       	sbiw	r30, 0x00	; 0
    4346:	19 f0       	breq	.+6      	; 0x434e <malloc+0xa6>
    4348:	93 83       	std	Z+3, r25	; 0x03
    434a:	82 83       	std	Z+2, r24	; 0x02
    434c:	04 c0       	rjmp	.+8      	; 0x4356 <malloc+0xae>
    434e:	90 93 ad 01 	sts	0x01AD, r25
    4352:	80 93 ac 01 	sts	0x01AC, r24
    4356:	fd 01       	movw	r30, r26
    4358:	32 96       	adiw	r30, 0x02	; 2
    435a:	4f c0       	rjmp	.+158    	; 0x43fa <malloc+0x152>
    435c:	ca 01       	movw	r24, r20
    435e:	86 1b       	sub	r24, r22
    4360:	97 0b       	sbc	r25, r23
    4362:	fd 01       	movw	r30, r26
    4364:	e8 0f       	add	r30, r24
    4366:	f9 1f       	adc	r31, r25
    4368:	61 93       	st	Z+, r22
    436a:	71 93       	st	Z+, r23
    436c:	02 97       	sbiw	r24, 0x02	; 2
    436e:	8d 93       	st	X+, r24
    4370:	9c 93       	st	X, r25
    4372:	43 c0       	rjmp	.+134    	; 0x43fa <malloc+0x152>
    4374:	fd 01       	movw	r30, r26
    4376:	82 81       	ldd	r24, Z+2	; 0x02
    4378:	93 81       	ldd	r25, Z+3	; 0x03
    437a:	9c 01       	movw	r18, r24
    437c:	d9 01       	movw	r26, r18
    437e:	10 97       	sbiw	r26, 0x00	; 0
    4380:	a1 f6       	brne	.-88     	; 0x432a <malloc+0x82>
    4382:	80 91 aa 01 	lds	r24, 0x01AA
    4386:	90 91 ab 01 	lds	r25, 0x01AB
    438a:	89 2b       	or	r24, r25
    438c:	41 f4       	brne	.+16     	; 0x439e <malloc+0xf6>
    438e:	80 91 99 01 	lds	r24, 0x0199
    4392:	90 91 9a 01 	lds	r25, 0x019A
    4396:	90 93 ab 01 	sts	0x01AB, r25
    439a:	80 93 aa 01 	sts	0x01AA, r24
    439e:	40 91 9b 01 	lds	r20, 0x019B
    43a2:	50 91 9c 01 	lds	r21, 0x019C
    43a6:	41 15       	cp	r20, r1
    43a8:	51 05       	cpc	r21, r1
    43aa:	41 f4       	brne	.+16     	; 0x43bc <malloc+0x114>
    43ac:	4d b7       	in	r20, 0x3d	; 61
    43ae:	5e b7       	in	r21, 0x3e	; 62
    43b0:	80 91 97 01 	lds	r24, 0x0197
    43b4:	90 91 98 01 	lds	r25, 0x0198
    43b8:	48 1b       	sub	r20, r24
    43ba:	59 0b       	sbc	r21, r25
    43bc:	20 91 aa 01 	lds	r18, 0x01AA
    43c0:	30 91 ab 01 	lds	r19, 0x01AB
    43c4:	24 17       	cp	r18, r20
    43c6:	35 07       	cpc	r19, r21
    43c8:	b0 f4       	brcc	.+44     	; 0x43f6 <malloc+0x14e>
    43ca:	ca 01       	movw	r24, r20
    43cc:	82 1b       	sub	r24, r18
    43ce:	93 0b       	sbc	r25, r19
    43d0:	86 17       	cp	r24, r22
    43d2:	97 07       	cpc	r25, r23
    43d4:	80 f0       	brcs	.+32     	; 0x43f6 <malloc+0x14e>
    43d6:	ab 01       	movw	r20, r22
    43d8:	4e 5f       	subi	r20, 0xFE	; 254
    43da:	5f 4f       	sbci	r21, 0xFF	; 255
    43dc:	84 17       	cp	r24, r20
    43de:	95 07       	cpc	r25, r21
    43e0:	50 f0       	brcs	.+20     	; 0x43f6 <malloc+0x14e>
    43e2:	42 0f       	add	r20, r18
    43e4:	53 1f       	adc	r21, r19
    43e6:	50 93 ab 01 	sts	0x01AB, r21
    43ea:	40 93 aa 01 	sts	0x01AA, r20
    43ee:	f9 01       	movw	r30, r18
    43f0:	61 93       	st	Z+, r22
    43f2:	71 93       	st	Z+, r23
    43f4:	02 c0       	rjmp	.+4      	; 0x43fa <malloc+0x152>
    43f6:	e0 e0       	ldi	r30, 0x00	; 0
    43f8:	f0 e0       	ldi	r31, 0x00	; 0
    43fa:	cf 01       	movw	r24, r30
    43fc:	df 91       	pop	r29
    43fe:	cf 91       	pop	r28
    4400:	08 95       	ret

00004402 <free>:
    4402:	cf 93       	push	r28
    4404:	df 93       	push	r29
    4406:	00 97       	sbiw	r24, 0x00	; 0
    4408:	09 f4       	brne	.+2      	; 0x440c <free+0xa>
    440a:	50 c0       	rjmp	.+160    	; 0x44ac <free+0xaa>
    440c:	ec 01       	movw	r28, r24
    440e:	22 97       	sbiw	r28, 0x02	; 2
    4410:	1b 82       	std	Y+3, r1	; 0x03
    4412:	1a 82       	std	Y+2, r1	; 0x02
    4414:	a0 91 ac 01 	lds	r26, 0x01AC
    4418:	b0 91 ad 01 	lds	r27, 0x01AD
    441c:	10 97       	sbiw	r26, 0x00	; 0
    441e:	09 f1       	breq	.+66     	; 0x4462 <free+0x60>
    4420:	40 e0       	ldi	r20, 0x00	; 0
    4422:	50 e0       	ldi	r21, 0x00	; 0
    4424:	ac 17       	cp	r26, r28
    4426:	bd 07       	cpc	r27, r29
    4428:	08 f1       	brcs	.+66     	; 0x446c <free+0x6a>
    442a:	bb 83       	std	Y+3, r27	; 0x03
    442c:	aa 83       	std	Y+2, r26	; 0x02
    442e:	fe 01       	movw	r30, r28
    4430:	21 91       	ld	r18, Z+
    4432:	31 91       	ld	r19, Z+
    4434:	e2 0f       	add	r30, r18
    4436:	f3 1f       	adc	r31, r19
    4438:	ae 17       	cp	r26, r30
    443a:	bf 07       	cpc	r27, r31
    443c:	79 f4       	brne	.+30     	; 0x445c <free+0x5a>
    443e:	8d 91       	ld	r24, X+
    4440:	9c 91       	ld	r25, X
    4442:	11 97       	sbiw	r26, 0x01	; 1
    4444:	28 0f       	add	r18, r24
    4446:	39 1f       	adc	r19, r25
    4448:	2e 5f       	subi	r18, 0xFE	; 254
    444a:	3f 4f       	sbci	r19, 0xFF	; 255
    444c:	39 83       	std	Y+1, r19	; 0x01
    444e:	28 83       	st	Y, r18
    4450:	12 96       	adiw	r26, 0x02	; 2
    4452:	8d 91       	ld	r24, X+
    4454:	9c 91       	ld	r25, X
    4456:	13 97       	sbiw	r26, 0x03	; 3
    4458:	9b 83       	std	Y+3, r25	; 0x03
    445a:	8a 83       	std	Y+2, r24	; 0x02
    445c:	41 15       	cp	r20, r1
    445e:	51 05       	cpc	r21, r1
    4460:	71 f4       	brne	.+28     	; 0x447e <free+0x7c>
    4462:	d0 93 ad 01 	sts	0x01AD, r29
    4466:	c0 93 ac 01 	sts	0x01AC, r28
    446a:	20 c0       	rjmp	.+64     	; 0x44ac <free+0xaa>
    446c:	12 96       	adiw	r26, 0x02	; 2
    446e:	8d 91       	ld	r24, X+
    4470:	9c 91       	ld	r25, X
    4472:	13 97       	sbiw	r26, 0x03	; 3
    4474:	ad 01       	movw	r20, r26
    4476:	00 97       	sbiw	r24, 0x00	; 0
    4478:	11 f0       	breq	.+4      	; 0x447e <free+0x7c>
    447a:	dc 01       	movw	r26, r24
    447c:	d3 cf       	rjmp	.-90     	; 0x4424 <free+0x22>
    447e:	fa 01       	movw	r30, r20
    4480:	d3 83       	std	Z+3, r29	; 0x03
    4482:	c2 83       	std	Z+2, r28	; 0x02
    4484:	21 91       	ld	r18, Z+
    4486:	31 91       	ld	r19, Z+
    4488:	e2 0f       	add	r30, r18
    448a:	f3 1f       	adc	r31, r19
    448c:	ce 17       	cp	r28, r30
    448e:	df 07       	cpc	r29, r31
    4490:	69 f4       	brne	.+26     	; 0x44ac <free+0xaa>
    4492:	88 81       	ld	r24, Y
    4494:	99 81       	ldd	r25, Y+1	; 0x01
    4496:	28 0f       	add	r18, r24
    4498:	39 1f       	adc	r19, r25
    449a:	2e 5f       	subi	r18, 0xFE	; 254
    449c:	3f 4f       	sbci	r19, 0xFF	; 255
    449e:	fa 01       	movw	r30, r20
    44a0:	31 83       	std	Z+1, r19	; 0x01
    44a2:	20 83       	st	Z, r18
    44a4:	8a 81       	ldd	r24, Y+2	; 0x02
    44a6:	9b 81       	ldd	r25, Y+3	; 0x03
    44a8:	93 83       	std	Z+3, r25	; 0x03
    44aa:	82 83       	std	Z+2, r24	; 0x02
    44ac:	df 91       	pop	r29
    44ae:	cf 91       	pop	r28
    44b0:	08 95       	ret

000044b2 <itoa>:
    44b2:	fb 01       	movw	r30, r22
    44b4:	9f 01       	movw	r18, r30
    44b6:	e8 94       	clt
    44b8:	42 30       	cpi	r20, 0x02	; 2
    44ba:	c4 f0       	brlt	.+48     	; 0x44ec <itoa+0x3a>
    44bc:	45 32       	cpi	r20, 0x25	; 37
    44be:	b4 f4       	brge	.+44     	; 0x44ec <itoa+0x3a>
    44c0:	4a 30       	cpi	r20, 0x0A	; 10
    44c2:	29 f4       	brne	.+10     	; 0x44ce <itoa+0x1c>
    44c4:	97 fb       	bst	r25, 7
    44c6:	1e f4       	brtc	.+6      	; 0x44ce <itoa+0x1c>
    44c8:	90 95       	com	r25
    44ca:	81 95       	neg	r24
    44cc:	9f 4f       	sbci	r25, 0xFF	; 255
    44ce:	64 2f       	mov	r22, r20
    44d0:	77 27       	eor	r23, r23
    44d2:	0e 94 06 23 	call	0x460c	; 0x460c <__udivmodhi4>
    44d6:	80 5d       	subi	r24, 0xD0	; 208
    44d8:	8a 33       	cpi	r24, 0x3A	; 58
    44da:	0c f0       	brlt	.+2      	; 0x44de <itoa+0x2c>
    44dc:	89 5d       	subi	r24, 0xD9	; 217
    44de:	81 93       	st	Z+, r24
    44e0:	cb 01       	movw	r24, r22
    44e2:	00 97       	sbiw	r24, 0x00	; 0
    44e4:	a1 f7       	brne	.-24     	; 0x44ce <itoa+0x1c>
    44e6:	16 f4       	brtc	.+4      	; 0x44ec <itoa+0x3a>
    44e8:	5d e2       	ldi	r21, 0x2D	; 45
    44ea:	51 93       	st	Z+, r21
    44ec:	10 82       	st	Z, r1
    44ee:	c9 01       	movw	r24, r18
    44f0:	0c 94 d4 22 	jmp	0x45a8	; 0x45a8 <strrev>

000044f4 <ceil>:
    44f4:	3b d0       	rcall	.+118    	; 0x456c <__fp_trunc>
    44f6:	80 f0       	brcs	.+32     	; 0x4518 <ceil+0x24>
    44f8:	9f 37       	cpi	r25, 0x7F	; 127
    44fa:	40 f4       	brcc	.+16     	; 0x450c <ceil+0x18>
    44fc:	91 11       	cpse	r25, r1
    44fe:	0e f4       	brtc	.+2      	; 0x4502 <ceil+0xe>
    4500:	4d c0       	rjmp	.+154    	; 0x459c <__fp_szero>
    4502:	60 e0       	ldi	r22, 0x00	; 0
    4504:	70 e0       	ldi	r23, 0x00	; 0
    4506:	80 e8       	ldi	r24, 0x80	; 128
    4508:	9f e3       	ldi	r25, 0x3F	; 63
    450a:	08 95       	ret
    450c:	26 f0       	brts	.+8      	; 0x4516 <ceil+0x22>
    450e:	1b 16       	cp	r1, r27
    4510:	61 1d       	adc	r22, r1
    4512:	71 1d       	adc	r23, r1
    4514:	81 1d       	adc	r24, r1
    4516:	01 c0       	rjmp	.+2      	; 0x451a <__fp_mintl>
    4518:	1b c0       	rjmp	.+54     	; 0x4550 <__fp_mpack>

0000451a <__fp_mintl>:
    451a:	88 23       	and	r24, r24
    451c:	71 f4       	brne	.+28     	; 0x453a <__fp_mintl+0x20>
    451e:	77 23       	and	r23, r23
    4520:	21 f0       	breq	.+8      	; 0x452a <__fp_mintl+0x10>
    4522:	98 50       	subi	r25, 0x08	; 8
    4524:	87 2b       	or	r24, r23
    4526:	76 2f       	mov	r23, r22
    4528:	07 c0       	rjmp	.+14     	; 0x4538 <__fp_mintl+0x1e>
    452a:	66 23       	and	r22, r22
    452c:	11 f4       	brne	.+4      	; 0x4532 <__fp_mintl+0x18>
    452e:	99 27       	eor	r25, r25
    4530:	0d c0       	rjmp	.+26     	; 0x454c <__fp_mintl+0x32>
    4532:	90 51       	subi	r25, 0x10	; 16
    4534:	86 2b       	or	r24, r22
    4536:	70 e0       	ldi	r23, 0x00	; 0
    4538:	60 e0       	ldi	r22, 0x00	; 0
    453a:	2a f0       	brmi	.+10     	; 0x4546 <__fp_mintl+0x2c>
    453c:	9a 95       	dec	r25
    453e:	66 0f       	add	r22, r22
    4540:	77 1f       	adc	r23, r23
    4542:	88 1f       	adc	r24, r24
    4544:	da f7       	brpl	.-10     	; 0x453c <__fp_mintl+0x22>
    4546:	88 0f       	add	r24, r24
    4548:	96 95       	lsr	r25
    454a:	87 95       	ror	r24
    454c:	97 f9       	bld	r25, 7
    454e:	08 95       	ret

00004550 <__fp_mpack>:
    4550:	9f 3f       	cpi	r25, 0xFF	; 255
    4552:	31 f0       	breq	.+12     	; 0x4560 <__fp_mpack_finite+0xc>

00004554 <__fp_mpack_finite>:
    4554:	91 50       	subi	r25, 0x01	; 1
    4556:	20 f4       	brcc	.+8      	; 0x4560 <__fp_mpack_finite+0xc>
    4558:	87 95       	ror	r24
    455a:	77 95       	ror	r23
    455c:	67 95       	ror	r22
    455e:	b7 95       	ror	r27
    4560:	88 0f       	add	r24, r24
    4562:	91 1d       	adc	r25, r1
    4564:	96 95       	lsr	r25
    4566:	87 95       	ror	r24
    4568:	97 f9       	bld	r25, 7
    456a:	08 95       	ret

0000456c <__fp_trunc>:
    456c:	35 d0       	rcall	.+106    	; 0x45d8 <__fp_splitA>
    456e:	a0 f0       	brcs	.+40     	; 0x4598 <__fp_trunc+0x2c>
    4570:	be e7       	ldi	r27, 0x7E	; 126
    4572:	b9 17       	cp	r27, r25
    4574:	88 f4       	brcc	.+34     	; 0x4598 <__fp_trunc+0x2c>
    4576:	bb 27       	eor	r27, r27
    4578:	9f 38       	cpi	r25, 0x8F	; 143
    457a:	60 f4       	brcc	.+24     	; 0x4594 <__fp_trunc+0x28>
    457c:	16 16       	cp	r1, r22
    457e:	b1 1d       	adc	r27, r1
    4580:	67 2f       	mov	r22, r23
    4582:	78 2f       	mov	r23, r24
    4584:	88 27       	eor	r24, r24
    4586:	98 5f       	subi	r25, 0xF8	; 248
    4588:	f7 cf       	rjmp	.-18     	; 0x4578 <__fp_trunc+0xc>
    458a:	86 95       	lsr	r24
    458c:	77 95       	ror	r23
    458e:	67 95       	ror	r22
    4590:	b1 1d       	adc	r27, r1
    4592:	93 95       	inc	r25
    4594:	96 39       	cpi	r25, 0x96	; 150
    4596:	c8 f3       	brcs	.-14     	; 0x458a <__fp_trunc+0x1e>
    4598:	08 95       	ret

0000459a <__fp_zero>:
    459a:	e8 94       	clt

0000459c <__fp_szero>:
    459c:	bb 27       	eor	r27, r27
    459e:	66 27       	eor	r22, r22
    45a0:	77 27       	eor	r23, r23
    45a2:	cb 01       	movw	r24, r22
    45a4:	97 f9       	bld	r25, 7
    45a6:	08 95       	ret

000045a8 <strrev>:
    45a8:	dc 01       	movw	r26, r24
    45aa:	fc 01       	movw	r30, r24
    45ac:	67 2f       	mov	r22, r23
    45ae:	71 91       	ld	r23, Z+
    45b0:	77 23       	and	r23, r23
    45b2:	e1 f7       	brne	.-8      	; 0x45ac <strrev+0x4>
    45b4:	32 97       	sbiw	r30, 0x02	; 2
    45b6:	04 c0       	rjmp	.+8      	; 0x45c0 <strrev+0x18>
    45b8:	7c 91       	ld	r23, X
    45ba:	6d 93       	st	X+, r22
    45bc:	70 83       	st	Z, r23
    45be:	62 91       	ld	r22, -Z
    45c0:	ae 17       	cp	r26, r30
    45c2:	bf 07       	cpc	r27, r31
    45c4:	c8 f3       	brcs	.-14     	; 0x45b8 <strrev+0x10>
    45c6:	08 95       	ret

000045c8 <__fp_split3>:
    45c8:	57 fd       	sbrc	r21, 7
    45ca:	90 58       	subi	r25, 0x80	; 128
    45cc:	44 0f       	add	r20, r20
    45ce:	55 1f       	adc	r21, r21
    45d0:	59 f0       	breq	.+22     	; 0x45e8 <__fp_splitA+0x10>
    45d2:	5f 3f       	cpi	r21, 0xFF	; 255
    45d4:	71 f0       	breq	.+28     	; 0x45f2 <__fp_splitA+0x1a>
    45d6:	47 95       	ror	r20

000045d8 <__fp_splitA>:
    45d8:	88 0f       	add	r24, r24
    45da:	97 fb       	bst	r25, 7
    45dc:	99 1f       	adc	r25, r25
    45de:	61 f0       	breq	.+24     	; 0x45f8 <__fp_splitA+0x20>
    45e0:	9f 3f       	cpi	r25, 0xFF	; 255
    45e2:	79 f0       	breq	.+30     	; 0x4602 <__fp_splitA+0x2a>
    45e4:	87 95       	ror	r24
    45e6:	08 95       	ret
    45e8:	12 16       	cp	r1, r18
    45ea:	13 06       	cpc	r1, r19
    45ec:	14 06       	cpc	r1, r20
    45ee:	55 1f       	adc	r21, r21
    45f0:	f2 cf       	rjmp	.-28     	; 0x45d6 <__fp_split3+0xe>
    45f2:	46 95       	lsr	r20
    45f4:	f1 df       	rcall	.-30     	; 0x45d8 <__fp_splitA>
    45f6:	08 c0       	rjmp	.+16     	; 0x4608 <__fp_splitA+0x30>
    45f8:	16 16       	cp	r1, r22
    45fa:	17 06       	cpc	r1, r23
    45fc:	18 06       	cpc	r1, r24
    45fe:	99 1f       	adc	r25, r25
    4600:	f1 cf       	rjmp	.-30     	; 0x45e4 <__fp_splitA+0xc>
    4602:	86 95       	lsr	r24
    4604:	71 05       	cpc	r23, r1
    4606:	61 05       	cpc	r22, r1
    4608:	08 94       	sec
    460a:	08 95       	ret

0000460c <__udivmodhi4>:
    460c:	aa 1b       	sub	r26, r26
    460e:	bb 1b       	sub	r27, r27
    4610:	51 e1       	ldi	r21, 0x11	; 17
    4612:	07 c0       	rjmp	.+14     	; 0x4622 <__udivmodhi4_ep>

00004614 <__udivmodhi4_loop>:
    4614:	aa 1f       	adc	r26, r26
    4616:	bb 1f       	adc	r27, r27
    4618:	a6 17       	cp	r26, r22
    461a:	b7 07       	cpc	r27, r23
    461c:	10 f0       	brcs	.+4      	; 0x4622 <__udivmodhi4_ep>
    461e:	a6 1b       	sub	r26, r22
    4620:	b7 0b       	sbc	r27, r23

00004622 <__udivmodhi4_ep>:
    4622:	88 1f       	adc	r24, r24
    4624:	99 1f       	adc	r25, r25
    4626:	5a 95       	dec	r21
    4628:	a9 f7       	brne	.-22     	; 0x4614 <__udivmodhi4_loop>
    462a:	80 95       	com	r24
    462c:	90 95       	com	r25
    462e:	bc 01       	movw	r22, r24
    4630:	cd 01       	movw	r24, r26
    4632:	08 95       	ret

00004634 <_exit>:
    4634:	f8 94       	cli

00004636 <__stop_program>:
    4636:	ff cf       	rjmp	.-2      	; 0x4636 <__stop_program>
