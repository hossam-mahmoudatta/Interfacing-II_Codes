
DOOR-LOCK-PROJECT_CTRL-ECU_HOSA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004392  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00004392  00004426  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800168  00800168  0000452e  2**0
                  ALLOC
  3 .stab         0000591c  00000000  00000000  00004530  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002458  00000000  00000000  00009e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  0000c2a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000232  00000000  00000000  0000c484  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002891  00000000  00000000  0000c6b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001628  00000000  00000000  0000ef47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000013de  00000000  00000000  0001056f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  00011950  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000030f  00000000  00000000  00011b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a56  00000000  00000000  00011e5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000128b5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 1b 20 	jmp	0x4036	; 0x4036 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ac 36       	cpi	r26, 0x6C	; 108
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e2 e9       	ldi	r30, 0x92	; 146
      78:	f3 e4       	ldi	r31, 0x43	; 67
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 52 20 	call	0x40a4	; 0x40a4 <main>
      8a:	0c 94 c7 21 	jmp	0x438e	; 0x438e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 cf 20 	jmp	0x419e	; 0x419e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 eb 20 	jmp	0x41d6	; 0x41d6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 db 20 	jmp	0x41b6	; 0x41b6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f7 20 	jmp	0x41ee	; 0x41ee <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 db 20 	jmp	0x41b6	; 0x41b6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f7 20 	jmp	0x41ee	; 0x41ee <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 cf 20 	jmp	0x419e	; 0x419e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 eb 20 	jmp	0x41d6	; 0x41d6 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d7 20 	jmp	0x41ae	; 0x41ae <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 f3 20 	jmp	0x41e6	; 0x41e6 <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 db 20 	jmp	0x41b6	; 0x41b6 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 f7 20 	jmp	0x41ee	; 0x41ee <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 db 20 	jmp	0x41b6	; 0x41b6 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 f7 20 	jmp	0x41ee	; 0x41ee <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 db 20 	jmp	0x41b6	; 0x41b6 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 f7 20 	jmp	0x41ee	; 0x41ee <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 db 20 	jmp	0x41b6	; 0x41b6 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 f7 20 	jmp	0x41ee	; 0x41ee <__epilogue_restores__+0x18>

0000090a <__floatsisf>:
     90a:	a8 e0       	ldi	r26, 0x08	; 8
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 d8 20 	jmp	0x41b0	; 0x41b0 <__prologue_saves__+0x12>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	89 83       	std	Y+1, r24	; 0x01
     91e:	da 01       	movw	r26, r20
     920:	c9 01       	movw	r24, r18
     922:	88 27       	eor	r24, r24
     924:	b7 fd       	sbrc	r27, 7
     926:	83 95       	inc	r24
     928:	99 27       	eor	r25, r25
     92a:	aa 27       	eor	r26, r26
     92c:	bb 27       	eor	r27, r27
     92e:	b8 2e       	mov	r11, r24
     930:	21 15       	cp	r18, r1
     932:	31 05       	cpc	r19, r1
     934:	41 05       	cpc	r20, r1
     936:	51 05       	cpc	r21, r1
     938:	19 f4       	brne	.+6      	; 0x940 <__floatsisf+0x36>
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	3a c0       	rjmp	.+116    	; 0x9b4 <__floatsisf+0xaa>
     940:	88 23       	and	r24, r24
     942:	a9 f0       	breq	.+42     	; 0x96e <__floatsisf+0x64>
     944:	20 30       	cpi	r18, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	38 07       	cpc	r19, r24
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	48 07       	cpc	r20, r24
     94e:	80 e8       	ldi	r24, 0x80	; 128
     950:	58 07       	cpc	r21, r24
     952:	29 f4       	brne	.+10     	; 0x95e <__floatsisf+0x54>
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	9f ec       	ldi	r25, 0xCF	; 207
     95c:	30 c0       	rjmp	.+96     	; 0x9be <__floatsisf+0xb4>
     95e:	ee 24       	eor	r14, r14
     960:	ff 24       	eor	r15, r15
     962:	87 01       	movw	r16, r14
     964:	e2 1a       	sub	r14, r18
     966:	f3 0a       	sbc	r15, r19
     968:	04 0b       	sbc	r16, r20
     96a:	15 0b       	sbc	r17, r21
     96c:	02 c0       	rjmp	.+4      	; 0x972 <__floatsisf+0x68>
     96e:	79 01       	movw	r14, r18
     970:	8a 01       	movw	r16, r20
     972:	8e e1       	ldi	r24, 0x1E	; 30
     974:	c8 2e       	mov	r12, r24
     976:	d1 2c       	mov	r13, r1
     978:	dc 82       	std	Y+4, r13	; 0x04
     97a:	cb 82       	std	Y+3, r12	; 0x03
     97c:	ed 82       	std	Y+5, r14	; 0x05
     97e:	fe 82       	std	Y+6, r15	; 0x06
     980:	0f 83       	std	Y+7, r16	; 0x07
     982:	18 87       	std	Y+8, r17	; 0x08
     984:	c8 01       	movw	r24, r16
     986:	b7 01       	movw	r22, r14
     988:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	18 16       	cp	r1, r24
     990:	19 06       	cpc	r1, r25
     992:	84 f4       	brge	.+32     	; 0x9b4 <__floatsisf+0xaa>
     994:	08 2e       	mov	r0, r24
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatsisf+0x96>
     998:	ee 0c       	add	r14, r14
     99a:	ff 1c       	adc	r15, r15
     99c:	00 1f       	adc	r16, r16
     99e:	11 1f       	adc	r17, r17
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatsisf+0x8e>
     9a4:	ed 82       	std	Y+5, r14	; 0x05
     9a6:	fe 82       	std	Y+6, r15	; 0x06
     9a8:	0f 83       	std	Y+7, r16	; 0x07
     9aa:	18 87       	std	Y+8, r17	; 0x08
     9ac:	c8 1a       	sub	r12, r24
     9ae:	d9 0a       	sbc	r13, r25
     9b0:	dc 82       	std	Y+4, r13	; 0x04
     9b2:	cb 82       	std	Y+3, r12	; 0x03
     9b4:	ba 82       	std	Y+2, r11	; 0x02
     9b6:	ce 01       	movw	r24, r28
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     9be:	28 96       	adiw	r28, 0x08	; 8
     9c0:	e9 e0       	ldi	r30, 0x09	; 9
     9c2:	0c 94 f4 20 	jmp	0x41e8	; 0x41e8 <__epilogue_restores__+0x12>

000009c6 <__fixsfsi>:
     9c6:	ac e0       	ldi	r26, 0x0C	; 12
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	e9 ee       	ldi	r30, 0xE9	; 233
     9cc:	f4 e0       	ldi	r31, 0x04	; 4
     9ce:	0c 94 df 20 	jmp	0x41be	; 0x41be <__prologue_saves__+0x20>
     9d2:	69 83       	std	Y+1, r22	; 0x01
     9d4:	7a 83       	std	Y+2, r23	; 0x02
     9d6:	8b 83       	std	Y+3, r24	; 0x03
     9d8:	9c 83       	std	Y+4, r25	; 0x04
     9da:	ce 01       	movw	r24, r28
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	be 01       	movw	r22, r28
     9e0:	6b 5f       	subi	r22, 0xFB	; 251
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     9e8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	61 f1       	breq	.+88     	; 0xa46 <__fixsfsi+0x80>
     9ee:	82 30       	cpi	r24, 0x02	; 2
     9f0:	50 f1       	brcs	.+84     	; 0xa46 <__fixsfsi+0x80>
     9f2:	84 30       	cpi	r24, 0x04	; 4
     9f4:	21 f4       	brne	.+8      	; 0x9fe <__fixsfsi+0x38>
     9f6:	8e 81       	ldd	r24, Y+6	; 0x06
     9f8:	88 23       	and	r24, r24
     9fa:	51 f1       	breq	.+84     	; 0xa50 <__fixsfsi+0x8a>
     9fc:	2e c0       	rjmp	.+92     	; 0xa5a <__fixsfsi+0x94>
     9fe:	2f 81       	ldd	r18, Y+7	; 0x07
     a00:	38 85       	ldd	r19, Y+8	; 0x08
     a02:	37 fd       	sbrc	r19, 7
     a04:	20 c0       	rjmp	.+64     	; 0xa46 <__fixsfsi+0x80>
     a06:	6e 81       	ldd	r22, Y+6	; 0x06
     a08:	2f 31       	cpi	r18, 0x1F	; 31
     a0a:	31 05       	cpc	r19, r1
     a0c:	1c f0       	brlt	.+6      	; 0xa14 <__fixsfsi+0x4e>
     a0e:	66 23       	and	r22, r22
     a10:	f9 f0       	breq	.+62     	; 0xa50 <__fixsfsi+0x8a>
     a12:	23 c0       	rjmp	.+70     	; 0xa5a <__fixsfsi+0x94>
     a14:	8e e1       	ldi	r24, 0x1E	; 30
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	82 1b       	sub	r24, r18
     a1a:	93 0b       	sbc	r25, r19
     a1c:	29 85       	ldd	r18, Y+9	; 0x09
     a1e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a20:	4b 85       	ldd	r20, Y+11	; 0x0b
     a22:	5c 85       	ldd	r21, Y+12	; 0x0c
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__fixsfsi+0x68>
     a26:	56 95       	lsr	r21
     a28:	47 95       	ror	r20
     a2a:	37 95       	ror	r19
     a2c:	27 95       	ror	r18
     a2e:	8a 95       	dec	r24
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__fixsfsi+0x60>
     a32:	66 23       	and	r22, r22
     a34:	b1 f0       	breq	.+44     	; 0xa62 <__fixsfsi+0x9c>
     a36:	50 95       	com	r21
     a38:	40 95       	com	r20
     a3a:	30 95       	com	r19
     a3c:	21 95       	neg	r18
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	4f 4f       	sbci	r20, 0xFF	; 255
     a42:	5f 4f       	sbci	r21, 0xFF	; 255
     a44:	0e c0       	rjmp	.+28     	; 0xa62 <__fixsfsi+0x9c>
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	09 c0       	rjmp	.+18     	; 0xa62 <__fixsfsi+0x9c>
     a50:	2f ef       	ldi	r18, 0xFF	; 255
     a52:	3f ef       	ldi	r19, 0xFF	; 255
     a54:	4f ef       	ldi	r20, 0xFF	; 255
     a56:	5f e7       	ldi	r21, 0x7F	; 127
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__fixsfsi+0x9c>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e8       	ldi	r21, 0x80	; 128
     a62:	b9 01       	movw	r22, r18
     a64:	ca 01       	movw	r24, r20
     a66:	2c 96       	adiw	r28, 0x0c	; 12
     a68:	e2 e0       	ldi	r30, 0x02	; 2
     a6a:	0c 94 fb 20 	jmp	0x41f6	; 0x41f6 <__epilogue_restores__+0x20>

00000a6e <__floatunsisf>:
     a6e:	a8 e0       	ldi	r26, 0x08	; 8
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	ed e3       	ldi	r30, 0x3D	; 61
     a74:	f5 e0       	ldi	r31, 0x05	; 5
     a76:	0c 94 d7 20 	jmp	0x41ae	; 0x41ae <__prologue_saves__+0x10>
     a7a:	7b 01       	movw	r14, r22
     a7c:	8c 01       	movw	r16, r24
     a7e:	61 15       	cp	r22, r1
     a80:	71 05       	cpc	r23, r1
     a82:	81 05       	cpc	r24, r1
     a84:	91 05       	cpc	r25, r1
     a86:	19 f4       	brne	.+6      	; 0xa8e <__floatunsisf+0x20>
     a88:	82 e0       	ldi	r24, 0x02	; 2
     a8a:	89 83       	std	Y+1, r24	; 0x01
     a8c:	60 c0       	rjmp	.+192    	; 0xb4e <__floatunsisf+0xe0>
     a8e:	83 e0       	ldi	r24, 0x03	; 3
     a90:	89 83       	std	Y+1, r24	; 0x01
     a92:	8e e1       	ldi	r24, 0x1E	; 30
     a94:	c8 2e       	mov	r12, r24
     a96:	d1 2c       	mov	r13, r1
     a98:	dc 82       	std	Y+4, r13	; 0x04
     a9a:	cb 82       	std	Y+3, r12	; 0x03
     a9c:	ed 82       	std	Y+5, r14	; 0x05
     a9e:	fe 82       	std	Y+6, r15	; 0x06
     aa0:	0f 83       	std	Y+7, r16	; 0x07
     aa2:	18 87       	std	Y+8, r17	; 0x08
     aa4:	c8 01       	movw	r24, r16
     aa6:	b7 01       	movw	r22, r14
     aa8:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     aac:	fc 01       	movw	r30, r24
     aae:	31 97       	sbiw	r30, 0x01	; 1
     ab0:	f7 ff       	sbrs	r31, 7
     ab2:	3b c0       	rjmp	.+118    	; 0xb2a <__floatunsisf+0xbc>
     ab4:	22 27       	eor	r18, r18
     ab6:	33 27       	eor	r19, r19
     ab8:	2e 1b       	sub	r18, r30
     aba:	3f 0b       	sbc	r19, r31
     abc:	57 01       	movw	r10, r14
     abe:	68 01       	movw	r12, r16
     ac0:	02 2e       	mov	r0, r18
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <__floatunsisf+0x5e>
     ac4:	d6 94       	lsr	r13
     ac6:	c7 94       	ror	r12
     ac8:	b7 94       	ror	r11
     aca:	a7 94       	ror	r10
     acc:	0a 94       	dec	r0
     ace:	d2 f7       	brpl	.-12     	; 0xac4 <__floatunsisf+0x56>
     ad0:	40 e0       	ldi	r20, 0x00	; 0
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	04 c0       	rjmp	.+8      	; 0xaea <__floatunsisf+0x7c>
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	aa 1f       	adc	r26, r26
     ae8:	bb 1f       	adc	r27, r27
     aea:	2a 95       	dec	r18
     aec:	d2 f7       	brpl	.-12     	; 0xae2 <__floatunsisf+0x74>
     aee:	01 97       	sbiw	r24, 0x01	; 1
     af0:	a1 09       	sbc	r26, r1
     af2:	b1 09       	sbc	r27, r1
     af4:	8e 21       	and	r24, r14
     af6:	9f 21       	and	r25, r15
     af8:	a0 23       	and	r26, r16
     afa:	b1 23       	and	r27, r17
     afc:	00 97       	sbiw	r24, 0x00	; 0
     afe:	a1 05       	cpc	r26, r1
     b00:	b1 05       	cpc	r27, r1
     b02:	21 f0       	breq	.+8      	; 0xb0c <__floatunsisf+0x9e>
     b04:	41 e0       	ldi	r20, 0x01	; 1
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	4a 29       	or	r20, r10
     b0e:	5b 29       	or	r21, r11
     b10:	6c 29       	or	r22, r12
     b12:	7d 29       	or	r23, r13
     b14:	4d 83       	std	Y+5, r20	; 0x05
     b16:	5e 83       	std	Y+6, r21	; 0x06
     b18:	6f 83       	std	Y+7, r22	; 0x07
     b1a:	78 87       	std	Y+8, r23	; 0x08
     b1c:	8e e1       	ldi	r24, 0x1E	; 30
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	8e 1b       	sub	r24, r30
     b22:	9f 0b       	sbc	r25, r31
     b24:	9c 83       	std	Y+4, r25	; 0x04
     b26:	8b 83       	std	Y+3, r24	; 0x03
     b28:	12 c0       	rjmp	.+36     	; 0xb4e <__floatunsisf+0xe0>
     b2a:	30 97       	sbiw	r30, 0x00	; 0
     b2c:	81 f0       	breq	.+32     	; 0xb4e <__floatunsisf+0xe0>
     b2e:	0e 2e       	mov	r0, r30
     b30:	04 c0       	rjmp	.+8      	; 0xb3a <__floatunsisf+0xcc>
     b32:	ee 0c       	add	r14, r14
     b34:	ff 1c       	adc	r15, r15
     b36:	00 1f       	adc	r16, r16
     b38:	11 1f       	adc	r17, r17
     b3a:	0a 94       	dec	r0
     b3c:	d2 f7       	brpl	.-12     	; 0xb32 <__floatunsisf+0xc4>
     b3e:	ed 82       	std	Y+5, r14	; 0x05
     b40:	fe 82       	std	Y+6, r15	; 0x06
     b42:	0f 83       	std	Y+7, r16	; 0x07
     b44:	18 87       	std	Y+8, r17	; 0x08
     b46:	ce 1a       	sub	r12, r30
     b48:	df 0a       	sbc	r13, r31
     b4a:	dc 82       	std	Y+4, r13	; 0x04
     b4c:	cb 82       	std	Y+3, r12	; 0x03
     b4e:	1a 82       	std	Y+2, r1	; 0x02
     b50:	ce 01       	movw	r24, r28
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     b58:	28 96       	adiw	r28, 0x08	; 8
     b5a:	ea e0       	ldi	r30, 0x0A	; 10
     b5c:	0c 94 f3 20 	jmp	0x41e6	; 0x41e6 <__epilogue_restores__+0x10>

00000b60 <__clzsi2>:
     b60:	ef 92       	push	r14
     b62:	ff 92       	push	r15
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	7b 01       	movw	r14, r22
     b6a:	8c 01       	movw	r16, r24
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	e8 16       	cp	r14, r24
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	f8 06       	cpc	r15, r24
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	08 07       	cpc	r16, r24
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	18 07       	cpc	r17, r24
     b7c:	88 f4       	brcc	.+34     	; 0xba0 <__clzsi2+0x40>
     b7e:	8f ef       	ldi	r24, 0xFF	; 255
     b80:	e8 16       	cp	r14, r24
     b82:	f1 04       	cpc	r15, r1
     b84:	01 05       	cpc	r16, r1
     b86:	11 05       	cpc	r17, r1
     b88:	31 f0       	breq	.+12     	; 0xb96 <__clzsi2+0x36>
     b8a:	28 f0       	brcs	.+10     	; 0xb96 <__clzsi2+0x36>
     b8c:	88 e0       	ldi	r24, 0x08	; 8
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	a0 e0       	ldi	r26, 0x00	; 0
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	17 c0       	rjmp	.+46     	; 0xbc4 <__clzsi2+0x64>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 e0       	ldi	r26, 0x00	; 0
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	12 c0       	rjmp	.+36     	; 0xbc4 <__clzsi2+0x64>
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	e8 16       	cp	r14, r24
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	f8 06       	cpc	r15, r24
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	08 07       	cpc	r16, r24
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	18 07       	cpc	r17, r24
     bb0:	28 f0       	brcs	.+10     	; 0xbbc <__clzsi2+0x5c>
     bb2:	88 e1       	ldi	r24, 0x18	; 24
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	a0 e0       	ldi	r26, 0x00	; 0
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	04 c0       	rjmp	.+8      	; 0xbc4 <__clzsi2+0x64>
     bbc:	80 e1       	ldi	r24, 0x10	; 16
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	20 e2       	ldi	r18, 0x20	; 32
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	28 1b       	sub	r18, r24
     bce:	39 0b       	sbc	r19, r25
     bd0:	4a 0b       	sbc	r20, r26
     bd2:	5b 0b       	sbc	r21, r27
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__clzsi2+0x7e>
     bd6:	16 95       	lsr	r17
     bd8:	07 95       	ror	r16
     bda:	f7 94       	ror	r15
     bdc:	e7 94       	ror	r14
     bde:	8a 95       	dec	r24
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__clzsi2+0x76>
     be2:	f7 01       	movw	r30, r14
     be4:	e8 59       	subi	r30, 0x98	; 152
     be6:	ff 4f       	sbci	r31, 0xFF	; 255
     be8:	80 81       	ld	r24, Z
     bea:	28 1b       	sub	r18, r24
     bec:	31 09       	sbc	r19, r1
     bee:	41 09       	sbc	r20, r1
     bf0:	51 09       	sbc	r21, r1
     bf2:	c9 01       	movw	r24, r18
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	08 95       	ret

00000bfe <__pack_f>:
     bfe:	df 92       	push	r13
     c00:	ef 92       	push	r14
     c02:	ff 92       	push	r15
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	fc 01       	movw	r30, r24
     c0a:	e4 80       	ldd	r14, Z+4	; 0x04
     c0c:	f5 80       	ldd	r15, Z+5	; 0x05
     c0e:	06 81       	ldd	r16, Z+6	; 0x06
     c10:	17 81       	ldd	r17, Z+7	; 0x07
     c12:	d1 80       	ldd	r13, Z+1	; 0x01
     c14:	80 81       	ld	r24, Z
     c16:	82 30       	cpi	r24, 0x02	; 2
     c18:	48 f4       	brcc	.+18     	; 0xc2c <__pack_f+0x2e>
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	a0 e1       	ldi	r26, 0x10	; 16
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e8 2a       	or	r14, r24
     c24:	f9 2a       	or	r15, r25
     c26:	0a 2b       	or	r16, r26
     c28:	1b 2b       	or	r17, r27
     c2a:	a5 c0       	rjmp	.+330    	; 0xd76 <__pack_f+0x178>
     c2c:	84 30       	cpi	r24, 0x04	; 4
     c2e:	09 f4       	brne	.+2      	; 0xc32 <__pack_f+0x34>
     c30:	9f c0       	rjmp	.+318    	; 0xd70 <__pack_f+0x172>
     c32:	82 30       	cpi	r24, 0x02	; 2
     c34:	21 f4       	brne	.+8      	; 0xc3e <__pack_f+0x40>
     c36:	ee 24       	eor	r14, r14
     c38:	ff 24       	eor	r15, r15
     c3a:	87 01       	movw	r16, r14
     c3c:	05 c0       	rjmp	.+10     	; 0xc48 <__pack_f+0x4a>
     c3e:	e1 14       	cp	r14, r1
     c40:	f1 04       	cpc	r15, r1
     c42:	01 05       	cpc	r16, r1
     c44:	11 05       	cpc	r17, r1
     c46:	19 f4       	brne	.+6      	; 0xc4e <__pack_f+0x50>
     c48:	e0 e0       	ldi	r30, 0x00	; 0
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	96 c0       	rjmp	.+300    	; 0xd7a <__pack_f+0x17c>
     c4e:	62 81       	ldd	r22, Z+2	; 0x02
     c50:	73 81       	ldd	r23, Z+3	; 0x03
     c52:	9f ef       	ldi	r25, 0xFF	; 255
     c54:	62 38       	cpi	r22, 0x82	; 130
     c56:	79 07       	cpc	r23, r25
     c58:	0c f0       	brlt	.+2      	; 0xc5c <__pack_f+0x5e>
     c5a:	5b c0       	rjmp	.+182    	; 0xd12 <__pack_f+0x114>
     c5c:	22 e8       	ldi	r18, 0x82	; 130
     c5e:	3f ef       	ldi	r19, 0xFF	; 255
     c60:	26 1b       	sub	r18, r22
     c62:	37 0b       	sbc	r19, r23
     c64:	2a 31       	cpi	r18, 0x1A	; 26
     c66:	31 05       	cpc	r19, r1
     c68:	2c f0       	brlt	.+10     	; 0xc74 <__pack_f+0x76>
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	40 e0       	ldi	r20, 0x00	; 0
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	2a c0       	rjmp	.+84     	; 0xcc8 <__pack_f+0xca>
     c74:	b8 01       	movw	r22, r16
     c76:	a7 01       	movw	r20, r14
     c78:	02 2e       	mov	r0, r18
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__pack_f+0x86>
     c7c:	76 95       	lsr	r23
     c7e:	67 95       	ror	r22
     c80:	57 95       	ror	r21
     c82:	47 95       	ror	r20
     c84:	0a 94       	dec	r0
     c86:	d2 f7       	brpl	.-12     	; 0xc7c <__pack_f+0x7e>
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	a0 e0       	ldi	r26, 0x00	; 0
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	04 c0       	rjmp	.+8      	; 0xc9a <__pack_f+0x9c>
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	aa 1f       	adc	r26, r26
     c98:	bb 1f       	adc	r27, r27
     c9a:	2a 95       	dec	r18
     c9c:	d2 f7       	brpl	.-12     	; 0xc92 <__pack_f+0x94>
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	a1 09       	sbc	r26, r1
     ca2:	b1 09       	sbc	r27, r1
     ca4:	8e 21       	and	r24, r14
     ca6:	9f 21       	and	r25, r15
     ca8:	a0 23       	and	r26, r16
     caa:	b1 23       	and	r27, r17
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	a1 05       	cpc	r26, r1
     cb0:	b1 05       	cpc	r27, r1
     cb2:	21 f0       	breq	.+8      	; 0xcbc <__pack_f+0xbe>
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	a0 e0       	ldi	r26, 0x00	; 0
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	9a 01       	movw	r18, r20
     cbe:	ab 01       	movw	r20, r22
     cc0:	28 2b       	or	r18, r24
     cc2:	39 2b       	or	r19, r25
     cc4:	4a 2b       	or	r20, r26
     cc6:	5b 2b       	or	r21, r27
     cc8:	da 01       	movw	r26, r20
     cca:	c9 01       	movw	r24, r18
     ccc:	8f 77       	andi	r24, 0x7F	; 127
     cce:	90 70       	andi	r25, 0x00	; 0
     cd0:	a0 70       	andi	r26, 0x00	; 0
     cd2:	b0 70       	andi	r27, 0x00	; 0
     cd4:	80 34       	cpi	r24, 0x40	; 64
     cd6:	91 05       	cpc	r25, r1
     cd8:	a1 05       	cpc	r26, r1
     cda:	b1 05       	cpc	r27, r1
     cdc:	39 f4       	brne	.+14     	; 0xcec <__pack_f+0xee>
     cde:	27 ff       	sbrs	r18, 7
     ce0:	09 c0       	rjmp	.+18     	; 0xcf4 <__pack_f+0xf6>
     ce2:	20 5c       	subi	r18, 0xC0	; 192
     ce4:	3f 4f       	sbci	r19, 0xFF	; 255
     ce6:	4f 4f       	sbci	r20, 0xFF	; 255
     ce8:	5f 4f       	sbci	r21, 0xFF	; 255
     cea:	04 c0       	rjmp	.+8      	; 0xcf4 <__pack_f+0xf6>
     cec:	21 5c       	subi	r18, 0xC1	; 193
     cee:	3f 4f       	sbci	r19, 0xFF	; 255
     cf0:	4f 4f       	sbci	r20, 0xFF	; 255
     cf2:	5f 4f       	sbci	r21, 0xFF	; 255
     cf4:	e0 e0       	ldi	r30, 0x00	; 0
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	20 30       	cpi	r18, 0x00	; 0
     cfa:	a0 e0       	ldi	r26, 0x00	; 0
     cfc:	3a 07       	cpc	r19, r26
     cfe:	a0 e0       	ldi	r26, 0x00	; 0
     d00:	4a 07       	cpc	r20, r26
     d02:	a0 e4       	ldi	r26, 0x40	; 64
     d04:	5a 07       	cpc	r21, r26
     d06:	10 f0       	brcs	.+4      	; 0xd0c <__pack_f+0x10e>
     d08:	e1 e0       	ldi	r30, 0x01	; 1
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	79 01       	movw	r14, r18
     d0e:	8a 01       	movw	r16, r20
     d10:	27 c0       	rjmp	.+78     	; 0xd60 <__pack_f+0x162>
     d12:	60 38       	cpi	r22, 0x80	; 128
     d14:	71 05       	cpc	r23, r1
     d16:	64 f5       	brge	.+88     	; 0xd70 <__pack_f+0x172>
     d18:	fb 01       	movw	r30, r22
     d1a:	e1 58       	subi	r30, 0x81	; 129
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	d8 01       	movw	r26, r16
     d20:	c7 01       	movw	r24, r14
     d22:	8f 77       	andi	r24, 0x7F	; 127
     d24:	90 70       	andi	r25, 0x00	; 0
     d26:	a0 70       	andi	r26, 0x00	; 0
     d28:	b0 70       	andi	r27, 0x00	; 0
     d2a:	80 34       	cpi	r24, 0x40	; 64
     d2c:	91 05       	cpc	r25, r1
     d2e:	a1 05       	cpc	r26, r1
     d30:	b1 05       	cpc	r27, r1
     d32:	39 f4       	brne	.+14     	; 0xd42 <__pack_f+0x144>
     d34:	e7 fe       	sbrs	r14, 7
     d36:	0d c0       	rjmp	.+26     	; 0xd52 <__pack_f+0x154>
     d38:	80 e4       	ldi	r24, 0x40	; 64
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	a0 e0       	ldi	r26, 0x00	; 0
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	04 c0       	rjmp	.+8      	; 0xd4a <__pack_f+0x14c>
     d42:	8f e3       	ldi	r24, 0x3F	; 63
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	a0 e0       	ldi	r26, 0x00	; 0
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e8 0e       	add	r14, r24
     d4c:	f9 1e       	adc	r15, r25
     d4e:	0a 1f       	adc	r16, r26
     d50:	1b 1f       	adc	r17, r27
     d52:	17 ff       	sbrs	r17, 7
     d54:	05 c0       	rjmp	.+10     	; 0xd60 <__pack_f+0x162>
     d56:	16 95       	lsr	r17
     d58:	07 95       	ror	r16
     d5a:	f7 94       	ror	r15
     d5c:	e7 94       	ror	r14
     d5e:	31 96       	adiw	r30, 0x01	; 1
     d60:	87 e0       	ldi	r24, 0x07	; 7
     d62:	16 95       	lsr	r17
     d64:	07 95       	ror	r16
     d66:	f7 94       	ror	r15
     d68:	e7 94       	ror	r14
     d6a:	8a 95       	dec	r24
     d6c:	d1 f7       	brne	.-12     	; 0xd62 <__pack_f+0x164>
     d6e:	05 c0       	rjmp	.+10     	; 0xd7a <__pack_f+0x17c>
     d70:	ee 24       	eor	r14, r14
     d72:	ff 24       	eor	r15, r15
     d74:	87 01       	movw	r16, r14
     d76:	ef ef       	ldi	r30, 0xFF	; 255
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	6e 2f       	mov	r22, r30
     d7c:	67 95       	ror	r22
     d7e:	66 27       	eor	r22, r22
     d80:	67 95       	ror	r22
     d82:	90 2f       	mov	r25, r16
     d84:	9f 77       	andi	r25, 0x7F	; 127
     d86:	d7 94       	ror	r13
     d88:	dd 24       	eor	r13, r13
     d8a:	d7 94       	ror	r13
     d8c:	8e 2f       	mov	r24, r30
     d8e:	86 95       	lsr	r24
     d90:	49 2f       	mov	r20, r25
     d92:	46 2b       	or	r20, r22
     d94:	58 2f       	mov	r21, r24
     d96:	5d 29       	or	r21, r13
     d98:	b7 01       	movw	r22, r14
     d9a:	ca 01       	movw	r24, r20
     d9c:	1f 91       	pop	r17
     d9e:	0f 91       	pop	r16
     da0:	ff 90       	pop	r15
     da2:	ef 90       	pop	r14
     da4:	df 90       	pop	r13
     da6:	08 95       	ret

00000da8 <__unpack_f>:
     da8:	fc 01       	movw	r30, r24
     daa:	db 01       	movw	r26, r22
     dac:	40 81       	ld	r20, Z
     dae:	51 81       	ldd	r21, Z+1	; 0x01
     db0:	22 81       	ldd	r18, Z+2	; 0x02
     db2:	62 2f       	mov	r22, r18
     db4:	6f 77       	andi	r22, 0x7F	; 127
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	22 1f       	adc	r18, r18
     dba:	22 27       	eor	r18, r18
     dbc:	22 1f       	adc	r18, r18
     dbe:	93 81       	ldd	r25, Z+3	; 0x03
     dc0:	89 2f       	mov	r24, r25
     dc2:	88 0f       	add	r24, r24
     dc4:	82 2b       	or	r24, r18
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	99 1f       	adc	r25, r25
     dcc:	99 27       	eor	r25, r25
     dce:	99 1f       	adc	r25, r25
     dd0:	11 96       	adiw	r26, 0x01	; 1
     dd2:	9c 93       	st	X, r25
     dd4:	11 97       	sbiw	r26, 0x01	; 1
     dd6:	21 15       	cp	r18, r1
     dd8:	31 05       	cpc	r19, r1
     dda:	a9 f5       	brne	.+106    	; 0xe46 <__unpack_f+0x9e>
     ddc:	41 15       	cp	r20, r1
     dde:	51 05       	cpc	r21, r1
     de0:	61 05       	cpc	r22, r1
     de2:	71 05       	cpc	r23, r1
     de4:	11 f4       	brne	.+4      	; 0xdea <__unpack_f+0x42>
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	37 c0       	rjmp	.+110    	; 0xe58 <__unpack_f+0xb0>
     dea:	82 e8       	ldi	r24, 0x82	; 130
     dec:	9f ef       	ldi	r25, 0xFF	; 255
     dee:	13 96       	adiw	r26, 0x03	; 3
     df0:	9c 93       	st	X, r25
     df2:	8e 93       	st	-X, r24
     df4:	12 97       	sbiw	r26, 0x02	; 2
     df6:	9a 01       	movw	r18, r20
     df8:	ab 01       	movw	r20, r22
     dfa:	67 e0       	ldi	r22, 0x07	; 7
     dfc:	22 0f       	add	r18, r18
     dfe:	33 1f       	adc	r19, r19
     e00:	44 1f       	adc	r20, r20
     e02:	55 1f       	adc	r21, r21
     e04:	6a 95       	dec	r22
     e06:	d1 f7       	brne	.-12     	; 0xdfc <__unpack_f+0x54>
     e08:	83 e0       	ldi	r24, 0x03	; 3
     e0a:	8c 93       	st	X, r24
     e0c:	0d c0       	rjmp	.+26     	; 0xe28 <__unpack_f+0x80>
     e0e:	22 0f       	add	r18, r18
     e10:	33 1f       	adc	r19, r19
     e12:	44 1f       	adc	r20, r20
     e14:	55 1f       	adc	r21, r21
     e16:	12 96       	adiw	r26, 0x02	; 2
     e18:	8d 91       	ld	r24, X+
     e1a:	9c 91       	ld	r25, X
     e1c:	13 97       	sbiw	r26, 0x03	; 3
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	13 96       	adiw	r26, 0x03	; 3
     e22:	9c 93       	st	X, r25
     e24:	8e 93       	st	-X, r24
     e26:	12 97       	sbiw	r26, 0x02	; 2
     e28:	20 30       	cpi	r18, 0x00	; 0
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	38 07       	cpc	r19, r24
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	48 07       	cpc	r20, r24
     e32:	80 e4       	ldi	r24, 0x40	; 64
     e34:	58 07       	cpc	r21, r24
     e36:	58 f3       	brcs	.-42     	; 0xe0e <__unpack_f+0x66>
     e38:	14 96       	adiw	r26, 0x04	; 4
     e3a:	2d 93       	st	X+, r18
     e3c:	3d 93       	st	X+, r19
     e3e:	4d 93       	st	X+, r20
     e40:	5c 93       	st	X, r21
     e42:	17 97       	sbiw	r26, 0x07	; 7
     e44:	08 95       	ret
     e46:	2f 3f       	cpi	r18, 0xFF	; 255
     e48:	31 05       	cpc	r19, r1
     e4a:	79 f4       	brne	.+30     	; 0xe6a <__unpack_f+0xc2>
     e4c:	41 15       	cp	r20, r1
     e4e:	51 05       	cpc	r21, r1
     e50:	61 05       	cpc	r22, r1
     e52:	71 05       	cpc	r23, r1
     e54:	19 f4       	brne	.+6      	; 0xe5c <__unpack_f+0xb4>
     e56:	84 e0       	ldi	r24, 0x04	; 4
     e58:	8c 93       	st	X, r24
     e5a:	08 95       	ret
     e5c:	64 ff       	sbrs	r22, 4
     e5e:	03 c0       	rjmp	.+6      	; 0xe66 <__unpack_f+0xbe>
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	8c 93       	st	X, r24
     e64:	12 c0       	rjmp	.+36     	; 0xe8a <__unpack_f+0xe2>
     e66:	1c 92       	st	X, r1
     e68:	10 c0       	rjmp	.+32     	; 0xe8a <__unpack_f+0xe2>
     e6a:	2f 57       	subi	r18, 0x7F	; 127
     e6c:	30 40       	sbci	r19, 0x00	; 0
     e6e:	13 96       	adiw	r26, 0x03	; 3
     e70:	3c 93       	st	X, r19
     e72:	2e 93       	st	-X, r18
     e74:	12 97       	sbiw	r26, 0x02	; 2
     e76:	83 e0       	ldi	r24, 0x03	; 3
     e78:	8c 93       	st	X, r24
     e7a:	87 e0       	ldi	r24, 0x07	; 7
     e7c:	44 0f       	add	r20, r20
     e7e:	55 1f       	adc	r21, r21
     e80:	66 1f       	adc	r22, r22
     e82:	77 1f       	adc	r23, r23
     e84:	8a 95       	dec	r24
     e86:	d1 f7       	brne	.-12     	; 0xe7c <__unpack_f+0xd4>
     e88:	70 64       	ori	r23, 0x40	; 64
     e8a:	14 96       	adiw	r26, 0x04	; 4
     e8c:	4d 93       	st	X+, r20
     e8e:	5d 93       	st	X+, r21
     e90:	6d 93       	st	X+, r22
     e92:	7c 93       	st	X, r23
     e94:	17 97       	sbiw	r26, 0x07	; 7
     e96:	08 95       	ret

00000e98 <__fpcmp_parts_f>:
     e98:	1f 93       	push	r17
     e9a:	dc 01       	movw	r26, r24
     e9c:	fb 01       	movw	r30, r22
     e9e:	9c 91       	ld	r25, X
     ea0:	92 30       	cpi	r25, 0x02	; 2
     ea2:	08 f4       	brcc	.+2      	; 0xea6 <__fpcmp_parts_f+0xe>
     ea4:	47 c0       	rjmp	.+142    	; 0xf34 <__fpcmp_parts_f+0x9c>
     ea6:	80 81       	ld	r24, Z
     ea8:	82 30       	cpi	r24, 0x02	; 2
     eaa:	08 f4       	brcc	.+2      	; 0xeae <__fpcmp_parts_f+0x16>
     eac:	43 c0       	rjmp	.+134    	; 0xf34 <__fpcmp_parts_f+0x9c>
     eae:	94 30       	cpi	r25, 0x04	; 4
     eb0:	51 f4       	brne	.+20     	; 0xec6 <__fpcmp_parts_f+0x2e>
     eb2:	11 96       	adiw	r26, 0x01	; 1
     eb4:	1c 91       	ld	r17, X
     eb6:	84 30       	cpi	r24, 0x04	; 4
     eb8:	99 f5       	brne	.+102    	; 0xf20 <__fpcmp_parts_f+0x88>
     eba:	81 81       	ldd	r24, Z+1	; 0x01
     ebc:	68 2f       	mov	r22, r24
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	61 1b       	sub	r22, r17
     ec2:	71 09       	sbc	r23, r1
     ec4:	3f c0       	rjmp	.+126    	; 0xf44 <__fpcmp_parts_f+0xac>
     ec6:	84 30       	cpi	r24, 0x04	; 4
     ec8:	21 f0       	breq	.+8      	; 0xed2 <__fpcmp_parts_f+0x3a>
     eca:	92 30       	cpi	r25, 0x02	; 2
     ecc:	31 f4       	brne	.+12     	; 0xeda <__fpcmp_parts_f+0x42>
     ece:	82 30       	cpi	r24, 0x02	; 2
     ed0:	b9 f1       	breq	.+110    	; 0xf40 <__fpcmp_parts_f+0xa8>
     ed2:	81 81       	ldd	r24, Z+1	; 0x01
     ed4:	88 23       	and	r24, r24
     ed6:	89 f1       	breq	.+98     	; 0xf3a <__fpcmp_parts_f+0xa2>
     ed8:	2d c0       	rjmp	.+90     	; 0xf34 <__fpcmp_parts_f+0x9c>
     eda:	11 96       	adiw	r26, 0x01	; 1
     edc:	1c 91       	ld	r17, X
     ede:	11 97       	sbiw	r26, 0x01	; 1
     ee0:	82 30       	cpi	r24, 0x02	; 2
     ee2:	f1 f0       	breq	.+60     	; 0xf20 <__fpcmp_parts_f+0x88>
     ee4:	81 81       	ldd	r24, Z+1	; 0x01
     ee6:	18 17       	cp	r17, r24
     ee8:	d9 f4       	brne	.+54     	; 0xf20 <__fpcmp_parts_f+0x88>
     eea:	12 96       	adiw	r26, 0x02	; 2
     eec:	2d 91       	ld	r18, X+
     eee:	3c 91       	ld	r19, X
     ef0:	13 97       	sbiw	r26, 0x03	; 3
     ef2:	82 81       	ldd	r24, Z+2	; 0x02
     ef4:	93 81       	ldd	r25, Z+3	; 0x03
     ef6:	82 17       	cp	r24, r18
     ef8:	93 07       	cpc	r25, r19
     efa:	94 f0       	brlt	.+36     	; 0xf20 <__fpcmp_parts_f+0x88>
     efc:	28 17       	cp	r18, r24
     efe:	39 07       	cpc	r19, r25
     f00:	bc f0       	brlt	.+46     	; 0xf30 <__fpcmp_parts_f+0x98>
     f02:	14 96       	adiw	r26, 0x04	; 4
     f04:	8d 91       	ld	r24, X+
     f06:	9d 91       	ld	r25, X+
     f08:	0d 90       	ld	r0, X+
     f0a:	bc 91       	ld	r27, X
     f0c:	a0 2d       	mov	r26, r0
     f0e:	24 81       	ldd	r18, Z+4	; 0x04
     f10:	35 81       	ldd	r19, Z+5	; 0x05
     f12:	46 81       	ldd	r20, Z+6	; 0x06
     f14:	57 81       	ldd	r21, Z+7	; 0x07
     f16:	28 17       	cp	r18, r24
     f18:	39 07       	cpc	r19, r25
     f1a:	4a 07       	cpc	r20, r26
     f1c:	5b 07       	cpc	r21, r27
     f1e:	18 f4       	brcc	.+6      	; 0xf26 <__fpcmp_parts_f+0x8e>
     f20:	11 23       	and	r17, r17
     f22:	41 f0       	breq	.+16     	; 0xf34 <__fpcmp_parts_f+0x9c>
     f24:	0a c0       	rjmp	.+20     	; 0xf3a <__fpcmp_parts_f+0xa2>
     f26:	82 17       	cp	r24, r18
     f28:	93 07       	cpc	r25, r19
     f2a:	a4 07       	cpc	r26, r20
     f2c:	b5 07       	cpc	r27, r21
     f2e:	40 f4       	brcc	.+16     	; 0xf40 <__fpcmp_parts_f+0xa8>
     f30:	11 23       	and	r17, r17
     f32:	19 f0       	breq	.+6      	; 0xf3a <__fpcmp_parts_f+0xa2>
     f34:	61 e0       	ldi	r22, 0x01	; 1
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	05 c0       	rjmp	.+10     	; 0xf44 <__fpcmp_parts_f+0xac>
     f3a:	6f ef       	ldi	r22, 0xFF	; 255
     f3c:	7f ef       	ldi	r23, 0xFF	; 255
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <__fpcmp_parts_f+0xac>
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	cb 01       	movw	r24, r22
     f46:	1f 91       	pop	r17
     f48:	08 95       	ret

00000f4a <USART_Init>:
#include "avr/io.h" /* To use the IO Ports Registers */
#include <util/delay.h>


// Initializes and enables the USART Module to start functionality
void USART_Init(uint32 baudRate) {
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	00 d0       	rcall	.+0      	; 0xf50 <USART_Init+0x6>
     f50:	00 d0       	rcall	.+0      	; 0xf52 <USART_Init+0x8>
     f52:	00 d0       	rcall	.+0      	; 0xf54 <USART_Init+0xa>
     f54:	cd b7       	in	r28, 0x3d	; 61
     f56:	de b7       	in	r29, 0x3e	; 62
     f58:	6b 83       	std	Y+3, r22	; 0x03
     f5a:	7c 83       	std	Y+4, r23	; 0x04
     f5c:	8d 83       	std	Y+5, r24	; 0x05
     f5e:	9e 83       	std	Y+6, r25	; 0x06

	// To initialize this Init Function, i need to:
	// Tweak the Frame
	// Set the baud rate

	uint16 UBBR_Value = 0;
     f60:	1a 82       	std	Y+2, r1	; 0x02
     f62:	19 82       	std	Y+1, r1	; 0x01

	SET_BIT(UCSRA, U2X);
     f64:	ab e2       	ldi	r26, 0x2B	; 43
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	eb e2       	ldi	r30, 0x2B	; 43
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	82 60       	ori	r24, 0x02	; 2
     f70:	8c 93       	st	X, r24

	SET_BIT(UCSRB, TXEN);
     f72:	aa e2       	ldi	r26, 0x2A	; 42
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	ea e2       	ldi	r30, 0x2A	; 42
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	88 60       	ori	r24, 0x08	; 8
     f7e:	8c 93       	st	X, r24
	SET_BIT(UCSRB, RXEN);
     f80:	aa e2       	ldi	r26, 0x2A	; 42
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	ea e2       	ldi	r30, 0x2A	; 42
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	80 61       	ori	r24, 0x10	; 16
     f8c:	8c 93       	st	X, r24

	SET_BIT(UCSRC, URSEL);
     f8e:	a0 e4       	ldi	r26, 0x40	; 64
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	e0 e4       	ldi	r30, 0x40	; 64
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	80 68       	ori	r24, 0x80	; 128
     f9a:	8c 93       	st	X, r24
	CLR_BIT(UCSRC, UMSEL);
     f9c:	a0 e4       	ldi	r26, 0x40	; 64
     f9e:	b0 e0       	ldi	r27, 0x00	; 0
     fa0:	e0 e4       	ldi	r30, 0x40	; 64
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	8f 7b       	andi	r24, 0xBF	; 191
     fa8:	8c 93       	st	X, r24
	SET_BIT(UCSRC, TXEN);
     faa:	a0 e4       	ldi	r26, 0x40	; 64
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	e0 e4       	ldi	r30, 0x40	; 64
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	88 60       	ori	r24, 0x08	; 8
     fb6:	8c 93       	st	X, r24

	CLR_BIT(UCSRC, UCSZ2);
     fb8:	a0 e4       	ldi	r26, 0x40	; 64
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	e0 e4       	ldi	r30, 0x40	; 64
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	8b 7f       	andi	r24, 0xFB	; 251
     fc4:	8c 93       	st	X, r24
	SET_BIT(UCSRC, UCSZ1);
     fc6:	a0 e4       	ldi	r26, 0x40	; 64
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	e0 e4       	ldi	r30, 0x40	; 64
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	84 60       	ori	r24, 0x04	; 4
     fd2:	8c 93       	st	X, r24
	SET_BIT(UCSRC, UCSZ0);
     fd4:	a0 e4       	ldi	r26, 0x40	; 64
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	e0 e4       	ldi	r30, 0x40	; 64
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	82 60       	ori	r24, 0x02	; 2
     fe0:	8c 93       	st	X, r24

	// UBBRH = 0;
	// UBBRL = 207;
	// (0000) (1100 1111) 12 bits, (0000) is for UBBRH, (1100 1111) if for UBBRL

	UBBR_Value = (uint16) ( ( (F_CPU) / (8 * baudRate * 8UL) ) - 1 );
     fe2:	8b 81       	ldd	r24, Y+3	; 0x03
     fe4:	9c 81       	ldd	r25, Y+4	; 0x04
     fe6:	ad 81       	ldd	r26, Y+5	; 0x05
     fe8:	be 81       	ldd	r27, Y+6	; 0x06
     fea:	88 0f       	add	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	aa 1f       	adc	r26, r26
     ff0:	bb 1f       	adc	r27, r27
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	aa 1f       	adc	r26, r26
     ff8:	bb 1f       	adc	r27, r27
     ffa:	88 0f       	add	r24, r24
     ffc:	99 1f       	adc	r25, r25
     ffe:	aa 1f       	adc	r26, r26
    1000:	bb 1f       	adc	r27, r27
    1002:	88 0f       	add	r24, r24
    1004:	99 1f       	adc	r25, r25
    1006:	aa 1f       	adc	r26, r26
    1008:	bb 1f       	adc	r27, r27
    100a:	88 0f       	add	r24, r24
    100c:	99 1f       	adc	r25, r25
    100e:	aa 1f       	adc	r26, r26
    1010:	bb 1f       	adc	r27, r27
    1012:	88 0f       	add	r24, r24
    1014:	99 1f       	adc	r25, r25
    1016:	aa 1f       	adc	r26, r26
    1018:	bb 1f       	adc	r27, r27
    101a:	9c 01       	movw	r18, r24
    101c:	ad 01       	movw	r20, r26
    101e:	80 e0       	ldi	r24, 0x00	; 0
    1020:	92 e1       	ldi	r25, 0x12	; 18
    1022:	aa e7       	ldi	r26, 0x7A	; 122
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	bc 01       	movw	r22, r24
    1028:	cd 01       	movw	r24, r26
    102a:	0e 94 ad 20 	call	0x415a	; 0x415a <__udivmodsi4>
    102e:	da 01       	movw	r26, r20
    1030:	c9 01       	movw	r24, r18
    1032:	01 97       	sbiw	r24, 0x01	; 1
    1034:	9a 83       	std	Y+2, r25	; 0x02
    1036:	89 83       	std	Y+1, r24	; 0x01
	UBRRH = UBBR_Value >> 8;
    1038:	e0 e4       	ldi	r30, 0x40	; 64
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	89 81       	ldd	r24, Y+1	; 0x01
    103e:	9a 81       	ldd	r25, Y+2	; 0x02
    1040:	89 2f       	mov	r24, r25
    1042:	99 27       	eor	r25, r25
    1044:	80 83       	st	Z, r24
	// Because I want the 4 Zeroes in it

	UBRRL = UBBR_Value;
    1046:	e9 e2       	ldi	r30, 0x29	; 41
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	89 81       	ldd	r24, Y+1	; 0x01
    104c:	80 83       	st	Z, r24
	// Because I want the actual value

}
    104e:	26 96       	adiw	r28, 0x06	; 6
    1050:	0f b6       	in	r0, 0x3f	; 63
    1052:	f8 94       	cli
    1054:	de bf       	out	0x3e, r29	; 62
    1056:	0f be       	out	0x3f, r0	; 63
    1058:	cd bf       	out	0x3d, r28	; 61
    105a:	cf 91       	pop	r28
    105c:	df 91       	pop	r29
    105e:	08 95       	ret

00001060 <USART_sendByte>:


// Responsible for the USART to send a byte
void USART_sendByte(const uint8 data) {
    1060:	df 93       	push	r29
    1062:	cf 93       	push	r28
    1064:	0f 92       	push	r0
    1066:	cd b7       	in	r28, 0x3d	; 61
    1068:	de b7       	in	r29, 0x3e	; 62
    106a:	89 83       	std	Y+1, r24	; 0x01
	  *  Bit 5 – UDRE: USART Data Register Empty
	  *
	  *  UDRE flag is set when the TX Buffer (UDR) is empty and ready
	  *  for transmitting a new byte waiting untill this flag is set to '1'
	  */
	while(BIT_IS_CLR(UCSRA,UDRE)) {
    106c:	eb e2       	ldi	r30, 0x2B	; 43
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	88 2f       	mov	r24, r24
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	80 72       	andi	r24, 0x20	; 32
    1078:	90 70       	andi	r25, 0x00	; 0
    107a:	00 97       	sbiw	r24, 0x00	; 0
    107c:	b9 f3       	breq	.-18     	; 0x106c <USART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    107e:	ec e2       	ldi	r30, 0x2C	; 44
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	89 81       	ldd	r24, Y+1	; 0x01
    1084:	80 83       	st	Z, r24

	} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	// This is waiting for the flag to be set to '0' to know that I received data
	*******************************************************************/
}
    1086:	0f 90       	pop	r0
    1088:	cf 91       	pop	r28
    108a:	df 91       	pop	r29
    108c:	08 95       	ret

0000108e <USART_receiveByte>:


// Responsible for the USART to receive a byte
uint8 USART_receiveByte(void) {
    108e:	df 93       	push	r29
    1090:	cf 93       	push	r28
    1092:	cd b7       	in	r28, 0x3d	; 61
    1094:	de b7       	in	r29, 0x3e	; 62
	/* UCSRA - USART Control and Status Register A
	  *  Bit 7 – RXC: USART Receive Complete, when it receives data, the flag = 0
	  */

	while ( BIT_IS_CLR(UCSRA, RXC) );
    1096:	eb e2       	ldi	r30, 0x2B	; 43
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	88 23       	and	r24, r24
    109e:	dc f7       	brge	.-10     	; 0x1096 <USART_receiveByte+0x8>
	// This is waiting for the flag to be set to '0' to know that I received data

	// When reading
	return UDR;
    10a0:	ec e2       	ldi	r30, 0x2C	; 44
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
}
    10a6:	cf 91       	pop	r28
    10a8:	df 91       	pop	r29
    10aa:	08 95       	ret

000010ac <USART_sendString>:


// Responsible for the USART to send an array of bytes, a string
void USART_sendString(const uint8 *str) {
    10ac:	df 93       	push	r29
    10ae:	cf 93       	push	r28
    10b0:	00 d0       	rcall	.+0      	; 0x10b2 <USART_sendString+0x6>
    10b2:	0f 92       	push	r0
    10b4:	cd b7       	in	r28, 0x3d	; 61
    10b6:	de b7       	in	r29, 0x3e	; 62
    10b8:	9b 83       	std	Y+3, r25	; 0x03
    10ba:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    10bc:	19 82       	std	Y+1, r1	; 0x01
    10be:	0e c0       	rjmp	.+28     	; 0x10dc <USART_sendString+0x30>
	while (str[i] != '\0') {
		USART_sendByte(str[i]);
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	28 2f       	mov	r18, r24
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	8a 81       	ldd	r24, Y+2	; 0x02
    10c8:	9b 81       	ldd	r25, Y+3	; 0x03
    10ca:	fc 01       	movw	r30, r24
    10cc:	e2 0f       	add	r30, r18
    10ce:	f3 1f       	adc	r31, r19
    10d0:	80 81       	ld	r24, Z
    10d2:	0e 94 30 08 	call	0x1060	; 0x1060 <USART_sendByte>
		i++;
    10d6:	89 81       	ldd	r24, Y+1	; 0x01
    10d8:	8f 5f       	subi	r24, 0xFF	; 255
    10da:	89 83       	std	Y+1, r24	; 0x01


// Responsible for the USART to send an array of bytes, a string
void USART_sendString(const uint8 *str) {
	uint8 i = 0;
	while (str[i] != '\0') {
    10dc:	89 81       	ldd	r24, Y+1	; 0x01
    10de:	28 2f       	mov	r18, r24
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	8a 81       	ldd	r24, Y+2	; 0x02
    10e4:	9b 81       	ldd	r25, Y+3	; 0x03
    10e6:	fc 01       	movw	r30, r24
    10e8:	e2 0f       	add	r30, r18
    10ea:	f3 1f       	adc	r31, r19
    10ec:	80 81       	ld	r24, Z
    10ee:	88 23       	and	r24, r24
    10f0:	39 f7       	brne	.-50     	; 0x10c0 <USART_sendString+0x14>
		USART_sendByte(str[i]);
		i++;
	}
}
    10f2:	0f 90       	pop	r0
    10f4:	0f 90       	pop	r0
    10f6:	0f 90       	pop	r0
    10f8:	cf 91       	pop	r28
    10fa:	df 91       	pop	r29
    10fc:	08 95       	ret

000010fe <USART_receiveString>:


// Responsible for the USART to receive an array of bytes, a string
void USART_receiveString(uint8 *str) {
    10fe:	0f 93       	push	r16
    1100:	1f 93       	push	r17
    1102:	df 93       	push	r29
    1104:	cf 93       	push	r28
    1106:	00 d0       	rcall	.+0      	; 0x1108 <USART_receiveString+0xa>
    1108:	0f 92       	push	r0
    110a:	cd b7       	in	r28, 0x3d	; 61
    110c:	de b7       	in	r29, 0x3e	; 62
    110e:	9b 83       	std	Y+3, r25	; 0x03
    1110:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1112:	19 82       	std	Y+1, r1	; 0x01
	str[i] = USART_receiveByte();
    1114:	89 81       	ldd	r24, Y+1	; 0x01
    1116:	28 2f       	mov	r18, r24
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	8a 81       	ldd	r24, Y+2	; 0x02
    111c:	9b 81       	ldd	r25, Y+3	; 0x03
    111e:	8c 01       	movw	r16, r24
    1120:	02 0f       	add	r16, r18
    1122:	13 1f       	adc	r17, r19
    1124:	0e 94 47 08 	call	0x108e	; 0x108e <USART_receiveByte>
    1128:	f8 01       	movw	r30, r16
    112a:	80 83       	st	Z, r24
    112c:	0f c0       	rjmp	.+30     	; 0x114c <USART_receiveString+0x4e>

	while (str[i] != '#') {
		i++;
    112e:	89 81       	ldd	r24, Y+1	; 0x01
    1130:	8f 5f       	subi	r24, 0xFF	; 255
    1132:	89 83       	std	Y+1, r24	; 0x01
		str[i] = USART_receiveByte();
    1134:	89 81       	ldd	r24, Y+1	; 0x01
    1136:	28 2f       	mov	r18, r24
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	8a 81       	ldd	r24, Y+2	; 0x02
    113c:	9b 81       	ldd	r25, Y+3	; 0x03
    113e:	8c 01       	movw	r16, r24
    1140:	02 0f       	add	r16, r18
    1142:	13 1f       	adc	r17, r19
    1144:	0e 94 47 08 	call	0x108e	; 0x108e <USART_receiveByte>
    1148:	f8 01       	movw	r30, r16
    114a:	80 83       	st	Z, r24
// Responsible for the USART to receive an array of bytes, a string
void USART_receiveString(uint8 *str) {
	uint8 i = 0;
	str[i] = USART_receiveByte();

	while (str[i] != '#') {
    114c:	89 81       	ldd	r24, Y+1	; 0x01
    114e:	28 2f       	mov	r18, r24
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	8a 81       	ldd	r24, Y+2	; 0x02
    1154:	9b 81       	ldd	r25, Y+3	; 0x03
    1156:	fc 01       	movw	r30, r24
    1158:	e2 0f       	add	r30, r18
    115a:	f3 1f       	adc	r31, r19
    115c:	80 81       	ld	r24, Z
    115e:	83 32       	cpi	r24, 0x23	; 35
    1160:	31 f7       	brne	.-52     	; 0x112e <USART_receiveString+0x30>
		i++;
		str[i] = USART_receiveByte();
	}
	str[i] = '\0'; // replacing the '#' with '\0'
    1162:	89 81       	ldd	r24, Y+1	; 0x01
    1164:	28 2f       	mov	r18, r24
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	8a 81       	ldd	r24, Y+2	; 0x02
    116a:	9b 81       	ldd	r25, Y+3	; 0x03
    116c:	fc 01       	movw	r30, r24
    116e:	e2 0f       	add	r30, r18
    1170:	f3 1f       	adc	r31, r19
    1172:	10 82       	st	Z, r1
}
    1174:	0f 90       	pop	r0
    1176:	0f 90       	pop	r0
    1178:	0f 90       	pop	r0
    117a:	cf 91       	pop	r28
    117c:	df 91       	pop	r29
    117e:	1f 91       	pop	r17
    1180:	0f 91       	pop	r16
    1182:	08 95       	ret

00001184 <Timer0_setPrescaler>:

/*******************************************************************************
 *                              					Module Implementation                           					  *
 *******************************************************************************/

void Timer0_setPrescaler(void) {
    1184:	df 93       	push	r29
    1186:	cf 93       	push	r28
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
#elif (PRESCALER_VALUE == PRESCALER_256)
	SET_BIT(TCCR0, CS02);
#elif (PRESCALER_VALUE == PRESCALER_64)
	TCCR0 = (1<<CS01) | (1<<CS00);
#elif (PRESCALER_VALUE == PRESCALER_8)
	SET_BIT(TCCR0, CS01);
    118c:	a3 e5       	ldi	r26, 0x53	; 83
    118e:	b0 e0       	ldi	r27, 0x00	; 0
    1190:	e3 e5       	ldi	r30, 0x53	; 83
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	82 60       	ori	r24, 0x02	; 2
    1198:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS01);
	CLR_BIT(TCCR0, CS02);
#else
	TCCR0 = (1<<CS02) | (1<<CS00);
#endif
}
    119a:	cf 91       	pop	r28
    119c:	df 91       	pop	r29
    119e:	08 95       	ret

000011a0 <Timer0_setMode>:

void Timer0_setMode(void) {
    11a0:	df 93       	push	r29
    11a2:	cf 93       	push	r28
    11a4:	cd b7       	in	r28, 0x3d	; 61
    11a6:	de b7       	in	r29, 0x3e	; 62
#if (TIMER_MODE == NORMAL_MODE)
	Timer0_normalMode();
#elif (TIMER_MODE == COMPARE_MODE)
	Timer0_compareMode();
    11a8:	0e 94 0a 09 	call	0x1214	; 0x1214 <Timer0_compareMode>
#elif (TIMER_MODE == PWM_MODE)
	Timer0_fastPWMMode();
#else
	Timer0_normalMode();
#endif
}
    11ac:	cf 91       	pop	r28
    11ae:	df 91       	pop	r29
    11b0:	08 95       	ret

000011b2 <Timer0_normalMode>:

void Timer0_normalMode(void) {
    11b2:	df 93       	push	r29
    11b4:	cf 93       	push	r28
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0, FOC0);
    11ba:	a3 e5       	ldi	r26, 0x53	; 83
    11bc:	b0 e0       	ldi	r27, 0x00	; 0
    11be:	e3 e5       	ldi	r30, 0x53	; 83
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	80 68       	ori	r24, 0x80	; 128
    11c6:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, WGM00);
    11c8:	a3 e5       	ldi	r26, 0x53	; 83
    11ca:	b0 e0       	ldi	r27, 0x00	; 0
    11cc:	e3 e5       	ldi	r30, 0x53	; 83
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	8f 7b       	andi	r24, 0xBF	; 191
    11d4:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, WGM01);
    11d6:	a3 e5       	ldi	r26, 0x53	; 83
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	e3 e5       	ldi	r30, 0x53	; 83
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	87 7f       	andi	r24, 0xF7	; 247
    11e2:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, COM01);
    11e4:	a3 e5       	ldi	r26, 0x53	; 83
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	e3 e5       	ldi	r30, 0x53	; 83
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	8f 7d       	andi	r24, 0xDF	; 223
    11f0:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, COM00);
    11f2:	a3 e5       	ldi	r26, 0x53	; 83
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	e3 e5       	ldi	r30, 0x53	; 83
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	8f 7e       	andi	r24, 0xEF	; 239
    11fe:	8c 93       	st	X, r24
#if (INTERRUPT_MODE == INTERRUPT_ENABLE)
	SET_BIT(TIMSK, TOIE0);
    1200:	a9 e5       	ldi	r26, 0x59	; 89
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	e9 e5       	ldi	r30, 0x59	; 89
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	81 60       	ori	r24, 0x01	; 1
    120c:	8c 93       	st	X, r24
#elif (INTERRUPT_MODE == INTERRUPT_DISABLE)
	CLR_BIT(TIMSK, TOIE0);
#endif
}
    120e:	cf 91       	pop	r28
    1210:	df 91       	pop	r29
    1212:	08 95       	ret

00001214 <Timer0_compareMode>:

void Timer0_compareMode(void) {
    1214:	df 93       	push	r29
    1216:	cf 93       	push	r28
    1218:	cd b7       	in	r28, 0x3d	; 61
    121a:	de b7       	in	r29, 0x3e	; 62
	//GPIO_setupPinDirection(PORT_B, PIN_3, PIN_OUTPUT);
	SET_BIT(TCCR0, FOC0);
    121c:	a3 e5       	ldi	r26, 0x53	; 83
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	e3 e5       	ldi	r30, 0x53	; 83
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	80 68       	ori	r24, 0x80	; 128
    1228:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, WGM00);
    122a:	a3 e5       	ldi	r26, 0x53	; 83
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	e3 e5       	ldi	r30, 0x53	; 83
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	8f 7b       	andi	r24, 0xBF	; 191
    1236:	8c 93       	st	X, r24
	SET_BIT(TCCR0, WGM01);
    1238:	a3 e5       	ldi	r26, 0x53	; 83
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	e3 e5       	ldi	r30, 0x53	; 83
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	88 60       	ori	r24, 0x08	; 8
    1244:	8c 93       	st	X, r24
#if (INTERRUPT_MODE == INTERRUPT_ENABLE)
	SET_BIT(TIMSK, OCIE0);
    1246:	a9 e5       	ldi	r26, 0x59	; 89
    1248:	b0 e0       	ldi	r27, 0x00	; 0
    124a:	e9 e5       	ldi	r30, 0x59	; 89
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	82 60       	ori	r24, 0x02	; 2
    1252:	8c 93       	st	X, r24
	SET_BIT(SREG, 7); // Bit 7 – i bit: Global Interrupt Enable
    1254:	af e5       	ldi	r26, 0x5F	; 95
    1256:	b0 e0       	ldi	r27, 0x00	; 0
    1258:	ef e5       	ldi	r30, 0x5F	; 95
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	80 68       	ori	r24, 0x80	; 128
    1260:	8c 93       	st	X, r24
#elif (INTERRUPT_MODE == INTERRUPT_DISABLE)
	CLR_BIT(TIMSK, OCIE0);
#endif

#if (CTC_MODE == CTC_NORMAL)
	CLR_BIT(TCCR0, COM01);
    1262:	a3 e5       	ldi	r26, 0x53	; 83
    1264:	b0 e0       	ldi	r27, 0x00	; 0
    1266:	e3 e5       	ldi	r30, 0x53	; 83
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	80 81       	ld	r24, Z
    126c:	8f 7d       	andi	r24, 0xDF	; 223
    126e:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, COM00);
    1270:	a3 e5       	ldi	r26, 0x53	; 83
    1272:	b0 e0       	ldi	r27, 0x00	; 0
    1274:	e3 e5       	ldi	r30, 0x53	; 83
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	80 81       	ld	r24, Z
    127a:	8f 7e       	andi	r24, 0xEF	; 239
    127c:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, COM00);
#elif (CTC_MODE == CTC_SET)
	SET_BIT(TCCR0, COM01);
	SET_BIT(TCCR0, COM00);
#endif
}
    127e:	cf 91       	pop	r28
    1280:	df 91       	pop	r29
    1282:	08 95       	ret

00001284 <Timer0_fastPWMMode>:

void Timer0_fastPWMMode(void) {
    1284:	df 93       	push	r29
    1286:	cf 93       	push	r28
    1288:	cd b7       	in	r28, 0x3d	; 61
    128a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR0, FOC0);
    128c:	a3 e5       	ldi	r26, 0x53	; 83
    128e:	b0 e0       	ldi	r27, 0x00	; 0
    1290:	e3 e5       	ldi	r30, 0x53	; 83
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	80 81       	ld	r24, Z
    1296:	8f 77       	andi	r24, 0x7F	; 127
    1298:	8c 93       	st	X, r24
	SET_BIT(TCCR0, WGM00);
    129a:	a3 e5       	ldi	r26, 0x53	; 83
    129c:	b0 e0       	ldi	r27, 0x00	; 0
    129e:	e3 e5       	ldi	r30, 0x53	; 83
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	80 64       	ori	r24, 0x40	; 64
    12a6:	8c 93       	st	X, r24
	SET_BIT(TCCR0, WGM01);
    12a8:	a3 e5       	ldi	r26, 0x53	; 83
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	e3 e5       	ldi	r30, 0x53	; 83
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	88 60       	ori	r24, 0x08	; 8
    12b4:	8c 93       	st	X, r24
#if (FASTPWM_MODE == FASTPWM_NORMAL)
	CLR_BIT(TCCR0, COM01);
	CLR_BIT(TCCR0, COM00);
#elif (FASTPWM_MODE == FASTPWM_NOINVERT)
	SET_BIT(TCCR0, COM01);
    12b6:	a3 e5       	ldi	r26, 0x53	; 83
    12b8:	b0 e0       	ldi	r27, 0x00	; 0
    12ba:	e3 e5       	ldi	r30, 0x53	; 83
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	80 62       	ori	r24, 0x20	; 32
    12c2:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, COM00);
    12c4:	a3 e5       	ldi	r26, 0x53	; 83
    12c6:	b0 e0       	ldi	r27, 0x00	; 0
    12c8:	e3 e5       	ldi	r30, 0x53	; 83
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	8f 7e       	andi	r24, 0xEF	; 239
    12d0:	8c 93       	st	X, r24
#elif (FASTPWM_MODE == FASTPWM_INVERT)
	SET_BIT(TCCR0, COM01);
	SET_BIT(TCCR0, COM00);
#endif
}
    12d2:	cf 91       	pop	r28
    12d4:	df 91       	pop	r29
    12d6:	08 95       	ret

000012d8 <Timer1_setPrescaler>:



void Timer1_setPrescaler(void) {
    12d8:	df 93       	push	r29
    12da:	cf 93       	push	r28
    12dc:	cd b7       	in	r28, 0x3d	; 61
    12de:	de b7       	in	r29, 0x3e	; 62
			SET_BIT(TCCR1B, CS11);
			CLR_BIT(TCCR1B, CS12);
		break;

		case PRESCALER_8:
			CLR_BIT(TCCR1B, CS10);
    12e0:	ae e4       	ldi	r26, 0x4E	; 78
    12e2:	b0 e0       	ldi	r27, 0x00	; 0
    12e4:	ee e4       	ldi	r30, 0x4E	; 78
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	8e 7f       	andi	r24, 0xFE	; 254
    12ec:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, CS11);
    12ee:	ae e4       	ldi	r26, 0x4E	; 78
    12f0:	b0 e0       	ldi	r27, 0x00	; 0
    12f2:	ee e4       	ldi	r30, 0x4E	; 78
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	80 81       	ld	r24, Z
    12f8:	82 60       	ori	r24, 0x02	; 2
    12fa:	8c 93       	st	X, r24
			CLR_BIT(TCCR1B, CS12);
    12fc:	ae e4       	ldi	r26, 0x4E	; 78
    12fe:	b0 e0       	ldi	r27, 0x00	; 0
    1300:	ee e4       	ldi	r30, 0x4E	; 78
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	8b 7f       	andi	r24, 0xFB	; 251
    1308:	8c 93       	st	X, r24
			SET_BIT(TCCR1B, CS10);
			CLR_BIT(TCCR1B, CS11);
			CLR_BIT(TCCR1B, CS12);
		break;
	}
}
    130a:	cf 91       	pop	r28
    130c:	df 91       	pop	r29
    130e:	08 95       	ret

00001310 <Timer1_setMode>:

void Timer1_setMode(void) {
    1310:	df 93       	push	r29
    1312:	cf 93       	push	r28
    1314:	cd b7       	in	r28, 0x3d	; 61
    1316:	de b7       	in	r29, 0x3e	; 62

		default:
			Timer1_normalMode();
		break;
	}*/
}
    1318:	cf 91       	pop	r28
    131a:	df 91       	pop	r29
    131c:	08 95       	ret

0000131e <Timer2_setPrescaler>:
#endif
}
*/


void Timer2_setPrescaler(void) {
    131e:	df 93       	push	r29
    1320:	cf 93       	push	r28
    1322:	cd b7       	in	r28, 0x3d	; 61
    1324:	de b7       	in	r29, 0x3e	; 62
			SET_BIT(TCCR2, CS21);
			CLR_BIT(TCCR2, CS22);
		break;

		case PRESCALER_8:
			CLR_BIT(TCCR2, CS20);
    1326:	a5 e4       	ldi	r26, 0x45	; 69
    1328:	b0 e0       	ldi	r27, 0x00	; 0
    132a:	e5 e4       	ldi	r30, 0x45	; 69
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	8e 7f       	andi	r24, 0xFE	; 254
    1332:	8c 93       	st	X, r24
			SET_BIT(TCCR2, CS21);
    1334:	a5 e4       	ldi	r26, 0x45	; 69
    1336:	b0 e0       	ldi	r27, 0x00	; 0
    1338:	e5 e4       	ldi	r30, 0x45	; 69
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	82 60       	ori	r24, 0x02	; 2
    1340:	8c 93       	st	X, r24
			CLR_BIT(TCCR2, CS22);
    1342:	a5 e4       	ldi	r26, 0x45	; 69
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	e5 e4       	ldi	r30, 0x45	; 69
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	8b 7f       	andi	r24, 0xFB	; 251
    134e:	8c 93       	st	X, r24
			SET_BIT(TCCR2, CS20);
			CLR_BIT(TCCR2, CS21);
			CLR_BIT(TCCR2, CS22);
		break;
	}
}
    1350:	cf 91       	pop	r28
    1352:	df 91       	pop	r29
    1354:	08 95       	ret

00001356 <Timer2_setMode>:

void Timer2_setMode(void) {
    1356:	df 93       	push	r29
    1358:	cf 93       	push	r28
    135a:	cd b7       	in	r28, 0x3d	; 61
    135c:	de b7       	in	r29, 0x3e	; 62

		default:
			Timer2_normalMode();
		break;
	}*/
}
    135e:	cf 91       	pop	r28
    1360:	df 91       	pop	r29
    1362:	08 95       	ret

00001364 <Timer0_Init>:
}
*/

// Initializes and enables the Master mode for the TWI Module to start functionality
#if (TIMER_SELECT == TIMER0)
	void Timer0_Init() {
    1364:	df 93       	push	r29
    1366:	cf 93       	push	r28
    1368:	cd b7       	in	r28, 0x3d	; 61
    136a:	de b7       	in	r29, 0x3e	; 62
		Timer0_setPrescaler();
    136c:	0e 94 c2 08 	call	0x1184	; 0x1184 <Timer0_setPrescaler>
		Timer0_setMode();
    1370:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <Timer0_setMode>
	}
    1374:	cf 91       	pop	r28
    1376:	df 91       	pop	r29
    1378:	08 95       	ret

0000137a <Timer_setNormalDelay>:
		Timer2_setMode();
	}
#endif


void Timer_setNormalDelay(float32 timeDelay) {
    137a:	df 93       	push	r29
    137c:	cf 93       	push	r28
    137e:	cd b7       	in	r28, 0x3d	; 61
    1380:	de b7       	in	r29, 0x3e	; 62
    1382:	61 97       	sbiw	r28, 0x11	; 17
    1384:	0f b6       	in	r0, 0x3f	; 63
    1386:	f8 94       	cli
    1388:	de bf       	out	0x3e, r29	; 62
    138a:	0f be       	out	0x3f, r0	; 63
    138c:	cd bf       	out	0x3d, r28	; 61
    138e:	6e 87       	std	Y+14, r22	; 0x0e
    1390:	7f 87       	std	Y+15, r23	; 0x0f
    1392:	88 8b       	std	Y+16, r24	; 0x10
    1394:	99 8b       	std	Y+17, r25	; 0x11
	// Compares overflow counter with overflow amount in a loop
	// Executes a busy wait function
	// Then clears the TIFR by setting it
	// Iterates Overflow Counter

	float32 	tickTime 					= 0;
    1396:	80 e0       	ldi	r24, 0x00	; 0
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	a0 e0       	ldi	r26, 0x00	; 0
    139c:	b0 e0       	ldi	r27, 0x00	; 0
    139e:	8a 87       	std	Y+10, r24	; 0x0a
    13a0:	9b 87       	std	Y+11, r25	; 0x0b
    13a2:	ac 87       	std	Y+12, r26	; 0x0c
    13a4:	bd 87       	std	Y+13, r27	; 0x0d
	float32 	maxDelayTime 		= 0;
    13a6:	80 e0       	ldi	r24, 0x00	; 0
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	a0 e0       	ldi	r26, 0x00	; 0
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    13ae:	8e 83       	std	Y+6, r24	; 0x06
    13b0:	9f 83       	std	Y+7, r25	; 0x07
    13b2:	a8 87       	std	Y+8, r26	; 0x08
    13b4:	b9 87       	std	Y+9, r27	; 0x09
	float32 	overflowAmount 	= 0;
    13b6:	80 e0       	ldi	r24, 0x00	; 0
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	a0 e0       	ldi	r26, 0x00	; 0
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	8a 83       	std	Y+2, r24	; 0x02
    13c0:	9b 83       	std	Y+3, r25	; 0x03
    13c2:	ac 83       	std	Y+4, r26	; 0x04
    13c4:	bd 83       	std	Y+5, r27	; 0x05
	uint8 		overFlowCounter 	= 0;
    13c6:	19 82       	std	Y+1, r1	; 0x01

	tickTime = PRESCALER_VALUE / (float)F_CPU;
    13c8:	8d eb       	ldi	r24, 0xBD	; 189
    13ca:	97 e3       	ldi	r25, 0x37	; 55
    13cc:	a6 e8       	ldi	r26, 0x86	; 134
    13ce:	b5 e3       	ldi	r27, 0x35	; 53
    13d0:	8a 87       	std	Y+10, r24	; 0x0a
    13d2:	9b 87       	std	Y+11, r25	; 0x0b
    13d4:	ac 87       	std	Y+12, r26	; 0x0c
    13d6:	bd 87       	std	Y+13, r27	; 0x0d
	maxDelayTime = tickTime * 256; 		// 2^n = 256
    13d8:	6a 85       	ldd	r22, Y+10	; 0x0a
    13da:	7b 85       	ldd	r23, Y+11	; 0x0b
    13dc:	8c 85       	ldd	r24, Y+12	; 0x0c
    13de:	9d 85       	ldd	r25, Y+13	; 0x0d
    13e0:	20 e0       	ldi	r18, 0x00	; 0
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	40 e8       	ldi	r20, 0x80	; 128
    13e6:	53 e4       	ldi	r21, 0x43	; 67
    13e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ec:	dc 01       	movw	r26, r24
    13ee:	cb 01       	movw	r24, r22
    13f0:	8e 83       	std	Y+6, r24	; 0x06
    13f2:	9f 83       	std	Y+7, r25	; 0x07
    13f4:	a8 87       	std	Y+8, r26	; 0x08
    13f6:	b9 87       	std	Y+9, r27	; 0x09
	overflowAmount = ceil((timeDelay) / (maxDelayTime));
    13f8:	6e 85       	ldd	r22, Y+14	; 0x0e
    13fa:	7f 85       	ldd	r23, Y+15	; 0x0f
    13fc:	88 89       	ldd	r24, Y+16	; 0x10
    13fe:	99 89       	ldd	r25, Y+17	; 0x11
    1400:	2e 81       	ldd	r18, Y+6	; 0x06
    1402:	3f 81       	ldd	r19, Y+7	; 0x07
    1404:	48 85       	ldd	r20, Y+8	; 0x08
    1406:	59 85       	ldd	r21, Y+9	; 0x09
    1408:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    140c:	dc 01       	movw	r26, r24
    140e:	cb 01       	movw	r24, r22
    1410:	bc 01       	movw	r22, r24
    1412:	cd 01       	movw	r24, r26
    1414:	0e 94 27 21 	call	0x424e	; 0x424e <ceil>
    1418:	dc 01       	movw	r26, r24
    141a:	cb 01       	movw	r24, r22
    141c:	8a 83       	std	Y+2, r24	; 0x02
    141e:	9b 83       	std	Y+3, r25	; 0x03
    1420:	ac 83       	std	Y+4, r26	; 0x04
    1422:	bd 83       	std	Y+5, r27	; 0x05
	//overflowAmount = floor((timeDelay) / (MaxDelay_Time));

#if (TIMER_SELECT == TIMER0)
	// Using the Timer Overflow Flag TOV
	Timer0_Init();
    1424:	0e 94 b2 09 	call	0x1364	; 0x1364 <Timer0_Init>
    1428:	13 c0       	rjmp	.+38     	; 0x1450 <Timer_setNormalDelay+0xd6>
	while (overFlowCounter < overflowAmount) {
		while (BIT_IS_CLR(TIFR, TOV0)) {
    142a:	e8 e5       	ldi	r30, 0x58	; 88
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	88 2f       	mov	r24, r24
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	81 70       	andi	r24, 0x01	; 1
    1436:	90 70       	andi	r25, 0x00	; 0
    1438:	00 97       	sbiw	r24, 0x00	; 0
    143a:	b9 f3       	breq	.-18     	; 0x142a <Timer_setNormalDelay+0xb0>
			// This function is a Busy Wait
		}
		overFlowCounter++;
    143c:	89 81       	ldd	r24, Y+1	; 0x01
    143e:	8f 5f       	subi	r24, 0xFF	; 255
    1440:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(TIFR, TOV0);
    1442:	a8 e5       	ldi	r26, 0x58	; 88
    1444:	b0 e0       	ldi	r27, 0x00	; 0
    1446:	e8 e5       	ldi	r30, 0x58	; 88
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
    144c:	81 60       	ori	r24, 0x01	; 1
    144e:	8c 93       	st	X, r24
	//overflowAmount = floor((timeDelay) / (MaxDelay_Time));

#if (TIMER_SELECT == TIMER0)
	// Using the Timer Overflow Flag TOV
	Timer0_Init();
	while (overFlowCounter < overflowAmount) {
    1450:	89 81       	ldd	r24, Y+1	; 0x01
    1452:	88 2f       	mov	r24, r24
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	aa 27       	eor	r26, r26
    1458:	97 fd       	sbrc	r25, 7
    145a:	a0 95       	com	r26
    145c:	ba 2f       	mov	r27, r26
    145e:	bc 01       	movw	r22, r24
    1460:	cd 01       	movw	r24, r26
    1462:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    1466:	dc 01       	movw	r26, r24
    1468:	cb 01       	movw	r24, r22
    146a:	bc 01       	movw	r22, r24
    146c:	cd 01       	movw	r24, r26
    146e:	2a 81       	ldd	r18, Y+2	; 0x02
    1470:	3b 81       	ldd	r19, Y+3	; 0x03
    1472:	4c 81       	ldd	r20, Y+4	; 0x04
    1474:	5d 81       	ldd	r21, Y+5	; 0x05
    1476:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    147a:	88 23       	and	r24, r24
    147c:	b4 f2       	brlt	.-84     	; 0x142a <Timer_setNormalDelay+0xb0>
			// This function is a Busy Wait
		}
		overFlowCounter++;
		SET_BIT(TIFR, TOV0);
	}
	overFlowCounter = 0;
    147e:	19 82       	std	Y+1, r1	; 0x01
	Timer0_Init();
    1480:	0e 94 b2 09 	call	0x1364	; 0x1364 <Timer0_Init>
	}
	overFlowCounter = 0;
	TCNT2 = 0x00;

#endif
}
    1484:	61 96       	adiw	r28, 0x11	; 17
    1486:	0f b6       	in	r0, 0x3f	; 63
    1488:	f8 94       	cli
    148a:	de bf       	out	0x3e, r29	; 62
    148c:	0f be       	out	0x3f, r0	; 63
    148e:	cd bf       	out	0x3d, r28	; 61
    1490:	cf 91       	pop	r28
    1492:	df 91       	pop	r29
    1494:	08 95       	ret

00001496 <Timer_setInterruptDelay>:

void Timer_setInterruptDelay(float32 timeDelay) {
    1496:	df 93       	push	r29
    1498:	cf 93       	push	r28
    149a:	cd b7       	in	r28, 0x3d	; 61
    149c:	de b7       	in	r29, 0x3e	; 62
    149e:	61 97       	sbiw	r28, 0x11	; 17
    14a0:	0f b6       	in	r0, 0x3f	; 63
    14a2:	f8 94       	cli
    14a4:	de bf       	out	0x3e, r29	; 62
    14a6:	0f be       	out	0x3f, r0	; 63
    14a8:	cd bf       	out	0x3d, r28	; 61
    14aa:	6e 87       	std	Y+14, r22	; 0x0e
    14ac:	7f 87       	std	Y+15, r23	; 0x0f
    14ae:	88 8b       	std	Y+16, r24	; 0x10
    14b0:	99 8b       	std	Y+17, r25	; 0x11
	// Compares overflow counter with overflow amount in a loop
	// Executes a busy wait function
	// Then clears the TIFR by setting it
	// Iterates Overflow Counter

	float32 	tickTime 					= 0;
    14b2:	80 e0       	ldi	r24, 0x00	; 0
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	a0 e0       	ldi	r26, 0x00	; 0
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	8a 87       	std	Y+10, r24	; 0x0a
    14bc:	9b 87       	std	Y+11, r25	; 0x0b
    14be:	ac 87       	std	Y+12, r26	; 0x0c
    14c0:	bd 87       	std	Y+13, r27	; 0x0d
	float32 	maxDelayTime 		= 0;
    14c2:	80 e0       	ldi	r24, 0x00	; 0
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	a0 e0       	ldi	r26, 0x00	; 0
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	8e 83       	std	Y+6, r24	; 0x06
    14cc:	9f 83       	std	Y+7, r25	; 0x07
    14ce:	a8 87       	std	Y+8, r26	; 0x08
    14d0:	b9 87       	std	Y+9, r27	; 0x09
	float32 	overflowAmount 	= 0;
    14d2:	80 e0       	ldi	r24, 0x00	; 0
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	a0 e0       	ldi	r26, 0x00	; 0
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	8a 83       	std	Y+2, r24	; 0x02
    14dc:	9b 83       	std	Y+3, r25	; 0x03
    14de:	ac 83       	std	Y+4, r26	; 0x04
    14e0:	bd 83       	std	Y+5, r27	; 0x05
	uint8 		overFlowCounter 	= 0;
    14e2:	19 82       	std	Y+1, r1	; 0x01

	tickTime = PRESCALER_VALUE / (float)F_CPU;
    14e4:	8d eb       	ldi	r24, 0xBD	; 189
    14e6:	97 e3       	ldi	r25, 0x37	; 55
    14e8:	a6 e8       	ldi	r26, 0x86	; 134
    14ea:	b5 e3       	ldi	r27, 0x35	; 53
    14ec:	8a 87       	std	Y+10, r24	; 0x0a
    14ee:	9b 87       	std	Y+11, r25	; 0x0b
    14f0:	ac 87       	std	Y+12, r26	; 0x0c
    14f2:	bd 87       	std	Y+13, r27	; 0x0d
	maxDelayTime = tickTime * 256; 		// 2^n = 256
    14f4:	6a 85       	ldd	r22, Y+10	; 0x0a
    14f6:	7b 85       	ldd	r23, Y+11	; 0x0b
    14f8:	8c 85       	ldd	r24, Y+12	; 0x0c
    14fa:	9d 85       	ldd	r25, Y+13	; 0x0d
    14fc:	20 e0       	ldi	r18, 0x00	; 0
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	40 e8       	ldi	r20, 0x80	; 128
    1502:	53 e4       	ldi	r21, 0x43	; 67
    1504:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1508:	dc 01       	movw	r26, r24
    150a:	cb 01       	movw	r24, r22
    150c:	8e 83       	std	Y+6, r24	; 0x06
    150e:	9f 83       	std	Y+7, r25	; 0x07
    1510:	a8 87       	std	Y+8, r26	; 0x08
    1512:	b9 87       	std	Y+9, r27	; 0x09
	overflowAmount = ceil((timeDelay) / (maxDelayTime));
    1514:	6e 85       	ldd	r22, Y+14	; 0x0e
    1516:	7f 85       	ldd	r23, Y+15	; 0x0f
    1518:	88 89       	ldd	r24, Y+16	; 0x10
    151a:	99 89       	ldd	r25, Y+17	; 0x11
    151c:	2e 81       	ldd	r18, Y+6	; 0x06
    151e:	3f 81       	ldd	r19, Y+7	; 0x07
    1520:	48 85       	ldd	r20, Y+8	; 0x08
    1522:	59 85       	ldd	r21, Y+9	; 0x09
    1524:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1528:	dc 01       	movw	r26, r24
    152a:	cb 01       	movw	r24, r22
    152c:	bc 01       	movw	r22, r24
    152e:	cd 01       	movw	r24, r26
    1530:	0e 94 27 21 	call	0x424e	; 0x424e <ceil>
    1534:	dc 01       	movw	r26, r24
    1536:	cb 01       	movw	r24, r22
    1538:	8a 83       	std	Y+2, r24	; 0x02
    153a:	9b 83       	std	Y+3, r25	; 0x03
    153c:	ac 83       	std	Y+4, r26	; 0x04
    153e:	bd 83       	std	Y+5, r27	; 0x05
	//overflowAmount = floor((timeDelay) / (MaxDelay_Time));

#if (TIMER_SELECT == TIMER0)
	//Timer0_Init();
	overFlowCounter++;
    1540:	89 81       	ldd	r24, Y+1	; 0x01
    1542:	8f 5f       	subi	r24, 0xFF	; 255
    1544:	89 83       	std	Y+1, r24	; 0x01
	if (overFlowCounter == overflowAmount) {
    1546:	89 81       	ldd	r24, Y+1	; 0x01
    1548:	88 2f       	mov	r24, r24
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	aa 27       	eor	r26, r26
    154e:	97 fd       	sbrc	r25, 7
    1550:	a0 95       	com	r26
    1552:	ba 2f       	mov	r27, r26
    1554:	bc 01       	movw	r22, r24
    1556:	cd 01       	movw	r24, r26
    1558:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    155c:	dc 01       	movw	r26, r24
    155e:	cb 01       	movw	r24, r22
    1560:	bc 01       	movw	r22, r24
    1562:	cd 01       	movw	r24, r26
    1564:	2a 81       	ldd	r18, Y+2	; 0x02
    1566:	3b 81       	ldd	r19, Y+3	; 0x03
    1568:	4c 81       	ldd	r20, Y+4	; 0x04
    156a:	5d 81       	ldd	r21, Y+5	; 0x05
    156c:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    1570:	88 23       	and	r24, r24
    1572:	09 f4       	brne	.+2      	; 0x1576 <Timer_setInterruptDelay+0xe0>
		overFlowCounter = 0;
    1574:	19 82       	std	Y+1, r1	; 0x01
	}
	overFlowCounter = 0;
	TCNT2 = 0x00;

#endif
}
    1576:	61 96       	adiw	r28, 0x11	; 17
    1578:	0f b6       	in	r0, 0x3f	; 63
    157a:	f8 94       	cli
    157c:	de bf       	out	0x3e, r29	; 62
    157e:	0f be       	out	0x3f, r0	; 63
    1580:	cd bf       	out	0x3d, r28	; 61
    1582:	cf 91       	pop	r28
    1584:	df 91       	pop	r29
    1586:	08 95       	ret

00001588 <Timer_setCTCMode_normalFreq>:

void Timer_setCTCMode_normalFreq(float freqKHZ, uint8 port_num, uint8 pin_num) {
    1588:	0f 93       	push	r16
    158a:	1f 93       	push	r17
    158c:	df 93       	push	r29
    158e:	cf 93       	push	r28
    1590:	00 d0       	rcall	.+0      	; 0x1592 <Timer_setCTCMode_normalFreq+0xa>
    1592:	00 d0       	rcall	.+0      	; 0x1594 <Timer_setCTCMode_normalFreq+0xc>
    1594:	00 d0       	rcall	.+0      	; 0x1596 <Timer_setCTCMode_normalFreq+0xe>
    1596:	cd b7       	in	r28, 0x3d	; 61
    1598:	de b7       	in	r29, 0x3e	; 62
    159a:	69 83       	std	Y+1, r22	; 0x01
    159c:	7a 83       	std	Y+2, r23	; 0x02
    159e:	8b 83       	std	Y+3, r24	; 0x03
    15a0:	9c 83       	std	Y+4, r25	; 0x04
    15a2:	4d 83       	std	Y+5, r20	; 0x05
    15a4:	2e 83       	std	Y+6, r18	; 0x06
	// Focn = F_CPU / (2N*(1 + OCRn))
	// For i.e: Focn = 2 KHz, what are my knowns?
	// Focn, FCPU, N,,, so i will calculate the OCRn
	// Thus solving my problem.

	GPIO_setupPinDirection(port_num, pin_num, PIN_OUTPUT);
    15a6:	8d 81       	ldd	r24, Y+5	; 0x05
    15a8:	6e 81       	ldd	r22, Y+6	; 0x06
    15aa:	41 e0       	ldi	r20, 0x01	; 1
    15ac:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <GPIO_setupPinDirection>
	GPIO_writePin(port_num, pin_num, LOGIC_LOW);
    15b0:	8d 81       	ldd	r24, Y+5	; 0x05
    15b2:	6e 81       	ldd	r22, Y+6	; 0x06
    15b4:	40 e0       	ldi	r20, 0x00	; 0
    15b6:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>

#if (TIMER_SELECT == TIMER0)
	// Using the Timer CTC Mode
	Timer0_Init();
    15ba:	0e 94 b2 09 	call	0x1364	; 0x1364 <Timer0_Init>
	TCNT0 	= 0;
    15be:	e2 e5       	ldi	r30, 0x52	; 82
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	10 82       	st	Z, r1
	OCR0 		= 0;
    15c4:	ec e5       	ldi	r30, 0x5C	; 92
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	10 82       	st	Z, r1
	OCR0 		= ceil( (float32)F_CPU / (2 * PRESCALER_VALUE * freqKHZ * 1000) ) - 1;
    15ca:	0c e5       	ldi	r16, 0x5C	; 92
    15cc:	10 e0       	ldi	r17, 0x00	; 0
    15ce:	69 81       	ldd	r22, Y+1	; 0x01
    15d0:	7a 81       	ldd	r23, Y+2	; 0x02
    15d2:	8b 81       	ldd	r24, Y+3	; 0x03
    15d4:	9c 81       	ldd	r25, Y+4	; 0x04
    15d6:	20 e0       	ldi	r18, 0x00	; 0
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	40 e8       	ldi	r20, 0x80	; 128
    15dc:	51 e4       	ldi	r21, 0x41	; 65
    15de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e2:	dc 01       	movw	r26, r24
    15e4:	cb 01       	movw	r24, r22
    15e6:	bc 01       	movw	r22, r24
    15e8:	cd 01       	movw	r24, r26
    15ea:	20 e0       	ldi	r18, 0x00	; 0
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	4a e7       	ldi	r20, 0x7A	; 122
    15f0:	54 e4       	ldi	r21, 0x44	; 68
    15f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15f6:	dc 01       	movw	r26, r24
    15f8:	cb 01       	movw	r24, r22
    15fa:	9c 01       	movw	r18, r24
    15fc:	ad 01       	movw	r20, r26
    15fe:	60 e0       	ldi	r22, 0x00	; 0
    1600:	74 e2       	ldi	r23, 0x24	; 36
    1602:	84 ef       	ldi	r24, 0xF4	; 244
    1604:	9a e4       	ldi	r25, 0x4A	; 74
    1606:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    160a:	dc 01       	movw	r26, r24
    160c:	cb 01       	movw	r24, r22
    160e:	bc 01       	movw	r22, r24
    1610:	cd 01       	movw	r24, r26
    1612:	0e 94 27 21 	call	0x424e	; 0x424e <ceil>
    1616:	dc 01       	movw	r26, r24
    1618:	cb 01       	movw	r24, r22
    161a:	bc 01       	movw	r22, r24
    161c:	cd 01       	movw	r24, r26
    161e:	20 e0       	ldi	r18, 0x00	; 0
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	40 e8       	ldi	r20, 0x80	; 128
    1624:	5f e3       	ldi	r21, 0x3F	; 63
    1626:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    162a:	dc 01       	movw	r26, r24
    162c:	cb 01       	movw	r24, r22
    162e:	bc 01       	movw	r22, r24
    1630:	cd 01       	movw	r24, r26
    1632:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1636:	dc 01       	movw	r26, r24
    1638:	cb 01       	movw	r24, r22
    163a:	f8 01       	movw	r30, r16
    163c:	80 83       	st	Z, r24

	if (BIT_IS_SET(TIFR, OCF0)) {
    163e:	e8 e5       	ldi	r30, 0x58	; 88
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	80 81       	ld	r24, Z
    1644:	88 2f       	mov	r24, r24
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	82 70       	andi	r24, 0x02	; 2
    164a:	90 70       	andi	r25, 0x00	; 0
    164c:	00 97       	sbiw	r24, 0x00	; 0
    164e:	59 f0       	breq	.+22     	; 0x1666 <Timer_setCTCMode_normalFreq+0xde>
		GPIO_togglePin(port_num, pin_num);
    1650:	8d 81       	ldd	r24, Y+5	; 0x05
    1652:	6e 81       	ldd	r22, Y+6	; 0x06
    1654:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <GPIO_togglePin>
		SET_BIT(TIFR, OCF0);
    1658:	a8 e5       	ldi	r26, 0x58	; 88
    165a:	b0 e0       	ldi	r27, 0x00	; 0
    165c:	e8 e5       	ldi	r30, 0x58	; 88
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	82 60       	ori	r24, 0x02	; 2
    1664:	8c 93       	st	X, r24
		overFlowCounter++;
	}
	overFlowCounter = 0;
	TCNT2 = 0x00;
#endif
}
    1666:	26 96       	adiw	r28, 0x06	; 6
    1668:	0f b6       	in	r0, 0x3f	; 63
    166a:	f8 94       	cli
    166c:	de bf       	out	0x3e, r29	; 62
    166e:	0f be       	out	0x3f, r0	; 63
    1670:	cd bf       	out	0x3d, r28	; 61
    1672:	cf 91       	pop	r28
    1674:	df 91       	pop	r29
    1676:	1f 91       	pop	r17
    1678:	0f 91       	pop	r16
    167a:	08 95       	ret

0000167c <Timer_setCTCMode_interruptFreq>:


uint8 Timer_setCTCMode_interruptFreq(float freqKHZ) {
    167c:	0f 93       	push	r16
    167e:	1f 93       	push	r17
    1680:	df 93       	push	r29
    1682:	cf 93       	push	r28
    1684:	00 d0       	rcall	.+0      	; 0x1686 <Timer_setCTCMode_interruptFreq+0xa>
    1686:	00 d0       	rcall	.+0      	; 0x1688 <Timer_setCTCMode_interruptFreq+0xc>
    1688:	cd b7       	in	r28, 0x3d	; 61
    168a:	de b7       	in	r29, 0x3e	; 62
    168c:	69 83       	std	Y+1, r22	; 0x01
    168e:	7a 83       	std	Y+2, r23	; 0x02
    1690:	8b 83       	std	Y+3, r24	; 0x03
    1692:	9c 83       	std	Y+4, r25	; 0x04
	// Focn, FCPU, N,,, so i will calculate the OCRn
	// Thus solving my problem.

#if (TIMER_SELECT == TIMER0)
	// Using the Timer CTC Mode
	Timer0_Init();
    1694:	0e 94 b2 09 	call	0x1364	; 0x1364 <Timer0_Init>
	TCNT0 	= 0;
    1698:	e2 e5       	ldi	r30, 0x52	; 82
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	10 82       	st	Z, r1
	OCR0 		= 0;
    169e:	ec e5       	ldi	r30, 0x5C	; 92
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	10 82       	st	Z, r1
	OCR0 		= ceil( (float32)F_CPU / (2 * PRESCALER_VALUE * freqKHZ * 1000) ) - 1;
    16a4:	0c e5       	ldi	r16, 0x5C	; 92
    16a6:	10 e0       	ldi	r17, 0x00	; 0
    16a8:	69 81       	ldd	r22, Y+1	; 0x01
    16aa:	7a 81       	ldd	r23, Y+2	; 0x02
    16ac:	8b 81       	ldd	r24, Y+3	; 0x03
    16ae:	9c 81       	ldd	r25, Y+4	; 0x04
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	40 e8       	ldi	r20, 0x80	; 128
    16b6:	51 e4       	ldi	r21, 0x41	; 65
    16b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16bc:	dc 01       	movw	r26, r24
    16be:	cb 01       	movw	r24, r22
    16c0:	bc 01       	movw	r22, r24
    16c2:	cd 01       	movw	r24, r26
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	4a e7       	ldi	r20, 0x7A	; 122
    16ca:	54 e4       	ldi	r21, 0x44	; 68
    16cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16d0:	dc 01       	movw	r26, r24
    16d2:	cb 01       	movw	r24, r22
    16d4:	9c 01       	movw	r18, r24
    16d6:	ad 01       	movw	r20, r26
    16d8:	60 e0       	ldi	r22, 0x00	; 0
    16da:	74 e2       	ldi	r23, 0x24	; 36
    16dc:	84 ef       	ldi	r24, 0xF4	; 244
    16de:	9a e4       	ldi	r25, 0x4A	; 74
    16e0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    16e4:	dc 01       	movw	r26, r24
    16e6:	cb 01       	movw	r24, r22
    16e8:	bc 01       	movw	r22, r24
    16ea:	cd 01       	movw	r24, r26
    16ec:	0e 94 27 21 	call	0x424e	; 0x424e <ceil>
    16f0:	dc 01       	movw	r26, r24
    16f2:	cb 01       	movw	r24, r22
    16f4:	bc 01       	movw	r22, r24
    16f6:	cd 01       	movw	r24, r26
    16f8:	20 e0       	ldi	r18, 0x00	; 0
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	40 e8       	ldi	r20, 0x80	; 128
    16fe:	5f e3       	ldi	r21, 0x3F	; 63
    1700:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1704:	dc 01       	movw	r26, r24
    1706:	cb 01       	movw	r24, r22
    1708:	bc 01       	movw	r22, r24
    170a:	cd 01       	movw	r24, r26
    170c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1710:	dc 01       	movw	r26, r24
    1712:	cb 01       	movw	r24, r22
    1714:	f8 01       	movw	r30, r16
    1716:	80 83       	st	Z, r24

	return OCR0;
    1718:	ec e5       	ldi	r30, 0x5C	; 92
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	80 81       	ld	r24, Z
		overFlowCounter++;
	}
	overFlowCounter = 0;
	TCNT2 = 0x00;
#endif
}
    171e:	0f 90       	pop	r0
    1720:	0f 90       	pop	r0
    1722:	0f 90       	pop	r0
    1724:	0f 90       	pop	r0
    1726:	cf 91       	pop	r28
    1728:	df 91       	pop	r29
    172a:	1f 91       	pop	r17
    172c:	0f 91       	pop	r16
    172e:	08 95       	ret

00001730 <SPI_initMaster>:
#include "avr/io.h" /* To use the IO Ports Registers */
#include <util/delay.h>


// Initializes and enables the Master mode for the SPI Module to start functionality
void SPI_initMaster(void) {
    1730:	df 93       	push	r29
    1732:	cf 93       	push	r28
    1734:	cd b7       	in	r28, 0x3d	; 61
    1736:	de b7       	in	r29, 0x3e	; 62
	 *	SS (PB4)   	--> 	Output
	 *	MOSI (PB5) --> 	Output
	 *	MISO (PB6) --> 	Input
	 *	SCK (PB7) 	--> 	Output
	 */
	GPIO_setupPinDirection(PORT_B, SS, PIN_OUTPUT);
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	64 e0       	ldi	r22, 0x04	; 4
    173c:	41 e0       	ldi	r20, 0x01	; 1
    173e:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORT_B, MOSI, PIN_OUTPUT);
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	65 e0       	ldi	r22, 0x05	; 5
    1746:	41 e0       	ldi	r20, 0x01	; 1
    1748:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORT_B, MISO, PIN_INPUT);
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	66 e0       	ldi	r22, 0x06	; 6
    1750:	40 e0       	ldi	r20, 0x00	; 0
    1752:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORT_B, SCK, PIN_OUTPUT);
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	67 e0       	ldi	r22, 0x07	; 7
    175a:	41 e0       	ldi	r20, 0x01	; 1
    175c:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <GPIO_setupPinDirection>
	  *  Bit 3 – CPOL: Clock Polarity
	  *  Bit 2 – CPHA: Clock Phase
	  *  Bits 1, 0 – SPR1, SPR0: SPI Clock Rate Select 1 and 0
	  */

	SET_BIT(SPCR, SPE); // Enabling the SPI Module
    1760:	ad e2       	ldi	r26, 0x2D	; 45
    1762:	b0 e0       	ldi	r27, 0x00	; 0
    1764:	ed e2       	ldi	r30, 0x2D	; 45
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	80 64       	ori	r24, 0x40	; 64
    176c:	8c 93       	st	X, r24
	SET_BIT(SPCR, MSTR); // Enabling the Master / Slave Mode; I will choose Master
    176e:	ad e2       	ldi	r26, 0x2D	; 45
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	ed e2       	ldi	r30, 0x2D	; 45
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 81       	ld	r24, Z
    1778:	80 61       	ori	r24, 0x10	; 16
    177a:	8c 93       	st	X, r24
	CLR_BIT(SPCR, SPR1); // Choosing the SCK rate, Fosc / 4
    177c:	ad e2       	ldi	r26, 0x2D	; 45
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	ed e2       	ldi	r30, 0x2D	; 45
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	8d 7f       	andi	r24, 0xFD	; 253
    1788:	8c 93       	st	X, r24
	CLR_BIT(SPCR, SPR0); // So SPR1, SPR0 = '00'
    178a:	ad e2       	ldi	r26, 0x2D	; 45
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	ed e2       	ldi	r30, 0x2D	; 45
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	8e 7f       	andi	r24, 0xFE	; 254
    1796:	8c 93       	st	X, r24
	  *  Bit 7 – SPIF: SPI Interrupt Flag
	  *  Bit 6 – WCOL: Write COLlision Flag
	  *  Bit 5..1 – Res: Reserved Bits
	  *  Bit 0 – SPI2X: Double SPI Speed Bit
	  */
	CLR_BIT(SPSR, SPI2X); // Make SPI2X = '0' to support the Fosc / 4
    1798:	ae e2       	ldi	r26, 0x2E	; 46
    179a:	b0 e0       	ldi	r27, 0x00	; 0
    179c:	ee e2       	ldi	r30, 0x2E	; 46
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	80 81       	ld	r24, Z
    17a2:	8e 7f       	andi	r24, 0xFE	; 254
    17a4:	8c 93       	st	X, r24

}
    17a6:	cf 91       	pop	r28
    17a8:	df 91       	pop	r29
    17aa:	08 95       	ret

000017ac <SPI_initSlave>:


// Initializes and enables the Slave mode for the SPI Module to start functionality
void SPI_initSlave(void) {
    17ac:	df 93       	push	r29
    17ae:	cf 93       	push	r28
    17b0:	cd b7       	in	r28, 0x3d	; 61
    17b2:	de b7       	in	r29, 0x3e	; 62
	 *	SS (PB4)   	--> 	Input
	 *	MOSI (PB5) --> 	Input
	 *	MISO (PB6) --> 	Output
	 *	SCK (PB7) 	--> 	Input
	 */
	GPIO_setupPinDirection(PORT_B, SS, PIN_INPUT);
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	64 e0       	ldi	r22, 0x04	; 4
    17b8:	40 e0       	ldi	r20, 0x00	; 0
    17ba:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORT_B, MOSI, PIN_INPUT);
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	65 e0       	ldi	r22, 0x05	; 5
    17c2:	40 e0       	ldi	r20, 0x00	; 0
    17c4:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORT_B, MISO, PIN_OUTPUT);
    17c8:	81 e0       	ldi	r24, 0x01	; 1
    17ca:	66 e0       	ldi	r22, 0x06	; 6
    17cc:	41 e0       	ldi	r20, 0x01	; 1
    17ce:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORT_B, SCK, PIN_INPUT);
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	67 e0       	ldi	r22, 0x07	; 7
    17d6:	40 e0       	ldi	r20, 0x00	; 0
    17d8:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <GPIO_setupPinDirection>
	  *  Bit 4 – MSTR: Master/Slave Select
	  *  Bit 3 – CPOL: Clock Polarity
	  *  Bit 2 – CPHA: Clock Phase
	  *  Bits 1, 0 – SPR1, SPR0: SPI Clock Rate Select 1 and 0
	  */
	SET_BIT(SPCR, SPE); // Enabling the SPI Module
    17dc:	ad e2       	ldi	r26, 0x2D	; 45
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	ed e2       	ldi	r30, 0x2D	; 45
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	80 64       	ori	r24, 0x40	; 64
    17e8:	8c 93       	st	X, r24
	CLR_BIT(SPCR, MSTR); // Enabling the Master / Slave Mode; I will choose Master
    17ea:	ad e2       	ldi	r26, 0x2D	; 45
    17ec:	b0 e0       	ldi	r27, 0x00	; 0
    17ee:	ed e2       	ldi	r30, 0x2D	; 45
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	80 81       	ld	r24, Z
    17f4:	8f 7e       	andi	r24, 0xEF	; 239
    17f6:	8c 93       	st	X, r24
	CLR_BIT(SPCR, SPR1); // Choosing the SCK rate, Fosc / 4
    17f8:	ad e2       	ldi	r26, 0x2D	; 45
    17fa:	b0 e0       	ldi	r27, 0x00	; 0
    17fc:	ed e2       	ldi	r30, 0x2D	; 45
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	8d 7f       	andi	r24, 0xFD	; 253
    1804:	8c 93       	st	X, r24
	CLR_BIT(SPCR, SPR0); // So SPR1, SPR0 = '00'
    1806:	ad e2       	ldi	r26, 0x2D	; 45
    1808:	b0 e0       	ldi	r27, 0x00	; 0
    180a:	ed e2       	ldi	r30, 0x2D	; 45
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	8e 7f       	andi	r24, 0xFE	; 254
    1812:	8c 93       	st	X, r24
	  *  Bit 7 – SPIF: SPI Interrupt Flag
	  *  Bit 6 – WCOL: Write COLlision Flag
	  *  Bit 5..1 – Res: Reserved Bits
	  *  Bit 0 – SPI2X: Double SPI Speed Bit
	  */
	CLR_BIT(SPSR, SPI2X); // Make SPI2X = '0' to support the Fosc / 4
    1814:	ae e2       	ldi	r26, 0x2E	; 46
    1816:	b0 e0       	ldi	r27, 0x00	; 0
    1818:	ee e2       	ldi	r30, 0x2E	; 46
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	80 81       	ld	r24, Z
    181e:	8e 7f       	andi	r24, 0xFE	; 254
    1820:	8c 93       	st	X, r24

}
    1822:	cf 91       	pop	r28
    1824:	df 91       	pop	r29
    1826:	08 95       	ret

00001828 <SPI_sendReceiveByte>:


// Responsible for the SPI to send & receive a byte
uint8 SPI_sendReceiveByte(uint8 data) {
    1828:	df 93       	push	r29
    182a:	cf 93       	push	r28
    182c:	0f 92       	push	r0
    182e:	cd b7       	in	r28, 0x3d	; 61
    1830:	de b7       	in	r29, 0x3e	; 62
    1832:	89 83       	std	Y+1, r24	; 0x01

	SPDR = data;
    1834:	ef e2       	ldi	r30, 0x2F	; 47
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	89 81       	ldd	r24, Y+1	; 0x01
    183a:	80 83       	st	Z, r24

	while(BIT_IS_CLR(SPSR, SPIF)) {
    183c:	ee e2       	ldi	r30, 0x2E	; 46
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	80 81       	ld	r24, Z
    1842:	88 23       	and	r24, r24
    1844:	dc f7       	brge	.-10     	; 0x183c <SPI_sendReceiveByte+0x14>
		 * flag is set, Master will set SS to low to generate clock on SCK pin
		 */
	}

	// after SPIF is set, then I return the data
	return SPDR;
    1846:	ef e2       	ldi	r30, 0x2F	; 47
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
}
    184c:	0f 90       	pop	r0
    184e:	cf 91       	pop	r28
    1850:	df 91       	pop	r29
    1852:	08 95       	ret

00001854 <SPI_sendString>:

void SPI_sendString(const uint8 *str) {
    1854:	df 93       	push	r29
    1856:	cf 93       	push	r28
    1858:	00 d0       	rcall	.+0      	; 0x185a <SPI_sendString+0x6>
    185a:	00 d0       	rcall	.+0      	; 0x185c <SPI_sendString+0x8>
    185c:	cd b7       	in	r28, 0x3d	; 61
    185e:	de b7       	in	r29, 0x3e	; 62
    1860:	9c 83       	std	Y+4, r25	; 0x04
    1862:	8b 83       	std	Y+3, r24	; 0x03
	uint8 i = 0;
    1864:	1a 82       	std	Y+2, r1	; 0x02
	uint8 receivedData = 0;
    1866:	19 82       	std	Y+1, r1	; 0x01
    1868:	0f c0       	rjmp	.+30     	; 0x1888 <SPI_sendString+0x34>

	while (str[i] != '\0') {
		// receivedData contains the data from the other device
		receivedData = SPI_sendReceiveByte(str[i]);
    186a:	8a 81       	ldd	r24, Y+2	; 0x02
    186c:	28 2f       	mov	r18, r24
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	8b 81       	ldd	r24, Y+3	; 0x03
    1872:	9c 81       	ldd	r25, Y+4	; 0x04
    1874:	fc 01       	movw	r30, r24
    1876:	e2 0f       	add	r30, r18
    1878:	f3 1f       	adc	r31, r19
    187a:	80 81       	ld	r24, Z
    187c:	0e 94 14 0c 	call	0x1828	; 0x1828 <SPI_sendReceiveByte>
    1880:	89 83       	std	Y+1, r24	; 0x01
		i++;
    1882:	8a 81       	ldd	r24, Y+2	; 0x02
    1884:	8f 5f       	subi	r24, 0xFF	; 255
    1886:	8a 83       	std	Y+2, r24	; 0x02

void SPI_sendString(const uint8 *str) {
	uint8 i = 0;
	uint8 receivedData = 0;

	while (str[i] != '\0') {
    1888:	8a 81       	ldd	r24, Y+2	; 0x02
    188a:	28 2f       	mov	r18, r24
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	8b 81       	ldd	r24, Y+3	; 0x03
    1890:	9c 81       	ldd	r25, Y+4	; 0x04
    1892:	fc 01       	movw	r30, r24
    1894:	e2 0f       	add	r30, r18
    1896:	f3 1f       	adc	r31, r19
    1898:	80 81       	ld	r24, Z
    189a:	88 23       	and	r24, r24
    189c:	31 f7       	brne	.-52     	; 0x186a <SPI_sendString+0x16>
		// receivedData contains the data from the other device
		receivedData = SPI_sendReceiveByte(str[i]);
		i++;
	}

}
    189e:	0f 90       	pop	r0
    18a0:	0f 90       	pop	r0
    18a2:	0f 90       	pop	r0
    18a4:	0f 90       	pop	r0
    18a6:	cf 91       	pop	r28
    18a8:	df 91       	pop	r29
    18aa:	08 95       	ret

000018ac <SPI_receiveString>:


void SPI_receiveString(uint8 *str) {
    18ac:	0f 93       	push	r16
    18ae:	1f 93       	push	r17
    18b0:	df 93       	push	r29
    18b2:	cf 93       	push	r28
    18b4:	00 d0       	rcall	.+0      	; 0x18b6 <SPI_receiveString+0xa>
    18b6:	0f 92       	push	r0
    18b8:	cd b7       	in	r28, 0x3d	; 61
    18ba:	de b7       	in	r29, 0x3e	; 62
    18bc:	9b 83       	std	Y+3, r25	; 0x03
    18be:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    18c0:	19 82       	std	Y+1, r1	; 0x01
	// Receives and stores the first byte
	str[i] = SPI_sendReceiveByte(SPI_DEF_DATA_VAL);
    18c2:	89 81       	ldd	r24, Y+1	; 0x01
    18c4:	28 2f       	mov	r18, r24
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ca:	9b 81       	ldd	r25, Y+3	; 0x03
    18cc:	8c 01       	movw	r16, r24
    18ce:	02 0f       	add	r16, r18
    18d0:	13 1f       	adc	r17, r19
    18d2:	8f ef       	ldi	r24, 0xFF	; 255
    18d4:	0e 94 14 0c 	call	0x1828	; 0x1828 <SPI_sendReceiveByte>
    18d8:	f8 01       	movw	r30, r16
    18da:	80 83       	st	Z, r24
    18dc:	10 c0       	rjmp	.+32     	; 0x18fe <SPI_receiveString+0x52>


	while (str[i] != '#') {
		i++; // why the incrementer above?
    18de:	89 81       	ldd	r24, Y+1	; 0x01
    18e0:	8f 5f       	subi	r24, 0xFF	; 255
    18e2:	89 83       	std	Y+1, r24	; 0x01
		str[i] = SPI_sendReceiveByte(SPI_DEF_DATA_VAL);
    18e4:	89 81       	ldd	r24, Y+1	; 0x01
    18e6:	28 2f       	mov	r18, r24
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	8a 81       	ldd	r24, Y+2	; 0x02
    18ec:	9b 81       	ldd	r25, Y+3	; 0x03
    18ee:	8c 01       	movw	r16, r24
    18f0:	02 0f       	add	r16, r18
    18f2:	13 1f       	adc	r17, r19
    18f4:	8f ef       	ldi	r24, 0xFF	; 255
    18f6:	0e 94 14 0c 	call	0x1828	; 0x1828 <SPI_sendReceiveByte>
    18fa:	f8 01       	movw	r30, r16
    18fc:	80 83       	st	Z, r24
	uint8 i = 0;
	// Receives and stores the first byte
	str[i] = SPI_sendReceiveByte(SPI_DEF_DATA_VAL);


	while (str[i] != '#') {
    18fe:	89 81       	ldd	r24, Y+1	; 0x01
    1900:	28 2f       	mov	r18, r24
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	8a 81       	ldd	r24, Y+2	; 0x02
    1906:	9b 81       	ldd	r25, Y+3	; 0x03
    1908:	fc 01       	movw	r30, r24
    190a:	e2 0f       	add	r30, r18
    190c:	f3 1f       	adc	r31, r19
    190e:	80 81       	ld	r24, Z
    1910:	83 32       	cpi	r24, 0x23	; 35
    1912:	29 f7       	brne	.-54     	; 0x18de <SPI_receiveString+0x32>
		i++; // why the incrementer above?
		str[i] = SPI_sendReceiveByte(SPI_DEF_DATA_VAL);
	}

	str[i] = '\0'; // replacing the '#' with '\0'
    1914:	89 81       	ldd	r24, Y+1	; 0x01
    1916:	28 2f       	mov	r18, r24
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	8a 81       	ldd	r24, Y+2	; 0x02
    191c:	9b 81       	ldd	r25, Y+3	; 0x03
    191e:	fc 01       	movw	r30, r24
    1920:	e2 0f       	add	r30, r18
    1922:	f3 1f       	adc	r31, r19
    1924:	10 82       	st	Z, r1

}
    1926:	0f 90       	pop	r0
    1928:	0f 90       	pop	r0
    192a:	0f 90       	pop	r0
    192c:	cf 91       	pop	r28
    192e:	df 91       	pop	r29
    1930:	1f 91       	pop	r17
    1932:	0f 91       	pop	r16
    1934:	08 95       	ret

00001936 <ICU_Init>:
#include <util/delay.h>
//#include <avr/interrupt.h>


// Initializes and enables the ADC Module to start functionality
void ICU_Init(void) {
    1936:	df 93       	push	r29
    1938:	cf 93       	push	r28
    193a:	cd b7       	in	r28, 0x3d	; 61
    193c:	de b7       	in	r29, 0x3e	; 62
	 * 2 – FOC1B: Force Output Compare for Compare unit B
	 * 1:0 – WGM11:0: Waveform Generation Mode
	 */

	// Clears COM1A1:0 to '00', I want normal mode
	CLR_BIT(TCCR1A, COM1A1);
    193e:	af e4       	ldi	r26, 0x4F	; 79
    1940:	b0 e0       	ldi	r27, 0x00	; 0
    1942:	ef e4       	ldi	r30, 0x4F	; 79
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	80 81       	ld	r24, Z
    1948:	8f 77       	andi	r24, 0x7F	; 127
    194a:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, COM1A0);
    194c:	af e4       	ldi	r26, 0x4F	; 79
    194e:	b0 e0       	ldi	r27, 0x00	; 0
    1950:	ef e4       	ldi	r30, 0x4F	; 79
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	80 81       	ld	r24, Z
    1956:	8f 7b       	andi	r24, 0xBF	; 191
    1958:	8c 93       	st	X, r24

	// Clears COM1B1:0 to '00', I want normal mode
	CLR_BIT(TCCR1A, COM1B1);
    195a:	af e4       	ldi	r26, 0x4F	; 79
    195c:	b0 e0       	ldi	r27, 0x00	; 0
    195e:	ef e4       	ldi	r30, 0x4F	; 79
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	80 81       	ld	r24, Z
    1964:	8f 7d       	andi	r24, 0xDF	; 223
    1966:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, COM1B0);
    1968:	af e4       	ldi	r26, 0x4F	; 79
    196a:	b0 e0       	ldi	r27, 0x00	; 0
    196c:	ef e4       	ldi	r30, 0x4F	; 79
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	80 81       	ld	r24, Z
    1972:	8f 7e       	andi	r24, 0xEF	; 239
    1974:	8c 93       	st	X, r24

	// Sets FOC1A to '1', I'm in normal mode
	SET_BIT(TCCR1A, FOC1A);
    1976:	af e4       	ldi	r26, 0x4F	; 79
    1978:	b0 e0       	ldi	r27, 0x00	; 0
    197a:	ef e4       	ldi	r30, 0x4F	; 79
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	80 81       	ld	r24, Z
    1980:	88 60       	ori	r24, 0x08	; 8
    1982:	8c 93       	st	X, r24

	// Sets FOC1A to '1', I'm in normal mode
	SET_BIT(TCCR1A, FOC1B);
    1984:	af e4       	ldi	r26, 0x4F	; 79
    1986:	b0 e0       	ldi	r27, 0x00	; 0
    1988:	ef e4       	ldi	r30, 0x4F	; 79
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	80 81       	ld	r24, Z
    198e:	84 60       	ori	r24, 0x04	; 4
    1990:	8c 93       	st	X, r24

	// Clears COM1B1:0 to '00', I want normal mode
	CLR_BIT(TCCR1A, WGM11);
    1992:	af e4       	ldi	r26, 0x4F	; 79
    1994:	b0 e0       	ldi	r27, 0x00	; 0
    1996:	ef e4       	ldi	r30, 0x4F	; 79
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	80 81       	ld	r24, Z
    199c:	8d 7f       	andi	r24, 0xFD	; 253
    199e:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, WGM10);
    19a0:	af e4       	ldi	r26, 0x4F	; 79
    19a2:	b0 e0       	ldi	r27, 0x00	; 0
    19a4:	ef e4       	ldi	r30, 0x4F	; 79
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	80 81       	ld	r24, Z
    19aa:	8e 7f       	andi	r24, 0xFE	; 254
    19ac:	8c 93       	st	X, r24
	 * Bit 4:3 – WGM13:2: Waveform Generation Mode
	 * Bit 2:0 – CS12:0: Clock Select
	 */

	// Clears ICNC1 to '0', I DONT want the noise canceling
	CLR_BIT(TCCR1B, ICNC1);
    19ae:	ae e4       	ldi	r26, 0x4E	; 78
    19b0:	b0 e0       	ldi	r27, 0x00	; 0
    19b2:	ee e4       	ldi	r30, 0x4E	; 78
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	80 81       	ld	r24, Z
    19b8:	8f 77       	andi	r24, 0x7F	; 127
    19ba:	8c 93       	st	X, r24

	// Sets ICES1 to '1', I want the rising edge
	SET_BIT(TCCR1B, ICES1);
    19bc:	ae e4       	ldi	r26, 0x4E	; 78
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	ee e4       	ldi	r30, 0x4E	; 78
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 81       	ld	r24, Z
    19c6:	80 64       	ori	r24, 0x40	; 64
    19c8:	8c 93       	st	X, r24

	// Sets CS12:0 to '001', nO PRESCALING
	CLR_BIT(TCCR1B, CS12);
    19ca:	ae e4       	ldi	r26, 0x4E	; 78
    19cc:	b0 e0       	ldi	r27, 0x00	; 0
    19ce:	ee e4       	ldi	r30, 0x4E	; 78
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	80 81       	ld	r24, Z
    19d4:	8b 7f       	andi	r24, 0xFB	; 251
    19d6:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, CS11);
    19d8:	ae e4       	ldi	r26, 0x4E	; 78
    19da:	b0 e0       	ldi	r27, 0x00	; 0
    19dc:	ee e4       	ldi	r30, 0x4E	; 78
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	80 81       	ld	r24, Z
    19e2:	8d 7f       	andi	r24, 0xFD	; 253
    19e4:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, CS10);
    19e6:	ae e4       	ldi	r26, 0x4E	; 78
    19e8:	b0 e0       	ldi	r27, 0x00	; 0
    19ea:	ee e4       	ldi	r30, 0x4E	; 78
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	80 81       	ld	r24, Z
    19f0:	81 60       	ori	r24, 0x01	; 1
    19f2:	8c 93       	st	X, r24

	// Clears TCNT1 to '0', Initialize to '0'
	TCNT1 = 0;
    19f4:	ec e4       	ldi	r30, 0x4C	; 76
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	11 82       	std	Z+1, r1	; 0x01
    19fa:	10 82       	st	Z, r1

	// Clears ICR1 to '0', Initialize to '0'
	ICR1 = 0;
    19fc:	e6 e4       	ldi	r30, 0x46	; 70
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	11 82       	std	Z+1, r1	; 0x01
    1a02:	10 82       	st	Z, r1
	 */

	// TIMSK1 |= (1 << TICIE1);
	// SREG |= (1 << 7);

}
    1a04:	cf 91       	pop	r28
    1a06:	df 91       	pop	r29
    1a08:	08 95       	ret

00001a0a <I2C_init>:
/*******************************************************************************
 *                              					Module Implementation                              					  *
 *******************************************************************************/

// Initializes and enables the Master mode for the TWI Module to start functionality
void I2C_init(void) {
    1a0a:	df 93       	push	r29
    1a0c:	cf 93       	push	r28
    1a0e:	cd b7       	in	r28, 0x3d	; 61
    1a10:	de b7       	in	r29, 0x3e	; 62
	 * In the previous equation, I have two unknowns, the TWBR & TWPS
	 * Its the prescaler bits.. so what to choose?
	 * I know that the SCL is 400 KHz, & F_CPU is 8 MHz
	 * I can control TWPS & let it, TWPS = 0, so TWBR = 2
	 */
	TWSR = 0x00;
    1a12:	e1 e2       	ldi	r30, 0x21	; 33
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	10 82       	st	Z, r1
	TWBR = 0x02;
    1a18:	e0 e2       	ldi	r30, 0x20	; 32
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	82 e0       	ldi	r24, 0x02	; 2
    1a1e:	80 83       	st	Z, r24
	TWAR = I2C_SLAVE_ADDR; // Slave Address
    1a20:	e2 e2       	ldi	r30, 0x22	; 34
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	82 e0       	ldi	r24, 0x02	; 2
    1a26:	80 83       	st	Z, r24
	TWCR = (1 << TWEN); // Enabling the I2C Module
    1a28:	e6 e5       	ldi	r30, 0x56	; 86
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	84 e0       	ldi	r24, 0x04	; 4
    1a2e:	80 83       	st	Z, r24

}
    1a30:	cf 91       	pop	r28
    1a32:	df 91       	pop	r29
    1a34:	08 95       	ret

00001a36 <I2C_start>:

// Responsible for the SPI to send an array of bytes, a string
void I2C_start(void) {
    1a36:	df 93       	push	r29
    1a38:	cf 93       	push	r28
    1a3a:	cd b7       	in	r28, 0x3d	; 61
    1a3c:	de b7       	in	r29, 0x3e	; 62
	// Again enabling the I2C Module, Set the Start Condition, Clearing the TWINT Flag
	/* But why I'm not using the normal set bit technique?
	 * Because I don't want to keep old data, & I want the information always set by me
	 */
	TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWSTA);
    1a3e:	e6 e5       	ldi	r30, 0x56	; 86
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	84 ea       	ldi	r24, 0xA4	; 164
    1a44:	80 83       	st	Z, r24

	while(BIT_IS_CLR(TWCR, TWINT)) {
    1a46:	e6 e5       	ldi	r30, 0x56	; 86
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	88 23       	and	r24, r24
    1a4e:	dc f7       	brge	.-10     	; 0x1a46 <I2C_start+0x10>
		// Busy Wait for TWINT set in TWCR Register
		// to ensure that start bit is send successfully
	}
}
    1a50:	cf 91       	pop	r28
    1a52:	df 91       	pop	r29
    1a54:	08 95       	ret

00001a56 <I2C_stop>:

// Responsible for the SPI to receive an array of bytes, a string
void I2C_stop(void) {
    1a56:	df 93       	push	r29
    1a58:	cf 93       	push	r28
    1a5a:	cd b7       	in	r28, 0x3d	; 61
    1a5c:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWSTO);
    1a5e:	e6 e5       	ldi	r30, 0x56	; 86
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	84 e9       	ldi	r24, 0x94	; 148
    1a64:	80 83       	st	Z, r24
}
    1a66:	cf 91       	pop	r28
    1a68:	df 91       	pop	r29
    1a6a:	08 95       	ret

00001a6c <I2C_writeByte>:

// Responsible for the SPI to receive an array of bytes, a string
void I2C_writeByte(uint8 data) {
    1a6c:	df 93       	push	r29
    1a6e:	cf 93       	push	r28
    1a70:	0f 92       	push	r0
    1a72:	cd b7       	in	r28, 0x3d	; 61
    1a74:	de b7       	in	r29, 0x3e	; 62
    1a76:	89 83       	std	Y+1, r24	; 0x01
	TWCR = (1 << TWEN) | (1 << TWINT);
    1a78:	e6 e5       	ldi	r30, 0x56	; 86
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	84 e8       	ldi	r24, 0x84	; 132
    1a7e:	80 83       	st	Z, r24
	TWDR = data;
    1a80:	e3 e2       	ldi	r30, 0x23	; 35
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	89 81       	ldd	r24, Y+1	; 0x01
    1a86:	80 83       	st	Z, r24

	while(BIT_IS_CLR(TWCR, TWINT)) {
    1a88:	e6 e5       	ldi	r30, 0x56	; 86
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	80 81       	ld	r24, Z
    1a8e:	88 23       	and	r24, r24
    1a90:	dc f7       	brge	.-10     	; 0x1a88 <I2C_writeByte+0x1c>
		// Busy Wait for TWINT set in TWCR Register
		// to ensure that data is sent successfully
	}
}
    1a92:	0f 90       	pop	r0
    1a94:	cf 91       	pop	r28
    1a96:	df 91       	pop	r29
    1a98:	08 95       	ret

00001a9a <I2C_readByteWithACK>:

// Responsible for the SPI to receive an array of bytes, a string
uint8 I2C_readByteWithACK(void) {
    1a9a:	df 93       	push	r29
    1a9c:	cf 93       	push	r28
    1a9e:	cd b7       	in	r28, 0x3d	; 61
    1aa0:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWEA);
    1aa2:	e6 e5       	ldi	r30, 0x56	; 86
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	84 ec       	ldi	r24, 0xC4	; 196
    1aa8:	80 83       	st	Z, r24

	while(BIT_IS_CLR(TWCR, TWINT)) {
    1aaa:	e6 e5       	ldi	r30, 0x56	; 86
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	88 23       	and	r24, r24
    1ab2:	dc f7       	brge	.-10     	; 0x1aaa <I2C_readByteWithACK+0x10>
		// Busy Wait for TWINT set in TWCR Register
		// to ensure that data is sent successfully
	}
	return TWDR;
    1ab4:	e3 e2       	ldi	r30, 0x23	; 35
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	80 81       	ld	r24, Z
}
    1aba:	cf 91       	pop	r28
    1abc:	df 91       	pop	r29
    1abe:	08 95       	ret

00001ac0 <I2C_readByteWithNACK>:

// Responsible for the SPI to receive an array of bytes, a string
uint8 I2C_readByteWithNACK(void) {
    1ac0:	df 93       	push	r29
    1ac2:	cf 93       	push	r28
    1ac4:	cd b7       	in	r28, 0x3d	; 61
    1ac6:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWEN) | (1 << TWINT);
    1ac8:	e6 e5       	ldi	r30, 0x56	; 86
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	84 e8       	ldi	r24, 0x84	; 132
    1ace:	80 83       	st	Z, r24

	while(BIT_IS_CLR(TWCR, TWINT)) {
    1ad0:	e6 e5       	ldi	r30, 0x56	; 86
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	80 81       	ld	r24, Z
    1ad6:	88 23       	and	r24, r24
    1ad8:	dc f7       	brge	.-10     	; 0x1ad0 <I2C_readByteWithNACK+0x10>
		// Busy Wait for TWINT set in TWCR Register
		// to ensure that data is sent successfully
	}
	return TWDR;
    1ada:	e3 e2       	ldi	r30, 0x23	; 35
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	80 81       	ld	r24, Z
}
    1ae0:	cf 91       	pop	r28
    1ae2:	df 91       	pop	r29
    1ae4:	08 95       	ret

00001ae6 <I2C_getStatus>:

// Responsible for the SPI to receive an array of bytes, a string
uint8 I2C_getStatus(void) {
    1ae6:	df 93       	push	r29
    1ae8:	cf 93       	push	r28
    1aea:	0f 92       	push	r0
    1aec:	cd b7       	in	r28, 0x3d	; 61
    1aee:	de b7       	in	r29, 0x3e	; 62
	uint8 I2CStatus;
	I2CStatus = TWSR & I2C_INITIALSTATUS;
    1af0:	e1 e2       	ldi	r30, 0x21	; 33
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	80 81       	ld	r24, Z
    1af6:	88 7f       	andi	r24, 0xF8	; 248
    1af8:	89 83       	std	Y+1, r24	; 0x01
	return I2CStatus;
    1afa:	89 81       	ldd	r24, Y+1	; 0x01
}
    1afc:	0f 90       	pop	r0
    1afe:	cf 91       	pop	r28
    1b00:	df 91       	pop	r29
    1b02:	08 95       	ret

00001b04 <GPIO_setupPinDirection>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
GPIO_Error_t GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction) {
    1b04:	df 93       	push	r29
    1b06:	cf 93       	push	r28
    1b08:	00 d0       	rcall	.+0      	; 0x1b0a <GPIO_setupPinDirection+0x6>
    1b0a:	00 d0       	rcall	.+0      	; 0x1b0c <GPIO_setupPinDirection+0x8>
    1b0c:	00 d0       	rcall	.+0      	; 0x1b0e <GPIO_setupPinDirection+0xa>
    1b0e:	cd b7       	in	r28, 0x3d	; 61
    1b10:	de b7       	in	r29, 0x3e	; 62
    1b12:	8a 83       	std	Y+2, r24	; 0x02
    1b14:	6b 83       	std	Y+3, r22	; 0x03
    1b16:	4c 83       	std	Y+4, r20	; 0x04
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t GPIO_Driver_Checker = NULL;
    1b18:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    1b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1c:	88 30       	cpi	r24, 0x08	; 8
    1b1e:	18 f0       	brcs	.+6      	; 0x1b26 <GPIO_setupPinDirection+0x22>
		// Checks if the entered pin number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	89 83       	std	Y+1, r24	; 0x01
    1b24:	e1 c0       	rjmp	.+450    	; 0x1ce8 <GPIO_setupPinDirection+0x1e4>
	}
	else if((port_num >= NUM_OF_PORTS)) {
    1b26:	8a 81       	ldd	r24, Y+2	; 0x02
    1b28:	84 30       	cpi	r24, 0x04	; 4
    1b2a:	18 f0       	brcs	.+6      	; 0x1b32 <GPIO_setupPinDirection+0x2e>
		// Checks if the entered port number is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    1b2c:	82 e0       	ldi	r24, 0x02	; 2
    1b2e:	89 83       	std	Y+1, r24	; 0x01
    1b30:	db c0       	rjmp	.+438    	; 0x1ce8 <GPIO_setupPinDirection+0x1e4>
	}
	else if((direction != PIN_INPUT) && (direction != PIN_OUTPUT)) {
    1b32:	8c 81       	ldd	r24, Y+4	; 0x04
    1b34:	88 23       	and	r24, r24
    1b36:	31 f0       	breq	.+12     	; 0x1b44 <GPIO_setupPinDirection+0x40>
    1b38:	8c 81       	ldd	r24, Y+4	; 0x04
    1b3a:	81 30       	cpi	r24, 0x01	; 1
    1b3c:	19 f0       	breq	.+6      	; 0x1b44 <GPIO_setupPinDirection+0x40>
		// Checks if the entered direction is invalid or not
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
    1b3e:	83 e0       	ldi	r24, 0x03	; 3
    1b40:	89 83       	std	Y+1, r24	; 0x01
    1b42:	d2 c0       	rjmp	.+420    	; 0x1ce8 <GPIO_setupPinDirection+0x1e4>
	}
	else {
		// Setup the pin direction as required
		switch(port_num) {
    1b44:	8a 81       	ldd	r24, Y+2	; 0x02
    1b46:	28 2f       	mov	r18, r24
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	3e 83       	std	Y+6, r19	; 0x06
    1b4c:	2d 83       	std	Y+5, r18	; 0x05
    1b4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b50:	9e 81       	ldd	r25, Y+6	; 0x06
    1b52:	81 30       	cpi	r24, 0x01	; 1
    1b54:	91 05       	cpc	r25, r1
    1b56:	09 f4       	brne	.+2      	; 0x1b5a <GPIO_setupPinDirection+0x56>
    1b58:	43 c0       	rjmp	.+134    	; 0x1be0 <GPIO_setupPinDirection+0xdc>
    1b5a:	2d 81       	ldd	r18, Y+5	; 0x05
    1b5c:	3e 81       	ldd	r19, Y+6	; 0x06
    1b5e:	22 30       	cpi	r18, 0x02	; 2
    1b60:	31 05       	cpc	r19, r1
    1b62:	2c f4       	brge	.+10     	; 0x1b6e <GPIO_setupPinDirection+0x6a>
    1b64:	8d 81       	ldd	r24, Y+5	; 0x05
    1b66:	9e 81       	ldd	r25, Y+6	; 0x06
    1b68:	00 97       	sbiw	r24, 0x00	; 0
    1b6a:	71 f0       	breq	.+28     	; 0x1b88 <GPIO_setupPinDirection+0x84>
    1b6c:	bc c0       	rjmp	.+376    	; 0x1ce6 <GPIO_setupPinDirection+0x1e2>
    1b6e:	2d 81       	ldd	r18, Y+5	; 0x05
    1b70:	3e 81       	ldd	r19, Y+6	; 0x06
    1b72:	22 30       	cpi	r18, 0x02	; 2
    1b74:	31 05       	cpc	r19, r1
    1b76:	09 f4       	brne	.+2      	; 0x1b7a <GPIO_setupPinDirection+0x76>
    1b78:	5f c0       	rjmp	.+190    	; 0x1c38 <GPIO_setupPinDirection+0x134>
    1b7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b7e:	83 30       	cpi	r24, 0x03	; 3
    1b80:	91 05       	cpc	r25, r1
    1b82:	09 f4       	brne	.+2      	; 0x1b86 <GPIO_setupPinDirection+0x82>
    1b84:	85 c0       	rjmp	.+266    	; 0x1c90 <GPIO_setupPinDirection+0x18c>
    1b86:	af c0       	rjmp	.+350    	; 0x1ce6 <GPIO_setupPinDirection+0x1e2>
		case PORT_A:
			if(direction == PIN_OUTPUT) {
    1b88:	8c 81       	ldd	r24, Y+4	; 0x04
    1b8a:	81 30       	cpi	r24, 0x01	; 1
    1b8c:	a1 f4       	brne	.+40     	; 0x1bb6 <GPIO_setupPinDirection+0xb2>
				SET_BIT(DDRA, pin_num);
    1b8e:	aa e3       	ldi	r26, 0x3A	; 58
    1b90:	b0 e0       	ldi	r27, 0x00	; 0
    1b92:	ea e3       	ldi	r30, 0x3A	; 58
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	80 81       	ld	r24, Z
    1b98:	48 2f       	mov	r20, r24
    1b9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9c:	28 2f       	mov	r18, r24
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	81 e0       	ldi	r24, 0x01	; 1
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	02 2e       	mov	r0, r18
    1ba6:	02 c0       	rjmp	.+4      	; 0x1bac <GPIO_setupPinDirection+0xa8>
    1ba8:	88 0f       	add	r24, r24
    1baa:	99 1f       	adc	r25, r25
    1bac:	0a 94       	dec	r0
    1bae:	e2 f7       	brpl	.-8      	; 0x1ba8 <GPIO_setupPinDirection+0xa4>
    1bb0:	84 2b       	or	r24, r20
    1bb2:	8c 93       	st	X, r24
    1bb4:	98 c0       	rjmp	.+304    	; 0x1ce6 <GPIO_setupPinDirection+0x1e2>
			}
			else {
				CLR_BIT(DDRA, pin_num);
    1bb6:	aa e3       	ldi	r26, 0x3A	; 58
    1bb8:	b0 e0       	ldi	r27, 0x00	; 0
    1bba:	ea e3       	ldi	r30, 0x3A	; 58
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	80 81       	ld	r24, Z
    1bc0:	48 2f       	mov	r20, r24
    1bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc4:	28 2f       	mov	r18, r24
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	02 2e       	mov	r0, r18
    1bce:	02 c0       	rjmp	.+4      	; 0x1bd4 <GPIO_setupPinDirection+0xd0>
    1bd0:	88 0f       	add	r24, r24
    1bd2:	99 1f       	adc	r25, r25
    1bd4:	0a 94       	dec	r0
    1bd6:	e2 f7       	brpl	.-8      	; 0x1bd0 <GPIO_setupPinDirection+0xcc>
    1bd8:	80 95       	com	r24
    1bda:	84 23       	and	r24, r20
    1bdc:	8c 93       	st	X, r24
    1bde:	83 c0       	rjmp	.+262    	; 0x1ce6 <GPIO_setupPinDirection+0x1e2>
			}
			break;
		case PORT_B:
			if(direction == PIN_OUTPUT) {
    1be0:	8c 81       	ldd	r24, Y+4	; 0x04
    1be2:	81 30       	cpi	r24, 0x01	; 1
    1be4:	a1 f4       	brne	.+40     	; 0x1c0e <GPIO_setupPinDirection+0x10a>
				SET_BIT(DDRB,pin_num);
    1be6:	a7 e3       	ldi	r26, 0x37	; 55
    1be8:	b0 e0       	ldi	r27, 0x00	; 0
    1bea:	e7 e3       	ldi	r30, 0x37	; 55
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	80 81       	ld	r24, Z
    1bf0:	48 2f       	mov	r20, r24
    1bf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf4:	28 2f       	mov	r18, r24
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	81 e0       	ldi	r24, 0x01	; 1
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	02 2e       	mov	r0, r18
    1bfe:	02 c0       	rjmp	.+4      	; 0x1c04 <GPIO_setupPinDirection+0x100>
    1c00:	88 0f       	add	r24, r24
    1c02:	99 1f       	adc	r25, r25
    1c04:	0a 94       	dec	r0
    1c06:	e2 f7       	brpl	.-8      	; 0x1c00 <GPIO_setupPinDirection+0xfc>
    1c08:	84 2b       	or	r24, r20
    1c0a:	8c 93       	st	X, r24
    1c0c:	6c c0       	rjmp	.+216    	; 0x1ce6 <GPIO_setupPinDirection+0x1e2>
			}
			else {
				CLR_BIT(DDRB,pin_num);
    1c0e:	a7 e3       	ldi	r26, 0x37	; 55
    1c10:	b0 e0       	ldi	r27, 0x00	; 0
    1c12:	e7 e3       	ldi	r30, 0x37	; 55
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	80 81       	ld	r24, Z
    1c18:	48 2f       	mov	r20, r24
    1c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1c:	28 2f       	mov	r18, r24
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	02 2e       	mov	r0, r18
    1c26:	02 c0       	rjmp	.+4      	; 0x1c2c <GPIO_setupPinDirection+0x128>
    1c28:	88 0f       	add	r24, r24
    1c2a:	99 1f       	adc	r25, r25
    1c2c:	0a 94       	dec	r0
    1c2e:	e2 f7       	brpl	.-8      	; 0x1c28 <GPIO_setupPinDirection+0x124>
    1c30:	80 95       	com	r24
    1c32:	84 23       	and	r24, r20
    1c34:	8c 93       	st	X, r24
    1c36:	57 c0       	rjmp	.+174    	; 0x1ce6 <GPIO_setupPinDirection+0x1e2>
			}
			break;
		case PORT_C:
			if(direction == PIN_OUTPUT) {
    1c38:	8c 81       	ldd	r24, Y+4	; 0x04
    1c3a:	81 30       	cpi	r24, 0x01	; 1
    1c3c:	a1 f4       	brne	.+40     	; 0x1c66 <GPIO_setupPinDirection+0x162>
				SET_BIT(DDRC,pin_num);
    1c3e:	a4 e3       	ldi	r26, 0x34	; 52
    1c40:	b0 e0       	ldi	r27, 0x00	; 0
    1c42:	e4 e3       	ldi	r30, 0x34	; 52
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	80 81       	ld	r24, Z
    1c48:	48 2f       	mov	r20, r24
    1c4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4c:	28 2f       	mov	r18, r24
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	02 2e       	mov	r0, r18
    1c56:	02 c0       	rjmp	.+4      	; 0x1c5c <GPIO_setupPinDirection+0x158>
    1c58:	88 0f       	add	r24, r24
    1c5a:	99 1f       	adc	r25, r25
    1c5c:	0a 94       	dec	r0
    1c5e:	e2 f7       	brpl	.-8      	; 0x1c58 <GPIO_setupPinDirection+0x154>
    1c60:	84 2b       	or	r24, r20
    1c62:	8c 93       	st	X, r24
    1c64:	40 c0       	rjmp	.+128    	; 0x1ce6 <GPIO_setupPinDirection+0x1e2>
			}
			else {
				CLR_BIT(DDRC,pin_num);
    1c66:	a4 e3       	ldi	r26, 0x34	; 52
    1c68:	b0 e0       	ldi	r27, 0x00	; 0
    1c6a:	e4 e3       	ldi	r30, 0x34	; 52
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	80 81       	ld	r24, Z
    1c70:	48 2f       	mov	r20, r24
    1c72:	8b 81       	ldd	r24, Y+3	; 0x03
    1c74:	28 2f       	mov	r18, r24
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	02 2e       	mov	r0, r18
    1c7e:	02 c0       	rjmp	.+4      	; 0x1c84 <GPIO_setupPinDirection+0x180>
    1c80:	88 0f       	add	r24, r24
    1c82:	99 1f       	adc	r25, r25
    1c84:	0a 94       	dec	r0
    1c86:	e2 f7       	brpl	.-8      	; 0x1c80 <GPIO_setupPinDirection+0x17c>
    1c88:	80 95       	com	r24
    1c8a:	84 23       	and	r24, r20
    1c8c:	8c 93       	st	X, r24
    1c8e:	2b c0       	rjmp	.+86     	; 0x1ce6 <GPIO_setupPinDirection+0x1e2>
			}
			break;
		case PORT_D:
			if(direction == PIN_OUTPUT) {
    1c90:	8c 81       	ldd	r24, Y+4	; 0x04
    1c92:	81 30       	cpi	r24, 0x01	; 1
    1c94:	a1 f4       	brne	.+40     	; 0x1cbe <GPIO_setupPinDirection+0x1ba>
				SET_BIT(DDRD,pin_num);
    1c96:	a1 e3       	ldi	r26, 0x31	; 49
    1c98:	b0 e0       	ldi	r27, 0x00	; 0
    1c9a:	e1 e3       	ldi	r30, 0x31	; 49
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	80 81       	ld	r24, Z
    1ca0:	48 2f       	mov	r20, r24
    1ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca4:	28 2f       	mov	r18, r24
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	02 2e       	mov	r0, r18
    1cae:	02 c0       	rjmp	.+4      	; 0x1cb4 <GPIO_setupPinDirection+0x1b0>
    1cb0:	88 0f       	add	r24, r24
    1cb2:	99 1f       	adc	r25, r25
    1cb4:	0a 94       	dec	r0
    1cb6:	e2 f7       	brpl	.-8      	; 0x1cb0 <GPIO_setupPinDirection+0x1ac>
    1cb8:	84 2b       	or	r24, r20
    1cba:	8c 93       	st	X, r24
    1cbc:	14 c0       	rjmp	.+40     	; 0x1ce6 <GPIO_setupPinDirection+0x1e2>
			}
			else {
				CLR_BIT(DDRD,pin_num);
    1cbe:	a1 e3       	ldi	r26, 0x31	; 49
    1cc0:	b0 e0       	ldi	r27, 0x00	; 0
    1cc2:	e1 e3       	ldi	r30, 0x31	; 49
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	80 81       	ld	r24, Z
    1cc8:	48 2f       	mov	r20, r24
    1cca:	8b 81       	ldd	r24, Y+3	; 0x03
    1ccc:	28 2f       	mov	r18, r24
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	02 2e       	mov	r0, r18
    1cd6:	02 c0       	rjmp	.+4      	; 0x1cdc <GPIO_setupPinDirection+0x1d8>
    1cd8:	88 0f       	add	r24, r24
    1cda:	99 1f       	adc	r25, r25
    1cdc:	0a 94       	dec	r0
    1cde:	e2 f7       	brpl	.-8      	; 0x1cd8 <GPIO_setupPinDirection+0x1d4>
    1ce0:	80 95       	com	r24
    1ce2:	84 23       	and	r24, r20
    1ce4:	8c 93       	st	X, r24
			}
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    1ce6:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    1ce8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cea:	26 96       	adiw	r28, 0x06	; 6
    1cec:	0f b6       	in	r0, 0x3f	; 63
    1cee:	f8 94       	cli
    1cf0:	de bf       	out	0x3e, r29	; 62
    1cf2:	0f be       	out	0x3f, r0	; 63
    1cf4:	cd bf       	out	0x3d, r28	; 61
    1cf6:	cf 91       	pop	r28
    1cf8:	df 91       	pop	r29
    1cfa:	08 95       	ret

00001cfc <GPIO_writePin>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
GPIO_Error_t GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value) {
    1cfc:	df 93       	push	r29
    1cfe:	cf 93       	push	r28
    1d00:	00 d0       	rcall	.+0      	; 0x1d02 <GPIO_writePin+0x6>
    1d02:	00 d0       	rcall	.+0      	; 0x1d04 <GPIO_writePin+0x8>
    1d04:	00 d0       	rcall	.+0      	; 0x1d06 <GPIO_writePin+0xa>
    1d06:	cd b7       	in	r28, 0x3d	; 61
    1d08:	de b7       	in	r29, 0x3e	; 62
    1d0a:	8a 83       	std	Y+2, r24	; 0x02
    1d0c:	6b 83       	std	Y+3, r22	; 0x03
    1d0e:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t GPIO_Driver_Checker = NULL;
    1d10:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    1d12:	8b 81       	ldd	r24, Y+3	; 0x03
    1d14:	88 30       	cpi	r24, 0x08	; 8
    1d16:	18 f0       	brcs	.+6      	; 0x1d1e <GPIO_writePin+0x22>
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
    1d18:	81 e0       	ldi	r24, 0x01	; 1
    1d1a:	89 83       	std	Y+1, r24	; 0x01
    1d1c:	e1 c0       	rjmp	.+450    	; 0x1ee0 <GPIO_writePin+0x1e4>
	}
	else if((port_num >= NUM_OF_PORTS)) {
    1d1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d20:	84 30       	cpi	r24, 0x04	; 4
    1d22:	18 f0       	brcs	.+6      	; 0x1d2a <GPIO_writePin+0x2e>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    1d24:	82 e0       	ldi	r24, 0x02	; 2
    1d26:	89 83       	std	Y+1, r24	; 0x01
    1d28:	db c0       	rjmp	.+438    	; 0x1ee0 <GPIO_writePin+0x1e4>
	}
	else if((value != LOGIC_HIGH) && (value != LOGIC_LOW)) {
    1d2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d2c:	81 30       	cpi	r24, 0x01	; 1
    1d2e:	31 f0       	breq	.+12     	; 0x1d3c <GPIO_writePin+0x40>
    1d30:	8c 81       	ldd	r24, Y+4	; 0x04
    1d32:	88 23       	and	r24, r24
    1d34:	19 f0       	breq	.+6      	; 0x1d3c <GPIO_writePin+0x40>
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
    1d36:	83 e0       	ldi	r24, 0x03	; 3
    1d38:	89 83       	std	Y+1, r24	; 0x01
    1d3a:	d2 c0       	rjmp	.+420    	; 0x1ee0 <GPIO_writePin+0x1e4>
	}
	else {
		switch(port_num) {
    1d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3e:	28 2f       	mov	r18, r24
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	3e 83       	std	Y+6, r19	; 0x06
    1d44:	2d 83       	std	Y+5, r18	; 0x05
    1d46:	8d 81       	ldd	r24, Y+5	; 0x05
    1d48:	9e 81       	ldd	r25, Y+6	; 0x06
    1d4a:	81 30       	cpi	r24, 0x01	; 1
    1d4c:	91 05       	cpc	r25, r1
    1d4e:	09 f4       	brne	.+2      	; 0x1d52 <GPIO_writePin+0x56>
    1d50:	43 c0       	rjmp	.+134    	; 0x1dd8 <GPIO_writePin+0xdc>
    1d52:	2d 81       	ldd	r18, Y+5	; 0x05
    1d54:	3e 81       	ldd	r19, Y+6	; 0x06
    1d56:	22 30       	cpi	r18, 0x02	; 2
    1d58:	31 05       	cpc	r19, r1
    1d5a:	2c f4       	brge	.+10     	; 0x1d66 <GPIO_writePin+0x6a>
    1d5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d60:	00 97       	sbiw	r24, 0x00	; 0
    1d62:	71 f0       	breq	.+28     	; 0x1d80 <GPIO_writePin+0x84>
    1d64:	bc c0       	rjmp	.+376    	; 0x1ede <GPIO_writePin+0x1e2>
    1d66:	2d 81       	ldd	r18, Y+5	; 0x05
    1d68:	3e 81       	ldd	r19, Y+6	; 0x06
    1d6a:	22 30       	cpi	r18, 0x02	; 2
    1d6c:	31 05       	cpc	r19, r1
    1d6e:	09 f4       	brne	.+2      	; 0x1d72 <GPIO_writePin+0x76>
    1d70:	5f c0       	rjmp	.+190    	; 0x1e30 <GPIO_writePin+0x134>
    1d72:	8d 81       	ldd	r24, Y+5	; 0x05
    1d74:	9e 81       	ldd	r25, Y+6	; 0x06
    1d76:	83 30       	cpi	r24, 0x03	; 3
    1d78:	91 05       	cpc	r25, r1
    1d7a:	09 f4       	brne	.+2      	; 0x1d7e <GPIO_writePin+0x82>
    1d7c:	85 c0       	rjmp	.+266    	; 0x1e88 <GPIO_writePin+0x18c>
    1d7e:	af c0       	rjmp	.+350    	; 0x1ede <GPIO_writePin+0x1e2>
		case PORT_A:
			if(value == LOGIC_HIGH) {
    1d80:	8c 81       	ldd	r24, Y+4	; 0x04
    1d82:	81 30       	cpi	r24, 0x01	; 1
    1d84:	a1 f4       	brne	.+40     	; 0x1dae <GPIO_writePin+0xb2>
				SET_BIT(PORTA,pin_num);
    1d86:	ab e3       	ldi	r26, 0x3B	; 59
    1d88:	b0 e0       	ldi	r27, 0x00	; 0
    1d8a:	eb e3       	ldi	r30, 0x3B	; 59
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	80 81       	ld	r24, Z
    1d90:	48 2f       	mov	r20, r24
    1d92:	8b 81       	ldd	r24, Y+3	; 0x03
    1d94:	28 2f       	mov	r18, r24
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	81 e0       	ldi	r24, 0x01	; 1
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	02 2e       	mov	r0, r18
    1d9e:	02 c0       	rjmp	.+4      	; 0x1da4 <GPIO_writePin+0xa8>
    1da0:	88 0f       	add	r24, r24
    1da2:	99 1f       	adc	r25, r25
    1da4:	0a 94       	dec	r0
    1da6:	e2 f7       	brpl	.-8      	; 0x1da0 <GPIO_writePin+0xa4>
    1da8:	84 2b       	or	r24, r20
    1daa:	8c 93       	st	X, r24
    1dac:	98 c0       	rjmp	.+304    	; 0x1ede <GPIO_writePin+0x1e2>
			}
			else {
				CLR_BIT(PORTA,pin_num);
    1dae:	ab e3       	ldi	r26, 0x3B	; 59
    1db0:	b0 e0       	ldi	r27, 0x00	; 0
    1db2:	eb e3       	ldi	r30, 0x3B	; 59
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	80 81       	ld	r24, Z
    1db8:	48 2f       	mov	r20, r24
    1dba:	8b 81       	ldd	r24, Y+3	; 0x03
    1dbc:	28 2f       	mov	r18, r24
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	81 e0       	ldi	r24, 0x01	; 1
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	02 2e       	mov	r0, r18
    1dc6:	02 c0       	rjmp	.+4      	; 0x1dcc <GPIO_writePin+0xd0>
    1dc8:	88 0f       	add	r24, r24
    1dca:	99 1f       	adc	r25, r25
    1dcc:	0a 94       	dec	r0
    1dce:	e2 f7       	brpl	.-8      	; 0x1dc8 <GPIO_writePin+0xcc>
    1dd0:	80 95       	com	r24
    1dd2:	84 23       	and	r24, r20
    1dd4:	8c 93       	st	X, r24
    1dd6:	83 c0       	rjmp	.+262    	; 0x1ede <GPIO_writePin+0x1e2>
			}
			break;
		case PORT_B:
			if(value == LOGIC_HIGH) {
    1dd8:	8c 81       	ldd	r24, Y+4	; 0x04
    1dda:	81 30       	cpi	r24, 0x01	; 1
    1ddc:	a1 f4       	brne	.+40     	; 0x1e06 <GPIO_writePin+0x10a>
				SET_BIT(PORTB,pin_num);
    1dde:	a8 e3       	ldi	r26, 0x38	; 56
    1de0:	b0 e0       	ldi	r27, 0x00	; 0
    1de2:	e8 e3       	ldi	r30, 0x38	; 56
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	80 81       	ld	r24, Z
    1de8:	48 2f       	mov	r20, r24
    1dea:	8b 81       	ldd	r24, Y+3	; 0x03
    1dec:	28 2f       	mov	r18, r24
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	02 2e       	mov	r0, r18
    1df6:	02 c0       	rjmp	.+4      	; 0x1dfc <GPIO_writePin+0x100>
    1df8:	88 0f       	add	r24, r24
    1dfa:	99 1f       	adc	r25, r25
    1dfc:	0a 94       	dec	r0
    1dfe:	e2 f7       	brpl	.-8      	; 0x1df8 <GPIO_writePin+0xfc>
    1e00:	84 2b       	or	r24, r20
    1e02:	8c 93       	st	X, r24
    1e04:	6c c0       	rjmp	.+216    	; 0x1ede <GPIO_writePin+0x1e2>
			}
			else {
				CLR_BIT(PORTB,pin_num);
    1e06:	a8 e3       	ldi	r26, 0x38	; 56
    1e08:	b0 e0       	ldi	r27, 0x00	; 0
    1e0a:	e8 e3       	ldi	r30, 0x38	; 56
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	80 81       	ld	r24, Z
    1e10:	48 2f       	mov	r20, r24
    1e12:	8b 81       	ldd	r24, Y+3	; 0x03
    1e14:	28 2f       	mov	r18, r24
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	81 e0       	ldi	r24, 0x01	; 1
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	02 2e       	mov	r0, r18
    1e1e:	02 c0       	rjmp	.+4      	; 0x1e24 <GPIO_writePin+0x128>
    1e20:	88 0f       	add	r24, r24
    1e22:	99 1f       	adc	r25, r25
    1e24:	0a 94       	dec	r0
    1e26:	e2 f7       	brpl	.-8      	; 0x1e20 <GPIO_writePin+0x124>
    1e28:	80 95       	com	r24
    1e2a:	84 23       	and	r24, r20
    1e2c:	8c 93       	st	X, r24
    1e2e:	57 c0       	rjmp	.+174    	; 0x1ede <GPIO_writePin+0x1e2>
			}
			break;
		case PORT_C:
			if(value == LOGIC_HIGH) {
    1e30:	8c 81       	ldd	r24, Y+4	; 0x04
    1e32:	81 30       	cpi	r24, 0x01	; 1
    1e34:	a1 f4       	brne	.+40     	; 0x1e5e <GPIO_writePin+0x162>
				SET_BIT(PORTC,pin_num);
    1e36:	a5 e3       	ldi	r26, 0x35	; 53
    1e38:	b0 e0       	ldi	r27, 0x00	; 0
    1e3a:	e5 e3       	ldi	r30, 0x35	; 53
    1e3c:	f0 e0       	ldi	r31, 0x00	; 0
    1e3e:	80 81       	ld	r24, Z
    1e40:	48 2f       	mov	r20, r24
    1e42:	8b 81       	ldd	r24, Y+3	; 0x03
    1e44:	28 2f       	mov	r18, r24
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	81 e0       	ldi	r24, 0x01	; 1
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	02 2e       	mov	r0, r18
    1e4e:	02 c0       	rjmp	.+4      	; 0x1e54 <GPIO_writePin+0x158>
    1e50:	88 0f       	add	r24, r24
    1e52:	99 1f       	adc	r25, r25
    1e54:	0a 94       	dec	r0
    1e56:	e2 f7       	brpl	.-8      	; 0x1e50 <GPIO_writePin+0x154>
    1e58:	84 2b       	or	r24, r20
    1e5a:	8c 93       	st	X, r24
    1e5c:	40 c0       	rjmp	.+128    	; 0x1ede <GPIO_writePin+0x1e2>
			}
			else {
				CLR_BIT(PORTC,pin_num);
    1e5e:	a5 e3       	ldi	r26, 0x35	; 53
    1e60:	b0 e0       	ldi	r27, 0x00	; 0
    1e62:	e5 e3       	ldi	r30, 0x35	; 53
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	80 81       	ld	r24, Z
    1e68:	48 2f       	mov	r20, r24
    1e6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6c:	28 2f       	mov	r18, r24
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	02 2e       	mov	r0, r18
    1e76:	02 c0       	rjmp	.+4      	; 0x1e7c <GPIO_writePin+0x180>
    1e78:	88 0f       	add	r24, r24
    1e7a:	99 1f       	adc	r25, r25
    1e7c:	0a 94       	dec	r0
    1e7e:	e2 f7       	brpl	.-8      	; 0x1e78 <GPIO_writePin+0x17c>
    1e80:	80 95       	com	r24
    1e82:	84 23       	and	r24, r20
    1e84:	8c 93       	st	X, r24
    1e86:	2b c0       	rjmp	.+86     	; 0x1ede <GPIO_writePin+0x1e2>
			}
			break;
		case PORT_D:
			if(value == LOGIC_HIGH) {
    1e88:	8c 81       	ldd	r24, Y+4	; 0x04
    1e8a:	81 30       	cpi	r24, 0x01	; 1
    1e8c:	a1 f4       	brne	.+40     	; 0x1eb6 <GPIO_writePin+0x1ba>
				SET_BIT(PORTD,pin_num);
    1e8e:	a2 e3       	ldi	r26, 0x32	; 50
    1e90:	b0 e0       	ldi	r27, 0x00	; 0
    1e92:	e2 e3       	ldi	r30, 0x32	; 50
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	80 81       	ld	r24, Z
    1e98:	48 2f       	mov	r20, r24
    1e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9c:	28 2f       	mov	r18, r24
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	81 e0       	ldi	r24, 0x01	; 1
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	02 2e       	mov	r0, r18
    1ea6:	02 c0       	rjmp	.+4      	; 0x1eac <GPIO_writePin+0x1b0>
    1ea8:	88 0f       	add	r24, r24
    1eaa:	99 1f       	adc	r25, r25
    1eac:	0a 94       	dec	r0
    1eae:	e2 f7       	brpl	.-8      	; 0x1ea8 <GPIO_writePin+0x1ac>
    1eb0:	84 2b       	or	r24, r20
    1eb2:	8c 93       	st	X, r24
    1eb4:	14 c0       	rjmp	.+40     	; 0x1ede <GPIO_writePin+0x1e2>
			}
			else {
				CLR_BIT(PORTD,pin_num);
    1eb6:	a2 e3       	ldi	r26, 0x32	; 50
    1eb8:	b0 e0       	ldi	r27, 0x00	; 0
    1eba:	e2 e3       	ldi	r30, 0x32	; 50
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	80 81       	ld	r24, Z
    1ec0:	48 2f       	mov	r20, r24
    1ec2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec4:	28 2f       	mov	r18, r24
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	81 e0       	ldi	r24, 0x01	; 1
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	02 2e       	mov	r0, r18
    1ece:	02 c0       	rjmp	.+4      	; 0x1ed4 <GPIO_writePin+0x1d8>
    1ed0:	88 0f       	add	r24, r24
    1ed2:	99 1f       	adc	r25, r25
    1ed4:	0a 94       	dec	r0
    1ed6:	e2 f7       	brpl	.-8      	; 0x1ed0 <GPIO_writePin+0x1d4>
    1ed8:	80 95       	com	r24
    1eda:	84 23       	and	r24, r20
    1edc:	8c 93       	st	X, r24
			}
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    1ede:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    1ee0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ee2:	26 96       	adiw	r28, 0x06	; 6
    1ee4:	0f b6       	in	r0, 0x3f	; 63
    1ee6:	f8 94       	cli
    1ee8:	de bf       	out	0x3e, r29	; 62
    1eea:	0f be       	out	0x3f, r0	; 63
    1eec:	cd bf       	out	0x3d, r28	; 61
    1eee:	cf 91       	pop	r28
    1ef0:	df 91       	pop	r29
    1ef2:	08 95       	ret

00001ef4 <GPIO_togglePin>:
/*
 * Description :
 * Toggles a certain pin when requested.
 * If the input port number or pin number are not correct, The function will return an error.
 */
GPIO_Error_t GPIO_togglePin(uint8 port_num, uint8 pin_num) {
    1ef4:	df 93       	push	r29
    1ef6:	cf 93       	push	r28
    1ef8:	00 d0       	rcall	.+0      	; 0x1efa <GPIO_togglePin+0x6>
    1efa:	00 d0       	rcall	.+0      	; 0x1efc <GPIO_togglePin+0x8>
    1efc:	0f 92       	push	r0
    1efe:	cd b7       	in	r28, 0x3d	; 61
    1f00:	de b7       	in	r29, 0x3e	; 62
    1f02:	8a 83       	std	Y+2, r24	; 0x02
    1f04:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t GPIO_Driver_Checker = NULL;
    1f06:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    1f08:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0a:	88 30       	cpi	r24, 0x08	; 8
    1f0c:	18 f0       	brcs	.+6      	; 0x1f14 <GPIO_togglePin+0x20>
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	89 83       	std	Y+1, r24	; 0x01
    1f12:	75 c0       	rjmp	.+234    	; 0x1ffe <GPIO_togglePin+0x10a>
	}
	else if((port_num >= NUM_OF_PORTS)) {
    1f14:	8a 81       	ldd	r24, Y+2	; 0x02
    1f16:	84 30       	cpi	r24, 0x04	; 4
    1f18:	18 f0       	brcs	.+6      	; 0x1f20 <GPIO_togglePin+0x2c>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    1f1a:	82 e0       	ldi	r24, 0x02	; 2
    1f1c:	89 83       	std	Y+1, r24	; 0x01
    1f1e:	6f c0       	rjmp	.+222    	; 0x1ffe <GPIO_togglePin+0x10a>
	}
	else {
		switch(port_num) {
    1f20:	8a 81       	ldd	r24, Y+2	; 0x02
    1f22:	28 2f       	mov	r18, r24
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	3d 83       	std	Y+5, r19	; 0x05
    1f28:	2c 83       	std	Y+4, r18	; 0x04
    1f2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f2c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f2e:	81 30       	cpi	r24, 0x01	; 1
    1f30:	91 05       	cpc	r25, r1
    1f32:	49 f1       	breq	.+82     	; 0x1f86 <GPIO_togglePin+0x92>
    1f34:	2c 81       	ldd	r18, Y+4	; 0x04
    1f36:	3d 81       	ldd	r19, Y+5	; 0x05
    1f38:	22 30       	cpi	r18, 0x02	; 2
    1f3a:	31 05       	cpc	r19, r1
    1f3c:	2c f4       	brge	.+10     	; 0x1f48 <GPIO_togglePin+0x54>
    1f3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f40:	9d 81       	ldd	r25, Y+5	; 0x05
    1f42:	00 97       	sbiw	r24, 0x00	; 0
    1f44:	61 f0       	breq	.+24     	; 0x1f5e <GPIO_togglePin+0x6a>
    1f46:	5a c0       	rjmp	.+180    	; 0x1ffc <GPIO_togglePin+0x108>
    1f48:	2c 81       	ldd	r18, Y+4	; 0x04
    1f4a:	3d 81       	ldd	r19, Y+5	; 0x05
    1f4c:	22 30       	cpi	r18, 0x02	; 2
    1f4e:	31 05       	cpc	r19, r1
    1f50:	71 f1       	breq	.+92     	; 0x1fae <GPIO_togglePin+0xba>
    1f52:	8c 81       	ldd	r24, Y+4	; 0x04
    1f54:	9d 81       	ldd	r25, Y+5	; 0x05
    1f56:	83 30       	cpi	r24, 0x03	; 3
    1f58:	91 05       	cpc	r25, r1
    1f5a:	e9 f1       	breq	.+122    	; 0x1fd6 <GPIO_togglePin+0xe2>
    1f5c:	4f c0       	rjmp	.+158    	; 0x1ffc <GPIO_togglePin+0x108>
		case PORT_A:
			TOG_BIT(PORTA,pin_num);
    1f5e:	ab e3       	ldi	r26, 0x3B	; 59
    1f60:	b0 e0       	ldi	r27, 0x00	; 0
    1f62:	eb e3       	ldi	r30, 0x3B	; 59
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	80 81       	ld	r24, Z
    1f68:	48 2f       	mov	r20, r24
    1f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6c:	28 2f       	mov	r18, r24
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	81 e0       	ldi	r24, 0x01	; 1
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	02 2e       	mov	r0, r18
    1f76:	02 c0       	rjmp	.+4      	; 0x1f7c <GPIO_togglePin+0x88>
    1f78:	88 0f       	add	r24, r24
    1f7a:	99 1f       	adc	r25, r25
    1f7c:	0a 94       	dec	r0
    1f7e:	e2 f7       	brpl	.-8      	; 0x1f78 <GPIO_togglePin+0x84>
    1f80:	84 27       	eor	r24, r20
    1f82:	8c 93       	st	X, r24
    1f84:	3b c0       	rjmp	.+118    	; 0x1ffc <GPIO_togglePin+0x108>
			break;
		case PORT_B:
			TOG_BIT(PORTB,pin_num);
    1f86:	a8 e3       	ldi	r26, 0x38	; 56
    1f88:	b0 e0       	ldi	r27, 0x00	; 0
    1f8a:	e8 e3       	ldi	r30, 0x38	; 56
    1f8c:	f0 e0       	ldi	r31, 0x00	; 0
    1f8e:	80 81       	ld	r24, Z
    1f90:	48 2f       	mov	r20, r24
    1f92:	8b 81       	ldd	r24, Y+3	; 0x03
    1f94:	28 2f       	mov	r18, r24
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	81 e0       	ldi	r24, 0x01	; 1
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	02 2e       	mov	r0, r18
    1f9e:	02 c0       	rjmp	.+4      	; 0x1fa4 <GPIO_togglePin+0xb0>
    1fa0:	88 0f       	add	r24, r24
    1fa2:	99 1f       	adc	r25, r25
    1fa4:	0a 94       	dec	r0
    1fa6:	e2 f7       	brpl	.-8      	; 0x1fa0 <GPIO_togglePin+0xac>
    1fa8:	84 27       	eor	r24, r20
    1faa:	8c 93       	st	X, r24
    1fac:	27 c0       	rjmp	.+78     	; 0x1ffc <GPIO_togglePin+0x108>
			break;
		case PORT_C:
			TOG_BIT(PORTC,pin_num);
    1fae:	a5 e3       	ldi	r26, 0x35	; 53
    1fb0:	b0 e0       	ldi	r27, 0x00	; 0
    1fb2:	e5 e3       	ldi	r30, 0x35	; 53
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	80 81       	ld	r24, Z
    1fb8:	48 2f       	mov	r20, r24
    1fba:	8b 81       	ldd	r24, Y+3	; 0x03
    1fbc:	28 2f       	mov	r18, r24
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	81 e0       	ldi	r24, 0x01	; 1
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	02 2e       	mov	r0, r18
    1fc6:	02 c0       	rjmp	.+4      	; 0x1fcc <GPIO_togglePin+0xd8>
    1fc8:	88 0f       	add	r24, r24
    1fca:	99 1f       	adc	r25, r25
    1fcc:	0a 94       	dec	r0
    1fce:	e2 f7       	brpl	.-8      	; 0x1fc8 <GPIO_togglePin+0xd4>
    1fd0:	84 27       	eor	r24, r20
    1fd2:	8c 93       	st	X, r24
    1fd4:	13 c0       	rjmp	.+38     	; 0x1ffc <GPIO_togglePin+0x108>
			break;
		case PORT_D:
			TOG_BIT(PORTD,pin_num);
    1fd6:	a2 e3       	ldi	r26, 0x32	; 50
    1fd8:	b0 e0       	ldi	r27, 0x00	; 0
    1fda:	e2 e3       	ldi	r30, 0x32	; 50
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	80 81       	ld	r24, Z
    1fe0:	48 2f       	mov	r20, r24
    1fe2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe4:	28 2f       	mov	r18, r24
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	02 2e       	mov	r0, r18
    1fee:	02 c0       	rjmp	.+4      	; 0x1ff4 <GPIO_togglePin+0x100>
    1ff0:	88 0f       	add	r24, r24
    1ff2:	99 1f       	adc	r25, r25
    1ff4:	0a 94       	dec	r0
    1ff6:	e2 f7       	brpl	.-8      	; 0x1ff0 <GPIO_togglePin+0xfc>
    1ff8:	84 27       	eor	r24, r20
    1ffa:	8c 93       	st	X, r24
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    1ffc:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    1ffe:	89 81       	ldd	r24, Y+1	; 0x01
}
    2000:	0f 90       	pop	r0
    2002:	0f 90       	pop	r0
    2004:	0f 90       	pop	r0
    2006:	0f 90       	pop	r0
    2008:	0f 90       	pop	r0
    200a:	cf 91       	pop	r28
    200c:	df 91       	pop	r29
    200e:	08 95       	ret

00002010 <GPIO_readPin>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return an error.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num) {
    2010:	df 93       	push	r29
    2012:	cf 93       	push	r28
    2014:	cd b7       	in	r28, 0x3d	; 61
    2016:	de b7       	in	r29, 0x3e	; 62
    2018:	27 97       	sbiw	r28, 0x07	; 7
    201a:	0f b6       	in	r0, 0x3f	; 63
    201c:	f8 94       	cli
    201e:	de bf       	out	0x3e, r29	; 62
    2020:	0f be       	out	0x3f, r0	; 63
    2022:	cd bf       	out	0x3d, r28	; 61
    2024:	8b 83       	std	Y+3, r24	; 0x03
    2026:	6c 83       	std	Y+4, r22	; 0x04
	uint8 pin_value = LOGIC_LOW;
    2028:	1a 82       	std	Y+2, r1	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t GPIO_Driver_Checker = NULL;
    202a:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    202c:	8c 81       	ldd	r24, Y+4	; 0x04
    202e:	88 30       	cpi	r24, 0x08	; 8
    2030:	28 f0       	brcs	.+10     	; 0x203c <GPIO_readPin+0x2c>
		GPIO_Driver_Checker = GPIO_WRONG_PIN_NUMBER;
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	89 83       	std	Y+1, r24	; 0x01
		return GPIO_Driver_Checker;
    2036:	29 81       	ldd	r18, Y+1	; 0x01
    2038:	2f 83       	std	Y+7, r18	; 0x07
    203a:	8b c0       	rjmp	.+278    	; 0x2152 <GPIO_readPin+0x142>
	}
	else if((port_num >= NUM_OF_PORTS)) {
    203c:	8b 81       	ldd	r24, Y+3	; 0x03
    203e:	84 30       	cpi	r24, 0x04	; 4
    2040:	28 f0       	brcs	.+10     	; 0x204c <GPIO_readPin+0x3c>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    2042:	82 e0       	ldi	r24, 0x02	; 2
    2044:	89 83       	std	Y+1, r24	; 0x01
		return GPIO_Driver_Checker;
    2046:	39 81       	ldd	r19, Y+1	; 0x01
    2048:	3f 83       	std	Y+7, r19	; 0x07
    204a:	83 c0       	rjmp	.+262    	; 0x2152 <GPIO_readPin+0x142>
	}
	else {
		/* Read the pin value as required */
		switch(port_num) {
    204c:	8b 81       	ldd	r24, Y+3	; 0x03
    204e:	48 2f       	mov	r20, r24
    2050:	50 e0       	ldi	r21, 0x00	; 0
    2052:	5e 83       	std	Y+6, r21	; 0x06
    2054:	4d 83       	std	Y+5, r20	; 0x05
    2056:	8d 81       	ldd	r24, Y+5	; 0x05
    2058:	9e 81       	ldd	r25, Y+6	; 0x06
    205a:	81 30       	cpi	r24, 0x01	; 1
    205c:	91 05       	cpc	r25, r1
    205e:	79 f1       	breq	.+94     	; 0x20be <GPIO_readPin+0xae>
    2060:	2d 81       	ldd	r18, Y+5	; 0x05
    2062:	3e 81       	ldd	r19, Y+6	; 0x06
    2064:	22 30       	cpi	r18, 0x02	; 2
    2066:	31 05       	cpc	r19, r1
    2068:	34 f4       	brge	.+12     	; 0x2076 <GPIO_readPin+0x66>
    206a:	4d 81       	ldd	r20, Y+5	; 0x05
    206c:	5e 81       	ldd	r21, Y+6	; 0x06
    206e:	41 15       	cp	r20, r1
    2070:	51 05       	cpc	r21, r1
    2072:	69 f0       	breq	.+26     	; 0x208e <GPIO_readPin+0x7e>
    2074:	6b c0       	rjmp	.+214    	; 0x214c <GPIO_readPin+0x13c>
    2076:	8d 81       	ldd	r24, Y+5	; 0x05
    2078:	9e 81       	ldd	r25, Y+6	; 0x06
    207a:	82 30       	cpi	r24, 0x02	; 2
    207c:	91 05       	cpc	r25, r1
    207e:	b9 f1       	breq	.+110    	; 0x20ee <GPIO_readPin+0xde>
    2080:	2d 81       	ldd	r18, Y+5	; 0x05
    2082:	3e 81       	ldd	r19, Y+6	; 0x06
    2084:	23 30       	cpi	r18, 0x03	; 3
    2086:	31 05       	cpc	r19, r1
    2088:	09 f4       	brne	.+2      	; 0x208c <GPIO_readPin+0x7c>
    208a:	49 c0       	rjmp	.+146    	; 0x211e <GPIO_readPin+0x10e>
    208c:	5f c0       	rjmp	.+190    	; 0x214c <GPIO_readPin+0x13c>
		case PORT_A:
			// Checks if the bit equals '1' or not
			if(BIT_IS_SET(PINA,pin_num)) {
    208e:	e9 e3       	ldi	r30, 0x39	; 57
    2090:	f0 e0       	ldi	r31, 0x00	; 0
    2092:	80 81       	ld	r24, Z
    2094:	28 2f       	mov	r18, r24
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	8c 81       	ldd	r24, Y+4	; 0x04
    209a:	88 2f       	mov	r24, r24
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	a9 01       	movw	r20, r18
    20a0:	02 c0       	rjmp	.+4      	; 0x20a6 <GPIO_readPin+0x96>
    20a2:	55 95       	asr	r21
    20a4:	47 95       	ror	r20
    20a6:	8a 95       	dec	r24
    20a8:	e2 f7       	brpl	.-8      	; 0x20a2 <GPIO_readPin+0x92>
    20aa:	ca 01       	movw	r24, r20
    20ac:	81 70       	andi	r24, 0x01	; 1
    20ae:	90 70       	andi	r25, 0x00	; 0
    20b0:	88 23       	and	r24, r24
    20b2:	19 f0       	breq	.+6      	; 0x20ba <GPIO_readPin+0xaa>
				pin_value = LOGIC_HIGH;
    20b4:	81 e0       	ldi	r24, 0x01	; 1
    20b6:	8a 83       	std	Y+2, r24	; 0x02
    20b8:	49 c0       	rjmp	.+146    	; 0x214c <GPIO_readPin+0x13c>
			}
			else {
				pin_value = LOGIC_LOW;
    20ba:	1a 82       	std	Y+2, r1	; 0x02
    20bc:	47 c0       	rjmp	.+142    	; 0x214c <GPIO_readPin+0x13c>
			}
			break;
		case PORT_B:
			if(BIT_IS_SET(PINB,pin_num)) {
    20be:	e6 e3       	ldi	r30, 0x36	; 54
    20c0:	f0 e0       	ldi	r31, 0x00	; 0
    20c2:	80 81       	ld	r24, Z
    20c4:	28 2f       	mov	r18, r24
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	8c 81       	ldd	r24, Y+4	; 0x04
    20ca:	88 2f       	mov	r24, r24
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	a9 01       	movw	r20, r18
    20d0:	02 c0       	rjmp	.+4      	; 0x20d6 <GPIO_readPin+0xc6>
    20d2:	55 95       	asr	r21
    20d4:	47 95       	ror	r20
    20d6:	8a 95       	dec	r24
    20d8:	e2 f7       	brpl	.-8      	; 0x20d2 <GPIO_readPin+0xc2>
    20da:	ca 01       	movw	r24, r20
    20dc:	81 70       	andi	r24, 0x01	; 1
    20de:	90 70       	andi	r25, 0x00	; 0
    20e0:	88 23       	and	r24, r24
    20e2:	19 f0       	breq	.+6      	; 0x20ea <GPIO_readPin+0xda>
				pin_value = LOGIC_HIGH;
    20e4:	81 e0       	ldi	r24, 0x01	; 1
    20e6:	8a 83       	std	Y+2, r24	; 0x02
    20e8:	31 c0       	rjmp	.+98     	; 0x214c <GPIO_readPin+0x13c>
			}
			else {
				pin_value = LOGIC_LOW;
    20ea:	1a 82       	std	Y+2, r1	; 0x02
    20ec:	2f c0       	rjmp	.+94     	; 0x214c <GPIO_readPin+0x13c>
			}
			break;
		case PORT_C:
			if(BIT_IS_SET(PINC,pin_num)) {
    20ee:	e3 e3       	ldi	r30, 0x33	; 51
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	80 81       	ld	r24, Z
    20f4:	28 2f       	mov	r18, r24
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	8c 81       	ldd	r24, Y+4	; 0x04
    20fa:	88 2f       	mov	r24, r24
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	a9 01       	movw	r20, r18
    2100:	02 c0       	rjmp	.+4      	; 0x2106 <GPIO_readPin+0xf6>
    2102:	55 95       	asr	r21
    2104:	47 95       	ror	r20
    2106:	8a 95       	dec	r24
    2108:	e2 f7       	brpl	.-8      	; 0x2102 <GPIO_readPin+0xf2>
    210a:	ca 01       	movw	r24, r20
    210c:	81 70       	andi	r24, 0x01	; 1
    210e:	90 70       	andi	r25, 0x00	; 0
    2110:	88 23       	and	r24, r24
    2112:	19 f0       	breq	.+6      	; 0x211a <GPIO_readPin+0x10a>
				pin_value = LOGIC_HIGH;
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	8a 83       	std	Y+2, r24	; 0x02
    2118:	19 c0       	rjmp	.+50     	; 0x214c <GPIO_readPin+0x13c>
			}
			else {
				pin_value = LOGIC_LOW;
    211a:	1a 82       	std	Y+2, r1	; 0x02
    211c:	17 c0       	rjmp	.+46     	; 0x214c <GPIO_readPin+0x13c>
			}
			break;
		case PORT_D:
			if(BIT_IS_SET(PIND,pin_num)) {
    211e:	e0 e3       	ldi	r30, 0x30	; 48
    2120:	f0 e0       	ldi	r31, 0x00	; 0
    2122:	80 81       	ld	r24, Z
    2124:	28 2f       	mov	r18, r24
    2126:	30 e0       	ldi	r19, 0x00	; 0
    2128:	8c 81       	ldd	r24, Y+4	; 0x04
    212a:	88 2f       	mov	r24, r24
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	a9 01       	movw	r20, r18
    2130:	02 c0       	rjmp	.+4      	; 0x2136 <GPIO_readPin+0x126>
    2132:	55 95       	asr	r21
    2134:	47 95       	ror	r20
    2136:	8a 95       	dec	r24
    2138:	e2 f7       	brpl	.-8      	; 0x2132 <GPIO_readPin+0x122>
    213a:	ca 01       	movw	r24, r20
    213c:	81 70       	andi	r24, 0x01	; 1
    213e:	90 70       	andi	r25, 0x00	; 0
    2140:	88 23       	and	r24, r24
    2142:	19 f0       	breq	.+6      	; 0x214a <GPIO_readPin+0x13a>
				pin_value = LOGIC_HIGH;
    2144:	81 e0       	ldi	r24, 0x01	; 1
    2146:	8a 83       	std	Y+2, r24	; 0x02
    2148:	01 c0       	rjmp	.+2      	; 0x214c <GPIO_readPin+0x13c>
			}
			else {
				pin_value = LOGIC_LOW;
    214a:	1a 82       	std	Y+2, r1	; 0x02
			}
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    214c:	19 82       	std	Y+1, r1	; 0x01
	}
	return pin_value;
    214e:	5a 81       	ldd	r21, Y+2	; 0x02
    2150:	5f 83       	std	Y+7, r21	; 0x07
    2152:	8f 81       	ldd	r24, Y+7	; 0x07
}
    2154:	27 96       	adiw	r28, 0x07	; 7
    2156:	0f b6       	in	r0, 0x3f	; 63
    2158:	f8 94       	cli
    215a:	de bf       	out	0x3e, r29	; 62
    215c:	0f be       	out	0x3f, r0	; 63
    215e:	cd bf       	out	0x3d, r28	; 61
    2160:	cf 91       	pop	r28
    2162:	df 91       	pop	r29
    2164:	08 95       	ret

00002166 <GPIO_setupPortDirection>:
 * Setup the direction of the required port all pins input/output.
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
GPIO_Error_t GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction) {
    2166:	df 93       	push	r29
    2168:	cf 93       	push	r28
    216a:	00 d0       	rcall	.+0      	; 0x216c <GPIO_setupPortDirection+0x6>
    216c:	00 d0       	rcall	.+0      	; 0x216e <GPIO_setupPortDirection+0x8>
    216e:	0f 92       	push	r0
    2170:	cd b7       	in	r28, 0x3d	; 61
    2172:	de b7       	in	r29, 0x3e	; 62
    2174:	8a 83       	std	Y+2, r24	; 0x02
    2176:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	uint8_t GPIO_Driver_Checker = NULL;
    2178:	19 82       	std	Y+1, r1	; 0x01

	if((port_num >= NUM_OF_PORTS)) {
    217a:	8a 81       	ldd	r24, Y+2	; 0x02
    217c:	84 30       	cpi	r24, 0x04	; 4
    217e:	18 f0       	brcs	.+6      	; 0x2186 <GPIO_setupPortDirection+0x20>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    2180:	82 e0       	ldi	r24, 0x02	; 2
    2182:	89 83       	std	Y+1, r24	; 0x01
    2184:	3c c0       	rjmp	.+120    	; 0x21fe <GPIO_setupPortDirection+0x98>
	}
	else if((direction != PORT_INPUT) && (direction != PORT_OUTPUT)) {
    2186:	8b 81       	ldd	r24, Y+3	; 0x03
    2188:	88 23       	and	r24, r24
    218a:	31 f0       	breq	.+12     	; 0x2198 <GPIO_setupPortDirection+0x32>
    218c:	8b 81       	ldd	r24, Y+3	; 0x03
    218e:	8f 3f       	cpi	r24, 0xFF	; 255
    2190:	19 f0       	breq	.+6      	; 0x2198 <GPIO_setupPortDirection+0x32>
		GPIO_Driver_Checker = GPIO_WRONG_DIRECTION;
    2192:	83 e0       	ldi	r24, 0x03	; 3
    2194:	89 83       	std	Y+1, r24	; 0x01
    2196:	33 c0       	rjmp	.+102    	; 0x21fe <GPIO_setupPortDirection+0x98>
	}
	else {
		/* Setup the port direction as required */
		switch(port_num) {
    2198:	8a 81       	ldd	r24, Y+2	; 0x02
    219a:	28 2f       	mov	r18, r24
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	3d 83       	std	Y+5, r19	; 0x05
    21a0:	2c 83       	std	Y+4, r18	; 0x04
    21a2:	8c 81       	ldd	r24, Y+4	; 0x04
    21a4:	9d 81       	ldd	r25, Y+5	; 0x05
    21a6:	81 30       	cpi	r24, 0x01	; 1
    21a8:	91 05       	cpc	r25, r1
    21aa:	d1 f0       	breq	.+52     	; 0x21e0 <GPIO_setupPortDirection+0x7a>
    21ac:	2c 81       	ldd	r18, Y+4	; 0x04
    21ae:	3d 81       	ldd	r19, Y+5	; 0x05
    21b0:	22 30       	cpi	r18, 0x02	; 2
    21b2:	31 05       	cpc	r19, r1
    21b4:	2c f4       	brge	.+10     	; 0x21c0 <GPIO_setupPortDirection+0x5a>
    21b6:	8c 81       	ldd	r24, Y+4	; 0x04
    21b8:	9d 81       	ldd	r25, Y+5	; 0x05
    21ba:	00 97       	sbiw	r24, 0x00	; 0
    21bc:	61 f0       	breq	.+24     	; 0x21d6 <GPIO_setupPortDirection+0x70>
    21be:	1e c0       	rjmp	.+60     	; 0x21fc <GPIO_setupPortDirection+0x96>
    21c0:	2c 81       	ldd	r18, Y+4	; 0x04
    21c2:	3d 81       	ldd	r19, Y+5	; 0x05
    21c4:	22 30       	cpi	r18, 0x02	; 2
    21c6:	31 05       	cpc	r19, r1
    21c8:	81 f0       	breq	.+32     	; 0x21ea <GPIO_setupPortDirection+0x84>
    21ca:	8c 81       	ldd	r24, Y+4	; 0x04
    21cc:	9d 81       	ldd	r25, Y+5	; 0x05
    21ce:	83 30       	cpi	r24, 0x03	; 3
    21d0:	91 05       	cpc	r25, r1
    21d2:	81 f0       	breq	.+32     	; 0x21f4 <GPIO_setupPortDirection+0x8e>
    21d4:	13 c0       	rjmp	.+38     	; 0x21fc <GPIO_setupPortDirection+0x96>
		case PORT_A:
			DDRA = direction;
    21d6:	ea e3       	ldi	r30, 0x3A	; 58
    21d8:	f0 e0       	ldi	r31, 0x00	; 0
    21da:	8b 81       	ldd	r24, Y+3	; 0x03
    21dc:	80 83       	st	Z, r24
    21de:	0e c0       	rjmp	.+28     	; 0x21fc <GPIO_setupPortDirection+0x96>
			break;
		case PORT_B:
			DDRB = direction;
    21e0:	e7 e3       	ldi	r30, 0x37	; 55
    21e2:	f0 e0       	ldi	r31, 0x00	; 0
    21e4:	8b 81       	ldd	r24, Y+3	; 0x03
    21e6:	80 83       	st	Z, r24
    21e8:	09 c0       	rjmp	.+18     	; 0x21fc <GPIO_setupPortDirection+0x96>
			break;
		case PORT_C:
			DDRC = direction;
    21ea:	e4 e3       	ldi	r30, 0x34	; 52
    21ec:	f0 e0       	ldi	r31, 0x00	; 0
    21ee:	8b 81       	ldd	r24, Y+3	; 0x03
    21f0:	80 83       	st	Z, r24
    21f2:	04 c0       	rjmp	.+8      	; 0x21fc <GPIO_setupPortDirection+0x96>
			break;
		case PORT_D:
			DDRD = direction;
    21f4:	e1 e3       	ldi	r30, 0x31	; 49
    21f6:	f0 e0       	ldi	r31, 0x00	; 0
    21f8:	8b 81       	ldd	r24, Y+3	; 0x03
    21fa:	80 83       	st	Z, r24
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    21fc:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    21fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    2200:	0f 90       	pop	r0
    2202:	0f 90       	pop	r0
    2204:	0f 90       	pop	r0
    2206:	0f 90       	pop	r0
    2208:	0f 90       	pop	r0
    220a:	cf 91       	pop	r28
    220c:	df 91       	pop	r29
    220e:	08 95       	ret

00002210 <GPIO_writePort>:
 * Write the value on the required port.
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
GPIO_Error_t GPIO_writePort(uint8 port_num, uint8 value) {
    2210:	df 93       	push	r29
    2212:	cf 93       	push	r28
    2214:	00 d0       	rcall	.+0      	; 0x2216 <GPIO_writePort+0x6>
    2216:	00 d0       	rcall	.+0      	; 0x2218 <GPIO_writePort+0x8>
    2218:	0f 92       	push	r0
    221a:	cd b7       	in	r28, 0x3d	; 61
    221c:	de b7       	in	r29, 0x3e	; 62
    221e:	8a 83       	std	Y+2, r24	; 0x02
    2220:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t GPIO_Driver_Checker = NULL;
    2222:	19 82       	std	Y+1, r1	; 0x01
	if((port_num >= NUM_OF_PORTS)) {
    2224:	8a 81       	ldd	r24, Y+2	; 0x02
    2226:	84 30       	cpi	r24, 0x04	; 4
    2228:	18 f0       	brcs	.+6      	; 0x2230 <GPIO_writePort+0x20>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    222a:	82 e0       	ldi	r24, 0x02	; 2
    222c:	89 83       	std	Y+1, r24	; 0x01
    222e:	33 c0       	rjmp	.+102    	; 0x2296 <GPIO_writePort+0x86>
	}
	else {
		/* Setup the port direction as required */
		switch(port_num) {
    2230:	8a 81       	ldd	r24, Y+2	; 0x02
    2232:	28 2f       	mov	r18, r24
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	3d 83       	std	Y+5, r19	; 0x05
    2238:	2c 83       	std	Y+4, r18	; 0x04
    223a:	8c 81       	ldd	r24, Y+4	; 0x04
    223c:	9d 81       	ldd	r25, Y+5	; 0x05
    223e:	81 30       	cpi	r24, 0x01	; 1
    2240:	91 05       	cpc	r25, r1
    2242:	d1 f0       	breq	.+52     	; 0x2278 <GPIO_writePort+0x68>
    2244:	2c 81       	ldd	r18, Y+4	; 0x04
    2246:	3d 81       	ldd	r19, Y+5	; 0x05
    2248:	22 30       	cpi	r18, 0x02	; 2
    224a:	31 05       	cpc	r19, r1
    224c:	2c f4       	brge	.+10     	; 0x2258 <GPIO_writePort+0x48>
    224e:	8c 81       	ldd	r24, Y+4	; 0x04
    2250:	9d 81       	ldd	r25, Y+5	; 0x05
    2252:	00 97       	sbiw	r24, 0x00	; 0
    2254:	61 f0       	breq	.+24     	; 0x226e <GPIO_writePort+0x5e>
    2256:	1e c0       	rjmp	.+60     	; 0x2294 <GPIO_writePort+0x84>
    2258:	2c 81       	ldd	r18, Y+4	; 0x04
    225a:	3d 81       	ldd	r19, Y+5	; 0x05
    225c:	22 30       	cpi	r18, 0x02	; 2
    225e:	31 05       	cpc	r19, r1
    2260:	81 f0       	breq	.+32     	; 0x2282 <GPIO_writePort+0x72>
    2262:	8c 81       	ldd	r24, Y+4	; 0x04
    2264:	9d 81       	ldd	r25, Y+5	; 0x05
    2266:	83 30       	cpi	r24, 0x03	; 3
    2268:	91 05       	cpc	r25, r1
    226a:	81 f0       	breq	.+32     	; 0x228c <GPIO_writePort+0x7c>
    226c:	13 c0       	rjmp	.+38     	; 0x2294 <GPIO_writePort+0x84>
		case PORT_A:
			PORTA = value;
    226e:	eb e3       	ldi	r30, 0x3B	; 59
    2270:	f0 e0       	ldi	r31, 0x00	; 0
    2272:	8b 81       	ldd	r24, Y+3	; 0x03
    2274:	80 83       	st	Z, r24
    2276:	0e c0       	rjmp	.+28     	; 0x2294 <GPIO_writePort+0x84>
			break;
		case PORT_B:
			PORTB = value;
    2278:	e8 e3       	ldi	r30, 0x38	; 56
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	8b 81       	ldd	r24, Y+3	; 0x03
    227e:	80 83       	st	Z, r24
    2280:	09 c0       	rjmp	.+18     	; 0x2294 <GPIO_writePort+0x84>
			break;
		case PORT_C:
			PORTC = value;
    2282:	e5 e3       	ldi	r30, 0x35	; 53
    2284:	f0 e0       	ldi	r31, 0x00	; 0
    2286:	8b 81       	ldd	r24, Y+3	; 0x03
    2288:	80 83       	st	Z, r24
    228a:	04 c0       	rjmp	.+8      	; 0x2294 <GPIO_writePort+0x84>
			break;
		case PORT_D:
			PORTD = value;
    228c:	e2 e3       	ldi	r30, 0x32	; 50
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	8b 81       	ldd	r24, Y+3	; 0x03
    2292:	80 83       	st	Z, r24
			break;
		}
		GPIO_Driver_Checker = GPIO_OK;
    2294:	19 82       	std	Y+1, r1	; 0x01
	}
	return GPIO_Driver_Checker;
    2296:	89 81       	ldd	r24, Y+1	; 0x01
}
    2298:	0f 90       	pop	r0
    229a:	0f 90       	pop	r0
    229c:	0f 90       	pop	r0
    229e:	0f 90       	pop	r0
    22a0:	0f 90       	pop	r0
    22a2:	cf 91       	pop	r28
    22a4:	df 91       	pop	r29
    22a6:	08 95       	ret

000022a8 <GPIO_readPort>:
/*
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num) {
    22a8:	df 93       	push	r29
    22aa:	cf 93       	push	r28
    22ac:	00 d0       	rcall	.+0      	; 0x22ae <GPIO_readPort+0x6>
    22ae:	00 d0       	rcall	.+0      	; 0x22b0 <GPIO_readPort+0x8>
    22b0:	0f 92       	push	r0
    22b2:	cd b7       	in	r28, 0x3d	; 61
    22b4:	de b7       	in	r29, 0x3e	; 62
    22b6:	8b 83       	std	Y+3, r24	; 0x03
	uint8 value = LOGIC_LOW;
    22b8:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t GPIO_Driver_Checker = NULL;
    22ba:	19 82       	std	Y+1, r1	; 0x01

	if((port_num >= NUM_OF_PORTS)) {
    22bc:	8b 81       	ldd	r24, Y+3	; 0x03
    22be:	84 30       	cpi	r24, 0x04	; 4
    22c0:	18 f0       	brcs	.+6      	; 0x22c8 <GPIO_readPort+0x20>
		GPIO_Driver_Checker = GPIO_WRONG_PORT_NUMBER;
    22c2:	82 e0       	ldi	r24, 0x02	; 2
    22c4:	89 83       	std	Y+1, r24	; 0x01
    22c6:	32 c0       	rjmp	.+100    	; 0x232c <GPIO_readPort+0x84>
	}
	else {
		switch(port_num) {
    22c8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ca:	28 2f       	mov	r18, r24
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	3d 83       	std	Y+5, r19	; 0x05
    22d0:	2c 83       	std	Y+4, r18	; 0x04
    22d2:	8c 81       	ldd	r24, Y+4	; 0x04
    22d4:	9d 81       	ldd	r25, Y+5	; 0x05
    22d6:	81 30       	cpi	r24, 0x01	; 1
    22d8:	91 05       	cpc	r25, r1
    22da:	d1 f0       	breq	.+52     	; 0x2310 <GPIO_readPort+0x68>
    22dc:	2c 81       	ldd	r18, Y+4	; 0x04
    22de:	3d 81       	ldd	r19, Y+5	; 0x05
    22e0:	22 30       	cpi	r18, 0x02	; 2
    22e2:	31 05       	cpc	r19, r1
    22e4:	2c f4       	brge	.+10     	; 0x22f0 <GPIO_readPort+0x48>
    22e6:	8c 81       	ldd	r24, Y+4	; 0x04
    22e8:	9d 81       	ldd	r25, Y+5	; 0x05
    22ea:	00 97       	sbiw	r24, 0x00	; 0
    22ec:	61 f0       	breq	.+24     	; 0x2306 <GPIO_readPort+0x5e>
    22ee:	1e c0       	rjmp	.+60     	; 0x232c <GPIO_readPort+0x84>
    22f0:	2c 81       	ldd	r18, Y+4	; 0x04
    22f2:	3d 81       	ldd	r19, Y+5	; 0x05
    22f4:	22 30       	cpi	r18, 0x02	; 2
    22f6:	31 05       	cpc	r19, r1
    22f8:	81 f0       	breq	.+32     	; 0x231a <GPIO_readPort+0x72>
    22fa:	8c 81       	ldd	r24, Y+4	; 0x04
    22fc:	9d 81       	ldd	r25, Y+5	; 0x05
    22fe:	83 30       	cpi	r24, 0x03	; 3
    2300:	91 05       	cpc	r25, r1
    2302:	81 f0       	breq	.+32     	; 0x2324 <GPIO_readPort+0x7c>
    2304:	13 c0       	rjmp	.+38     	; 0x232c <GPIO_readPort+0x84>
		case PORT_A:
			// Why value equals PINA?
			value = PINA;
    2306:	e9 e3       	ldi	r30, 0x39	; 57
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	80 81       	ld	r24, Z
    230c:	8a 83       	std	Y+2, r24	; 0x02
    230e:	0e c0       	rjmp	.+28     	; 0x232c <GPIO_readPort+0x84>
			break;
		case PORT_B:
			value = PINB;
    2310:	e6 e3       	ldi	r30, 0x36	; 54
    2312:	f0 e0       	ldi	r31, 0x00	; 0
    2314:	80 81       	ld	r24, Z
    2316:	8a 83       	std	Y+2, r24	; 0x02
    2318:	09 c0       	rjmp	.+18     	; 0x232c <GPIO_readPort+0x84>
			break;
		case PORT_C:
			value = PINC;
    231a:	e3 e3       	ldi	r30, 0x33	; 51
    231c:	f0 e0       	ldi	r31, 0x00	; 0
    231e:	80 81       	ld	r24, Z
    2320:	8a 83       	std	Y+2, r24	; 0x02
    2322:	04 c0       	rjmp	.+8      	; 0x232c <GPIO_readPort+0x84>
			break;
		case PORT_D:
			value = PIND;
    2324:	e0 e3       	ldi	r30, 0x30	; 48
    2326:	f0 e0       	ldi	r31, 0x00	; 0
    2328:	80 81       	ld	r24, Z
    232a:	8a 83       	std	Y+2, r24	; 0x02
			break;
		}
	}
	return value;
    232c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    232e:	0f 90       	pop	r0
    2330:	0f 90       	pop	r0
    2332:	0f 90       	pop	r0
    2334:	0f 90       	pop	r0
    2336:	0f 90       	pop	r0
    2338:	cf 91       	pop	r28
    233a:	df 91       	pop	r29
    233c:	08 95       	ret

0000233e <EXT_INTERRUPT_Init>:

#include "avr/io.h" /* To use the IO Ports Registers */
#include <util/delay.h>

// Initialize External Interrupt
void EXT_INTERRUPT_Init(void) {
    233e:	df 93       	push	r29
    2340:	cf 93       	push	r28
    2342:	cd b7       	in	r28, 0x3d	; 61
    2344:	de b7       	in	r29, 0x3e	; 62
	 */

	// Checking if INT0 is enabled or disabled
	#if (EXT_INTERRUPT_INT0_INIT_STATE == EXT_INTERRUPT_Enable_State)
		// Enabling the INT0 bit inside GICR
		SET_BIT(GICR, INT0);
    2346:	ab e5       	ldi	r26, 0x5B	; 91
    2348:	b0 e0       	ldi	r27, 0x00	; 0
    234a:	eb e5       	ldi	r30, 0x5B	; 91
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	80 81       	ld	r24, Z
    2350:	80 64       	ori	r24, 0x40	; 64
    2352:	8c 93       	st	X, r24

		// Setup Pin PD2 "INT0" to Input
		GPIO_setupPinDirection(PORT_D, PIN_2, PIN_INPUT);
    2354:	83 e0       	ldi	r24, 0x03	; 3
    2356:	62 e0       	ldi	r22, 0x02	; 2
    2358:	40 e0       	ldi	r20, 0x00	; 0
    235a:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <GPIO_setupPinDirection>
			SET_BIT(MCUCR, ISC00);
		#elif (EXT_INTERRUPT_0_MODE == EXT_INTERRUPT_Falling_Edge)
			SET_BIT(MCUCR, ISC01);
			CLR_BIT(MCUCR, ISC00);
		#elif (EXT_INTERRUPT_0_MODE == EXT_INTERRUPT_Rising_Edge)
			SET_BIT(MCUCR, ISC01);
    235e:	a5 e5       	ldi	r26, 0x55	; 85
    2360:	b0 e0       	ldi	r27, 0x00	; 0
    2362:	e5 e5       	ldi	r30, 0x55	; 85
    2364:	f0 e0       	ldi	r31, 0x00	; 0
    2366:	80 81       	ld	r24, Z
    2368:	82 60       	ori	r24, 0x02	; 2
    236a:	8c 93       	st	X, r24
			SET_BIT(MCUCR, ISC00);
    236c:	a5 e5       	ldi	r26, 0x55	; 85
    236e:	b0 e0       	ldi	r27, 0x00	; 0
    2370:	e5 e5       	ldi	r30, 0x55	; 85
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	80 81       	ld	r24, Z
    2376:	81 60       	ori	r24, 0x01	; 1
    2378:	8c 93       	st	X, r24
		#elif (EXT_INTERRUPT_1_MODE == EXT_INTERRUPT_Rising_Edge)
			SET_BIT(MCUCR, ISC11);
			SET_BIT(MCUCR, ISC10);
		#endif
	#elif (EXT_INTERRUPT_INT1_INIT_STATE == EXT_INTERRUPT_Disable_State)
			CLR_BIT(GICR, INT1);
    237a:	ab e5       	ldi	r26, 0x5B	; 91
    237c:	b0 e0       	ldi	r27, 0x00	; 0
    237e:	eb e5       	ldi	r30, 0x5B	; 91
    2380:	f0 e0       	ldi	r31, 0x00	; 0
    2382:	80 81       	ld	r24, Z
    2384:	8f 77       	andi	r24, 0x7F	; 127
    2386:	8c 93       	st	X, r24
			CLR_BIT(MCUCSR, ISC2);
		#elif (EXT_INTERRUPT_2_MODE == EXT_INTERRUPT_INT2_Rising_Edge)
			SET_BIT(MCUCSR, ISC2);
		#endif
	#elif (EXT_INTERRUPT_INT2_INIT_STATE == EXT_INTERRUPT_Disable_State)
			CLR_BIT(GICR, INT2);
    2388:	ab e5       	ldi	r26, 0x5B	; 91
    238a:	b0 e0       	ldi	r27, 0x00	; 0
    238c:	eb e5       	ldi	r30, 0x5B	; 91
    238e:	f0 e0       	ldi	r31, 0x00	; 0
    2390:	80 81       	ld	r24, Z
    2392:	8f 7d       	andi	r24, 0xDF	; 223
    2394:	8c 93       	st	X, r24

	/* Status Register – SREG Register Bits Description:
	 * Bit 7 – I: Global Interrupt Enable
	 */
	// Enabling the I-Bit
	SET_BIT(SREG, SREG_I_BIT);
    2396:	af e5       	ldi	r26, 0x5F	; 95
    2398:	b0 e0       	ldi	r27, 0x00	; 0
    239a:	ef e5       	ldi	r30, 0x5F	; 95
    239c:	f0 e0       	ldi	r31, 0x00	; 0
    239e:	80 81       	ld	r24, Z
    23a0:	80 68       	ori	r24, 0x80	; 128
    23a2:	8c 93       	st	X, r24
}
    23a4:	cf 91       	pop	r28
    23a6:	df 91       	pop	r29
    23a8:	08 95       	ret

000023aa <EXT_INTERRUPT_DeInit>:

// Disable External Interrupt ISR
void EXT_INTERRUPT_DeInit(void) {
    23aa:	df 93       	push	r29
    23ac:	cf 93       	push	r28
    23ae:	cd b7       	in	r28, 0x3d	; 61
    23b0:	de b7       	in	r29, 0x3e	; 62

	#if (EXT_INTERRUPT_INT0_INIT_STATE == EXT_INTERRUPT_Enable_State)
		CLR_BIT(GICR, INT0);
    23b2:	ab e5       	ldi	r26, 0x5B	; 91
    23b4:	b0 e0       	ldi	r27, 0x00	; 0
    23b6:	eb e5       	ldi	r30, 0x5B	; 91
    23b8:	f0 e0       	ldi	r31, 0x00	; 0
    23ba:	80 81       	ld	r24, Z
    23bc:	8f 7b       	andi	r24, 0xBF	; 191
    23be:	8c 93       	st	X, r24

	#if (EXT_INTERRUPT_INT2_INIT_STATE == EXT_INTERRUPT_Enable_State)
		CLR_BIT(GICR, INT2);
	#endif

	CLR_BIT(SREG, SREG_I_BIT);
    23c0:	af e5       	ldi	r26, 0x5F	; 95
    23c2:	b0 e0       	ldi	r27, 0x00	; 0
    23c4:	ef e5       	ldi	r30, 0x5F	; 95
    23c6:	f0 e0       	ldi	r31, 0x00	; 0
    23c8:	80 81       	ld	r24, Z
    23ca:	8f 77       	andi	r24, 0x7F	; 127
    23cc:	8c 93       	st	X, r24
}
    23ce:	cf 91       	pop	r28
    23d0:	df 91       	pop	r29
    23d2:	08 95       	ret

000023d4 <EXT_INTERRUPT_SetCallBack>:

//The function that will be called in the EXT INT
void (*CallBackPtr) (void) = NULL;

// External Interrupt Call Back Function
void EXT_INTERRUPT_SetCallBack(void (*CopyFuncPtr) (void)) {
    23d4:	df 93       	push	r29
    23d6:	cf 93       	push	r28
    23d8:	00 d0       	rcall	.+0      	; 0x23da <EXT_INTERRUPT_SetCallBack+0x6>
    23da:	cd b7       	in	r28, 0x3d	; 61
    23dc:	de b7       	in	r29, 0x3e	; 62
    23de:	9a 83       	std	Y+2, r25	; 0x02
    23e0:	89 83       	std	Y+1, r24	; 0x01
	CallBackPtr = CopyFuncPtr;
    23e2:	89 81       	ldd	r24, Y+1	; 0x01
    23e4:	9a 81       	ldd	r25, Y+2	; 0x02
    23e6:	90 93 69 01 	sts	0x0169, r25
    23ea:	80 93 68 01 	sts	0x0168, r24
}
    23ee:	0f 90       	pop	r0
    23f0:	0f 90       	pop	r0
    23f2:	cf 91       	pop	r28
    23f4:	df 91       	pop	r29
    23f6:	08 95       	ret

000023f8 <ADC_Init>:
#include "avr/io.h" /* To use the IO Ports Registers */
#include <util/delay.h>


// Initializes and enables the ADC Module to start functionality
void ADC_Init(void) {
    23f8:	df 93       	push	r29
    23fa:	cf 93       	push	r28
    23fc:	cd b7       	in	r28, 0x3d	; 61
    23fe:	de b7       	in	r29, 0x3e	; 62
	 * 7:6, REFS1:0 = 01 to choose AVCC = 5v as reference voltage
	 * 5, ADLAR   = 0 right adjusted
	 * 4:0, MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	// Sets REFS1:0 to '01'
	SET_BIT(ADMUX, REFS0);
    2400:	a7 e2       	ldi	r26, 0x27	; 39
    2402:	b0 e0       	ldi	r27, 0x00	; 0
    2404:	e7 e2       	ldi	r30, 0x27	; 39
    2406:	f0 e0       	ldi	r31, 0x00	; 0
    2408:	80 81       	ld	r24, Z
    240a:	80 64       	ori	r24, 0x40	; 64
    240c:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, REFS1);
    240e:	a7 e2       	ldi	r26, 0x27	; 39
    2410:	b0 e0       	ldi	r27, 0x00	; 0
    2412:	e7 e2       	ldi	r30, 0x27	; 39
    2414:	f0 e0       	ldi	r31, 0x00	; 0
    2416:	80 81       	ld	r24, Z
    2418:	8f 77       	andi	r24, 0x7F	; 127
    241a:	8c 93       	st	X, r24

	CLR_BIT(ADMUX, ADLAR);
    241c:	a7 e2       	ldi	r26, 0x27	; 39
    241e:	b0 e0       	ldi	r27, 0x00	; 0
    2420:	e7 e2       	ldi	r30, 0x27	; 39
    2422:	f0 e0       	ldi	r31, 0x00	; 0
    2424:	80 81       	ld	r24, Z
    2426:	8f 7d       	andi	r24, 0xDF	; 223
    2428:	8c 93       	st	X, r24

	CLR_BIT(ADMUX, MUX4);
    242a:	a7 e2       	ldi	r26, 0x27	; 39
    242c:	b0 e0       	ldi	r27, 0x00	; 0
    242e:	e7 e2       	ldi	r30, 0x27	; 39
    2430:	f0 e0       	ldi	r31, 0x00	; 0
    2432:	80 81       	ld	r24, Z
    2434:	8f 7e       	andi	r24, 0xEF	; 239
    2436:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, MUX3);
    2438:	a7 e2       	ldi	r26, 0x27	; 39
    243a:	b0 e0       	ldi	r27, 0x00	; 0
    243c:	e7 e2       	ldi	r30, 0x27	; 39
    243e:	f0 e0       	ldi	r31, 0x00	; 0
    2440:	80 81       	ld	r24, Z
    2442:	87 7f       	andi	r24, 0xF7	; 247
    2444:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, MUX2);
    2446:	a7 e2       	ldi	r26, 0x27	; 39
    2448:	b0 e0       	ldi	r27, 0x00	; 0
    244a:	e7 e2       	ldi	r30, 0x27	; 39
    244c:	f0 e0       	ldi	r31, 0x00	; 0
    244e:	80 81       	ld	r24, Z
    2450:	8b 7f       	andi	r24, 0xFB	; 251
    2452:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, MUX1);
    2454:	a7 e2       	ldi	r26, 0x27	; 39
    2456:	b0 e0       	ldi	r27, 0x00	; 0
    2458:	e7 e2       	ldi	r30, 0x27	; 39
    245a:	f0 e0       	ldi	r31, 0x00	; 0
    245c:	80 81       	ld	r24, Z
    245e:	8d 7f       	andi	r24, 0xFD	; 253
    2460:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, MUX0);
    2462:	a7 e2       	ldi	r26, 0x27	; 39
    2464:	b0 e0       	ldi	r27, 0x00	; 0
    2466:	e7 e2       	ldi	r30, 0x27	; 39
    2468:	f0 e0       	ldi	r31, 0x00	; 0
    246a:	80 81       	ld	r24, Z
    246c:	8e 7f       	andi	r24, 0xFE	; 254
    246e:	8c 93       	st	X, r24
	 * ADIE = 0 Disable ADC Interrupt
	 * ADATE = 0 Disable Auto Trigger
	 * ADPS2:0 = 111 to choose ADC_Clock = F_CPU/128 = 16Mhz/128 = 125Khz --> ADC must operate in range 50-200Khz
	 */
	// Enables ADC
	SET_BIT(ADCSRA, ADEN);
    2470:	a6 e2       	ldi	r26, 0x26	; 38
    2472:	b0 e0       	ldi	r27, 0x00	; 0
    2474:	e6 e2       	ldi	r30, 0x26	; 38
    2476:	f0 e0       	ldi	r31, 0x00	; 0
    2478:	80 81       	ld	r24, Z
    247a:	80 68       	ori	r24, 0x80	; 128
    247c:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA, ADIE);
    247e:	a6 e2       	ldi	r26, 0x26	; 38
    2480:	b0 e0       	ldi	r27, 0x00	; 0
    2482:	e6 e2       	ldi	r30, 0x26	; 38
    2484:	f0 e0       	ldi	r31, 0x00	; 0
    2486:	80 81       	ld	r24, Z
    2488:	87 7f       	andi	r24, 0xF7	; 247
    248a:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA, ADATE);
    248c:	a6 e2       	ldi	r26, 0x26	; 38
    248e:	b0 e0       	ldi	r27, 0x00	; 0
    2490:	e6 e2       	ldi	r30, 0x26	; 38
    2492:	f0 e0       	ldi	r31, 0x00	; 0
    2494:	80 81       	ld	r24, Z
    2496:	8f 7d       	andi	r24, 0xDF	; 223
    2498:	8c 93       	st	X, r24

	// Choose Prescaler: 128
	SET_BIT(ADCSRA, ADPS2);
    249a:	a6 e2       	ldi	r26, 0x26	; 38
    249c:	b0 e0       	ldi	r27, 0x00	; 0
    249e:	e6 e2       	ldi	r30, 0x26	; 38
    24a0:	f0 e0       	ldi	r31, 0x00	; 0
    24a2:	80 81       	ld	r24, Z
    24a4:	84 60       	ori	r24, 0x04	; 4
    24a6:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADPS1);
    24a8:	a6 e2       	ldi	r26, 0x26	; 38
    24aa:	b0 e0       	ldi	r27, 0x00	; 0
    24ac:	e6 e2       	ldi	r30, 0x26	; 38
    24ae:	f0 e0       	ldi	r31, 0x00	; 0
    24b0:	80 81       	ld	r24, Z
    24b2:	82 60       	ori	r24, 0x02	; 2
    24b4:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADPS0);
    24b6:	a6 e2       	ldi	r26, 0x26	; 38
    24b8:	b0 e0       	ldi	r27, 0x00	; 0
    24ba:	e6 e2       	ldi	r30, 0x26	; 38
    24bc:	f0 e0       	ldi	r31, 0x00	; 0
    24be:	80 81       	ld	r24, Z
    24c0:	81 60       	ori	r24, 0x01	; 1
    24c2:	8c 93       	st	X, r24

}
    24c4:	cf 91       	pop	r28
    24c6:	df 91       	pop	r29
    24c8:	08 95       	ret

000024ca <ADC_readChannel>:


// Reads the content written to the selected channel of the ADC
uint16 ADC_readChannel(uint8 channel_num) {
    24ca:	df 93       	push	r29
    24cc:	cf 93       	push	r28
    24ce:	0f 92       	push	r0
    24d0:	cd b7       	in	r28, 0x3d	; 61
    24d2:	de b7       	in	r29, 0x3e	; 62
    24d4:	89 83       	std	Y+1, r24	; 0x01

	// Insert Channel Number in ADMUX Procedure

	// Clears first 5 bits to zero
	ADMUX &= 0xE0; // 0b1110 0000
    24d6:	a7 e2       	ldi	r26, 0x27	; 39
    24d8:	b0 e0       	ldi	r27, 0x00	; 0
    24da:	e7 e2       	ldi	r30, 0x27	; 39
    24dc:	f0 e0       	ldi	r31, 0x00	; 0
    24de:	80 81       	ld	r24, Z
    24e0:	80 7e       	andi	r24, 0xE0	; 224
    24e2:	8c 93       	st	X, r24

	// Mask the Channel No. Input with max channel No.
	channel_num &= 0x07; // 0b0000 0111
    24e4:	89 81       	ldd	r24, Y+1	; 0x01
    24e6:	87 70       	andi	r24, 0x07	; 7
    24e8:	89 83       	std	Y+1, r24	; 0x01

	// Insert Channel no. into ADMUX Register
	ADMUX |= channel_num;
    24ea:	a7 e2       	ldi	r26, 0x27	; 39
    24ec:	b0 e0       	ldi	r27, 0x00	; 0
    24ee:	e7 e2       	ldi	r30, 0x27	; 39
    24f0:	f0 e0       	ldi	r31, 0x00	; 0
    24f2:	90 81       	ld	r25, Z
    24f4:	89 81       	ldd	r24, Y+1	; 0x01
    24f6:	89 2b       	or	r24, r25
    24f8:	8c 93       	st	X, r24

	// Starts ADC Conversion
	SET_BIT(ADCSRA, ADSC);
    24fa:	a6 e2       	ldi	r26, 0x26	; 38
    24fc:	b0 e0       	ldi	r27, 0x00	; 0
    24fe:	e6 e2       	ldi	r30, 0x26	; 38
    2500:	f0 e0       	ldi	r31, 0x00	; 0
    2502:	80 81       	ld	r24, Z
    2504:	80 64       	ori	r24, 0x40	; 64
    2506:	8c 93       	st	X, r24

	// Busy wait (Polling) untill ADIF = 1
	while ( BIT_IS_CLR(ADCSRA, ADIF) );
    2508:	e6 e2       	ldi	r30, 0x26	; 38
    250a:	f0 e0       	ldi	r31, 0x00	; 0
    250c:	80 81       	ld	r24, Z
    250e:	88 2f       	mov	r24, r24
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	80 71       	andi	r24, 0x10	; 16
    2514:	90 70       	andi	r25, 0x00	; 0
    2516:	00 97       	sbiw	r24, 0x00	; 0
    2518:	b9 f3       	breq	.-18     	; 0x2508 <ADC_readChannel+0x3e>

	// sET FLAG BY 1 TO CLEAR
	SET_BIT(ADCSRA, ADIF);
    251a:	a6 e2       	ldi	r26, 0x26	; 38
    251c:	b0 e0       	ldi	r27, 0x00	; 0
    251e:	e6 e2       	ldi	r30, 0x26	; 38
    2520:	f0 e0       	ldi	r31, 0x00	; 0
    2522:	80 81       	ld	r24, Z
    2524:	80 61       	ori	r24, 0x10	; 16
    2526:	8c 93       	st	X, r24

	// Read Data
	return ADC;
    2528:	e4 e2       	ldi	r30, 0x24	; 36
    252a:	f0 e0       	ldi	r31, 0x00	; 0
    252c:	80 81       	ld	r24, Z
    252e:	91 81       	ldd	r25, Z+1	; 0x01
}
    2530:	0f 90       	pop	r0
    2532:	cf 91       	pop	r28
    2534:	df 91       	pop	r29
    2536:	08 95       	ret

00002538 <SEGMENT_Init>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
SEGMENT_Error_t SEGMENT_Init(uint8 port_num) {
    2538:	df 93       	push	r29
    253a:	cf 93       	push	r28
    253c:	00 d0       	rcall	.+0      	; 0x253e <SEGMENT_Init+0x6>
    253e:	cd b7       	in	r28, 0x3d	; 61
    2540:	de b7       	in	r29, 0x3e	; 62
    2542:	8a 83       	std	Y+2, r24	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t SEGMENT_Driver_Checker = NULL;
    2544:	19 82       	std	Y+1, r1	; 0x01

	if((port_num >= NUM_OF_PORTS)) {
    2546:	8a 81       	ldd	r24, Y+2	; 0x02
    2548:	84 30       	cpi	r24, 0x04	; 4
    254a:	18 f0       	brcs	.+6      	; 0x2552 <SEGMENT_Init+0x1a>
		SEGMENT_Driver_Checker = SEGMENT_WRONG_PORT_NUMBER;
    254c:	82 e0       	ldi	r24, 0x02	; 2
    254e:	89 83       	std	Y+1, r24	; 0x01
    2550:	15 c0       	rjmp	.+42     	; 0x257c <SEGMENT_Init+0x44>
	}
	else {
		/* Setup the pin direction as required */
		GPIO_setupPinDirection(port_num, PIN_0, PIN_OUTPUT);
    2552:	8a 81       	ldd	r24, Y+2	; 0x02
    2554:	60 e0       	ldi	r22, 0x00	; 0
    2556:	41 e0       	ldi	r20, 0x01	; 1
    2558:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(port_num, PIN_1, PIN_OUTPUT);
    255c:	8a 81       	ldd	r24, Y+2	; 0x02
    255e:	61 e0       	ldi	r22, 0x01	; 1
    2560:	41 e0       	ldi	r20, 0x01	; 1
    2562:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(port_num, PIN_2, PIN_OUTPUT);
    2566:	8a 81       	ldd	r24, Y+2	; 0x02
    2568:	62 e0       	ldi	r22, 0x02	; 2
    256a:	41 e0       	ldi	r20, 0x01	; 1
    256c:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(port_num, PIN_3, PIN_OUTPUT);
    2570:	8a 81       	ldd	r24, Y+2	; 0x02
    2572:	63 e0       	ldi	r22, 0x03	; 3
    2574:	41 e0       	ldi	r20, 0x01	; 1
    2576:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <GPIO_setupPinDirection>
		SEGMENT_Driver_Checker = SEGMENT_OK;
    257a:	19 82       	std	Y+1, r1	; 0x01
	}
	return SEGMENT_Driver_Checker;
    257c:	89 81       	ldd	r24, Y+1	; 0x01
}
    257e:	0f 90       	pop	r0
    2580:	0f 90       	pop	r0
    2582:	cf 91       	pop	r28
    2584:	df 91       	pop	r29
    2586:	08 95       	ret

00002588 <SEGMENT_DISPLAY>:

SEGMENT_Error_t SEGMENT_DISPLAY(uint8 port_num, uint8 value) {
    2588:	df 93       	push	r29
    258a:	cf 93       	push	r28
    258c:	00 d0       	rcall	.+0      	; 0x258e <SEGMENT_DISPLAY+0x6>
    258e:	00 d0       	rcall	.+0      	; 0x2590 <SEGMENT_DISPLAY+0x8>
    2590:	0f 92       	push	r0
    2592:	cd b7       	in	r28, 0x3d	; 61
    2594:	de b7       	in	r29, 0x3e	; 62
    2596:	8a 83       	std	Y+2, r24	; 0x02
    2598:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t SEGMENT_Driver_Checker = NULL;
    259a:	19 82       	std	Y+1, r1	; 0x01

	if((port_num >= NUM_OF_PORTS)) {
    259c:	8a 81       	ldd	r24, Y+2	; 0x02
    259e:	84 30       	cpi	r24, 0x04	; 4
    25a0:	18 f0       	brcs	.+6      	; 0x25a8 <SEGMENT_DISPLAY+0x20>
		SEGMENT_Driver_Checker = SEGMENT_WRONG_PORT_NUMBER;
    25a2:	82 e0       	ldi	r24, 0x02	; 2
    25a4:	89 83       	std	Y+1, r24	; 0x01
    25a6:	24 c1       	rjmp	.+584    	; 0x27f0 <SEGMENT_DISPLAY+0x268>
	}
	else if((value < 0 && value > 9)) {
		SEGMENT_Driver_Checker = SEGMENT_WRONG_VALUE;
	}
	else {
		switch(value) {
    25a8:	8b 81       	ldd	r24, Y+3	; 0x03
    25aa:	28 2f       	mov	r18, r24
    25ac:	30 e0       	ldi	r19, 0x00	; 0
    25ae:	3d 83       	std	Y+5, r19	; 0x05
    25b0:	2c 83       	std	Y+4, r18	; 0x04
    25b2:	8c 81       	ldd	r24, Y+4	; 0x04
    25b4:	9d 81       	ldd	r25, Y+5	; 0x05
    25b6:	84 30       	cpi	r24, 0x04	; 4
    25b8:	91 05       	cpc	r25, r1
    25ba:	09 f4       	brne	.+2      	; 0x25be <SEGMENT_DISPLAY+0x36>
    25bc:	9b c0       	rjmp	.+310    	; 0x26f4 <SEGMENT_DISPLAY+0x16c>
    25be:	2c 81       	ldd	r18, Y+4	; 0x04
    25c0:	3d 81       	ldd	r19, Y+5	; 0x05
    25c2:	25 30       	cpi	r18, 0x05	; 5
    25c4:	31 05       	cpc	r19, r1
    25c6:	ec f4       	brge	.+58     	; 0x2602 <SEGMENT_DISPLAY+0x7a>
    25c8:	8c 81       	ldd	r24, Y+4	; 0x04
    25ca:	9d 81       	ldd	r25, Y+5	; 0x05
    25cc:	81 30       	cpi	r24, 0x01	; 1
    25ce:	91 05       	cpc	r25, r1
    25d0:	09 f4       	brne	.+2      	; 0x25d4 <SEGMENT_DISPLAY+0x4c>
    25d2:	51 c0       	rjmp	.+162    	; 0x2676 <SEGMENT_DISPLAY+0xee>
    25d4:	2c 81       	ldd	r18, Y+4	; 0x04
    25d6:	3d 81       	ldd	r19, Y+5	; 0x05
    25d8:	22 30       	cpi	r18, 0x02	; 2
    25da:	31 05       	cpc	r19, r1
    25dc:	2c f4       	brge	.+10     	; 0x25e8 <SEGMENT_DISPLAY+0x60>
    25de:	8c 81       	ldd	r24, Y+4	; 0x04
    25e0:	9d 81       	ldd	r25, Y+5	; 0x05
    25e2:	00 97       	sbiw	r24, 0x00	; 0
    25e4:	99 f1       	breq	.+102    	; 0x264c <SEGMENT_DISPLAY+0xc4>
    25e6:	03 c1       	rjmp	.+518    	; 0x27ee <SEGMENT_DISPLAY+0x266>
    25e8:	2c 81       	ldd	r18, Y+4	; 0x04
    25ea:	3d 81       	ldd	r19, Y+5	; 0x05
    25ec:	22 30       	cpi	r18, 0x02	; 2
    25ee:	31 05       	cpc	r19, r1
    25f0:	09 f4       	brne	.+2      	; 0x25f4 <SEGMENT_DISPLAY+0x6c>
    25f2:	56 c0       	rjmp	.+172    	; 0x26a0 <SEGMENT_DISPLAY+0x118>
    25f4:	8c 81       	ldd	r24, Y+4	; 0x04
    25f6:	9d 81       	ldd	r25, Y+5	; 0x05
    25f8:	83 30       	cpi	r24, 0x03	; 3
    25fa:	91 05       	cpc	r25, r1
    25fc:	09 f4       	brne	.+2      	; 0x2600 <SEGMENT_DISPLAY+0x78>
    25fe:	65 c0       	rjmp	.+202    	; 0x26ca <SEGMENT_DISPLAY+0x142>
    2600:	f6 c0       	rjmp	.+492    	; 0x27ee <SEGMENT_DISPLAY+0x266>
    2602:	2c 81       	ldd	r18, Y+4	; 0x04
    2604:	3d 81       	ldd	r19, Y+5	; 0x05
    2606:	27 30       	cpi	r18, 0x07	; 7
    2608:	31 05       	cpc	r19, r1
    260a:	09 f4       	brne	.+2      	; 0x260e <SEGMENT_DISPLAY+0x86>
    260c:	b2 c0       	rjmp	.+356    	; 0x2772 <SEGMENT_DISPLAY+0x1ea>
    260e:	8c 81       	ldd	r24, Y+4	; 0x04
    2610:	9d 81       	ldd	r25, Y+5	; 0x05
    2612:	88 30       	cpi	r24, 0x08	; 8
    2614:	91 05       	cpc	r25, r1
    2616:	6c f4       	brge	.+26     	; 0x2632 <SEGMENT_DISPLAY+0xaa>
    2618:	2c 81       	ldd	r18, Y+4	; 0x04
    261a:	3d 81       	ldd	r19, Y+5	; 0x05
    261c:	25 30       	cpi	r18, 0x05	; 5
    261e:	31 05       	cpc	r19, r1
    2620:	09 f4       	brne	.+2      	; 0x2624 <SEGMENT_DISPLAY+0x9c>
    2622:	7d c0       	rjmp	.+250    	; 0x271e <SEGMENT_DISPLAY+0x196>
    2624:	8c 81       	ldd	r24, Y+4	; 0x04
    2626:	9d 81       	ldd	r25, Y+5	; 0x05
    2628:	86 30       	cpi	r24, 0x06	; 6
    262a:	91 05       	cpc	r25, r1
    262c:	09 f4       	brne	.+2      	; 0x2630 <SEGMENT_DISPLAY+0xa8>
    262e:	8c c0       	rjmp	.+280    	; 0x2748 <SEGMENT_DISPLAY+0x1c0>
    2630:	de c0       	rjmp	.+444    	; 0x27ee <SEGMENT_DISPLAY+0x266>
    2632:	2c 81       	ldd	r18, Y+4	; 0x04
    2634:	3d 81       	ldd	r19, Y+5	; 0x05
    2636:	28 30       	cpi	r18, 0x08	; 8
    2638:	31 05       	cpc	r19, r1
    263a:	09 f4       	brne	.+2      	; 0x263e <SEGMENT_DISPLAY+0xb6>
    263c:	af c0       	rjmp	.+350    	; 0x279c <SEGMENT_DISPLAY+0x214>
    263e:	8c 81       	ldd	r24, Y+4	; 0x04
    2640:	9d 81       	ldd	r25, Y+5	; 0x05
    2642:	89 30       	cpi	r24, 0x09	; 9
    2644:	91 05       	cpc	r25, r1
    2646:	09 f4       	brne	.+2      	; 0x264a <SEGMENT_DISPLAY+0xc2>
    2648:	be c0       	rjmp	.+380    	; 0x27c6 <SEGMENT_DISPLAY+0x23e>
    264a:	d1 c0       	rjmp	.+418    	; 0x27ee <SEGMENT_DISPLAY+0x266>
			case 0:
				GPIO_writePin(port_num, PIN_0, LOGIC_LOW);
    264c:	8a 81       	ldd	r24, Y+2	; 0x02
    264e:	60 e0       	ldi	r22, 0x00	; 0
    2650:	40 e0       	ldi	r20, 0x00	; 0
    2652:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
    2656:	8a 81       	ldd	r24, Y+2	; 0x02
    2658:	61 e0       	ldi	r22, 0x01	; 1
    265a:	40 e0       	ldi	r20, 0x00	; 0
    265c:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
    2660:	8a 81       	ldd	r24, Y+2	; 0x02
    2662:	62 e0       	ldi	r22, 0x02	; 2
    2664:	40 e0       	ldi	r20, 0x00	; 0
    2666:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    266a:	8a 81       	ldd	r24, Y+2	; 0x02
    266c:	63 e0       	ldi	r22, 0x03	; 3
    266e:	40 e0       	ldi	r20, 0x00	; 0
    2670:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
    2674:	bc c0       	rjmp	.+376    	; 0x27ee <SEGMENT_DISPLAY+0x266>
				break;
			case 1:
				GPIO_writePin(port_num, PIN_0, LOGIC_HIGH);
    2676:	8a 81       	ldd	r24, Y+2	; 0x02
    2678:	60 e0       	ldi	r22, 0x00	; 0
    267a:	41 e0       	ldi	r20, 0x01	; 1
    267c:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
    2680:	8a 81       	ldd	r24, Y+2	; 0x02
    2682:	61 e0       	ldi	r22, 0x01	; 1
    2684:	40 e0       	ldi	r20, 0x00	; 0
    2686:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
    268a:	8a 81       	ldd	r24, Y+2	; 0x02
    268c:	62 e0       	ldi	r22, 0x02	; 2
    268e:	40 e0       	ldi	r20, 0x00	; 0
    2690:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    2694:	8a 81       	ldd	r24, Y+2	; 0x02
    2696:	63 e0       	ldi	r22, 0x03	; 3
    2698:	40 e0       	ldi	r20, 0x00	; 0
    269a:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
    269e:	a7 c0       	rjmp	.+334    	; 0x27ee <SEGMENT_DISPLAY+0x266>
				break;
			case 2:
				GPIO_writePin(port_num, PIN_0, LOGIC_LOW);
    26a0:	8a 81       	ldd	r24, Y+2	; 0x02
    26a2:	60 e0       	ldi	r22, 0x00	; 0
    26a4:	40 e0       	ldi	r20, 0x00	; 0
    26a6:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_HIGH);
    26aa:	8a 81       	ldd	r24, Y+2	; 0x02
    26ac:	61 e0       	ldi	r22, 0x01	; 1
    26ae:	41 e0       	ldi	r20, 0x01	; 1
    26b0:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
    26b4:	8a 81       	ldd	r24, Y+2	; 0x02
    26b6:	62 e0       	ldi	r22, 0x02	; 2
    26b8:	40 e0       	ldi	r20, 0x00	; 0
    26ba:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    26be:	8a 81       	ldd	r24, Y+2	; 0x02
    26c0:	63 e0       	ldi	r22, 0x03	; 3
    26c2:	40 e0       	ldi	r20, 0x00	; 0
    26c4:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
    26c8:	92 c0       	rjmp	.+292    	; 0x27ee <SEGMENT_DISPLAY+0x266>
				break;
			case 3:
				GPIO_writePin(port_num, PIN_0, LOGIC_HIGH);
    26ca:	8a 81       	ldd	r24, Y+2	; 0x02
    26cc:	60 e0       	ldi	r22, 0x00	; 0
    26ce:	41 e0       	ldi	r20, 0x01	; 1
    26d0:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_HIGH);
    26d4:	8a 81       	ldd	r24, Y+2	; 0x02
    26d6:	61 e0       	ldi	r22, 0x01	; 1
    26d8:	41 e0       	ldi	r20, 0x01	; 1
    26da:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
    26de:	8a 81       	ldd	r24, Y+2	; 0x02
    26e0:	62 e0       	ldi	r22, 0x02	; 2
    26e2:	40 e0       	ldi	r20, 0x00	; 0
    26e4:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    26e8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ea:	63 e0       	ldi	r22, 0x03	; 3
    26ec:	40 e0       	ldi	r20, 0x00	; 0
    26ee:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
    26f2:	7d c0       	rjmp	.+250    	; 0x27ee <SEGMENT_DISPLAY+0x266>
				break;
			case 4:
				GPIO_writePin(port_num, PIN_0, LOGIC_LOW);
    26f4:	8a 81       	ldd	r24, Y+2	; 0x02
    26f6:	60 e0       	ldi	r22, 0x00	; 0
    26f8:	40 e0       	ldi	r20, 0x00	; 0
    26fa:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
    26fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2700:	61 e0       	ldi	r22, 0x01	; 1
    2702:	40 e0       	ldi	r20, 0x00	; 0
    2704:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_HIGH);
    2708:	8a 81       	ldd	r24, Y+2	; 0x02
    270a:	62 e0       	ldi	r22, 0x02	; 2
    270c:	41 e0       	ldi	r20, 0x01	; 1
    270e:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    2712:	8a 81       	ldd	r24, Y+2	; 0x02
    2714:	63 e0       	ldi	r22, 0x03	; 3
    2716:	40 e0       	ldi	r20, 0x00	; 0
    2718:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
    271c:	68 c0       	rjmp	.+208    	; 0x27ee <SEGMENT_DISPLAY+0x266>
				break;
			case 5:
				GPIO_writePin(port_num, PIN_0, LOGIC_HIGH);
    271e:	8a 81       	ldd	r24, Y+2	; 0x02
    2720:	60 e0       	ldi	r22, 0x00	; 0
    2722:	41 e0       	ldi	r20, 0x01	; 1
    2724:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
    2728:	8a 81       	ldd	r24, Y+2	; 0x02
    272a:	61 e0       	ldi	r22, 0x01	; 1
    272c:	40 e0       	ldi	r20, 0x00	; 0
    272e:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_HIGH);
    2732:	8a 81       	ldd	r24, Y+2	; 0x02
    2734:	62 e0       	ldi	r22, 0x02	; 2
    2736:	41 e0       	ldi	r20, 0x01	; 1
    2738:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    273c:	8a 81       	ldd	r24, Y+2	; 0x02
    273e:	63 e0       	ldi	r22, 0x03	; 3
    2740:	40 e0       	ldi	r20, 0x00	; 0
    2742:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
    2746:	53 c0       	rjmp	.+166    	; 0x27ee <SEGMENT_DISPLAY+0x266>
				break;
			case 6:
				GPIO_writePin(port_num, PIN_0, LOGIC_LOW);
    2748:	8a 81       	ldd	r24, Y+2	; 0x02
    274a:	60 e0       	ldi	r22, 0x00	; 0
    274c:	40 e0       	ldi	r20, 0x00	; 0
    274e:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_HIGH);
    2752:	8a 81       	ldd	r24, Y+2	; 0x02
    2754:	61 e0       	ldi	r22, 0x01	; 1
    2756:	41 e0       	ldi	r20, 0x01	; 1
    2758:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_HIGH);
    275c:	8a 81       	ldd	r24, Y+2	; 0x02
    275e:	62 e0       	ldi	r22, 0x02	; 2
    2760:	41 e0       	ldi	r20, 0x01	; 1
    2762:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    2766:	8a 81       	ldd	r24, Y+2	; 0x02
    2768:	63 e0       	ldi	r22, 0x03	; 3
    276a:	40 e0       	ldi	r20, 0x00	; 0
    276c:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
    2770:	3e c0       	rjmp	.+124    	; 0x27ee <SEGMENT_DISPLAY+0x266>
				break;
			case 7:
				GPIO_writePin(port_num, PIN_0, LOGIC_HIGH);
    2772:	8a 81       	ldd	r24, Y+2	; 0x02
    2774:	60 e0       	ldi	r22, 0x00	; 0
    2776:	41 e0       	ldi	r20, 0x01	; 1
    2778:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_HIGH);
    277c:	8a 81       	ldd	r24, Y+2	; 0x02
    277e:	61 e0       	ldi	r22, 0x01	; 1
    2780:	41 e0       	ldi	r20, 0x01	; 1
    2782:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_HIGH);
    2786:	8a 81       	ldd	r24, Y+2	; 0x02
    2788:	62 e0       	ldi	r22, 0x02	; 2
    278a:	41 e0       	ldi	r20, 0x01	; 1
    278c:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_LOW);
    2790:	8a 81       	ldd	r24, Y+2	; 0x02
    2792:	63 e0       	ldi	r22, 0x03	; 3
    2794:	40 e0       	ldi	r20, 0x00	; 0
    2796:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
    279a:	29 c0       	rjmp	.+82     	; 0x27ee <SEGMENT_DISPLAY+0x266>
				break;
			case 8:
				GPIO_writePin(port_num, PIN_0, LOGIC_LOW);
    279c:	8a 81       	ldd	r24, Y+2	; 0x02
    279e:	60 e0       	ldi	r22, 0x00	; 0
    27a0:	40 e0       	ldi	r20, 0x00	; 0
    27a2:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
    27a6:	8a 81       	ldd	r24, Y+2	; 0x02
    27a8:	61 e0       	ldi	r22, 0x01	; 1
    27aa:	40 e0       	ldi	r20, 0x00	; 0
    27ac:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
    27b0:	8a 81       	ldd	r24, Y+2	; 0x02
    27b2:	62 e0       	ldi	r22, 0x02	; 2
    27b4:	40 e0       	ldi	r20, 0x00	; 0
    27b6:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_HIGH);
    27ba:	8a 81       	ldd	r24, Y+2	; 0x02
    27bc:	63 e0       	ldi	r22, 0x03	; 3
    27be:	41 e0       	ldi	r20, 0x01	; 1
    27c0:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
    27c4:	14 c0       	rjmp	.+40     	; 0x27ee <SEGMENT_DISPLAY+0x266>
				break;
			case 9:
				GPIO_writePin(port_num, PIN_0, LOGIC_HIGH);
    27c6:	8a 81       	ldd	r24, Y+2	; 0x02
    27c8:	60 e0       	ldi	r22, 0x00	; 0
    27ca:	41 e0       	ldi	r20, 0x01	; 1
    27cc:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
				GPIO_writePin(port_num, PIN_1, LOGIC_LOW);
    27d0:	8a 81       	ldd	r24, Y+2	; 0x02
    27d2:	61 e0       	ldi	r22, 0x01	; 1
    27d4:	40 e0       	ldi	r20, 0x00	; 0
    27d6:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
				GPIO_writePin(port_num, PIN_2, LOGIC_LOW);
    27da:	8a 81       	ldd	r24, Y+2	; 0x02
    27dc:	62 e0       	ldi	r22, 0x02	; 2
    27de:	40 e0       	ldi	r20, 0x00	; 0
    27e0:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
				GPIO_writePin(port_num, PIN_3, LOGIC_HIGH);
    27e4:	8a 81       	ldd	r24, Y+2	; 0x02
    27e6:	63 e0       	ldi	r22, 0x03	; 3
    27e8:	41 e0       	ldi	r20, 0x01	; 1
    27ea:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
				break;
		}
		SEGMENT_Driver_Checker = SEGMENT_OK;
    27ee:	19 82       	std	Y+1, r1	; 0x01
	}
	return SEGMENT_Driver_Checker;
    27f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    27f2:	0f 90       	pop	r0
    27f4:	0f 90       	pop	r0
    27f6:	0f 90       	pop	r0
    27f8:	0f 90       	pop	r0
    27fa:	0f 90       	pop	r0
    27fc:	cf 91       	pop	r28
    27fe:	df 91       	pop	r29
    2800:	08 95       	ret

00002802 <LM35_getTemperature>:
#include "avr/io.h" /* To use the IO Ports Registers */
#include <util/delay.h>


// Initializes and enables the ADC Module to start functionality
uint8 LM35_getTemperature(void) {
    2802:	df 93       	push	r29
    2804:	cf 93       	push	r28
    2806:	00 d0       	rcall	.+0      	; 0x2808 <LM35_getTemperature+0x6>
    2808:	cd b7       	in	r28, 0x3d	; 61
    280a:	de b7       	in	r29, 0x3e	; 62
	uint8 temperature = 0;
    280c:	1a 82       	std	Y+2, r1	; 0x02
	uint8 ADC_Value = 0;
    280e:	19 82       	std	Y+1, r1	; 0x01
	ADC_Value = ADC_readChannel(LM35_CH_ID);
    2810:	82 e0       	ldi	r24, 0x02	; 2
    2812:	0e 94 65 12 	call	0x24ca	; 0x24ca <ADC_readChannel>
    2816:	89 83       	std	Y+1, r24	; 0x01

	temperature = (uint8) ( ( (uint32)ADC_Value * LM35_MAX_TEMP * ADC_REFERENCE_VOLT_VALUE) / (ADC_MAX_VALUE * LM35_MAX_VOLT) );
    2818:	89 81       	ldd	r24, Y+1	; 0x01
    281a:	88 2f       	mov	r24, r24
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	a0 e0       	ldi	r26, 0x00	; 0
    2820:	b0 e0       	ldi	r27, 0x00	; 0
    2822:	2e ee       	ldi	r18, 0xEE	; 238
    2824:	32 e0       	ldi	r19, 0x02	; 2
    2826:	40 e0       	ldi	r20, 0x00	; 0
    2828:	50 e0       	ldi	r21, 0x00	; 0
    282a:	bc 01       	movw	r22, r24
    282c:	cd 01       	movw	r24, r26
    282e:	0e 94 8e 20 	call	0x411c	; 0x411c <__mulsi3>
    2832:	dc 01       	movw	r26, r24
    2834:	cb 01       	movw	r24, r22
    2836:	bc 01       	movw	r22, r24
    2838:	cd 01       	movw	r24, r26
    283a:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    283e:	dc 01       	movw	r26, r24
    2840:	cb 01       	movw	r24, r22
    2842:	bc 01       	movw	r22, r24
    2844:	cd 01       	movw	r24, r26
    2846:	20 e0       	ldi	r18, 0x00	; 0
    2848:	30 ed       	ldi	r19, 0xD0	; 208
    284a:	4f eb       	ldi	r20, 0xBF	; 191
    284c:	54 e4       	ldi	r21, 0x44	; 68
    284e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2852:	dc 01       	movw	r26, r24
    2854:	cb 01       	movw	r24, r22
    2856:	bc 01       	movw	r22, r24
    2858:	cd 01       	movw	r24, r26
    285a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    285e:	dc 01       	movw	r26, r24
    2860:	cb 01       	movw	r24, r22
    2862:	8a 83       	std	Y+2, r24	; 0x02

	return temperature;
    2864:	8a 81       	ldd	r24, Y+2	; 0x02

}
    2866:	0f 90       	pop	r0
    2868:	0f 90       	pop	r0
    286a:	cf 91       	pop	r28
    286c:	df 91       	pop	r29
    286e:	08 95       	ret

00002870 <LED_Init>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
LED_Error_t LED_Init(uint8 port_num, uint8 pin_num) {
    2870:	df 93       	push	r29
    2872:	cf 93       	push	r28
    2874:	00 d0       	rcall	.+0      	; 0x2876 <LED_Init+0x6>
    2876:	0f 92       	push	r0
    2878:	cd b7       	in	r28, 0x3d	; 61
    287a:	de b7       	in	r29, 0x3e	; 62
    287c:	8a 83       	std	Y+2, r24	; 0x02
    287e:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t LED_Driver_Checker = NULL;
    2880:	19 82       	std	Y+1, r1	; 0x01
	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    2882:	8b 81       	ldd	r24, Y+3	; 0x03
    2884:	88 30       	cpi	r24, 0x08	; 8
    2886:	18 f0       	brcs	.+6      	; 0x288e <LED_Init+0x1e>
		LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    2888:	81 e0       	ldi	r24, 0x01	; 1
    288a:	89 83       	std	Y+1, r24	; 0x01
    288c:	0c c0       	rjmp	.+24     	; 0x28a6 <LED_Init+0x36>
	}
	else if((port_num >= NUM_OF_PORTS)) {
    288e:	8a 81       	ldd	r24, Y+2	; 0x02
    2890:	84 30       	cpi	r24, 0x04	; 4
    2892:	18 f0       	brcs	.+6      	; 0x289a <LED_Init+0x2a>
		LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    2894:	82 e0       	ldi	r24, 0x02	; 2
    2896:	89 83       	std	Y+1, r24	; 0x01
    2898:	06 c0       	rjmp	.+12     	; 0x28a6 <LED_Init+0x36>
	}
	else {
		/* Setup the pin direction as required */
		GPIO_setupPinDirection(port_num, pin_num, PIN_OUTPUT);
    289a:	8a 81       	ldd	r24, Y+2	; 0x02
    289c:	6b 81       	ldd	r22, Y+3	; 0x03
    289e:	41 e0       	ldi	r20, 0x01	; 1
    28a0:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <GPIO_setupPinDirection>
		LED_Driver_Checker = LED_OK;
    28a4:	19 82       	std	Y+1, r1	; 0x01
	}
	return LED_Driver_Checker;
    28a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    28a8:	0f 90       	pop	r0
    28aa:	0f 90       	pop	r0
    28ac:	0f 90       	pop	r0
    28ae:	cf 91       	pop	r28
    28b0:	df 91       	pop	r29
    28b2:	08 95       	ret

000028b4 <LED_On>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
LED_Error_t LED_On(uint8 port_num, uint8 pin_num) {
    28b4:	df 93       	push	r29
    28b6:	cf 93       	push	r28
    28b8:	00 d0       	rcall	.+0      	; 0x28ba <LED_On+0x6>
    28ba:	0f 92       	push	r0
    28bc:	cd b7       	in	r28, 0x3d	; 61
    28be:	de b7       	in	r29, 0x3e	; 62
    28c0:	8a 83       	std	Y+2, r24	; 0x02
    28c2:	6b 83       	std	Y+3, r22	; 0x03

	uint8_t LED_Driver_Checker = NULL;
    28c4:	19 82       	std	Y+1, r1	; 0x01
		if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    28c6:	8b 81       	ldd	r24, Y+3	; 0x03
    28c8:	88 30       	cpi	r24, 0x08	; 8
    28ca:	18 f0       	brcs	.+6      	; 0x28d2 <LED_On+0x1e>
			LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    28cc:	81 e0       	ldi	r24, 0x01	; 1
    28ce:	89 83       	std	Y+1, r24	; 0x01
    28d0:	0c c0       	rjmp	.+24     	; 0x28ea <LED_On+0x36>
		}
		else if((port_num >= NUM_OF_PORTS)) {
    28d2:	8a 81       	ldd	r24, Y+2	; 0x02
    28d4:	84 30       	cpi	r24, 0x04	; 4
    28d6:	18 f0       	brcs	.+6      	; 0x28de <LED_On+0x2a>
			LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    28d8:	82 e0       	ldi	r24, 0x02	; 2
    28da:	89 83       	std	Y+1, r24	; 0x01
    28dc:	06 c0       	rjmp	.+12     	; 0x28ea <LED_On+0x36>
		else {
			/* Setup the pin direction as required */
			#if (LED_MODE == LED_NEGATIVE_LOGIC)
				GPIO_writePin(port_num, pin_num, LOGIC_LOW);
			#elif (LED_MODE == LED_POSITIVE_LOGIC)
				GPIO_writePin(port_num, pin_num, LOGIC_HIGH);
    28de:	8a 81       	ldd	r24, Y+2	; 0x02
    28e0:	6b 81       	ldd	r22, Y+3	; 0x03
    28e2:	41 e0       	ldi	r20, 0x01	; 1
    28e4:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
			#endif
			LED_Driver_Checker = LED_OK;
    28e8:	19 82       	std	Y+1, r1	; 0x01
		}
		return LED_Driver_Checker;
    28ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    28ec:	0f 90       	pop	r0
    28ee:	0f 90       	pop	r0
    28f0:	0f 90       	pop	r0
    28f2:	cf 91       	pop	r28
    28f4:	df 91       	pop	r29
    28f6:	08 95       	ret

000028f8 <LED_Off>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
LED_Error_t LED_Off(uint8 port_num, uint8 pin_num) {
    28f8:	df 93       	push	r29
    28fa:	cf 93       	push	r28
    28fc:	00 d0       	rcall	.+0      	; 0x28fe <LED_Off+0x6>
    28fe:	0f 92       	push	r0
    2900:	cd b7       	in	r28, 0x3d	; 61
    2902:	de b7       	in	r29, 0x3e	; 62
    2904:	8a 83       	std	Y+2, r24	; 0x02
    2906:	6b 83       	std	Y+3, r22	; 0x03

	uint8_t LED_Driver_Checker = NULL;
    2908:	19 82       	std	Y+1, r1	; 0x01
		if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    290a:	8b 81       	ldd	r24, Y+3	; 0x03
    290c:	88 30       	cpi	r24, 0x08	; 8
    290e:	18 f0       	brcs	.+6      	; 0x2916 <LED_Off+0x1e>
			LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    2910:	81 e0       	ldi	r24, 0x01	; 1
    2912:	89 83       	std	Y+1, r24	; 0x01
    2914:	0c c0       	rjmp	.+24     	; 0x292e <LED_Off+0x36>
		}
		else if((port_num >= NUM_OF_PORTS)) {
    2916:	8a 81       	ldd	r24, Y+2	; 0x02
    2918:	84 30       	cpi	r24, 0x04	; 4
    291a:	18 f0       	brcs	.+6      	; 0x2922 <LED_Off+0x2a>
			LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    291c:	82 e0       	ldi	r24, 0x02	; 2
    291e:	89 83       	std	Y+1, r24	; 0x01
    2920:	06 c0       	rjmp	.+12     	; 0x292e <LED_Off+0x36>
		else {
			/* Setup the pin direction as required */
			#if (LED_MODE == LED_NEGATIVE_LOGIC)
				GPIO_writePin(port_num, pin_num, LOGIC_HIGH);
			#elif (LED_MODE == LED_POSITIVE_LOGIC)
				GPIO_writePin(port_num, pin_num, LOGIC_LOW);
    2922:	8a 81       	ldd	r24, Y+2	; 0x02
    2924:	6b 81       	ldd	r22, Y+3	; 0x03
    2926:	40 e0       	ldi	r20, 0x00	; 0
    2928:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
			#endif
			LED_Driver_Checker = LED_OK;
    292c:	19 82       	std	Y+1, r1	; 0x01
		}
		return LED_Driver_Checker;
    292e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2930:	0f 90       	pop	r0
    2932:	0f 90       	pop	r0
    2934:	0f 90       	pop	r0
    2936:	cf 91       	pop	r28
    2938:	df 91       	pop	r29
    293a:	08 95       	ret

0000293c <LED_Toggle>:

LED_Error_t LED_Toggle(uint8 port_num, uint8 pin_num) {
    293c:	df 93       	push	r29
    293e:	cf 93       	push	r28
    2940:	00 d0       	rcall	.+0      	; 0x2942 <LED_Toggle+0x6>
    2942:	0f 92       	push	r0
    2944:	cd b7       	in	r28, 0x3d	; 61
    2946:	de b7       	in	r29, 0x3e	; 62
    2948:	8a 83       	std	Y+2, r24	; 0x02
    294a:	6b 83       	std	Y+3, r22	; 0x03

	uint8_t LED_Driver_Checker = NULL;
    294c:	19 82       	std	Y+1, r1	; 0x01
		if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    294e:	8b 81       	ldd	r24, Y+3	; 0x03
    2950:	88 30       	cpi	r24, 0x08	; 8
    2952:	18 f0       	brcs	.+6      	; 0x295a <LED_Toggle+0x1e>
			LED_Driver_Checker = LED_WRONG_PIN_NUMBER;
    2954:	81 e0       	ldi	r24, 0x01	; 1
    2956:	89 83       	std	Y+1, r24	; 0x01
    2958:	0b c0       	rjmp	.+22     	; 0x2970 <LED_Toggle+0x34>
		}
		else if((port_num >= NUM_OF_PORTS)) {
    295a:	8a 81       	ldd	r24, Y+2	; 0x02
    295c:	84 30       	cpi	r24, 0x04	; 4
    295e:	18 f0       	brcs	.+6      	; 0x2966 <LED_Toggle+0x2a>
			LED_Driver_Checker = LED_WRONG_PORT_NUMBER;
    2960:	82 e0       	ldi	r24, 0x02	; 2
    2962:	89 83       	std	Y+1, r24	; 0x01
    2964:	05 c0       	rjmp	.+10     	; 0x2970 <LED_Toggle+0x34>
		}
		else {
			/* Setup the pin direction as required */
			GPIO_togglePin(port_num, pin_num);
    2966:	8a 81       	ldd	r24, Y+2	; 0x02
    2968:	6b 81       	ldd	r22, Y+3	; 0x03
    296a:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <GPIO_togglePin>
			LED_Driver_Checker = LED_OK;
    296e:	19 82       	std	Y+1, r1	; 0x01
		}
		return LED_Driver_Checker;
    2970:	89 81       	ldd	r24, Y+1	; 0x01
}
    2972:	0f 90       	pop	r0
    2974:	0f 90       	pop	r0
    2976:	0f 90       	pop	r0
    2978:	cf 91       	pop	r28
    297a:	df 91       	pop	r29
    297c:	08 95       	ret

0000297e <LCD_Init>:
#include "avr/io.h" /* To use the IO Ports Registers */
#include <util/delay.h>


// Initializes and enables the LCD Module to start functionality
void LCD_Init(void) {
    297e:	df 93       	push	r29
    2980:	cf 93       	push	r28
    2982:	cd b7       	in	r28, 0x3d	; 61
    2984:	de b7       	in	r29, 0x3e	; 62
    2986:	2e 97       	sbiw	r28, 0x0e	; 14
    2988:	0f b6       	in	r0, 0x3f	; 63
    298a:	f8 94       	cli
    298c:	de bf       	out	0x3e, r29	; 62
    298e:	0f be       	out	0x3f, r0	; 63
    2990:	cd bf       	out	0x3d, r28	; 61
	// Initialize RS Pin
	GPIO_setupPinDirection(LCD_INIT_PORT, LCD_RS, PIN_OUTPUT);
    2992:	80 e0       	ldi	r24, 0x00	; 0
    2994:	61 e0       	ldi	r22, 0x01	; 1
    2996:	41 e0       	ldi	r20, 0x01	; 1
    2998:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <GPIO_setupPinDirection>

	// Initialize Enable Pin
	GPIO_setupPinDirection(LCD_INIT_PORT, LCD_ENABLE, PIN_OUTPUT);
    299c:	80 e0       	ldi	r24, 0x00	; 0
    299e:	62 e0       	ldi	r22, 0x02	; 2
    29a0:	41 e0       	ldi	r20, 0x01	; 1
    29a2:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <GPIO_setupPinDirection>
    29a6:	80 e0       	ldi	r24, 0x00	; 0
    29a8:	90 e0       	ldi	r25, 0x00	; 0
    29aa:	a0 ea       	ldi	r26, 0xA0	; 160
    29ac:	b1 e4       	ldi	r27, 0x41	; 65
    29ae:	8b 87       	std	Y+11, r24	; 0x0b
    29b0:	9c 87       	std	Y+12, r25	; 0x0c
    29b2:	ad 87       	std	Y+13, r26	; 0x0d
    29b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    29b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    29ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    29bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    29be:	20 e0       	ldi	r18, 0x00	; 0
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	4a ef       	ldi	r20, 0xFA	; 250
    29c4:	54 e4       	ldi	r21, 0x44	; 68
    29c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ca:	dc 01       	movw	r26, r24
    29cc:	cb 01       	movw	r24, r22
    29ce:	8f 83       	std	Y+7, r24	; 0x07
    29d0:	98 87       	std	Y+8, r25	; 0x08
    29d2:	a9 87       	std	Y+9, r26	; 0x09
    29d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29d6:	6f 81       	ldd	r22, Y+7	; 0x07
    29d8:	78 85       	ldd	r23, Y+8	; 0x08
    29da:	89 85       	ldd	r24, Y+9	; 0x09
    29dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    29de:	20 e0       	ldi	r18, 0x00	; 0
    29e0:	30 e0       	ldi	r19, 0x00	; 0
    29e2:	40 e8       	ldi	r20, 0x80	; 128
    29e4:	5f e3       	ldi	r21, 0x3F	; 63
    29e6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    29ea:	88 23       	and	r24, r24
    29ec:	2c f4       	brge	.+10     	; 0x29f8 <LCD_Init+0x7a>
		__ticks = 1;
    29ee:	81 e0       	ldi	r24, 0x01	; 1
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	9e 83       	std	Y+6, r25	; 0x06
    29f4:	8d 83       	std	Y+5, r24	; 0x05
    29f6:	3f c0       	rjmp	.+126    	; 0x2a76 <LCD_Init+0xf8>
	else if (__tmp > 65535)
    29f8:	6f 81       	ldd	r22, Y+7	; 0x07
    29fa:	78 85       	ldd	r23, Y+8	; 0x08
    29fc:	89 85       	ldd	r24, Y+9	; 0x09
    29fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a00:	20 e0       	ldi	r18, 0x00	; 0
    2a02:	3f ef       	ldi	r19, 0xFF	; 255
    2a04:	4f e7       	ldi	r20, 0x7F	; 127
    2a06:	57 e4       	ldi	r21, 0x47	; 71
    2a08:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2a0c:	18 16       	cp	r1, r24
    2a0e:	4c f5       	brge	.+82     	; 0x2a62 <LCD_Init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a10:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a12:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a14:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a16:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a18:	20 e0       	ldi	r18, 0x00	; 0
    2a1a:	30 e0       	ldi	r19, 0x00	; 0
    2a1c:	40 e2       	ldi	r20, 0x20	; 32
    2a1e:	51 e4       	ldi	r21, 0x41	; 65
    2a20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a24:	dc 01       	movw	r26, r24
    2a26:	cb 01       	movw	r24, r22
    2a28:	bc 01       	movw	r22, r24
    2a2a:	cd 01       	movw	r24, r26
    2a2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a30:	dc 01       	movw	r26, r24
    2a32:	cb 01       	movw	r24, r22
    2a34:	9e 83       	std	Y+6, r25	; 0x06
    2a36:	8d 83       	std	Y+5, r24	; 0x05
    2a38:	0f c0       	rjmp	.+30     	; 0x2a58 <LCD_Init+0xda>
    2a3a:	88 ec       	ldi	r24, 0xC8	; 200
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	9c 83       	std	Y+4, r25	; 0x04
    2a40:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a42:	8b 81       	ldd	r24, Y+3	; 0x03
    2a44:	9c 81       	ldd	r25, Y+4	; 0x04
    2a46:	01 97       	sbiw	r24, 0x01	; 1
    2a48:	f1 f7       	brne	.-4      	; 0x2a46 <LCD_Init+0xc8>
    2a4a:	9c 83       	std	Y+4, r25	; 0x04
    2a4c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a4e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a50:	9e 81       	ldd	r25, Y+6	; 0x06
    2a52:	01 97       	sbiw	r24, 0x01	; 1
    2a54:	9e 83       	std	Y+6, r25	; 0x06
    2a56:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a58:	8d 81       	ldd	r24, Y+5	; 0x05
    2a5a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a5c:	00 97       	sbiw	r24, 0x00	; 0
    2a5e:	69 f7       	brne	.-38     	; 0x2a3a <LCD_Init+0xbc>
    2a60:	14 c0       	rjmp	.+40     	; 0x2a8a <LCD_Init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a62:	6f 81       	ldd	r22, Y+7	; 0x07
    2a64:	78 85       	ldd	r23, Y+8	; 0x08
    2a66:	89 85       	ldd	r24, Y+9	; 0x09
    2a68:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a6e:	dc 01       	movw	r26, r24
    2a70:	cb 01       	movw	r24, r22
    2a72:	9e 83       	std	Y+6, r25	; 0x06
    2a74:	8d 83       	std	Y+5, r24	; 0x05
    2a76:	8d 81       	ldd	r24, Y+5	; 0x05
    2a78:	9e 81       	ldd	r25, Y+6	; 0x06
    2a7a:	9a 83       	std	Y+2, r25	; 0x02
    2a7c:	89 83       	std	Y+1, r24	; 0x01
    2a7e:	89 81       	ldd	r24, Y+1	; 0x01
    2a80:	9a 81       	ldd	r25, Y+2	; 0x02
    2a82:	01 97       	sbiw	r24, 0x01	; 1
    2a84:	f1 f7       	brne	.-4      	; 0x2a82 <LCD_Init+0x104>
    2a86:	9a 83       	std	Y+2, r25	; 0x02
    2a88:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);

	// Initializing Sending Commands
	// Checks which BIT Mode, 4 or 8 line bit
	if (LCD_BIT_MODE == 4) {
		GPIO_setupPinDirection(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 0), PIN_OUTPUT);
    2a8a:	80 e0       	ldi	r24, 0x00	; 0
    2a8c:	63 e0       	ldi	r22, 0x03	; 3
    2a8e:	41 e0       	ldi	r20, 0x01	; 1
    2a90:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 1), PIN_OUTPUT);
    2a94:	80 e0       	ldi	r24, 0x00	; 0
    2a96:	64 e0       	ldi	r22, 0x04	; 4
    2a98:	41 e0       	ldi	r20, 0x01	; 1
    2a9a:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 2), PIN_OUTPUT);
    2a9e:	80 e0       	ldi	r24, 0x00	; 0
    2aa0:	65 e0       	ldi	r22, 0x05	; 5
    2aa2:	41 e0       	ldi	r20, 0x01	; 1
    2aa4:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 3), PIN_OUTPUT);
    2aa8:	80 e0       	ldi	r24, 0x00	; 0
    2aaa:	66 e0       	ldi	r22, 0x06	; 6
    2aac:	41 e0       	ldi	r20, 0x01	; 1
    2aae:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <GPIO_setupPinDirection>

		LCD_sendCommand(LCD_TWO_LINE_FOUR_BIT_INIT1);
    2ab2:	83 e3       	ldi	r24, 0x33	; 51
    2ab4:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <LCD_sendCommand>
		LCD_sendCommand(LCD_TWO_LINE_FOUR_BIT_INIT2);
    2ab8:	82 e3       	ldi	r24, 0x32	; 50
    2aba:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <LCD_sendCommand>
		LCD_sendCommand(LCD_TWO_LINE_FOUR_BIT);
    2abe:	88 e2       	ldi	r24, 0x28	; 40
    2ac0:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <LCD_sendCommand>

		LCD_sendCommand(LCD_TWO_LINE_EIGHT_BIT);
	}

	// Makes the cursor off
	LCD_sendCommand(LCD_CURSOR_OFF);
    2ac4:	8c e0       	ldi	r24, 0x0C	; 12
    2ac6:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <LCD_sendCommand>
	// Clears Display
	LCD_sendCommand(LCD_CLEAR_DISPLAY);
    2aca:	81 e0       	ldi	r24, 0x01	; 1
    2acc:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <LCD_sendCommand>
}
    2ad0:	2e 96       	adiw	r28, 0x0e	; 14
    2ad2:	0f b6       	in	r0, 0x3f	; 63
    2ad4:	f8 94       	cli
    2ad6:	de bf       	out	0x3e, r29	; 62
    2ad8:	0f be       	out	0x3f, r0	; 63
    2ada:	cd bf       	out	0x3d, r28	; 61
    2adc:	cf 91       	pop	r28
    2ade:	df 91       	pop	r29
    2ae0:	08 95       	ret

00002ae2 <LCD_sendCommand>:


// Sends a command to the LCD
void LCD_sendCommand(uint8 command) {
    2ae2:	0f 93       	push	r16
    2ae4:	1f 93       	push	r17
    2ae6:	df 93       	push	r29
    2ae8:	cf 93       	push	r28
    2aea:	cd b7       	in	r28, 0x3d	; 61
    2aec:	de b7       	in	r29, 0x3e	; 62
    2aee:	c3 56       	subi	r28, 0x63	; 99
    2af0:	d0 40       	sbci	r29, 0x00	; 0
    2af2:	0f b6       	in	r0, 0x3f	; 63
    2af4:	f8 94       	cli
    2af6:	de bf       	out	0x3e, r29	; 62
    2af8:	0f be       	out	0x3f, r0	; 63
    2afa:	cd bf       	out	0x3d, r28	; 61
    2afc:	fe 01       	movw	r30, r28
    2afe:	ed 59       	subi	r30, 0x9D	; 157
    2b00:	ff 4f       	sbci	r31, 0xFF	; 255
    2b02:	80 83       	st	Z, r24
	// Set RS Pin to '0'
	GPIO_writePin(LCD_INIT_PORT, LCD_RS, LOGIC_LOW);
    2b04:	80 e0       	ldi	r24, 0x00	; 0
    2b06:	61 e0       	ldi	r22, 0x01	; 1
    2b08:	40 e0       	ldi	r20, 0x00	; 0
    2b0a:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
    2b0e:	fe 01       	movw	r30, r28
    2b10:	e1 5a       	subi	r30, 0xA1	; 161
    2b12:	ff 4f       	sbci	r31, 0xFF	; 255
    2b14:	80 e0       	ldi	r24, 0x00	; 0
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	a0 e8       	ldi	r26, 0x80	; 128
    2b1a:	bf e3       	ldi	r27, 0x3F	; 63
    2b1c:	80 83       	st	Z, r24
    2b1e:	91 83       	std	Z+1, r25	; 0x01
    2b20:	a2 83       	std	Z+2, r26	; 0x02
    2b22:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b24:	8e 01       	movw	r16, r28
    2b26:	05 5a       	subi	r16, 0xA5	; 165
    2b28:	1f 4f       	sbci	r17, 0xFF	; 255
    2b2a:	fe 01       	movw	r30, r28
    2b2c:	e1 5a       	subi	r30, 0xA1	; 161
    2b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b30:	60 81       	ld	r22, Z
    2b32:	71 81       	ldd	r23, Z+1	; 0x01
    2b34:	82 81       	ldd	r24, Z+2	; 0x02
    2b36:	93 81       	ldd	r25, Z+3	; 0x03
    2b38:	20 e0       	ldi	r18, 0x00	; 0
    2b3a:	30 e0       	ldi	r19, 0x00	; 0
    2b3c:	4a ef       	ldi	r20, 0xFA	; 250
    2b3e:	54 e4       	ldi	r21, 0x44	; 68
    2b40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b44:	dc 01       	movw	r26, r24
    2b46:	cb 01       	movw	r24, r22
    2b48:	f8 01       	movw	r30, r16
    2b4a:	80 83       	st	Z, r24
    2b4c:	91 83       	std	Z+1, r25	; 0x01
    2b4e:	a2 83       	std	Z+2, r26	; 0x02
    2b50:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b52:	fe 01       	movw	r30, r28
    2b54:	e5 5a       	subi	r30, 0xA5	; 165
    2b56:	ff 4f       	sbci	r31, 0xFF	; 255
    2b58:	60 81       	ld	r22, Z
    2b5a:	71 81       	ldd	r23, Z+1	; 0x01
    2b5c:	82 81       	ldd	r24, Z+2	; 0x02
    2b5e:	93 81       	ldd	r25, Z+3	; 0x03
    2b60:	20 e0       	ldi	r18, 0x00	; 0
    2b62:	30 e0       	ldi	r19, 0x00	; 0
    2b64:	40 e8       	ldi	r20, 0x80	; 128
    2b66:	5f e3       	ldi	r21, 0x3F	; 63
    2b68:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2b6c:	88 23       	and	r24, r24
    2b6e:	44 f4       	brge	.+16     	; 0x2b80 <LCD_sendCommand+0x9e>
		__ticks = 1;
    2b70:	fe 01       	movw	r30, r28
    2b72:	e7 5a       	subi	r30, 0xA7	; 167
    2b74:	ff 4f       	sbci	r31, 0xFF	; 255
    2b76:	81 e0       	ldi	r24, 0x01	; 1
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	91 83       	std	Z+1, r25	; 0x01
    2b7c:	80 83       	st	Z, r24
    2b7e:	64 c0       	rjmp	.+200    	; 0x2c48 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    2b80:	fe 01       	movw	r30, r28
    2b82:	e5 5a       	subi	r30, 0xA5	; 165
    2b84:	ff 4f       	sbci	r31, 0xFF	; 255
    2b86:	60 81       	ld	r22, Z
    2b88:	71 81       	ldd	r23, Z+1	; 0x01
    2b8a:	82 81       	ldd	r24, Z+2	; 0x02
    2b8c:	93 81       	ldd	r25, Z+3	; 0x03
    2b8e:	20 e0       	ldi	r18, 0x00	; 0
    2b90:	3f ef       	ldi	r19, 0xFF	; 255
    2b92:	4f e7       	ldi	r20, 0x7F	; 127
    2b94:	57 e4       	ldi	r21, 0x47	; 71
    2b96:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2b9a:	18 16       	cp	r1, r24
    2b9c:	0c f0       	brlt	.+2      	; 0x2ba0 <LCD_sendCommand+0xbe>
    2b9e:	43 c0       	rjmp	.+134    	; 0x2c26 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ba0:	fe 01       	movw	r30, r28
    2ba2:	e1 5a       	subi	r30, 0xA1	; 161
    2ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba6:	60 81       	ld	r22, Z
    2ba8:	71 81       	ldd	r23, Z+1	; 0x01
    2baa:	82 81       	ldd	r24, Z+2	; 0x02
    2bac:	93 81       	ldd	r25, Z+3	; 0x03
    2bae:	20 e0       	ldi	r18, 0x00	; 0
    2bb0:	30 e0       	ldi	r19, 0x00	; 0
    2bb2:	40 e2       	ldi	r20, 0x20	; 32
    2bb4:	51 e4       	ldi	r21, 0x41	; 65
    2bb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bba:	dc 01       	movw	r26, r24
    2bbc:	cb 01       	movw	r24, r22
    2bbe:	8e 01       	movw	r16, r28
    2bc0:	07 5a       	subi	r16, 0xA7	; 167
    2bc2:	1f 4f       	sbci	r17, 0xFF	; 255
    2bc4:	bc 01       	movw	r22, r24
    2bc6:	cd 01       	movw	r24, r26
    2bc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bcc:	dc 01       	movw	r26, r24
    2bce:	cb 01       	movw	r24, r22
    2bd0:	f8 01       	movw	r30, r16
    2bd2:	91 83       	std	Z+1, r25	; 0x01
    2bd4:	80 83       	st	Z, r24
    2bd6:	1f c0       	rjmp	.+62     	; 0x2c16 <LCD_sendCommand+0x134>
    2bd8:	fe 01       	movw	r30, r28
    2bda:	e9 5a       	subi	r30, 0xA9	; 169
    2bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bde:	88 ec       	ldi	r24, 0xC8	; 200
    2be0:	90 e0       	ldi	r25, 0x00	; 0
    2be2:	91 83       	std	Z+1, r25	; 0x01
    2be4:	80 83       	st	Z, r24
    2be6:	fe 01       	movw	r30, r28
    2be8:	e9 5a       	subi	r30, 0xA9	; 169
    2bea:	ff 4f       	sbci	r31, 0xFF	; 255
    2bec:	80 81       	ld	r24, Z
    2bee:	91 81       	ldd	r25, Z+1	; 0x01
    2bf0:	01 97       	sbiw	r24, 0x01	; 1
    2bf2:	f1 f7       	brne	.-4      	; 0x2bf0 <LCD_sendCommand+0x10e>
    2bf4:	fe 01       	movw	r30, r28
    2bf6:	e9 5a       	subi	r30, 0xA9	; 169
    2bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfa:	91 83       	std	Z+1, r25	; 0x01
    2bfc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bfe:	de 01       	movw	r26, r28
    2c00:	a7 5a       	subi	r26, 0xA7	; 167
    2c02:	bf 4f       	sbci	r27, 0xFF	; 255
    2c04:	fe 01       	movw	r30, r28
    2c06:	e7 5a       	subi	r30, 0xA7	; 167
    2c08:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0a:	80 81       	ld	r24, Z
    2c0c:	91 81       	ldd	r25, Z+1	; 0x01
    2c0e:	01 97       	sbiw	r24, 0x01	; 1
    2c10:	11 96       	adiw	r26, 0x01	; 1
    2c12:	9c 93       	st	X, r25
    2c14:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c16:	fe 01       	movw	r30, r28
    2c18:	e7 5a       	subi	r30, 0xA7	; 167
    2c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1c:	80 81       	ld	r24, Z
    2c1e:	91 81       	ldd	r25, Z+1	; 0x01
    2c20:	00 97       	sbiw	r24, 0x00	; 0
    2c22:	d1 f6       	brne	.-76     	; 0x2bd8 <LCD_sendCommand+0xf6>
    2c24:	27 c0       	rjmp	.+78     	; 0x2c74 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c26:	8e 01       	movw	r16, r28
    2c28:	07 5a       	subi	r16, 0xA7	; 167
    2c2a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c2c:	fe 01       	movw	r30, r28
    2c2e:	e5 5a       	subi	r30, 0xA5	; 165
    2c30:	ff 4f       	sbci	r31, 0xFF	; 255
    2c32:	60 81       	ld	r22, Z
    2c34:	71 81       	ldd	r23, Z+1	; 0x01
    2c36:	82 81       	ldd	r24, Z+2	; 0x02
    2c38:	93 81       	ldd	r25, Z+3	; 0x03
    2c3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c3e:	dc 01       	movw	r26, r24
    2c40:	cb 01       	movw	r24, r22
    2c42:	f8 01       	movw	r30, r16
    2c44:	91 83       	std	Z+1, r25	; 0x01
    2c46:	80 83       	st	Z, r24
    2c48:	de 01       	movw	r26, r28
    2c4a:	ab 5a       	subi	r26, 0xAB	; 171
    2c4c:	bf 4f       	sbci	r27, 0xFF	; 255
    2c4e:	fe 01       	movw	r30, r28
    2c50:	e7 5a       	subi	r30, 0xA7	; 167
    2c52:	ff 4f       	sbci	r31, 0xFF	; 255
    2c54:	80 81       	ld	r24, Z
    2c56:	91 81       	ldd	r25, Z+1	; 0x01
    2c58:	8d 93       	st	X+, r24
    2c5a:	9c 93       	st	X, r25
    2c5c:	fe 01       	movw	r30, r28
    2c5e:	eb 5a       	subi	r30, 0xAB	; 171
    2c60:	ff 4f       	sbci	r31, 0xFF	; 255
    2c62:	80 81       	ld	r24, Z
    2c64:	91 81       	ldd	r25, Z+1	; 0x01
    2c66:	01 97       	sbiw	r24, 0x01	; 1
    2c68:	f1 f7       	brne	.-4      	; 0x2c66 <LCD_sendCommand+0x184>
    2c6a:	fe 01       	movw	r30, r28
    2c6c:	eb 5a       	subi	r30, 0xAB	; 171
    2c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c70:	91 83       	std	Z+1, r25	; 0x01
    2c72:	80 83       	st	Z, r24
	_delay_ms(1);

	// Set Enable Pin to '1'
	GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
    2c74:	80 e0       	ldi	r24, 0x00	; 0
    2c76:	62 e0       	ldi	r22, 0x02	; 2
    2c78:	41 e0       	ldi	r20, 0x01	; 1
    2c7a:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
    2c7e:	fe 01       	movw	r30, r28
    2c80:	ef 5a       	subi	r30, 0xAF	; 175
    2c82:	ff 4f       	sbci	r31, 0xFF	; 255
    2c84:	80 e0       	ldi	r24, 0x00	; 0
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	a0 e8       	ldi	r26, 0x80	; 128
    2c8a:	bf e3       	ldi	r27, 0x3F	; 63
    2c8c:	80 83       	st	Z, r24
    2c8e:	91 83       	std	Z+1, r25	; 0x01
    2c90:	a2 83       	std	Z+2, r26	; 0x02
    2c92:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c94:	8e 01       	movw	r16, r28
    2c96:	03 5b       	subi	r16, 0xB3	; 179
    2c98:	1f 4f       	sbci	r17, 0xFF	; 255
    2c9a:	fe 01       	movw	r30, r28
    2c9c:	ef 5a       	subi	r30, 0xAF	; 175
    2c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca0:	60 81       	ld	r22, Z
    2ca2:	71 81       	ldd	r23, Z+1	; 0x01
    2ca4:	82 81       	ldd	r24, Z+2	; 0x02
    2ca6:	93 81       	ldd	r25, Z+3	; 0x03
    2ca8:	20 e0       	ldi	r18, 0x00	; 0
    2caa:	30 e0       	ldi	r19, 0x00	; 0
    2cac:	4a ef       	ldi	r20, 0xFA	; 250
    2cae:	54 e4       	ldi	r21, 0x44	; 68
    2cb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb4:	dc 01       	movw	r26, r24
    2cb6:	cb 01       	movw	r24, r22
    2cb8:	f8 01       	movw	r30, r16
    2cba:	80 83       	st	Z, r24
    2cbc:	91 83       	std	Z+1, r25	; 0x01
    2cbe:	a2 83       	std	Z+2, r26	; 0x02
    2cc0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2cc2:	fe 01       	movw	r30, r28
    2cc4:	e3 5b       	subi	r30, 0xB3	; 179
    2cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc8:	60 81       	ld	r22, Z
    2cca:	71 81       	ldd	r23, Z+1	; 0x01
    2ccc:	82 81       	ldd	r24, Z+2	; 0x02
    2cce:	93 81       	ldd	r25, Z+3	; 0x03
    2cd0:	20 e0       	ldi	r18, 0x00	; 0
    2cd2:	30 e0       	ldi	r19, 0x00	; 0
    2cd4:	40 e8       	ldi	r20, 0x80	; 128
    2cd6:	5f e3       	ldi	r21, 0x3F	; 63
    2cd8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2cdc:	88 23       	and	r24, r24
    2cde:	44 f4       	brge	.+16     	; 0x2cf0 <LCD_sendCommand+0x20e>
		__ticks = 1;
    2ce0:	fe 01       	movw	r30, r28
    2ce2:	e5 5b       	subi	r30, 0xB5	; 181
    2ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce6:	81 e0       	ldi	r24, 0x01	; 1
    2ce8:	90 e0       	ldi	r25, 0x00	; 0
    2cea:	91 83       	std	Z+1, r25	; 0x01
    2cec:	80 83       	st	Z, r24
    2cee:	64 c0       	rjmp	.+200    	; 0x2db8 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    2cf0:	fe 01       	movw	r30, r28
    2cf2:	e3 5b       	subi	r30, 0xB3	; 179
    2cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf6:	60 81       	ld	r22, Z
    2cf8:	71 81       	ldd	r23, Z+1	; 0x01
    2cfa:	82 81       	ldd	r24, Z+2	; 0x02
    2cfc:	93 81       	ldd	r25, Z+3	; 0x03
    2cfe:	20 e0       	ldi	r18, 0x00	; 0
    2d00:	3f ef       	ldi	r19, 0xFF	; 255
    2d02:	4f e7       	ldi	r20, 0x7F	; 127
    2d04:	57 e4       	ldi	r21, 0x47	; 71
    2d06:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2d0a:	18 16       	cp	r1, r24
    2d0c:	0c f0       	brlt	.+2      	; 0x2d10 <LCD_sendCommand+0x22e>
    2d0e:	43 c0       	rjmp	.+134    	; 0x2d96 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d10:	fe 01       	movw	r30, r28
    2d12:	ef 5a       	subi	r30, 0xAF	; 175
    2d14:	ff 4f       	sbci	r31, 0xFF	; 255
    2d16:	60 81       	ld	r22, Z
    2d18:	71 81       	ldd	r23, Z+1	; 0x01
    2d1a:	82 81       	ldd	r24, Z+2	; 0x02
    2d1c:	93 81       	ldd	r25, Z+3	; 0x03
    2d1e:	20 e0       	ldi	r18, 0x00	; 0
    2d20:	30 e0       	ldi	r19, 0x00	; 0
    2d22:	40 e2       	ldi	r20, 0x20	; 32
    2d24:	51 e4       	ldi	r21, 0x41	; 65
    2d26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d2a:	dc 01       	movw	r26, r24
    2d2c:	cb 01       	movw	r24, r22
    2d2e:	8e 01       	movw	r16, r28
    2d30:	05 5b       	subi	r16, 0xB5	; 181
    2d32:	1f 4f       	sbci	r17, 0xFF	; 255
    2d34:	bc 01       	movw	r22, r24
    2d36:	cd 01       	movw	r24, r26
    2d38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d3c:	dc 01       	movw	r26, r24
    2d3e:	cb 01       	movw	r24, r22
    2d40:	f8 01       	movw	r30, r16
    2d42:	91 83       	std	Z+1, r25	; 0x01
    2d44:	80 83       	st	Z, r24
    2d46:	1f c0       	rjmp	.+62     	; 0x2d86 <LCD_sendCommand+0x2a4>
    2d48:	fe 01       	movw	r30, r28
    2d4a:	e7 5b       	subi	r30, 0xB7	; 183
    2d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4e:	88 ec       	ldi	r24, 0xC8	; 200
    2d50:	90 e0       	ldi	r25, 0x00	; 0
    2d52:	91 83       	std	Z+1, r25	; 0x01
    2d54:	80 83       	st	Z, r24
    2d56:	fe 01       	movw	r30, r28
    2d58:	e7 5b       	subi	r30, 0xB7	; 183
    2d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5c:	80 81       	ld	r24, Z
    2d5e:	91 81       	ldd	r25, Z+1	; 0x01
    2d60:	01 97       	sbiw	r24, 0x01	; 1
    2d62:	f1 f7       	brne	.-4      	; 0x2d60 <LCD_sendCommand+0x27e>
    2d64:	fe 01       	movw	r30, r28
    2d66:	e7 5b       	subi	r30, 0xB7	; 183
    2d68:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6a:	91 83       	std	Z+1, r25	; 0x01
    2d6c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d6e:	de 01       	movw	r26, r28
    2d70:	a5 5b       	subi	r26, 0xB5	; 181
    2d72:	bf 4f       	sbci	r27, 0xFF	; 255
    2d74:	fe 01       	movw	r30, r28
    2d76:	e5 5b       	subi	r30, 0xB5	; 181
    2d78:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7a:	80 81       	ld	r24, Z
    2d7c:	91 81       	ldd	r25, Z+1	; 0x01
    2d7e:	01 97       	sbiw	r24, 0x01	; 1
    2d80:	11 96       	adiw	r26, 0x01	; 1
    2d82:	9c 93       	st	X, r25
    2d84:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d86:	fe 01       	movw	r30, r28
    2d88:	e5 5b       	subi	r30, 0xB5	; 181
    2d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8c:	80 81       	ld	r24, Z
    2d8e:	91 81       	ldd	r25, Z+1	; 0x01
    2d90:	00 97       	sbiw	r24, 0x00	; 0
    2d92:	d1 f6       	brne	.-76     	; 0x2d48 <LCD_sendCommand+0x266>
    2d94:	27 c0       	rjmp	.+78     	; 0x2de4 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d96:	8e 01       	movw	r16, r28
    2d98:	05 5b       	subi	r16, 0xB5	; 181
    2d9a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d9c:	fe 01       	movw	r30, r28
    2d9e:	e3 5b       	subi	r30, 0xB3	; 179
    2da0:	ff 4f       	sbci	r31, 0xFF	; 255
    2da2:	60 81       	ld	r22, Z
    2da4:	71 81       	ldd	r23, Z+1	; 0x01
    2da6:	82 81       	ldd	r24, Z+2	; 0x02
    2da8:	93 81       	ldd	r25, Z+3	; 0x03
    2daa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dae:	dc 01       	movw	r26, r24
    2db0:	cb 01       	movw	r24, r22
    2db2:	f8 01       	movw	r30, r16
    2db4:	91 83       	std	Z+1, r25	; 0x01
    2db6:	80 83       	st	Z, r24
    2db8:	de 01       	movw	r26, r28
    2dba:	a9 5b       	subi	r26, 0xB9	; 185
    2dbc:	bf 4f       	sbci	r27, 0xFF	; 255
    2dbe:	fe 01       	movw	r30, r28
    2dc0:	e5 5b       	subi	r30, 0xB5	; 181
    2dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc4:	80 81       	ld	r24, Z
    2dc6:	91 81       	ldd	r25, Z+1	; 0x01
    2dc8:	8d 93       	st	X+, r24
    2dca:	9c 93       	st	X, r25
    2dcc:	fe 01       	movw	r30, r28
    2dce:	e9 5b       	subi	r30, 0xB9	; 185
    2dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd2:	80 81       	ld	r24, Z
    2dd4:	91 81       	ldd	r25, Z+1	; 0x01
    2dd6:	01 97       	sbiw	r24, 0x01	; 1
    2dd8:	f1 f7       	brne	.-4      	; 0x2dd6 <LCD_sendCommand+0x2f4>
    2dda:	fe 01       	movw	r30, r28
    2ddc:	e9 5b       	subi	r30, 0xB9	; 185
    2dde:	ff 4f       	sbci	r31, 0xFF	; 255
    2de0:	91 83       	std	Z+1, r25	; 0x01
    2de2:	80 83       	st	Z, r24
	_delay_ms(1);

	// Inserts the command in the assigned PORT to be sent to the LCD
	// uint8 BIT_MODE;
	if (LCD_BIT_MODE == 4) {
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 0), GET_BIT( command, 4 ));
    2de4:	fe 01       	movw	r30, r28
    2de6:	ed 59       	subi	r30, 0x9D	; 157
    2de8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dea:	80 81       	ld	r24, Z
    2dec:	82 95       	swap	r24
    2dee:	8f 70       	andi	r24, 0x0F	; 15
    2df0:	98 2f       	mov	r25, r24
    2df2:	91 70       	andi	r25, 0x01	; 1
    2df4:	80 e0       	ldi	r24, 0x00	; 0
    2df6:	63 e0       	ldi	r22, 0x03	; 3
    2df8:	49 2f       	mov	r20, r25
    2dfa:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 1), GET_BIT( command, 5 ));
    2dfe:	fe 01       	movw	r30, r28
    2e00:	ed 59       	subi	r30, 0x9D	; 157
    2e02:	ff 4f       	sbci	r31, 0xFF	; 255
    2e04:	80 81       	ld	r24, Z
    2e06:	82 95       	swap	r24
    2e08:	86 95       	lsr	r24
    2e0a:	87 70       	andi	r24, 0x07	; 7
    2e0c:	98 2f       	mov	r25, r24
    2e0e:	91 70       	andi	r25, 0x01	; 1
    2e10:	80 e0       	ldi	r24, 0x00	; 0
    2e12:	64 e0       	ldi	r22, 0x04	; 4
    2e14:	49 2f       	mov	r20, r25
    2e16:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 2), GET_BIT( command, 6 ));
    2e1a:	fe 01       	movw	r30, r28
    2e1c:	ed 59       	subi	r30, 0x9D	; 157
    2e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e20:	80 81       	ld	r24, Z
    2e22:	82 95       	swap	r24
    2e24:	86 95       	lsr	r24
    2e26:	86 95       	lsr	r24
    2e28:	83 70       	andi	r24, 0x03	; 3
    2e2a:	98 2f       	mov	r25, r24
    2e2c:	91 70       	andi	r25, 0x01	; 1
    2e2e:	80 e0       	ldi	r24, 0x00	; 0
    2e30:	65 e0       	ldi	r22, 0x05	; 5
    2e32:	49 2f       	mov	r20, r25
    2e34:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 3), GET_BIT( command, 7 ));
    2e38:	fe 01       	movw	r30, r28
    2e3a:	ed 59       	subi	r30, 0x9D	; 157
    2e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3e:	80 81       	ld	r24, Z
    2e40:	98 2f       	mov	r25, r24
    2e42:	99 1f       	adc	r25, r25
    2e44:	99 27       	eor	r25, r25
    2e46:	99 1f       	adc	r25, r25
    2e48:	80 e0       	ldi	r24, 0x00	; 0
    2e4a:	66 e0       	ldi	r22, 0x06	; 6
    2e4c:	49 2f       	mov	r20, r25
    2e4e:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
    2e52:	fe 01       	movw	r30, r28
    2e54:	ed 5b       	subi	r30, 0xBD	; 189
    2e56:	ff 4f       	sbci	r31, 0xFF	; 255
    2e58:	80 e0       	ldi	r24, 0x00	; 0
    2e5a:	90 e0       	ldi	r25, 0x00	; 0
    2e5c:	a0 e8       	ldi	r26, 0x80	; 128
    2e5e:	bf e3       	ldi	r27, 0x3F	; 63
    2e60:	80 83       	st	Z, r24
    2e62:	91 83       	std	Z+1, r25	; 0x01
    2e64:	a2 83       	std	Z+2, r26	; 0x02
    2e66:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e68:	8e 01       	movw	r16, r28
    2e6a:	01 5c       	subi	r16, 0xC1	; 193
    2e6c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e6e:	fe 01       	movw	r30, r28
    2e70:	ed 5b       	subi	r30, 0xBD	; 189
    2e72:	ff 4f       	sbci	r31, 0xFF	; 255
    2e74:	60 81       	ld	r22, Z
    2e76:	71 81       	ldd	r23, Z+1	; 0x01
    2e78:	82 81       	ldd	r24, Z+2	; 0x02
    2e7a:	93 81       	ldd	r25, Z+3	; 0x03
    2e7c:	20 e0       	ldi	r18, 0x00	; 0
    2e7e:	30 e0       	ldi	r19, 0x00	; 0
    2e80:	4a ef       	ldi	r20, 0xFA	; 250
    2e82:	54 e4       	ldi	r21, 0x44	; 68
    2e84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e88:	dc 01       	movw	r26, r24
    2e8a:	cb 01       	movw	r24, r22
    2e8c:	f8 01       	movw	r30, r16
    2e8e:	80 83       	st	Z, r24
    2e90:	91 83       	std	Z+1, r25	; 0x01
    2e92:	a2 83       	std	Z+2, r26	; 0x02
    2e94:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e96:	fe 01       	movw	r30, r28
    2e98:	ff 96       	adiw	r30, 0x3f	; 63
    2e9a:	60 81       	ld	r22, Z
    2e9c:	71 81       	ldd	r23, Z+1	; 0x01
    2e9e:	82 81       	ldd	r24, Z+2	; 0x02
    2ea0:	93 81       	ldd	r25, Z+3	; 0x03
    2ea2:	20 e0       	ldi	r18, 0x00	; 0
    2ea4:	30 e0       	ldi	r19, 0x00	; 0
    2ea6:	40 e8       	ldi	r20, 0x80	; 128
    2ea8:	5f e3       	ldi	r21, 0x3F	; 63
    2eaa:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2eae:	88 23       	and	r24, r24
    2eb0:	2c f4       	brge	.+10     	; 0x2ebc <LCD_sendCommand+0x3da>
		__ticks = 1;
    2eb2:	81 e0       	ldi	r24, 0x01	; 1
    2eb4:	90 e0       	ldi	r25, 0x00	; 0
    2eb6:	9e af       	std	Y+62, r25	; 0x3e
    2eb8:	8d af       	std	Y+61, r24	; 0x3d
    2eba:	46 c0       	rjmp	.+140    	; 0x2f48 <LCD_sendCommand+0x466>
	else if (__tmp > 65535)
    2ebc:	fe 01       	movw	r30, r28
    2ebe:	ff 96       	adiw	r30, 0x3f	; 63
    2ec0:	60 81       	ld	r22, Z
    2ec2:	71 81       	ldd	r23, Z+1	; 0x01
    2ec4:	82 81       	ldd	r24, Z+2	; 0x02
    2ec6:	93 81       	ldd	r25, Z+3	; 0x03
    2ec8:	20 e0       	ldi	r18, 0x00	; 0
    2eca:	3f ef       	ldi	r19, 0xFF	; 255
    2ecc:	4f e7       	ldi	r20, 0x7F	; 127
    2ece:	57 e4       	ldi	r21, 0x47	; 71
    2ed0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2ed4:	18 16       	cp	r1, r24
    2ed6:	64 f5       	brge	.+88     	; 0x2f30 <LCD_sendCommand+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ed8:	fe 01       	movw	r30, r28
    2eda:	ed 5b       	subi	r30, 0xBD	; 189
    2edc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ede:	60 81       	ld	r22, Z
    2ee0:	71 81       	ldd	r23, Z+1	; 0x01
    2ee2:	82 81       	ldd	r24, Z+2	; 0x02
    2ee4:	93 81       	ldd	r25, Z+3	; 0x03
    2ee6:	20 e0       	ldi	r18, 0x00	; 0
    2ee8:	30 e0       	ldi	r19, 0x00	; 0
    2eea:	40 e2       	ldi	r20, 0x20	; 32
    2eec:	51 e4       	ldi	r21, 0x41	; 65
    2eee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ef2:	dc 01       	movw	r26, r24
    2ef4:	cb 01       	movw	r24, r22
    2ef6:	bc 01       	movw	r22, r24
    2ef8:	cd 01       	movw	r24, r26
    2efa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2efe:	dc 01       	movw	r26, r24
    2f00:	cb 01       	movw	r24, r22
    2f02:	9e af       	std	Y+62, r25	; 0x3e
    2f04:	8d af       	std	Y+61, r24	; 0x3d
    2f06:	0f c0       	rjmp	.+30     	; 0x2f26 <LCD_sendCommand+0x444>
    2f08:	88 ec       	ldi	r24, 0xC8	; 200
    2f0a:	90 e0       	ldi	r25, 0x00	; 0
    2f0c:	9c af       	std	Y+60, r25	; 0x3c
    2f0e:	8b af       	std	Y+59, r24	; 0x3b
    2f10:	8b ad       	ldd	r24, Y+59	; 0x3b
    2f12:	9c ad       	ldd	r25, Y+60	; 0x3c
    2f14:	01 97       	sbiw	r24, 0x01	; 1
    2f16:	f1 f7       	brne	.-4      	; 0x2f14 <LCD_sendCommand+0x432>
    2f18:	9c af       	std	Y+60, r25	; 0x3c
    2f1a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f1c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f1e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f20:	01 97       	sbiw	r24, 0x01	; 1
    2f22:	9e af       	std	Y+62, r25	; 0x3e
    2f24:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f26:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f28:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f2a:	00 97       	sbiw	r24, 0x00	; 0
    2f2c:	69 f7       	brne	.-38     	; 0x2f08 <LCD_sendCommand+0x426>
    2f2e:	16 c0       	rjmp	.+44     	; 0x2f5c <LCD_sendCommand+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f30:	fe 01       	movw	r30, r28
    2f32:	ff 96       	adiw	r30, 0x3f	; 63
    2f34:	60 81       	ld	r22, Z
    2f36:	71 81       	ldd	r23, Z+1	; 0x01
    2f38:	82 81       	ldd	r24, Z+2	; 0x02
    2f3a:	93 81       	ldd	r25, Z+3	; 0x03
    2f3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f40:	dc 01       	movw	r26, r24
    2f42:	cb 01       	movw	r24, r22
    2f44:	9e af       	std	Y+62, r25	; 0x3e
    2f46:	8d af       	std	Y+61, r24	; 0x3d
    2f48:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f4a:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f4c:	9a af       	std	Y+58, r25	; 0x3a
    2f4e:	89 af       	std	Y+57, r24	; 0x39
    2f50:	89 ad       	ldd	r24, Y+57	; 0x39
    2f52:	9a ad       	ldd	r25, Y+58	; 0x3a
    2f54:	01 97       	sbiw	r24, 0x01	; 1
    2f56:	f1 f7       	brne	.-4      	; 0x2f54 <LCD_sendCommand+0x472>
    2f58:	9a af       	std	Y+58, r25	; 0x3a
    2f5a:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(1);

		// Clear Enable Pin to '0'
		GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
    2f5c:	80 e0       	ldi	r24, 0x00	; 0
    2f5e:	62 e0       	ldi	r22, 0x02	; 2
    2f60:	40 e0       	ldi	r20, 0x00	; 0
    2f62:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
    2f66:	80 e0       	ldi	r24, 0x00	; 0
    2f68:	90 e0       	ldi	r25, 0x00	; 0
    2f6a:	a0 e8       	ldi	r26, 0x80	; 128
    2f6c:	bf e3       	ldi	r27, 0x3F	; 63
    2f6e:	8d ab       	std	Y+53, r24	; 0x35
    2f70:	9e ab       	std	Y+54, r25	; 0x36
    2f72:	af ab       	std	Y+55, r26	; 0x37
    2f74:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f76:	6d a9       	ldd	r22, Y+53	; 0x35
    2f78:	7e a9       	ldd	r23, Y+54	; 0x36
    2f7a:	8f a9       	ldd	r24, Y+55	; 0x37
    2f7c:	98 ad       	ldd	r25, Y+56	; 0x38
    2f7e:	20 e0       	ldi	r18, 0x00	; 0
    2f80:	30 e0       	ldi	r19, 0x00	; 0
    2f82:	4a ef       	ldi	r20, 0xFA	; 250
    2f84:	54 e4       	ldi	r21, 0x44	; 68
    2f86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f8a:	dc 01       	movw	r26, r24
    2f8c:	cb 01       	movw	r24, r22
    2f8e:	89 ab       	std	Y+49, r24	; 0x31
    2f90:	9a ab       	std	Y+50, r25	; 0x32
    2f92:	ab ab       	std	Y+51, r26	; 0x33
    2f94:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2f96:	69 a9       	ldd	r22, Y+49	; 0x31
    2f98:	7a a9       	ldd	r23, Y+50	; 0x32
    2f9a:	8b a9       	ldd	r24, Y+51	; 0x33
    2f9c:	9c a9       	ldd	r25, Y+52	; 0x34
    2f9e:	20 e0       	ldi	r18, 0x00	; 0
    2fa0:	30 e0       	ldi	r19, 0x00	; 0
    2fa2:	40 e8       	ldi	r20, 0x80	; 128
    2fa4:	5f e3       	ldi	r21, 0x3F	; 63
    2fa6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2faa:	88 23       	and	r24, r24
    2fac:	2c f4       	brge	.+10     	; 0x2fb8 <LCD_sendCommand+0x4d6>
		__ticks = 1;
    2fae:	81 e0       	ldi	r24, 0x01	; 1
    2fb0:	90 e0       	ldi	r25, 0x00	; 0
    2fb2:	98 ab       	std	Y+48, r25	; 0x30
    2fb4:	8f a7       	std	Y+47, r24	; 0x2f
    2fb6:	3f c0       	rjmp	.+126    	; 0x3036 <LCD_sendCommand+0x554>
	else if (__tmp > 65535)
    2fb8:	69 a9       	ldd	r22, Y+49	; 0x31
    2fba:	7a a9       	ldd	r23, Y+50	; 0x32
    2fbc:	8b a9       	ldd	r24, Y+51	; 0x33
    2fbe:	9c a9       	ldd	r25, Y+52	; 0x34
    2fc0:	20 e0       	ldi	r18, 0x00	; 0
    2fc2:	3f ef       	ldi	r19, 0xFF	; 255
    2fc4:	4f e7       	ldi	r20, 0x7F	; 127
    2fc6:	57 e4       	ldi	r21, 0x47	; 71
    2fc8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2fcc:	18 16       	cp	r1, r24
    2fce:	4c f5       	brge	.+82     	; 0x3022 <LCD_sendCommand+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fd0:	6d a9       	ldd	r22, Y+53	; 0x35
    2fd2:	7e a9       	ldd	r23, Y+54	; 0x36
    2fd4:	8f a9       	ldd	r24, Y+55	; 0x37
    2fd6:	98 ad       	ldd	r25, Y+56	; 0x38
    2fd8:	20 e0       	ldi	r18, 0x00	; 0
    2fda:	30 e0       	ldi	r19, 0x00	; 0
    2fdc:	40 e2       	ldi	r20, 0x20	; 32
    2fde:	51 e4       	ldi	r21, 0x41	; 65
    2fe0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fe4:	dc 01       	movw	r26, r24
    2fe6:	cb 01       	movw	r24, r22
    2fe8:	bc 01       	movw	r22, r24
    2fea:	cd 01       	movw	r24, r26
    2fec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ff0:	dc 01       	movw	r26, r24
    2ff2:	cb 01       	movw	r24, r22
    2ff4:	98 ab       	std	Y+48, r25	; 0x30
    2ff6:	8f a7       	std	Y+47, r24	; 0x2f
    2ff8:	0f c0       	rjmp	.+30     	; 0x3018 <LCD_sendCommand+0x536>
    2ffa:	88 ec       	ldi	r24, 0xC8	; 200
    2ffc:	90 e0       	ldi	r25, 0x00	; 0
    2ffe:	9e a7       	std	Y+46, r25	; 0x2e
    3000:	8d a7       	std	Y+45, r24	; 0x2d
    3002:	8d a5       	ldd	r24, Y+45	; 0x2d
    3004:	9e a5       	ldd	r25, Y+46	; 0x2e
    3006:	01 97       	sbiw	r24, 0x01	; 1
    3008:	f1 f7       	brne	.-4      	; 0x3006 <LCD_sendCommand+0x524>
    300a:	9e a7       	std	Y+46, r25	; 0x2e
    300c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    300e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3010:	98 a9       	ldd	r25, Y+48	; 0x30
    3012:	01 97       	sbiw	r24, 0x01	; 1
    3014:	98 ab       	std	Y+48, r25	; 0x30
    3016:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3018:	8f a5       	ldd	r24, Y+47	; 0x2f
    301a:	98 a9       	ldd	r25, Y+48	; 0x30
    301c:	00 97       	sbiw	r24, 0x00	; 0
    301e:	69 f7       	brne	.-38     	; 0x2ffa <LCD_sendCommand+0x518>
    3020:	14 c0       	rjmp	.+40     	; 0x304a <LCD_sendCommand+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3022:	69 a9       	ldd	r22, Y+49	; 0x31
    3024:	7a a9       	ldd	r23, Y+50	; 0x32
    3026:	8b a9       	ldd	r24, Y+51	; 0x33
    3028:	9c a9       	ldd	r25, Y+52	; 0x34
    302a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    302e:	dc 01       	movw	r26, r24
    3030:	cb 01       	movw	r24, r22
    3032:	98 ab       	std	Y+48, r25	; 0x30
    3034:	8f a7       	std	Y+47, r24	; 0x2f
    3036:	8f a5       	ldd	r24, Y+47	; 0x2f
    3038:	98 a9       	ldd	r25, Y+48	; 0x30
    303a:	9c a7       	std	Y+44, r25	; 0x2c
    303c:	8b a7       	std	Y+43, r24	; 0x2b
    303e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3040:	9c a5       	ldd	r25, Y+44	; 0x2c
    3042:	01 97       	sbiw	r24, 0x01	; 1
    3044:	f1 f7       	brne	.-4      	; 0x3042 <LCD_sendCommand+0x560>
    3046:	9c a7       	std	Y+44, r25	; 0x2c
    3048:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1); /* delay for processing Th = 13ns */

		// Set Enable Pin to '1'
		GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
    304a:	80 e0       	ldi	r24, 0x00	; 0
    304c:	62 e0       	ldi	r22, 0x02	; 2
    304e:	41 e0       	ldi	r20, 0x01	; 1
    3050:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
    3054:	80 e0       	ldi	r24, 0x00	; 0
    3056:	90 e0       	ldi	r25, 0x00	; 0
    3058:	a0 e8       	ldi	r26, 0x80	; 128
    305a:	bf e3       	ldi	r27, 0x3F	; 63
    305c:	8f a3       	std	Y+39, r24	; 0x27
    305e:	98 a7       	std	Y+40, r25	; 0x28
    3060:	a9 a7       	std	Y+41, r26	; 0x29
    3062:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3064:	6f a1       	ldd	r22, Y+39	; 0x27
    3066:	78 a5       	ldd	r23, Y+40	; 0x28
    3068:	89 a5       	ldd	r24, Y+41	; 0x29
    306a:	9a a5       	ldd	r25, Y+42	; 0x2a
    306c:	20 e0       	ldi	r18, 0x00	; 0
    306e:	30 e0       	ldi	r19, 0x00	; 0
    3070:	4a ef       	ldi	r20, 0xFA	; 250
    3072:	54 e4       	ldi	r21, 0x44	; 68
    3074:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3078:	dc 01       	movw	r26, r24
    307a:	cb 01       	movw	r24, r22
    307c:	8b a3       	std	Y+35, r24	; 0x23
    307e:	9c a3       	std	Y+36, r25	; 0x24
    3080:	ad a3       	std	Y+37, r26	; 0x25
    3082:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3084:	6b a1       	ldd	r22, Y+35	; 0x23
    3086:	7c a1       	ldd	r23, Y+36	; 0x24
    3088:	8d a1       	ldd	r24, Y+37	; 0x25
    308a:	9e a1       	ldd	r25, Y+38	; 0x26
    308c:	20 e0       	ldi	r18, 0x00	; 0
    308e:	30 e0       	ldi	r19, 0x00	; 0
    3090:	40 e8       	ldi	r20, 0x80	; 128
    3092:	5f e3       	ldi	r21, 0x3F	; 63
    3094:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3098:	88 23       	and	r24, r24
    309a:	2c f4       	brge	.+10     	; 0x30a6 <LCD_sendCommand+0x5c4>
		__ticks = 1;
    309c:	81 e0       	ldi	r24, 0x01	; 1
    309e:	90 e0       	ldi	r25, 0x00	; 0
    30a0:	9a a3       	std	Y+34, r25	; 0x22
    30a2:	89 a3       	std	Y+33, r24	; 0x21
    30a4:	3f c0       	rjmp	.+126    	; 0x3124 <LCD_sendCommand+0x642>
	else if (__tmp > 65535)
    30a6:	6b a1       	ldd	r22, Y+35	; 0x23
    30a8:	7c a1       	ldd	r23, Y+36	; 0x24
    30aa:	8d a1       	ldd	r24, Y+37	; 0x25
    30ac:	9e a1       	ldd	r25, Y+38	; 0x26
    30ae:	20 e0       	ldi	r18, 0x00	; 0
    30b0:	3f ef       	ldi	r19, 0xFF	; 255
    30b2:	4f e7       	ldi	r20, 0x7F	; 127
    30b4:	57 e4       	ldi	r21, 0x47	; 71
    30b6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    30ba:	18 16       	cp	r1, r24
    30bc:	4c f5       	brge	.+82     	; 0x3110 <LCD_sendCommand+0x62e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30be:	6f a1       	ldd	r22, Y+39	; 0x27
    30c0:	78 a5       	ldd	r23, Y+40	; 0x28
    30c2:	89 a5       	ldd	r24, Y+41	; 0x29
    30c4:	9a a5       	ldd	r25, Y+42	; 0x2a
    30c6:	20 e0       	ldi	r18, 0x00	; 0
    30c8:	30 e0       	ldi	r19, 0x00	; 0
    30ca:	40 e2       	ldi	r20, 0x20	; 32
    30cc:	51 e4       	ldi	r21, 0x41	; 65
    30ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30d2:	dc 01       	movw	r26, r24
    30d4:	cb 01       	movw	r24, r22
    30d6:	bc 01       	movw	r22, r24
    30d8:	cd 01       	movw	r24, r26
    30da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30de:	dc 01       	movw	r26, r24
    30e0:	cb 01       	movw	r24, r22
    30e2:	9a a3       	std	Y+34, r25	; 0x22
    30e4:	89 a3       	std	Y+33, r24	; 0x21
    30e6:	0f c0       	rjmp	.+30     	; 0x3106 <LCD_sendCommand+0x624>
    30e8:	88 ec       	ldi	r24, 0xC8	; 200
    30ea:	90 e0       	ldi	r25, 0x00	; 0
    30ec:	98 a3       	std	Y+32, r25	; 0x20
    30ee:	8f 8f       	std	Y+31, r24	; 0x1f
    30f0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    30f2:	98 a1       	ldd	r25, Y+32	; 0x20
    30f4:	01 97       	sbiw	r24, 0x01	; 1
    30f6:	f1 f7       	brne	.-4      	; 0x30f4 <LCD_sendCommand+0x612>
    30f8:	98 a3       	std	Y+32, r25	; 0x20
    30fa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30fc:	89 a1       	ldd	r24, Y+33	; 0x21
    30fe:	9a a1       	ldd	r25, Y+34	; 0x22
    3100:	01 97       	sbiw	r24, 0x01	; 1
    3102:	9a a3       	std	Y+34, r25	; 0x22
    3104:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3106:	89 a1       	ldd	r24, Y+33	; 0x21
    3108:	9a a1       	ldd	r25, Y+34	; 0x22
    310a:	00 97       	sbiw	r24, 0x00	; 0
    310c:	69 f7       	brne	.-38     	; 0x30e8 <LCD_sendCommand+0x606>
    310e:	14 c0       	rjmp	.+40     	; 0x3138 <LCD_sendCommand+0x656>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3110:	6b a1       	ldd	r22, Y+35	; 0x23
    3112:	7c a1       	ldd	r23, Y+36	; 0x24
    3114:	8d a1       	ldd	r24, Y+37	; 0x25
    3116:	9e a1       	ldd	r25, Y+38	; 0x26
    3118:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    311c:	dc 01       	movw	r26, r24
    311e:	cb 01       	movw	r24, r22
    3120:	9a a3       	std	Y+34, r25	; 0x22
    3122:	89 a3       	std	Y+33, r24	; 0x21
    3124:	89 a1       	ldd	r24, Y+33	; 0x21
    3126:	9a a1       	ldd	r25, Y+34	; 0x22
    3128:	9e 8f       	std	Y+30, r25	; 0x1e
    312a:	8d 8f       	std	Y+29, r24	; 0x1d
    312c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    312e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3130:	01 97       	sbiw	r24, 0x01	; 1
    3132:	f1 f7       	brne	.-4      	; 0x3130 <LCD_sendCommand+0x64e>
    3134:	9e 8f       	std	Y+30, r25	; 0x1e
    3136:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 0), GET_BIT( command, 0 ));
    3138:	fe 01       	movw	r30, r28
    313a:	ed 59       	subi	r30, 0x9D	; 157
    313c:	ff 4f       	sbci	r31, 0xFF	; 255
    313e:	80 81       	ld	r24, Z
    3140:	98 2f       	mov	r25, r24
    3142:	91 70       	andi	r25, 0x01	; 1
    3144:	80 e0       	ldi	r24, 0x00	; 0
    3146:	63 e0       	ldi	r22, 0x03	; 3
    3148:	49 2f       	mov	r20, r25
    314a:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 1), GET_BIT( command, 1 ));
    314e:	fe 01       	movw	r30, r28
    3150:	ed 59       	subi	r30, 0x9D	; 157
    3152:	ff 4f       	sbci	r31, 0xFF	; 255
    3154:	80 81       	ld	r24, Z
    3156:	86 95       	lsr	r24
    3158:	98 2f       	mov	r25, r24
    315a:	91 70       	andi	r25, 0x01	; 1
    315c:	80 e0       	ldi	r24, 0x00	; 0
    315e:	64 e0       	ldi	r22, 0x04	; 4
    3160:	49 2f       	mov	r20, r25
    3162:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 2), GET_BIT( command, 2 ));
    3166:	fe 01       	movw	r30, r28
    3168:	ed 59       	subi	r30, 0x9D	; 157
    316a:	ff 4f       	sbci	r31, 0xFF	; 255
    316c:	80 81       	ld	r24, Z
    316e:	86 95       	lsr	r24
    3170:	86 95       	lsr	r24
    3172:	98 2f       	mov	r25, r24
    3174:	91 70       	andi	r25, 0x01	; 1
    3176:	80 e0       	ldi	r24, 0x00	; 0
    3178:	65 e0       	ldi	r22, 0x05	; 5
    317a:	49 2f       	mov	r20, r25
    317c:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 3), GET_BIT( command, 3 ));
    3180:	fe 01       	movw	r30, r28
    3182:	ed 59       	subi	r30, 0x9D	; 157
    3184:	ff 4f       	sbci	r31, 0xFF	; 255
    3186:	80 81       	ld	r24, Z
    3188:	86 95       	lsr	r24
    318a:	86 95       	lsr	r24
    318c:	86 95       	lsr	r24
    318e:	98 2f       	mov	r25, r24
    3190:	91 70       	andi	r25, 0x01	; 1
    3192:	80 e0       	ldi	r24, 0x00	; 0
    3194:	66 e0       	ldi	r22, 0x06	; 6
    3196:	49 2f       	mov	r20, r25
    3198:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
    319c:	80 e0       	ldi	r24, 0x00	; 0
    319e:	90 e0       	ldi	r25, 0x00	; 0
    31a0:	a0 e8       	ldi	r26, 0x80	; 128
    31a2:	bf e3       	ldi	r27, 0x3F	; 63
    31a4:	89 8f       	std	Y+25, r24	; 0x19
    31a6:	9a 8f       	std	Y+26, r25	; 0x1a
    31a8:	ab 8f       	std	Y+27, r26	; 0x1b
    31aa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31ac:	69 8d       	ldd	r22, Y+25	; 0x19
    31ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31b4:	20 e0       	ldi	r18, 0x00	; 0
    31b6:	30 e0       	ldi	r19, 0x00	; 0
    31b8:	4a ef       	ldi	r20, 0xFA	; 250
    31ba:	54 e4       	ldi	r21, 0x44	; 68
    31bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31c0:	dc 01       	movw	r26, r24
    31c2:	cb 01       	movw	r24, r22
    31c4:	8d 8b       	std	Y+21, r24	; 0x15
    31c6:	9e 8b       	std	Y+22, r25	; 0x16
    31c8:	af 8b       	std	Y+23, r26	; 0x17
    31ca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    31cc:	6d 89       	ldd	r22, Y+21	; 0x15
    31ce:	7e 89       	ldd	r23, Y+22	; 0x16
    31d0:	8f 89       	ldd	r24, Y+23	; 0x17
    31d2:	98 8d       	ldd	r25, Y+24	; 0x18
    31d4:	20 e0       	ldi	r18, 0x00	; 0
    31d6:	30 e0       	ldi	r19, 0x00	; 0
    31d8:	40 e8       	ldi	r20, 0x80	; 128
    31da:	5f e3       	ldi	r21, 0x3F	; 63
    31dc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    31e0:	88 23       	and	r24, r24
    31e2:	2c f4       	brge	.+10     	; 0x31ee <LCD_sendCommand+0x70c>
		__ticks = 1;
    31e4:	81 e0       	ldi	r24, 0x01	; 1
    31e6:	90 e0       	ldi	r25, 0x00	; 0
    31e8:	9c 8b       	std	Y+20, r25	; 0x14
    31ea:	8b 8b       	std	Y+19, r24	; 0x13
    31ec:	3f c0       	rjmp	.+126    	; 0x326c <LCD_sendCommand+0x78a>
	else if (__tmp > 65535)
    31ee:	6d 89       	ldd	r22, Y+21	; 0x15
    31f0:	7e 89       	ldd	r23, Y+22	; 0x16
    31f2:	8f 89       	ldd	r24, Y+23	; 0x17
    31f4:	98 8d       	ldd	r25, Y+24	; 0x18
    31f6:	20 e0       	ldi	r18, 0x00	; 0
    31f8:	3f ef       	ldi	r19, 0xFF	; 255
    31fa:	4f e7       	ldi	r20, 0x7F	; 127
    31fc:	57 e4       	ldi	r21, 0x47	; 71
    31fe:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3202:	18 16       	cp	r1, r24
    3204:	4c f5       	brge	.+82     	; 0x3258 <LCD_sendCommand+0x776>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3206:	69 8d       	ldd	r22, Y+25	; 0x19
    3208:	7a 8d       	ldd	r23, Y+26	; 0x1a
    320a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    320c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    320e:	20 e0       	ldi	r18, 0x00	; 0
    3210:	30 e0       	ldi	r19, 0x00	; 0
    3212:	40 e2       	ldi	r20, 0x20	; 32
    3214:	51 e4       	ldi	r21, 0x41	; 65
    3216:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    321a:	dc 01       	movw	r26, r24
    321c:	cb 01       	movw	r24, r22
    321e:	bc 01       	movw	r22, r24
    3220:	cd 01       	movw	r24, r26
    3222:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3226:	dc 01       	movw	r26, r24
    3228:	cb 01       	movw	r24, r22
    322a:	9c 8b       	std	Y+20, r25	; 0x14
    322c:	8b 8b       	std	Y+19, r24	; 0x13
    322e:	0f c0       	rjmp	.+30     	; 0x324e <LCD_sendCommand+0x76c>
    3230:	88 ec       	ldi	r24, 0xC8	; 200
    3232:	90 e0       	ldi	r25, 0x00	; 0
    3234:	9a 8b       	std	Y+18, r25	; 0x12
    3236:	89 8b       	std	Y+17, r24	; 0x11
    3238:	89 89       	ldd	r24, Y+17	; 0x11
    323a:	9a 89       	ldd	r25, Y+18	; 0x12
    323c:	01 97       	sbiw	r24, 0x01	; 1
    323e:	f1 f7       	brne	.-4      	; 0x323c <LCD_sendCommand+0x75a>
    3240:	9a 8b       	std	Y+18, r25	; 0x12
    3242:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3244:	8b 89       	ldd	r24, Y+19	; 0x13
    3246:	9c 89       	ldd	r25, Y+20	; 0x14
    3248:	01 97       	sbiw	r24, 0x01	; 1
    324a:	9c 8b       	std	Y+20, r25	; 0x14
    324c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    324e:	8b 89       	ldd	r24, Y+19	; 0x13
    3250:	9c 89       	ldd	r25, Y+20	; 0x14
    3252:	00 97       	sbiw	r24, 0x00	; 0
    3254:	69 f7       	brne	.-38     	; 0x3230 <LCD_sendCommand+0x74e>
    3256:	14 c0       	rjmp	.+40     	; 0x3280 <LCD_sendCommand+0x79e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3258:	6d 89       	ldd	r22, Y+21	; 0x15
    325a:	7e 89       	ldd	r23, Y+22	; 0x16
    325c:	8f 89       	ldd	r24, Y+23	; 0x17
    325e:	98 8d       	ldd	r25, Y+24	; 0x18
    3260:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3264:	dc 01       	movw	r26, r24
    3266:	cb 01       	movw	r24, r22
    3268:	9c 8b       	std	Y+20, r25	; 0x14
    326a:	8b 8b       	std	Y+19, r24	; 0x13
    326c:	8b 89       	ldd	r24, Y+19	; 0x13
    326e:	9c 89       	ldd	r25, Y+20	; 0x14
    3270:	98 8b       	std	Y+16, r25	; 0x10
    3272:	8f 87       	std	Y+15, r24	; 0x0f
    3274:	8f 85       	ldd	r24, Y+15	; 0x0f
    3276:	98 89       	ldd	r25, Y+16	; 0x10
    3278:	01 97       	sbiw	r24, 0x01	; 1
    327a:	f1 f7       	brne	.-4      	; 0x3278 <LCD_sendCommand+0x796>
    327c:	98 8b       	std	Y+16, r25	; 0x10
    327e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1); /* delay for processing Tdsw = 100ns */

		// Clear Enable Pin to '0'
		GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
    3280:	80 e0       	ldi	r24, 0x00	; 0
    3282:	62 e0       	ldi	r22, 0x02	; 2
    3284:	40 e0       	ldi	r20, 0x00	; 0
    3286:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
    328a:	80 e0       	ldi	r24, 0x00	; 0
    328c:	90 e0       	ldi	r25, 0x00	; 0
    328e:	a0 e8       	ldi	r26, 0x80	; 128
    3290:	bf e3       	ldi	r27, 0x3F	; 63
    3292:	8b 87       	std	Y+11, r24	; 0x0b
    3294:	9c 87       	std	Y+12, r25	; 0x0c
    3296:	ad 87       	std	Y+13, r26	; 0x0d
    3298:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    329a:	6b 85       	ldd	r22, Y+11	; 0x0b
    329c:	7c 85       	ldd	r23, Y+12	; 0x0c
    329e:	8d 85       	ldd	r24, Y+13	; 0x0d
    32a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    32a2:	20 e0       	ldi	r18, 0x00	; 0
    32a4:	30 e0       	ldi	r19, 0x00	; 0
    32a6:	4a ef       	ldi	r20, 0xFA	; 250
    32a8:	54 e4       	ldi	r21, 0x44	; 68
    32aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32ae:	dc 01       	movw	r26, r24
    32b0:	cb 01       	movw	r24, r22
    32b2:	8f 83       	std	Y+7, r24	; 0x07
    32b4:	98 87       	std	Y+8, r25	; 0x08
    32b6:	a9 87       	std	Y+9, r26	; 0x09
    32b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32ba:	6f 81       	ldd	r22, Y+7	; 0x07
    32bc:	78 85       	ldd	r23, Y+8	; 0x08
    32be:	89 85       	ldd	r24, Y+9	; 0x09
    32c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    32c2:	20 e0       	ldi	r18, 0x00	; 0
    32c4:	30 e0       	ldi	r19, 0x00	; 0
    32c6:	40 e8       	ldi	r20, 0x80	; 128
    32c8:	5f e3       	ldi	r21, 0x3F	; 63
    32ca:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    32ce:	88 23       	and	r24, r24
    32d0:	2c f4       	brge	.+10     	; 0x32dc <LCD_sendCommand+0x7fa>
		__ticks = 1;
    32d2:	81 e0       	ldi	r24, 0x01	; 1
    32d4:	90 e0       	ldi	r25, 0x00	; 0
    32d6:	9e 83       	std	Y+6, r25	; 0x06
    32d8:	8d 83       	std	Y+5, r24	; 0x05
    32da:	3f c0       	rjmp	.+126    	; 0x335a <LCD_sendCommand+0x878>
	else if (__tmp > 65535)
    32dc:	6f 81       	ldd	r22, Y+7	; 0x07
    32de:	78 85       	ldd	r23, Y+8	; 0x08
    32e0:	89 85       	ldd	r24, Y+9	; 0x09
    32e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    32e4:	20 e0       	ldi	r18, 0x00	; 0
    32e6:	3f ef       	ldi	r19, 0xFF	; 255
    32e8:	4f e7       	ldi	r20, 0x7F	; 127
    32ea:	57 e4       	ldi	r21, 0x47	; 71
    32ec:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    32f0:	18 16       	cp	r1, r24
    32f2:	4c f5       	brge	.+82     	; 0x3346 <LCD_sendCommand+0x864>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    32f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    32f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    32fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    32fc:	20 e0       	ldi	r18, 0x00	; 0
    32fe:	30 e0       	ldi	r19, 0x00	; 0
    3300:	40 e2       	ldi	r20, 0x20	; 32
    3302:	51 e4       	ldi	r21, 0x41	; 65
    3304:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3308:	dc 01       	movw	r26, r24
    330a:	cb 01       	movw	r24, r22
    330c:	bc 01       	movw	r22, r24
    330e:	cd 01       	movw	r24, r26
    3310:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3314:	dc 01       	movw	r26, r24
    3316:	cb 01       	movw	r24, r22
    3318:	9e 83       	std	Y+6, r25	; 0x06
    331a:	8d 83       	std	Y+5, r24	; 0x05
    331c:	0f c0       	rjmp	.+30     	; 0x333c <LCD_sendCommand+0x85a>
    331e:	88 ec       	ldi	r24, 0xC8	; 200
    3320:	90 e0       	ldi	r25, 0x00	; 0
    3322:	9c 83       	std	Y+4, r25	; 0x04
    3324:	8b 83       	std	Y+3, r24	; 0x03
    3326:	8b 81       	ldd	r24, Y+3	; 0x03
    3328:	9c 81       	ldd	r25, Y+4	; 0x04
    332a:	01 97       	sbiw	r24, 0x01	; 1
    332c:	f1 f7       	brne	.-4      	; 0x332a <LCD_sendCommand+0x848>
    332e:	9c 83       	std	Y+4, r25	; 0x04
    3330:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3332:	8d 81       	ldd	r24, Y+5	; 0x05
    3334:	9e 81       	ldd	r25, Y+6	; 0x06
    3336:	01 97       	sbiw	r24, 0x01	; 1
    3338:	9e 83       	std	Y+6, r25	; 0x06
    333a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    333c:	8d 81       	ldd	r24, Y+5	; 0x05
    333e:	9e 81       	ldd	r25, Y+6	; 0x06
    3340:	00 97       	sbiw	r24, 0x00	; 0
    3342:	69 f7       	brne	.-38     	; 0x331e <LCD_sendCommand+0x83c>
    3344:	14 c0       	rjmp	.+40     	; 0x336e <LCD_sendCommand+0x88c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3346:	6f 81       	ldd	r22, Y+7	; 0x07
    3348:	78 85       	ldd	r23, Y+8	; 0x08
    334a:	89 85       	ldd	r24, Y+9	; 0x09
    334c:	9a 85       	ldd	r25, Y+10	; 0x0a
    334e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3352:	dc 01       	movw	r26, r24
    3354:	cb 01       	movw	r24, r22
    3356:	9e 83       	std	Y+6, r25	; 0x06
    3358:	8d 83       	std	Y+5, r24	; 0x05
    335a:	8d 81       	ldd	r24, Y+5	; 0x05
    335c:	9e 81       	ldd	r25, Y+6	; 0x06
    335e:	9a 83       	std	Y+2, r25	; 0x02
    3360:	89 83       	std	Y+1, r24	; 0x01
    3362:	89 81       	ldd	r24, Y+1	; 0x01
    3364:	9a 81       	ldd	r25, Y+2	; 0x02
    3366:	01 97       	sbiw	r24, 0x01	; 1
    3368:	f1 f7       	brne	.-4      	; 0x3366 <LCD_sendCommand+0x884>
    336a:	9a 83       	std	Y+2, r25	; 0x02
    336c:	89 83       	std	Y+1, r24	; 0x01

		// Clear Enable Pin to '0'
		GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
		_delay_ms(1); /* delay for processing Th = 13ns */
	}
}
    336e:	cd 59       	subi	r28, 0x9D	; 157
    3370:	df 4f       	sbci	r29, 0xFF	; 255
    3372:	0f b6       	in	r0, 0x3f	; 63
    3374:	f8 94       	cli
    3376:	de bf       	out	0x3e, r29	; 62
    3378:	0f be       	out	0x3f, r0	; 63
    337a:	cd bf       	out	0x3d, r28	; 61
    337c:	cf 91       	pop	r28
    337e:	df 91       	pop	r29
    3380:	1f 91       	pop	r17
    3382:	0f 91       	pop	r16
    3384:	08 95       	ret

00003386 <LCD_displayCharacter>:


// Displays a character on the LCD
void LCD_displayCharacter(uint8 data) {
    3386:	0f 93       	push	r16
    3388:	1f 93       	push	r17
    338a:	df 93       	push	r29
    338c:	cf 93       	push	r28
    338e:	cd b7       	in	r28, 0x3d	; 61
    3390:	de b7       	in	r29, 0x3e	; 62
    3392:	c3 56       	subi	r28, 0x63	; 99
    3394:	d0 40       	sbci	r29, 0x00	; 0
    3396:	0f b6       	in	r0, 0x3f	; 63
    3398:	f8 94       	cli
    339a:	de bf       	out	0x3e, r29	; 62
    339c:	0f be       	out	0x3f, r0	; 63
    339e:	cd bf       	out	0x3d, r28	; 61
    33a0:	fe 01       	movw	r30, r28
    33a2:	ed 59       	subi	r30, 0x9D	; 157
    33a4:	ff 4f       	sbci	r31, 0xFF	; 255
    33a6:	80 83       	st	Z, r24
	// Set RS Pin to '1'
	GPIO_writePin(LCD_INIT_PORT, LCD_RS, LOGIC_HIGH);
    33a8:	80 e0       	ldi	r24, 0x00	; 0
    33aa:	61 e0       	ldi	r22, 0x01	; 1
    33ac:	41 e0       	ldi	r20, 0x01	; 1
    33ae:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
    33b2:	fe 01       	movw	r30, r28
    33b4:	e1 5a       	subi	r30, 0xA1	; 161
    33b6:	ff 4f       	sbci	r31, 0xFF	; 255
    33b8:	80 e0       	ldi	r24, 0x00	; 0
    33ba:	90 e0       	ldi	r25, 0x00	; 0
    33bc:	a0 e8       	ldi	r26, 0x80	; 128
    33be:	bf e3       	ldi	r27, 0x3F	; 63
    33c0:	80 83       	st	Z, r24
    33c2:	91 83       	std	Z+1, r25	; 0x01
    33c4:	a2 83       	std	Z+2, r26	; 0x02
    33c6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33c8:	8e 01       	movw	r16, r28
    33ca:	05 5a       	subi	r16, 0xA5	; 165
    33cc:	1f 4f       	sbci	r17, 0xFF	; 255
    33ce:	fe 01       	movw	r30, r28
    33d0:	e1 5a       	subi	r30, 0xA1	; 161
    33d2:	ff 4f       	sbci	r31, 0xFF	; 255
    33d4:	60 81       	ld	r22, Z
    33d6:	71 81       	ldd	r23, Z+1	; 0x01
    33d8:	82 81       	ldd	r24, Z+2	; 0x02
    33da:	93 81       	ldd	r25, Z+3	; 0x03
    33dc:	20 e0       	ldi	r18, 0x00	; 0
    33de:	30 e0       	ldi	r19, 0x00	; 0
    33e0:	4a ef       	ldi	r20, 0xFA	; 250
    33e2:	54 e4       	ldi	r21, 0x44	; 68
    33e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33e8:	dc 01       	movw	r26, r24
    33ea:	cb 01       	movw	r24, r22
    33ec:	f8 01       	movw	r30, r16
    33ee:	80 83       	st	Z, r24
    33f0:	91 83       	std	Z+1, r25	; 0x01
    33f2:	a2 83       	std	Z+2, r26	; 0x02
    33f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    33f6:	fe 01       	movw	r30, r28
    33f8:	e5 5a       	subi	r30, 0xA5	; 165
    33fa:	ff 4f       	sbci	r31, 0xFF	; 255
    33fc:	60 81       	ld	r22, Z
    33fe:	71 81       	ldd	r23, Z+1	; 0x01
    3400:	82 81       	ldd	r24, Z+2	; 0x02
    3402:	93 81       	ldd	r25, Z+3	; 0x03
    3404:	20 e0       	ldi	r18, 0x00	; 0
    3406:	30 e0       	ldi	r19, 0x00	; 0
    3408:	40 e8       	ldi	r20, 0x80	; 128
    340a:	5f e3       	ldi	r21, 0x3F	; 63
    340c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3410:	88 23       	and	r24, r24
    3412:	44 f4       	brge	.+16     	; 0x3424 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    3414:	fe 01       	movw	r30, r28
    3416:	e7 5a       	subi	r30, 0xA7	; 167
    3418:	ff 4f       	sbci	r31, 0xFF	; 255
    341a:	81 e0       	ldi	r24, 0x01	; 1
    341c:	90 e0       	ldi	r25, 0x00	; 0
    341e:	91 83       	std	Z+1, r25	; 0x01
    3420:	80 83       	st	Z, r24
    3422:	64 c0       	rjmp	.+200    	; 0x34ec <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    3424:	fe 01       	movw	r30, r28
    3426:	e5 5a       	subi	r30, 0xA5	; 165
    3428:	ff 4f       	sbci	r31, 0xFF	; 255
    342a:	60 81       	ld	r22, Z
    342c:	71 81       	ldd	r23, Z+1	; 0x01
    342e:	82 81       	ldd	r24, Z+2	; 0x02
    3430:	93 81       	ldd	r25, Z+3	; 0x03
    3432:	20 e0       	ldi	r18, 0x00	; 0
    3434:	3f ef       	ldi	r19, 0xFF	; 255
    3436:	4f e7       	ldi	r20, 0x7F	; 127
    3438:	57 e4       	ldi	r21, 0x47	; 71
    343a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    343e:	18 16       	cp	r1, r24
    3440:	0c f0       	brlt	.+2      	; 0x3444 <LCD_displayCharacter+0xbe>
    3442:	43 c0       	rjmp	.+134    	; 0x34ca <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3444:	fe 01       	movw	r30, r28
    3446:	e1 5a       	subi	r30, 0xA1	; 161
    3448:	ff 4f       	sbci	r31, 0xFF	; 255
    344a:	60 81       	ld	r22, Z
    344c:	71 81       	ldd	r23, Z+1	; 0x01
    344e:	82 81       	ldd	r24, Z+2	; 0x02
    3450:	93 81       	ldd	r25, Z+3	; 0x03
    3452:	20 e0       	ldi	r18, 0x00	; 0
    3454:	30 e0       	ldi	r19, 0x00	; 0
    3456:	40 e2       	ldi	r20, 0x20	; 32
    3458:	51 e4       	ldi	r21, 0x41	; 65
    345a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    345e:	dc 01       	movw	r26, r24
    3460:	cb 01       	movw	r24, r22
    3462:	8e 01       	movw	r16, r28
    3464:	07 5a       	subi	r16, 0xA7	; 167
    3466:	1f 4f       	sbci	r17, 0xFF	; 255
    3468:	bc 01       	movw	r22, r24
    346a:	cd 01       	movw	r24, r26
    346c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3470:	dc 01       	movw	r26, r24
    3472:	cb 01       	movw	r24, r22
    3474:	f8 01       	movw	r30, r16
    3476:	91 83       	std	Z+1, r25	; 0x01
    3478:	80 83       	st	Z, r24
    347a:	1f c0       	rjmp	.+62     	; 0x34ba <LCD_displayCharacter+0x134>
    347c:	fe 01       	movw	r30, r28
    347e:	e9 5a       	subi	r30, 0xA9	; 169
    3480:	ff 4f       	sbci	r31, 0xFF	; 255
    3482:	88 ec       	ldi	r24, 0xC8	; 200
    3484:	90 e0       	ldi	r25, 0x00	; 0
    3486:	91 83       	std	Z+1, r25	; 0x01
    3488:	80 83       	st	Z, r24
    348a:	fe 01       	movw	r30, r28
    348c:	e9 5a       	subi	r30, 0xA9	; 169
    348e:	ff 4f       	sbci	r31, 0xFF	; 255
    3490:	80 81       	ld	r24, Z
    3492:	91 81       	ldd	r25, Z+1	; 0x01
    3494:	01 97       	sbiw	r24, 0x01	; 1
    3496:	f1 f7       	brne	.-4      	; 0x3494 <LCD_displayCharacter+0x10e>
    3498:	fe 01       	movw	r30, r28
    349a:	e9 5a       	subi	r30, 0xA9	; 169
    349c:	ff 4f       	sbci	r31, 0xFF	; 255
    349e:	91 83       	std	Z+1, r25	; 0x01
    34a0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34a2:	de 01       	movw	r26, r28
    34a4:	a7 5a       	subi	r26, 0xA7	; 167
    34a6:	bf 4f       	sbci	r27, 0xFF	; 255
    34a8:	fe 01       	movw	r30, r28
    34aa:	e7 5a       	subi	r30, 0xA7	; 167
    34ac:	ff 4f       	sbci	r31, 0xFF	; 255
    34ae:	80 81       	ld	r24, Z
    34b0:	91 81       	ldd	r25, Z+1	; 0x01
    34b2:	01 97       	sbiw	r24, 0x01	; 1
    34b4:	11 96       	adiw	r26, 0x01	; 1
    34b6:	9c 93       	st	X, r25
    34b8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34ba:	fe 01       	movw	r30, r28
    34bc:	e7 5a       	subi	r30, 0xA7	; 167
    34be:	ff 4f       	sbci	r31, 0xFF	; 255
    34c0:	80 81       	ld	r24, Z
    34c2:	91 81       	ldd	r25, Z+1	; 0x01
    34c4:	00 97       	sbiw	r24, 0x00	; 0
    34c6:	d1 f6       	brne	.-76     	; 0x347c <LCD_displayCharacter+0xf6>
    34c8:	27 c0       	rjmp	.+78     	; 0x3518 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34ca:	8e 01       	movw	r16, r28
    34cc:	07 5a       	subi	r16, 0xA7	; 167
    34ce:	1f 4f       	sbci	r17, 0xFF	; 255
    34d0:	fe 01       	movw	r30, r28
    34d2:	e5 5a       	subi	r30, 0xA5	; 165
    34d4:	ff 4f       	sbci	r31, 0xFF	; 255
    34d6:	60 81       	ld	r22, Z
    34d8:	71 81       	ldd	r23, Z+1	; 0x01
    34da:	82 81       	ldd	r24, Z+2	; 0x02
    34dc:	93 81       	ldd	r25, Z+3	; 0x03
    34de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34e2:	dc 01       	movw	r26, r24
    34e4:	cb 01       	movw	r24, r22
    34e6:	f8 01       	movw	r30, r16
    34e8:	91 83       	std	Z+1, r25	; 0x01
    34ea:	80 83       	st	Z, r24
    34ec:	de 01       	movw	r26, r28
    34ee:	ab 5a       	subi	r26, 0xAB	; 171
    34f0:	bf 4f       	sbci	r27, 0xFF	; 255
    34f2:	fe 01       	movw	r30, r28
    34f4:	e7 5a       	subi	r30, 0xA7	; 167
    34f6:	ff 4f       	sbci	r31, 0xFF	; 255
    34f8:	80 81       	ld	r24, Z
    34fa:	91 81       	ldd	r25, Z+1	; 0x01
    34fc:	8d 93       	st	X+, r24
    34fe:	9c 93       	st	X, r25
    3500:	fe 01       	movw	r30, r28
    3502:	eb 5a       	subi	r30, 0xAB	; 171
    3504:	ff 4f       	sbci	r31, 0xFF	; 255
    3506:	80 81       	ld	r24, Z
    3508:	91 81       	ldd	r25, Z+1	; 0x01
    350a:	01 97       	sbiw	r24, 0x01	; 1
    350c:	f1 f7       	brne	.-4      	; 0x350a <LCD_displayCharacter+0x184>
    350e:	fe 01       	movw	r30, r28
    3510:	eb 5a       	subi	r30, 0xAB	; 171
    3512:	ff 4f       	sbci	r31, 0xFF	; 255
    3514:	91 83       	std	Z+1, r25	; 0x01
    3516:	80 83       	st	Z, r24
	_delay_ms(1);

	// Set Enable Pin to '1'
	GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
    3518:	80 e0       	ldi	r24, 0x00	; 0
    351a:	62 e0       	ldi	r22, 0x02	; 2
    351c:	41 e0       	ldi	r20, 0x01	; 1
    351e:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
    3522:	fe 01       	movw	r30, r28
    3524:	ef 5a       	subi	r30, 0xAF	; 175
    3526:	ff 4f       	sbci	r31, 0xFF	; 255
    3528:	80 e0       	ldi	r24, 0x00	; 0
    352a:	90 e0       	ldi	r25, 0x00	; 0
    352c:	a0 e8       	ldi	r26, 0x80	; 128
    352e:	bf e3       	ldi	r27, 0x3F	; 63
    3530:	80 83       	st	Z, r24
    3532:	91 83       	std	Z+1, r25	; 0x01
    3534:	a2 83       	std	Z+2, r26	; 0x02
    3536:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3538:	8e 01       	movw	r16, r28
    353a:	03 5b       	subi	r16, 0xB3	; 179
    353c:	1f 4f       	sbci	r17, 0xFF	; 255
    353e:	fe 01       	movw	r30, r28
    3540:	ef 5a       	subi	r30, 0xAF	; 175
    3542:	ff 4f       	sbci	r31, 0xFF	; 255
    3544:	60 81       	ld	r22, Z
    3546:	71 81       	ldd	r23, Z+1	; 0x01
    3548:	82 81       	ldd	r24, Z+2	; 0x02
    354a:	93 81       	ldd	r25, Z+3	; 0x03
    354c:	20 e0       	ldi	r18, 0x00	; 0
    354e:	30 e0       	ldi	r19, 0x00	; 0
    3550:	4a ef       	ldi	r20, 0xFA	; 250
    3552:	54 e4       	ldi	r21, 0x44	; 68
    3554:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3558:	dc 01       	movw	r26, r24
    355a:	cb 01       	movw	r24, r22
    355c:	f8 01       	movw	r30, r16
    355e:	80 83       	st	Z, r24
    3560:	91 83       	std	Z+1, r25	; 0x01
    3562:	a2 83       	std	Z+2, r26	; 0x02
    3564:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3566:	fe 01       	movw	r30, r28
    3568:	e3 5b       	subi	r30, 0xB3	; 179
    356a:	ff 4f       	sbci	r31, 0xFF	; 255
    356c:	60 81       	ld	r22, Z
    356e:	71 81       	ldd	r23, Z+1	; 0x01
    3570:	82 81       	ldd	r24, Z+2	; 0x02
    3572:	93 81       	ldd	r25, Z+3	; 0x03
    3574:	20 e0       	ldi	r18, 0x00	; 0
    3576:	30 e0       	ldi	r19, 0x00	; 0
    3578:	40 e8       	ldi	r20, 0x80	; 128
    357a:	5f e3       	ldi	r21, 0x3F	; 63
    357c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3580:	88 23       	and	r24, r24
    3582:	44 f4       	brge	.+16     	; 0x3594 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    3584:	fe 01       	movw	r30, r28
    3586:	e5 5b       	subi	r30, 0xB5	; 181
    3588:	ff 4f       	sbci	r31, 0xFF	; 255
    358a:	81 e0       	ldi	r24, 0x01	; 1
    358c:	90 e0       	ldi	r25, 0x00	; 0
    358e:	91 83       	std	Z+1, r25	; 0x01
    3590:	80 83       	st	Z, r24
    3592:	64 c0       	rjmp	.+200    	; 0x365c <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    3594:	fe 01       	movw	r30, r28
    3596:	e3 5b       	subi	r30, 0xB3	; 179
    3598:	ff 4f       	sbci	r31, 0xFF	; 255
    359a:	60 81       	ld	r22, Z
    359c:	71 81       	ldd	r23, Z+1	; 0x01
    359e:	82 81       	ldd	r24, Z+2	; 0x02
    35a0:	93 81       	ldd	r25, Z+3	; 0x03
    35a2:	20 e0       	ldi	r18, 0x00	; 0
    35a4:	3f ef       	ldi	r19, 0xFF	; 255
    35a6:	4f e7       	ldi	r20, 0x7F	; 127
    35a8:	57 e4       	ldi	r21, 0x47	; 71
    35aa:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    35ae:	18 16       	cp	r1, r24
    35b0:	0c f0       	brlt	.+2      	; 0x35b4 <LCD_displayCharacter+0x22e>
    35b2:	43 c0       	rjmp	.+134    	; 0x363a <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35b4:	fe 01       	movw	r30, r28
    35b6:	ef 5a       	subi	r30, 0xAF	; 175
    35b8:	ff 4f       	sbci	r31, 0xFF	; 255
    35ba:	60 81       	ld	r22, Z
    35bc:	71 81       	ldd	r23, Z+1	; 0x01
    35be:	82 81       	ldd	r24, Z+2	; 0x02
    35c0:	93 81       	ldd	r25, Z+3	; 0x03
    35c2:	20 e0       	ldi	r18, 0x00	; 0
    35c4:	30 e0       	ldi	r19, 0x00	; 0
    35c6:	40 e2       	ldi	r20, 0x20	; 32
    35c8:	51 e4       	ldi	r21, 0x41	; 65
    35ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35ce:	dc 01       	movw	r26, r24
    35d0:	cb 01       	movw	r24, r22
    35d2:	8e 01       	movw	r16, r28
    35d4:	05 5b       	subi	r16, 0xB5	; 181
    35d6:	1f 4f       	sbci	r17, 0xFF	; 255
    35d8:	bc 01       	movw	r22, r24
    35da:	cd 01       	movw	r24, r26
    35dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35e0:	dc 01       	movw	r26, r24
    35e2:	cb 01       	movw	r24, r22
    35e4:	f8 01       	movw	r30, r16
    35e6:	91 83       	std	Z+1, r25	; 0x01
    35e8:	80 83       	st	Z, r24
    35ea:	1f c0       	rjmp	.+62     	; 0x362a <LCD_displayCharacter+0x2a4>
    35ec:	fe 01       	movw	r30, r28
    35ee:	e7 5b       	subi	r30, 0xB7	; 183
    35f0:	ff 4f       	sbci	r31, 0xFF	; 255
    35f2:	88 ec       	ldi	r24, 0xC8	; 200
    35f4:	90 e0       	ldi	r25, 0x00	; 0
    35f6:	91 83       	std	Z+1, r25	; 0x01
    35f8:	80 83       	st	Z, r24
    35fa:	fe 01       	movw	r30, r28
    35fc:	e7 5b       	subi	r30, 0xB7	; 183
    35fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3600:	80 81       	ld	r24, Z
    3602:	91 81       	ldd	r25, Z+1	; 0x01
    3604:	01 97       	sbiw	r24, 0x01	; 1
    3606:	f1 f7       	brne	.-4      	; 0x3604 <LCD_displayCharacter+0x27e>
    3608:	fe 01       	movw	r30, r28
    360a:	e7 5b       	subi	r30, 0xB7	; 183
    360c:	ff 4f       	sbci	r31, 0xFF	; 255
    360e:	91 83       	std	Z+1, r25	; 0x01
    3610:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3612:	de 01       	movw	r26, r28
    3614:	a5 5b       	subi	r26, 0xB5	; 181
    3616:	bf 4f       	sbci	r27, 0xFF	; 255
    3618:	fe 01       	movw	r30, r28
    361a:	e5 5b       	subi	r30, 0xB5	; 181
    361c:	ff 4f       	sbci	r31, 0xFF	; 255
    361e:	80 81       	ld	r24, Z
    3620:	91 81       	ldd	r25, Z+1	; 0x01
    3622:	01 97       	sbiw	r24, 0x01	; 1
    3624:	11 96       	adiw	r26, 0x01	; 1
    3626:	9c 93       	st	X, r25
    3628:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    362a:	fe 01       	movw	r30, r28
    362c:	e5 5b       	subi	r30, 0xB5	; 181
    362e:	ff 4f       	sbci	r31, 0xFF	; 255
    3630:	80 81       	ld	r24, Z
    3632:	91 81       	ldd	r25, Z+1	; 0x01
    3634:	00 97       	sbiw	r24, 0x00	; 0
    3636:	d1 f6       	brne	.-76     	; 0x35ec <LCD_displayCharacter+0x266>
    3638:	27 c0       	rjmp	.+78     	; 0x3688 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    363a:	8e 01       	movw	r16, r28
    363c:	05 5b       	subi	r16, 0xB5	; 181
    363e:	1f 4f       	sbci	r17, 0xFF	; 255
    3640:	fe 01       	movw	r30, r28
    3642:	e3 5b       	subi	r30, 0xB3	; 179
    3644:	ff 4f       	sbci	r31, 0xFF	; 255
    3646:	60 81       	ld	r22, Z
    3648:	71 81       	ldd	r23, Z+1	; 0x01
    364a:	82 81       	ldd	r24, Z+2	; 0x02
    364c:	93 81       	ldd	r25, Z+3	; 0x03
    364e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3652:	dc 01       	movw	r26, r24
    3654:	cb 01       	movw	r24, r22
    3656:	f8 01       	movw	r30, r16
    3658:	91 83       	std	Z+1, r25	; 0x01
    365a:	80 83       	st	Z, r24
    365c:	de 01       	movw	r26, r28
    365e:	a9 5b       	subi	r26, 0xB9	; 185
    3660:	bf 4f       	sbci	r27, 0xFF	; 255
    3662:	fe 01       	movw	r30, r28
    3664:	e5 5b       	subi	r30, 0xB5	; 181
    3666:	ff 4f       	sbci	r31, 0xFF	; 255
    3668:	80 81       	ld	r24, Z
    366a:	91 81       	ldd	r25, Z+1	; 0x01
    366c:	8d 93       	st	X+, r24
    366e:	9c 93       	st	X, r25
    3670:	fe 01       	movw	r30, r28
    3672:	e9 5b       	subi	r30, 0xB9	; 185
    3674:	ff 4f       	sbci	r31, 0xFF	; 255
    3676:	80 81       	ld	r24, Z
    3678:	91 81       	ldd	r25, Z+1	; 0x01
    367a:	01 97       	sbiw	r24, 0x01	; 1
    367c:	f1 f7       	brne	.-4      	; 0x367a <LCD_displayCharacter+0x2f4>
    367e:	fe 01       	movw	r30, r28
    3680:	e9 5b       	subi	r30, 0xB9	; 185
    3682:	ff 4f       	sbci	r31, 0xFF	; 255
    3684:	91 83       	std	Z+1, r25	; 0x01
    3686:	80 83       	st	Z, r24
	_delay_ms(1);

	// Inserts the data in the assigned PORT to be sent to the LCD
	// Inserts the data in the assigned PORT to be sent to the LCD
	if (LCD_BIT_MODE == 4) {
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 0), GET_BIT( data, 4 ));
    3688:	fe 01       	movw	r30, r28
    368a:	ed 59       	subi	r30, 0x9D	; 157
    368c:	ff 4f       	sbci	r31, 0xFF	; 255
    368e:	80 81       	ld	r24, Z
    3690:	82 95       	swap	r24
    3692:	8f 70       	andi	r24, 0x0F	; 15
    3694:	98 2f       	mov	r25, r24
    3696:	91 70       	andi	r25, 0x01	; 1
    3698:	80 e0       	ldi	r24, 0x00	; 0
    369a:	63 e0       	ldi	r22, 0x03	; 3
    369c:	49 2f       	mov	r20, r25
    369e:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 1), GET_BIT( data, 5 ));
    36a2:	fe 01       	movw	r30, r28
    36a4:	ed 59       	subi	r30, 0x9D	; 157
    36a6:	ff 4f       	sbci	r31, 0xFF	; 255
    36a8:	80 81       	ld	r24, Z
    36aa:	82 95       	swap	r24
    36ac:	86 95       	lsr	r24
    36ae:	87 70       	andi	r24, 0x07	; 7
    36b0:	98 2f       	mov	r25, r24
    36b2:	91 70       	andi	r25, 0x01	; 1
    36b4:	80 e0       	ldi	r24, 0x00	; 0
    36b6:	64 e0       	ldi	r22, 0x04	; 4
    36b8:	49 2f       	mov	r20, r25
    36ba:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 2), GET_BIT( data, 6 ));
    36be:	fe 01       	movw	r30, r28
    36c0:	ed 59       	subi	r30, 0x9D	; 157
    36c2:	ff 4f       	sbci	r31, 0xFF	; 255
    36c4:	80 81       	ld	r24, Z
    36c6:	82 95       	swap	r24
    36c8:	86 95       	lsr	r24
    36ca:	86 95       	lsr	r24
    36cc:	83 70       	andi	r24, 0x03	; 3
    36ce:	98 2f       	mov	r25, r24
    36d0:	91 70       	andi	r25, 0x01	; 1
    36d2:	80 e0       	ldi	r24, 0x00	; 0
    36d4:	65 e0       	ldi	r22, 0x05	; 5
    36d6:	49 2f       	mov	r20, r25
    36d8:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 3), GET_BIT( data, 7 ));
    36dc:	fe 01       	movw	r30, r28
    36de:	ed 59       	subi	r30, 0x9D	; 157
    36e0:	ff 4f       	sbci	r31, 0xFF	; 255
    36e2:	80 81       	ld	r24, Z
    36e4:	98 2f       	mov	r25, r24
    36e6:	99 1f       	adc	r25, r25
    36e8:	99 27       	eor	r25, r25
    36ea:	99 1f       	adc	r25, r25
    36ec:	80 e0       	ldi	r24, 0x00	; 0
    36ee:	66 e0       	ldi	r22, 0x06	; 6
    36f0:	49 2f       	mov	r20, r25
    36f2:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
    36f6:	fe 01       	movw	r30, r28
    36f8:	ed 5b       	subi	r30, 0xBD	; 189
    36fa:	ff 4f       	sbci	r31, 0xFF	; 255
    36fc:	80 e0       	ldi	r24, 0x00	; 0
    36fe:	90 e0       	ldi	r25, 0x00	; 0
    3700:	a0 e8       	ldi	r26, 0x80	; 128
    3702:	bf e3       	ldi	r27, 0x3F	; 63
    3704:	80 83       	st	Z, r24
    3706:	91 83       	std	Z+1, r25	; 0x01
    3708:	a2 83       	std	Z+2, r26	; 0x02
    370a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    370c:	8e 01       	movw	r16, r28
    370e:	01 5c       	subi	r16, 0xC1	; 193
    3710:	1f 4f       	sbci	r17, 0xFF	; 255
    3712:	fe 01       	movw	r30, r28
    3714:	ed 5b       	subi	r30, 0xBD	; 189
    3716:	ff 4f       	sbci	r31, 0xFF	; 255
    3718:	60 81       	ld	r22, Z
    371a:	71 81       	ldd	r23, Z+1	; 0x01
    371c:	82 81       	ldd	r24, Z+2	; 0x02
    371e:	93 81       	ldd	r25, Z+3	; 0x03
    3720:	20 e0       	ldi	r18, 0x00	; 0
    3722:	30 e0       	ldi	r19, 0x00	; 0
    3724:	4a ef       	ldi	r20, 0xFA	; 250
    3726:	54 e4       	ldi	r21, 0x44	; 68
    3728:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    372c:	dc 01       	movw	r26, r24
    372e:	cb 01       	movw	r24, r22
    3730:	f8 01       	movw	r30, r16
    3732:	80 83       	st	Z, r24
    3734:	91 83       	std	Z+1, r25	; 0x01
    3736:	a2 83       	std	Z+2, r26	; 0x02
    3738:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    373a:	fe 01       	movw	r30, r28
    373c:	ff 96       	adiw	r30, 0x3f	; 63
    373e:	60 81       	ld	r22, Z
    3740:	71 81       	ldd	r23, Z+1	; 0x01
    3742:	82 81       	ldd	r24, Z+2	; 0x02
    3744:	93 81       	ldd	r25, Z+3	; 0x03
    3746:	20 e0       	ldi	r18, 0x00	; 0
    3748:	30 e0       	ldi	r19, 0x00	; 0
    374a:	40 e8       	ldi	r20, 0x80	; 128
    374c:	5f e3       	ldi	r21, 0x3F	; 63
    374e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3752:	88 23       	and	r24, r24
    3754:	2c f4       	brge	.+10     	; 0x3760 <LCD_displayCharacter+0x3da>
		__ticks = 1;
    3756:	81 e0       	ldi	r24, 0x01	; 1
    3758:	90 e0       	ldi	r25, 0x00	; 0
    375a:	9e af       	std	Y+62, r25	; 0x3e
    375c:	8d af       	std	Y+61, r24	; 0x3d
    375e:	46 c0       	rjmp	.+140    	; 0x37ec <LCD_displayCharacter+0x466>
	else if (__tmp > 65535)
    3760:	fe 01       	movw	r30, r28
    3762:	ff 96       	adiw	r30, 0x3f	; 63
    3764:	60 81       	ld	r22, Z
    3766:	71 81       	ldd	r23, Z+1	; 0x01
    3768:	82 81       	ldd	r24, Z+2	; 0x02
    376a:	93 81       	ldd	r25, Z+3	; 0x03
    376c:	20 e0       	ldi	r18, 0x00	; 0
    376e:	3f ef       	ldi	r19, 0xFF	; 255
    3770:	4f e7       	ldi	r20, 0x7F	; 127
    3772:	57 e4       	ldi	r21, 0x47	; 71
    3774:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3778:	18 16       	cp	r1, r24
    377a:	64 f5       	brge	.+88     	; 0x37d4 <LCD_displayCharacter+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    377c:	fe 01       	movw	r30, r28
    377e:	ed 5b       	subi	r30, 0xBD	; 189
    3780:	ff 4f       	sbci	r31, 0xFF	; 255
    3782:	60 81       	ld	r22, Z
    3784:	71 81       	ldd	r23, Z+1	; 0x01
    3786:	82 81       	ldd	r24, Z+2	; 0x02
    3788:	93 81       	ldd	r25, Z+3	; 0x03
    378a:	20 e0       	ldi	r18, 0x00	; 0
    378c:	30 e0       	ldi	r19, 0x00	; 0
    378e:	40 e2       	ldi	r20, 0x20	; 32
    3790:	51 e4       	ldi	r21, 0x41	; 65
    3792:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3796:	dc 01       	movw	r26, r24
    3798:	cb 01       	movw	r24, r22
    379a:	bc 01       	movw	r22, r24
    379c:	cd 01       	movw	r24, r26
    379e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37a2:	dc 01       	movw	r26, r24
    37a4:	cb 01       	movw	r24, r22
    37a6:	9e af       	std	Y+62, r25	; 0x3e
    37a8:	8d af       	std	Y+61, r24	; 0x3d
    37aa:	0f c0       	rjmp	.+30     	; 0x37ca <LCD_displayCharacter+0x444>
    37ac:	88 ec       	ldi	r24, 0xC8	; 200
    37ae:	90 e0       	ldi	r25, 0x00	; 0
    37b0:	9c af       	std	Y+60, r25	; 0x3c
    37b2:	8b af       	std	Y+59, r24	; 0x3b
    37b4:	8b ad       	ldd	r24, Y+59	; 0x3b
    37b6:	9c ad       	ldd	r25, Y+60	; 0x3c
    37b8:	01 97       	sbiw	r24, 0x01	; 1
    37ba:	f1 f7       	brne	.-4      	; 0x37b8 <LCD_displayCharacter+0x432>
    37bc:	9c af       	std	Y+60, r25	; 0x3c
    37be:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37c0:	8d ad       	ldd	r24, Y+61	; 0x3d
    37c2:	9e ad       	ldd	r25, Y+62	; 0x3e
    37c4:	01 97       	sbiw	r24, 0x01	; 1
    37c6:	9e af       	std	Y+62, r25	; 0x3e
    37c8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37ca:	8d ad       	ldd	r24, Y+61	; 0x3d
    37cc:	9e ad       	ldd	r25, Y+62	; 0x3e
    37ce:	00 97       	sbiw	r24, 0x00	; 0
    37d0:	69 f7       	brne	.-38     	; 0x37ac <LCD_displayCharacter+0x426>
    37d2:	16 c0       	rjmp	.+44     	; 0x3800 <LCD_displayCharacter+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37d4:	fe 01       	movw	r30, r28
    37d6:	ff 96       	adiw	r30, 0x3f	; 63
    37d8:	60 81       	ld	r22, Z
    37da:	71 81       	ldd	r23, Z+1	; 0x01
    37dc:	82 81       	ldd	r24, Z+2	; 0x02
    37de:	93 81       	ldd	r25, Z+3	; 0x03
    37e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37e4:	dc 01       	movw	r26, r24
    37e6:	cb 01       	movw	r24, r22
    37e8:	9e af       	std	Y+62, r25	; 0x3e
    37ea:	8d af       	std	Y+61, r24	; 0x3d
    37ec:	8d ad       	ldd	r24, Y+61	; 0x3d
    37ee:	9e ad       	ldd	r25, Y+62	; 0x3e
    37f0:	9a af       	std	Y+58, r25	; 0x3a
    37f2:	89 af       	std	Y+57, r24	; 0x39
    37f4:	89 ad       	ldd	r24, Y+57	; 0x39
    37f6:	9a ad       	ldd	r25, Y+58	; 0x3a
    37f8:	01 97       	sbiw	r24, 0x01	; 1
    37fa:	f1 f7       	brne	.-4      	; 0x37f8 <LCD_displayCharacter+0x472>
    37fc:	9a af       	std	Y+58, r25	; 0x3a
    37fe:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(1);

		// Clear Enable Pin to '0'
		GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
    3800:	80 e0       	ldi	r24, 0x00	; 0
    3802:	62 e0       	ldi	r22, 0x02	; 2
    3804:	40 e0       	ldi	r20, 0x00	; 0
    3806:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
    380a:	80 e0       	ldi	r24, 0x00	; 0
    380c:	90 e0       	ldi	r25, 0x00	; 0
    380e:	a0 e8       	ldi	r26, 0x80	; 128
    3810:	bf e3       	ldi	r27, 0x3F	; 63
    3812:	8d ab       	std	Y+53, r24	; 0x35
    3814:	9e ab       	std	Y+54, r25	; 0x36
    3816:	af ab       	std	Y+55, r26	; 0x37
    3818:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    381a:	6d a9       	ldd	r22, Y+53	; 0x35
    381c:	7e a9       	ldd	r23, Y+54	; 0x36
    381e:	8f a9       	ldd	r24, Y+55	; 0x37
    3820:	98 ad       	ldd	r25, Y+56	; 0x38
    3822:	20 e0       	ldi	r18, 0x00	; 0
    3824:	30 e0       	ldi	r19, 0x00	; 0
    3826:	4a ef       	ldi	r20, 0xFA	; 250
    3828:	54 e4       	ldi	r21, 0x44	; 68
    382a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    382e:	dc 01       	movw	r26, r24
    3830:	cb 01       	movw	r24, r22
    3832:	89 ab       	std	Y+49, r24	; 0x31
    3834:	9a ab       	std	Y+50, r25	; 0x32
    3836:	ab ab       	std	Y+51, r26	; 0x33
    3838:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    383a:	69 a9       	ldd	r22, Y+49	; 0x31
    383c:	7a a9       	ldd	r23, Y+50	; 0x32
    383e:	8b a9       	ldd	r24, Y+51	; 0x33
    3840:	9c a9       	ldd	r25, Y+52	; 0x34
    3842:	20 e0       	ldi	r18, 0x00	; 0
    3844:	30 e0       	ldi	r19, 0x00	; 0
    3846:	40 e8       	ldi	r20, 0x80	; 128
    3848:	5f e3       	ldi	r21, 0x3F	; 63
    384a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    384e:	88 23       	and	r24, r24
    3850:	2c f4       	brge	.+10     	; 0x385c <LCD_displayCharacter+0x4d6>
		__ticks = 1;
    3852:	81 e0       	ldi	r24, 0x01	; 1
    3854:	90 e0       	ldi	r25, 0x00	; 0
    3856:	98 ab       	std	Y+48, r25	; 0x30
    3858:	8f a7       	std	Y+47, r24	; 0x2f
    385a:	3f c0       	rjmp	.+126    	; 0x38da <LCD_displayCharacter+0x554>
	else if (__tmp > 65535)
    385c:	69 a9       	ldd	r22, Y+49	; 0x31
    385e:	7a a9       	ldd	r23, Y+50	; 0x32
    3860:	8b a9       	ldd	r24, Y+51	; 0x33
    3862:	9c a9       	ldd	r25, Y+52	; 0x34
    3864:	20 e0       	ldi	r18, 0x00	; 0
    3866:	3f ef       	ldi	r19, 0xFF	; 255
    3868:	4f e7       	ldi	r20, 0x7F	; 127
    386a:	57 e4       	ldi	r21, 0x47	; 71
    386c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3870:	18 16       	cp	r1, r24
    3872:	4c f5       	brge	.+82     	; 0x38c6 <LCD_displayCharacter+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3874:	6d a9       	ldd	r22, Y+53	; 0x35
    3876:	7e a9       	ldd	r23, Y+54	; 0x36
    3878:	8f a9       	ldd	r24, Y+55	; 0x37
    387a:	98 ad       	ldd	r25, Y+56	; 0x38
    387c:	20 e0       	ldi	r18, 0x00	; 0
    387e:	30 e0       	ldi	r19, 0x00	; 0
    3880:	40 e2       	ldi	r20, 0x20	; 32
    3882:	51 e4       	ldi	r21, 0x41	; 65
    3884:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3888:	dc 01       	movw	r26, r24
    388a:	cb 01       	movw	r24, r22
    388c:	bc 01       	movw	r22, r24
    388e:	cd 01       	movw	r24, r26
    3890:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3894:	dc 01       	movw	r26, r24
    3896:	cb 01       	movw	r24, r22
    3898:	98 ab       	std	Y+48, r25	; 0x30
    389a:	8f a7       	std	Y+47, r24	; 0x2f
    389c:	0f c0       	rjmp	.+30     	; 0x38bc <LCD_displayCharacter+0x536>
    389e:	88 ec       	ldi	r24, 0xC8	; 200
    38a0:	90 e0       	ldi	r25, 0x00	; 0
    38a2:	9e a7       	std	Y+46, r25	; 0x2e
    38a4:	8d a7       	std	Y+45, r24	; 0x2d
    38a6:	8d a5       	ldd	r24, Y+45	; 0x2d
    38a8:	9e a5       	ldd	r25, Y+46	; 0x2e
    38aa:	01 97       	sbiw	r24, 0x01	; 1
    38ac:	f1 f7       	brne	.-4      	; 0x38aa <LCD_displayCharacter+0x524>
    38ae:	9e a7       	std	Y+46, r25	; 0x2e
    38b0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    38b4:	98 a9       	ldd	r25, Y+48	; 0x30
    38b6:	01 97       	sbiw	r24, 0x01	; 1
    38b8:	98 ab       	std	Y+48, r25	; 0x30
    38ba:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    38be:	98 a9       	ldd	r25, Y+48	; 0x30
    38c0:	00 97       	sbiw	r24, 0x00	; 0
    38c2:	69 f7       	brne	.-38     	; 0x389e <LCD_displayCharacter+0x518>
    38c4:	14 c0       	rjmp	.+40     	; 0x38ee <LCD_displayCharacter+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38c6:	69 a9       	ldd	r22, Y+49	; 0x31
    38c8:	7a a9       	ldd	r23, Y+50	; 0x32
    38ca:	8b a9       	ldd	r24, Y+51	; 0x33
    38cc:	9c a9       	ldd	r25, Y+52	; 0x34
    38ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38d2:	dc 01       	movw	r26, r24
    38d4:	cb 01       	movw	r24, r22
    38d6:	98 ab       	std	Y+48, r25	; 0x30
    38d8:	8f a7       	std	Y+47, r24	; 0x2f
    38da:	8f a5       	ldd	r24, Y+47	; 0x2f
    38dc:	98 a9       	ldd	r25, Y+48	; 0x30
    38de:	9c a7       	std	Y+44, r25	; 0x2c
    38e0:	8b a7       	std	Y+43, r24	; 0x2b
    38e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    38e4:	9c a5       	ldd	r25, Y+44	; 0x2c
    38e6:	01 97       	sbiw	r24, 0x01	; 1
    38e8:	f1 f7       	brne	.-4      	; 0x38e6 <LCD_displayCharacter+0x560>
    38ea:	9c a7       	std	Y+44, r25	; 0x2c
    38ec:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1); /* delay for processing Th = 13ns */

		// Set Enable Pin to '1'
		GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_HIGH);
    38ee:	80 e0       	ldi	r24, 0x00	; 0
    38f0:	62 e0       	ldi	r22, 0x02	; 2
    38f2:	41 e0       	ldi	r20, 0x01	; 1
    38f4:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
    38f8:	80 e0       	ldi	r24, 0x00	; 0
    38fa:	90 e0       	ldi	r25, 0x00	; 0
    38fc:	a0 e8       	ldi	r26, 0x80	; 128
    38fe:	bf e3       	ldi	r27, 0x3F	; 63
    3900:	8f a3       	std	Y+39, r24	; 0x27
    3902:	98 a7       	std	Y+40, r25	; 0x28
    3904:	a9 a7       	std	Y+41, r26	; 0x29
    3906:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3908:	6f a1       	ldd	r22, Y+39	; 0x27
    390a:	78 a5       	ldd	r23, Y+40	; 0x28
    390c:	89 a5       	ldd	r24, Y+41	; 0x29
    390e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3910:	20 e0       	ldi	r18, 0x00	; 0
    3912:	30 e0       	ldi	r19, 0x00	; 0
    3914:	4a ef       	ldi	r20, 0xFA	; 250
    3916:	54 e4       	ldi	r21, 0x44	; 68
    3918:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    391c:	dc 01       	movw	r26, r24
    391e:	cb 01       	movw	r24, r22
    3920:	8b a3       	std	Y+35, r24	; 0x23
    3922:	9c a3       	std	Y+36, r25	; 0x24
    3924:	ad a3       	std	Y+37, r26	; 0x25
    3926:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3928:	6b a1       	ldd	r22, Y+35	; 0x23
    392a:	7c a1       	ldd	r23, Y+36	; 0x24
    392c:	8d a1       	ldd	r24, Y+37	; 0x25
    392e:	9e a1       	ldd	r25, Y+38	; 0x26
    3930:	20 e0       	ldi	r18, 0x00	; 0
    3932:	30 e0       	ldi	r19, 0x00	; 0
    3934:	40 e8       	ldi	r20, 0x80	; 128
    3936:	5f e3       	ldi	r21, 0x3F	; 63
    3938:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    393c:	88 23       	and	r24, r24
    393e:	2c f4       	brge	.+10     	; 0x394a <LCD_displayCharacter+0x5c4>
		__ticks = 1;
    3940:	81 e0       	ldi	r24, 0x01	; 1
    3942:	90 e0       	ldi	r25, 0x00	; 0
    3944:	9a a3       	std	Y+34, r25	; 0x22
    3946:	89 a3       	std	Y+33, r24	; 0x21
    3948:	3f c0       	rjmp	.+126    	; 0x39c8 <LCD_displayCharacter+0x642>
	else if (__tmp > 65535)
    394a:	6b a1       	ldd	r22, Y+35	; 0x23
    394c:	7c a1       	ldd	r23, Y+36	; 0x24
    394e:	8d a1       	ldd	r24, Y+37	; 0x25
    3950:	9e a1       	ldd	r25, Y+38	; 0x26
    3952:	20 e0       	ldi	r18, 0x00	; 0
    3954:	3f ef       	ldi	r19, 0xFF	; 255
    3956:	4f e7       	ldi	r20, 0x7F	; 127
    3958:	57 e4       	ldi	r21, 0x47	; 71
    395a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    395e:	18 16       	cp	r1, r24
    3960:	4c f5       	brge	.+82     	; 0x39b4 <LCD_displayCharacter+0x62e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3962:	6f a1       	ldd	r22, Y+39	; 0x27
    3964:	78 a5       	ldd	r23, Y+40	; 0x28
    3966:	89 a5       	ldd	r24, Y+41	; 0x29
    3968:	9a a5       	ldd	r25, Y+42	; 0x2a
    396a:	20 e0       	ldi	r18, 0x00	; 0
    396c:	30 e0       	ldi	r19, 0x00	; 0
    396e:	40 e2       	ldi	r20, 0x20	; 32
    3970:	51 e4       	ldi	r21, 0x41	; 65
    3972:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3976:	dc 01       	movw	r26, r24
    3978:	cb 01       	movw	r24, r22
    397a:	bc 01       	movw	r22, r24
    397c:	cd 01       	movw	r24, r26
    397e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3982:	dc 01       	movw	r26, r24
    3984:	cb 01       	movw	r24, r22
    3986:	9a a3       	std	Y+34, r25	; 0x22
    3988:	89 a3       	std	Y+33, r24	; 0x21
    398a:	0f c0       	rjmp	.+30     	; 0x39aa <LCD_displayCharacter+0x624>
    398c:	88 ec       	ldi	r24, 0xC8	; 200
    398e:	90 e0       	ldi	r25, 0x00	; 0
    3990:	98 a3       	std	Y+32, r25	; 0x20
    3992:	8f 8f       	std	Y+31, r24	; 0x1f
    3994:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3996:	98 a1       	ldd	r25, Y+32	; 0x20
    3998:	01 97       	sbiw	r24, 0x01	; 1
    399a:	f1 f7       	brne	.-4      	; 0x3998 <LCD_displayCharacter+0x612>
    399c:	98 a3       	std	Y+32, r25	; 0x20
    399e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39a0:	89 a1       	ldd	r24, Y+33	; 0x21
    39a2:	9a a1       	ldd	r25, Y+34	; 0x22
    39a4:	01 97       	sbiw	r24, 0x01	; 1
    39a6:	9a a3       	std	Y+34, r25	; 0x22
    39a8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39aa:	89 a1       	ldd	r24, Y+33	; 0x21
    39ac:	9a a1       	ldd	r25, Y+34	; 0x22
    39ae:	00 97       	sbiw	r24, 0x00	; 0
    39b0:	69 f7       	brne	.-38     	; 0x398c <LCD_displayCharacter+0x606>
    39b2:	14 c0       	rjmp	.+40     	; 0x39dc <LCD_displayCharacter+0x656>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39b4:	6b a1       	ldd	r22, Y+35	; 0x23
    39b6:	7c a1       	ldd	r23, Y+36	; 0x24
    39b8:	8d a1       	ldd	r24, Y+37	; 0x25
    39ba:	9e a1       	ldd	r25, Y+38	; 0x26
    39bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39c0:	dc 01       	movw	r26, r24
    39c2:	cb 01       	movw	r24, r22
    39c4:	9a a3       	std	Y+34, r25	; 0x22
    39c6:	89 a3       	std	Y+33, r24	; 0x21
    39c8:	89 a1       	ldd	r24, Y+33	; 0x21
    39ca:	9a a1       	ldd	r25, Y+34	; 0x22
    39cc:	9e 8f       	std	Y+30, r25	; 0x1e
    39ce:	8d 8f       	std	Y+29, r24	; 0x1d
    39d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    39d2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    39d4:	01 97       	sbiw	r24, 0x01	; 1
    39d6:	f1 f7       	brne	.-4      	; 0x39d4 <LCD_displayCharacter+0x64e>
    39d8:	9e 8f       	std	Y+30, r25	; 0x1e
    39da:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 0), GET_BIT( data, 0 ));
    39dc:	fe 01       	movw	r30, r28
    39de:	ed 59       	subi	r30, 0x9D	; 157
    39e0:	ff 4f       	sbci	r31, 0xFF	; 255
    39e2:	80 81       	ld	r24, Z
    39e4:	98 2f       	mov	r25, r24
    39e6:	91 70       	andi	r25, 0x01	; 1
    39e8:	80 e0       	ldi	r24, 0x00	; 0
    39ea:	63 e0       	ldi	r22, 0x03	; 3
    39ec:	49 2f       	mov	r20, r25
    39ee:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 1), GET_BIT( data, 1 ));
    39f2:	fe 01       	movw	r30, r28
    39f4:	ed 59       	subi	r30, 0x9D	; 157
    39f6:	ff 4f       	sbci	r31, 0xFF	; 255
    39f8:	80 81       	ld	r24, Z
    39fa:	86 95       	lsr	r24
    39fc:	98 2f       	mov	r25, r24
    39fe:	91 70       	andi	r25, 0x01	; 1
    3a00:	80 e0       	ldi	r24, 0x00	; 0
    3a02:	64 e0       	ldi	r22, 0x04	; 4
    3a04:	49 2f       	mov	r20, r25
    3a06:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 2), GET_BIT( data, 2 ));
    3a0a:	fe 01       	movw	r30, r28
    3a0c:	ed 59       	subi	r30, 0x9D	; 157
    3a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a10:	80 81       	ld	r24, Z
    3a12:	86 95       	lsr	r24
    3a14:	86 95       	lsr	r24
    3a16:	98 2f       	mov	r25, r24
    3a18:	91 70       	andi	r25, 0x01	; 1
    3a1a:	80 e0       	ldi	r24, 0x00	; 0
    3a1c:	65 e0       	ldi	r22, 0x05	; 5
    3a1e:	49 2f       	mov	r20, r25
    3a20:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORT, (LCD_FOUR_BIT_DATAPIN + 3), GET_BIT( data, 3 ));
    3a24:	fe 01       	movw	r30, r28
    3a26:	ed 59       	subi	r30, 0x9D	; 157
    3a28:	ff 4f       	sbci	r31, 0xFF	; 255
    3a2a:	80 81       	ld	r24, Z
    3a2c:	86 95       	lsr	r24
    3a2e:	86 95       	lsr	r24
    3a30:	86 95       	lsr	r24
    3a32:	98 2f       	mov	r25, r24
    3a34:	91 70       	andi	r25, 0x01	; 1
    3a36:	80 e0       	ldi	r24, 0x00	; 0
    3a38:	66 e0       	ldi	r22, 0x06	; 6
    3a3a:	49 2f       	mov	r20, r25
    3a3c:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
    3a40:	80 e0       	ldi	r24, 0x00	; 0
    3a42:	90 e0       	ldi	r25, 0x00	; 0
    3a44:	a0 e8       	ldi	r26, 0x80	; 128
    3a46:	bf e3       	ldi	r27, 0x3F	; 63
    3a48:	89 8f       	std	Y+25, r24	; 0x19
    3a4a:	9a 8f       	std	Y+26, r25	; 0x1a
    3a4c:	ab 8f       	std	Y+27, r26	; 0x1b
    3a4e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a50:	69 8d       	ldd	r22, Y+25	; 0x19
    3a52:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a54:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a56:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a58:	20 e0       	ldi	r18, 0x00	; 0
    3a5a:	30 e0       	ldi	r19, 0x00	; 0
    3a5c:	4a ef       	ldi	r20, 0xFA	; 250
    3a5e:	54 e4       	ldi	r21, 0x44	; 68
    3a60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a64:	dc 01       	movw	r26, r24
    3a66:	cb 01       	movw	r24, r22
    3a68:	8d 8b       	std	Y+21, r24	; 0x15
    3a6a:	9e 8b       	std	Y+22, r25	; 0x16
    3a6c:	af 8b       	std	Y+23, r26	; 0x17
    3a6e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3a70:	6d 89       	ldd	r22, Y+21	; 0x15
    3a72:	7e 89       	ldd	r23, Y+22	; 0x16
    3a74:	8f 89       	ldd	r24, Y+23	; 0x17
    3a76:	98 8d       	ldd	r25, Y+24	; 0x18
    3a78:	20 e0       	ldi	r18, 0x00	; 0
    3a7a:	30 e0       	ldi	r19, 0x00	; 0
    3a7c:	40 e8       	ldi	r20, 0x80	; 128
    3a7e:	5f e3       	ldi	r21, 0x3F	; 63
    3a80:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3a84:	88 23       	and	r24, r24
    3a86:	2c f4       	brge	.+10     	; 0x3a92 <LCD_displayCharacter+0x70c>
		__ticks = 1;
    3a88:	81 e0       	ldi	r24, 0x01	; 1
    3a8a:	90 e0       	ldi	r25, 0x00	; 0
    3a8c:	9c 8b       	std	Y+20, r25	; 0x14
    3a8e:	8b 8b       	std	Y+19, r24	; 0x13
    3a90:	3f c0       	rjmp	.+126    	; 0x3b10 <LCD_displayCharacter+0x78a>
	else if (__tmp > 65535)
    3a92:	6d 89       	ldd	r22, Y+21	; 0x15
    3a94:	7e 89       	ldd	r23, Y+22	; 0x16
    3a96:	8f 89       	ldd	r24, Y+23	; 0x17
    3a98:	98 8d       	ldd	r25, Y+24	; 0x18
    3a9a:	20 e0       	ldi	r18, 0x00	; 0
    3a9c:	3f ef       	ldi	r19, 0xFF	; 255
    3a9e:	4f e7       	ldi	r20, 0x7F	; 127
    3aa0:	57 e4       	ldi	r21, 0x47	; 71
    3aa2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3aa6:	18 16       	cp	r1, r24
    3aa8:	4c f5       	brge	.+82     	; 0x3afc <LCD_displayCharacter+0x776>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3aaa:	69 8d       	ldd	r22, Y+25	; 0x19
    3aac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3aae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ab0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ab2:	20 e0       	ldi	r18, 0x00	; 0
    3ab4:	30 e0       	ldi	r19, 0x00	; 0
    3ab6:	40 e2       	ldi	r20, 0x20	; 32
    3ab8:	51 e4       	ldi	r21, 0x41	; 65
    3aba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3abe:	dc 01       	movw	r26, r24
    3ac0:	cb 01       	movw	r24, r22
    3ac2:	bc 01       	movw	r22, r24
    3ac4:	cd 01       	movw	r24, r26
    3ac6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aca:	dc 01       	movw	r26, r24
    3acc:	cb 01       	movw	r24, r22
    3ace:	9c 8b       	std	Y+20, r25	; 0x14
    3ad0:	8b 8b       	std	Y+19, r24	; 0x13
    3ad2:	0f c0       	rjmp	.+30     	; 0x3af2 <LCD_displayCharacter+0x76c>
    3ad4:	88 ec       	ldi	r24, 0xC8	; 200
    3ad6:	90 e0       	ldi	r25, 0x00	; 0
    3ad8:	9a 8b       	std	Y+18, r25	; 0x12
    3ada:	89 8b       	std	Y+17, r24	; 0x11
    3adc:	89 89       	ldd	r24, Y+17	; 0x11
    3ade:	9a 89       	ldd	r25, Y+18	; 0x12
    3ae0:	01 97       	sbiw	r24, 0x01	; 1
    3ae2:	f1 f7       	brne	.-4      	; 0x3ae0 <LCD_displayCharacter+0x75a>
    3ae4:	9a 8b       	std	Y+18, r25	; 0x12
    3ae6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ae8:	8b 89       	ldd	r24, Y+19	; 0x13
    3aea:	9c 89       	ldd	r25, Y+20	; 0x14
    3aec:	01 97       	sbiw	r24, 0x01	; 1
    3aee:	9c 8b       	std	Y+20, r25	; 0x14
    3af0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3af2:	8b 89       	ldd	r24, Y+19	; 0x13
    3af4:	9c 89       	ldd	r25, Y+20	; 0x14
    3af6:	00 97       	sbiw	r24, 0x00	; 0
    3af8:	69 f7       	brne	.-38     	; 0x3ad4 <LCD_displayCharacter+0x74e>
    3afa:	14 c0       	rjmp	.+40     	; 0x3b24 <LCD_displayCharacter+0x79e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3afc:	6d 89       	ldd	r22, Y+21	; 0x15
    3afe:	7e 89       	ldd	r23, Y+22	; 0x16
    3b00:	8f 89       	ldd	r24, Y+23	; 0x17
    3b02:	98 8d       	ldd	r25, Y+24	; 0x18
    3b04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b08:	dc 01       	movw	r26, r24
    3b0a:	cb 01       	movw	r24, r22
    3b0c:	9c 8b       	std	Y+20, r25	; 0x14
    3b0e:	8b 8b       	std	Y+19, r24	; 0x13
    3b10:	8b 89       	ldd	r24, Y+19	; 0x13
    3b12:	9c 89       	ldd	r25, Y+20	; 0x14
    3b14:	98 8b       	std	Y+16, r25	; 0x10
    3b16:	8f 87       	std	Y+15, r24	; 0x0f
    3b18:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b1a:	98 89       	ldd	r25, Y+16	; 0x10
    3b1c:	01 97       	sbiw	r24, 0x01	; 1
    3b1e:	f1 f7       	brne	.-4      	; 0x3b1c <LCD_displayCharacter+0x796>
    3b20:	98 8b       	std	Y+16, r25	; 0x10
    3b22:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1); /* delay for processing Tdsw = 100ns */

		// Clear Enable Pin to '0'
		GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
    3b24:	80 e0       	ldi	r24, 0x00	; 0
    3b26:	62 e0       	ldi	r22, 0x02	; 2
    3b28:	40 e0       	ldi	r20, 0x00	; 0
    3b2a:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>
    3b2e:	80 e0       	ldi	r24, 0x00	; 0
    3b30:	90 e0       	ldi	r25, 0x00	; 0
    3b32:	a0 e8       	ldi	r26, 0x80	; 128
    3b34:	bf e3       	ldi	r27, 0x3F	; 63
    3b36:	8b 87       	std	Y+11, r24	; 0x0b
    3b38:	9c 87       	std	Y+12, r25	; 0x0c
    3b3a:	ad 87       	std	Y+13, r26	; 0x0d
    3b3c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b40:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b42:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b44:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b46:	20 e0       	ldi	r18, 0x00	; 0
    3b48:	30 e0       	ldi	r19, 0x00	; 0
    3b4a:	4a ef       	ldi	r20, 0xFA	; 250
    3b4c:	54 e4       	ldi	r21, 0x44	; 68
    3b4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b52:	dc 01       	movw	r26, r24
    3b54:	cb 01       	movw	r24, r22
    3b56:	8f 83       	std	Y+7, r24	; 0x07
    3b58:	98 87       	std	Y+8, r25	; 0x08
    3b5a:	a9 87       	std	Y+9, r26	; 0x09
    3b5c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b5e:	6f 81       	ldd	r22, Y+7	; 0x07
    3b60:	78 85       	ldd	r23, Y+8	; 0x08
    3b62:	89 85       	ldd	r24, Y+9	; 0x09
    3b64:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b66:	20 e0       	ldi	r18, 0x00	; 0
    3b68:	30 e0       	ldi	r19, 0x00	; 0
    3b6a:	40 e8       	ldi	r20, 0x80	; 128
    3b6c:	5f e3       	ldi	r21, 0x3F	; 63
    3b6e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3b72:	88 23       	and	r24, r24
    3b74:	2c f4       	brge	.+10     	; 0x3b80 <LCD_displayCharacter+0x7fa>
		__ticks = 1;
    3b76:	81 e0       	ldi	r24, 0x01	; 1
    3b78:	90 e0       	ldi	r25, 0x00	; 0
    3b7a:	9e 83       	std	Y+6, r25	; 0x06
    3b7c:	8d 83       	std	Y+5, r24	; 0x05
    3b7e:	3f c0       	rjmp	.+126    	; 0x3bfe <LCD_displayCharacter+0x878>
	else if (__tmp > 65535)
    3b80:	6f 81       	ldd	r22, Y+7	; 0x07
    3b82:	78 85       	ldd	r23, Y+8	; 0x08
    3b84:	89 85       	ldd	r24, Y+9	; 0x09
    3b86:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b88:	20 e0       	ldi	r18, 0x00	; 0
    3b8a:	3f ef       	ldi	r19, 0xFF	; 255
    3b8c:	4f e7       	ldi	r20, 0x7F	; 127
    3b8e:	57 e4       	ldi	r21, 0x47	; 71
    3b90:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3b94:	18 16       	cp	r1, r24
    3b96:	4c f5       	brge	.+82     	; 0x3bea <LCD_displayCharacter+0x864>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b98:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ba0:	20 e0       	ldi	r18, 0x00	; 0
    3ba2:	30 e0       	ldi	r19, 0x00	; 0
    3ba4:	40 e2       	ldi	r20, 0x20	; 32
    3ba6:	51 e4       	ldi	r21, 0x41	; 65
    3ba8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bac:	dc 01       	movw	r26, r24
    3bae:	cb 01       	movw	r24, r22
    3bb0:	bc 01       	movw	r22, r24
    3bb2:	cd 01       	movw	r24, r26
    3bb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bb8:	dc 01       	movw	r26, r24
    3bba:	cb 01       	movw	r24, r22
    3bbc:	9e 83       	std	Y+6, r25	; 0x06
    3bbe:	8d 83       	std	Y+5, r24	; 0x05
    3bc0:	0f c0       	rjmp	.+30     	; 0x3be0 <LCD_displayCharacter+0x85a>
    3bc2:	88 ec       	ldi	r24, 0xC8	; 200
    3bc4:	90 e0       	ldi	r25, 0x00	; 0
    3bc6:	9c 83       	std	Y+4, r25	; 0x04
    3bc8:	8b 83       	std	Y+3, r24	; 0x03
    3bca:	8b 81       	ldd	r24, Y+3	; 0x03
    3bcc:	9c 81       	ldd	r25, Y+4	; 0x04
    3bce:	01 97       	sbiw	r24, 0x01	; 1
    3bd0:	f1 f7       	brne	.-4      	; 0x3bce <LCD_displayCharacter+0x848>
    3bd2:	9c 83       	std	Y+4, r25	; 0x04
    3bd4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bd6:	8d 81       	ldd	r24, Y+5	; 0x05
    3bd8:	9e 81       	ldd	r25, Y+6	; 0x06
    3bda:	01 97       	sbiw	r24, 0x01	; 1
    3bdc:	9e 83       	std	Y+6, r25	; 0x06
    3bde:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3be0:	8d 81       	ldd	r24, Y+5	; 0x05
    3be2:	9e 81       	ldd	r25, Y+6	; 0x06
    3be4:	00 97       	sbiw	r24, 0x00	; 0
    3be6:	69 f7       	brne	.-38     	; 0x3bc2 <LCD_displayCharacter+0x83c>
    3be8:	14 c0       	rjmp	.+40     	; 0x3c12 <LCD_displayCharacter+0x88c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bea:	6f 81       	ldd	r22, Y+7	; 0x07
    3bec:	78 85       	ldd	r23, Y+8	; 0x08
    3bee:	89 85       	ldd	r24, Y+9	; 0x09
    3bf0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bf6:	dc 01       	movw	r26, r24
    3bf8:	cb 01       	movw	r24, r22
    3bfa:	9e 83       	std	Y+6, r25	; 0x06
    3bfc:	8d 83       	std	Y+5, r24	; 0x05
    3bfe:	8d 81       	ldd	r24, Y+5	; 0x05
    3c00:	9e 81       	ldd	r25, Y+6	; 0x06
    3c02:	9a 83       	std	Y+2, r25	; 0x02
    3c04:	89 83       	std	Y+1, r24	; 0x01
    3c06:	89 81       	ldd	r24, Y+1	; 0x01
    3c08:	9a 81       	ldd	r25, Y+2	; 0x02
    3c0a:	01 97       	sbiw	r24, 0x01	; 1
    3c0c:	f1 f7       	brne	.-4      	; 0x3c0a <LCD_displayCharacter+0x884>
    3c0e:	9a 83       	std	Y+2, r25	; 0x02
    3c10:	89 83       	std	Y+1, r24	; 0x01

		// Clear Enable Pin to '0'
		GPIO_writePin(LCD_INIT_PORT, LCD_ENABLE, LOGIC_LOW);
		_delay_ms(1); /* delay for processing Th = 13ns */
	}
}
    3c12:	cd 59       	subi	r28, 0x9D	; 157
    3c14:	df 4f       	sbci	r29, 0xFF	; 255
    3c16:	0f b6       	in	r0, 0x3f	; 63
    3c18:	f8 94       	cli
    3c1a:	de bf       	out	0x3e, r29	; 62
    3c1c:	0f be       	out	0x3f, r0	; 63
    3c1e:	cd bf       	out	0x3d, r28	; 61
    3c20:	cf 91       	pop	r28
    3c22:	df 91       	pop	r29
    3c24:	1f 91       	pop	r17
    3c26:	0f 91       	pop	r16
    3c28:	08 95       	ret

00003c2a <LCD_displayString>:


// Displays a string on the LCD
void LCD_displayString(const char *str) {
    3c2a:	df 93       	push	r29
    3c2c:	cf 93       	push	r28
    3c2e:	00 d0       	rcall	.+0      	; 0x3c30 <LCD_displayString+0x6>
    3c30:	0f 92       	push	r0
    3c32:	cd b7       	in	r28, 0x3d	; 61
    3c34:	de b7       	in	r29, 0x3e	; 62
    3c36:	9b 83       	std	Y+3, r25	; 0x03
    3c38:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3c3a:	19 82       	std	Y+1, r1	; 0x01
    3c3c:	0e c0       	rjmp	.+28     	; 0x3c5a <LCD_displayString+0x30>
	while(str[i] != '\0') {
		LCD_displayCharacter(str[i]);
    3c3e:	89 81       	ldd	r24, Y+1	; 0x01
    3c40:	28 2f       	mov	r18, r24
    3c42:	30 e0       	ldi	r19, 0x00	; 0
    3c44:	8a 81       	ldd	r24, Y+2	; 0x02
    3c46:	9b 81       	ldd	r25, Y+3	; 0x03
    3c48:	fc 01       	movw	r30, r24
    3c4a:	e2 0f       	add	r30, r18
    3c4c:	f3 1f       	adc	r31, r19
    3c4e:	80 81       	ld	r24, Z
    3c50:	0e 94 c3 19 	call	0x3386	; 0x3386 <LCD_displayCharacter>
		i++;
    3c54:	89 81       	ldd	r24, Y+1	; 0x01
    3c56:	8f 5f       	subi	r24, 0xFF	; 255
    3c58:	89 83       	std	Y+1, r24	; 0x01


// Displays a string on the LCD
void LCD_displayString(const char *str) {
	uint8 i = 0;
	while(str[i] != '\0') {
    3c5a:	89 81       	ldd	r24, Y+1	; 0x01
    3c5c:	28 2f       	mov	r18, r24
    3c5e:	30 e0       	ldi	r19, 0x00	; 0
    3c60:	8a 81       	ldd	r24, Y+2	; 0x02
    3c62:	9b 81       	ldd	r25, Y+3	; 0x03
    3c64:	fc 01       	movw	r30, r24
    3c66:	e2 0f       	add	r30, r18
    3c68:	f3 1f       	adc	r31, r19
    3c6a:	80 81       	ld	r24, Z
    3c6c:	88 23       	and	r24, r24
    3c6e:	39 f7       	brne	.-50     	; 0x3c3e <LCD_displayString+0x14>
	}
	/*
	for (int i = 0 ; i < strlen(str) ; i++) {
		LCD_displayCharacters(str[i]);
	}*/
}
    3c70:	0f 90       	pop	r0
    3c72:	0f 90       	pop	r0
    3c74:	0f 90       	pop	r0
    3c76:	cf 91       	pop	r28
    3c78:	df 91       	pop	r29
    3c7a:	08 95       	ret

00003c7c <LCD_moveCursor>:


// Chooses where the cursor would stand on the LCD to type from it
void LCD_moveCursor(uint8 row, uint8 col) {
    3c7c:	df 93       	push	r29
    3c7e:	cf 93       	push	r28
    3c80:	00 d0       	rcall	.+0      	; 0x3c82 <LCD_moveCursor+0x6>
    3c82:	00 d0       	rcall	.+0      	; 0x3c84 <LCD_moveCursor+0x8>
    3c84:	0f 92       	push	r0
    3c86:	cd b7       	in	r28, 0x3d	; 61
    3c88:	de b7       	in	r29, 0x3e	; 62
    3c8a:	8a 83       	std	Y+2, r24	; 0x02
    3c8c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 LCD_MEMORY_ADDRESS;

	// Calculate the required address in the LCD DDRAM checking
	// The location of the cursor originally on which line
	switch(row) {
    3c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c90:	28 2f       	mov	r18, r24
    3c92:	30 e0       	ldi	r19, 0x00	; 0
    3c94:	3d 83       	std	Y+5, r19	; 0x05
    3c96:	2c 83       	std	Y+4, r18	; 0x04
    3c98:	8c 81       	ldd	r24, Y+4	; 0x04
    3c9a:	9d 81       	ldd	r25, Y+5	; 0x05
    3c9c:	81 30       	cpi	r24, 0x01	; 1
    3c9e:	91 05       	cpc	r25, r1
    3ca0:	c1 f0       	breq	.+48     	; 0x3cd2 <LCD_moveCursor+0x56>
    3ca2:	2c 81       	ldd	r18, Y+4	; 0x04
    3ca4:	3d 81       	ldd	r19, Y+5	; 0x05
    3ca6:	22 30       	cpi	r18, 0x02	; 2
    3ca8:	31 05       	cpc	r19, r1
    3caa:	2c f4       	brge	.+10     	; 0x3cb6 <LCD_moveCursor+0x3a>
    3cac:	8c 81       	ldd	r24, Y+4	; 0x04
    3cae:	9d 81       	ldd	r25, Y+5	; 0x05
    3cb0:	00 97       	sbiw	r24, 0x00	; 0
    3cb2:	61 f0       	breq	.+24     	; 0x3ccc <LCD_moveCursor+0x50>
    3cb4:	19 c0       	rjmp	.+50     	; 0x3ce8 <LCD_moveCursor+0x6c>
    3cb6:	2c 81       	ldd	r18, Y+4	; 0x04
    3cb8:	3d 81       	ldd	r19, Y+5	; 0x05
    3cba:	22 30       	cpi	r18, 0x02	; 2
    3cbc:	31 05       	cpc	r19, r1
    3cbe:	69 f0       	breq	.+26     	; 0x3cda <LCD_moveCursor+0x5e>
    3cc0:	8c 81       	ldd	r24, Y+4	; 0x04
    3cc2:	9d 81       	ldd	r25, Y+5	; 0x05
    3cc4:	83 30       	cpi	r24, 0x03	; 3
    3cc6:	91 05       	cpc	r25, r1
    3cc8:	61 f0       	breq	.+24     	; 0x3ce2 <LCD_moveCursor+0x66>
    3cca:	0e c0       	rjmp	.+28     	; 0x3ce8 <LCD_moveCursor+0x6c>
		case 0:
			LCD_MEMORY_ADDRESS = col;
    3ccc:	8b 81       	ldd	r24, Y+3	; 0x03
    3cce:	89 83       	std	Y+1, r24	; 0x01
    3cd0:	0b c0       	rjmp	.+22     	; 0x3ce8 <LCD_moveCursor+0x6c>
				break;
		case 1:
			LCD_MEMORY_ADDRESS = col + 0x40;
    3cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    3cd4:	80 5c       	subi	r24, 0xC0	; 192
    3cd6:	89 83       	std	Y+1, r24	; 0x01
    3cd8:	07 c0       	rjmp	.+14     	; 0x3ce8 <LCD_moveCursor+0x6c>
				break;
		case 2:
			LCD_MEMORY_ADDRESS = col + 0x10;
    3cda:	8b 81       	ldd	r24, Y+3	; 0x03
    3cdc:	80 5f       	subi	r24, 0xF0	; 240
    3cde:	89 83       	std	Y+1, r24	; 0x01
    3ce0:	03 c0       	rjmp	.+6      	; 0x3ce8 <LCD_moveCursor+0x6c>
				break;
		case 3:
			LCD_MEMORY_ADDRESS = col + 0x50;
    3ce2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ce4:	80 5b       	subi	r24, 0xB0	; 176
    3ce6:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(LCD_MEMORY_ADDRESS | LCD_CURSOR_LOCATION);
    3ce8:	89 81       	ldd	r24, Y+1	; 0x01
    3cea:	80 68       	ori	r24, 0x80	; 128
    3cec:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <LCD_sendCommand>
}
    3cf0:	0f 90       	pop	r0
    3cf2:	0f 90       	pop	r0
    3cf4:	0f 90       	pop	r0
    3cf6:	0f 90       	pop	r0
    3cf8:	0f 90       	pop	r0
    3cfa:	cf 91       	pop	r28
    3cfc:	df 91       	pop	r29
    3cfe:	08 95       	ret

00003d00 <LCD_displayStringRowColumn>:


// Displays a string on the LCD at a chosen cursor and row
void LCD_displayStringRowColumn(uint8 row, uint8 col, const char *Str) {
    3d00:	df 93       	push	r29
    3d02:	cf 93       	push	r28
    3d04:	00 d0       	rcall	.+0      	; 0x3d06 <LCD_displayStringRowColumn+0x6>
    3d06:	00 d0       	rcall	.+0      	; 0x3d08 <LCD_displayStringRowColumn+0x8>
    3d08:	cd b7       	in	r28, 0x3d	; 61
    3d0a:	de b7       	in	r29, 0x3e	; 62
    3d0c:	89 83       	std	Y+1, r24	; 0x01
    3d0e:	6a 83       	std	Y+2, r22	; 0x02
    3d10:	5c 83       	std	Y+4, r21	; 0x04
    3d12:	4b 83       	std	Y+3, r20	; 0x03
	// Go to to the required LCD position
	LCD_moveCursor(row, col);
    3d14:	89 81       	ldd	r24, Y+1	; 0x01
    3d16:	6a 81       	ldd	r22, Y+2	; 0x02
    3d18:	0e 94 3e 1e 	call	0x3c7c	; 0x3c7c <LCD_moveCursor>

	// Display the string from the cursor
	LCD_displayString(Str);
    3d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d1e:	9c 81       	ldd	r25, Y+4	; 0x04
    3d20:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <LCD_displayString>
}
    3d24:	0f 90       	pop	r0
    3d26:	0f 90       	pop	r0
    3d28:	0f 90       	pop	r0
    3d2a:	0f 90       	pop	r0
    3d2c:	cf 91       	pop	r28
    3d2e:	df 91       	pop	r29
    3d30:	08 95       	ret

00003d32 <LCD_intgerToString>:

// LCD only understands ASCII, so this converts Int to a string
void LCD_intgerToString(int data) {
    3d32:	df 93       	push	r29
    3d34:	cf 93       	push	r28
    3d36:	cd b7       	in	r28, 0x3d	; 61
    3d38:	de b7       	in	r29, 0x3e	; 62
    3d3a:	62 97       	sbiw	r28, 0x12	; 18
    3d3c:	0f b6       	in	r0, 0x3f	; 63
    3d3e:	f8 94       	cli
    3d40:	de bf       	out	0x3e, r29	; 62
    3d42:	0f be       	out	0x3f, r0	; 63
    3d44:	cd bf       	out	0x3d, r28	; 61
    3d46:	9a 8b       	std	Y+18, r25	; 0x12
    3d48:	89 8b       	std	Y+17, r24	; 0x11
	// A string to hold the ASCII values
	char buffer[16];

	// Converts data to its ASCII
	itoa(data, buffer, 10);
    3d4a:	89 89       	ldd	r24, Y+17	; 0x11
    3d4c:	9a 89       	ldd	r25, Y+18	; 0x12
    3d4e:	9e 01       	movw	r18, r28
    3d50:	2f 5f       	subi	r18, 0xFF	; 255
    3d52:	3f 4f       	sbci	r19, 0xFF	; 255
    3d54:	b9 01       	movw	r22, r18
    3d56:	4a e0       	ldi	r20, 0x0A	; 10
    3d58:	50 e0       	ldi	r21, 0x00	; 0
    3d5a:	0e 94 06 21 	call	0x420c	; 0x420c <itoa>

	// Display string with the results in the buffer
	LCD_displayString(buffer);
    3d5e:	ce 01       	movw	r24, r28
    3d60:	01 96       	adiw	r24, 0x01	; 1
    3d62:	0e 94 15 1e 	call	0x3c2a	; 0x3c2a <LCD_displayString>
}
    3d66:	62 96       	adiw	r28, 0x12	; 18
    3d68:	0f b6       	in	r0, 0x3f	; 63
    3d6a:	f8 94       	cli
    3d6c:	de bf       	out	0x3e, r29	; 62
    3d6e:	0f be       	out	0x3f, r0	; 63
    3d70:	cd bf       	out	0x3d, r28	; 61
    3d72:	cf 91       	pop	r28
    3d74:	df 91       	pop	r29
    3d76:	08 95       	ret

00003d78 <LCD_clearScreen>:

// Clears the LCD from any garbage
void LCD_clearScreen(void) {
    3d78:	df 93       	push	r29
    3d7a:	cf 93       	push	r28
    3d7c:	cd b7       	in	r28, 0x3d	; 61
    3d7e:	de b7       	in	r29, 0x3e	; 62
	// Clears the LCD Display
	LCD_sendCommand(LCD_CLEAR_DISPLAY);
    3d80:	81 e0       	ldi	r24, 0x01	; 1
    3d82:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <LCD_sendCommand>
}
    3d86:	cf 91       	pop	r28
    3d88:	df 91       	pop	r29
    3d8a:	08 95       	ret

00003d8c <KEYPAD_Init>:
	#endif

#endif /* STD_KEYPAD */


void KEYPAD_Init(void) {
    3d8c:	df 93       	push	r29
    3d8e:	cf 93       	push	r28
    3d90:	cd b7       	in	r28, 0x3d	; 61
    3d92:	de b7       	in	r29, 0x3e	; 62
		/* Setup PORT and PINS for for KEYPAD Rows*/
		GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN, PIN_INPUT);
    3d94:	81 e0       	ldi	r24, 0x01	; 1
    3d96:	64 e0       	ldi	r22, 0x04	; 4
    3d98:	40 e0       	ldi	r20, 0x00	; 0
    3d9a:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN+1, PIN_INPUT);
    3d9e:	81 e0       	ldi	r24, 0x01	; 1
    3da0:	65 e0       	ldi	r22, 0x05	; 5
    3da2:	40 e0       	ldi	r20, 0x00	; 0
    3da4:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN+2, PIN_INPUT);
    3da8:	81 e0       	ldi	r24, 0x01	; 1
    3daa:	66 e0       	ldi	r22, 0x06	; 6
    3dac:	40 e0       	ldi	r20, 0x00	; 0
    3dae:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN+3, PIN_INPUT);
    3db2:	81 e0       	ldi	r24, 0x01	; 1
    3db4:	67 e0       	ldi	r22, 0x07	; 7
    3db6:	40 e0       	ldi	r20, 0x00	; 0
    3db8:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <GPIO_setupPinDirection>

		/* Setup PORT and PINS for for KEYPAD Columns*/
		GPIO_setupPinDirection(KEYPAD_COL_PORT, KEYPAD_FIRSTCOL_PIN, PIN_INPUT);
    3dbc:	81 e0       	ldi	r24, 0x01	; 1
    3dbe:	60 e0       	ldi	r22, 0x00	; 0
    3dc0:	40 e0       	ldi	r20, 0x00	; 0
    3dc2:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(KEYPAD_COL_PORT, KEYPAD_FIRSTCOL_PIN+1, PIN_INPUT);
    3dc6:	81 e0       	ldi	r24, 0x01	; 1
    3dc8:	61 e0       	ldi	r22, 0x01	; 1
    3dca:	40 e0       	ldi	r20, 0x00	; 0
    3dcc:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(KEYPAD_COL_PORT, KEYPAD_FIRSTCOL_PIN+2, PIN_INPUT);
    3dd0:	81 e0       	ldi	r24, 0x01	; 1
    3dd2:	62 e0       	ldi	r22, 0x02	; 2
    3dd4:	40 e0       	ldi	r20, 0x00	; 0
    3dd6:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <GPIO_setupPinDirection>

		#if(KEYPAD_COL_NUM == 4)
			GPIO_setupPinDirection(KEYPAD_COL_PORT, KEYPAD_FIRSTCOL_PIN+3, PIN_INPUT);
		#endif
}
    3dda:	cf 91       	pop	r28
    3ddc:	df 91       	pop	r29
    3dde:	08 95       	ret

00003de0 <KEYPAD_getPressedKey>:


uint8 KEYPAD_getPressedKey(void) {
    3de0:	df 93       	push	r29
    3de2:	cf 93       	push	r28
    3de4:	00 d0       	rcall	.+0      	; 0x3de6 <KEYPAD_getPressedKey+0x6>
    3de6:	cd b7       	in	r28, 0x3d	; 61
    3de8:	de b7       	in	r29, 0x3e	; 62
	uint8 row, col;
	while(1) {
			for (row = 0 ; row < KEYPAD_ROW_NUM ; row++) {
    3dea:	1a 82       	std	Y+2, r1	; 0x02
    3dec:	3a c0       	rjmp	.+116    	; 0x3e62 <KEYPAD_getPressedKey+0x82>
				// I set the pin by '1' for the row, and will iterate
				GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, PIN_OUTPUT);
    3dee:	8a 81       	ldd	r24, Y+2	; 0x02
    3df0:	98 2f       	mov	r25, r24
    3df2:	9c 5f       	subi	r25, 0xFC	; 252
    3df4:	81 e0       	ldi	r24, 0x01	; 1
    3df6:	69 2f       	mov	r22, r25
    3df8:	41 e0       	ldi	r20, 0x01	; 1
    3dfa:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <GPIO_setupPinDirection>

				/* Set/Clear the row output pin */
				GPIO_writePin(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, KEYPAD_BUTTON_PRESSED);
    3dfe:	8a 81       	ldd	r24, Y+2	; 0x02
    3e00:	98 2f       	mov	r25, r24
    3e02:	9c 5f       	subi	r25, 0xFC	; 252
    3e04:	81 e0       	ldi	r24, 0x01	; 1
    3e06:	69 2f       	mov	r22, r25
    3e08:	40 e0       	ldi	r20, 0x00	; 0
    3e0a:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <GPIO_writePin>

				for (col = 0 ; col < KEYPAD_COL_NUM ; col++) {
    3e0e:	19 82       	std	Y+1, r1	; 0x01
    3e10:	1a c0       	rjmp	.+52     	; 0x3e46 <KEYPAD_getPressedKey+0x66>
					/* Check if the switch is pressed in this column */
					if(GPIO_readPin(KEYPAD_COL_PORT,KEYPAD_FIRSTCOL_PIN + col) == KEYPAD_BUTTON_PRESSED) {
    3e12:	81 e0       	ldi	r24, 0x01	; 1
    3e14:	69 81       	ldd	r22, Y+1	; 0x01
    3e16:	0e 94 08 10 	call	0x2010	; 0x2010 <GPIO_readPin>
    3e1a:	88 23       	and	r24, r24
    3e1c:	89 f4       	brne	.+34     	; 0x3e40 <KEYPAD_getPressedKey+0x60>
						#if (KEYPAD_COL_NUM == 3)
							#ifdef STD_KEYPAD
								return ( (row * KEYPAD_COL_NUM) + col + 1);
    3e1e:	8a 81       	ldd	r24, Y+2	; 0x02
    3e20:	28 2f       	mov	r18, r24
    3e22:	30 e0       	ldi	r19, 0x00	; 0
    3e24:	c9 01       	movw	r24, r18
    3e26:	88 0f       	add	r24, r24
    3e28:	99 1f       	adc	r25, r25
    3e2a:	82 0f       	add	r24, r18
    3e2c:	93 1f       	adc	r25, r19
    3e2e:	98 2f       	mov	r25, r24
    3e30:	89 81       	ldd	r24, Y+1	; 0x01
    3e32:	89 0f       	add	r24, r25
    3e34:	8f 5f       	subi	r24, 0xFF	; 255
					}
				}
				GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, PIN_INPUT);
			}
		}
}
    3e36:	0f 90       	pop	r0
    3e38:	0f 90       	pop	r0
    3e3a:	cf 91       	pop	r28
    3e3c:	df 91       	pop	r29
    3e3e:	08 95       	ret
				GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, PIN_OUTPUT);

				/* Set/Clear the row output pin */
				GPIO_writePin(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, KEYPAD_BUTTON_PRESSED);

				for (col = 0 ; col < KEYPAD_COL_NUM ; col++) {
    3e40:	89 81       	ldd	r24, Y+1	; 0x01
    3e42:	8f 5f       	subi	r24, 0xFF	; 255
    3e44:	89 83       	std	Y+1, r24	; 0x01
    3e46:	89 81       	ldd	r24, Y+1	; 0x01
    3e48:	83 30       	cpi	r24, 0x03	; 3
    3e4a:	18 f3       	brcs	.-58     	; 0x3e12 <KEYPAD_getPressedKey+0x32>
								return KEYPAD_4x4_adjustKeyNumber( (row * KEYPAD_COL_NUM) + col + 1);
							#endif
						#endif
					}
				}
				GPIO_setupPinDirection(KEYPAD_ROW_PORT, KEYPAD_FIRSTROW_PIN + row, PIN_INPUT);
    3e4c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e4e:	98 2f       	mov	r25, r24
    3e50:	9c 5f       	subi	r25, 0xFC	; 252
    3e52:	81 e0       	ldi	r24, 0x01	; 1
    3e54:	69 2f       	mov	r22, r25
    3e56:	40 e0       	ldi	r20, 0x00	; 0
    3e58:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <GPIO_setupPinDirection>


uint8 KEYPAD_getPressedKey(void) {
	uint8 row, col;
	while(1) {
			for (row = 0 ; row < KEYPAD_ROW_NUM ; row++) {
    3e5c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e5e:	8f 5f       	subi	r24, 0xFF	; 255
    3e60:	8a 83       	std	Y+2, r24	; 0x02
    3e62:	8a 81       	ldd	r24, Y+2	; 0x02
    3e64:	84 30       	cpi	r24, 0x04	; 4
    3e66:	18 f2       	brcs	.-122    	; 0x3dee <KEYPAD_getPressedKey+0xe>
    3e68:	c0 cf       	rjmp	.-128    	; 0x3dea <KEYPAD_getPressedKey+0xa>

00003e6a <EEPROM_writeByte>:
#include "avr/io.h" /* To use the IO Ports Registers */
#include <util/delay.h>



uint8 EEPROM_writeByte(uint16 u16Address, uint8 u8Data) {
    3e6a:	df 93       	push	r29
    3e6c:	cf 93       	push	r28
    3e6e:	00 d0       	rcall	.+0      	; 0x3e70 <EEPROM_writeByte+0x6>
    3e70:	00 d0       	rcall	.+0      	; 0x3e72 <EEPROM_writeByte+0x8>
    3e72:	0f 92       	push	r0
    3e74:	cd b7       	in	r28, 0x3d	; 61
    3e76:	de b7       	in	r29, 0x3e	; 62
    3e78:	9b 83       	std	Y+3, r25	; 0x03
    3e7a:	8a 83       	std	Y+2, r24	; 0x02
    3e7c:	6c 83       	std	Y+4, r22	; 0x04
	I2C_start();
    3e7e:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <I2C_start>
	if (I2C_getStatus() != I2C_START) {
    3e82:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <I2C_getStatus>
    3e86:	88 30       	cpi	r24, 0x08	; 8
    3e88:	11 f0       	breq	.+4      	; 0x3e8e <EEPROM_writeByte+0x24>
	        return ERROR;
    3e8a:	1d 82       	std	Y+5, r1	; 0x05
    3e8c:	2a c0       	rjmp	.+84     	; 0x3ee2 <EEPROM_writeByte+0x78>
	 * EEPROM address is 11 bits, the 3 MSB is the device address
	 * The other bits are the word address
	 * but the device address is again shifted to another 8 bit frame:
	 * the 4 MSB is 1010, then the Device Address, then R/W
	 */
	uint8 EEPROM_ADDRESS_EQN = (uint8) (0xA0 | ( (u16Address & 0x0700) >> 7) );
    3e8e:	8a 81       	ldd	r24, Y+2	; 0x02
    3e90:	9b 81       	ldd	r25, Y+3	; 0x03
    3e92:	80 70       	andi	r24, 0x00	; 0
    3e94:	97 70       	andi	r25, 0x07	; 7
    3e96:	88 0f       	add	r24, r24
    3e98:	89 2f       	mov	r24, r25
    3e9a:	88 1f       	adc	r24, r24
    3e9c:	99 0b       	sbc	r25, r25
    3e9e:	91 95       	neg	r25
    3ea0:	80 6a       	ori	r24, 0xA0	; 160
    3ea2:	89 83       	std	Y+1, r24	; 0x01
	// 0xA0 = 1010, 0x0700 = 0b111 0000 000
	I2C_writeByte(EEPROM_ADDRESS_EQN);
    3ea4:	89 81       	ldd	r24, Y+1	; 0x01
    3ea6:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <I2C_writeByte>
	if (I2C_getStatus() != I2C_MT_SLA_W_ACK) {
    3eaa:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <I2C_getStatus>
    3eae:	88 31       	cpi	r24, 0x18	; 24
    3eb0:	11 f0       	breq	.+4      	; 0x3eb6 <EEPROM_writeByte+0x4c>
		return ERROR;
    3eb2:	1d 82       	std	Y+5, r1	; 0x05
    3eb4:	16 c0       	rjmp	.+44     	; 0x3ee2 <EEPROM_writeByte+0x78>
	}

	I2C_writeByte((uint8) (u16Address));
    3eb6:	8a 81       	ldd	r24, Y+2	; 0x02
    3eb8:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <I2C_writeByte>
	if (I2C_getStatus() != I2C_MT_DATA_ACK) {
    3ebc:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <I2C_getStatus>
    3ec0:	88 32       	cpi	r24, 0x28	; 40
    3ec2:	11 f0       	breq	.+4      	; 0x3ec8 <EEPROM_writeByte+0x5e>
		return ERROR;
    3ec4:	1d 82       	std	Y+5, r1	; 0x05
    3ec6:	0d c0       	rjmp	.+26     	; 0x3ee2 <EEPROM_writeByte+0x78>
	}

	I2C_writeByte(u8Data);
    3ec8:	8c 81       	ldd	r24, Y+4	; 0x04
    3eca:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <I2C_writeByte>
	if (I2C_getStatus() != I2C_MT_DATA_ACK) {
    3ece:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <I2C_getStatus>
    3ed2:	88 32       	cpi	r24, 0x28	; 40
    3ed4:	11 f0       	breq	.+4      	; 0x3eda <EEPROM_writeByte+0x70>
		return ERROR;
    3ed6:	1d 82       	std	Y+5, r1	; 0x05
    3ed8:	04 c0       	rjmp	.+8      	; 0x3ee2 <EEPROM_writeByte+0x78>
	}

	I2C_stop();
    3eda:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <I2C_stop>

	return SUCCESS;
    3ede:	81 e0       	ldi	r24, 0x01	; 1
    3ee0:	8d 83       	std	Y+5, r24	; 0x05
    3ee2:	8d 81       	ldd	r24, Y+5	; 0x05
}
    3ee4:	0f 90       	pop	r0
    3ee6:	0f 90       	pop	r0
    3ee8:	0f 90       	pop	r0
    3eea:	0f 90       	pop	r0
    3eec:	0f 90       	pop	r0
    3eee:	cf 91       	pop	r28
    3ef0:	df 91       	pop	r29
    3ef2:	08 95       	ret

00003ef4 <EEPROM_readByte>:


uint8 EEPROM_readByte(uint16 u16Address, uint8 *u8Data) {
    3ef4:	df 93       	push	r29
    3ef6:	cf 93       	push	r28
    3ef8:	00 d0       	rcall	.+0      	; 0x3efa <EEPROM_readByte+0x6>
    3efa:	00 d0       	rcall	.+0      	; 0x3efc <EEPROM_readByte+0x8>
    3efc:	00 d0       	rcall	.+0      	; 0x3efe <EEPROM_readByte+0xa>
    3efe:	cd b7       	in	r28, 0x3d	; 61
    3f00:	de b7       	in	r29, 0x3e	; 62
    3f02:	9b 83       	std	Y+3, r25	; 0x03
    3f04:	8a 83       	std	Y+2, r24	; 0x02
    3f06:	7d 83       	std	Y+5, r23	; 0x05
    3f08:	6c 83       	std	Y+4, r22	; 0x04
	I2C_start();
    3f0a:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <I2C_start>
	if (I2C_getStatus() != I2C_START) {
    3f0e:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <I2C_getStatus>
    3f12:	88 30       	cpi	r24, 0x08	; 8
    3f14:	11 f0       	breq	.+4      	; 0x3f1a <EEPROM_readByte+0x26>
			return ERROR;
    3f16:	1e 82       	std	Y+6, r1	; 0x06
    3f18:	3e c0       	rjmp	.+124    	; 0x3f96 <EEPROM_readByte+0xa2>
	 * EEPROM address is 11 bits, the 3 MSB is the device address
	 * The other bits are the word address
	 * but the device address is again shifted to another 8 bit frame:
	 * the 4 MSB is 1010, then the Device Address, then R/W
	 */
	uint8 EEPROM_ADDRESS_EQN = (uint8) (0xA0 | ( (u16Address & 0x0700) >> 7) );
    3f1a:	8a 81       	ldd	r24, Y+2	; 0x02
    3f1c:	9b 81       	ldd	r25, Y+3	; 0x03
    3f1e:	80 70       	andi	r24, 0x00	; 0
    3f20:	97 70       	andi	r25, 0x07	; 7
    3f22:	88 0f       	add	r24, r24
    3f24:	89 2f       	mov	r24, r25
    3f26:	88 1f       	adc	r24, r24
    3f28:	99 0b       	sbc	r25, r25
    3f2a:	91 95       	neg	r25
    3f2c:	80 6a       	ori	r24, 0xA0	; 160
    3f2e:	89 83       	std	Y+1, r24	; 0x01
	// 0xA0 = 1010, 0x0700 = 0b111 0000 000
	I2C_writeByte(EEPROM_ADDRESS_EQN);
    3f30:	89 81       	ldd	r24, Y+1	; 0x01
    3f32:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <I2C_writeByte>
	if (I2C_getStatus() != I2C_MT_SLA_W_ACK) {
    3f36:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <I2C_getStatus>
    3f3a:	88 31       	cpi	r24, 0x18	; 24
    3f3c:	11 f0       	breq	.+4      	; 0x3f42 <EEPROM_readByte+0x4e>
		return ERROR;
    3f3e:	1e 82       	std	Y+6, r1	; 0x06
    3f40:	2a c0       	rjmp	.+84     	; 0x3f96 <EEPROM_readByte+0xa2>
	}

	I2C_writeByte((uint8) (u16Address));
    3f42:	8a 81       	ldd	r24, Y+2	; 0x02
    3f44:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <I2C_writeByte>
	if (I2C_getStatus() != I2C_MT_DATA_ACK) {
    3f48:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <I2C_getStatus>
    3f4c:	88 32       	cpi	r24, 0x28	; 40
    3f4e:	11 f0       	breq	.+4      	; 0x3f54 <EEPROM_readByte+0x60>
		return ERROR;
    3f50:	1e 82       	std	Y+6, r1	; 0x06
    3f52:	21 c0       	rjmp	.+66     	; 0x3f96 <EEPROM_readByte+0xa2>
	}

	I2C_start();
    3f54:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <I2C_start>
	if (I2C_getStatus() != I2C_REP_START) {
    3f58:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <I2C_getStatus>
    3f5c:	80 31       	cpi	r24, 0x10	; 16
    3f5e:	11 f0       	breq	.+4      	; 0x3f64 <EEPROM_readByte+0x70>
		return ERROR;
    3f60:	1e 82       	std	Y+6, r1	; 0x06
    3f62:	19 c0       	rjmp	.+50     	; 0x3f96 <EEPROM_readByte+0xa2>
	}

	I2C_writeByte(EEPROM_ADDRESS_EQN | 1); // For Reading
    3f64:	89 81       	ldd	r24, Y+1	; 0x01
    3f66:	81 60       	ori	r24, 0x01	; 1
    3f68:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <I2C_writeByte>
	if (I2C_getStatus() != I2C_MT_SLA_R_ACK) {
    3f6c:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <I2C_getStatus>
    3f70:	80 34       	cpi	r24, 0x40	; 64
    3f72:	11 f0       	breq	.+4      	; 0x3f78 <EEPROM_readByte+0x84>
		return ERROR;
    3f74:	1e 82       	std	Y+6, r1	; 0x06
    3f76:	0f c0       	rjmp	.+30     	; 0x3f96 <EEPROM_readByte+0xa2>
	}

	*u8Data = I2C_readByteWithNACK();
    3f78:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <I2C_readByteWithNACK>
    3f7c:	ec 81       	ldd	r30, Y+4	; 0x04
    3f7e:	fd 81       	ldd	r31, Y+5	; 0x05
    3f80:	80 83       	st	Z, r24
	if (I2C_getStatus() != I2C_MR_DATA_NACK) {
    3f82:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <I2C_getStatus>
    3f86:	88 35       	cpi	r24, 0x58	; 88
    3f88:	11 f0       	breq	.+4      	; 0x3f8e <EEPROM_readByte+0x9a>
		return ERROR;
    3f8a:	1e 82       	std	Y+6, r1	; 0x06
    3f8c:	04 c0       	rjmp	.+8      	; 0x3f96 <EEPROM_readByte+0xa2>
	}

	I2C_stop();
    3f8e:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <I2C_stop>

	return SUCCESS;
    3f92:	81 e0       	ldi	r24, 0x01	; 1
    3f94:	8e 83       	std	Y+6, r24	; 0x06
    3f96:	8e 81       	ldd	r24, Y+6	; 0x06
}
    3f98:	26 96       	adiw	r28, 0x06	; 6
    3f9a:	0f b6       	in	r0, 0x3f	; 63
    3f9c:	f8 94       	cli
    3f9e:	de bf       	out	0x3e, r29	; 62
    3fa0:	0f be       	out	0x3f, r0	; 63
    3fa2:	cd bf       	out	0x3d, r28	; 61
    3fa4:	cf 91       	pop	r28
    3fa6:	df 91       	pop	r29
    3fa8:	08 95       	ret

00003faa <BUTTON_Init>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
BUTTON_Error_t BUTTON_Init(uint8 port_num, uint8 pin_num) {
    3faa:	df 93       	push	r29
    3fac:	cf 93       	push	r28
    3fae:	00 d0       	rcall	.+0      	; 0x3fb0 <BUTTON_Init+0x6>
    3fb0:	0f 92       	push	r0
    3fb2:	cd b7       	in	r28, 0x3d	; 61
    3fb4:	de b7       	in	r29, 0x3e	; 62
    3fb6:	8a 83       	std	Y+2, r24	; 0x02
    3fb8:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	uint8_t BUTTON_Driver_Checker = NULL;
    3fba:	19 82       	std	Y+1, r1	; 0x01
	if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    3fbc:	8b 81       	ldd	r24, Y+3	; 0x03
    3fbe:	88 30       	cpi	r24, 0x08	; 8
    3fc0:	18 f0       	brcs	.+6      	; 0x3fc8 <BUTTON_Init+0x1e>
		BUTTON_Driver_Checker = BUTTON_WRONG_PIN_NUMBER;
    3fc2:	81 e0       	ldi	r24, 0x01	; 1
    3fc4:	89 83       	std	Y+1, r24	; 0x01
    3fc6:	0c c0       	rjmp	.+24     	; 0x3fe0 <BUTTON_Init+0x36>
	}
	else if((port_num >= NUM_OF_PORTS)) {
    3fc8:	8a 81       	ldd	r24, Y+2	; 0x02
    3fca:	84 30       	cpi	r24, 0x04	; 4
    3fcc:	18 f0       	brcs	.+6      	; 0x3fd4 <BUTTON_Init+0x2a>
		BUTTON_Driver_Checker = BUTTON_WRONG_PORT_NUMBER;
    3fce:	82 e0       	ldi	r24, 0x02	; 2
    3fd0:	89 83       	std	Y+1, r24	; 0x01
    3fd2:	06 c0       	rjmp	.+12     	; 0x3fe0 <BUTTON_Init+0x36>
	}
	else {
		/* Setup the pin direction as required */
		GPIO_setupPinDirection(port_num, pin_num, PIN_INPUT);
    3fd4:	8a 81       	ldd	r24, Y+2	; 0x02
    3fd6:	6b 81       	ldd	r22, Y+3	; 0x03
    3fd8:	40 e0       	ldi	r20, 0x00	; 0
    3fda:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <GPIO_setupPinDirection>
		BUTTON_Driver_Checker = BUTTON_OK;
    3fde:	19 82       	std	Y+1, r1	; 0x01
	}
	return BUTTON_Driver_Checker;
    3fe0:	89 81       	ldd	r24, Y+1	; 0x01
}
    3fe2:	0f 90       	pop	r0
    3fe4:	0f 90       	pop	r0
    3fe6:	0f 90       	pop	r0
    3fe8:	cf 91       	pop	r28
    3fea:	df 91       	pop	r29
    3fec:	08 95       	ret

00003fee <BUTTON_Read>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
uint8 BUTTON_Read(uint8 port_num, uint8 pin_num) {
    3fee:	df 93       	push	r29
    3ff0:	cf 93       	push	r28
    3ff2:	00 d0       	rcall	.+0      	; 0x3ff4 <BUTTON_Read+0x6>
    3ff4:	0f 92       	push	r0
    3ff6:	cd b7       	in	r28, 0x3d	; 61
    3ff8:	de b7       	in	r29, 0x3e	; 62
    3ffa:	8a 83       	std	Y+2, r24	; 0x02
    3ffc:	6b 83       	std	Y+3, r22	; 0x03

	uint8_t BUTTON_Driver_Checker = NULL;
    3ffe:	19 82       	std	Y+1, r1	; 0x01
		if((pin_num >= NUM_OF_PINS_PER_PORT)) {
    4000:	8b 81       	ldd	r24, Y+3	; 0x03
    4002:	88 30       	cpi	r24, 0x08	; 8
    4004:	18 f0       	brcs	.+6      	; 0x400c <BUTTON_Read+0x1e>
			BUTTON_Driver_Checker = BUTTON_WRONG_PIN_NUMBER;
    4006:	81 e0       	ldi	r24, 0x01	; 1
    4008:	89 83       	std	Y+1, r24	; 0x01
    400a:	0b c0       	rjmp	.+22     	; 0x4022 <BUTTON_Read+0x34>
		}
		else if((port_num >= NUM_OF_PORTS)) {
    400c:	8a 81       	ldd	r24, Y+2	; 0x02
    400e:	84 30       	cpi	r24, 0x04	; 4
    4010:	18 f0       	brcs	.+6      	; 0x4018 <BUTTON_Read+0x2a>
			BUTTON_Driver_Checker = BUTTON_WRONG_PORT_NUMBER;
    4012:	82 e0       	ldi	r24, 0x02	; 2
    4014:	89 83       	std	Y+1, r24	; 0x01
    4016:	05 c0       	rjmp	.+10     	; 0x4022 <BUTTON_Read+0x34>
		}
		else {
			/* Setup the pin direction as required */
			GPIO_readPin(port_num, pin_num);
    4018:	8a 81       	ldd	r24, Y+2	; 0x02
    401a:	6b 81       	ldd	r22, Y+3	; 0x03
    401c:	0e 94 08 10 	call	0x2010	; 0x2010 <GPIO_readPin>
			BUTTON_Driver_Checker = BUTTON_OK;
    4020:	19 82       	std	Y+1, r1	; 0x01
		}
		return GPIO_readPin(port_num, pin_num);
    4022:	8a 81       	ldd	r24, Y+2	; 0x02
    4024:	6b 81       	ldd	r22, Y+3	; 0x03
    4026:	0e 94 08 10 	call	0x2010	; 0x2010 <GPIO_readPin>
}
    402a:	0f 90       	pop	r0
    402c:	0f 90       	pop	r0
    402e:	0f 90       	pop	r0
    4030:	cf 91       	pop	r28
    4032:	df 91       	pop	r29
    4034:	08 95       	ret

00004036 <__vector_10>:
		compareMatches = 0;
	}
}
*/

ISR(TIMER0_COMP_vect) {
    4036:	1f 92       	push	r1
    4038:	0f 92       	push	r0
    403a:	0f b6       	in	r0, 0x3f	; 63
    403c:	0f 92       	push	r0
    403e:	11 24       	eor	r1, r1
    4040:	2f 93       	push	r18
    4042:	3f 93       	push	r19
    4044:	4f 93       	push	r20
    4046:	5f 93       	push	r21
    4048:	6f 93       	push	r22
    404a:	7f 93       	push	r23
    404c:	8f 93       	push	r24
    404e:	9f 93       	push	r25
    4050:	af 93       	push	r26
    4052:	bf 93       	push	r27
    4054:	ef 93       	push	r30
    4056:	ff 93       	push	r31
    4058:	df 93       	push	r29
    405a:	cf 93       	push	r28
    405c:	cd b7       	in	r28, 0x3d	; 61
    405e:	de b7       	in	r29, 0x3e	; 62
	LED_Toggle(PORT_C, PIN_0
    4060:	82 e0       	ldi	r24, 0x02	; 2
    4062:	60 e0       	ldi	r22, 0x00	; 0
    4064:	0e 94 9e 14 	call	0x293c	; 0x293c <LED_Toggle>
			);
	if(OCR0 ==OCRValue) {
    4068:	ec e5       	ldi	r30, 0x5C	; 92
    406a:	f0 e0       	ldi	r31, 0x00	; 0
    406c:	90 81       	ld	r25, Z
    406e:	80 91 6b 01 	lds	r24, 0x016B
    4072:	98 17       	cp	r25, r24
    4074:	21 f4       	brne	.+8      	; 0x407e <__vector_10+0x48>
		LED_Toggle(PORT_C, PIN_1);
    4076:	82 e0       	ldi	r24, 0x02	; 2
    4078:	61 e0       	ldi	r22, 0x01	; 1
    407a:	0e 94 9e 14 	call	0x293c	; 0x293c <LED_Toggle>
	}
}
    407e:	cf 91       	pop	r28
    4080:	df 91       	pop	r29
    4082:	ff 91       	pop	r31
    4084:	ef 91       	pop	r30
    4086:	bf 91       	pop	r27
    4088:	af 91       	pop	r26
    408a:	9f 91       	pop	r25
    408c:	8f 91       	pop	r24
    408e:	7f 91       	pop	r23
    4090:	6f 91       	pop	r22
    4092:	5f 91       	pop	r21
    4094:	4f 91       	pop	r20
    4096:	3f 91       	pop	r19
    4098:	2f 91       	pop	r18
    409a:	0f 90       	pop	r0
    409c:	0f be       	out	0x3f, r0	; 63
    409e:	0f 90       	pop	r0
    40a0:	1f 90       	pop	r1
    40a2:	18 95       	reti

000040a4 <main>:

int main(void) {
    40a4:	df 93       	push	r29
    40a6:	cf 93       	push	r28
    40a8:	cd b7       	in	r28, 0x3d	; 61
    40aa:	de b7       	in	r29, 0x3e	; 62
    40ac:	2c 97       	sbiw	r28, 0x0c	; 12
    40ae:	0f b6       	in	r0, 0x3f	; 63
    40b0:	f8 94       	cli
    40b2:	de bf       	out	0x3e, r29	; 62
    40b4:	0f be       	out	0x3f, r0	; 63
    40b6:	cd bf       	out	0x3d, r28	; 61

	float requiredFrequency1		= 		10		; 	// Required Frequency in KHz
    40b8:	80 e0       	ldi	r24, 0x00	; 0
    40ba:	90 e0       	ldi	r25, 0x00	; 0
    40bc:	a0 e2       	ldi	r26, 0x20	; 32
    40be:	b1 e4       	ldi	r27, 0x41	; 65
    40c0:	89 87       	std	Y+9, r24	; 0x09
    40c2:	9a 87       	std	Y+10, r25	; 0x0a
    40c4:	ab 87       	std	Y+11, r26	; 0x0b
    40c6:	bc 87       	std	Y+12, r27	; 0x0c
	float requiredFrequency2 	= 		5		; 	// Required Frequency in KHz
    40c8:	80 e0       	ldi	r24, 0x00	; 0
    40ca:	90 e0       	ldi	r25, 0x00	; 0
    40cc:	a0 ea       	ldi	r26, 0xA0	; 160
    40ce:	b0 e4       	ldi	r27, 0x40	; 64
    40d0:	8d 83       	std	Y+5, r24	; 0x05
    40d2:	9e 83       	std	Y+6, r25	; 0x06
    40d4:	af 83       	std	Y+7, r26	; 0x07
    40d6:	b8 87       	std	Y+8, r27	; 0x08
	float requiredFrequency3 	= 		2.5	; 	// Required Frequency in KHz
    40d8:	80 e0       	ldi	r24, 0x00	; 0
    40da:	90 e0       	ldi	r25, 0x00	; 0
    40dc:	a0 e2       	ldi	r26, 0x20	; 32
    40de:	b0 e4       	ldi	r27, 0x40	; 64
    40e0:	89 83       	std	Y+1, r24	; 0x01
    40e2:	9a 83       	std	Y+2, r25	; 0x02
    40e4:	ab 83       	std	Y+3, r26	; 0x03
    40e6:	bc 83       	std	Y+4, r27	; 0x04

	GPIO_setupPinDirection(PORT_C, PIN_0, PIN_OUTPUT);
    40e8:	82 e0       	ldi	r24, 0x02	; 2
    40ea:	60 e0       	ldi	r22, 0x00	; 0
    40ec:	41 e0       	ldi	r20, 0x01	; 1
    40ee:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORT_C, PIN_1, PIN_OUTPUT);
    40f2:	82 e0       	ldi	r24, 0x02	; 2
    40f4:	61 e0       	ldi	r22, 0x01	; 1
    40f6:	41 e0       	ldi	r20, 0x01	; 1
    40f8:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORT_C, PIN_2, PIN_OUTPUT);
    40fc:	82 e0       	ldi	r24, 0x02	; 2
    40fe:	62 e0       	ldi	r22, 0x02	; 2
    4100:	41 e0       	ldi	r20, 0x01	; 1
    4102:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <GPIO_setupPinDirection>

	//Timer_setCTCMode_interruptFreq(requiredFrequency1);

	OCRValue = Timer_setCTCMode_interruptFreq(requiredFrequency1);
    4106:	89 85       	ldd	r24, Y+9	; 0x09
    4108:	9a 85       	ldd	r25, Y+10	; 0x0a
    410a:	ab 85       	ldd	r26, Y+11	; 0x0b
    410c:	bc 85       	ldd	r27, Y+12	; 0x0c
    410e:	bc 01       	movw	r22, r24
    4110:	cd 01       	movw	r24, r26
    4112:	0e 94 3e 0b 	call	0x167c	; 0x167c <Timer_setCTCMode_interruptFreq>
    4116:	80 93 6b 01 	sts	0x016B, r24
    411a:	ff cf       	rjmp	.-2      	; 0x411a <main+0x76>

0000411c <__mulsi3>:
    411c:	62 9f       	mul	r22, r18
    411e:	d0 01       	movw	r26, r0
    4120:	73 9f       	mul	r23, r19
    4122:	f0 01       	movw	r30, r0
    4124:	82 9f       	mul	r24, r18
    4126:	e0 0d       	add	r30, r0
    4128:	f1 1d       	adc	r31, r1
    412a:	64 9f       	mul	r22, r20
    412c:	e0 0d       	add	r30, r0
    412e:	f1 1d       	adc	r31, r1
    4130:	92 9f       	mul	r25, r18
    4132:	f0 0d       	add	r31, r0
    4134:	83 9f       	mul	r24, r19
    4136:	f0 0d       	add	r31, r0
    4138:	74 9f       	mul	r23, r20
    413a:	f0 0d       	add	r31, r0
    413c:	65 9f       	mul	r22, r21
    413e:	f0 0d       	add	r31, r0
    4140:	99 27       	eor	r25, r25
    4142:	72 9f       	mul	r23, r18
    4144:	b0 0d       	add	r27, r0
    4146:	e1 1d       	adc	r30, r1
    4148:	f9 1f       	adc	r31, r25
    414a:	63 9f       	mul	r22, r19
    414c:	b0 0d       	add	r27, r0
    414e:	e1 1d       	adc	r30, r1
    4150:	f9 1f       	adc	r31, r25
    4152:	bd 01       	movw	r22, r26
    4154:	cf 01       	movw	r24, r30
    4156:	11 24       	eor	r1, r1
    4158:	08 95       	ret

0000415a <__udivmodsi4>:
    415a:	a1 e2       	ldi	r26, 0x21	; 33
    415c:	1a 2e       	mov	r1, r26
    415e:	aa 1b       	sub	r26, r26
    4160:	bb 1b       	sub	r27, r27
    4162:	fd 01       	movw	r30, r26
    4164:	0d c0       	rjmp	.+26     	; 0x4180 <__udivmodsi4_ep>

00004166 <__udivmodsi4_loop>:
    4166:	aa 1f       	adc	r26, r26
    4168:	bb 1f       	adc	r27, r27
    416a:	ee 1f       	adc	r30, r30
    416c:	ff 1f       	adc	r31, r31
    416e:	a2 17       	cp	r26, r18
    4170:	b3 07       	cpc	r27, r19
    4172:	e4 07       	cpc	r30, r20
    4174:	f5 07       	cpc	r31, r21
    4176:	20 f0       	brcs	.+8      	; 0x4180 <__udivmodsi4_ep>
    4178:	a2 1b       	sub	r26, r18
    417a:	b3 0b       	sbc	r27, r19
    417c:	e4 0b       	sbc	r30, r20
    417e:	f5 0b       	sbc	r31, r21

00004180 <__udivmodsi4_ep>:
    4180:	66 1f       	adc	r22, r22
    4182:	77 1f       	adc	r23, r23
    4184:	88 1f       	adc	r24, r24
    4186:	99 1f       	adc	r25, r25
    4188:	1a 94       	dec	r1
    418a:	69 f7       	brne	.-38     	; 0x4166 <__udivmodsi4_loop>
    418c:	60 95       	com	r22
    418e:	70 95       	com	r23
    4190:	80 95       	com	r24
    4192:	90 95       	com	r25
    4194:	9b 01       	movw	r18, r22
    4196:	ac 01       	movw	r20, r24
    4198:	bd 01       	movw	r22, r26
    419a:	cf 01       	movw	r24, r30
    419c:	08 95       	ret

0000419e <__prologue_saves__>:
    419e:	2f 92       	push	r2
    41a0:	3f 92       	push	r3
    41a2:	4f 92       	push	r4
    41a4:	5f 92       	push	r5
    41a6:	6f 92       	push	r6
    41a8:	7f 92       	push	r7
    41aa:	8f 92       	push	r8
    41ac:	9f 92       	push	r9
    41ae:	af 92       	push	r10
    41b0:	bf 92       	push	r11
    41b2:	cf 92       	push	r12
    41b4:	df 92       	push	r13
    41b6:	ef 92       	push	r14
    41b8:	ff 92       	push	r15
    41ba:	0f 93       	push	r16
    41bc:	1f 93       	push	r17
    41be:	cf 93       	push	r28
    41c0:	df 93       	push	r29
    41c2:	cd b7       	in	r28, 0x3d	; 61
    41c4:	de b7       	in	r29, 0x3e	; 62
    41c6:	ca 1b       	sub	r28, r26
    41c8:	db 0b       	sbc	r29, r27
    41ca:	0f b6       	in	r0, 0x3f	; 63
    41cc:	f8 94       	cli
    41ce:	de bf       	out	0x3e, r29	; 62
    41d0:	0f be       	out	0x3f, r0	; 63
    41d2:	cd bf       	out	0x3d, r28	; 61
    41d4:	09 94       	ijmp

000041d6 <__epilogue_restores__>:
    41d6:	2a 88       	ldd	r2, Y+18	; 0x12
    41d8:	39 88       	ldd	r3, Y+17	; 0x11
    41da:	48 88       	ldd	r4, Y+16	; 0x10
    41dc:	5f 84       	ldd	r5, Y+15	; 0x0f
    41de:	6e 84       	ldd	r6, Y+14	; 0x0e
    41e0:	7d 84       	ldd	r7, Y+13	; 0x0d
    41e2:	8c 84       	ldd	r8, Y+12	; 0x0c
    41e4:	9b 84       	ldd	r9, Y+11	; 0x0b
    41e6:	aa 84       	ldd	r10, Y+10	; 0x0a
    41e8:	b9 84       	ldd	r11, Y+9	; 0x09
    41ea:	c8 84       	ldd	r12, Y+8	; 0x08
    41ec:	df 80       	ldd	r13, Y+7	; 0x07
    41ee:	ee 80       	ldd	r14, Y+6	; 0x06
    41f0:	fd 80       	ldd	r15, Y+5	; 0x05
    41f2:	0c 81       	ldd	r16, Y+4	; 0x04
    41f4:	1b 81       	ldd	r17, Y+3	; 0x03
    41f6:	aa 81       	ldd	r26, Y+2	; 0x02
    41f8:	b9 81       	ldd	r27, Y+1	; 0x01
    41fa:	ce 0f       	add	r28, r30
    41fc:	d1 1d       	adc	r29, r1
    41fe:	0f b6       	in	r0, 0x3f	; 63
    4200:	f8 94       	cli
    4202:	de bf       	out	0x3e, r29	; 62
    4204:	0f be       	out	0x3f, r0	; 63
    4206:	cd bf       	out	0x3d, r28	; 61
    4208:	ed 01       	movw	r28, r26
    420a:	08 95       	ret

0000420c <itoa>:
    420c:	fb 01       	movw	r30, r22
    420e:	9f 01       	movw	r18, r30
    4210:	e8 94       	clt
    4212:	42 30       	cpi	r20, 0x02	; 2
    4214:	c4 f0       	brlt	.+48     	; 0x4246 <itoa+0x3a>
    4216:	45 32       	cpi	r20, 0x25	; 37
    4218:	b4 f4       	brge	.+44     	; 0x4246 <itoa+0x3a>
    421a:	4a 30       	cpi	r20, 0x0A	; 10
    421c:	29 f4       	brne	.+10     	; 0x4228 <itoa+0x1c>
    421e:	97 fb       	bst	r25, 7
    4220:	1e f4       	brtc	.+6      	; 0x4228 <itoa+0x1c>
    4222:	90 95       	com	r25
    4224:	81 95       	neg	r24
    4226:	9f 4f       	sbci	r25, 0xFF	; 255
    4228:	64 2f       	mov	r22, r20
    422a:	77 27       	eor	r23, r23
    422c:	0e 94 b3 21 	call	0x4366	; 0x4366 <__udivmodhi4>
    4230:	80 5d       	subi	r24, 0xD0	; 208
    4232:	8a 33       	cpi	r24, 0x3A	; 58
    4234:	0c f0       	brlt	.+2      	; 0x4238 <itoa+0x2c>
    4236:	89 5d       	subi	r24, 0xD9	; 217
    4238:	81 93       	st	Z+, r24
    423a:	cb 01       	movw	r24, r22
    423c:	00 97       	sbiw	r24, 0x00	; 0
    423e:	a1 f7       	brne	.-24     	; 0x4228 <itoa+0x1c>
    4240:	16 f4       	brtc	.+4      	; 0x4246 <itoa+0x3a>
    4242:	5d e2       	ldi	r21, 0x2D	; 45
    4244:	51 93       	st	Z+, r21
    4246:	10 82       	st	Z, r1
    4248:	c9 01       	movw	r24, r18
    424a:	0c 94 81 21 	jmp	0x4302	; 0x4302 <strrev>

0000424e <ceil>:
    424e:	3b d0       	rcall	.+118    	; 0x42c6 <__fp_trunc>
    4250:	80 f0       	brcs	.+32     	; 0x4272 <ceil+0x24>
    4252:	9f 37       	cpi	r25, 0x7F	; 127
    4254:	40 f4       	brcc	.+16     	; 0x4266 <ceil+0x18>
    4256:	91 11       	cpse	r25, r1
    4258:	0e f4       	brtc	.+2      	; 0x425c <ceil+0xe>
    425a:	4d c0       	rjmp	.+154    	; 0x42f6 <__fp_szero>
    425c:	60 e0       	ldi	r22, 0x00	; 0
    425e:	70 e0       	ldi	r23, 0x00	; 0
    4260:	80 e8       	ldi	r24, 0x80	; 128
    4262:	9f e3       	ldi	r25, 0x3F	; 63
    4264:	08 95       	ret
    4266:	26 f0       	brts	.+8      	; 0x4270 <ceil+0x22>
    4268:	1b 16       	cp	r1, r27
    426a:	61 1d       	adc	r22, r1
    426c:	71 1d       	adc	r23, r1
    426e:	81 1d       	adc	r24, r1
    4270:	01 c0       	rjmp	.+2      	; 0x4274 <__fp_mintl>
    4272:	1b c0       	rjmp	.+54     	; 0x42aa <__fp_mpack>

00004274 <__fp_mintl>:
    4274:	88 23       	and	r24, r24
    4276:	71 f4       	brne	.+28     	; 0x4294 <__fp_mintl+0x20>
    4278:	77 23       	and	r23, r23
    427a:	21 f0       	breq	.+8      	; 0x4284 <__fp_mintl+0x10>
    427c:	98 50       	subi	r25, 0x08	; 8
    427e:	87 2b       	or	r24, r23
    4280:	76 2f       	mov	r23, r22
    4282:	07 c0       	rjmp	.+14     	; 0x4292 <__fp_mintl+0x1e>
    4284:	66 23       	and	r22, r22
    4286:	11 f4       	brne	.+4      	; 0x428c <__fp_mintl+0x18>
    4288:	99 27       	eor	r25, r25
    428a:	0d c0       	rjmp	.+26     	; 0x42a6 <__fp_mintl+0x32>
    428c:	90 51       	subi	r25, 0x10	; 16
    428e:	86 2b       	or	r24, r22
    4290:	70 e0       	ldi	r23, 0x00	; 0
    4292:	60 e0       	ldi	r22, 0x00	; 0
    4294:	2a f0       	brmi	.+10     	; 0x42a0 <__fp_mintl+0x2c>
    4296:	9a 95       	dec	r25
    4298:	66 0f       	add	r22, r22
    429a:	77 1f       	adc	r23, r23
    429c:	88 1f       	adc	r24, r24
    429e:	da f7       	brpl	.-10     	; 0x4296 <__fp_mintl+0x22>
    42a0:	88 0f       	add	r24, r24
    42a2:	96 95       	lsr	r25
    42a4:	87 95       	ror	r24
    42a6:	97 f9       	bld	r25, 7
    42a8:	08 95       	ret

000042aa <__fp_mpack>:
    42aa:	9f 3f       	cpi	r25, 0xFF	; 255
    42ac:	31 f0       	breq	.+12     	; 0x42ba <__fp_mpack_finite+0xc>

000042ae <__fp_mpack_finite>:
    42ae:	91 50       	subi	r25, 0x01	; 1
    42b0:	20 f4       	brcc	.+8      	; 0x42ba <__fp_mpack_finite+0xc>
    42b2:	87 95       	ror	r24
    42b4:	77 95       	ror	r23
    42b6:	67 95       	ror	r22
    42b8:	b7 95       	ror	r27
    42ba:	88 0f       	add	r24, r24
    42bc:	91 1d       	adc	r25, r1
    42be:	96 95       	lsr	r25
    42c0:	87 95       	ror	r24
    42c2:	97 f9       	bld	r25, 7
    42c4:	08 95       	ret

000042c6 <__fp_trunc>:
    42c6:	35 d0       	rcall	.+106    	; 0x4332 <__fp_splitA>
    42c8:	a0 f0       	brcs	.+40     	; 0x42f2 <__fp_trunc+0x2c>
    42ca:	be e7       	ldi	r27, 0x7E	; 126
    42cc:	b9 17       	cp	r27, r25
    42ce:	88 f4       	brcc	.+34     	; 0x42f2 <__fp_trunc+0x2c>
    42d0:	bb 27       	eor	r27, r27
    42d2:	9f 38       	cpi	r25, 0x8F	; 143
    42d4:	60 f4       	brcc	.+24     	; 0x42ee <__fp_trunc+0x28>
    42d6:	16 16       	cp	r1, r22
    42d8:	b1 1d       	adc	r27, r1
    42da:	67 2f       	mov	r22, r23
    42dc:	78 2f       	mov	r23, r24
    42de:	88 27       	eor	r24, r24
    42e0:	98 5f       	subi	r25, 0xF8	; 248
    42e2:	f7 cf       	rjmp	.-18     	; 0x42d2 <__fp_trunc+0xc>
    42e4:	86 95       	lsr	r24
    42e6:	77 95       	ror	r23
    42e8:	67 95       	ror	r22
    42ea:	b1 1d       	adc	r27, r1
    42ec:	93 95       	inc	r25
    42ee:	96 39       	cpi	r25, 0x96	; 150
    42f0:	c8 f3       	brcs	.-14     	; 0x42e4 <__fp_trunc+0x1e>
    42f2:	08 95       	ret

000042f4 <__fp_zero>:
    42f4:	e8 94       	clt

000042f6 <__fp_szero>:
    42f6:	bb 27       	eor	r27, r27
    42f8:	66 27       	eor	r22, r22
    42fa:	77 27       	eor	r23, r23
    42fc:	cb 01       	movw	r24, r22
    42fe:	97 f9       	bld	r25, 7
    4300:	08 95       	ret

00004302 <strrev>:
    4302:	dc 01       	movw	r26, r24
    4304:	fc 01       	movw	r30, r24
    4306:	67 2f       	mov	r22, r23
    4308:	71 91       	ld	r23, Z+
    430a:	77 23       	and	r23, r23
    430c:	e1 f7       	brne	.-8      	; 0x4306 <strrev+0x4>
    430e:	32 97       	sbiw	r30, 0x02	; 2
    4310:	04 c0       	rjmp	.+8      	; 0x431a <strrev+0x18>
    4312:	7c 91       	ld	r23, X
    4314:	6d 93       	st	X+, r22
    4316:	70 83       	st	Z, r23
    4318:	62 91       	ld	r22, -Z
    431a:	ae 17       	cp	r26, r30
    431c:	bf 07       	cpc	r27, r31
    431e:	c8 f3       	brcs	.-14     	; 0x4312 <strrev+0x10>
    4320:	08 95       	ret

00004322 <__fp_split3>:
    4322:	57 fd       	sbrc	r21, 7
    4324:	90 58       	subi	r25, 0x80	; 128
    4326:	44 0f       	add	r20, r20
    4328:	55 1f       	adc	r21, r21
    432a:	59 f0       	breq	.+22     	; 0x4342 <__fp_splitA+0x10>
    432c:	5f 3f       	cpi	r21, 0xFF	; 255
    432e:	71 f0       	breq	.+28     	; 0x434c <__fp_splitA+0x1a>
    4330:	47 95       	ror	r20

00004332 <__fp_splitA>:
    4332:	88 0f       	add	r24, r24
    4334:	97 fb       	bst	r25, 7
    4336:	99 1f       	adc	r25, r25
    4338:	61 f0       	breq	.+24     	; 0x4352 <__fp_splitA+0x20>
    433a:	9f 3f       	cpi	r25, 0xFF	; 255
    433c:	79 f0       	breq	.+30     	; 0x435c <__fp_splitA+0x2a>
    433e:	87 95       	ror	r24
    4340:	08 95       	ret
    4342:	12 16       	cp	r1, r18
    4344:	13 06       	cpc	r1, r19
    4346:	14 06       	cpc	r1, r20
    4348:	55 1f       	adc	r21, r21
    434a:	f2 cf       	rjmp	.-28     	; 0x4330 <__fp_split3+0xe>
    434c:	46 95       	lsr	r20
    434e:	f1 df       	rcall	.-30     	; 0x4332 <__fp_splitA>
    4350:	08 c0       	rjmp	.+16     	; 0x4362 <__fp_splitA+0x30>
    4352:	16 16       	cp	r1, r22
    4354:	17 06       	cpc	r1, r23
    4356:	18 06       	cpc	r1, r24
    4358:	99 1f       	adc	r25, r25
    435a:	f1 cf       	rjmp	.-30     	; 0x433e <__fp_splitA+0xc>
    435c:	86 95       	lsr	r24
    435e:	71 05       	cpc	r23, r1
    4360:	61 05       	cpc	r22, r1
    4362:	08 94       	sec
    4364:	08 95       	ret

00004366 <__udivmodhi4>:
    4366:	aa 1b       	sub	r26, r26
    4368:	bb 1b       	sub	r27, r27
    436a:	51 e1       	ldi	r21, 0x11	; 17
    436c:	07 c0       	rjmp	.+14     	; 0x437c <__udivmodhi4_ep>

0000436e <__udivmodhi4_loop>:
    436e:	aa 1f       	adc	r26, r26
    4370:	bb 1f       	adc	r27, r27
    4372:	a6 17       	cp	r26, r22
    4374:	b7 07       	cpc	r27, r23
    4376:	10 f0       	brcs	.+4      	; 0x437c <__udivmodhi4_ep>
    4378:	a6 1b       	sub	r26, r22
    437a:	b7 0b       	sbc	r27, r23

0000437c <__udivmodhi4_ep>:
    437c:	88 1f       	adc	r24, r24
    437e:	99 1f       	adc	r25, r25
    4380:	5a 95       	dec	r21
    4382:	a9 f7       	brne	.-22     	; 0x436e <__udivmodhi4_loop>
    4384:	80 95       	com	r24
    4386:	90 95       	com	r25
    4388:	bc 01       	movw	r22, r24
    438a:	cd 01       	movw	r24, r26
    438c:	08 95       	ret

0000438e <_exit>:
    438e:	f8 94       	cli

00004390 <__stop_program>:
    4390:	ff cf       	rjmp	.-2      	; 0x4390 <__stop_program>
